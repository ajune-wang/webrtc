{
  "comments": [
    {
      "key": {
        "uuid": "606919e1_36c14066",
        "filename": "modules/rtp_rtcp/include/flexfec_sender.h",
        "patchSetId": 4
      },
      "lineNbr": 41,
      "author": {
        "id": 5019
      },
      "writtenOn": "2018-12-19T10:01:49Z",
      "side": 1,
      "message": "May be rid should be logically placed after mid\nsince rtp stream first identified by mid (if any), then, within that mid - by rid",
      "range": {
        "startLine": 40,
        "startChar": 39,
        "endLine": 41,
        "endChar": 0
      },
      "revId": "868d0e5a42f4805138747407eafca7c7579f1114",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c9347f03_1d46c317",
        "filename": "modules/rtp_rtcp/include/flexfec_sender.h",
        "patchSetId": 4
      },
      "lineNbr": 41,
      "author": {
        "id": 8244
      },
      "writtenOn": "2018-12-21T00:15:11Z",
      "side": 1,
      "message": "will revert this file and send in a different CL",
      "parentUuid": "606919e1_36c14066",
      "range": {
        "startLine": 40,
        "startChar": 39,
        "endLine": 41,
        "endChar": 0
      },
      "revId": "868d0e5a42f4805138747407eafca7c7579f1114",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3aad5f56_d89f204e",
        "filename": "modules/rtp_rtcp/source/flexfec_sender.cc",
        "patchSetId": 4
      },
      "lineNbr": 57,
      "author": {
        "id": 5019
      },
      "writtenOn": "2018-12-19T10:01:49Z",
      "side": 1,
      "message": "for current implementation of the flexfec (that protect only single ssrc) that make sense,\nbut what value would repared rtp stream id take when flexfec is expanded to mix packets from different ssrcs, different rtp streams?",
      "revId": "868d0e5a42f4805138747407eafca7c7579f1114",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0dce4822_829468d7",
        "filename": "modules/rtp_rtcp/source/flexfec_sender.cc",
        "patchSetId": 4
      },
      "lineNbr": 57,
      "author": {
        "id": 8244
      },
      "writtenOn": "2018-12-21T00:15:11Z",
      "side": 1,
      "message": "I guess that would depend on the implementation of how different ssrcs are mixed in, but i have some idea.\nFor now, i will revert changes to this sender and send them out as a separate CL (probably towards the end of the simulcast project, as it is lower priority).\nI think the separation i made in this CL doesn\u0027t make sense for flexfec, as the receiver and sender should both be in the same CL. the other senders don\u0027t require any change to the receivers.",
      "parentUuid": "3aad5f56_d89f204e",
      "revId": "868d0e5a42f4805138747407eafca7c7579f1114",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8a578ab3_b9eb5976",
        "filename": "modules/rtp_rtcp/source/rtp_header_extensions.h",
        "patchSetId": 4
      },
      "lineNbr": 251,
      "author": {
        "id": 5019
      },
      "writtenOn": "2018-12-19T10:01:49Z",
      "side": 1,
      "message": "kValueSizeBytes defined for extensions that always use same size (few years ago there were no other extensions, so back then it seemed like a good idea)\nPlease prefer different name (e.g. kMaxValueSizeBytes, like Mid uses)\n\nhaving this constants defined enables functionality that shouldn\u0027t be enabled for dynamic size extensions. (e.g. RtpPacket::ReserveExtension)",
      "range": {
        "startLine": 251,
        "startChar": 27,
        "endLine": 251,
        "endChar": 42
      },
      "revId": "868d0e5a42f4805138747407eafca7c7579f1114",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dd31f831_e7fee216",
        "filename": "modules/rtp_rtcp/source/rtp_header_extensions.h",
        "patchSetId": 4
      },
      "lineNbr": 251,
      "author": {
        "id": 8244
      },
      "writtenOn": "2018-12-21T00:15:11Z",
      "side": 1,
      "message": "I\u0027ve gone over some of the inner workings of the code, and i agree. enabling ReserveExtension is dangerous since there is no guard to check the actual size of the value (compared to the allocated buffer size). Using SetExtension is safe, so we should only enable that.",
      "parentUuid": "8a578ab3_b9eb5976",
      "range": {
        "startLine": 251,
        "startChar": 27,
        "endLine": 251,
        "endChar": 42
      },
      "revId": "868d0e5a42f4805138747407eafca7c7579f1114",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bf32a5e6_554ab052",
        "filename": "modules/rtp_rtcp/source/rtp_sender.cc",
        "patchSetId": 4
      },
      "lineNbr": 1271,
      "author": {
        "id": 5019
      },
      "writtenOn": "2018-12-19T10:01:49Z",
      "side": 1,
      "message": "\"avoid comments that just repeat what the code does\"\nhttps://testing.googleblog.com/2017/07/code-health-to-comment-or-not-to-comment.html",
      "revId": "868d0e5a42f4805138747407eafca7c7579f1114",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7db8ac0f_e3445489",
        "filename": "modules/rtp_rtcp/source/rtp_sender.cc",
        "patchSetId": 4
      },
      "lineNbr": 1271,
      "author": {
        "id": 8244
      },
      "writtenOn": "2018-12-21T00:15:11Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "bf32a5e6_554ab052",
      "revId": "868d0e5a42f4805138747407eafca7c7579f1114",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "492bc891_ef5670ef",
        "filename": "modules/rtp_rtcp/source/rtp_sender.cc",
        "patchSetId": 4
      },
      "lineNbr": 1368,
      "author": {
        "id": 5019
      },
      "writtenOn": "2018-12-19T10:01:49Z",
      "side": 1,
      "message": "rid points to the rtx stream (not to the original media stream)\nrepaired rid describes what media stream current packet repairs.\n\nSo my understanding is that rid shouldn\u0027t be copied into into rtx packets as rid extension, but as repaired rid. In additional a different rid value might be used just for the rid extension in an rtx packet.",
      "range": {
        "startLine": 1368,
        "startChar": 4,
        "endLine": 1368,
        "endChar": 62
      },
      "revId": "868d0e5a42f4805138747407eafca7c7579f1114",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "05a1d521_e632b858",
        "filename": "modules/rtp_rtcp/source/rtp_sender.cc",
        "patchSetId": 4
      },
      "lineNbr": 1368,
      "author": {
        "id": 8244
      },
      "writtenOn": "2018-12-21T00:15:11Z",
      "side": 1,
      "message": "you are correct that the rid header can be interpreted to identify the media stream.\nthe spec is unclear on this - what happens when both rid and repaired-rid are present (and what if they are identical). there is also no negotiation (and none is required) to communicate the rids of repair streams, so i would interpret the spec as saying - inspect the repair rid first, then the rid. This is how our current demux implementation works as well.\n\nI do understand and appreciate your concern. i will look into removing the header altogether.",
      "parentUuid": "492bc891_ef5670ef",
      "range": {
        "startLine": 1368,
        "startChar": 4,
        "endLine": 1368,
        "endChar": 62
      },
      "revId": "868d0e5a42f4805138747407eafca7c7579f1114",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "85ac8ab0_4eb27b0d",
        "filename": "modules/rtp_rtcp/source/rtp_sender_unittest.cc",
        "patchSetId": 4
      },
      "lineNbr": 1388,
      "author": {
        "id": 5019
      },
      "writtenOn": "2018-12-19T10:01:49Z",
      "side": 1,
      "message": "avoid for loops in tests. (if an expect below fails, how would you know if it is 1st packet or 2nd one?)\n\nIn this test I\u0027m not sure why is it helpful to check two packets. one probably is enough.\n\n(I see Mid test above uses same loop, but I find it a bad example, against http://go/unit-test-practices#control-structures)",
      "revId": "868d0e5a42f4805138747407eafca7c7579f1114",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2a686bbe_cf069c83",
        "filename": "modules/rtp_rtcp/source/rtp_sender_unittest.cc",
        "patchSetId": 4
      },
      "lineNbr": 1388,
      "author": {
        "id": 8244
      },
      "writtenOn": "2018-12-21T00:15:11Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "85ac8ab0_4eb27b0d",
      "revId": "868d0e5a42f4805138747407eafca7c7579f1114",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e02130ea_ccb8081c",
        "filename": "modules/rtp_rtcp/source/rtp_sender_unittest.cc",
        "patchSetId": 4
      },
      "lineNbr": 1426,
      "author": {
        "id": 5019
      },
      "writtenOn": "2018-12-19T10:01:49Z",
      "side": 1,
      "message": "as mentioned in one of previous comments,\n\nI would also \nEXPECT_FALSE(rtx_packet.HasExtension\u003cRtpStreamId\u003e());\n\n(or rtp_sender should be configured with an extra rid for the rtx stream)",
      "revId": "868d0e5a42f4805138747407eafca7c7579f1114",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b6b45919_d82a004c",
        "filename": "modules/rtp_rtcp/source/rtp_sender_unittest.cc",
        "patchSetId": 4
      },
      "lineNbr": 1426,
      "author": {
        "id": 8244
      },
      "writtenOn": "2018-12-21T00:15:11Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e02130ea_ccb8081c",
      "revId": "868d0e5a42f4805138747407eafca7c7579f1114",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5a55e749_fd01b001",
        "filename": "pc/mediasession.cc",
        "patchSetId": 4
      },
      "lineNbr": 1282,
      "author": {
        "id": 5019
      },
      "writtenOn": "2018-12-19T10:01:49Z",
      "side": 1,
      "message": "while moving it out may be also simplify this code, instead of push_back(T(a, b)) use emplace_back(a, b):\n\nextensions-\u003eemplace_back(\n      webrtc::RtpExtension::kMidUri, webrtc::RtpExtension::kMidDefaultId);",
      "range": {
        "startLine": 1281,
        "startChar": 2,
        "endLine": 1282,
        "endChar": 75
      },
      "revId": "868d0e5a42f4805138747407eafca7c7579f1114",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "58618bb6_ebee542f",
        "filename": "pc/mediasession.cc",
        "patchSetId": 4
      },
      "lineNbr": 1282,
      "author": {
        "id": 8244
      },
      "writtenOn": "2018-12-21T00:15:11Z",
      "side": 1,
      "message": "I respectfully disagree. While this would reduce the number of characters in the line, it would not simplify the code (in my opinion), nor would it be more efficient (since C++11, i believe).\nMy reasons are:\n1. push_back(\u003cactual object being pushed back\u003e) is clearer than emplace_back(\u003carguments for future object\u003e).\n2. it also breaks down (some) developer tools that will not recognize that this emplace_back is actually a reference to the ctor.\nas an example:\nhttps://cs.chromium.org/chromium/src/third_party/webrtc/logging/rtc_event_log/rtc_stream_config.cc?sq\u003dpackage:chromium\u0026dr\u003dCSs\u0026g\u003d0\u0026l\u003d33\nthere are no useful references to this ctor, because it is behind an emplace.",
      "parentUuid": "5a55e749_fd01b001",
      "range": {
        "startLine": 1281,
        "startChar": 2,
        "endLine": 1282,
        "endChar": 75
      },
      "revId": "868d0e5a42f4805138747407eafca7c7579f1114",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "780e1ba2_1b837361",
        "filename": "pc/mediasession_unittest.cc",
        "patchSetId": 4
      },
      "lineNbr": 3719,
      "author": {
        "id": 5019
      },
      "writtenOn": "2018-12-19T10:01:49Z",
      "side": 1,
      "message": "just curious, what is use case of rid for audio?\n(I understand rid for video is used for simulcast)",
      "range": {
        "startLine": 3719,
        "startChar": 43,
        "endLine": 3719,
        "endChar": 77
      },
      "revId": "868d0e5a42f4805138747407eafca7c7579f1114",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "de6e63c7_df3618d3",
        "filename": "pc/mediasession_unittest.cc",
        "patchSetId": 4
      },
      "lineNbr": 3719,
      "author": {
        "id": 8244
      },
      "writtenOn": "2018-12-21T00:15:11Z",
      "side": 1,
      "message": "rids are a general mechanism to identify and further restrict tracks.\nwhile it seems that they are only useful in the context of simulcast, there is nothing that should restrict them to video (or that scenario).\nas such, i have implemented them independently of the media type.",
      "parentUuid": "780e1ba2_1b837361",
      "range": {
        "startLine": 3719,
        "startChar": 43,
        "endLine": 3719,
        "endChar": 77
      },
      "revId": "868d0e5a42f4805138747407eafca7c7579f1114",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    }
  ]
}