{
  "comments": [
    {
      "key": {
        "uuid": "6461096d_2133953c",
        "filename": "p2p/base/p2p_transport_channel.cc",
        "patchSetId": 6
      },
      "lineNbr": 1913,
      "author": {
        "id": 6646
      },
      "writtenOn": "2019-11-11T22:44:47Z",
      "side": 1,
      "message": "I see and thanks for the explanation. If this is the motivation of adding this method, we can instead add an ID in calls to schedule the async RequestSortAndStateUpdate (please see AsyncInvoker::AsyncInvoke), and do invoker_.Flush() here for the same message ID to clear any pending sorting. This way we could have follow the same convention using AsyncInvoker without adding redundant sorting.",
      "range": {
        "startLine": 1912,
        "startChar": 5,
        "endLine": 1913,
        "endChar": 49
      },
      "revId": "dc80b4f1a44f39caf39d76d1341aa23baad01f3f",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0512617f_1ef2b9bf",
        "filename": "p2p/base/p2p_transport_channel.cc",
        "patchSetId": 6
      },
      "lineNbr": 1913,
      "author": {
        "id": 5613
      },
      "writtenOn": "2019-11-13T06:44:46Z",
      "side": 1,
      "message": "the Flush has the side-effect of also running all invocations *before* the specified ID,\nright ? I.e it can execute arbitrary amount of work...",
      "parentUuid": "6461096d_2133953c",
      "range": {
        "startLine": 1912,
        "startChar": 5,
        "endLine": 1913,
        "endChar": 49
      },
      "revId": "dc80b4f1a44f39caf39d76d1341aa23baad01f3f",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6bafee9f_fcc81eb8",
        "filename": "p2p/base/p2p_transport_channel.cc",
        "patchSetId": 6
      },
      "lineNbr": 1913,
      "author": {
        "id": 6252
      },
      "writtenOn": "2019-11-13T18:35:58Z",
      "side": 1,
      "message": "Perhaps I do not understand your intention. \nIsn\u0027t the issue of a pending sort request protected by sort_dirty_?\nWhen the first come in, it set sort_dirty_ to true. \nWhen sort starts, it set sort_dirty_ to false.",
      "parentUuid": "0512617f_1ef2b9bf",
      "range": {
        "startLine": 1912,
        "startChar": 5,
        "endLine": 1913,
        "endChar": 49
      },
      "revId": "dc80b4f1a44f39caf39d76d1341aa23baad01f3f",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "287ad71a_00c7aaf9",
        "filename": "p2p/base/p2p_transport_channel.cc",
        "patchSetId": 6
      },
      "lineNbr": 1913,
      "author": {
        "id": 6646
      },
      "writtenOn": "2019-11-13T18:58:45Z",
      "side": 1,
      "message": "Re Flush: IIUC, Flush uses Thread::Clear, which matches tasks against the given ID (a wildcard ID if not provided). If RequestSortAndStateUpdate is AsyncInvoke\u0027d with the same ID (but no ID is provided in the current code), Flush would only execute all pending RequestSortAndStateUpdate. Let me know if I\u0027m missing anything.",
      "parentUuid": "6bafee9f_fcc81eb8",
      "range": {
        "startLine": 1912,
        "startChar": 5,
        "endLine": 1913,
        "endChar": 49
      },
      "revId": "dc80b4f1a44f39caf39d76d1341aa23baad01f3f",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "baac3800_0ac4b67b",
        "filename": "p2p/base/p2p_transport_channel.cc",
        "patchSetId": 6
      },
      "lineNbr": 2032,
      "author": {
        "id": 6252
      },
      "writtenOn": "2019-11-13T18:35:58Z",
      "side": 1,
      "message": "Can you explain why a sorting is needed here.",
      "range": {
        "startLine": 2032,
        "startChar": 2,
        "endLine": 2032,
        "endChar": 25
      },
      "revId": "dc80b4f1a44f39caf39d76d1341aa23baad01f3f",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1cebb6b9_02f88473",
        "filename": "p2p/base/p2p_transport_channel.cc",
        "patchSetId": 6
      },
      "lineNbr": 2787,
      "author": {
        "id": 6252
      },
      "writtenOn": "2019-11-13T18:35:58Z",
      "side": 1,
      "message": "MorePingable is called pretty often. Can you explain why it is needed here?",
      "range": {
        "startLine": 2787,
        "startChar": 2,
        "endLine": 2787,
        "endChar": 25
      },
      "revId": "dc80b4f1a44f39caf39d76d1341aa23baad01f3f",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    }
  ]
}