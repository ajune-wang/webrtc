{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "55b8ef10_f2f6e71e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 14874
      },
      "writtenOn": "2022-04-21T18:01:00Z",
      "side": 1,
      "message": "this is the sugar coating for the not-yet-spec stat I want ;-)",
      "revId": "a0542652a5afaaeb8d779a33721c97298e9d5905",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fdd1609a_ef1ac217",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5142
      },
      "writtenOn": "2022-04-22T10:21:52Z",
      "side": 1,
      "message": "CC Ilya for question below",
      "revId": "a0542652a5afaaeb8d779a33721c97298e9d5905",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9c452392_3223c3f8",
        "filename": "api/stats/rtcstats_objects.h",
        "patchSetId": 1
      },
      "lineNbr": 512,
      "author": {
        "id": 5142
      },
      "writtenOn": "2022-04-22T08:06:44Z",
      "side": 1,
      "message": "Please add a comment saying this is currently only implemented for video, not audio.\n\nAlternatively, is there anything preventing also implementing it for audio?",
      "revId": "a0542652a5afaaeb8d779a33721c97298e9d5905",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "dba475d2_81f01928",
        "filename": "api/stats/rtcstats_objects.h",
        "patchSetId": 1
      },
      "lineNbr": 512,
      "author": {
        "id": 14874
      },
      "writtenOn": "2022-04-22T12:08:05Z",
      "side": 1,
      "message": "done by moving frames_received, everything below that is video.",
      "parentUuid": "9c452392_3223c3f8",
      "revId": "a0542652a5afaaeb8d779a33721c97298e9d5905",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2b852b02_4e260fe5",
        "filename": "video/receive_statistics_proxy2.cc",
        "patchSetId": 1
      },
      "lineNbr": 834,
      "author": {
        "id": 14874
      },
      "writtenOn": "2022-04-22T12:08:05Z",
      "side": 1,
      "message": "note: this is mainly due to tests *not* filling packet_infos (or tests not setting a receive time...))",
      "revId": "a0542652a5afaaeb8d779a33721c97298e9d5905",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c45b4db4_fd5f98bd",
        "filename": "video/receive_statistics_proxy2.cc",
        "patchSetId": 1
      },
      "lineNbr": 834,
      "author": {
        "id": 5142
      },
      "writtenOn": "2022-04-25T06:48:35Z",
      "side": 1,
      "message": "It\u0027s only empty in testing, right? Processing time shouldn\u0027t be zero otherwise.\nConsider adding a comment:\n\n// In test environments, packet_infos() may be empty.",
      "parentUuid": "2b852b02_4e260fe5",
      "revId": "a0542652a5afaaeb8d779a33721c97298e9d5905",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "56cae3ca_0677c131",
        "filename": "video/receive_statistics_proxy2.cc",
        "patchSetId": 1
      },
      "lineNbr": 834,
      "author": {
        "id": 14874
      },
      "writtenOn": "2022-04-25T10:30:23Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c45b4db4_fd5f98bd",
      "revId": "a0542652a5afaaeb8d779a33721c97298e9d5905",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b9782bdb_0e4c5c13",
        "filename": "video/receive_statistics_proxy2.cc",
        "patchSetId": 1
      },
      "lineNbr": 840,
      "author": {
        "id": 5117
      },
      "writtenOn": "2022-04-22T10:32:57Z",
      "side": 1,
      "message": "nit: could you please call currentTime() once? It also used below wheere |meta| is created.",
      "range": {
        "startLine": 840,
        "startChar": 12,
        "endLine": 840,
        "endChar": 57
      },
      "revId": "a0542652a5afaaeb8d779a33721c97298e9d5905",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e4e522bf_8d905475",
        "filename": "video/receive_statistics_proxy2.cc",
        "patchSetId": 1
      },
      "lineNbr": 840,
      "author": {
        "id": 14874
      },
      "writtenOn": "2022-04-22T12:08:05Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b9782bdb_0e4c5c13",
      "range": {
        "startLine": 840,
        "startChar": 12,
        "endLine": 840,
        "endChar": 57
      },
      "revId": "a0542652a5afaaeb8d779a33721c97298e9d5905",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2b67eeab_a3b5af81",
        "filename": "video/receive_statistics_proxy2.cc",
        "patchSetId": 1
      },
      "lineNbr": 851,
      "author": {
        "id": 5142
      },
      "writtenOn": "2022-04-22T08:06:44Z",
      "side": 1,
      "message": "If the worker thread is busy, there could be several milliseconds\u0027 worth of delay that happens between posting the task and the posted OnDecodedFrame() happening, which is the moment in time where framesDecoded happens to be incremented.\n\nI\u0027m wondering if the \"processing time\" should also cover this delay (by passing first_packet_receive time as the argument in the PostTask, and calculate the delay inside the posted OnDecodedFrame() instead) or if it shouldn\u0027t cover this delay (current CL already measures the time that decoding completed).\n\nThe spec does say to measure until the frame is \"ready for playout\". But the spec also says that \"typically ready for layout here means after the [...] video frame is fully decoded by the decoder\"... typically.\n\nConsidering we already have a totalDecodeTime, I think the intent behind totalProcessingTime would be to cover as much of the delay as possible, which leads me to believe maybe we should also cover the delay of this PostTask. But that\u0027s ONLY assuming the MediaStreamTrack\u0027s frame passes through the worker thread as well. Maybe it doesn\u0027t?\n\nWhen does the decoded frame get handed off to the MediaStreamTrack? Before or after the PostTask?",
      "revId": "a0542652a5afaaeb8d779a33721c97298e9d5905",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e50f0cf3_9b71f421",
        "filename": "video/receive_statistics_proxy2.cc",
        "patchSetId": 1
      },
      "lineNbr": 851,
      "author": {
        "id": 5142
      },
      "writtenOn": "2022-04-22T10:21:52Z",
      "side": 1,
      "message": "+Ilya has the video frame already been passed to the rest of the pipeline when this PostTask happens or not? Looks like only meta data is being passed in the PostTask.",
      "parentUuid": "2b67eeab_a3b5af81",
      "revId": "a0542652a5afaaeb8d779a33721c97298e9d5905",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e7ef9bbf_1261abf6",
        "filename": "video/receive_statistics_proxy2.cc",
        "patchSetId": 1
      },
      "lineNbr": 851,
      "author": {
        "id": 5117
      },
      "writtenOn": "2022-04-22T10:32:57Z",
      "side": 1,
      "message": "Nope, the frame will be delivered after this code here is executed:\nhttps://source.chromium.org/chromium/chromium/src/+/main:third_party/webrtc/video/video_stream_decoder2.cc;l\u003d51;drc\u003d5e62802ab420dc1743a1824ec4b537a730b2b24b",
      "parentUuid": "e50f0cf3_9b71f421",
      "revId": "a0542652a5afaaeb8d779a33721c97298e9d5905",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "868bdede_94dbd0cb",
        "filename": "video/receive_statistics_proxy2.cc",
        "patchSetId": 1
      },
      "lineNbr": 851,
      "author": {
        "id": 5142
      },
      "writtenOn": "2022-04-22T11:38:01Z",
      "side": 1,
      "message": "OK thanks, then I think the way the CL correct the way it is now.\n\nStill want to see tests and a comment that we only collect it for video before LGTM",
      "parentUuid": "e7ef9bbf_1261abf6",
      "revId": "a0542652a5afaaeb8d779a33721c97298e9d5905",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dcc4e5cb_b81b29b0",
        "filename": "video/receive_statistics_proxy2.cc",
        "patchSetId": 1
      },
      "lineNbr": 851,
      "author": {
        "id": 5142
      },
      "writtenOn": "2022-04-22T11:40:24Z",
      "side": 1,
      "message": "There\u0027s a risk of frame copies and other delays after the frame leaves WebRTC and enters Chromium, but it seems out-of-scope to improve the metric beyond what this CL is doing right now.",
      "parentUuid": "868bdede_94dbd0cb",
      "revId": "a0542652a5afaaeb8d779a33721c97298e9d5905",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b3bcb265_1750a0d0",
        "filename": "video/receive_statistics_proxy2.cc",
        "patchSetId": 1
      },
      "lineNbr": 851,
      "author": {
        "id": 14874
      },
      "writtenOn": "2022-04-22T12:08:05Z",
      "side": 1,
      "message": "The definition is \"to the time the corresponding sample or frame is decoded (decoded timestamp)\" which seems correct (and hey, useful and implementable! Presentation timestamp is different and a bit harder to get).\nIn general I think much of the delay we measure with this stat is the frame assembly time for which we should have a separate stat. Working on that but this was an easy drive-by fix :-)\n\nBonus that I didn\u0027t think of: we can measure insertable streams decryption delay!",
      "parentUuid": "dcc4e5cb_b81b29b0",
      "revId": "a0542652a5afaaeb8d779a33721c97298e9d5905",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2e90edb5_f19f228a",
        "filename": "video/receive_statistics_proxy2.cc",
        "patchSetId": 1
      },
      "lineNbr": 851,
      "author": {
        "id": 5142
      },
      "writtenOn": "2022-04-25T06:48:35Z",
      "side": 1,
      "message": "Yay!",
      "parentUuid": "b3bcb265_1750a0d0",
      "revId": "a0542652a5afaaeb8d779a33721c97298e9d5905",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b14fd15d_ca5edf08",
        "filename": "video/receive_statistics_proxy2_unittest.cc",
        "patchSetId": 1
      },
      "lineNbr": 1345,
      "author": {
        "id": 5142
      },
      "writtenOn": "2022-04-22T08:06:44Z",
      "side": 1,
      "message": "Can you add a test on this layer that tests total_processing_delay_ms?\nYou can use the fake_clock_\n\nCan you sanity check that totalProcessingDelay / framesDecoded make sense?",
      "revId": "a0542652a5afaaeb8d779a33721c97298e9d5905",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cac8c718_3d8b3237",
        "filename": "video/receive_statistics_proxy2_unittest.cc",
        "patchSetId": 1
      },
      "lineNbr": 1345,
      "author": {
        "id": 14874
      },
      "writtenOn": "2022-04-22T12:08:05Z",
      "side": 1,
      "message": "Done (for the first), planning to add a webrtc-internals calculator for the second.",
      "parentUuid": "b14fd15d_ca5edf08",
      "revId": "a0542652a5afaaeb8d779a33721c97298e9d5905",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cf9f1474_5b66fc32",
        "filename": "video/receive_statistics_proxy2_unittest.cc",
        "patchSetId": 1
      },
      "lineNbr": 1345,
      "author": {
        "id": 5142
      },
      "writtenOn": "2022-04-25T06:48:35Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "cac8c718_3d8b3237",
      "revId": "a0542652a5afaaeb8d779a33721c97298e9d5905",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    }
  ]
}