{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "1c61422d_0d9abec9",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5634
      },
      "writtenOn": "2023-02-03T14:52:43Z",
      "side": 1,
      "message": "Finally got a test for the function I needed to test. And yes, all the steps seem necessary.",
      "revId": "ca75a9753881dca0ab63a51a113db02ec258a018",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a48b023e_f94ad9fe",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5019
      },
      "writtenOn": "2023-02-03T15:39:08Z",
      "side": 1,
      "message": "mostly small style comments.\n\nfor RTT estimation I would prefer to test desired behavior instead of \u0027by accident\u0027 behavior.",
      "revId": "ca75a9753881dca0ab63a51a113db02ec258a018",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c37edfa0_2f30a4eb",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5634
      },
      "writtenOn": "2023-02-03T17:12:59Z",
      "side": 1,
      "message": "I dimly percieve the logic involved here. I don\u0027t think it\u0027s accidental, but I\u0027m still in two minds on whether it is right.\nThis is what works now - the RR is necessary to get RTT populated, and the RTT must be populated before the SR reports are accepted as a basis for computing the capture start time. But this logic seems convouluted.",
      "parentUuid": "a48b023e_f94ad9fe",
      "revId": "ca75a9753881dca0ab63a51a113db02ec258a018",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5261a9a2_b27953d0",
        "filename": "audio/channel_receive_unittest.cc",
        "patchSetId": 2
      },
      "lineNbr": 81,
      "author": {
        "id": 5019
      },
      "writtenOn": "2023-02-03T15:39:08Z",
      "side": 1,
      "message": "does it need to align with time_controller_.GetClock() ?",
      "range": {
        "startLine": 81,
        "startChar": 11,
        "endLine": 81,
        "endChar": 28
      },
      "revId": "ca75a9753881dca0ab63a51a113db02ec258a018",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9530624c_8f85612f",
        "filename": "audio/channel_receive_unittest.cc",
        "patchSetId": 2
      },
      "lineNbr": 81,
      "author": {
        "id": 5634
      },
      "writtenOn": "2023-02-03T17:12:59Z",
      "side": 1,
      "message": "The GlobalTimeController overrides rtc::TimeMillis(), so shouldn\u0027t need to.",
      "parentUuid": "5261a9a2_b27953d0",
      "range": {
        "startLine": 81,
        "startChar": 11,
        "endLine": 81,
        "endChar": 28
      },
      "revId": "ca75a9753881dca0ab63a51a113db02ec258a018",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1a522fdd_ace39670",
        "filename": "audio/channel_receive_unittest.cc",
        "patchSetId": 2
      },
      "lineNbr": 88,
      "author": {
        "id": 5019
      },
      "writtenOn": "2023-02-03T15:39:08Z",
      "side": 1,
      "message": "likely you want to remove this log line before submitting",
      "revId": "ca75a9753881dca0ab63a51a113db02ec258a018",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "afd74bfc_160fef61",
        "filename": "audio/channel_receive_unittest.cc",
        "patchSetId": 2
      },
      "lineNbr": 88,
      "author": {
        "id": 5634
      },
      "writtenOn": "2023-02-03T17:12:59Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1a522fdd_ace39670",
      "revId": "ca75a9753881dca0ab63a51a113db02ec258a018",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b42cf5a9_d9da42bd",
        "filename": "audio/channel_receive_unittest.cc",
        "patchSetId": 2
      },
      "lineNbr": 97,
      "author": {
        "id": 5019
      },
      "writtenOn": "2023-02-03T15:39:08Z",
      "side": 1,
      "message": "do not return `const T`, return `T` instead\n(const here would disable some optimizations, but won\u0027t add any safety)",
      "range": {
        "startLine": 97,
        "startChar": 2,
        "endLine": 97,
        "endChar": 28
      },
      "revId": "ca75a9753881dca0ab63a51a113db02ec258a018",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "889c97f1_79df3ce5",
        "filename": "audio/channel_receive_unittest.cc",
        "patchSetId": 2
      },
      "lineNbr": 97,
      "author": {
        "id": 5634
      },
      "writtenOn": "2023-02-03T17:12:59Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b42cf5a9_d9da42bd",
      "range": {
        "startLine": 97,
        "startChar": 2,
        "endLine": 97,
        "endChar": 28
      },
      "revId": "ca75a9753881dca0ab63a51a113db02ec258a018",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "00258ef8_445f38a8",
        "filename": "audio/channel_receive_unittest.cc",
        "patchSetId": 2
      },
      "lineNbr": 99,
      "author": {
        "id": 5019
      },
      "writtenOn": "2023-02-03T15:39:08Z",
      "side": 1,
      "message": "this is the same as\nstd::vector\u003cuint8_t\u003e packet(1024);",
      "range": {
        "startLine": 98,
        "startChar": 4,
        "endLine": 99,
        "endChar": 54
      },
      "revId": "ca75a9753881dca0ab63a51a113db02ec258a018",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a54224ba_bf6d4dd8",
        "filename": "audio/channel_receive_unittest.cc",
        "patchSetId": 2
      },
      "lineNbr": 99,
      "author": {
        "id": 5634
      },
      "writtenOn": "2023-02-03T17:12:59Z",
      "side": 1,
      "message": "report.Create doesn\u0027t have the option to expand the vector, I find the resize inconvenient, but seems like the cleanest way.",
      "parentUuid": "00258ef8_445f38a8",
      "range": {
        "startLine": 98,
        "startChar": 4,
        "endLine": 99,
        "endChar": 54
      },
      "revId": "ca75a9753881dca0ab63a51a113db02ec258a018",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e3b89f92_23417b99",
        "filename": "audio/channel_receive_unittest.cc",
        "patchSetId": 2
      },
      "lineNbr": 99,
      "author": {
        "id": 5019
      },
      "writtenOn": "2023-02-06T11:13:51Z",
      "side": 1,
      "message": "I just mean that calling resize right after vector construction is the same as passing size as the construction parameter.\n\nAs to the overall cleanest way, I still think that RtcpPacket::Build() is the cleanest way, with rtcp::CompountPacket helper to combine 2 RTCP packets into one.",
      "parentUuid": "a54224ba_bf6d4dd8",
      "range": {
        "startLine": 98,
        "startChar": 4,
        "endLine": 99,
        "endChar": 54
      },
      "revId": "ca75a9753881dca0ab63a51a113db02ec258a018",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e5de3e42_949c7c8c",
        "filename": "audio/channel_receive_unittest.cc",
        "patchSetId": 2
      },
      "lineNbr": 112,
      "author": {
        "id": 5019
      },
      "writtenOn": "2023-02-03T15:39:08Z",
      "side": 1,
      "message": "instead of creating packets \u0027manually\u0027 you may use rtcp::CompountPacket helper:\nauto report \u003d std::make_unique\u003crtcp::SenderReport\u003e();\nreport-\u003eSet(...);\nauto sdes \u003d std::make_unique\u003crtcp::Sdes\u003e();\nsdes-\u003eSet(...);\nrtcp::CompoundPacket p;\np.Append(std::move(report));\np.Append(std::move(sdes));\nreturn p.Build(); // that would return rtc::Buffer\n\nSuch creation is less efficient, but should be more robust e.g. takes care of buffer size, and would make it easier to refactor RtcpPacket::Create function in the future - that funtion currently has horrible api.",
      "revId": "ca75a9753881dca0ab63a51a113db02ec258a018",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "98445d33_93233519",
        "filename": "audio/channel_receive_unittest.cc",
        "patchSetId": 2
      },
      "lineNbr": 112,
      "author": {
        "id": 5634
      },
      "writtenOn": "2023-02-03T17:12:59Z",
      "side": 1,
      "message": "Nice to know!\nseems like a good idea (and agree on the horror of RtcpPacket::Create), but don\u0027t want to do this on Friday afternoon....",
      "parentUuid": "e5de3e42_949c7c8c",
      "revId": "ca75a9753881dca0ab63a51a113db02ec258a018",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "73e4b1e8_e0c34645",
        "filename": "audio/channel_receive_unittest.cc",
        "patchSetId": 2
      },
      "lineNbr": 124,
      "author": {
        "id": 5019
      },
      "writtenOn": "2023-02-03T15:39:08Z",
      "side": 1,
      "message": "there is `CompactNtp` helper exactly for this\n\nhttps://source.chromium.org/chromium/chromium/src/+/main:third_party/webrtc/modules/rtp_rtcp/source/time_util.h;l\u003d30;drc\u003df987c78d1412444a0565996fd6c1f335660c3cd2",
      "range": {
        "startLine": 123,
        "startChar": 20,
        "endLine": 124,
        "endChar": 48
      },
      "revId": "ca75a9753881dca0ab63a51a113db02ec258a018",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0aedf185_daaaba23",
        "filename": "audio/channel_receive_unittest.cc",
        "patchSetId": 2
      },
      "lineNbr": 124,
      "author": {
        "id": 5634
      },
      "writtenOn": "2023-02-03T17:12:59Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "73e4b1e8_e0c34645",
      "range": {
        "startLine": 123,
        "startChar": 20,
        "endLine": 124,
        "endChar": 48
      },
      "revId": "ca75a9753881dca0ab63a51a113db02ec258a018",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "66dcc2bb_6c4213d2",
        "filename": "audio/channel_receive_unittest.cc",
        "patchSetId": 2
      },
      "lineNbr": 125,
      "author": {
        "id": 5019
      },
      "writtenOn": "2023-02-03T15:39:08Z",
      "side": 1,
      "message": "using current NtpNow time as LastSr suggests receiver report is produced immediately when sender report is received. In such case Delay (since that sender report) should be 0.",
      "range": {
        "startLine": 125,
        "startChar": 4,
        "endLine": 125,
        "endChar": 28
      },
      "revId": "ca75a9753881dca0ab63a51a113db02ec258a018",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "76ba73f3_948c4eb7",
        "filename": "audio/channel_receive_unittest.cc",
        "patchSetId": 2
      },
      "lineNbr": 125,
      "author": {
        "id": 5634
      },
      "writtenOn": "2023-02-03T17:12:59Z",
      "side": 1,
      "message": "I think these numbers are not well set, but they have the desired effect.\nThe function should really take the reception time of last SR as parameter, but it is actually called before the first SR is received in this test. I find it strange that it works.",
      "parentUuid": "66dcc2bb_6c4213d2",
      "range": {
        "startLine": 125,
        "startChar": 4,
        "endLine": 125,
        "endChar": 28
      },
      "revId": "ca75a9753881dca0ab63a51a113db02ec258a018",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bdb65dcf_8552e548",
        "filename": "audio/channel_receive_unittest.cc",
        "patchSetId": 2
      },
      "lineNbr": 125,
      "author": {
        "id": 5019
      },
      "writtenOn": "2023-02-06T11:13:51Z",
      "side": 1,
      "message": "just FYI:\nsome time ago it didn\u0027t - RtpRtcp was searching for matching emitted SR, but such lookup isn\u0027t really needed: ReportBlock has all the information needed to calculate the RTT.\n\nIn practice SR is needed to properly generate ReportBlock: NtpTime should be copied from that last SR, and Delay should be calculated based on the time that SR was received.",
      "parentUuid": "76ba73f3_948c4eb7",
      "range": {
        "startLine": 125,
        "startChar": 4,
        "endLine": 125,
        "endChar": 28
      },
      "revId": "ca75a9753881dca0ab63a51a113db02ec258a018",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "98b144a5_b4a5ec41",
        "filename": "audio/channel_receive_unittest.cc",
        "patchSetId": 2
      },
      "lineNbr": 136,
      "author": {
        "id": 5019
      },
      "writtenOn": "2023-02-03T15:39:08Z",
      "side": 1,
      "message": "or return report.Build(); (though that would give you rtc::Buffer instead of std::vector - still should be good enough)",
      "range": {
        "startLine": 131,
        "startChar": 4,
        "endLine": 136,
        "endChar": 18
      },
      "revId": "ca75a9753881dca0ab63a51a113db02ec258a018",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cad50f21_810e6b39",
        "filename": "audio/channel_receive_unittest.cc",
        "patchSetId": 2
      },
      "lineNbr": 141,
      "author": {
        "id": 5019
      },
      "writtenOn": "2023-02-03T15:39:08Z",
      "side": 1,
      "message": "may be \nvoid HandleGeneratedRtcp(ChannelReceiveInterface\u0026 channel,\n                         rtc::ArrayView\u003cconst uint8_t\u003e packet);\n\n(passing packet as ArrayView doesn\u0027t add much in this case, but imho still good idea for readability)",
      "range": {
        "startLine": 139,
        "startChar": 27,
        "endLine": 141,
        "endChar": 40
      },
      "revId": "ca75a9753881dca0ab63a51a113db02ec258a018",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3c27262e_7a326f8e",
        "filename": "audio/channel_receive_unittest.cc",
        "patchSetId": 2
      },
      "lineNbr": 141,
      "author": {
        "id": 5634
      },
      "writtenOn": "2023-02-03T17:12:59Z",
      "side": 1,
      "message": "Done.",
      "parentUuid": "cad50f21_810e6b39",
      "range": {
        "startLine": 139,
        "startChar": 27,
        "endLine": 141,
        "endChar": 40
      },
      "revId": "ca75a9753881dca0ab63a51a113db02ec258a018",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6bb39885_7f94f3ce",
        "filename": "audio/channel_receive_unittest.cc",
        "patchSetId": 2
      },
      "lineNbr": 145,
      "author": {
        "id": 5019
      },
      "writtenOn": "2023-02-03T15:39:08Z",
      "side": 1,
      "message": "may be join these two log lines into single one.\nit might be good idea to also fail the test:\nFAIL() \u003c\u003c \"Unexpected RTCP packet generated: \" \u003c\u003c rtc::hex....;\n(or ADD_FAILURE - same behavior in this case)\n\nhttp://google.github.io/googletest/reference/assertions.html#ADD_FAILURE",
      "revId": "ca75a9753881dca0ab63a51a113db02ec258a018",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "13b2765e_644a3781",
        "filename": "audio/channel_receive_unittest.cc",
        "patchSetId": 2
      },
      "lineNbr": 145,
      "author": {
        "id": 5634
      },
      "writtenOn": "2023-02-03T17:12:59Z",
      "side": 1,
      "message": "I didn\u0027t want to fail the test because I don\u0027t know if there are conditions under which other types of RTCP packets will be generated. But I do want to see them easily if they occur as the test is modified later.",
      "parentUuid": "6bb39885_7f94f3ce",
      "revId": "ca75a9753881dca0ab63a51a113db02ec258a018",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "46acc15c_01ce8e1f",
        "filename": "audio/channel_receive_unittest.cc",
        "patchSetId": 2
      },
      "lineNbr": 155,
      "author": {
        "id": 5019
      },
      "writtenOn": "2023-02-03T15:39:08Z",
      "side": 1,
      "message": "can this pointer be null? does the passed object have to outlive the call to this function?\nSeems like answer is no to both of these question, so pass by [non-const] reference\n(same with previous function)\n\nhttps://google.github.io/styleguide/cppguide.html#Inputs_and_Outputs\n“non-optional output and input/output parameters should usually be references (which cannot be null).”",
      "range": {
        "startLine": 155,
        "startChar": 31,
        "endLine": 155,
        "endChar": 56
      },
      "revId": "ca75a9753881dca0ab63a51a113db02ec258a018",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d8f2e2b2_824d8e0c",
        "filename": "audio/channel_receive_unittest.cc",
        "patchSetId": 2
      },
      "lineNbr": 155,
      "author": {
        "id": 5634
      },
      "writtenOn": "2023-02-03T17:12:59Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "46acc15c_01ce8e1f",
      "range": {
        "startLine": 155,
        "startChar": 31,
        "endLine": 155,
        "endChar": 56
      },
      "revId": "ca75a9753881dca0ab63a51a113db02ec258a018",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f0dfeeac_cc7f3f17",
        "filename": "audio/channel_receive_unittest.cc",
        "patchSetId": 2
      },
      "lineNbr": 155,
      "author": {
        "id": 5019
      },
      "writtenOn": "2023-02-06T11:13:51Z",
      "side": 1,
      "message": "ProbeCaptureStartNtpTime still takes ChannelReceiveInterface by pointer",
      "parentUuid": "d8f2e2b2_824d8e0c",
      "range": {
        "startLine": 155,
        "startChar": 31,
        "endLine": 155,
        "endChar": 56
      },
      "revId": "ca75a9753881dca0ab63a51a113db02ec258a018",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9b588728_847e8bc8",
        "filename": "audio/channel_receive_unittest.cc",
        "patchSetId": 2
      },
      "lineNbr": 155,
      "author": {
        "id": 5634
      },
      "writtenOn": "2023-02-06T11:56:31Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f0dfeeac_cc7f3f17",
      "range": {
        "startLine": 155,
        "startChar": 31,
        "endLine": 155,
        "endChar": 56
      },
      "revId": "ca75a9753881dca0ab63a51a113db02ec258a018",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ba2689cf_e05a5176",
        "filename": "audio/channel_receive_unittest.cc",
        "patchSetId": 2
      },
      "lineNbr": 214,
      "author": {
        "id": 5019
      },
      "writtenOn": "2023-02-03T15:39:08Z",
      "side": 1,
      "message": "this is indeed odd: ChannelReceive shouldn\u0027t expect receiver report.\nI guess it is needed to estimate RTT, but in real code that would work only if there is a send channel nearby with the same local ssrc.\n\nI think this deserve documenting. This test fixate behavior that works \u0027by accident\u0027\n\nAnother option could be to configure ReceiveChannel with\n/* enable_non_sender_rtt\u003d */true\n\nand instead of RR with RB inject ExtendedReport with DLRR\nThat would test correct behavior.",
      "range": {
        "startLine": 214,
        "startChar": 32,
        "endLine": 214,
        "endChar": 64
      },
      "revId": "ca75a9753881dca0ab63a51a113db02ec258a018",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f30f2741_93dfd522",
        "filename": "audio/channel_receive_unittest.cc",
        "patchSetId": 2
      },
      "lineNbr": 214,
      "author": {
        "id": 5634
      },
      "writtenOn": "2023-02-03T17:12:59Z",
      "side": 1,
      "message": "That would test the DLRR-driven behavior, but that\u0027s not the test that was failing when I did my channel split.\nAdding a test for the DLRR-driven behavior is probably a good idea, but it\u0027s a different test.\n\nI don\u0027t think this is accidental, but I don\u0027t think it was a good idea.",
      "parentUuid": "ba2689cf_e05a5176",
      "range": {
        "startLine": 214,
        "startChar": 32,
        "endLine": 214,
        "endChar": 64
      },
      "revId": "ca75a9753881dca0ab63a51a113db02ec258a018",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "87761e4c_a79151a0",
        "filename": "audio/channel_receive_unittest.cc",
        "patchSetId": 2
      },
      "lineNbr": 214,
      "author": {
        "id": 5019
      },
      "writtenOn": "2023-02-06T11:13:51Z",
      "side": 1,
      "message": "DLRR is just another way to calculate RTT, and it is the proper way for ChannelReceive to calculate RTT. SR way may break for ChannelReceive (e.g. RtpRtcp would improve it\u0027s filter and would ignore incoming RR for receive-only configuration)\n\nyou do not have to test actual DLRR-driver behavior (that would require to provoke ChannelReceive to emit XR with RRTR before feeding DLRR into it).\n\nSame as you create fake RR with RB, you can create fake XR with DLRR (and it would be simpler because it has less fields)",
      "parentUuid": "f30f2741_93dfd522",
      "range": {
        "startLine": 214,
        "startChar": 32,
        "endLine": 214,
        "endChar": 64
      },
      "revId": "ca75a9753881dca0ab63a51a113db02ec258a018",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4e91fcff_1dc4fdc9",
        "filename": "audio/channel_receive_unittest.cc",
        "patchSetId": 2
      },
      "lineNbr": 214,
      "author": {
        "id": 5634
      },
      "writtenOn": "2023-02-06T11:56:31Z",
      "side": 1,
      "message": "The current behavior is what enables current integration tests to pass. I want to have that behavior documented.\n(We should write another unit test with DLRR)",
      "parentUuid": "87761e4c_a79151a0",
      "range": {
        "startLine": 214,
        "startChar": 32,
        "endLine": 214,
        "endChar": 64
      },
      "revId": "ca75a9753881dca0ab63a51a113db02ec258a018",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c9e77e78_bd6bc616",
        "filename": "audio/channel_receive_unittest.cc",
        "patchSetId": 2
      },
      "lineNbr": 214,
      "author": {
        "id": 5019
      },
      "writtenOn": "2023-02-06T12:09:01Z",
      "side": 1,
      "message": "So this test is a documentation what we rely on an unpromised and brittle behavior? Ok.",
      "parentUuid": "4e91fcff_1dc4fdc9",
      "range": {
        "startLine": 214,
        "startChar": 32,
        "endLine": 214,
        "endChar": 64
      },
      "revId": "ca75a9753881dca0ab63a51a113db02ec258a018",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "75de8847_a2556dcf",
        "filename": "audio/channel_receive_unittest.cc",
        "patchSetId": 2
      },
      "lineNbr": 216,
      "author": {
        "id": 5019
      },
      "writtenOn": "2023-02-03T15:39:08Z",
      "side": 1,
      "message": "prefer rtcp_rr.data()\n\ntechnically \u0026rtcp_rr[0] is a pointer to a single element, \nwhere function expects pointer to the beginning of the array.\nIn practice it is the same, but using data() is likely safer.\ne.g. if CreateRtcpReceiverReport for some reason would start to return std::map\u003cint, uint8_t\u003e, then current code would still compile, but wouldn\u0027t behave as expected.\n\n(better yet, ReceivedRTCPPacket should be updated to take rtc::ArrayView as a paremter, then it would be `channel-\u003eReceivedRtcpPacket(CreateRtcpReceiverReport());`\nchanging ReceivedRTCPPacket singature is out of scope of this cl though)",
      "range": {
        "startLine": 216,
        "startChar": 30,
        "endLine": 216,
        "endChar": 41
      },
      "revId": "ca75a9753881dca0ab63a51a113db02ec258a018",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "95e974e7_871b4d58",
        "filename": "audio/channel_receive_unittest.cc",
        "patchSetId": 2
      },
      "lineNbr": 216,
      "author": {
        "id": 5634
      },
      "writtenOn": "2023-02-03T17:12:59Z",
      "side": 1,
      "message": "Done.",
      "parentUuid": "75de8847_a2556dcf",
      "range": {
        "startLine": 216,
        "startChar": 30,
        "endLine": 216,
        "endChar": 41
      },
      "revId": "ca75a9753881dca0ab63a51a113db02ec258a018",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    }
  ]
}