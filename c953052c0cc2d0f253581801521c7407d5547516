{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "2a0522fb_334c8bda",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 5634
      },
      "writtenOn": "2022-02-04T15:15:27Z",
      "side": 1,
      "message": "Now I think it is (finally) ready for review. It looks as if the tests are passing.\n",
      "revId": "c953052c0cc2d0f253581801521c7407d5547516",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ef97b9db_a0d941d2",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 5234
      },
      "writtenOn": "2022-02-04T15:42:38Z",
      "side": 1,
      "message": "I don\u0027t quite like the extra PostTask to disconnect. But I don\u0027t have a good suggestion Friday afternoon.",
      "revId": "c953052c0cc2d0f253581801521c7407d5547516",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "86ba32d3_7b8882a0",
        "filename": "pc/data_channel_controller.cc",
        "patchSetId": 3
      },
      "lineNbr": 82,
      "author": {
        "id": 5234
      },
      "writtenOn": "2022-02-04T15:42:38Z",
      "side": 1,
      "message": "From which of these callbacks is this method called?\n\nI think we considered letting a callback have a return value, saying if it wanted to stay on the list or not. Do we have a usecase for that here? \n\nIt looks a bit surprising that a method named like this doesn\u0027t disconnect synchronously.",
      "range": {
        "startLine": 81,
        "startChar": 0,
        "endLine": 82,
        "endChar": 45
      },
      "revId": "c953052c0cc2d0f253581801521c7407d5547516",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8d1c0939_0083f576",
        "filename": "pc/data_channel_controller.cc",
        "patchSetId": 3
      },
      "lineNbr": 82,
      "author": {
        "id": 5634
      },
      "writtenOn": "2022-02-04T21:22:09Z",
      "side": 1,
      "message": "Good point that the disconnect of all the other signals doesn\u0027t need to PostTask.\nI am hoping that later refactoring will replace these callback lists with something different (it seems quite strange that the SendData function calls all the channels\u0027 callbacks, and lets each callback decide whether or not the data is for them, rather than dispatching on the channel id in this module, for instance), but for the moment, this is the smallest modification to allow CallbackList to be used instead of sigslot.",
      "parentUuid": "86ba32d3_7b8882a0",
      "range": {
        "startLine": 81,
        "startChar": 0,
        "endLine": 82,
        "endChar": 45
      },
      "revId": "c953052c0cc2d0f253581801521c7407d5547516",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bb6c4ffa_0b45bf6a",
        "filename": "pc/data_channel_controller.cc",
        "patchSetId": 3
      },
      "lineNbr": 82,
      "author": {
        "id": 5234
      },
      "writtenOn": "2022-02-07T08:04:03Z",
      "side": 1,
      "message": "Thanks for documenting. Is there any risk that `data_channel_transport_channel_closed_callbacks_` will be invoked again, before the removal task gets to run?",
      "parentUuid": "8d1c0939_0083f576",
      "range": {
        "startLine": 81,
        "startChar": 0,
        "endLine": 82,
        "endChar": 45
      },
      "revId": "c953052c0cc2d0f253581801521c7407d5547516",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "111f9df8_652f9950",
        "filename": "pc/data_channel_controller.cc",
        "patchSetId": 3
      },
      "lineNbr": 82,
      "author": {
        "id": 5634
      },
      "writtenOn": "2022-02-07T08:16:08Z",
      "side": 1,
      "message": "I think it\u0027s impossible, since transitioning to the closed state only happens once per channel, and the callback is a per-channel registration object. Different channels can close and queue more tasks, but the callback will not be triggered again for the same channel.",
      "parentUuid": "bb6c4ffa_0b45bf6a",
      "range": {
        "startLine": 81,
        "startChar": 0,
        "endLine": 82,
        "endChar": 45
      },
      "revId": "c953052c0cc2d0f253581801521c7407d5547516",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "be645b4a_eedf1861",
        "filename": "pc/data_channel_controller.cc",
        "patchSetId": 3
      },
      "lineNbr": 82,
      "author": {
        "id": 5234
      },
      "writtenOn": "2022-02-07T08:41:21Z",
      "side": 1,
      "message": "I\u0027m a bit concerned that we might get one more call to \nhttps://source.chromium.org/chromium/chromium/src/+/main:third_party/webrtc/pc/sctp_data_channel.cc;drc\u003d01343031cd039eeb6168a60a311f697102dccda2;l\u003d355\nwhich accesses member variable `config_` to determine that call is about some other channel. If the task posted below can race with destruction of the data channel, we\u0027ll get a use-after-free in that callback. But I don\u0027t know when destruction happens.\n\nOne hack to get the dispatch to not depend on that instance being alive might be to add \n```\n  data_channel_transport_channel_closed_callbacks_.AddReceiver(\n      webrtc_data_channel, [webrtc_data_channel, id\u003dwebrtc_data_channel-\u003eid()](int num) {\n        if (num \u003d\u003d id) webrtc_data_channel-\u003eOnClosingProcedureComplete(num);\n     })\n```\n\nThen it should a bit safer, but will still break in case we destroy the data channel and reuse it\u0027s id. \n\nAnother options is to let SctpDataChannel::OnClosingProcedureComplete return a value telling the CallbackList that it should be removed and not called again (as discussed when CallbackList was designed). I think that\u0027s worth investigating. But can be done as a followup, if there\u0027s some reason the destruction race I worry about can\u0027t happen.\n\nI agree this would be generally more sane if the dispatch on id happened before invoking callbacks.",
      "parentUuid": "111f9df8_652f9950",
      "range": {
        "startLine": 81,
        "startChar": 0,
        "endLine": 82,
        "endChar": 45
      },
      "revId": "c953052c0cc2d0f253581801521c7407d5547516",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a5729e27_558c244d",
        "filename": "pc/data_channel_controller.cc",
        "patchSetId": 3
      },
      "lineNbr": 82,
      "author": {
        "id": 5634
      },
      "writtenOn": "2022-02-07T08:54:50Z",
      "side": 1,
      "message": "I don\u0027t see how that computes as relevant to this instance. The removal of the callback (the stuff that\u0027s in PostTask) does not dereference the webrtc_data_channel pointer - it\u0027s the callback itself that dereferences the pointer.\nThe only thing it dereferences is the data_channel_controller object, and that is already guarded by a weakpointer.\n\nAgreed on the dispatch-on-id being on the wrong level - I have a refactoring in mind to replace the whole callback structure here with a table of id-\u003echannel mappings that will do a less convoluted dispatch. But that\u0027s for another CL.",
      "parentUuid": "be645b4a_eedf1861",
      "range": {
        "startLine": 81,
        "startChar": 0,
        "endLine": 82,
        "endChar": 45
      },
      "revId": "c953052c0cc2d0f253581801521c7407d5547516",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    }
  ]
}