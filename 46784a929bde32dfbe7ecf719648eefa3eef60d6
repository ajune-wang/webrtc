{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "2ad8716e_47249ab5",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5019
      },
      "writtenOn": "2023-02-15T09:08:36Z",
      "side": 1,
      "message": "I do not have an opinion about this change.\n\nFrom style guide point of view either way is acceptable.\nhttps://google.github.io/styleguide/cppguide.html#Use_of_const\n“Using const on local variables is neither encouraged nor discouraged.”\n\npersonally prefer to make code clearer by having smaller variable scope rather than adding const on local variable.\n\nLeaving this up to the code owner.",
      "revId": "46784a929bde32dfbe7ecf719648eefa3eef60d6",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d91aee2b_771df422",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 20429
      },
      "writtenOn": "2023-02-15T17:35:29Z",
      "side": 1,
      "message": "Danil: Thank you for your comment. I respect the code owner\u0027s preference and style. In this CL I only suggested the `const` that helped my investigation of b/265848768.\n\nIt may be possible to reduce the variable scope of the first `info` (declared at line 1344). I added a comment to mark the current end of the variable scope.\n\nIt seems hard to reduce the variable scope of the second `info` (declared at line 1872) because it is used in many places consecutively. So adding `const` to the second `info` is very helpful.",
      "parentUuid": "2ad8716e_47249ab5",
      "revId": "46784a929bde32dfbe7ecf719648eefa3eef60d6",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "904fc44b_eb48ae13",
        "filename": "video/video_stream_encoder.cc",
        "patchSetId": 1
      },
      "lineNbr": 1389,
      "author": {
        "id": 20429
      },
      "writtenOn": "2023-02-15T17:35:29Z",
      "side": 1,
      "message": "These two lines are the last uses of `info`. I don\u0027t know if they can be moved up to reduce the variable scope of `info`.",
      "revId": "46784a929bde32dfbe7ecf719648eefa3eef60d6",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "da824fe5_820e47b4",
        "filename": "video/video_stream_encoder.cc",
        "patchSetId": 1
      },
      "lineNbr": 1905,
      "author": {
        "id": 20429
      },
      "writtenOn": "2023-02-14T23:13:33Z",
      "side": 1,
      "message": "In debugging b/265848768, I need to prove that the `info` that we pass to `bitrate_adjuster_-\u003eOnEncoderInfo()` here is still equal to the return value of the `encoder_-\u003eGetEncoderInfo()` call at line 1872. Declaring `info` as const makes that obvious.",
      "revId": "46784a929bde32dfbe7ecf719648eefa3eef60d6",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "At least one maximum vote for label \u0027Code-Review\u0027 is required"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader AND -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1 AND -label:Code-Review\u003dMIN"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader AND -label:Code-Review=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Code-Review=MAX,user=non_uploader"],"failingAtoms":["label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1 AND -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1","label:Code-Review=MIN"]}
      },
      "patchSetCommitId": "46784a929bde32dfbe7ecf719648eefa3eef60d6",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["is:review-enforced_gerrit"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforcement-satisfied_gerrit"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforcement-satisfied_gerrit"]}
      },
      "patchSetCommitId": "46784a929bde32dfbe7ecf719648eefa3eef60d6",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {
        "value": true
      }
    }
  ]
}