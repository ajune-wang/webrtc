{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "aeebc82c_4fbbe217",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 14994
      },
      "writtenOn": "2021-11-24T07:53:29Z",
      "side": 1,
      "message": "I’m trying to understand the use case for these callbacks. When you say you need to \"kill android AudioRecord before creating from webrtc\", what would you do from these callbacks to do that? throw an exception?\nAnd in which case would you want to do that?",
      "revId": "09212baec88f0c6a416cd17c41f9279fad363d3b",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "23bdef2b_73078e8f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 18579
      },
      "writtenOn": "2021-11-24T08:57:44Z",
      "side": 1,
      "message": "for example, if you record sound at this moment you can stop and release current active android audioRecord in preInitCallback and after that you can use SamplesReadyCallback for reading samples from new audioRecord, it provides way to decrease dalay for switching AudioRecords and this solution adds flexibility for complex cases.",
      "parentUuid": "aeebc82c_4fbbe217",
      "revId": "09212baec88f0c6a416cd17c41f9279fad363d3b",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "128308a7_fcd930b2",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 18579
      },
      "writtenOn": "2021-11-24T09:56:52Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "23bdef2b_73078e8f",
      "revId": "09212baec88f0c6a416cd17c41f9279fad363d3b",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "926dc348_a2ba9ed5",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 14994
      },
      "writtenOn": "2021-11-24T10:23:12Z",
      "side": 1,
      "message": "But how would you stop things from the callback you’re adding?\n\nAll the other ways initRecording() is returning early are explicitly handled, with resource release happening if things were already allocated.\n\nThe only way I can see of stopping and releasing from the callbacks you’re adding would be by throwing an exception, which isn’t a good way of controlling flow (especially since this method is called from native code).\n\nAlso, since you have no guarantee you’ll be called at the right time, you still need other mechanisms to interrupt recording after initialisation, right? Given that it’s just an optimisation, do you have a sense of how decreased the delay would be?",
      "parentUuid": "128308a7_fcd930b2",
      "revId": "09212baec88f0c6a416cd17c41f9279fad363d3b",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bd9bb1bb_f444a20d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 18579
      },
      "writtenOn": "2021-11-24T10:44:57Z",
      "side": 1,
      "message": "In my app I use rtmp for live streaming which use audioRecord, and also I can have webrtc call at same time. And also I have issue on android 8 and android 9, when webrtc create audioRecord instance mobile phone loses audio recording for rtmp, so I use this callback for stoping and releasing audioRecord for RTMP and switch my pipeline to wrtc audioRecord.",
      "parentUuid": "926dc348_a2ba9ed5",
      "revId": "09212baec88f0c6a416cd17c41f9279fad363d3b",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5cf712cb_b21fbeff",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 18579
      },
      "writtenOn": "2021-11-24T10:45:28Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "bd9bb1bb_f444a20d",
      "revId": "09212baec88f0c6a416cd17c41f9279fad363d3b",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e7df5064_aad195d6",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 14994
      },
      "writtenOn": "2021-11-24T13:13:27Z",
      "side": 1,
      "message": "Could you file a bug and explain your use case in more details?\n\nAlso, some unit tests demonstrating how you would be using the new callback methods could be useful to understand what you’re trying to do.",
      "parentUuid": "5cf712cb_b21fbeff",
      "revId": "09212baec88f0c6a416cd17c41f9279fad363d3b",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "At least one maximum vote for label \u0027Code-Review\u0027 is required"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader AND -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader AND -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":["label:Code-Review=MIN"],"failingAtoms":["label:Code-Review=MAX,user=non_uploader"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1"]}
      },
      "patchSetCommitId": "09212baec88f0c6a416cd17c41f9279fad363d3b",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforced_gerrit"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforcement-satisfied_gerrit"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "09212baec88f0c6a416cd17c41f9279fad363d3b",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}