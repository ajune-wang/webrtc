{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "6a78473a_14309b61",
        "filename": "rtc_base/task_utils/shared_task_queue_factory.cc",
        "patchSetId": 1
      },
      "lineNbr": 33,
      "author": {
        "id": 5508
      },
      "writtenOn": "2021-04-22T12:21:43Z",
      "side": 1,
      "message": "wow... that\u0027s a lot of \"smart\" pointering and ref counting ðŸ˜Š\nThere must be a simpler way to do this. Seems a bit odd to have a reference counted unique_ptr",
      "revId": "af71464a847b6e13f602d66098bd8481412345c4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "141e9c86_b9a92c5e",
        "filename": "rtc_base/task_utils/shared_task_queue_factory.cc",
        "patchSetId": 1
      },
      "lineNbr": 33,
      "author": {
        "id": 9515
      },
      "writtenOn": "2021-04-23T10:02:28Z",
      "side": 1,
      "message": "Agree it looks odd but it\u0027s the complete container for the shared task queue, and it works. Do you have a suggestion?",
      "parentUuid": "6a78473a_14309b61",
      "revId": "af71464a847b6e13f602d66098bd8481412345c4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "da4ad220_0bc18f0a",
        "filename": "rtc_base/task_utils/shared_task_queue_factory.cc",
        "patchSetId": 1
      },
      "lineNbr": 33,
      "author": {
        "id": 5508
      },
      "writtenOn": "2021-04-24T14:08:27Z",
      "side": 1,
      "message": "RefCountedObject isn\u0027t the ideal fit since TaskQueueBase doesn\u0027t inherit from RefCountInterface, so I\u0027d look at the make_ref_counted\u003c\u003e utility for instantiating the task queue and you could use `Ref\u003cstd::unique_ptr\u003cTaskQueueBase, TaskQueueDeleter\u003e\u003e::Ptr` to declare the appropriate scoped_refptr type.\n\nHowever I don\u0027t think I\u0027m yet following what the problem is that\u0027s being solved.",
      "parentUuid": "141e9c86_b9a92c5e",
      "revId": "af71464a847b6e13f602d66098bd8481412345c4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4b76f751_16bdebc9",
        "filename": "rtc_base/task_utils/shared_task_queue_factory.cc",
        "patchSetId": 1
      },
      "lineNbr": 54,
      "author": {
        "id": 5508
      },
      "writtenOn": "2021-04-22T12:21:43Z",
      "side": 1,
      "message": "fyi - RefCountedBaseNonVirtual\u003cState\u003e is probably what you want.",
      "revId": "af71464a847b6e13f602d66098bd8481412345c4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "72cc0b9b_03e8286a",
        "filename": "rtc_base/task_utils/shared_task_queue_factory.cc",
        "patchSetId": 1
      },
      "lineNbr": 54,
      "author": {
        "id": 9515
      },
      "writtenOn": "2021-04-23T10:02:28Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4b76f751_16bdebc9",
      "revId": "af71464a847b6e13f602d66098bd8481412345c4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "603eeb39_6fb542f9",
        "filename": "rtc_base/task_utils/shared_task_queue_factory.cc",
        "patchSetId": 1
      },
      "lineNbr": 76,
      "author": {
        "id": 9515
      },
      "writtenOn": "2021-04-22T11:50:25Z",
      "side": 1,
      "message": "Tommi, Danil, here. I\u0027m forced to leak because there are QueuedTasks existing on the stack sometimes, see https://source.chromium.org/chromium/chromium/src/+/master:third_party/webrtc/api/proxy.h;l\u003d109?q\u003dproxy.h\u0026ss\u003dchromium",
      "range": {
        "startLine": 76,
        "startChar": 4,
        "endLine": 76,
        "endChar": 28
      },
      "revId": "af71464a847b6e13f602d66098bd8481412345c4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "aa5db74e_f4dd2386",
        "filename": "rtc_base/task_utils/shared_task_queue_factory.cc",
        "patchSetId": 1
      },
      "lineNbr": 76,
      "author": {
        "id": 5508
      },
      "writtenOn": "2021-04-22T12:21:43Z",
      "side": 1,
      "message": "Is it a theoretical problem or a practical one? Will the above example run on this task queue?\n\nIf not, then I think you should delete task_ here and not leak.\n\nSince the example above uses Invoke (blocking) semantics from the main thread of the application, I\u0027m guessing that your case is more narrowly defined and you don\u0027t have to worry about the above optimization (avoid heap allocations).\n\nI\u0027d just focus on making sure it works for the cases you\u0027re thinking of. A risk with trying to solve everything in this CL, could have the implication of someone wanting to change the TQ interfaces themselves, change the rules (e.g. everything must be heap allocated) and the whole infrastructure we currently have. Which would be a huge and risky task, possibly without benefits (and worse, more heap allocations).",
      "parentUuid": "603eeb39_6fb542f9",
      "range": {
        "startLine": 76,
        "startChar": 4,
        "endLine": 76,
        "endChar": 28
      },
      "revId": "af71464a847b6e13f602d66098bd8481412345c4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4ca2f12c_8a6538ed",
        "filename": "rtc_base/task_utils/shared_task_queue_factory.cc",
        "patchSetId": 1
      },
      "lineNbr": 76,
      "author": {
        "id": 9515
      },
      "writtenOn": "2021-04-23T10:02:28Z",
      "side": 1,
      "message": "For the use case where I was planning to use this factory, I think only dynamic closures are passed. But it\u0027s unspecified what to do with the QueuedTask if it hasn\u0027t been run. For now I specified in the docs that only dynamic closures can be used, and am cleaning them up in the (generated) destructor.\n\nFor another CL we could fix this with another method QueuedTask::ShouldDelete() or similar, to continue support for stack-allocated queued tasks.",
      "parentUuid": "aa5db74e_f4dd2386",
      "range": {
        "startLine": 76,
        "startChar": 4,
        "endLine": 76,
        "endChar": 28
      },
      "revId": "af71464a847b6e13f602d66098bd8481412345c4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "db88e186_b5b472bd",
        "filename": "rtc_base/task_utils/shared_task_queue_factory.cc",
        "patchSetId": 1
      },
      "lineNbr": 76,
      "author": {
        "id": 5508
      },
      "writtenOn": "2021-04-24T14:08:27Z",
      "side": 1,
      "message": "Here\u0027s what the PostTask documentation says:\n\n  // Schedules a task to execute. Tasks are executed in FIFO order.\n  // If |task-\u003eRun()| returns true, task is deleted on the task queue\n  // before next QueuedTask starts executing.\n  // When a TaskQueue is deleted, pending tasks will not be executed but they\n  // will be deleted. The deletion of tasks may happen synchronously on the\n  // TaskQueue or it may happen asynchronously after TaskQueue is deleted.\n  // This may vary from one implementation to the next so assumptions about\n  // lifetimes of pending tasks should not be made.\n  // May be called on any thread or task queue, including this task queue.\n\nSo it should be clear that tasks that have not been run when a task queue is destroyed, will be deleted.\n\nIt\u0027s also theoretically possible for PostTask() to fail and delete the task before returning (since PostTask on purpose returns void).\n\nFor QueuedTask, the destructor is guaranteed to run except in the case when Run() returns false. That\u0027s a signal to TQ to yield ownership. In all other cases the dtor will be called.",
      "parentUuid": "4ca2f12c_8a6538ed",
      "range": {
        "startLine": 76,
        "startChar": 4,
        "endLine": 76,
        "endChar": 28
      },
      "revId": "af71464a847b6e13f602d66098bd8481412345c4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9d4a1441_0fbdc849",
        "filename": "rtc_base/task_utils/shared_task_queue_factory.cc",
        "patchSetId": 1
      },
      "lineNbr": 111,
      "author": {
        "id": 9515
      },
      "writtenOn": "2021-04-22T11:50:25Z",
      "side": 1,
      "message": "Delete this junk.",
      "range": {
        "startLine": 111,
        "startChar": 0,
        "endLine": 111,
        "endChar": 78
      },
      "revId": "af71464a847b6e13f602d66098bd8481412345c4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    }
  ]
}