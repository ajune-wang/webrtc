{
  "comments": [
    {
      "key": {
        "uuid": "201c7fa0_79beb38e",
        "filename": "modules/rtp_rtcp/source/rtcp_packet/pli.cc",
        "patchSetId": 1
      },
      "lineNbr": 44,
      "author": {
        "id": 5019
      },
      "writtenOn": "2018-10-09T14:54:47Z",
      "side": 1,
      "message": "pli is passive structure, prefer to avoid using field_trial inside it.\nbetter to set this flag in control class (e.g. RtcpSender) and pass a simple boolean flag to the structure.",
      "range": {
        "startLine": 44,
        "startChar": 10,
        "endLine": 44,
        "endChar": 72
      },
      "revId": "13be83d144f34f67cd18a77f153cef32f15410a6",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "552392f4_c4c853be",
        "filename": "modules/rtp_rtcp/source/rtcp_packet/pli.cc",
        "patchSetId": 1
      },
      "lineNbr": 44,
      "author": {
        "id": 5147
      },
      "writtenOn": "2018-10-09T14:55:58Z",
      "side": 1,
      "message": "1. Perhaps check the field trial in the caller to the constructor, so as to minimize the number of times this string comparison needs to be done? If I am not mistaken, RTCPSender have somewhat extended lifespans, but Pli objects will be created somewhat often.\n2. Is there a guarantee that the field trial will be active on either all sides or none? Or could there be a mismatch, where one side sends LTR-compatible PLI messages, but the other side discards them? If so, perhaps we should negotiate the value of ltr_recovery_experiment_, where the offered value is determined by the initiator of the negotiation according to the field trial, but the other side accepts if it can, regardless of its own field trial value?",
      "revId": "13be83d144f34f67cd18a77f153cef32f15410a6",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f87a1757_32f50342",
        "filename": "modules/rtp_rtcp/source/rtcp_packet/pli.cc",
        "patchSetId": 1
      },
      "lineNbr": 44,
      "author": {
        "id": 5825
      },
      "writtenOn": "2018-10-10T09:57:16Z",
      "side": 1,
      "message": "1. Added ltr_recovery_experiment to Pli ctor as optional parameter:\nPli(bool ltr_recovery_experiment \u003d false);\n\n2. Extended Pli is temporal solution that allows us to prototype LTR recovery. We would need to design/standardize proper RTCP message for requesting LTR recovery eventually which will be subject to negotiation.",
      "parentUuid": "552392f4_c4c853be",
      "revId": "13be83d144f34f67cd18a77f153cef32f15410a6",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "25e40230_ff5e106d",
        "filename": "modules/rtp_rtcp/source/rtcp_packet/pli.cc",
        "patchSetId": 1
      },
      "lineNbr": 44,
      "author": {
        "id": 5825
      },
      "writtenOn": "2018-10-10T09:57:16Z",
      "side": 1,
      "message": "Added ltr_recovery_experiment to Pli ctor as optional parameter:\nPli(bool ltr_recovery_experiment \u003d fals",
      "parentUuid": "201c7fa0_79beb38e",
      "range": {
        "startLine": 44,
        "startChar": 10,
        "endLine": 44,
        "endChar": 72
      },
      "revId": "13be83d144f34f67cd18a77f153cef32f15410a6",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "483ca064_46c72b6b",
        "filename": "modules/rtp_rtcp/source/rtcp_packet/pli.cc",
        "patchSetId": 1
      },
      "lineNbr": 52,
      "author": {
        "id": 5147
      },
      "writtenOn": "2018-10-09T14:55:58Z",
      "side": 1,
      "message": "If bigger than expected, should it not also be discarded? That is, if it\u0027s 50 bytes, that\u0027s probably indicative of an error.",
      "revId": "13be83d144f34f67cd18a77f153cef32f15410a6",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ffe6f844_d1220b6a",
        "filename": "modules/rtp_rtcp/source/rtcp_packet/pli.cc",
        "patchSetId": 1
      },
      "lineNbr": 52,
      "author": {
        "id": 5825
      },
      "writtenOn": "2018-10-10T09:57:16Z",
      "side": 1,
      "message": "Replaced with:\n  if ((!ltr_recovery_experiment_ \u0026\u0026\n       packet.payload_size_bytes() !\u003d kCommonFeedbackLength) ||\n      (ltr_recovery_experiment_ \u0026\u0026\n       packet.payload_size_bytes() !\u003d kCommonFeedbackLength + 4)) {\n    RTC_LOG(LS_WARNING) \u003c\u003c \"Invalid size for a valid PLI packet.\";\n    return false;\n  }\n\nI.e. parser expects to receive only standard or only extended PLIs depending on whether the LTR experiment is enabled or not. We need to make that the experiment is enabled/disabled on both ends.",
      "parentUuid": "483ca064_46c72b6b",
      "revId": "13be83d144f34f67cd18a77f153cef32f15410a6",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9b5fcf05_d6632eb6",
        "filename": "modules/rtp_rtcp/source/rtcp_packet/pli.cc",
        "patchSetId": 1
      },
      "lineNbr": 52,
      "author": {
        "id": 5147
      },
      "writtenOn": "2018-10-10T10:48:30Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "ffe6f844_d1220b6a",
      "revId": "13be83d144f34f67cd18a77f153cef32f15410a6",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "440df471_4100fee8",
        "filename": "modules/rtp_rtcp/source/rtcp_packet/pli.cc",
        "patchSetId": 1
      },
      "lineNbr": 63,
      "author": {
        "id": 5147
      },
      "writtenOn": "2018-10-09T14:55:58Z",
      "side": 1,
      "message": "If the size is neither the old nor the new size, should we perhaps error?",
      "revId": "13be83d144f34f67cd18a77f153cef32f15410a6",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1f720c95_7aecb767",
        "filename": "modules/rtp_rtcp/source/rtcp_packet/pli.cc",
        "patchSetId": 1
      },
      "lineNbr": 63,
      "author": {
        "id": 5825
      },
      "writtenOn": "2018-10-10T09:57:16Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "440df471_4100fee8",
      "revId": "13be83d144f34f67cd18a77f153cef32f15410a6",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0ef8b65c_b7f44583",
        "filename": "modules/rtp_rtcp/source/rtcp_packet/pli.cc",
        "patchSetId": 1
      },
      "lineNbr": 63,
      "author": {
        "id": 5147
      },
      "writtenOn": "2018-10-10T10:48:30Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "1f720c95_7aecb767",
      "revId": "13be83d144f34f67cd18a77f153cef32f15410a6",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    }
  ]
}