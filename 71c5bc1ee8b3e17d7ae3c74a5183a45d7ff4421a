{
  "comments": [
    {
      "key": {
        "uuid": "5ddc237f_7f3ef431",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 11,
      "author": {
        "id": 5064
      },
      "writtenOn": "2020-06-04T13:35:44Z",
      "side": 1,
      "message": "This doesn\u0027t seem to match what the CL is doing.\n\nThe CL is adding a requirement that an \"owned\" window must not have the same class as its owner.  Why is that required?\n\nCan you give a specific example of when the existing check does not have the desired effect?",
      "range": {
        "startLine": 7,
        "startChar": 0,
        "endLine": 11,
        "endChar": 55
      },
      "revId": "71c5bc1ee8b3e17d7ae3c74a5183a45d7ff4421a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9b98e093_b9ee9e5a",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 11,
      "author": {
        "id": 10010
      },
      "writtenOn": "2020-06-04T20:30:54Z",
      "side": 1,
      "message": "Already implemented check for ownership relationship between windows is based on assumption that they should share process id and thread. It doesn\u0027t work in 100 percent of cases and could be a cause for security issue.\n\nExample: You can open two presentations in MS PowerPoint, start sharing window with first presentation and put second presentation window on top. You will get window with second presentation which is not intended to be shared in captured stream. The issue could be reproduced not only with MS PowerPoint.\n\nThe fix is an attempt to mitigate this issue and based on another assumption which is also not always valid as nothing preventing us to have context window with the same class name as window we\u0027re sharing. In worst case scenario this fix will remove from sharing stream such context window.",
      "parentUuid": "5ddc237f_7f3ef431",
      "range": {
        "startLine": 7,
        "startChar": 0,
        "endLine": 11,
        "endChar": 55
      },
      "revId": "71c5bc1ee8b3e17d7ae3c74a5183a45d7ff4421a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2c33f8b5_d21c42c8",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 11,
      "author": {
        "id": 5064
      },
      "writtenOn": "2020-06-19T14:24:02Z",
      "side": 1,
      "message": "OK, let\u0027s rephrase the CL description to explain that, and also rename the CheckWindowClass() function accordingly, and add a comment describing it.\n\ne.g. something like:\n\n  Improve checks for \"child\" windows of selected capture targets.\n\n  Previously windows other than the selected window will also be\n  captured if they share the same process \u0026 thread, to allow child\n  windows (e.g. popup menus) to be captured. This could result in\n  child windows of other top-level windows run by the same process\n  and thread, being unintentionally captured.\n\n  \u003cdescribe the extra check(s)\u003e to ensure that only child windows\n  of selected targets are captured.",
      "parentUuid": "9b98e093_b9ee9e5a",
      "range": {
        "startLine": 7,
        "startChar": 0,
        "endLine": 11,
        "endChar": 55
      },
      "revId": "71c5bc1ee8b3e17d7ae3c74a5183a45d7ff4421a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6d9344c0_539fdfbf",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 11,
      "author": {
        "id": 10010
      },
      "writtenOn": "2020-06-26T00:55:18Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "2c33f8b5_d21c42c8",
      "range": {
        "startLine": 7,
        "startChar": 0,
        "endLine": 11,
        "endChar": 55
      },
      "revId": "71c5bc1ee8b3e17d7ae3c74a5183a45d7ff4421a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7b19a9a9_7af7f7a7",
        "filename": "modules/desktop_capture/win/selected_window_context.cc",
        "patchSetId": 2
      },
      "lineNbr": 17,
      "author": {
        "id": 5064
      },
      "writtenOn": "2020-06-04T13:35:44Z",
      "side": 1,
      "message": "Where does this limit come from?\n\nDon\u0027t we already have other code that captures the window class name?",
      "range": {
        "startLine": 17,
        "startChar": 2,
        "endLine": 17,
        "endChar": 38
      },
      "revId": "71c5bc1ee8b3e17d7ae3c74a5183a45d7ff4421a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "37952f0c_047867ad",
        "filename": "modules/desktop_capture/win/selected_window_context.cc",
        "patchSetId": 2
      },
      "lineNbr": 17,
      "author": {
        "id": 10010
      },
      "writtenOn": "2020-06-04T20:30:54Z",
      "side": 1,
      "message": "Limit comes from WNDCLASS struct: you can\u0027t register a class with lpszClassName bigger than 256 symbols.  \nOther places limit the size of buffer based on length of string result will be compared with.",
      "parentUuid": "7b19a9a9_7af7f7a7",
      "range": {
        "startLine": 17,
        "startChar": 2,
        "endLine": 17,
        "endChar": 38
      },
      "revId": "71c5bc1ee8b3e17d7ae3c74a5183a45d7ff4421a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "884f44fe_19fc1726",
        "filename": "modules/desktop_capture/win/selected_window_context.cc",
        "patchSetId": 2
      },
      "lineNbr": 17,
      "author": {
        "id": 5064
      },
      "writtenOn": "2020-06-19T14:24:02Z",
      "side": 1,
      "message": "OK, let\u0027s rename this to kMaxClassNameLength to reflect that it is a maximum, and add a comment to note that this is documented in the notes for the WNDCLASS lpszClassName field.",
      "parentUuid": "37952f0c_047867ad",
      "range": {
        "startLine": 17,
        "startChar": 2,
        "endLine": 17,
        "endChar": 38
      },
      "revId": "71c5bc1ee8b3e17d7ae3c74a5183a45d7ff4421a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f11e4c61_e964265e",
        "filename": "modules/desktop_capture/win/selected_window_context.cc",
        "patchSetId": 2
      },
      "lineNbr": 17,
      "author": {
        "id": 10010
      },
      "writtenOn": "2020-06-26T00:55:18Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "884f44fe_19fc1726",
      "range": {
        "startLine": 17,
        "startChar": 2,
        "endLine": 17,
        "endChar": 38
      },
      "revId": "71c5bc1ee8b3e17d7ae3c74a5183a45d7ff4421a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "db938fb8_7c0feb65",
        "filename": "modules/desktop_capture/win/selected_window_context.cc",
        "patchSetId": 2
      },
      "lineNbr": 18,
      "author": {
        "id": 5064
      },
      "writtenOn": "2020-06-04T13:35:44Z",
      "side": 1,
      "message": "nit: As per style-guide, this should be initialized before use.",
      "range": {
        "startLine": 18,
        "startChar": 0,
        "endLine": 18,
        "endChar": 33
      },
      "revId": "71c5bc1ee8b3e17d7ae3c74a5183a45d7ff4421a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f70f6dd8_00f28651",
        "filename": "modules/desktop_capture/win/selected_window_context.cc",
        "patchSetId": 2
      },
      "lineNbr": 18,
      "author": {
        "id": 10010
      },
      "writtenOn": "2020-06-04T20:30:54Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "db938fb8_7c0feb65",
      "range": {
        "startLine": 18,
        "startChar": 0,
        "endLine": 18,
        "endChar": 33
      },
      "revId": "71c5bc1ee8b3e17d7ae3c74a5183a45d7ff4421a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "621a2900_7cfc77f3",
        "filename": "modules/desktop_capture/win/selected_window_context.cc",
        "patchSetId": 2
      },
      "lineNbr": 21,
      "author": {
        "id": 5064
      },
      "writtenOn": "2020-06-04T13:35:44Z",
      "side": 1,
      "message": "Why return L\"\" rather than just passing std::max(0, class_name_length) to std::wstring, below?\nOr at least returning std::wstring() explicitly, rather than having one implicitly created from a literal.",
      "range": {
        "startLine": 21,
        "startChar": 0,
        "endLine": 21,
        "endChar": 15
      },
      "revId": "71c5bc1ee8b3e17d7ae3c74a5183a45d7ff4421a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "25a6a6a7_dada88e8",
        "filename": "modules/desktop_capture/win/selected_window_context.cc",
        "patchSetId": 2
      },
      "lineNbr": 21,
      "author": {
        "id": 10010
      },
      "writtenOn": "2020-06-04T20:30:54Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "621a2900_7cfc77f3",
      "range": {
        "startLine": 21,
        "startChar": 0,
        "endLine": 21,
        "endChar": 15
      },
      "revId": "71c5bc1ee8b3e17d7ae3c74a5183a45d7ff4421a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e2dcebe9_dec355f9",
        "filename": "modules/desktop_capture/win/selected_window_context.cc",
        "patchSetId": 2
      },
      "lineNbr": 77,
      "author": {
        "id": 5064
      },
      "writtenOn": "2020-06-04T13:35:44Z",
      "side": 1,
      "message": "I\u0027m not sure what you mean by this.  They have different class names because they are different types of window, surely?",
      "range": {
        "startLine": 76,
        "startChar": 0,
        "endLine": 77,
        "endChar": 66
      },
      "revId": "71c5bc1ee8b3e17d7ae3c74a5183a45d7ff4421a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c8ceb1e0_bcf33bad",
        "filename": "modules/desktop_capture/win/selected_window_context.cc",
        "patchSetId": 2
      },
      "lineNbr": 77,
      "author": {
        "id": 10010
      },
      "writtenOn": "2020-06-04T20:30:54Z",
      "side": 1,
      "message": "This is an assumption like having the same process and thread but less harmful.\nIf we want to be 100% sure - let\u0027s keep GetAncestor check only and get some false negative results.\nProvided more details in comment for CL.",
      "parentUuid": "e2dcebe9_dec355f9",
      "range": {
        "startLine": 76,
        "startChar": 0,
        "endLine": 77,
        "endChar": 66
      },
      "revId": "71c5bc1ee8b3e17d7ae3c74a5183a45d7ff4421a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "49a6fe2c_7fd5e4d3",
        "filename": "modules/desktop_capture/win/selected_window_context.cc",
        "patchSetId": 2
      },
      "lineNbr": 77,
      "author": {
        "id": 5064
      },
      "writtenOn": "2020-06-19T14:24:02Z",
      "side": 1,
      "message": "I don\u0027t see why the class name is really related to this at all.  If I e.g. had an editor open that handled text documents and images, for example, then those might be implemented using different classes, so this implemention would still result in the second window being unexpectedly captured.\n\nGenerally the idea of capturing child windows is to ensure that e.g. popup menus are included in the output - I\u0027d expect those to have an explicit relationship to the \"selected\" window in the window hierarchy, so that we can just say \"is this window a descendent of the selected one\"?",
      "parentUuid": "c8ceb1e0_bcf33bad",
      "range": {
        "startLine": 76,
        "startChar": 0,
        "endLine": 77,
        "endChar": 66
      },
      "revId": "71c5bc1ee8b3e17d7ae3c74a5183a45d7ff4421a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "28260f24_4afba075",
        "filename": "modules/desktop_capture/win/selected_window_context.cc",
        "patchSetId": 2
      },
      "lineNbr": 77,
      "author": {
        "id": 10010
      },
      "writtenOn": "2020-06-26T00:55:18Z",
      "side": 1,
      "message": "You\u0027re right, class name doesn\u0027t allow to check main window - popup relationship in 100 percents.\nThough process and thread don\u0027t do that neither. \n\nWhat are the options for fix here:\n1. Leave GetAncestor(hwnd, GA_ROOTOWNER) only, as result some popup window will not be recognized.\n2. Add additional check with class name, it will reduce the number of cases when the issue could be reproduced.\n\nWDYT?",
      "parentUuid": "49a6fe2c_7fd5e4d3",
      "range": {
        "startLine": 76,
        "startChar": 0,
        "endLine": 77,
        "endChar": 66
      },
      "revId": "71c5bc1ee8b3e17d7ae3c74a5183a45d7ff4421a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8f3cd336_645ef4dd",
        "filename": "modules/desktop_capture/win/selected_window_context.cc",
        "patchSetId": 2
      },
      "lineNbr": 77,
      "author": {
        "id": 5064
      },
      "writtenOn": "2020-06-26T14:35:57Z",
      "side": 1,
      "message": "Do we have specific examples of when GetAncestor() does not have the desired effect?\n\nNote that GetAncestor() has GA_ROOTOWNER (which locates the owning top-level window) and GA_ROOT (which gets the containing window, whether top-level or popup). I\u0027d expect that the selected capture window must be a top-level window, so it should be OK to use GA_ROOTOWNER - I don\u0027t think we e.g. allow selection of dialog windows for capture?",
      "parentUuid": "28260f24_4afba075",
      "range": {
        "startLine": 76,
        "startChar": 0,
        "endLine": 77,
        "endChar": 66
      },
      "revId": "71c5bc1ee8b3e17d7ae3c74a5183a45d7ff4421a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b02ded28_6a18547f",
        "filename": "modules/desktop_capture/win/selected_window_context.cc",
        "patchSetId": 2
      },
      "lineNbr": 77,
      "author": {
        "id": 10010
      },
      "writtenOn": "2020-06-29T23:25:55Z",
      "side": 1,
      "message": "It doesn\u0027t have effects for some tooltip. Comment says that it doesn\u0027t work for some drop-down menu also but i didn\u0027t find such applications. \n\nYes, we allow to select for sharing top level windows only: we\u0027re using  EnumWindows to build the list of possible sources which iterates over top level windows.",
      "parentUuid": "8f3cd336_645ef4dd",
      "range": {
        "startLine": 76,
        "startChar": 0,
        "endLine": 77,
        "endChar": 66
      },
      "revId": "71c5bc1ee8b3e17d7ae3c74a5183a45d7ff4421a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4d57e617_85da92e7",
        "filename": "modules/desktop_capture/win/selected_window_context.cc",
        "patchSetId": 2
      },
      "lineNbr": 77,
      "author": {
        "id": 5064
      },
      "writtenOn": "2020-06-30T17:11:38Z",
      "side": 1,
      "message": "OK, so I think we need to err on the side of caution, which means that we only enumerate:\n- The selected window.\n- Windows which are owned by the selected window.\n- Possibly some pop-up types which have the selected window as parent.\n\nIf a window has no immediately obvious relation to the selected window then we should not capture them at all.   WDYT?",
      "parentUuid": "b02ded28_6a18547f",
      "range": {
        "startLine": 76,
        "startChar": 0,
        "endLine": 77,
        "endChar": 66
      },
      "revId": "71c5bc1ee8b3e17d7ae3c74a5183a45d7ff4421a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ec8df892_52852579",
        "filename": "modules/desktop_capture/win/selected_window_context.cc",
        "patchSetId": 2
      },
      "lineNbr": 77,
      "author": {
        "id": 10010
      },
      "writtenOn": "2020-07-08T01:56:57Z",
      "side": 1,
      "message": "Sounds good for me.",
      "parentUuid": "4d57e617_85da92e7",
      "range": {
        "startLine": 76,
        "startChar": 0,
        "endLine": 77,
        "endChar": 66
      },
      "revId": "71c5bc1ee8b3e17d7ae3c74a5183a45d7ff4421a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a7cc63df_2b10ce48",
        "filename": "modules/desktop_capture/win/selected_window_context.cc",
        "patchSetId": 2
      },
      "lineNbr": 84,
      "author": {
        "id": 5064
      },
      "writtenOn": "2020-06-04T13:35:44Z",
      "side": 1,
      "message": "What is a \"visual effect window\"?  You mean the window used to contain the drop-shadow, in this case..?",
      "range": {
        "startLine": 81,
        "startChar": 0,
        "endLine": 84,
        "endChar": 17
      },
      "revId": "71c5bc1ee8b3e17d7ae3c74a5183a45d7ff4421a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7101c995_79dea7f3",
        "filename": "modules/desktop_capture/win/selected_window_context.cc",
        "patchSetId": 2
      },
      "lineNbr": 84,
      "author": {
        "id": 10010
      },
      "writtenOn": "2020-06-04T20:30:54Z",
      "side": 1,
      "message": "Correct, but i would expect that MSO_BORDEREFFECT_WINDOW_CLASS is not the only class name which could be there, that\u0027s why it is generalized in comment to \"visual effect window\".",
      "parentUuid": "a7cc63df_2b10ce48",
      "range": {
        "startLine": 81,
        "startChar": 0,
        "endLine": 84,
        "endChar": 17
      },
      "revId": "71c5bc1ee8b3e17d7ae3c74a5183a45d7ff4421a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "44aa90e7_743e28b8",
        "filename": "modules/desktop_capture/win/selected_window_context.cc",
        "patchSetId": 2
      },
      "lineNbr": 84,
      "author": {
        "id": 5064
      },
      "writtenOn": "2020-06-19T14:24:02Z",
      "side": 1,
      "message": "OK; I think the comment should be reworded to clarify what is intended, e.g:\n\n  // Skip windows added by the system to contain visual effects, e.g. drop-shadows.",
      "parentUuid": "7101c995_79dea7f3",
      "range": {
        "startLine": 81,
        "startChar": 0,
        "endLine": 84,
        "endChar": 17
      },
      "revId": "71c5bc1ee8b3e17d7ae3c74a5183a45d7ff4421a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0b791f68_6112b1e0",
        "filename": "modules/desktop_capture/win/selected_window_context.cc",
        "patchSetId": 2
      },
      "lineNbr": 84,
      "author": {
        "id": 10010
      },
      "writtenOn": "2020-06-26T00:55:18Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "44aa90e7_743e28b8",
      "range": {
        "startLine": 81,
        "startChar": 0,
        "endLine": 84,
        "endChar": 17
      },
      "revId": "71c5bc1ee8b3e17d7ae3c74a5183a45d7ff4421a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ac882c18_eb4eb44a",
        "filename": "modules/desktop_capture/win/selected_window_context.h",
        "patchSetId": 2
      },
      "lineNbr": 36,
      "author": {
        "id": 5064
      },
      "writtenOn": "2020-06-04T13:35:44Z",
      "side": 1,
      "message": "nit: Not clear from this name what is being checked - looks like you\u0027re just checking that it matches what is stored?",
      "range": {
        "startLine": 36,
        "startChar": 7,
        "endLine": 36,
        "endChar": 23
      },
      "revId": "71c5bc1ee8b3e17d7ae3c74a5183a45d7ff4421a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f3eb7fb7_ef29a6fa",
        "filename": "modules/desktop_capture/win/selected_window_context.h",
        "patchSetId": 2
      },
      "lineNbr": 36,
      "author": {
        "id": 10010
      },
      "writtenOn": "2020-06-04T20:30:54Z",
      "side": 1,
      "message": "It\u0027s not just checking if class names match, some class names should be ignored.\nCan you suggest a good name for it?",
      "parentUuid": "ac882c18_eb4eb44a",
      "range": {
        "startLine": 36,
        "startChar": 7,
        "endLine": 36,
        "endChar": 23
      },
      "revId": "71c5bc1ee8b3e17d7ae3c74a5183a45d7ff4421a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5ebb88d2_ea007e43",
        "filename": "modules/desktop_capture/win/selected_window_context.h",
        "patchSetId": 2
      },
      "lineNbr": 36,
      "author": {
        "id": 5064
      },
      "writtenOn": "2020-06-19T14:24:02Z",
      "side": 1,
      "message": "What job is this function actually performing, i.e. what does a return-value of |true| actually mean?  The function should be named based on that, essentially.\n\ne.g. if the function were updated to check whether the enumerated window is a descendent of the selected window, then it would be called IsDescendentOfSelectedWindow(), though AFAICT that sounds like what IsWindowOwnedBySelectedWindow() is intended to mean. :P",
      "parentUuid": "f3eb7fb7_ef29a6fa",
      "range": {
        "startLine": 36,
        "startChar": 7,
        "endLine": 36,
        "endChar": 23
      },
      "revId": "71c5bc1ee8b3e17d7ae3c74a5183a45d7ff4421a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3d34a130_9d089533",
        "filename": "modules/desktop_capture/win/selected_window_context.h",
        "patchSetId": 2
      },
      "lineNbr": 36,
      "author": {
        "id": 10010
      },
      "writtenOn": "2020-06-26T00:55:18Z",
      "side": 1,
      "message": "Moved to IsWindowOwnedBySelectedWindow.\nIsWindowOwnedBySelectedWindow is using early return approach now, no need to have a separate function to check class name.",
      "parentUuid": "5ebb88d2_ea007e43",
      "range": {
        "startLine": 36,
        "startChar": 7,
        "endLine": 36,
        "endChar": 23
      },
      "revId": "71c5bc1ee8b3e17d7ae3c74a5183a45d7ff4421a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3adb2942_9fd11f51",
        "filename": "modules/desktop_capture/win/selected_window_context.h",
        "patchSetId": 2
      },
      "lineNbr": 36,
      "author": {
        "id": 5064
      },
      "writtenOn": "2020-06-26T14:35:57Z",
      "side": 1,
      "message": "Nice!",
      "parentUuid": "3d34a130_9d089533",
      "range": {
        "startLine": 36,
        "startChar": 7,
        "endLine": 36,
        "endChar": 23
      },
      "revId": "71c5bc1ee8b3e17d7ae3c74a5183a45d7ff4421a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    }
  ]
}