{
  "comments": [
    {
      "key": {
        "uuid": "3495665b_45749e34",
        "filename": "test/peer_scenario/peer_scenario.h",
        "patchSetId": 1
      },
      "lineNbr": 50,
      "author": {
        "id": 5524
      },
      "writtenOn": "2019-07-31T17:27:58Z",
      "side": 1,
      "message": "Unless you think it becomes too verbose, I would suggest renaming these to indicate they\nactually run the processing (on the signal thread at least) and are not just weird convenience\nmethods for waiting on events.",
      "range": {
        "startLine": 49,
        "startChar": 0,
        "endLine": 50,
        "endChar": 33
      },
      "revId": "dd487b58567abd0739076f12727c7dae50c17ab4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "826e93bd_30c7f1b8",
        "filename": "test/peer_scenario/peer_scenario.h",
        "patchSetId": 1
      },
      "lineNbr": 67,
      "author": {
        "id": 5524
      },
      "writtenOn": "2019-07-31T17:27:58Z",
      "side": 1,
      "message": "Do any of these even need to be wrapper in unique_ptr? Especially since you directly use the NetworkEmulationManagerImpl class instead of the NetworkEmulationManager interface?",
      "range": {
        "startLine": 65,
        "startChar": 0,
        "endLine": 67,
        "endChar": 65
      },
      "revId": "dd487b58567abd0739076f12727c7dae50c17ab4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "21439b24_d74b3f66",
        "filename": "test/peer_scenario/peer_scenario_client.h",
        "patchSetId": 1
      },
      "lineNbr": 62,
      "author": {
        "id": 5524
      },
      "writtenOn": "2019-07-31T17:27:58Z",
      "side": 1,
      "message": "What are the keys in this map, is this in preparation for unbundled transport support?",
      "range": {
        "startLine": 62,
        "startChar": 13,
        "endLine": 62,
        "endChar": 16
      },
      "revId": "dd487b58567abd0739076f12727c7dae50c17ab4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f3e3ab08_bbc459f8",
        "filename": "test/peer_scenario/peer_scenario_client.h",
        "patchSetId": 1
      },
      "lineNbr": 65,
      "author": {
        "id": 5524
      },
      "writtenOn": "2019-07-31T17:27:58Z",
      "side": 1,
      "message": "Why is this particular config nested in the \"grand\" Config while the others are separate?\nI don\u0027t even see any usage of it?",
      "range": {
        "startLine": 65,
        "startChar": 11,
        "endLine": 65,
        "endChar": 28
      },
      "revId": "dd487b58567abd0739076f12727c7dae50c17ab4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f9b87c93_703342ea",
        "filename": "test/peer_scenario/peer_scenario_client.h",
        "patchSetId": 1
      },
      "lineNbr": 71,
      "author": {
        "id": 5524
      },
      "writtenOn": "2019-07-31T17:27:58Z",
      "side": 1,
      "message": "planning on adding more things to this, or why a struct with a single member?",
      "range": {
        "startLine": 71,
        "startChar": 9,
        "endLine": 71,
        "endChar": 29
      },
      "revId": "dd487b58567abd0739076f12727c7dae50c17ab4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5eb302ed_defb7bf6",
        "filename": "test/peer_scenario/sdp_callbacks.cc",
        "patchSetId": 1
      },
      "lineNbr": 50,
      "author": {
        "id": 5524
      },
      "writtenOn": "2019-07-31T17:27:58Z",
      "side": 1,
      "message": "why not just an alias?",
      "range": {
        "startLine": 50,
        "startChar": 4,
        "endLine": 50,
        "endChar": 12
      },
      "revId": "dd487b58567abd0739076f12727c7dae50c17ab4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5d328439_94cb28fb",
        "filename": "test/peer_scenario/sdp_callbacks.cc",
        "patchSetId": 1
      },
      "lineNbr": 59,
      "author": {
        "id": 5524
      },
      "writtenOn": "2019-07-31T17:27:58Z",
      "side": 1,
      "message": "here too?\nRTC_CHECK(error.ok()) \u003c\u003c error.message();",
      "revId": "dd487b58567abd0739076f12727c7dae50c17ab4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4c314695_5dd07dd9",
        "filename": "test/peer_scenario/sdp_callbacks.h",
        "patchSetId": 1
      },
      "lineNbr": 25,
      "author": {
        "id": 5524
      },
      "writtenOn": "2019-07-31T17:27:58Z",
      "side": 1,
      "message": "(here and below)\nAre both these versions needed? Seems like we\u0027re currently only use the latter one, and if we want a test where sdp negotiation is supposed to fail, maybe that can add a version that checks the error state?",
      "revId": "dd487b58567abd0739076f12727c7dae50c17ab4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "13c54cb1_87148efc",
        "filename": "test/peer_scenario/signaling_route.cc",
        "patchSetId": 1
      },
      "lineNbr": 27,
      "author": {
        "id": 5524
      },
      "writtenOn": "2019-07-31T17:27:58Z",
      "side": 1,
      "message": "no need to check it?",
      "range": {
        "startLine": 27,
        "startChar": 18,
        "endLine": 27,
        "endChar": 21
      },
      "revId": "dd487b58567abd0739076f12727c7dae50c17ab4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1b9e6bb7_57667c39",
        "filename": "test/peer_scenario/tests/peer_scenario_quality_test.cc",
        "patchSetId": 1
      },
      "lineNbr": 23,
      "author": {
        "id": 5524
      },
      "writtenOn": "2019-07-31T17:27:58Z",
      "side": 1,
      "message": "nit: sender/receiver? I interpret ret as return and that doesn\u0027t make sense for a client, only for the link",
      "range": {
        "startLine": 23,
        "startChar": 7,
        "endLine": 23,
        "endChar": 10
      },
      "revId": "dd487b58567abd0739076f12727c7dae50c17ab4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    }
  ]
}