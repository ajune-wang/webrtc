{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "f5daf2ad_b4e0b3f2",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 18974
      },
      "writtenOn": "2022-11-17T08:18:12Z",
      "side": 1,
      "message": "There will be ~6700 times(for 3X3 call) and ~5800 times(for 1:1 call) of PostTask in 10 s for rtc_event_log before this CL event when logging doesn\u0027t start, which means this CL will recude PostTask by ~670 times/s(for 3X3 call) and ~580 times/s(for 1:1 call) when logging doesn\u0027t start.",
      "revId": "223f3564905bcf0a07e39ca14bdcafd061343cc9",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "142053f8_c92d6acd",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 5150
      },
      "writtenOn": "2022-11-17T14:12:08Z",
      "side": 1,
      "message": "Thanks for looking into this!\n\nHowever, I wonder if you\u0027ve measured the performance impact on something user visible, e.g. power? If so, could you share those results? (This CL removes unnecessary PostTask, but introduces extra locks which could cause contention, for example.)",
      "revId": "223f3564905bcf0a07e39ca14bdcafd061343cc9",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "25f30e04_2cd532d1",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 18974
      },
      "writtenOn": "2022-11-18T01:54:56Z",
      "side": 1,
      "message": "I have measured power effect on Intel ADL (ChromeOS):\nFor 3x3 call: Package power can be reduced from 3.13 w to 3.05 w, gaining 0.08 w(2.6%) power saving;\nFor 1:1 call: Package Power can be reduced from 2.55 w to 2.52 w, gaining 0.03 w(1.2%) power saving.",
      "parentUuid": "142053f8_c92d6acd",
      "revId": "223f3564905bcf0a07e39ca14bdcafd061343cc9",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "57a5d325_0a8d38a5",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 18974
      },
      "writtenOn": "2022-11-18T07:47:19Z",
      "side": 1,
      "message": "As for your concern about the use of locks:\n\nWhen logging starts – \nAlthough ’LogToMemory‘ and ’ScheduleOutput‘ both have the lock, they won’t be blocked for they are posted to a same task queue.\n\nWhen logging doesn’t start – \nFor there are only pop_front and push_back  main operations in ’LogToMemory‘ and ’LogToMemory‘ is a void function with no need for any return, which mean ’LogToMemory‘ will complete in a very short time and almost won’t lead to any block.\nAnd the original code use PostTask for ’LogToMemory‘, there is also a lock and operation of push in the original PostTasks, see:\nhttps://source.chromium.org/chromium/chromium/src/+/main:third_party/webrtc/rtc_base/task_queue_libevent.cc;l\u003d206\nhttps://source.chromium.org/chromium/chromium/src/+/main:third_party/webrtc/rtc_base/task_queue_stdlib.cc;l\u003d161\nhttps://source.chromium.org/chromium/chromium/src/+/main:third_party/webrtc/rtc_base/task_queue_win.cc;l\u003d221\nhttps://source.chromium.org/chromium/chromium/src/+/main:third_party/webrtc/rtc_base/thread.cc;l\u003d496\nhttps://source.chromium.org/chromium/chromium/src/+/main:third_party/webrtc/test/time_controller/simulated_task_queue.cc;l\u003d70\nhttps://source.chromium.org/chromium/chromium/src/+/main:base/task/sequence_manager/task_queue_impl.cc;drc\u003d603337a74bf04efd536b251a7f2b4eb44fe153a9;l\u003d422\nWe just move the lock in PostTask out to ‘LogToMemory’ and do the push operation.",
      "parentUuid": "25f30e04_2cd532d1",
      "revId": "223f3564905bcf0a07e39ca14bdcafd061343cc9",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e69a2c56_f7e89696",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 5150
      },
      "writtenOn": "2022-11-24T10:34:12Z",
      "side": 1,
      "message": "Thanks. A 2.6% power reduction seems well worth it.\n\nThe locks and atomics introduce some additional complexity though. For example,\nthere seems to be a bit of a race that might cause events to be dropped: Let\u0027s say that a new event is logged and and logging is not in progress according to the atomic check on line 143. Before the event can be written to memory, logging is started on another thread, which dumps the contents of the memory buffer to a file.\nThen the first event is added to the (now empty) memory buffer.\n\nThis could be fixed by taking the lock earlier, I think. However, I understand that Markus has a different proposal to solve the same problem. I suggest we wait a bit and compare the two approaches.",
      "parentUuid": "57a5d325_0a8d38a5",
      "revId": "223f3564905bcf0a07e39ca14bdcafd061343cc9",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6fb981f9_7b804954",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 9515
      },
      "writtenOn": "2022-11-25T18:18:02Z",
      "side": 1,
      "message": "For reference here\u0027s the other CL: https://webrtc-review.googlesource.com/c/src/+/265406. It removes PostTasks even when logging is on. I haven\u0027t landed it due to the low impact we measured earlier, but Xuanxi if you measure impact I think I\u0027m ready to change my mind on landing it.",
      "parentUuid": "e69a2c56_f7e89696",
      "revId": "223f3564905bcf0a07e39ca14bdcafd061343cc9",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7ac88d53_1c8c1b84",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 18974
      },
      "writtenOn": "2022-11-28T08:48:52Z",
      "side": 1,
      "message": "Thanks Björn. We will work on your concern about the possibility of the event drop.",
      "parentUuid": "6fb981f9_7b804954",
      "revId": "223f3564905bcf0a07e39ca14bdcafd061343cc9",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3991bce9_8a1a2b2e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 18974
      },
      "writtenOn": "2022-11-28T08:50:38Z",
      "side": 1,
      "message": "Thanks Markus. We will start to measure the power and PostTasks times impact of the CL: https://webrtc-review.googlesource.com/c/src/+/265406.",
      "parentUuid": "7ac88d53_1c8c1b84",
      "revId": "223f3564905bcf0a07e39ca14bdcafd061343cc9",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a27cb9ca_db83e340",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 18974
      },
      "writtenOn": "2022-12-01T03:27:46Z",
      "side": 1,
      "message": "Hi Björn, as for your concern about the possibility of the event drop:\n\u003eBefore the event can be written to memory, logging is started on another thread, which dumps the contents of the memory buffer to a file.\n\u003eThen the first event is added to the (now empty) memory buffer. \n\nThis event won\u0027t be dropped and will be output in the next output task.\n\nWhat we may concern is that the above mentioned event may be output not in the original order, because there will be a race between this event\u0027s `LogToMemory()` on line 145 [1] and the later events\u0027 `LogToMemory()` in PostTask on line 152 [2].\n\nBut the order question already exists in original code. For example, when thread A calls `Log()` and then in a short time thread B calls `Log()`, there is no guarantee for A\u0027s `LogToMemory()` in PostTask executed before B\u0027s.\n\n[1] https://webrtc-review.googlesource.com/c/src/+/283641/4/logging/rtc_event_log/rtc_event_log_impl.cc#145\n[2] https://webrtc-review.googlesource.com/c/src/+/283641/4/logging/rtc_event_log/rtc_event_log_impl.cc#152",
      "parentUuid": "3991bce9_8a1a2b2e",
      "revId": "223f3564905bcf0a07e39ca14bdcafd061343cc9",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b7dd3a83_fe3a9557",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 18974
      },
      "writtenOn": "2022-12-01T03:38:01Z",
      "side": 1,
      "message": "Hi Markus, I have measured the power impact of CL: https://webrtc-review.googlesource.com/c/src/+/265406 on Intel ADL (ChromeOS):\n\nWe can gain ~1.2% (40 mw) package power saving for 3x3 call and ~0.9% (30 mw) saving for 1:1 call.\n\nAnd I have also found from the tracing file that nearly all (99.9%) of the `RtcEventLogImpl::Log` PostTask[1] will be executed inline[2] exactly as you mentioned in commit message, which will contribute to power reduction to a so great extent when logging is on.\n\nBut considering most of the normal users may don\u0027t need to turn logging on, I wonder whether we should just remove all the PostTasks as this CL.\n\n[1] https://webrtc-review.googlesource.com/c/src/+/265406/8/logging/rtc_event_log/rtc_event_log_impl.cc#141\n[2] https://webrtc-review.googlesource.com/c/src/+/265406/8/rtc_base/inline_task_queue.h#51",
      "parentUuid": "a27cb9ca_db83e340",
      "revId": "223f3564905bcf0a07e39ca14bdcafd061343cc9",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0708ffff_e3b43c21",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 9515
      },
      "writtenOn": "2022-12-11T21:56:07Z",
      "side": 1,
      "message": "Sorry for the radio silence here, been busy trying to see if we can get the inline task queue implementation working (still ongoing.. :/). Apart from that implementation working when logging is on, it has the benefit of resorting to PostTask on finding contention unlike a lock for which the locked region might block incoming Log() (now you might argue that a lock is anyway taken in the TQ implementation - but the locked region there is small). Note Log() which is used from Audio context and could cause more glitching if it gets dependent on output encoding \u0026 writing.\n\n\u003e But considering most of the normal users may don\u0027t need to turn logging on\n\nLogging is on in many cases, so it\u0027s important to ensure it\u0027s not normally PostTasking as well.\n\nHow sure are you about the impact data? Is there a stddev or something attached to the improvement figures?",
      "parentUuid": "b7dd3a83_fe3a9557",
      "revId": "223f3564905bcf0a07e39ca14bdcafd061343cc9",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ef3c78ff_b9357bd3",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 18974
      },
      "writtenOn": "2022-12-16T09:03:01Z",
      "side": 1,
      "message": "The power data was collected from the test with runtime lasting for 230 s and was relatively stable during the test.\nHere is stddev attached (package power/stddev):\nFor 3x3 call: Default - 3.13 w/0.07     With this CL - 3.05 w/0.05;\nFor 1:1 call: Default – 2.55 w/0.04     With this CL – 2.52 w/0.02.\nSo the impact data has credibility.",
      "parentUuid": "0708ffff_e3b43c21",
      "revId": "223f3564905bcf0a07e39ca14bdcafd061343cc9",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0b20f289_e9b62360",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 9515
      },
      "writtenOn": "2023-01-03T15:28:28Z",
      "side": 1,
      "message": "Happy new year! I synced plans with event log owners. Can you work to get to the following state?\n\n1. Ensure Log doesn\u0027t PostTask in the common case, even when logging is on i.e. write the history under lock.\n2. Make the history size limitation only apply to non-config events, and only when logging is off. This should be safe as the TaskQueue would previously get events piled up in case of slow output, and with the change they would be piled up in the non-config event history instead.\n3. Pay attention to the case when history is full, logging is enabled, and more events are logged - we should not loose events here. Good with a new test case for that.\n\nI added new mocked time unit tests in https://webrtc-review.googlesource.com/c/src/+/290382 - pls rebase \u0026 feel free to extend that suite as mandated by the design change.",
      "parentUuid": "ef3c78ff_b9357bd3",
      "revId": "223f3564905bcf0a07e39ca14bdcafd061343cc9",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "048011e1_abbd9410",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 18554
      },
      "writtenOn": "2023-01-04T12:53:29Z",
      "side": 1,
      "message": "Hi Björn, as for your concern about the possibility of the event drop:\n\n\u003e Before an event can be written to memory, logging is started on another thread, then this event is added to the (now empty) memory buffer.\n\nThis event won\u0027t be dropped and will be output in the next output task.\n\nWhat we may concern is that the above mentioned event may be output not in the original order, because there will be a race between this event\u0027s LogToMemory()[1] on line 145 and the later events\u0027 `LogToMemory()` in PostTask on line 152.[2]\n\n\nBut the order question also exists in orignal code. forxcx:\n1. When thread A calls Log() and then in a short time thread B calls Log(), \n2. there is no guarantee for A\u0027s LogToMemory() in PostTask done before B\u0027s.\n\n\n[1] https://source.chromium.org/chromium/chromium/src/+/main:base/trace_event/common/trace_event_common.h;l\u003d308?q\u003dTRACE_EVENT0\u0026ss\u003dchromium\n\n[2]\nlink",
      "parentUuid": "3991bce9_8a1a2b2e",
      "revId": "223f3564905bcf0a07e39ca14bdcafd061343cc9",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a4cdd04d_788b5fd0",
        "filename": "logging/rtc_event_log/rtc_event_log_impl.cc",
        "patchSetId": 4
      },
      "lineNbr": 216,
      "author": {
        "id": 9515
      },
      "writtenOn": "2022-12-11T21:56:07Z",
      "side": 1,
      "message": "This method is likely to take a while to execute and the output writing is likely to block. Since the lock is held throughout, it\u0027ll block threads calling into ::Log(). Can you minimize the lock scope?\n\nAlso @terelius@webrtc.org - one thing that perplexes me is the special handling of encoded_configs which isn\u0027t consumed here like it is for the normal history. It says \"configs are not discarded\" - but they are sometimes on old line 210. What\u0027s the reason for the special handling? I couldn\u0027t find a reason why we keep the encoded_configs_.\n\nIf encoded_configs_ can be emptied on output, then the mutex lock region here could be quite small and not encompass EncodeBatch.",
      "revId": "223f3564905bcf0a07e39ca14bdcafd061343cc9",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "84863597_a9759876",
        "filename": "logging/rtc_event_log/rtc_event_log_impl.cc",
        "patchSetId": 4
      },
      "lineNbr": 216,
      "author": {
        "id": 18974
      },
      "writtenOn": "2022-12-16T09:03:01Z",
      "side": 1,
      "message": "In Patchset 4, for there is no lock in `Log`, other threads can also call `Log` and do PostTask normally though `LogEventsFromMemoryToOutput` still hold the lock.\n\nBut in Patchset 5, we add a lock in `Log` [1]. So we move most_recent_config_history_ and most_recent_history_ (guarded by the lock) to local queues to reduce locking scope[2].\n\n[1] https://webrtc-review.googlesource.com/c/src/+/283641/5/logging/rtc_event_log/rtc_event_log_impl.cc#166\n[2] https://webrtc-review.googlesource.com/c/src/+/283641/5/logging/rtc_event_log/rtc_event_log_impl.cc#249",
      "parentUuid": "a4cdd04d_788b5fd0",
      "revId": "223f3564905bcf0a07e39ca14bdcafd061343cc9",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "02939165_42d14c74",
        "filename": "logging/rtc_event_log/rtc_event_log_impl.cc",
        "patchSetId": 4
      },
      "lineNbr": 216,
      "author": {
        "id": 9515
      },
      "writtenOn": "2023-01-03T15:28:28Z",
      "side": 1,
      "message": "Should this",
      "parentUuid": "84863597_a9759876",
      "revId": "223f3564905bcf0a07e39ca14bdcafd061343cc9",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c81c63a1_2f0621cb",
        "filename": "logging/rtc_event_log/rtc_event_log_impl.h",
        "patchSetId": 4
      },
      "lineNbr": 89,
      "author": {
        "id": 9515
      },
      "writtenOn": "2022-12-11T21:56:07Z",
      "side": 1,
      "message": "I\u0027m not sure this needs to be an atomic. Can the boolean flag just be wrapped in under events_history_mutex_ which is anyway taken later during LogToMemory?",
      "range": {
        "startLine": 89,
        "startChar": 19,
        "endLine": 89,
        "endChar": 41
      },
      "revId": "223f3564905bcf0a07e39ca14bdcafd061343cc9",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bec640d5_b9a4b6b8",
        "filename": "logging/rtc_event_log/rtc_event_log_impl.h",
        "patchSetId": 4
      },
      "lineNbr": 89,
      "author": {
        "id": 18974
      },
      "writtenOn": "2022-12-16T09:03:01Z",
      "side": 1,
      "message": "Thanks. We have changed it to boolean flag wrapped in the mutex.",
      "parentUuid": "c81c63a1_2f0621cb",
      "range": {
        "startLine": 89,
        "startChar": 19,
        "endLine": 89,
        "endChar": 41
      },
      "revId": "223f3564905bcf0a07e39ca14bdcafd061343cc9",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "081fb30b_36395c06",
        "filename": "logging/rtc_event_log/rtc_event_log_impl.h",
        "patchSetId": 4
      },
      "lineNbr": 89,
      "author": {
        "id": 9515
      },
      "writtenOn": "2023-01-03T15:28:28Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "bec640d5_b9a4b6b8",
      "range": {
        "startLine": 89,
        "startChar": 19,
        "endLine": 89,
        "endChar": 41
      },
      "revId": "223f3564905bcf0a07e39ca14bdcafd061343cc9",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    }
  ]
}