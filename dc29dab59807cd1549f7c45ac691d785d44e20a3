{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "2b8040a6_4eef0972",
        "filename": "/COMMIT_MSG",
        "patchSetId": 6
      },
      "lineNbr": 12,
      "author": {
        "id": 5234
      },
      "writtenOn": "2020-10-08T07:58:12Z",
      "side": 1,
      "message": "I\u0027d prefer \"frame in main memory\", since memory mapped makes it sound like mmap() or the like is involved.",
      "range": {
        "startLine": 12,
        "startChar": 19,
        "endLine": 12,
        "endChar": 38
      },
      "revId": "dc29dab59807cd1549f7c45ac691d785d44e20a3",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "af989174_10ccaabe",
        "filename": "/COMMIT_MSG",
        "patchSetId": 6
      },
      "lineNbr": 16,
      "author": {
        "id": 5234
      },
      "writtenOn": "2020-10-08T07:58:12Z",
      "side": 1,
      "message": "I think this concept is weird. Can you rephrase, and either refer to the chroium usecase, or write something about cases where conversion from kNative to a format other than I420 is more efficient.",
      "range": {
        "startLine": 16,
        "startChar": 21,
        "endLine": 16,
        "endChar": 54
      },
      "revId": "dc29dab59807cd1549f7c45ac691d785d44e20a3",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "62d31bbe_5c55713f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 5234
      },
      "writtenOn": "2020-10-08T07:58:12Z",
      "side": 1,
      "message": "api/video/ looks basically good, just a few minor things.",
      "revId": "dc29dab59807cd1549f7c45ac691d785d44e20a3",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "961420ba_245b7c04",
        "filename": "api/video/video_frame_buffer.cc",
        "patchSetId": 6
      },
      "lineNbr": 45,
      "author": {
        "id": 5117
      },
      "writtenOn": "2020-10-08T08:09:04Z",
      "side": 1,
      "message": "nit: RTC_CHECK",
      "range": {
        "startLine": 45,
        "startChar": 2,
        "endLine": 45,
        "endChar": 12
      },
      "revId": "dc29dab59807cd1549f7c45ac691d785d44e20a3",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "905b9fc2_91bc54a2",
        "filename": "api/video/video_frame_buffer.cc",
        "patchSetId": 6
      },
      "lineNbr": 45,
      "author": {
        "id": 8683
      },
      "writtenOn": "2020-10-08T08:30:28Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "961420ba_245b7c04",
      "range": {
        "startLine": 45,
        "startChar": 2,
        "endLine": 45,
        "endChar": 12
      },
      "revId": "dc29dab59807cd1549f7c45ac691d785d44e20a3",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "abc79dc2_211dec19",
        "filename": "api/video/video_frame_buffer.h",
        "patchSetId": 6
      },
      "lineNbr": 79,
      "author": {
        "id": 5234
      },
      "writtenOn": "2020-10-08T07:58:12Z",
      "side": 1,
      "message": "Please be more specific. I take it you want to make it non-virtual? Or do you want to make GetNV12 virtual too? I don\u0027t recall the details why it is virtual now, but I guess it\u0027s related to the chromium use case.",
      "range": {
        "startLine": 78,
        "startChar": 0,
        "endLine": 79,
        "endChar": 26
      },
      "revId": "dc29dab59807cd1549f7c45ac691d785d44e20a3",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "97cf9fbb_4e657a53",
        "filename": "api/video/video_frame_buffer.h",
        "patchSetId": 6
      },
      "lineNbr": 79,
      "author": {
        "id": 5117
      },
      "writtenOn": "2020-10-08T08:09:04Z",
      "side": 1,
      "message": "Yes, it\u0027s making it non-virtual and always returning this for kI420 buffers.\n\nThis method is currently used to check if the kNative is trivially convertible to I420. The newly implemented method does even more than that and is cleaner.",
      "parentUuid": "abc79dc2_211dec19",
      "range": {
        "startLine": 78,
        "startChar": 0,
        "endLine": 79,
        "endChar": 26
      },
      "revId": "dc29dab59807cd1549f7c45ac691d785d44e20a3",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7e773c29_6b96b538",
        "filename": "api/video/video_frame_buffer.h",
        "patchSetId": 6
      },
      "lineNbr": 79,
      "author": {
        "id": 8683
      },
      "writtenOn": "2020-10-08T08:30:28Z",
      "side": 1,
      "message": "I just added a note that we want it to be non-virtual.",
      "parentUuid": "97cf9fbb_4e657a53",
      "range": {
        "startLine": 78,
        "startChar": 0,
        "endLine": 79,
        "endChar": 26
      },
      "revId": "dc29dab59807cd1549f7c45ac691d785d44e20a3",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f7272c0a_4d79ec63",
        "filename": "api/video/video_frame_buffer.h",
        "patchSetId": 6
      },
      "lineNbr": 90,
      "author": {
        "id": 5117
      },
      "writtenOn": "2020-10-08T08:09:04Z",
      "side": 1,
      "message": "in the main memory\n\nAlso, write here that does that only if the conversion is pixel perfect.\nOtherwise, it could always return ToI420(), since kI420 is always passed int |types|.",
      "range": {
        "startLine": 90,
        "startChar": 31,
        "endLine": 90,
        "endChar": 52
      },
      "revId": "dc29dab59807cd1549f7c45ac691d785d44e20a3",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "381b7fda_8c0126c0",
        "filename": "api/video/video_frame_buffer.h",
        "patchSetId": 6
      },
      "lineNbr": 90,
      "author": {
        "id": 5234
      },
      "writtenOn": "2020-10-08T08:19:30Z",
      "side": 1,
      "message": "\u003e Also, write here that does that only if the conversion is pixel perfect.\n\nThat makes the method a bit less useful; I view it as a generalization of ToI420, and at some point, I would be happy to retire the latter.\n\nIs there some other reasonable way to deal with this? Return a separate bool/enum saying if conversion is pixel perfect? Or add update_rect as an input argument and return value?\n\nIt might be fine to have that restriction for now, but then this method looks like a workaround usable only for chromium\u0027s odd way of using kNative frames, rather than a generally useful api.",
      "parentUuid": "f7272c0a_4d79ec63",
      "range": {
        "startLine": 90,
        "startChar": 31,
        "endLine": 90,
        "endChar": 52
      },
      "revId": "dc29dab59807cd1549f7c45ac691d785d44e20a3",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "76938880_4feadb44",
        "filename": "api/video/video_frame_buffer.h",
        "patchSetId": 6
      },
      "lineNbr": 90,
      "author": {
        "id": 8683
      },
      "writtenOn": "2020-10-08T08:30:28Z",
      "side": 1,
      "message": "That is a good point. I could return a pair here with the refptr and a bool signalling if the frame was a pixel perfect conversion. This allows for accelerated conversions to happen, instead of copying the raw frame and then converting using ToI420 in software for example.",
      "parentUuid": "f7272c0a_4d79ec63",
      "range": {
        "startLine": 90,
        "startChar": 31,
        "endLine": 90,
        "endChar": 52
      },
      "revId": "dc29dab59807cd1549f7c45ac691d785d44e20a3",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1613c5e1_3dce1e10",
        "filename": "api/video/video_frame_buffer.h",
        "patchSetId": 6
      },
      "lineNbr": 90,
      "author": {
        "id": 5117
      },
      "writtenOn": "2020-10-08T08:34:27Z",
      "side": 1,
      "message": "Having an output bool parameter would almost solve the issue for me.\n\nReplacing ToI420 with with method would look cleaner, but I\u0027m afraid it would greatly complicate any use of webrtc by third party developers. Before they needed to only implement ToI420 and be done with it. Now they need to process all possible frame buffer types.\nWell, if we swear that we would never call this method without kI420 then that\u0027s technically the same as implementing ToI420.\n\nThen, there\u0027s a little issue that if the conversion is not pixel perfect we would prefer I420, since libvpx NV12 support is just reducing the cost of NV12-\u003eI420 conversion by collocating it with an unavoidable copy operation.\n\nSo my suggestion is - have two parameters: types and a bool only_bit_perfect_copy_allowed? Then in webrtc we could first call it with {nv12/i420}, true, then, if that fails, {i420, false}\n\nThen in the comment here we could state that the absolute minimum of {kI420, false} is needed to be implemented.",
      "parentUuid": "381b7fda_8c0126c0",
      "range": {
        "startLine": 90,
        "startChar": 31,
        "endLine": 90,
        "endChar": 52
      },
      "revId": "dc29dab59807cd1549f7c45ac691d785d44e20a3",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "41dcbc42_cb1bc5f0",
        "filename": "api/video_codecs/video_encoder.h",
        "patchSetId": 6
      },
      "lineNbr": 259,
      "author": {
        "id": 5234
      },
      "writtenOn": "2020-10-08T07:58:12Z",
      "side": 1,
      "message": "It would make code simpler if we forbid empty lists, and instead rely on {kI420} the default.",
      "range": {
        "startLine": 258,
        "startChar": 78,
        "endLine": 259,
        "endChar": 24
      },
      "revId": "dc29dab59807cd1549f7c45ac691d785d44e20a3",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1b639879_214d0010",
        "filename": "api/video_codecs/video_encoder.h",
        "patchSetId": 6
      },
      "lineNbr": 259,
      "author": {
        "id": 8683
      },
      "writtenOn": "2020-10-08T08:30:28Z",
      "side": 1,
      "message": "This makes sense! Good suggestion.",
      "parentUuid": "41dcbc42_cb1bc5f0",
      "range": {
        "startLine": 258,
        "startChar": 78,
        "endLine": 259,
        "endChar": 24
      },
      "revId": "dc29dab59807cd1549f7c45ac691d785d44e20a3",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d759a3d5_d9a60411",
        "filename": "api/video_codecs/video_encoder.h",
        "patchSetId": 6
      },
      "lineNbr": 259,
      "author": {
        "id": 8683
      },
      "writtenOn": "2020-10-08T08:31:17Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1b639879_214d0010",
      "range": {
        "startLine": 258,
        "startChar": 78,
        "endLine": 259,
        "endChar": 24
      },
      "revId": "dc29dab59807cd1549f7c45ac691d785d44e20a3",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cb73ed80_a4e2a98b",
        "filename": "api/video_codecs/video_encoder.h",
        "patchSetId": 6
      },
      "lineNbr": 261,
      "author": {
        "id": 5234
      },
      "writtenOn": "2020-10-08T07:58:12Z",
      "side": 1,
      "message": "Consider using absl::InlineVector.",
      "range": {
        "startLine": 261,
        "startChar": 4,
        "endLine": 261,
        "endChar": 15
      },
      "revId": "dc29dab59807cd1549f7c45ac691d785d44e20a3",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4c5631ab_3e4ed312",
        "filename": "api/video_codecs/video_encoder.h",
        "patchSetId": 6
      },
      "lineNbr": 261,
      "author": {
        "id": 8683
      },
      "writtenOn": "2020-10-08T08:30:28Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "cb73ed80_a4e2a98b",
      "range": {
        "startLine": 261,
        "startChar": 4,
        "endLine": 261,
        "endChar": 15
      },
      "revId": "dc29dab59807cd1549f7c45ac691d785d44e20a3",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    }
  ]
}