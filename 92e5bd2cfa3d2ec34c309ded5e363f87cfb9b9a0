{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "218472b1_e19ff3f5",
        "filename": "modules/video_capture/linux/pipewire_session.cc",
        "patchSetId": 15
      },
      "lineNbr": 407,
      "author": {
        "id": 8046
      },
      "writtenOn": "2022-11-28T12:52:13Z",
      "side": 1,
      "message": "This is what caused us crashes in the capturer as this will cause the `fd` to be automatically closed by PipeWire. You should also close this `fd` yourself when you are cleaning all the DBus stuff.\nUse `pw_core_ \u003d pw_context_connect_fd(fcntl(fd, F_DUPFD_CLOEXEC), nullptr, 0);`\n\nFor reference: https://webrtc-review.googlesource.com/c/src/+/270421",
      "revId": "92e5bd2cfa3d2ec34c309ded5e363f87cfb9b9a0",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1acbf71a_3217d822",
        "filename": "modules/video_capture/linux/pipewire_session.cc",
        "patchSetId": 15
      },
      "lineNbr": 407,
      "author": {
        "id": 9816
      },
      "writtenOn": "2022-11-30T16:14:11Z",
      "side": 1,
      "message": "No. The desktop capture code the fd is closed explicitly as well. This does not happen here, so no duplication is necessary.",
      "parentUuid": "218472b1_e19ff3f5",
      "revId": "92e5bd2cfa3d2ec34c309ded5e363f87cfb9b9a0",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9a8a501c_e7a3bf52",
        "filename": "modules/video_capture/linux/pipewire_session.cc",
        "patchSetId": 15
      },
      "lineNbr": 407,
      "author": {
        "id": 8046
      },
      "writtenOn": "2022-11-30T17:12:12Z",
      "side": 1,
      "message": "I would still expect you close the fd yourself to have it under your control, but given the PipeWire documentation explicitly says it will close it, it should not be a problem.",
      "parentUuid": "1acbf71a_3217d822",
      "revId": "92e5bd2cfa3d2ec34c309ded5e363f87cfb9b9a0",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4af05a09_2e72e12f",
        "filename": "modules/video_capture/linux/pipewire_session.cc",
        "patchSetId": 15
      },
      "lineNbr": 443,
      "author": {
        "id": 8046
      },
      "writtenOn": "2022-11-28T12:52:13Z",
      "side": 1,
      "message": "Maybe also add `pw_thread_loop_wait(pw_main_loop_)` before stopping it to give it some time to finish?",
      "revId": "92e5bd2cfa3d2ec34c309ded5e363f87cfb9b9a0",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f8789540_70bd0f33",
        "filename": "modules/video_capture/linux/pipewire_session.cc",
        "patchSetId": 15
      },
      "lineNbr": 443,
      "author": {
        "id": 9816
      },
      "writtenOn": "2022-11-30T16:14:11Z",
      "side": 1,
      "message": "`pw_thread_loop_wait()` blocks until some other thread calls `pw_thread_loop_signal()`. Or what am I missing here?",
      "parentUuid": "4af05a09_2e72e12f",
      "revId": "92e5bd2cfa3d2ec34c309ded5e363f87cfb9b9a0",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5e9810dd_92fc3a71",
        "filename": "modules/video_capture/linux/pipewire_session.cc",
        "patchSetId": 15
      },
      "lineNbr": 443,
      "author": {
        "id": 8046
      },
      "writtenOn": "2022-11-30T17:12:12Z",
      "side": 1,
      "message": "Digging now into it, you are correct and I wonder why it works in our case. I think it\u0027s because we close the session and that gives us later OnCoreError callback which in return resumes this wait. This probably won\u0027t be happening in your case as the camera portal works differently.",
      "parentUuid": "f8789540_70bd0f33",
      "revId": "92e5bd2cfa3d2ec34c309ded5e363f87cfb9b9a0",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7fd5c443_a5272907",
        "filename": "modules/video_capture/linux/pipewire_session.cc",
        "patchSetId": 15
      },
      "lineNbr": 481,
      "author": {
        "id": 8046
      },
      "writtenOn": "2022-11-28T12:52:13Z",
      "side": 1,
      "message": "It looks like you will end up calling Finish(Success) multiple times, for example from the `PipeWireSync()` call in `InitPipeWire()`, but also in callbacks (`OnRegistryGlobal` or `OnNodeInfo`). Is this really how it\u0027s supposed to work? I\u0027m just asking, I might be missing something and I definitely don\u0027t know how the camera API in WebRTC is supposed to work, but I would expect you make sure all nodes/cams are listed before calling finish.",
      "revId": "92e5bd2cfa3d2ec34c309ded5e363f87cfb9b9a0",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1358506c_4c918eb3",
        "filename": "modules/video_capture/linux/pipewire_session.cc",
        "patchSetId": 15
      },
      "lineNbr": 481,
      "author": {
        "id": 9816
      },
      "writtenOn": "2022-11-30T16:14:11Z",
      "side": 1,
      "message": "The important part is `seq \u003d\u003d that-\u003esync_seq_`:\n`PipeWireSync()` send a new sync event with a new sequence number.\nWe call `PipeWireSync()` whenever we request new data. So when a sync event comes back and the sequence data does not match, then we are still waiting for more data.\nWhen the sequence numbers match, then all requested data has arrived and enumeration is complete and Finish(Success) is called.",
      "parentUuid": "7fd5c443_a5272907",
      "revId": "92e5bd2cfa3d2ec34c309ded5e363f87cfb9b9a0",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "645c37db_12196019",
        "filename": "modules/video_capture/linux/video_capture_pipewire.cc",
        "patchSetId": 15
      },
      "lineNbr": 313,
      "author": {
        "id": 8046
      },
      "writtenOn": "2022-11-28T12:52:13Z",
      "side": 1,
      "message": "This doesn\u0027t always give you the latest buffer if I\u0027m not mistaken.\n\nCheck what we have in the capturer: https://source.chromium.org/chromium/chromium/src/+/main:third_party/webrtc/modules/desktop_capture/linux/wayland/shared_screencast_stream.cc;l\u003d316",
      "revId": "92e5bd2cfa3d2ec34c309ded5e363f87cfb9b9a0",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "10e1ace7_6d8da46a",
        "filename": "modules/video_capture/linux/video_capture_pipewire.cc",
        "patchSetId": 15
      },
      "lineNbr": 313,
      "author": {
        "id": 9816
      },
      "writtenOn": "2022-11-30T16:14:11Z",
      "side": 1,
      "message": "You\u0027re dropping buffers if there is more than one buffer pending. I\u0027m not sure if that is the correct thing to do for cameras. v4l2 does not drop buffers either.",
      "parentUuid": "645c37db_12196019",
      "revId": "92e5bd2cfa3d2ec34c309ded5e363f87cfb9b9a0",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "de534c37_f4e2996c",
        "filename": "modules/video_capture/linux/video_capture_pipewire.cc",
        "patchSetId": 15
      },
      "lineNbr": 313,
      "author": {
        "id": 8046
      },
      "writtenOn": "2022-11-30T17:12:12Z",
      "side": 1,
      "message": "Right, but wouldn\u0027t that give you the most recent picture behind the camera? Let\u0027s say your are receiving frames faster than you are able to proccess, than won\u0027t your image be lagging and there will be delay? At least that\u0027s the usual behavior I see everywhere with screen sharing, but I might be wrong here.",
      "parentUuid": "10e1ace7_6d8da46a",
      "revId": "92e5bd2cfa3d2ec34c309ded5e363f87cfb9b9a0",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "046ba7d3_40d6cf95",
        "filename": "modules/video_capture/linux/video_capture_pipewire.cc",
        "patchSetId": 15
      },
      "lineNbr": 313,
      "author": {
        "id": 9816
      },
      "writtenOn": "2022-11-30T17:39:58Z",
      "side": 1,
      "message": "I think there is a difference between screen sharing and a camera. With screen sharing we have a high resolution and the framerate is best effort anyways. So just returning the latest buffer is a good idea.\n\nWith a Camera I would argue that smooth playback is more important than absolute minimum latency. And that means delivering all frames.",
      "parentUuid": "de534c37_f4e2996c",
      "revId": "92e5bd2cfa3d2ec34c309ded5e363f87cfb9b9a0",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2f51108b_b404556c",
        "filename": "modules/video_capture/linux/video_capture_pipewire.cc",
        "patchSetId": 15
      },
      "lineNbr": 313,
      "author": {
        "id": 8046
      },
      "writtenOn": "2022-11-30T17:52:09Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "046ba7d3_40d6cf95",
      "revId": "92e5bd2cfa3d2ec34c309ded5e363f87cfb9b9a0",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    }
  ]
}