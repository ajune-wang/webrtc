{
  "comments": [
    {
      "key": {
        "uuid": "1b6472f2_43ae4393",
        "filename": "modules/desktop_capture/mac/screen_capturer_mac.mm",
        "patchSetId": 2
      },
      "lineNbr": 303,
      "author": {
        "id": 5166
      },
      "writtenOn": "2018-12-06T20:29:33Z",
      "side": 1,
      "message": "I don\u0027t like tying this to UAZoomEnabled. It seems that what we really want to do is copy everything outside the dirty region; by your change at line 229 this should be equivalent, but is more readable and works in more scenarios. Can you update this to copy the non-dirty regions (or perhaps just special-case the all-dirty case) instead?",
      "range": {
        "startLine": 302,
        "startChar": 52,
        "endLine": 303,
        "endChar": 0
      },
      "revId": "e20dab8d533c1d488802b7a2ff659c6ef3245744",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "28acf258_d0e495e0",
        "filename": "modules/desktop_capture/mac/screen_capturer_mac.mm",
        "patchSetId": 2
      },
      "lineNbr": 303,
      "author": {
        "id": 6175
      },
      "writtenOn": "2018-12-06T23:06:16Z",
      "side": 1,
      "message": "I see your point. But I\u0027m afraid that it will bring less benefit, but much complexity.\nEven if I stop copy from previous frame totally(yes there will be flicking), the performance change:\n - CGI method, 1-2 fps up, e.g.from 10 to 12 fps on my MBP.\n - IOSurface method, since its performance is better than 30fps, so not readable :)\nAlso it needs extra complexity for multiple-monitor case to copy the non-dirty region.\nI suppose the performance bottleneck is not in copying between inner buffers, but from OS display buffer to our buffer.\n\nAlso copy non-dirty region instead of my change in line 229 won\u0027t solve the zooming case, given how OSX reports dirty region(we need to copy all screen, no matter dirty or not). \n\nSo my opinion is it\u0027s more reasonable to copy the previous frame than non-dirty region here.\nWDYT?",
      "parentUuid": "1b6472f2_43ae4393",
      "range": {
        "startLine": 302,
        "startChar": 52,
        "endLine": 303,
        "endChar": 0
      },
      "revId": "e20dab8d533c1d488802b7a2ff659c6ef3245744",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1b0b1c48_cfd0ac06",
        "filename": "modules/desktop_capture/mac/screen_capturer_mac.mm",
        "patchSetId": 2
      },
      "lineNbr": 303,
      "author": {
        "id": 5166
      },
      "writtenOn": "2018-12-06T23:28:09Z",
      "side": 1,
      "message": "I was less concerned about efficiency; more about readability. My suggestion is to leave your line 229 change as it is now, but instead of repeating the call to UAZoomEnabled() here, you simply check to see if the non-dirty region is empty. If it is (and it will be if UAZoomEnabled() is true), then there\u0027s no need to copy anything, because the whole desktop is dirty and will be updated by the blt anyway. The logic is clearer because you\u0027re no longer special-casing a specific *cause* of the whole desktop being dirty, you\u0027re just optimizing away a memcpy if it would be redundant.\n\nAn extension of that is to copy only the non-dirty regions, but I think you\u0027re probably right that it isn\u0027t worth the added complexity.\n\nOne way to think of it is that needing to do something special if the screen is zoomed is a weird quirk of the OS; you should limit the amount of code that needs to know about that weirdness.",
      "parentUuid": "28acf258_d0e495e0",
      "range": {
        "startLine": 302,
        "startChar": 52,
        "endLine": 303,
        "endChar": 0
      },
      "revId": "e20dab8d533c1d488802b7a2ff659c6ef3245744",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8aabe4c2_b284ab0e",
        "filename": "modules/desktop_capture/mac/screen_capturer_mac.mm",
        "patchSetId": 2
      },
      "lineNbr": 303,
      "author": {
        "id": 6175
      },
      "writtenOn": "2018-12-07T00:59:56Z",
      "side": 1,
      "message": "Gotcha. Done",
      "parentUuid": "1b0b1c48_cfd0ac06",
      "range": {
        "startLine": 302,
        "startChar": 52,
        "endLine": 303,
        "endChar": 0
      },
      "revId": "e20dab8d533c1d488802b7a2ff659c6ef3245744",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    }
  ]
}