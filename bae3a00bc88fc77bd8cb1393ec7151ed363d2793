{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "ac1356dc_39976f16",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 18829
      },
      "writtenOn": "2022-02-08T16:23:04Z",
      "side": 1,
      "message": "Thanks for the review. I have incorporated the suggestion. Please take another look.",
      "revId": "bae3a00bc88fc77bd8cb1393ec7151ed363d2793",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7991e642_d70a5bad",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 14134
      },
      "writtenOn": "2022-02-08T17:38:29Z",
      "side": 1,
      "message": "Is there a design doc for this \"remote desktop portal implementation\"?  Are you building another xdg-desktop-portal client?",
      "revId": "bae3a00bc88fc77bd8cb1393ec7151ed363d2793",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3104d358_41230858",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 8046
      },
      "writtenOn": "2022-02-08T18:14:06Z",
      "side": 1,
      "message": "Here: https://github.com/flatpak/xdg-desktop-portal/blob/main/data/org.freedesktop.portal.RemoteDesktop.xml\n\nEssentially the remote desktop portal combines screencast portal (the one we use for screensharing) with hooks/callbacks so you can notify the Wayland compositor with mouse/keyboard events.\n\nSo the remote desktop portal implementation is just about connecting mouse/keyboard events from WebRTC to portal calls so the wayland compositor can be notified about those events. This is used for stuff like VNC implementation on Wayland.\n\nHowever, this should not replace screensharing as we have implemented now, because the remote desktop portal involves slightly different dialog, because it asks the user for mouse/keyboard permissions.",
      "parentUuid": "7991e642_d70a5bad",
      "revId": "bae3a00bc88fc77bd8cb1393ec7151ed363d2793",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "025acb86_407b8fec",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 18829
      },
      "writtenOn": "2022-02-09T15:42:54Z",
      "side": 1,
      "message": "Yes, remote desktop portal implementation is another client that will leverage the xdg desktop portal APIs for both screen capture as well as input injection (needed for CRD connecting to linux/wayland host). If you think the design doc will be good to have, please let me know about what are the expected contents of the doc (class hierarchies/call flow?) as well as pointers to existing design docs in this space (e.g. for screencast portal implementation, if one exists) and I can create one following the set guidance. Thanks.",
      "parentUuid": "3104d358_41230858",
      "revId": "bae3a00bc88fc77bd8cb1393ec7151ed363d2793",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5036481e_5ef0bc3a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 8046
      },
      "writtenOn": "2022-02-10T17:54:47Z",
      "side": 1,
      "message": "Before we split portal constants, I was thinking about how to make all the portals co-exists, because to me it looks you are going to duplicate lots of stuff just because there are few differencies between both portals. Not to mention that in the near future we will have Camera portal, which also is going to use some things we already have implemented.\n\nI was thinking about a different approach. Instead of having each portal implemented separately, duplicating stuff, we can make just one portal class (modify existing one), that would accept portal_type option in the constructor. Current screensharing options can be set with new setters and the callback I have there can return some a structure/class that can have different values based on the portal_type. Currently it returns pw_fd and stream_node_id, but I know for sure I will need restore_token in the future and the Camera portal on the other doesn\u0027t need stream_node_id if I\u0027m not mistaken so this structure/class can be extended in the future. In the implementation you will know that we will be using the RemoteDesktop portal so in case you want to make different portal calls or in different order, you can just have if (portal_type \u003d\u003d kRemoteDesktopPortal) and do whatever you need to do for your specific portal. For example the Camera portal consists from two calls so we skip SelectSources() and Start() and go straight to OpenPipeWireRemote() and this is simply doable by just one if/else condition instead of creating another portal class. \n\nDo you think something like this is doable? Does this look as a better approach to you?",
      "revId": "bae3a00bc88fc77bd8cb1393ec7151ed363d2793",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "063fe447_bec6020c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 18829
      },
      "writtenOn": "2022-02-10T21:40:44Z",
      "side": 1,
      "message": "Thanks for the proposal, Jan.\n\n\u003e to me it looks you are going to duplicate lots of stuff just because there are few differencies between both portals.\n\nThe only overlap in the code is for the handler in SelectSources signal and the OnProxyRequested signal since remote desktop portal wants to do something different before/after selecting sources but still need the screencast portal to open pipewire remote. The overlap can probably be addressed using templated helper functions. Rest anything that is common across portals, I am already trying to push into helper/utils file (e.g. as done in this change).\n\n\u003e Instead of having each portal implemented separately, duplicating stuff, we can make just one portal class (modify existing one), that would accept portal_type option in the constructor\n\u003e portal calls or in different order, you can just have if (portal_type \u003d\u003d kRemoteDesktopPortal) and do whatever you need to do for your specific portal.\n\nI don\u0027t think this is a good approach. If/else are going to clutter the code, making it hard to understand and maintain. I would like to keep the portal implementations separate but I support the idea of having a parent portal class (potentially abstract?) that can keep the common attributes/methods across portals (if any).\n\n\u003e For example the Camera portal consists from two calls so we skip SelectSources() and Start() and go straight to OpenPipeWireRemote() and this is simply doable by just one if/else condition instead of creating another portal class.\n\nThis is going to make the code harder to understand and maintain. If one portal is going to make use of another portal to do something, it is more appropriate to have one portal get a handle to the other portal and achieve its goal rather than having one giant monolithic class with if/else incorporated to handle combinations of all portal types. I have also achieved the same by keeping screen cast portal handle inside of remote desktop portal class using composition and adapted the screencast portal implementation such that it is more flexible and the user of the screencast portal can modify the behavior of screencast portal (by changing the callback chain) to get both screen cast + remote control working.\n\nHappy to consider other suggestions but doing if/else inside one class doesn\u0027t seem very appealing to me. What do you think?",
      "parentUuid": "5036481e_5ef0bc3a",
      "revId": "bae3a00bc88fc77bd8cb1393ec7151ed363d2793",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6c7ad1a7_64488698",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 8046
      },
      "writtenOn": "2022-02-11T10:15:37Z",
      "side": 1,
      "message": "Ok, it\u0027s been a while since I did anything with the remote desktop portal (I implemented its support in xdg-desktop-portal-kde like ~2 years ago) and I thought there are just subtle differences. For example with the camera portal this would be doable in my opinion. I had this implemented once, where I just added \"kCamera\" enum into the list and based on that I just avoided calls that are not necessary for it. \n\nI was also thinking, since the remote desktop uses the screencast portal underneath, can we make the remote one to inherit the screencast one and just overload what you need to change? This is still me asking without looking into the remote desktop portal to refresh my memory so it\u0027s just a blind shot.",
      "parentUuid": "063fe447_bec6020c",
      "revId": "bae3a00bc88fc77bd8cb1393ec7151ed363d2793",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    }
  ]
}