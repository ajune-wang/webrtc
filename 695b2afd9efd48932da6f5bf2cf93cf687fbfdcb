{
  "comments": [
    {
      "key": {
        "uuid": "e11e76eb_38dee94c",
        "filename": "sdk/objc/Framework/Classes/Metal/RTCMTLNV12Renderer.mm",
        "patchSetId": 2
      },
      "lineNbr": 89,
      "author": {
        "id": 5590
      },
      "writtenOn": "2018-04-05T17:45:56Z",
      "side": 1,
      "message": "You\u0027ll need to handle the case in prod. Return if it\u0027s not the expected class?",
      "range": {
        "startLine": 89,
        "startChar": 66,
        "endLine": 89,
        "endChar": 67
      },
      "revId": "695b2afd9efd48932da6f5bf2cf93cf687fbfdcb",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0dc0b878_59337b42",
        "filename": "sdk/objc/Framework/Classes/Metal/RTCMTLNV12Renderer.mm",
        "patchSetId": 2
      },
      "lineNbr": 89,
      "author": {
        "id": 5520
      },
      "writtenOn": "2018-04-06T07:31:05Z",
      "side": 1,
      "message": "The thinking with adding the DCHECK is to make sure that never happens. If I add a check immediately after the assertion it kind of renders the assertion pointless, no?",
      "parentUuid": "e11e76eb_38dee94c",
      "range": {
        "startLine": 89,
        "startChar": 66,
        "endLine": 89,
        "endChar": 67
      },
      "revId": "695b2afd9efd48932da6f5bf2cf93cf687fbfdcb",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "87e68c36_7d4c64d0",
        "filename": "sdk/objc/Framework/Classes/Metal/RTCMTLNV12Renderer.mm",
        "patchSetId": 2
      },
      "lineNbr": 89,
      "author": {
        "id": 5590
      },
      "writtenOn": "2018-04-06T13:32:31Z",
      "side": 1,
      "message": "You should have both. The assertion for dev, the return for prod so that you don\u0027t crash in prod. Otherwise you\u0027ll crash just like before with invalid signature.\n\n  RTC_DCHECK([frame.buffer isKindOfClass:[RTCCVPixelBuffer class]]);\n  if (![frame.buffer isKindOfClass:[RTCCVPixelBuffer class]]) {\n    return NO;\n  }",
      "parentUuid": "0dc0b878_59337b42",
      "range": {
        "startLine": 89,
        "startChar": 66,
        "endLine": 89,
        "endChar": 67
      },
      "revId": "695b2afd9efd48932da6f5bf2cf93cf687fbfdcb",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d054dd8c_085341b4",
        "filename": "sdk/objc/Framework/Classes/Metal/RTCMTLNV12Renderer.mm",
        "patchSetId": 2
      },
      "lineNbr": 89,
      "author": {
        "id": 6077
      },
      "writtenOn": "2018-04-06T13:34:06Z",
      "side": 1,
      "message": "I think that\u0027s a good thing. If we crash then we will know that something is wrong, otherwise we just silently fail and drop the frame.",
      "parentUuid": "87e68c36_7d4c64d0",
      "range": {
        "startLine": 89,
        "startChar": 66,
        "endLine": 89,
        "endChar": 67
      },
      "revId": "695b2afd9efd48932da6f5bf2cf93cf687fbfdcb",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "aec1b9f5_e0c9c82e",
        "filename": "sdk/objc/Framework/Classes/Metal/RTCMTLNV12Renderer.mm",
        "patchSetId": 2
      },
      "lineNbr": 89,
      "author": {
        "id": 6077
      },
      "writtenOn": "2018-04-06T13:37:03Z",
      "side": 1,
      "message": "See style guide https://chromium.googlesource.com/chromium/src/+/master/styleguide/c++/c++.md#check_dcheck_and-notreached:\n\n\"... you should not handle DCHECK() failures, even if failure would result in a crash. Attempting to handle a DCHECK() failure is a statement that the DCHECK() can fail, which contradicts the point of writing the DCHECK().\"",
      "parentUuid": "d054dd8c_085341b4",
      "range": {
        "startLine": 89,
        "startChar": 66,
        "endLine": 89,
        "endChar": 67
      },
      "revId": "695b2afd9efd48932da6f5bf2cf93cf687fbfdcb",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8300a201_d6c9d025",
        "filename": "sdk/objc/Framework/Classes/Metal/RTCMTLNV12Renderer.mm",
        "patchSetId": 2
      },
      "lineNbr": 89,
      "author": {
        "id": 5590
      },
      "writtenOn": "2018-04-06T15:49:37Z",
      "side": 1,
      "message": "What is the scenario that it would fail?\nIs it ok to ignore the wrong frame?\nWe have some places where we ignore the frame and don\u0027t render if it\u0027s the wrong frame.buffer without asserting.\nIn this particular type of assert, I haven\u0027t seen it caught in dev. Only in prod.",
      "parentUuid": "aec1b9f5_e0c9c82e",
      "range": {
        "startLine": 89,
        "startChar": 66,
        "endLine": 89,
        "endChar": 67
      },
      "revId": "695b2afd9efd48932da6f5bf2cf93cf687fbfdcb",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fe459bd3_f242fd3a",
        "filename": "sdk/objc/Framework/Classes/Metal/RTCMTLVideoView.m",
        "patchSetId": 2
      },
      "lineNbr": 132,
      "author": {
        "id": 5590
      },
      "writtenOn": "2018-04-05T17:45:56Z",
      "side": 1,
      "message": "Not sure why the wrong renderer was called unless self.videoFrame changed while executing this method.",
      "revId": "695b2afd9efd48932da6f5bf2cf93cf687fbfdcb",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b2f971e9_07d0a8be",
        "filename": "sdk/objc/Framework/Classes/Metal/RTCMTLVideoView.m",
        "patchSetId": 2
      },
      "lineNbr": 132,
      "author": {
        "id": 5520
      },
      "writtenOn": "2018-04-06T07:31:05Z",
      "side": 1,
      "message": "Yes, that\u0027s almost certainly what is happening. The two methods are called from different threads.",
      "parentUuid": "fe459bd3_f242fd3a",
      "revId": "695b2afd9efd48932da6f5bf2cf93cf687fbfdcb",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    }
  ]
}