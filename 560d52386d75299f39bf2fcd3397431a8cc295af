{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "95537dd4_b7ab5c7b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 10
      },
      "lineNbr": 0,
      "author": {
        "id": 6876
      },
      "writtenOn": "2023-02-14T15:30:54Z",
      "side": 1,
      "message": "Hi Jakob, as a follow up of the cl 291322, I tried to unify the events in the NetEqInput. Unfortunately, it ended up being a pretty large cl.",
      "revId": "560d52386d75299f39bf2fcd3397431a8cc295af",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f34782ac_995c25af",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 10
      },
      "lineNbr": 0,
      "author": {
        "id": 8038
      },
      "writtenOn": "2023-02-14T21:33:32Z",
      "side": 1,
      "message": "This is going to be an awesome change! I think it can be simplified even more :)",
      "revId": "560d52386d75299f39bf2fcd3397431a8cc295af",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "067739a6_95b94479",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 10
      },
      "lineNbr": 0,
      "author": {
        "id": 6876
      },
      "writtenOn": "2023-03-10T15:38:02Z",
      "side": 1,
      "message": "Thanks for the review (specially with such a long cl) and sorry for the delay on answering to the comments.",
      "revId": "560d52386d75299f39bf2fcd3397431a8cc295af",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3f5e7609_ced993ca",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 10
      },
      "lineNbr": 0,
      "author": {
        "id": 6876
      },
      "writtenOn": "2023-03-16T13:00:43Z",
      "side": 1,
      "message": "Thanks for the good suggestions, I have updated the CL, please have a look.",
      "revId": "560d52386d75299f39bf2fcd3397431a8cc295af",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6a3ae2f8_e8fef66c",
        "filename": "modules/audio_coding/neteq/tools/neteq_input.h",
        "patchSetId": 10
      },
      "lineNbr": 52,
      "author": {
        "id": 8038
      },
      "writtenOn": "2023-02-14T21:33:32Z",
      "side": 1,
      "message": "Can we add a timestamp to the Event struct instead of each individual event maybe? ðŸ˜Š",
      "range": {
        "startLine": 52,
        "startChar": 9,
        "endLine": 52,
        "endChar": 14
      },
      "revId": "560d52386d75299f39bf2fcd3397431a8cc295af",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ffcdb1e1_f1fadb8e",
        "filename": "modules/audio_coding/neteq/tools/neteq_input.h",
        "patchSetId": 10
      },
      "lineNbr": 52,
      "author": {
        "id": 6876
      },
      "writtenOn": "2023-03-10T15:38:02Z",
      "side": 1,
      "message": "I thought about that but I did not go for it because we either have information that is duplicated as it is already contained in the other structs (SetMinimumDelay, PacketData, GetAudio) or I remove the information from the other structs. \n\nI think that it would be good to move it from the other structs as another incremental improvement.",
      "parentUuid": "6a3ae2f8_e8fef66c",
      "range": {
        "startLine": 52,
        "startChar": 9,
        "endLine": 52,
        "endChar": 14
      },
      "revId": "560d52386d75299f39bf2fcd3397431a8cc295af",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "50c2d34a_9064eee7",
        "filename": "modules/audio_coding/neteq/tools/neteq_input.h",
        "patchSetId": 10
      },
      "lineNbr": 52,
      "author": {
        "id": 6876
      },
      "writtenOn": "2023-03-16T13:00:43Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ffcdb1e1_f1fadb8e",
      "range": {
        "startLine": 52,
        "startChar": 9,
        "endLine": 52,
        "endChar": 14
      },
      "revId": "560d52386d75299f39bf2fcd3397431a8cc295af",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "404baa62_f5007c2e",
        "filename": "modules/audio_coding/neteq/tools/neteq_input.h",
        "patchSetId": 10
      },
      "lineNbr": 67,
      "author": {
        "id": 8038
      },
      "writtenOn": "2023-02-14T21:33:32Z",
      "side": 1,
      "message": "Doesn\u0027t the returned Event need to be optional (if there are no more events)?",
      "range": {
        "startLine": 64,
        "startChar": 0,
        "endLine": 67,
        "endChar": 0
      },
      "revId": "560d52386d75299f39bf2fcd3397431a8cc295af",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8f2f18b7_ebc422a2",
        "filename": "modules/audio_coding/neteq/tools/neteq_input.h",
        "patchSetId": 10
      },
      "lineNbr": 67,
      "author": {
        "id": 6876
      },
      "writtenOn": "2023-03-10T15:38:02Z",
      "side": 1,
      "message": "On that case, all the unique_ptr are equal to null. The Empty() method would return true.",
      "parentUuid": "404baa62_f5007c2e",
      "range": {
        "startLine": 64,
        "startChar": 0,
        "endLine": 67,
        "endChar": 0
      },
      "revId": "560d52386d75299f39bf2fcd3397431a8cc295af",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "93b81af1_72479d4f",
        "filename": "modules/audio_coding/neteq/tools/neteq_input.h",
        "patchSetId": 10
      },
      "lineNbr": 67,
      "author": {
        "id": 8038
      },
      "writtenOn": "2023-03-13T14:53:46Z",
      "side": 1,
      "message": "Now that I think of it, instead of having unique_ptr in Event, we may want to have an Event class that is subclassed with the respective types. Example:\n\nclass Event {\n  enum class Type {\n    kSetMinimumDelay,\n    kPacketData,\n    kGetAudio,\n  };\n  Type type() \u003d 0;\n  int64_t timestamp_ms();\n}\n\nFor inspiration: https://source.chromium.org/chromium/chromium/src/+/main:third_party/webrtc/api/rtc_event_log/rtc_event.h\n\nWDYT?",
      "parentUuid": "8f2f18b7_ebc422a2",
      "range": {
        "startLine": 64,
        "startChar": 0,
        "endLine": 67,
        "endChar": 0
      },
      "revId": "560d52386d75299f39bf2fcd3397431a8cc295af",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8b68ce7c_7a61ba13",
        "filename": "modules/audio_coding/neteq/tools/neteq_input.h",
        "patchSetId": 10
      },
      "lineNbr": 67,
      "author": {
        "id": 6876
      },
      "writtenOn": "2023-03-16T13:00:43Z",
      "side": 1,
      "message": "Good idea, I changed it to that.",
      "parentUuid": "93b81af1_72479d4f",
      "range": {
        "startLine": 64,
        "startChar": 0,
        "endLine": 67,
        "endChar": 0
      },
      "revId": "560d52386d75299f39bf2fcd3397431a8cc295af",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6b377e7b_41d7434e",
        "filename": "modules/audio_coding/neteq/tools/neteq_input.h",
        "patchSetId": 10
      },
      "lineNbr": 75,
      "author": {
        "id": 8038
      },
      "writtenOn": "2023-02-14T21:33:32Z",
      "side": 1,
      "message": "This feels a bit out of place. Is it really needed or is the header in PacketData enough? Can\u0027t see it being used in NetEqTest.",
      "range": {
        "startLine": 75,
        "startChar": 0,
        "endLine": 75,
        "endChar": 59
      },
      "revId": "560d52386d75299f39bf2fcd3397431a8cc295af",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6039b774_ec46c12c",
        "filename": "modules/audio_coding/neteq/tools/neteq_input.h",
        "patchSetId": 10
      },
      "lineNbr": 75,
      "author": {
        "id": 6876
      },
      "writtenOn": "2023-03-10T15:38:02Z",
      "side": 1,
      "message": "Not sure, it might be possible to remove it but not without other changes. For example, it is used here, https://source.chromium.org/chromium/chromium/src/+/main:third_party/webrtc/modules/audio_coding/neteq/tools/neteq_test_factory.cc;drc\u003d714e3cbb48c704fe696e1f73f9a2f8dc0d2c0a16;l\u003d195",
      "parentUuid": "6b377e7b_41d7434e",
      "range": {
        "startLine": 75,
        "startChar": 0,
        "endLine": 75,
        "endChar": 59
      },
      "revId": "560d52386d75299f39bf2fcd3397431a8cc295af",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "77c95704_f86c7fc1",
        "filename": "modules/audio_coding/neteq/tools/neteq_input.h",
        "patchSetId": 10
      },
      "lineNbr": 79,
      "author": {
        "id": 8038
      },
      "writtenOn": "2023-02-14T21:33:32Z",
      "side": 1,
      "message": "If we make NextEvent() return optional\u003cEvent\u003e and we put the timestamp in the Event struct, then I think we can remove this function :)",
      "range": {
        "startLine": 79,
        "startChar": 26,
        "endLine": 79,
        "endChar": 39
      },
      "revId": "560d52386d75299f39bf2fcd3397431a8cc295af",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0187d819_bb31f885",
        "filename": "modules/audio_coding/neteq/tools/neteq_input.h",
        "patchSetId": 10
      },
      "lineNbr": 79,
      "author": {
        "id": 6876
      },
      "writtenOn": "2023-03-10T15:38:02Z",
      "side": 1,
      "message": "Yes, that is an option, I am not super convinced of mixing unique_ptr and optionals as the unique_ptr already gives you information on whether there is content or not. \n\nI rather leave this small function and not do that mix between unique_ptr and optionals.",
      "parentUuid": "77c95704_f86c7fc1",
      "range": {
        "startLine": 79,
        "startChar": 26,
        "endLine": 79,
        "endChar": 39
      },
      "revId": "560d52386d75299f39bf2fcd3397431a8cc295af",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "31f072a4_da132de2",
        "filename": "modules/audio_coding/neteq/tools/neteq_input.h",
        "patchSetId": 10
      },
      "lineNbr": 79,
      "author": {
        "id": 6876
      },
      "writtenOn": "2023-03-16T13:00:43Z",
      "side": 1,
      "message": "With the new approach we could remove this function and replace it. Something like: \n\nstd::unique_ptr\u003cNetEqInput::Event\u003e event;\n\n...\n\nif (event \u0026\u0026 event-\u003eget_timestamp_ms()) \n\n\nHowever, I think that it might be convenient to just leave this implementation on this base class, the derived class do not need to re-implement it.",
      "parentUuid": "0187d819_bb31f885",
      "range": {
        "startLine": 79,
        "startChar": 26,
        "endLine": 79,
        "endChar": 39
      },
      "revId": "560d52386d75299f39bf2fcd3397431a8cc295af",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "628f1107_48726d03",
        "filename": "modules/audio_coding/neteq/tools/neteq_test.cc",
        "patchSetId": 10
      },
      "lineNbr": 113,
      "author": {
        "id": 8038
      },
      "writtenOn": "2023-02-14T21:33:32Z",
      "side": 1,
      "message": "Prefer a raw pointer.",
      "range": {
        "startLine": 113,
        "startChar": 6,
        "endLine": 113,
        "endChar": 46
      },
      "revId": "560d52386d75299f39bf2fcd3397431a8cc295af",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4131590a_0bc6c325",
        "filename": "modules/audio_coding/neteq/tools/neteq_test.cc",
        "patchSetId": 10
      },
      "lineNbr": 113,
      "author": {
        "id": 6876
      },
      "writtenOn": "2023-03-10T15:38:02Z",
      "side": 1,
      "message": "I do not think I have strong opinions on that but why is it better to use a raw pointer?",
      "parentUuid": "628f1107_48726d03",
      "range": {
        "startLine": 113,
        "startChar": 6,
        "endLine": 113,
        "endChar": 46
      },
      "revId": "560d52386d75299f39bf2fcd3397431a8cc295af",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b6e40cf6_2b81f4f1",
        "filename": "modules/audio_coding/neteq/tools/neteq_test.cc",
        "patchSetId": 10
      },
      "lineNbr": 113,
      "author": {
        "id": 8038
      },
      "writtenOn": "2023-03-13T14:53:46Z",
      "side": 1,
      "message": "The unique_ptr is used when transferring ownership. In this case we are only reading data so we should unwrap it to either a `const NetEqInput::PacketData\u0026` (probably best since we have checked that it exists above) or `NetEqInput::PacketData*`.",
      "parentUuid": "4131590a_0bc6c325",
      "range": {
        "startLine": 113,
        "startChar": 6,
        "endLine": 113,
        "endChar": 46
      },
      "revId": "560d52386d75299f39bf2fcd3397431a8cc295af",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "38060744_7e6f6ce6",
        "filename": "modules/audio_coding/neteq/tools/neteq_test.cc",
        "patchSetId": 10
      },
      "lineNbr": 113,
      "author": {
        "id": 6876
      },
      "writtenOn": "2023-03-16T13:00:43Z",
      "side": 1,
      "message": "I changed this part with this refactoring. As a note, I was not transferring the ownership of the object, I was just taking a reference to the existing unique_ptr.",
      "parentUuid": "b6e40cf6_2b81f4f1",
      "range": {
        "startLine": 113,
        "startChar": 6,
        "endLine": 113,
        "endChar": 46
      },
      "revId": "560d52386d75299f39bf2fcd3397431a8cc295af",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ed7d4761_b7e1b0e7",
        "filename": "modules/audio_coding/neteq/tools/neteq_test.cc",
        "patchSetId": 10
      },
      "lineNbr": 270,
      "author": {
        "id": 8038
      },
      "writtenOn": "2023-02-14T21:33:32Z",
      "side": 1,
      "message": "This changes the behavior somewhat. Previously we would end the simulation after there are no more packets to decode, but now we will continue the simulation as long as there are more events. If there are a lot more GetAudio events after the last packet, then NetEq will just output concealment. This is not a big issue when looking at an individual call but it may skew the stats in aggregate simulations. I suggest we keep the old behavior for now.",
      "range": {
        "startLine": 270,
        "startChar": 17,
        "endLine": 270,
        "endChar": 31
      },
      "revId": "560d52386d75299f39bf2fcd3397431a8cc295af",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7f5d9188_3e58f5e4",
        "filename": "modules/audio_coding/neteq/tools/neteq_test.cc",
        "patchSetId": 10
      },
      "lineNbr": 270,
      "author": {
        "id": 6876
      },
      "writtenOn": "2023-03-10T15:38:02Z",
      "side": 1,
      "message": "Right, \ndon\u0027t you think that it would be better to change the method ended() in the file, \nneteq_event_log_input.h? \n\nat this level, there is no reason for stopping the simulation when we still have remaining events. If we start treating different events on a different way, the point of unifying them is a bit lost.",
      "parentUuid": "ed7d4761_b7e1b0e7",
      "range": {
        "startLine": 270,
        "startChar": 17,
        "endLine": 270,
        "endChar": 31
      },
      "revId": "560d52386d75299f39bf2fcd3397431a8cc295af",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ee1c448b_8ab251f7",
        "filename": "modules/audio_coding/neteq/tools/neteq_test.cc",
        "patchSetId": 10
      },
      "lineNbr": 270,
      "author": {
        "id": 8038
      },
      "writtenOn": "2023-03-13T14:53:46Z",
      "side": 1,
      "message": "Yeah that makes sense.",
      "parentUuid": "7f5d9188_3e58f5e4",
      "range": {
        "startLine": 270,
        "startChar": 17,
        "endLine": 270,
        "endChar": 31
      },
      "revId": "560d52386d75299f39bf2fcd3397431a8cc295af",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "badd082b_1b583ee4",
        "filename": "modules/audio_coding/neteq/tools/neteq_test.cc",
        "patchSetId": 10
      },
      "lineNbr": 270,
      "author": {
        "id": 6876
      },
      "writtenOn": "2023-03-16T13:00:43Z",
      "side": 1,
      "message": "I realize that that condition was already fulfilled in the definition of the ended() method on the NetEqEventLogInput class.",
      "parentUuid": "ee1c448b_8ab251f7",
      "range": {
        "startLine": 270,
        "startChar": 17,
        "endLine": 270,
        "endChar": 31
      },
      "revId": "560d52386d75299f39bf2fcd3397431a8cc295af",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "eed98f4e_ed2d4800",
        "filename": "modules/audio_coding/neteq/tools/rtc_event_log_source.h",
        "patchSetId": 10
      },
      "lineNbr": 33,
      "author": {
        "id": 8038
      },
      "writtenOn": "2023-02-14T21:33:32Z",
      "side": 1,
      "message": "I don\u0027t see why we are implementing the PacketSource interface here, since NetEqEventLogInput doesn\u0027t inherit from NetEqPacketSourceInput anymore (I think this is a good thing). How about just implementing NetEq input here instead and combine the RtcEventLogSource and NetEqEventLogInput classes?",
      "range": {
        "startLine": 33,
        "startChar": 33,
        "endLine": 33,
        "endChar": 45
      },
      "revId": "560d52386d75299f39bf2fcd3397431a8cc295af",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3c5583e8_c4556f9d",
        "filename": "modules/audio_coding/neteq/tools/rtc_event_log_source.h",
        "patchSetId": 10
      },
      "lineNbr": 33,
      "author": {
        "id": 6876
      },
      "writtenOn": "2023-03-10T15:38:02Z",
      "side": 1,
      "message": "I think that you are right and RtcEventLogSource is just used in NetEqEventLogInput and we could combine those 2 classes. \n\nI see this as a follow up improvement.",
      "parentUuid": "eed98f4e_ed2d4800",
      "range": {
        "startLine": 33,
        "startChar": 33,
        "endLine": 33,
        "endChar": 45
      },
      "revId": "560d52386d75299f39bf2fcd3397431a8cc295af",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f837ad9c_084038fd",
        "filename": "modules/audio_coding/neteq/tools/rtc_event_log_source.h",
        "patchSetId": 10
      },
      "lineNbr": 33,
      "author": {
        "id": 8038
      },
      "writtenOn": "2023-03-13T14:53:46Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "3c5583e8_c4556f9d",
      "range": {
        "startLine": 33,
        "startChar": 33,
        "endLine": 33,
        "endChar": 45
      },
      "revId": "560d52386d75299f39bf2fcd3397431a8cc295af",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    }
  ]
}