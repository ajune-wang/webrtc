{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "139a1007_085bc8d0",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 14
      },
      "lineNbr": 0,
      "author": {
        "id": 5524
      },
      "writtenOn": "2021-09-14T13:24:06Z",
      "side": 1,
      "message": "I like this much better, thanks!\nQuestion: do we know we support all scalability modes for av1/vp9?\nor should we e.g. query the svc controller?\nhttps://source.chromium.org/chromium/chromium/src/+/main:third_party/webrtc/modules/video_coding/svc/",
      "revId": "a7e1725147f98c9ee4cfd86d2605cb2ec6b7f5d5",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2537a12b_b887ba40",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 14
      },
      "lineNbr": 0,
      "author": {
        "id": 7641
      },
      "writtenOn": "2021-09-14T13:42:14Z",
      "side": 1,
      "message": "Do you mean that we for each potentially supported scalability mode try to create a scalability structure config using ScalabilityStructureConfig(absl::string_view name):\nhttps://source.chromium.org/chromium/chromium/src/+/main:third_party/webrtc/modules/video_coding/svc/create_scalability_structure.cc;drc\u003d5d3bf6ae2aea1c6c72f995ba6d29220e6605b323;l\u003d148",
      "parentUuid": "139a1007_085bc8d0",
      "revId": "a7e1725147f98c9ee4cfd86d2605cb2ec6b7f5d5",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1889d2dd_0e42b511",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 14
      },
      "lineNbr": 0,
      "author": {
        "id": 5524
      },
      "writtenOn": "2021-09-14T13:59:56Z",
      "side": 1,
      "message": "lgtm % h264 comment",
      "revId": "a7e1725147f98c9ee4cfd86d2605cb2ec6b7f5d5",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7feac3dd_cbc44ee1",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 14
      },
      "lineNbr": 0,
      "author": {
        "id": 5524
      },
      "writtenOn": "2021-09-14T13:59:56Z",
      "side": 1,
      "message": "Hm, not sure it\u0027s really needed when we have the lists for av1/vp9 already hard-coded. If we generalize codec control further the we can update at that time.",
      "parentUuid": "2537a12b_b887ba40",
      "revId": "a7e1725147f98c9ee4cfd86d2605cb2ec6b7f5d5",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b625da75_35abe8bc",
        "filename": "media/engine/internal_encoder_factory.cc",
        "patchSetId": 14
      },
      "lineNbr": 67,
      "author": {
        "id": 5524
      },
      "writtenOn": "2021-09-14T13:24:06Z",
      "side": 1,
      "message": "nit: Add {} for all these if/else",
      "revId": "a7e1725147f98c9ee4cfd86d2605cb2ec6b7f5d5",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bd108e1e_0b757f80",
        "filename": "media/engine/internal_encoder_factory.cc",
        "patchSetId": 14
      },
      "lineNbr": 67,
      "author": {
        "id": 5019
      },
      "writtenOn": "2021-09-14T13:39:15Z",
      "side": 1,
      "message": "https://google.github.io/styleguide/cppguide.html#Conditionals",
      "parentUuid": "b625da75_35abe8bc",
      "revId": "a7e1725147f98c9ee4cfd86d2605cb2ec6b7f5d5",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8dc90ed3_0a54677b",
        "filename": "media/engine/internal_encoder_factory_unittest.cc",
        "patchSetId": 14
      },
      "lineNbr": 74,
      "author": {
        "id": 5019
      },
      "writtenOn": "2021-09-14T13:39:15Z",
      "side": 1,
      "message": "implicit cast should work here:\n  EXPECT_TRUE(encoder);\nOr you can be more explicit:\n  EXPECT_THAT(encoder, NotNull());",
      "range": {
        "startLine": 74,
        "startChar": 4,
        "endLine": 74,
        "endChar": 44
      },
      "revId": "a7e1725147f98c9ee4cfd86d2605cb2ec6b7f5d5",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1215c6cd_6f44d0ac",
        "filename": "modules/video_coding/codecs/av1/libaom_av1_encoder.cc",
        "patchSetId": 14
      },
      "lineNbr": 56,
      "author": {
        "id": 5019
      },
      "writtenOn": "2021-09-14T13:39:15Z",
      "side": 1,
      "message": "may be\n  constexpr absl::string_view kSupportedScalabilityModes[] \u003d {\n    \"L1T2\", ...\n  };",
      "range": {
        "startLine": 56,
        "startChar": 0,
        "endLine": 56,
        "endChar": 25
      },
      "revId": "a7e1725147f98c9ee4cfd86d2605cb2ec6b7f5d5",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "755f39ff_f75fffa5",
        "filename": "modules/video_coding/codecs/av1/libaom_av1_encoder.cc",
        "patchSetId": 14
      },
      "lineNbr": 826,
      "author": {
        "id": 5019
      },
      "writtenOn": "2021-09-14T13:39:15Z",
      "side": 1,
      "message": "may be add RTC_DCHECK(ScalabilityStructureConfig(scalability_mode).has_value());\nor (which suppose to be the same, may be clearer, but slower):\nRTC_DCHECK(CreateScalabilityStructure(scalability_mode));",
      "revId": "a7e1725147f98c9ee4cfd86d2605cb2ec6b7f5d5",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "934a7fb4_4597edea",
        "filename": "modules/video_coding/codecs/av1/libaom_av1_encoder.cc",
        "patchSetId": 14
      },
      "lineNbr": 826,
      "author": {
        "id": 7641
      },
      "writtenOn": "2021-09-14T14:25:31Z",
      "side": 1,
      "message": "What should I do with the entries in the list above that are not in kFactories?\n\nhttps://source.chromium.org/chromium/chromium/src/+/main:third_party/webrtc/modules/video_coding/svc/create_scalability_structure.cc;drc\u003d5d3bf6ae2aea1c6c72f995ba6d29220e6605b323;l\u003d116\n\nI see now that I\u0027ve lost at least one of the entries from\nhttps://www.w3.org/TR/webrtc-svc/#scalabilitymodes*\n\nAnd L2T1_KEY is listed in kFactories but not in the webrtc-svc spec.\n...or I found the dependency diagram but not in the list of scalability modes :)\n\nI will go through the list to make sure that it\u0027s consistent; I just want to know what the expected overlap between the list here, kFactories and webrtc-svc is supposed to be.",
      "parentUuid": "755f39ff_f75fffa5",
      "revId": "a7e1725147f98c9ee4cfd86d2605cb2ec6b7f5d5",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5faa6157_252ee045",
        "filename": "modules/video_coding/codecs/av1/libaom_av1_encoder.cc",
        "patchSetId": 14
      },
      "lineNbr": 826,
      "author": {
        "id": 5019
      },
      "writtenOn": "2021-09-14T14:42:44Z",
      "side": 1,
      "message": "AV1 currently supports modes that are listed in kFactories. no more, no less.\n(so for now it would work to check if ScalabilityStructureConfig returns not absl::nullopt instead of manually listing all the modes)\n\nL2T1_KEY not listed in https://www.w3.org/TR/webrtc-svc/#scalabilitymodes* is probably an oversight in the webrtc-svc spec (same as L3T1_KEY).\n\nIn the future may be there will be modes that wouldn\u0027t be supported by AV1. I\u0027m currently unaware of such scalability modes.\n\nVP9 currently may support modes that don\u0027t have associated svc controller, in particular it supports some modes that are not even listed in the webrtc-svc spec, and do not have a name.",
      "parentUuid": "934a7fb4_4597edea",
      "revId": "a7e1725147f98c9ee4cfd86d2605cb2ec6b7f5d5",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a0347a80_6fb6215c",
        "filename": "modules/video_coding/codecs/av1/libaom_av1_encoder.h",
        "patchSetId": 14
      },
      "lineNbr": 24,
      "author": {
        "id": 5019
      },
      "writtenOn": "2021-09-14T13:39:15Z",
      "side": 1,
      "message": "may be clarify in the name it is\nLibaomAv1Encoder\n\nto be consistent with the function and constant above.\nAnd to avoid confusion later with hardware, or some other av1 encoder",
      "range": {
        "startLine": 24,
        "startChar": 5,
        "endLine": 24,
        "endChar": 15
      },
      "revId": "a7e1725147f98c9ee4cfd86d2605cb2ec6b7f5d5",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e485ae1a_14c27883",
        "filename": "modules/video_coding/codecs/h264/h264.cc",
        "patchSetId": 14
      },
      "lineNbr": 110,
      "author": {
        "id": 5524
      },
      "writtenOn": "2021-09-14T13:24:06Z",
      "side": 1,
      "message": "I think this should be the same as vp8: {{\"L1T2\"}, {\"L1T3\"}};\n\nSee e.g. https://source.chromium.org/chromium/chromium/src/+/main:third_party/webrtc/modules/video_coding/codecs/h264/h264_encoder_impl.cc;l\u003d244",
      "range": {
        "startLine": 109,
        "startChar": 2,
        "endLine": 110,
        "endChar": 34
      },
      "revId": "a7e1725147f98c9ee4cfd86d2605cb2ec6b7f5d5",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    }
  ]
}