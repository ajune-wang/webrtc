{
  "comments": [
    {
      "key": {
        "uuid": "dd112f5d_e2876a0e",
        "filename": "modules/rtp_rtcp/include/receive_statistics.h",
        "patchSetId": 2
      },
      "lineNbr": 43,
      "author": {
        "id": 5019
      },
      "writtenOn": "2019-06-26T13:21:15Z",
      "side": 1,
      "message": "unfortunately downstream code still uses reset parameter.\nMaybe leave an RTC_DEPRECATED copy of the GetStatistics for it.",
      "range": {
        "startLine": 43,
        "startChar": 0,
        "endLine": 43,
        "endChar": 67
      },
      "revId": "2aa0e04854a2ae5b9123ae79d554a8faf8b844ef",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "abb5d6c9_5b0c8e06",
        "filename": "modules/rtp_rtcp/include/receive_statistics.h",
        "patchSetId": 2
      },
      "lineNbr": 43,
      "author": {
        "id": 5234
      },
      "writtenOn": "2019-06-27T08:33:15Z",
      "side": 1,
      "message": "And it looks like there actually are calls with reset \u003d\u003d true. How to deal with that? Another method to produce new stats? Or can we do like in the updated tests, and just call RtcpReportBlocks(RTCP_MAX_REPORT_BLOCKS) ?",
      "parentUuid": "dd112f5d_e2876a0e",
      "range": {
        "startLine": 43,
        "startChar": 0,
        "endLine": 43,
        "endChar": 67
      },
      "revId": "2aa0e04854a2ae5b9123ae79d554a8faf8b844ef",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "426079be_6e4b32d9",
        "filename": "modules/rtp_rtcp/include/receive_statistics.h",
        "patchSetId": 2
      },
      "lineNbr": 43,
      "author": {
        "id": 5399
      },
      "writtenOn": "2019-06-27T08:52:54Z",
      "side": 1,
      "message": "So, is the problem that GetStatistics isn\u0027t const or that it has a reset parameter? Or both? If so, why? I read the bug but it didn\u0027t really shine any light on this specific issue.",
      "parentUuid": "abb5d6c9_5b0c8e06",
      "range": {
        "startLine": 43,
        "startChar": 0,
        "endLine": 43,
        "endChar": 67
      },
      "revId": "2aa0e04854a2ae5b9123ae79d554a8faf8b844ef",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "14e67773_8e33fe23",
        "filename": "modules/rtp_rtcp/include/receive_statistics.h",
        "patchSetId": 2
      },
      "lineNbr": 43,
      "author": {
        "id": 5234
      },
      "writtenOn": "2019-06-27T09:10:36Z",
      "side": 1,
      "message": "Both. Sorry for linking to a bug that\u0027s only vaguely related.\n\nThe thing is, \n\n  (i) GetStats methods should generally be const. Main use of this GetStatistics method is to provide some of the https://w3c.github.io/webrtc-stats/#dom-rtcinboundrtpstreamstats attributes, and this model really needs a const method where the returned value doesn\u0027t depend in if and when the method was called earlier.\n  (ii) The only caller in webrtc is ChannelReceive, which always passes reset \u003d\u003d false.\n  (iii) I find the use of RtcpMode::kOff in webrtc a bit questionable. I\u0027m trying to delete remaining use of it in https://webrtc-review.googlesource.com/c/src/+/142810, still a bit unclear if that will work out.\n\nThen there\u0027s downstream code using the ReceiveStatistics class for other purposes than producing report blocks for RTCP messages. Which is fine, I guess. But they could use a different method. So the easy way is probably to just add a new method that does the reset \u003d\u003d true logic, doing whatever is needed by applications not using RTCP.",
      "parentUuid": "426079be_6e4b32d9",
      "range": {
        "startLine": 43,
        "startChar": 0,
        "endLine": 43,
        "endChar": 67
      },
      "revId": "2aa0e04854a2ae5b9123ae79d554a8faf8b844ef",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "28404c5b_e028e40e",
        "filename": "modules/rtp_rtcp/include/receive_statistics.h",
        "patchSetId": 2
      },
      "lineNbr": 43,
      "author": {
        "id": 5142
      },
      "writtenOn": "2019-06-27T09:41:24Z",
      "side": 1,
      "message": "From a standards perspective, getting stats is a read-only operation; reading a value should not reset anything or make it visible in any way to the next caller of getStats that it has already been called earlier. There is just one exception to this rule: and that is you are allowed to implement a cache for performance reasons. But caching happens several layers above, not here.",
      "parentUuid": "14e67773_8e33fe23",
      "range": {
        "startLine": 43,
        "startChar": 0,
        "endLine": 43,
        "endChar": 67
      },
      "revId": "2aa0e04854a2ae5b9123ae79d554a8faf8b844ef",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e132bd55_b668b828",
        "filename": "modules/rtp_rtcp/source/receive_statistics_impl.cc",
        "patchSetId": 2
      },
      "lineNbr": 183,
      "author": {
        "id": 5019
      },
      "writtenOn": "2019-06-26T13:21:15Z",
      "side": 1,
      "message": "You can also remove these pair of {}\nsince it match full function now .",
      "range": {
        "startLine": 183,
        "startChar": 0,
        "endLine": 183,
        "endChar": 3
      },
      "revId": "2aa0e04854a2ae5b9123ae79d554a8faf8b844ef",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ae7acec1_b677f407",
        "filename": "modules/rtp_rtcp/source/receive_statistics_impl.cc",
        "patchSetId": 2
      },
      "lineNbr": 183,
      "author": {
        "id": 5234
      },
      "writtenOn": "2019-06-27T08:33:15Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e132bd55_b668b828",
      "range": {
        "startLine": 183,
        "startChar": 0,
        "endLine": 183,
        "endChar": 3
      },
      "revId": "2aa0e04854a2ae5b9123ae79d554a8faf8b844ef",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    }
  ]
}