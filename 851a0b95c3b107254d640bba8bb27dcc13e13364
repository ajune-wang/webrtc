{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "abc087a4_59b2292a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 9
      },
      "lineNbr": 0,
      "author": {
        "id": 5142
      },
      "writtenOn": "2022-05-02T13:48:23Z",
      "side": 1,
      "message": "Please take a look, Harald",
      "revId": "851a0b95c3b107254d640bba8bb27dcc13e13364",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "238eb27b_d66ed876",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 9
      },
      "lineNbr": 0,
      "author": {
        "id": 5634
      },
      "writtenOn": "2022-05-02T14:47:33Z",
      "side": 1,
      "message": "Not completely sure about the design here, but +1 because it seems to solve a problem.\n",
      "revId": "851a0b95c3b107254d640bba8bb27dcc13e13364",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5ae4cdee_f5001ab8",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 9
      },
      "lineNbr": 0,
      "author": {
        "id": 5634
      },
      "writtenOn": "2022-05-02T15:46:32Z",
      "side": 1,
      "message": "Go for it!\n",
      "revId": "851a0b95c3b107254d640bba8bb27dcc13e13364",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "67293140_bd83d5fc",
        "filename": "pc/transceiver_list.h",
        "patchSetId": 9
      },
      "lineNbr": 86,
      "author": {
        "id": 5634
      },
      "writtenOn": "2022-05-02T14:47:33Z",
      "side": 1,
      "message": "Perhaps this is a place to explain the practical difference between the two (that setting *fired_direction_ to null happens because of rollback, but the value is null initially, and the result is different behavior ... where, exactly?\n\nWould having kNotSet as a possible value for RtpTransceiverDirection avoid one of the levels of optionality?",
      "revId": "851a0b95c3b107254d640bba8bb27dcc13e13364",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f5252986_00890da0",
        "filename": "pc/transceiver_list.h",
        "patchSetId": 9
      },
      "lineNbr": 86,
      "author": {
        "id": 5142
      },
      "writtenOn": "2022-05-02T15:35:04Z",
      "side": 1,
      "message": "I don\u0027t think RtpTranscieverDirection should get any new value, it already represents all the possible directions both in the API and in SDP. This is a unique edge case not visible in the API or SDP. The optionality here just refers to \"have we stored fired_direction() in the rollback memory?\"\n\nIf we want to refactor TransceiverStableState to store all states upon transition from stable to have-remote-offer instead of in random places where states appear to change we could do that and get rid of one layer of optionality (because then the memory would always contain all states)... but that seems like a separate refactoring effort and more risky than what I want to do now.\n\nRollback always gives more headache than you think it\u0027s going to, so small steps for now.",
      "parentUuid": "67293140_bd83d5fc",
      "revId": "851a0b95c3b107254d640bba8bb27dcc13e13364",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "70d83f47_ddbb61d8",
        "filename": "pc/transceiver_list.h",
        "patchSetId": 9
      },
      "lineNbr": 86,
      "author": {
        "id": 5634
      },
      "writtenOn": "2022-05-02T15:46:32Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "f5252986_00890da0",
      "revId": "851a0b95c3b107254d640bba8bb27dcc13e13364",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "At least one maximum vote for label \u0027Code-Review\u0027 is required"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader AND -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader AND -label:Code-Review=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Code-Review=MAX,user=non_uploader"],"failingAtoms":["label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1"]}
      },
      "patchSetCommitId": "851a0b95c3b107254d640bba8bb27dcc13e13364",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforced_gerrit"]}
      },
      "submittabilityExpressionResult": {},
      "overrideExpressionResult": {},
      "patchSetCommitId": "851a0b95c3b107254d640bba8bb27dcc13e13364",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}