{
  "comments": [
    {
      "key": {
        "uuid": "51bf781c_e69fb412",
        "filename": "video/video_stream_decoder_impl.cc",
        "patchSetId": 10
      },
      "lineNbr": 49,
      "author": {
        "id": 5019
      },
      "writtenOn": "2020-01-09T13:01:54Z",
      "side": 1,
      "message": "typically you do not need to take locks in destructor. The fact that you do is an indicator you have another problem.\nIt seems you do: |this| is registered as a callback to the decoder, but calling virtual functions while destructor is called is a race on modifying/accessing virtual table of the object.\n(That issue seems already there, but changing threading may start triggering it).\n\nTo fix that problem it might be better to create a separate object that implements DecodedImageCallback (and keeps pointers to everything it need to do the work).\nThat object can still be alive when ~VideoStreamDecoderImpl is called and destroyed after decoder_queue_ is destroyed.",
      "range": {
        "startLine": 49,
        "startChar": 2,
        "endLine": 49,
        "endChar": 40
      },
      "revId": "6a1a99fc3facbbfeb348ea4f6f70e78182e2e304",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "93ddf58b_3ba61150",
        "filename": "video/video_stream_decoder_impl.cc",
        "patchSetId": 10
      },
      "lineNbr": 49,
      "author": {
        "id": 5527
      },
      "writtenOn": "2020-01-09T14:09:55Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "51bf781c_e69fb412",
      "range": {
        "startLine": 49,
        "startChar": 2,
        "endLine": 49,
        "endChar": 40
      },
      "revId": "6a1a99fc3facbbfeb348ea4f6f70e78182e2e304",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4b756b5b_419ecd44",
        "filename": "video/video_stream_decoder_impl.cc",
        "patchSetId": 10
      },
      "lineNbr": 163,
      "author": {
        "id": 5019
      },
      "writtenOn": "2020-01-09T13:01:54Z",
      "side": 1,
      "message": "overall capturing |this| into a lambda that might be called after destructor of |this| is called\nis error-prone: it make it harder to check there are no races.\n\n(and easy to introduce new races. e.g. changing a function (DecodeFrame in this case) from non-virtual to virtual would introduce a race)",
      "range": {
        "startLine": 163,
        "startChar": 30,
        "endLine": 163,
        "endChar": 34
      },
      "revId": "6a1a99fc3facbbfeb348ea4f6f70e78182e2e304",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "948d7cd9_be1c3c17",
        "filename": "video/video_stream_decoder_impl.cc",
        "patchSetId": 10
      },
      "lineNbr": 163,
      "author": {
        "id": 5527
      },
      "writtenOn": "2020-01-09T14:09:55Z",
      "side": 1,
      "message": "I see what you mean, but I\u0027m not sure how to solve it if I ever wants to call a member function from the lambda (given that someone could always have the idea of making it virtual).",
      "parentUuid": "4b756b5b_419ecd44",
      "range": {
        "startLine": 163,
        "startChar": 30,
        "endLine": 163,
        "endChar": 34
      },
      "revId": "6a1a99fc3facbbfeb348ea4f6f70e78182e2e304",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6fa5385c_a2fd434c",
        "filename": "video/video_stream_decoder_impl.cc",
        "patchSetId": 10
      },
      "lineNbr": 163,
      "author": {
        "id": 5019
      },
      "writtenOn": "2020-01-09T14:58:08Z",
      "side": 1,
      "message": "yep, that\u0027s the point: to not desire to call a member function from such lambda.\ninstead delegate all the work to child objects (that may refer to each other, but not the main object).\n\nThen compiler/initialization order/destruction order can help you to spot when things might happen out of desired order. Same initialization order would also guard against circular dependencies.\n\nThat way sure harder to write, seems like lot\u0027s of boilerplate, but should be safer, easier to reason.\n\n[calling non-virtual function after destructor started is still technically UB, but in practice works for now]",
      "parentUuid": "948d7cd9_be1c3c17",
      "range": {
        "startLine": 163,
        "startChar": 30,
        "endLine": 163,
        "endChar": 34
      },
      "revId": "6a1a99fc3facbbfeb348ea4f6f70e78182e2e304",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e732217f_4be0f719",
        "filename": "video/video_stream_decoder_impl.cc",
        "patchSetId": 10
      },
      "lineNbr": 163,
      "author": {
        "id": 5527
      },
      "writtenOn": "2020-01-09T15:14:45Z",
      "side": 1,
      "message": "\u003e [calling non-virtual function after destructor started is still technically UB, but in practice works for now]\n\nA task queue stop function just keeps looking better and better :)",
      "parentUuid": "6fa5385c_a2fd434c",
      "range": {
        "startLine": 163,
        "startChar": 30,
        "endLine": 163,
        "endChar": 34
      },
      "revId": "6a1a99fc3facbbfeb348ea4f6f70e78182e2e304",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    }
  ]
}