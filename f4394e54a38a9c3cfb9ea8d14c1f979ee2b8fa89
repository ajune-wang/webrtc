{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "0095bf0f_cccf2138",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 5634
      },
      "writtenOn": "2021-10-08T08:26:00Z",
      "side": 1,
      "message": "Different compile flags?\n",
      "revId": "f4394e54a38a9c3cfb9ea8d14c1f979ee2b8fa89",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cba91442_891c6afd",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 5234
      },
      "writtenOn": "2021-10-12T09:34:37Z",
      "side": 1,
      "message": "BTW, do you intend to reland https://webrtc-review.googlesource.com/c/src/+/234342 soon? The merge conflict on this cl is with the revert.",
      "revId": "f4394e54a38a9c3cfb9ea8d14c1f979ee2b8fa89",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4895444b_654e373a",
        "filename": "p2p/base/tcp_port.cc",
        "patchSetId": 6
      },
      "lineNbr": 172,
      "author": {
        "id": 5234
      },
      "writtenOn": "2021-10-08T08:13:35Z",
      "side": 1,
      "message": "This compiles fine in webrtc, but when I try building chromium this this change, I get the error \n\n../../third_party/webrtc/p2p/base/tcp_port.cc:172:25: error: invalid operands to binary expression (\u0027basic_ostream\u003cchar, std::char_traits\u003cchar\u003e\u003e\u0027 and \u0027rtc::AsyncListenSocket::State\u0027)\n                        \u003c\u003c listen_socket_-\u003eGetBindState();\n\nHow to deal with that, explicitly convert to int? It\u0027s unclear to me how webrtc\u0027s version of RTC_LOG handles it.",
      "range": {
        "startLine": 171,
        "startChar": 0,
        "endLine": 172,
        "endChar": 58
      },
      "revId": "f4394e54a38a9c3cfb9ea8d14c1f979ee2b8fa89",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "df56f56b_6b5b6187",
        "filename": "p2p/base/tcp_port.cc",
        "patchSetId": 6
      },
      "lineNbr": 172,
      "author": {
        "id": 5634
      },
      "writtenOn": "2021-10-08T08:26:00Z",
      "side": 1,
      "message": "Seems that WebRTC autoconverts enums to ints (it\u0027s an enum not an enum class), but that Chromium doesn\u0027t.\n\nAdding @mbonadei to reviewers to say what the facts are.",
      "parentUuid": "4895444b_654e373a",
      "range": {
        "startLine": 171,
        "startChar": 0,
        "endLine": 172,
        "endChar": 58
      },
      "revId": "f4394e54a38a9c3cfb9ea8d14c1f979ee2b8fa89",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a1902597_ba571821",
        "filename": "p2p/base/tcp_port.cc",
        "patchSetId": 6
      },
      "lineNbr": 172,
      "author": {
        "id": 5087
      },
      "writtenOn": "2021-10-08T13:40:44Z",
      "side": 1,
      "message": "Yes, when compiling Chromium, RTC_LOG() expands to a different thing (delegating to Chromium\u0027s log system): https://source.chromium.org/chromium/chromium/src/+/main:third_party/webrtc_overrides/rtc_base/logging.h;l\u003d64;drc\u003d4930b28dab587e422d14c060a9063f46fdae7473\n\nAnd WebRTC\u0027s logging system is smart on these things (https://source.chromium.org/chromium/chromium/src/+/main:third_party/webrtc/rtc_base/logging.h;l\u003d190;drc\u003d96e3b991daeb058859324105635d29f56092e79a) doing more than Chromium\u0027s LOG().",
      "parentUuid": "df56f56b_6b5b6187",
      "range": {
        "startLine": 171,
        "startChar": 0,
        "endLine": 172,
        "endChar": 58
      },
      "revId": "f4394e54a38a9c3cfb9ea8d14c1f979ee2b8fa89",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7a1c4ec6_1ae76718",
        "filename": "p2p/base/tcp_port.cc",
        "patchSetId": 6
      },
      "lineNbr": 172,
      "author": {
        "id": 5234
      },
      "writtenOn": "2021-10-12T08:12:16Z",
      "side": 1,
      "message": "So what\u0027s the right way to solve the problem? Just add an explicit static_cast\u003cint\u003e(listen_socket_-\u003eGetBindState()) here?",
      "parentUuid": "a1902597_ba571821",
      "range": {
        "startLine": 171,
        "startChar": 0,
        "endLine": 172,
        "endChar": 58
      },
      "revId": "f4394e54a38a9c3cfb9ea8d14c1f979ee2b8fa89",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c9036433_70321cf0",
        "filename": "p2p/base/tcp_port.cc",
        "patchSetId": 6
      },
      "lineNbr": 172,
      "author": {
        "id": 5634
      },
      "writtenOn": "2021-10-12T09:10:13Z",
      "side": 1,
      "message": "That\u0027s what I\u0027ve done in the past.\nIf the state name matters, implement a ToString method on it; if it\u0027s likely that the only people who care will look at the enum definition anyway, cast it.",
      "parentUuid": "7a1c4ec6_1ae76718",
      "range": {
        "startLine": 171,
        "startChar": 0,
        "endLine": 172,
        "endChar": 58
      },
      "revId": "f4394e54a38a9c3cfb9ea8d14c1f979ee2b8fa89",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1167d1bc_db78b5a0",
        "filename": "p2p/base/tcp_port.cc",
        "patchSetId": 6
      },
      "lineNbr": 172,
      "author": {
        "id": 5234
      },
      "writtenOn": "2021-10-12T09:34:37Z",
      "side": 1,
      "message": "Done. Added cast. If numeric output was good enough before this cl, it likely still is.",
      "parentUuid": "c9036433_70321cf0",
      "range": {
        "startLine": 171,
        "startChar": 0,
        "endLine": 172,
        "endChar": 58
      },
      "revId": "f4394e54a38a9c3cfb9ea8d14c1f979ee2b8fa89",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9f280b92_16bf3b28",
        "filename": "p2p/base/tcp_port.cc",
        "patchSetId": 6
      },
      "lineNbr": 172,
      "author": {
        "id": 5234
      },
      "writtenOn": "2021-10-12T09:34:37Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c9036433_70321cf0",
      "range": {
        "startLine": 171,
        "startChar": 0,
        "endLine": 172,
        "endChar": 58
      },
      "revId": "f4394e54a38a9c3cfb9ea8d14c1f979ee2b8fa89",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "96569c26_3317dc56",
        "filename": "rtc_base/async_packet_socket.h",
        "patchSetId": 6
      },
      "lineNbr": 146,
      "author": {
        "id": 5234
      },
      "writtenOn": "2021-10-12T09:34:37Z",
      "side": 1,
      "message": "I wonder if we can we rename the GetBindState to just GetState, and remove the other method? Or if that will make transition harder? I added the new name when I still had the inheritance hack.",
      "range": {
        "startLine": 145,
        "startChar": 0,
        "endLine": 146,
        "endChar": 38
      },
      "revId": "f4394e54a38a9c3cfb9ea8d14c1f979ee2b8fa89",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9a54bec8_4825733a",
        "filename": "rtc_base/async_packet_socket.h",
        "patchSetId": 6
      },
      "lineNbr": 146,
      "author": {
        "id": 5234
      },
      "writtenOn": "2021-10-18T10:16:59Z",
      "side": 1,
      "message": "Done. Also deleted the unused kBinding state.",
      "parentUuid": "96569c26_3317dc56",
      "range": {
        "startLine": 145,
        "startChar": 0,
        "endLine": 146,
        "endChar": 38
      },
      "revId": "f4394e54a38a9c3cfb9ea8d14c1f979ee2b8fa89",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    }
  ]
}