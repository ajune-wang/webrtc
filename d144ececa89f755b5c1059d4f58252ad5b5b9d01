{
  "comments": [
    {
      "key": {
        "uuid": "89cdef7a_f5e07856",
        "filename": "api/media_transport_interface.h",
        "patchSetId": 3
      },
      "lineNbr": 53,
      "author": {
        "id": 5531
      },
      "writtenOn": "2019-01-23T18:30:54Z",
      "side": 1,
      "message": "Could we use the same struct to send from BitrateAllocator and from RtpTransportControllerSend? Maybe we can put it api/transport/network_types which has similar structs?",
      "range": {
        "startLine": 53,
        "startChar": 7,
        "endLine": 53,
        "endChar": 43
      },
      "revId": "d144ececa89f755b5c1059d4f58252ad5b5b9d01",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9dcff361_45fde406",
        "filename": "api/media_transport_interface.h",
        "patchSetId": 3
      },
      "lineNbr": 53,
      "author": {
        "id": 7704
      },
      "writtenOn": "2019-01-23T18:48:14Z",
      "side": 1,
      "message": "TLDR: please clarify, I am not sure which usages you are talking about. (we could put it in api/transport/network_types)\n\nAre you talking about \u0027StreamsConfig\u0027? \n\nRtpTransportControllerSend doesn\u0027t use the struct in the method:\nvoid RtpTransportControllerSend::SetAllocatedSendBitrateLimits(\n    int min_send_bitrate_bps,\n    int max_padding_bitrate_bps,\n    int max_total_bitrate_bps);\n\nit then converts it to stream_config:\n  streams_config_.min_pacing_rate \u003d DataRate::bps(min_send_bitrate_bps);\n  streams_config_.max_padding_rate \u003d DataRate::bps(max_padding_bitrate_bps);\n  streams_config_.max_total_allocated_bitrate \u003d\n      DataRate::bps(max_total_bitrate_bps);\n\nand this is also what we do in media transport interface implementation (we essentially take these values and convert them to the StreamConfig).\n\nBut passing StreamConfig to MediaTransportInterface would not sound right.\n\nSo I am not sure I understand the comment, are you suggesting to update \u0027void RtpTransportControllerSend::SetAllocatedSendBitrateLimits\u0027 to use this struct?\n\nBitrateAllocator already uses:\nstruct MediaStreamAllocationConfig {\n  uint32_t min_bitrate_bps;\n  uint32_t max_bitrate_bps;\n  uint32_t pad_up_bitrate_bps;\n  bool enforce_min_bitrate;\n  std::string track_id;\n  double bitrate_priority;\n};\nwhich is a superset? of this setting.\n\nPlease clarify :)",
      "parentUuid": "89cdef7a_f5e07856",
      "range": {
        "startLine": 53,
        "startChar": 7,
        "endLine": 53,
        "endChar": 43
      },
      "revId": "d144ececa89f755b5c1059d4f58252ad5b5b9d01",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7b18feaf_4ebd72b5",
        "filename": "api/media_transport_interface.h",
        "patchSetId": 3
      },
      "lineNbr": 53,
      "author": {
        "id": 5531
      },
      "writtenOn": "2019-01-23T20:11:17Z",
      "side": 1,
      "message": "I actually think it would make sense to use StreamsConfig, while it contains requests_alr_probing and pacing_factor, both of those would ideally be computed by BitrateAllocator as BitrateAllocator currently is the component that keeps track of the current streams configuration. So my suggestion would be to use that in BitrateAllocator::LimitObserver::OnAllocationLimitsChanged and RtpTransportControllerSend::SetAllocatedSendBitrateLimits.\n\nWe would have to do some special treatment of requests_alr_probing and pacing_factor in RtpTransportControllerSend, but just add a TODO to move that configuration to BitrateAllocator and it will be fine.\n\nThis design would make sense to me, since neither requests_alr_probing nor pacing_factor are RTP specific and they should be moved away from RtpTRansportControllerSend either way. This would also prepare for having those values consistently signaled to all MediaTransportcontrollers (including RtpTransportControllerSend when it has been moved to the new interface.)",
      "parentUuid": "9dcff361_45fde406",
      "range": {
        "startLine": 53,
        "startChar": 7,
        "endLine": 53,
        "endChar": 43
      },
      "revId": "d144ececa89f755b5c1059d4f58252ad5b5b9d01",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4cbc5b80_241f02ed",
        "filename": "api/media_transport_interface.h",
        "patchSetId": 3
      },
      "lineNbr": 53,
      "author": {
        "id": 7704
      },
      "writtenOn": "2019-01-23T22:17:29Z",
      "side": 1,
      "message": "Thanks for the detailed answer. There is a discussion here whether that would be the right choice today. Do you think you can join us on a sync up tomorrow?\n\nI think your suggestion is ok, but the main argument is that we don\u0027t need those other fields today (we can add them when we need them), and that potentially the struct was created for a different purpose (it\u0027s called StreamsConfig).\n\nHaving a simple struct or parameters in media transport shouldn\u0027t cause much downside, and has potentially upside.\n\nLet\u0027s finalize tomorrow.",
      "parentUuid": "7b18feaf_4ebd72b5",
      "range": {
        "startLine": 53,
        "startChar": 7,
        "endLine": 53,
        "endChar": 43
      },
      "revId": "d144ececa89f755b5c1059d4f58252ad5b5b9d01",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "539b0d5e_36a78b0c",
        "filename": "api/media_transport_interface.h",
        "patchSetId": 3
      },
      "lineNbr": 53,
      "author": {
        "id": 7704
      },
      "writtenOn": "2019-01-24T19:24:42Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4cbc5b80_241f02ed",
      "range": {
        "startLine": 53,
        "startChar": 7,
        "endLine": 53,
        "endChar": 43
      },
      "revId": "d144ececa89f755b5c1059d4f58252ad5b5b9d01",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4037ce9b_7d673e00",
        "filename": "api/media_transport_interface.h",
        "patchSetId": 3
      },
      "lineNbr": 54,
      "author": {
        "id": 5531
      },
      "writtenOn": "2019-01-23T18:30:54Z",
      "side": 1,
      "message": "Not needed as we are in webrtc namespace.",
      "range": {
        "startLine": 54,
        "startChar": 2,
        "endLine": 54,
        "endChar": 10
      },
      "revId": "d144ececa89f755b5c1059d4f58252ad5b5b9d01",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9d94c5ba_5cd02a9f",
        "filename": "api/media_transport_interface.h",
        "patchSetId": 3
      },
      "lineNbr": 54,
      "author": {
        "id": 7704
      },
      "writtenOn": "2019-01-23T18:48:14Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4037ce9b_7d673e00",
      "range": {
        "startLine": 54,
        "startChar": 2,
        "endLine": 54,
        "endChar": 10
      },
      "revId": "d144ececa89f755b5c1059d4f58252ad5b5b9d01",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "95aab394_4a67f660",
        "filename": "api/media_transport_interface.h",
        "patchSetId": 3
      },
      "lineNbr": 461,
      "author": {
        "id": 5531
      },
      "writtenOn": "2019-01-23T18:30:54Z",
      "side": 1,
      "message": "Should be \u003d 0; since it\u0027s for an interface. If it\u0027s temporary, add a TODO to indicate that it will be made virtual when downstream changes has been landed.",
      "revId": "d144ececa89f755b5c1059d4f58252ad5b5b9d01",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f1426718_14628203",
        "filename": "api/media_transport_interface.h",
        "patchSetId": 3
      },
      "lineNbr": 461,
      "author": {
        "id": 7704
      },
      "writtenOn": "2019-01-23T18:48:14Z",
      "side": 1,
      "message": "Adding to do. SHould be \u003d0, but will break existing implementations.",
      "parentUuid": "95aab394_4a67f660",
      "revId": "d144ececa89f755b5c1059d4f58252ad5b5b9d01",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c46fe20a_0a7e7b19",
        "filename": "call/call.cc",
        "patchSetId": 3
      },
      "lineNbr": 1193,
      "author": {
        "id": 5531
      },
      "writtenOn": "2019-01-23T18:30:54Z",
      "side": 1,
      "message": "webrtc:: not needed.",
      "revId": "d144ececa89f755b5c1059d4f58252ad5b5b9d01",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "26c1a9cd_8dfa665c",
        "filename": "call/call.cc",
        "patchSetId": 3
      },
      "lineNbr": 1193,
      "author": {
        "id": 7704
      },
      "writtenOn": "2019-01-23T18:48:14Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c46fe20a_0a7e7b19",
      "revId": "d144ececa89f755b5c1059d4f58252ad5b5b9d01",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    }
  ]
}