{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "a728991f_b53a58a6",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 19549
      },
      "writtenOn": "2022-09-07T16:30:18Z",
      "side": 1,
      "message": "picking up https://webrtc-review.googlesource.com/c/src/+/249601 again. We still need a spec change.",
      "revId": "272c3478b7c2241ba6da53f9f73593c920684dd6",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a786f8ab_d454dc1b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5634
      },
      "writtenOn": "2022-09-13T13:18:11Z",
      "side": 1,
      "message": "At TPAC, doubts were raised about whether this is Web compatible, given that this stat has been showing up early in Chrome \"forever\".\n",
      "revId": "272c3478b7c2241ba6da53f9f73593c920684dd6",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "351cbcfe_42e46c13",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5142
      },
      "writtenOn": "2022-09-13T13:22:25Z",
      "side": 1,
      "message": "The conclusion IIUC was to implement the spec (gate on packets \u003e 0, not negotiation like this CL is doing).\n\nWeb compat was raised. Personally I think whether we create the metrics before or after the first packet matters more to web platform tests or unit tests rather than real environments. Typically apps just poll at a fixed frequency and see what exists, I doubt assertions will fail if under some edge case the metric is missing a little longer than usual.\n\nJan-Ivar pointed out that that Firefox already shipped what the spec said wrt when to create, so I think Chrome can do the same without too much concern. But I don\u0027t mind adding a kill switch just in case.",
      "parentUuid": "a786f8ab_d454dc1b",
      "revId": "272c3478b7c2241ba6da53f9f73593c920684dd6",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "18a365c5_2801909f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5142
      },
      "writtenOn": "2022-09-13T13:22:59Z",
      "side": 1,
      "message": "This was Proposal A in the slides",
      "parentUuid": "351cbcfe_42e46c13",
      "revId": "272c3478b7c2241ba6da53f9f73593c920684dd6",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ed4371f7_516a7ad9",
        "filename": "media/base/media_channel.h",
        "patchSetId": 2
      },
      "lineNbr": 370,
      "author": {
        "id": 5142
      },
      "writtenOn": "2022-09-08T09:51:00Z",
      "side": 1,
      "message": "I\u0027m not sure \"codec_payload_type has a value\" should be used as a magic value for \"has the stream been negotiated\"... and I\u0027m not sure I like the idea of setting magic value 0. If we decide that outbound-rtp should appear even if we\u0027ve not sent anything yet then I\u0027d like to make this more explicit.\n\nBut let\u0027s wait and see what happens to the spec discussion. It may be relevant what other browsers do today, e.g. if this part of the spec is already implemented by Firefox.",
      "revId": "272c3478b7c2241ba6da53f9f73593c920684dd6",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "938fcef9_11676214",
        "filename": "media/base/media_channel.h",
        "patchSetId": 2
      },
      "lineNbr": 370,
      "author": {
        "id": 19549
      },
      "writtenOn": "2022-09-08T10:02:42Z",
      "side": 1,
      "message": "There is no magic value 0 (which is a valid payload type for G711)\n\nI do not think we should risk breaking the behavior which Chrome has implemented for years on statistics that are heavily relied on.",
      "parentUuid": "ed4371f7_516a7ad9",
      "revId": "272c3478b7c2241ba6da53f9f73593c920684dd6",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "At least one maximum vote for label \u0027Code-Review\u0027 is required"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader AND -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader AND -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Code-Review=MAX,user=non_uploader","label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1"]}
      },
      "patchSetCommitId": "272c3478b7c2241ba6da53f9f73593c920684dd6",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforced_gerrit"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforcement-satisfied_gerrit"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "272c3478b7c2241ba6da53f9f73593c920684dd6",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}