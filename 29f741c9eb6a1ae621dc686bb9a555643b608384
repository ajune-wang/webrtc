{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "3549ca3b_a2d29724",
        "filename": "media/engine/simulcast_encoder_adapter.cc",
        "patchSetId": 3
      },
      "lineNbr": 505,
      "author": {
        "id": 19549
      },
      "writtenOn": "2022-11-28T08:49:42Z",
      "side": 1,
      "message": "can/should I enforce \"frame types should be either null or have the right size\" somewhere up?",
      "revId": "29f741c9eb6a1ae621dc686bb9a555643b608384",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0a344cd0_7b9f2955",
        "filename": "media/engine/simulcast_encoder_adapter.cc",
        "patchSetId": 3
      },
      "lineNbr": 505,
      "author": {
        "id": 5117
      },
      "writtenOn": "2022-11-29T11:01:13Z",
      "side": 1,
      "message": "I believe you should just do |stream_frame_types \u003d frame_types;| here. So that SimulcastEncoderAdapter is completely transparent in the bypass mode.\n\nIf the frame_types has an incorrect size, it should trigger dcheck or something in the actual encoder, and not be an error here, because it is an incorrect use of an encoder in the calling code above.",
      "parentUuid": "3549ca3b_a2d29724",
      "revId": "29f741c9eb6a1ae621dc686bb9a555643b608384",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5685f670_7032a943",
        "filename": "media/engine/simulcast_encoder_adapter.cc",
        "patchSetId": 3
      },
      "lineNbr": 505,
      "author": {
        "id": 19549
      },
      "writtenOn": "2022-11-29T14:56:09Z",
      "side": 1,
      "message": "check done here, it gets a bit awkward in the individual encoders since frame_types is a pointer that can be null. The lower layers actually only enforce frame_types-\u003esize() \u003c stream_frame_types.size() instead of equality.\n\nAnd of course the DCHECK blew up but in interesting ways!\nThe VideoCodecTestLibvpx.SimulcastVP8 test was easy to fix, see modules/video_coding/codecs/test/videoprocessor.cc\n\nIn \nSimulcastTestFixtureImpl::SwitchingToOneStream \ntotal_streams_count_ is 1 since there is only a single non-disabled stream but it requests (delta) frames for 3 layers. What is the correct behavior and how does that affect the lookup of rids/ssrcs to layers in general?",
      "parentUuid": "0a344cd0_7b9f2955",
      "revId": "29f741c9eb6a1ae621dc686bb9a555643b608384",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "63b7d7ab_2f87273c",
        "filename": "media/engine/simulcast_encoder_adapter.cc",
        "patchSetId": 3
      },
      "lineNbr": 505,
      "author": {
        "id": 19549
      },
      "writtenOn": "2022-11-30T11:11:35Z",
      "side": 1,
      "message": "still a question, even after updating to copy approach which potentially makes the DCHECK not required even.\n\nSource of the failing test for PS9 is here:\nhttps://source.chromium.org/chromium/chromium/src/+/main:third_party/webrtc/modules/video_coding/utility/simulcast_test_fixture_impl.cc;l\u003d578?q\u003dTestSwitchingToOneStream\n\nI *think* it is how the test is written but it is not quite clear what it tests. Looks like case of simulcast but going into screenshare mode where simulcast really enables temporal scalability on a single spatial layer?\n\nWhat worries me is how the behavior is when I request a keyframe on the highest rid but the two lower rids are disabled. Does that move the \"layer\" inside SEA to the first index? I disabled the two lower layers via setParameters on https://fippo.github.io/simulcast-playground/rid-as-mid and that still showed a total_streams_count of 3.\n\nSolution seems to be to change the test to \n- set frame_types to 1 initially and then when \"switching back\" increase to 3 or \n- pass a nullptr in place of frame_types\n\nLeaning toward the first which will trigger the DCHECK if changed.",
      "parentUuid": "5685f670_7032a943",
      "revId": "29f741c9eb6a1ae621dc686bb9a555643b608384",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    }
  ]
}