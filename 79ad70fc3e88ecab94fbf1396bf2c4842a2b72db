{
  "comments": [
    {
      "key": {
        "uuid": "8f99de69_dfce34ba",
        "filename": "modules/audio_processing/aec_dump/aec_dump_impl.cc",
        "patchSetId": 2
      },
      "lineNbr": 72,
      "author": {
        "id": 5124
      },
      "writtenOn": "2019-01-16T16:47:32Z",
      "side": 1,
      "message": "debug_file_-\u003eClose() is called after this. There should be no tasks in the queue by then.",
      "range": {
        "startLine": 72,
        "startChar": 2,
        "endLine": 72,
        "endChar": 19
      },
      "revId": "79ad70fc3e88ecab94fbf1396bf2c4842a2b72db",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "192606bd_ab6b774b",
        "filename": "modules/audio_processing/aec_dump/aec_dump_impl.cc",
        "patchSetId": 2
      },
      "lineNbr": 219,
      "author": {
        "id": 5126
      },
      "writtenOn": "2019-01-17T01:55:59Z",
      "side": 1,
      "message": "Make an overload that takes a const std::string\u0026 ?",
      "range": {
        "startLine": 219,
        "startChar": 40,
        "endLine": 219,
        "endChar": 62
      },
      "revId": "79ad70fc3e88ecab94fbf1396bf2c4842a2b72db",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "49818258_9275e80e",
        "filename": "modules/audio_processing/aec_dump/aec_dump_impl.cc",
        "patchSetId": 2
      },
      "lineNbr": 219,
      "author": {
        "id": 5234
      },
      "writtenOn": "2019-01-17T09:49:39Z",
      "side": 1,
      "message": "I think it must be the responsibility of any code calling .c_str() to consider the proper behavior if there are any embedded NUL characters in the C++ string. \n\nIt\u0027s impossible to open a file with a NUL character in the name, so if we move the .c_str call  into FileWrapper, that code ought to have a memchr check and fail for names with embedded NULs, rather than silently truncating the input file name. Silent termination is a known source of security bugs...\n\nTo me, it makes sense to stick to a plain NUL-termintaed C string here, since that\u0027s the only thing we really can support.",
      "parentUuid": "192606bd_ab6b774b",
      "range": {
        "startLine": 219,
        "startChar": 40,
        "endLine": 219,
        "endChar": 62
      },
      "revId": "79ad70fc3e88ecab94fbf1396bf2c4842a2b72db",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3b3b0fda_d575963d",
        "filename": "modules/audio_processing/aec_dump/aec_dump_impl.cc",
        "patchSetId": 2
      },
      "lineNbr": 219,
      "author": {
        "id": 5126
      },
      "writtenOn": "2019-01-17T10:31:01Z",
      "side": 1,
      "message": "But if we ought to [D]CHECK for nulls (which I didn\u0027t think of), doesn\u0027t it make sense to do that once, in the file wrapper? Rather than having each call site fail to do it?",
      "parentUuid": "49818258_9275e80e",
      "range": {
        "startLine": 219,
        "startChar": 40,
        "endLine": 219,
        "endChar": 62
      },
      "revId": "79ad70fc3e88ecab94fbf1396bf2c4842a2b72db",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "28181f51_6db99b50",
        "filename": "modules/audio_processing/aec_dump/aec_dump_impl.cc",
        "patchSetId": 2
      },
      "lineNbr": 219,
      "author": {
        "id": 5508
      },
      "writtenOn": "2019-01-18T08:55:36Z",
      "side": 1,
      "message": "From my perspective, I think that we shouldn\u0027t have to consider the fact that the type std::string supports embedded nulls. Filenames/paths are strings that don\u0027t support embedded \u0027\\0\u0027s so it\u0027s OK to not worry about that here. In fact we generally don\u0027t worry about that, so if we start doing that now, are we setting a precedent for an avalanche of null checks across the code base? :)",
      "parentUuid": "3b3b0fda_d575963d",
      "range": {
        "startLine": 219,
        "startChar": 40,
        "endLine": 219,
        "endChar": 62
      },
      "revId": "79ad70fc3e88ecab94fbf1396bf2c4842a2b72db",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "53948daa_45014eb9",
        "filename": "modules/audio_processing/aec_dump/write_to_file_task.cc",
        "patchSetId": 2
      },
      "lineNbr": 52,
      "author": {
        "id": 5234
      },
      "writtenOn": "2019-01-16T15:16:21Z",
      "side": 1,
      "message": "I wonder if this implies a race, since this cl deletes a lock. Close here modifies the pointer debug_file_-\u003efile_. The owner of the file (AecDumpImpl) also calls Close.\n\nCan we ensure that debug_file_ (including the file_, its only member) is never written to during the lifetime of the task queue? \n\nThis class could have a separate bool, or set debug_file_ \u003d nullptr, to say that it shouldn\u0027t write any more data, instead of calling Close.",
      "range": {
        "startLine": 52,
        "startChar": 0,
        "endLine": 52,
        "endChar": 25
      },
      "revId": "79ad70fc3e88ecab94fbf1396bf2c4842a2b72db",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9506348e_aceb434b",
        "filename": "modules/audio_processing/aec_dump/write_to_file_task.cc",
        "patchSetId": 2
      },
      "lineNbr": 52,
      "author": {
        "id": 5124
      },
      "writtenOn": "2019-01-16T16:00:20Z",
      "side": 1,
      "message": "The file should only ever be accessed from one task queue. The check \"if (!debug_file_-\u003eis_open())\" on line 42 should be enough. That\u0027s because tasks are executed sequentially.",
      "parentUuid": "53948daa_45014eb9",
      "range": {
        "startLine": 52,
        "startChar": 0,
        "endLine": 52,
        "endChar": 25
      },
      "revId": "79ad70fc3e88ecab94fbf1396bf2c4842a2b72db",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "38494aa2_72a728fe",
        "filename": "modules/audio_processing/aec_dump/write_to_file_task.cc",
        "patchSetId": 2
      },
      "lineNbr": 52,
      "author": {
        "id": 5508
      },
      "writtenOn": "2019-01-16T16:05:29Z",
      "side": 1,
      "message": "could very well be a race. I\u0027m not sure if solving it in the FileWrapper class is the right approach though. Sounds good to get someone familiar with the two places where Close() is called and comment. It would be nice if we could reduce it to a single place.",
      "parentUuid": "53948daa_45014eb9",
      "range": {
        "startLine": 52,
        "startChar": 0,
        "endLine": 52,
        "endChar": 25
      },
      "revId": "79ad70fc3e88ecab94fbf1396bf2c4842a2b72db",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "67be688a_a316df1b",
        "filename": "modules/audio_processing/aec_dump/write_to_file_task.cc",
        "patchSetId": 2
      },
      "lineNbr": 52,
      "author": {
        "id": 5124
      },
      "writtenOn": "2019-01-16T16:47:32Z",
      "side": 1,
      "message": "Aouch, missed that the file owner also calls close. But it should still be fine: when the ~AecDumpImpl d-tor is called, it blocks until all tasks are finished. Only after that ~FileWrapper is called. So there is no race.",
      "parentUuid": "38494aa2_72a728fe",
      "range": {
        "startLine": 52,
        "startChar": 0,
        "endLine": 52,
        "endChar": 25
      },
      "revId": "79ad70fc3e88ecab94fbf1396bf2c4842a2b72db",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4f7aa2cc_bc8b6e34",
        "filename": "modules/audio_processing/aec_dump/write_to_file_task.cc",
        "patchSetId": 2
      },
      "lineNbr": 52,
      "author": {
        "id": 5508
      },
      "writtenOn": "2019-01-16T16:56:48Z",
      "side": 1,
      "message": "should we then remove the call to Close() that happens after the TQ has been drained? perhaps replace it with a RTC_DCHECK(!is_open()) or something like that.\n(or am I misunderstanding?)",
      "parentUuid": "67be688a_a316df1b",
      "range": {
        "startLine": 52,
        "startChar": 0,
        "endLine": 52,
        "endChar": 25
      },
      "revId": "79ad70fc3e88ecab94fbf1396bf2c4842a2b72db",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c966d4e7_6e5527a7",
        "filename": "modules/audio_processing/aec_dump/write_to_file_task.cc",
        "patchSetId": 2
      },
      "lineNbr": 52,
      "author": {
        "id": 5124
      },
      "writtenOn": "2019-01-17T09:29:14Z",
      "side": 1,
      "message": "I think both Close() are needed.\n\nThe one from TQ happens when we have run out of num_bytes_left_. When that happens, it should be signaled to the next tasks. That\u0027s done by closing the file. Tasks that follow see that the file is closed and exit immediately.\n\nThe one in ~AecDumpImpl d-tor is needed because num_bytes_left_ need not reach zero during the TQ tasks execution.",
      "parentUuid": "4f7aa2cc_bc8b6e34",
      "range": {
        "startLine": 52,
        "startChar": 0,
        "endLine": 52,
        "endChar": 25
      },
      "revId": "79ad70fc3e88ecab94fbf1396bf2c4842a2b72db",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "605045d9_9a709ea6",
        "filename": "modules/audio_processing/aec_dump/write_to_file_task.cc",
        "patchSetId": 2
      },
      "lineNbr": 52,
      "author": {
        "id": 5234
      },
      "writtenOn": "2019-01-17T09:55:32Z",
      "side": 1,
      "message": "I\u0027m changing this to debug_file_ \u003d nullptr (and replacing the is_open check a few lines up).",
      "parentUuid": "c966d4e7_6e5527a7",
      "range": {
        "startLine": 52,
        "startChar": 0,
        "endLine": 52,
        "endChar": 25
      },
      "revId": "79ad70fc3e88ecab94fbf1396bf2c4842a2b72db",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1a6c1415_40c15354",
        "filename": "rtc_base/system/file_wrapper.cc",
        "patchSetId": 2
      },
      "lineNbr": 60,
      "author": {
        "id": 5508
      },
      "writtenOn": "2019-01-16T16:05:29Z",
      "side": 1,
      "message": "what about replacing these checks with RTC_DCHECK(file_); ?",
      "revId": "79ad70fc3e88ecab94fbf1396bf2c4842a2b72db",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ef4e9691_2a272be2",
        "filename": "rtc_base/system/file_wrapper.cc",
        "patchSetId": 2
      },
      "lineNbr": 60,
      "author": {
        "id": 5126
      },
      "writtenOn": "2019-01-17T01:55:59Z",
      "side": 1,
      "message": "Sounds good. That should always be a programmer error.",
      "parentUuid": "1a6c1415_40c15354",
      "revId": "79ad70fc3e88ecab94fbf1396bf2c4842a2b72db",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9c9e2d9a_0d1c9ba6",
        "filename": "rtc_base/system/file_wrapper.cc",
        "patchSetId": 2
      },
      "lineNbr": 60,
      "author": {
        "id": 5234
      },
      "writtenOn": "2019-01-17T09:49:39Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ef4e9691_2a272be2",
      "revId": "79ad70fc3e88ecab94fbf1396bf2c4842a2b72db",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "58e27fe4_8f64396d",
        "filename": "rtc_base/system/file_wrapper.cc",
        "patchSetId": 2
      },
      "lineNbr": 72,
      "author": {
        "id": 5508
      },
      "writtenOn": "2019-01-16T16:05:29Z",
      "side": 1,
      "message": "would prefer dchecking in these situations too",
      "revId": "79ad70fc3e88ecab94fbf1396bf2c4842a2b72db",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "20a5b523_3cedc16c",
        "filename": "rtc_base/system/file_wrapper.cc",
        "patchSetId": 2
      },
      "lineNbr": 72,
      "author": {
        "id": 5234
      },
      "writtenOn": "2019-01-17T09:49:39Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "58e27fe4_8f64396d",
      "revId": "79ad70fc3e88ecab94fbf1396bf2c4842a2b72db",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "44431714_8922fbf8",
        "filename": "rtc_base/system/file_wrapper.cc",
        "patchSetId": 2
      },
      "lineNbr": 90,
      "author": {
        "id": 5508
      },
      "writtenOn": "2019-01-16T16:05:29Z",
      "side": 1,
      "message": "for this particular case (Close()), I\u0027m fine with checking file_. For the other methods, I\u0027d consider it programmer error if we\u0027re trying to read from or write to a file handle that\u0027s not valid.",
      "revId": "79ad70fc3e88ecab94fbf1396bf2c4842a2b72db",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7bf716f5_64348d92",
        "filename": "rtc_base/system/file_wrapper.cc",
        "patchSetId": 2
      },
      "lineNbr": 90,
      "author": {
        "id": 5234
      },
      "writtenOn": "2019-01-17T09:49:39Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "44431714_8922fbf8",
      "revId": "79ad70fc3e88ecab94fbf1396bf2c4842a2b72db",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a5422a4e_87d249d2",
        "filename": "rtc_base/system/file_wrapper.h",
        "patchSetId": 2
      },
      "lineNbr": 27,
      "author": {
        "id": 5126
      },
      "writtenOn": "2019-01-17T01:55:59Z",
      "side": 1,
      "message": "For call site readability, this ought to be an enum.",
      "range": {
        "startLine": 27,
        "startChar": 54,
        "endLine": 27,
        "endChar": 68
      },
      "revId": "79ad70fc3e88ecab94fbf1396bf2c4842a2b72db",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e3a2359a_6608db59",
        "filename": "rtc_base/system/file_wrapper.h",
        "patchSetId": 2
      },
      "lineNbr": 27,
      "author": {
        "id": 5234
      },
      "writtenOn": "2019-01-17T09:49:39Z",
      "side": 1,
      "message": "Done.\n\nOr should we go one step further, with separate classes for read and write? Probably not in this cl, though. But let\u0027s make them separate methods.",
      "parentUuid": "a5422a4e_87d249d2",
      "range": {
        "startLine": 27,
        "startChar": 54,
        "endLine": 27,
        "endChar": 68
      },
      "revId": "79ad70fc3e88ecab94fbf1396bf2c4842a2b72db",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "286d147d_8903f146",
        "filename": "rtc_base/system/file_wrapper.h",
        "patchSetId": 2
      },
      "lineNbr": 39,
      "author": {
        "id": 5508
      },
      "writtenOn": "2019-01-16T16:05:29Z",
      "side": 1,
      "message": "personally I\u0027d prefer this approach. The accessor could even be called is_valid().\n\nBeing able to do both of:\n\n  if (!FileWrapper::Open(...)) {}\n\nand \n\n  auto fw \u003d FileWrapper::Open();\n\ncould be confusing.",
      "revId": "79ad70fc3e88ecab94fbf1396bf2c4842a2b72db",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "934b8bc5_c0c96b87",
        "filename": "rtc_base/system/file_wrapper.h",
        "patchSetId": 2
      },
      "lineNbr": 39,
      "author": {
        "id": 5126
      },
      "writtenOn": "2019-01-17T01:55:59Z",
      "side": 1,
      "message": "+1 for having a normal method instead of implicit conversion to bool. This is easier to read at the call sites, unless it\u0027s a thing that we do extremely often (and it\u0027s not, in this case).",
      "parentUuid": "286d147d_8903f146",
      "revId": "79ad70fc3e88ecab94fbf1396bf2c4842a2b72db",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e98d5363_0952a4b7",
        "filename": "rtc_base/system/file_wrapper.h",
        "patchSetId": 2
      },
      "lineNbr": 39,
      "author": {
        "id": 5234
      },
      "writtenOn": "2019-01-17T09:49:39Z",
      "side": 1,
      "message": "Ok.Implicit conversion would make the type closer to a unique_ptr. But I\u0027ll leave it as is_open.",
      "parentUuid": "934b8bc5_c0c96b87",
      "revId": "79ad70fc3e88ecab94fbf1396bf2c4842a2b72db",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "de4f1689_6245e691",
        "filename": "rtc_base/system/file_wrapper.h",
        "patchSetId": 2
      },
      "lineNbr": 42,
      "author": {
        "id": 5126
      },
      "writtenOn": "2019-01-17T01:55:59Z",
      "side": 1,
      "message": "Document? Specifically, am I allowed to call this twice?",
      "revId": "79ad70fc3e88ecab94fbf1396bf2c4842a2b72db",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cc17ae59_272b3d5e",
        "filename": "rtc_base/system/file_wrapper.h",
        "patchSetId": 2
      },
      "lineNbr": 42,
      "author": {
        "id": 5234
      },
      "writtenOn": "2019-01-17T09:49:39Z",
      "side": 1,
      "message": "Documented that closing a closed file is a nop.",
      "parentUuid": "de4f1689_6245e691",
      "revId": "79ad70fc3e88ecab94fbf1396bf2c4842a2b72db",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5b357d54_9bd3b5e9",
        "filename": "rtc_base/system/file_wrapper.h",
        "patchSetId": 2
      },
      "lineNbr": 44,
      "author": {
        "id": 5508
      },
      "writtenOn": "2019-01-16T16:05:29Z",
      "side": 1,
      "message": "is Flush() used? (just curious)",
      "revId": "79ad70fc3e88ecab94fbf1396bf2c4842a2b72db",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fda8f1dd_b564d2a7",
        "filename": "rtc_base/system/file_wrapper.h",
        "patchSetId": 2
      },
      "lineNbr": 44,
      "author": {
        "id": 5126
      },
      "writtenOn": "2019-01-17T01:55:59Z",
      "side": 1,
      "message": "Document the return value?",
      "parentUuid": "5b357d54_9bd3b5e9",
      "revId": "79ad70fc3e88ecab94fbf1396bf2c4842a2b72db",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "783b2a68_cc358b6e",
        "filename": "rtc_base/system/file_wrapper.h",
        "patchSetId": 2
      },
      "lineNbr": 44,
      "author": {
        "id": 5234
      },
      "writtenOn": "2019-01-17T09:49:39Z",
      "side": 1,
      "message": "It\u0027s used in audio_processing/transient/file_utils.cc. Only use of related methods is in \n\nmodules/audio_processing/transient/click_annotate.cc\nmodules/audio_processing/transient/wpd_tree_unittest.cc\n\nCould perhaps be deleted, but I\u0027d prefer a separate cl.\n\nAnd rewind is used only once outside of tests, in modules/audio_device/dummy/file_audio_device.cc",
      "parentUuid": "fda8f1dd_b564d2a7",
      "revId": "79ad70fc3e88ecab94fbf1396bf2c4842a2b72db",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "28b649e8_8dd7227a",
        "filename": "rtc_base/system/file_wrapper.h",
        "patchSetId": 2
      },
      "lineNbr": 47,
      "author": {
        "id": 5508
      },
      "writtenOn": "2019-01-16T16:05:29Z",
      "side": 1,
      "message": "nit: Could rephrase this as \"Seeks to the beginning of the file\". Rewind is both the name of the function and the description, so the docs aren\u0027t that helpful. Also, makes it feel like we\u0027re dealing with tape storage :)",
      "revId": "79ad70fc3e88ecab94fbf1396bf2c4842a2b72db",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "47e9ab03_9cfe0cf5",
        "filename": "rtc_base/system/file_wrapper.h",
        "patchSetId": 2
      },
      "lineNbr": 47,
      "author": {
        "id": 5126
      },
      "writtenOn": "2019-01-17T01:55:59Z",
      "side": 1,
      "message": "+1. Please also document the return value.",
      "parentUuid": "28b649e8_8dd7227a",
      "revId": "79ad70fc3e88ecab94fbf1396bf2c4842a2b72db",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "78e0726d_1ee22fa5",
        "filename": "rtc_base/system/file_wrapper.h",
        "patchSetId": 2
      },
      "lineNbr": 47,
      "author": {
        "id": 5234
      },
      "writtenOn": "2019-01-17T09:49:39Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "47e9ab03_9cfe0cf5",
      "revId": "79ad70fc3e88ecab94fbf1396bf2c4842a2b72db",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a31a021a_473e9eee",
        "filename": "rtc_base/system/file_wrapper.h",
        "patchSetId": 2
      },
      "lineNbr": 50,
      "author": {
        "id": 5126
      },
      "writtenOn": "2019-01-17T01:55:59Z",
      "side": 1,
      "message": "Document these?",
      "revId": "79ad70fc3e88ecab94fbf1396bf2c4842a2b72db",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e62fbb06_52b7820b",
        "filename": "rtc_base/system/file_wrapper.h",
        "patchSetId": 2
      },
      "lineNbr": 50,
      "author": {
        "id": 5234
      },
      "writtenOn": "2019-01-17T09:49:39Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a31a021a_473e9eee",
      "revId": "79ad70fc3e88ecab94fbf1396bf2c4842a2b72db",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4504b742_528a21e9",
        "filename": "rtc_base/system/file_wrapper.h",
        "patchSetId": 2
      },
      "lineNbr": 57,
      "author": {
        "id": 5126
      },
      "writtenOn": "2019-01-17T01:55:59Z",
      "side": 1,
      "message": "These should be up with the other constructors.",
      "revId": "79ad70fc3e88ecab94fbf1396bf2c4842a2b72db",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6f71a855_51309c49",
        "filename": "rtc_base/system/file_wrapper.h",
        "patchSetId": 2
      },
      "lineNbr": 57,
      "author": {
        "id": 5234
      },
      "writtenOn": "2019-01-17T09:49:39Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4504b742_528a21e9",
      "revId": "79ad70fc3e88ecab94fbf1396bf2c4842a2b72db",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    }
  ]
}