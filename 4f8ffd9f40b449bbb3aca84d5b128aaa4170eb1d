{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "bc33bb7f_d045e28c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 14874
      },
      "writtenOn": "2021-05-07T16:06:36Z",
      "side": 1,
      "message": "the other change is baked in now and I think i\u0027ve seen another bug recently where payload type exhaustion might have been the root cause.",
      "revId": "4f8ffd9f40b449bbb3aca84d5b128aaa4170eb1d",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "71785f8b_a98e264c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5634
      },
      "writtenOn": "2021-05-10T06:48:02Z",
      "side": 1,
      "message": "PT was a time bomb. Let\u0027s not plant more time bombs.\n",
      "revId": "4f8ffd9f40b449bbb3aca84d5b128aaa4170eb1d",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d105601b_7b7db3d9",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5117
      },
      "writtenOn": "2021-05-10T08:26:58Z",
      "side": 1,
      "message": "I agree with Harald\u0027s comments.",
      "revId": "4f8ffd9f40b449bbb3aca84d5b128aaa4170eb1d",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e35fb774_40f81bc6",
        "filename": "media/engine/webrtc_video_engine.cc",
        "patchSetId": 1
      },
      "lineNbr": 182,
      "author": {
        "id": 5634
      },
      "writtenOn": "2021-05-10T06:48:02Z",
      "side": 1,
      "message": "a far future problem: if we have isCodecValidForLowerRange() for so many codecs that the lower range gets filled up before the higher range is full, this will error out here. Suggest adding (\"\u0026\u0026 payload_type_lower \u003c kLastDynamicPayloadTypeLowerRange\") to the condition above, and checking that both ranges are full when we get here.\n\n(Same thing below).",
      "revId": "4f8ffd9f40b449bbb3aca84d5b128aaa4170eb1d",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "890ad7dd_e785c914",
        "filename": "media/engine/webrtc_video_engine.cc",
        "patchSetId": 1
      },
      "lineNbr": 182,
      "author": {
        "id": 14874
      },
      "writtenOn": "2021-05-10T09:34:12Z",
      "side": 1,
      "message": "asserted with a DCHECK.",
      "parentUuid": "e35fb774_40f81bc6",
      "revId": "4f8ffd9f40b449bbb3aca84d5b128aaa4170eb1d",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f49cab2d_3c3ca2a1",
        "filename": "media/engine/webrtc_video_engine.cc",
        "patchSetId": 1
      },
      "lineNbr": 193,
      "author": {
        "id": 5634
      },
      "writtenOn": "2021-05-10T06:48:02Z",
      "side": 1,
      "message": "Given that this if condition is getting pretty complex AND is repeated, I suggest creating a single function absl::optional\u003cPT\u003e AllocatePayloadType(codec.name).",
      "revId": "4f8ffd9f40b449bbb3aca84d5b128aaa4170eb1d",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "178c95d4_f2878eb9",
        "filename": "media/engine/webrtc_video_engine.cc",
        "patchSetId": 1
      },
      "lineNbr": 193,
      "author": {
        "id": 14874
      },
      "writtenOn": "2021-05-10T09:34:12Z",
      "side": 1,
      "message": "a function would have to modify the upper and lower pt counters, i.e. state it doesn\u0027t own? That doesn\u0027t seem good to me (we\u0027re in a non-class method)\n\nThe complexity here comes from actually doing the PT allocation twice, but in  different ways:\n1/ for a codec in the given list, adding feedback parameters to it.\n2/ by creating an rtx codec for the given codec.\n\nTo make things more fun, we try to put rtx codecs into the same range (e.g. for av1 create its rtx in the lower range) and have to deal with the case where we use the last payload type in the upper range for a codec and are now putting the rtx codec into the lower range (instead of dropping it as before; unclear if that actually happens).\n\nWe could simplify this if we put the codec for the last case into the lower range which moves it closer to its rtx codec. That way we check once that we have 1-2 payload types available in the given range and then use them. \nThat *might* change behavior for some h264 hw encoders on windows (which is where we ran out of payload types). In cases where those were used without rtx (which would be pretty confusing to debug).\nAlso if we allocate 125+126 to a video codec, then 35+36 to another one we use 127 for ulpfec. Does that seem better?",
      "parentUuid": "f49cab2d_3c3ca2a1",
      "revId": "4f8ffd9f40b449bbb3aca84d5b128aaa4170eb1d",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    }
  ]
}