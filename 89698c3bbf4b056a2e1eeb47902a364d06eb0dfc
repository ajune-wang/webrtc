{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "a78fa7e4_fb077d44",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 5634
      },
      "writtenOn": "2022-01-28T07:39:15Z",
      "side": 1,
      "message": "Need a guardian Invoke in the Call destructor too?\n",
      "revId": "89698c3bbf4b056a2e1eeb47902a364d06eb0dfc",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e3e5c592_be522e48",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 5087
      },
      "writtenOn": "2022-01-28T07:51:28Z",
      "side": 1,
      "message": "LGTM % comment.",
      "revId": "89698c3bbf4b056a2e1eeb47902a364d06eb0dfc",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3406d8bc_59ea3d7c",
        "filename": "pc/channel_manager.cc",
        "patchSetId": 3
      },
      "lineNbr": 73,
      "author": {
        "id": 5508
      },
      "writtenOn": "2022-01-28T07:49:28Z",
      "side": 1,
      "message": "oops, will remove this.",
      "revId": "89698c3bbf4b056a2e1eeb47902a364d06eb0dfc",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0c18a3cd_2e4343de",
        "filename": "pc/channel_manager.cc",
        "patchSetId": 3
      },
      "lineNbr": 73,
      "author": {
        "id": 5087
      },
      "writtenOn": "2022-01-28T07:51:28Z",
      "side": 1,
      "message": "Yep, this was the only thing I was going to comment on. :)",
      "parentUuid": "3406d8bc_59ea3d7c",
      "revId": "89698c3bbf4b056a2e1eeb47902a364d06eb0dfc",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "32bf2d49_4fd0a107",
        "filename": "pc/channel_manager.cc",
        "patchSetId": 3
      },
      "lineNbr": 254,
      "author": {
        "id": 5634
      },
      "writtenOn": "2022-01-28T07:39:15Z",
      "side": 1,
      "message": "Hm. Still confused as to why this can happen, or why it helps to Invoke rather than PostTask - the difference is only that the signaling thread waits a bit. But I believe you.",
      "revId": "89698c3bbf4b056a2e1eeb47902a364d06eb0dfc",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "62901d95_5f0a0ff6",
        "filename": "pc/channel_manager.cc",
        "patchSetId": 3
      },
      "lineNbr": 254,
      "author": {
        "id": 5508
      },
      "writtenOn": "2022-01-28T07:53:17Z",
      "side": 1,
      "message": "It\u0027s basically because the channel manager is owned by the context class, which has different lifetime scope from the call object. It might make sense to align the lifetime of the channel manager with the Call and the send transport objects.",
      "parentUuid": "32bf2d49_4fd0a107",
      "revId": "89698c3bbf4b056a2e1eeb47902a364d06eb0dfc",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0d86dc29_e8020fd6",
        "filename": "pc/channel_manager.cc",
        "patchSetId": 3
      },
      "lineNbr": 254,
      "author": {
        "id": 5634
      },
      "writtenOn": "2022-01-28T08:27:33Z",
      "side": 1,
      "message": "Hm. From memory, the PeerConnection owns both the Call object and the Context object. Seems to me that Call should be owned by Context, so that Context can manage this dependency.",
      "parentUuid": "62901d95_5f0a0ff6",
      "revId": "89698c3bbf4b056a2e1eeb47902a364d06eb0dfc",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a863aac8_327605ef",
        "filename": "pc/channel_manager.cc",
        "patchSetId": 3
      },
      "lineNbr": 254,
      "author": {
        "id": 5508
      },
      "writtenOn": "2022-01-28T08:44:57Z",
      "side": 1,
      "message": "That could be one way to do it. Then context could ensure that call teardown and channel manager is aligned.\n\nThe issue now is\n* The _potential_ lifetime scope of the channels that the channel manager manages, is technically larger than Call.\n* However, Call implements Create/Destroy methods for stream objects. Those objects are referenced by Call for purposes of demuxing etc. Call really wants these objects gone when Call goes out of scope.\n* The deletion of the streams is dependent on the deletion of the Channels.\n  \nIn practice, the Channels are now owned by the transceiver objects (but deletion is still triggered via the channel manager since it owns the channel vectors). There\u0027s some work still to be done there, but ideally the channels should be fully owned by transceiver and bound by their lifetime. There are few CLs on the way that accomplish that.",
      "parentUuid": "0d86dc29_e8020fd6",
      "revId": "89698c3bbf4b056a2e1eeb47902a364d06eb0dfc",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    }
  ]
}