{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "3f6effb0_54a09064",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5864
      },
      "writtenOn": "2022-07-29T20:45:23Z",
      "side": 1,
      "message": "PTAL :) This should finish it.",
      "revId": "b650a87d70307127d5b70c9f0d9fc9649d2c3c07",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6ddd38fb_131e2753",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5864
      },
      "writtenOn": "2022-07-29T22:12:40Z",
      "side": 1,
      "message": "For posterity here\u0027s a crash stack in Chromium (I added a RTC_CHECK_NOTREACHED() while developing):\n\n[24992:73987:0729/104947.835231:FATAL:video_frame.cc(279)] \n\n#\n# Unreachable code reached: ../../third_party/webrtc/api/video/video_frame.cc, line 279\n# last system error: 0\n# \n0   libbase.dylib                       0x0000000109d82342 base::debug::CollectStackTrace(void**, unsigned long) + 18\n1   libbase.dylib                       0x0000000109c674a3 base::debug::StackTrace::StackTrace() + 19\n2   libbase.dylib                       0x0000000109c8599b logging::LogMessage::~LogMessage() + 171\n3   libwebrtc_component.dylib           0x000000010f1243e6 rtc::webrtc_checks_impl::WriteFatalLog(char const*, int, absl::string_view) + 102\n4   libwebrtc_component.dylib           0x000000010f124353 rtc::webrtc_checks_impl::UnreachableCodeReached(char const*, int) + 99\n5   libwebrtc_component.dylib           0x000000010efb7264 webrtc::VideoFrame::Builder::build() + 244\n6   libblink_platform.dylib             0x0000000127c4975f blink::WebRtcVideoTrackSource::DeliverFrame(scoped_refptr\u003cmedia::VideoFrame\u003e, std::Cr::vector\u003cscoped_refptr\u003cmedia::VideoFrame\u003e, std::Cr::allocator\u003cscoped_refptr\u003cmedia::VideoFrame\u003e\u003e\u003e, gfx::Rect*, long long) + 1039\n7   libblink_platform.dylib             0x0000000127c48dd9 blink::WebRtcVideoTrackSource::OnFrameCaptured(scoped_refptr\u003cmedia::VideoFrame\u003e, std::Cr::vector\u003cscoped_refptr\u003cmedia::VideoFrame\u003e, std::Cr::allocator\u003cscoped_refptr\u003cmedia::VideoFrame\u003e\u003e\u003e) + 3065\n8   libblink_modules.dylib              0x000000012c7d3366 blink::MediaStreamVideoWebRtcSink::WebRtcVideoSourceAdapter::OnVideoFrameOnNetworkThread(scoped_refptr\u003cmedia::VideoFrame\u003e, std::Cr::vector\u003cscoped_refptr\u003cmedia::VideoFrame\u003e, std::Cr::allocator\u003cscoped_refptr\u003cmedia::VideoFrame\u003e\u003e\u003e) + 262\n9   libblink_modules.dylib              0x000000012c7d4859 void base::internal::FunctorTraits\u003cvoid (blink::MediaStreamVideoWebRtcSink::WebRtcVideoSourceAdapter::*)(scoped_refptr\u003cmedia::VideoFrame\u003e, std::Cr::vector\u003cscoped_refptr\u003cmedia::VideoFrame\u003e, std::Cr::allocator\u003cscoped_refptr\u003cmedia::VideoFrame\u003e\u003e\u003e), void\u003e::Invoke\u003cvoid (blink::MediaStreamVideoWebRtcSink::WebRtcVideoSourceAdapter::*)(scoped_refptr\u003cmedia::VideoFrame\u003e, std::Cr::vector\u003cscoped_refptr\u003cmedia::VideoFrame\u003e, std::Cr::allocator\u003cscoped_refptr\u003cmedia::VideoFrame\u003e\u003e\u003e), scoped_refptr\u003cblink::MediaStreamVideoWebRtcSink::WebRtcVideoSourceAdapter\u003e, scoped_refptr\u003cmedia::VideoFrame\u003e, std::Cr::vector\u003cscoped_refptr\u003cmedia::VideoFrame\u003e, std::Cr::allocator\u003cscoped_refptr\u003cmedia::VideoFrame\u003e\u003e\u003e\u003e(void (blink::MediaStreamVideoWebRtcSink::WebRtcVideoSourceAdapter::*)(scoped_refptr\u003cmedia::VideoFrame\u003e, std::Cr::vector\u003cscoped_refptr\u003cmedia::VideoFrame\u003e, std::Cr::allocator\u003cscoped_refptr\u003cmedia::VideoFrame\u003e\u003e\u003e), scoped_refptr\u003cblink::MediaStreamVideoWebRtcSink::WebRtcVideoSourceAdapter\u003e\u0026\u0026, scoped_refptr\u003cmedia::VideoFrame\u003e\u0026\u0026, std::Cr::vector\u003cscoped_refptr\u003cmedia::VideoFrame\u003e, std::Cr::allocator\u003cscoped_refptr\u003cmedia::VideoFrame\u003e\u003e\u003e\u0026\u0026) + 153\n10  libbase.dylib                       0x0000000109d0528a base::TaskAnnotator::RunTaskImpl(base::PendingTask\u0026) + 314\n11  libbase.dylib                       0x0000000109d311f5 base::sequence_manager::internal::ThreadControllerWithMessagePumpImpl::DoWorkImpl(base::sequence_manager::LazyNow*) + 1669\n12  libbase.dylib                       0x0000000109d3068b base::sequence_manager::internal::ThreadControllerWithMessagePumpImpl::DoWork() + 123\n13  libbase.dylib                       0x0000000109d319e5 non-virtual thunk to base::sequence_manager::internal::ThreadControllerWithMessagePumpImpl::DoWork() + 21\n14  libbase.dylib                       0x0000000109c94911 base::MessagePumpDefault::Run(base::MessagePump::Delegate*) + 161\n15  libbase.dylib                       0x0000000109d31f77 base::sequence_manager::internal::ThreadControllerWithMessagePumpImpl::Run(bool, base::TimeDelta) + 679\n16  libbase.dylib                       0x0000000109cd3a03 base::RunLoop::Run(base::Location const\u0026) + 675\n17  libbase.dylib                       0x0000000109d633bf base::Thread::Run(base::RunLoop*) + 239\n18  libbase.dylib                       0x0000000109d6375e base::Thread::ThreadMain() + 878\n19  libbase.dylib                       0x0000000109d93f83 base::(anonymous namespace)::ThreadFunc(void*) + 115\n20  libsystem_pthread.dylib             0x00007ff8187704e1 _pthread_start + 125\n21  libsystem_pthread.dylib             0x00007ff81876bf6b thread_start + 15\nTask trace:\n0   libblink_modules.dylib              0x000000012c7d2ffd blink::MediaStreamVideoWebRtcSink::WebRtcVideoSourceAdapter::OnVideoFrameOnIO(scoped_refptr\u003cmedia::VideoFrame\u003e, std::Cr::vector\u003cscoped_refptr\u003cmedia::VideoFrame\u003e, std::Cr::allocator\u003cscoped_refptr\u003cmedia::VideoFrame\u003e\u003e\u003e, base::TimeTicks) + 77\n1   libblink_platform.dylib             0x0000000127c835b3 blink::VideoCaptureImpl::OnBufferReady(mojo::StructPtr\u003cmedia::mojom::blink::ReadyBuffer\u003e, WTF::Vector\u003cmojo::StructPtr\u003cmedia::mojom::blink::ReadyBuffer\u003e, 0u, WTF::PartitionAllocator\u003e) + 3043\n2   libblink_platform.dylib             0x0000000127c83511 blink::VideoCaptureImpl::OnBufferReady(mojo::StructPtr\u003cmedia::mojom::blink::ReadyBuffer\u003e, WTF::Vector\u003cmojo::StructPtr\u003cmedia::mojom::blink::ReadyBuffer\u003e, 0u, WTF::PartitionAllocator\u003e) + 2881\n",
      "revId": "b650a87d70307127d5b70c9f0d9fc9649d2c3c07",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "At least one maximum vote for label \u0027Code-Review\u0027 is required"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader AND -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader AND -label:Code-Review=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Code-Review=MAX,user=non_uploader"],"failingAtoms":["label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1"]}
      },
      "patchSetCommitId": "b650a87d70307127d5b70c9f0d9fc9649d2c3c07",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["is:review-enforced_gerrit"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforcement-satisfied_gerrit"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforcement-satisfied_gerrit"]}
      },
      "patchSetCommitId": "b650a87d70307127d5b70c9f0d9fc9649d2c3c07",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {
        "value": true
      }
    }
  ]
}