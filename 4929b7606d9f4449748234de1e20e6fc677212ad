{
  "comments": [
    {
      "key": {
        "uuid": "c1e9ca4f_575d989c",
        "filename": "api/create_peerconnection_factory.cc",
        "patchSetId": 4
      },
      "lineNbr": 48,
      "author": {
        "id": 5087
      },
      "writtenOn": "2019-03-19T15:08:33Z",
      "side": 1,
      "message": "I saw a comment on the bug that proposes to achieve this with mandatory dependency injection instead of using a build flag (https://bugs.chromium.org/p/webrtc/issues/detail?id\u003d10424#c1).\n\nI general, I prefer that against build flags proliferation.",
      "range": {
        "startLine": 48,
        "startChar": 0,
        "endLine": 48,
        "endChar": 48
      },
      "revId": "4929b7606d9f4449748234de1e20e6fc677212ad",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "15abaf88_9c6906f6",
        "filename": "api/create_peerconnection_factory.cc",
        "patchSetId": 4
      },
      "lineNbr": 48,
      "author": {
        "id": 8760
      },
      "writtenOn": "2019-03-19T15:25:03Z",
      "side": 1,
      "message": "I agree mandatory dependency injection is right way, but doesn\u0027t that require the audio_processing to be passed in via this api and hence a api change (not sure if its ok to change apis). \nSorry, I am not too familiar and may not be understanding the \u0027mandatory dependency injection.\n\nOther option is to not use CreatePeerConnectionFactory and copy over this code in our app layer, and app can do whatever it wants.",
      "parentUuid": "c1e9ca4f_575d989c",
      "range": {
        "startLine": 48,
        "startChar": 0,
        "endLine": 48,
        "endChar": 48
      },
      "revId": "4929b7606d9f4449748234de1e20e6fc677212ad",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9d2eeb80_d863e946",
        "filename": "api/create_peerconnection_factory.cc",
        "patchSetId": 4
      },
      "lineNbr": 48,
      "author": {
        "id": 5125
      },
      "writtenOn": "2019-03-22T11:47:22Z",
      "side": 1,
      "message": "I don\u0027t think that the rest of the code would work well with this approach.\nAFAICS, passing a nullptr to \ncricket::WebRtcMediaEngineFactory::Create(.)\nwill have the effect that it is passed to the constructor for\nWebRtcVoiceEngine::WebRtcVoiceEngine(.)\nwhich includes a DCHECK on audioprocessing not being nullptr.\n\nThat DCHECK is there because the code was not designed for audioprocessing being nullptr.\n\nI think that the code definitely could be made to work without an audio processing object being passed but that requires much more changes than this.",
      "parentUuid": "15abaf88_9c6906f6",
      "range": {
        "startLine": 48,
        "startChar": 0,
        "endLine": 48,
        "endChar": 48
      },
      "revId": "4929b7606d9f4449748234de1e20e6fc677212ad",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "963a7e28_aeab8ba9",
        "filename": "api/create_peerconnection_factory.cc",
        "patchSetId": 4
      },
      "lineNbr": 48,
      "author": {
        "id": 8760
      },
      "writtenOn": "2019-03-22T14:35:08Z",
      "side": 1,
      "message": "You are right, the code won\u0027t work if caller of CreatePeerConnectionFactory calls with audio_processing\u003dnullptr and the WebRTC is built with rtc_include_builtin_audio_processing\u003dfalse.\nThat is why I added \nRTC_CHECK(0) \u003c\u003c \"audio_processing should be supplied for peer connection\"; \nSo that its easy to catch these issues.\n\nThe expectation is that the application needs to provide its own implementation of audio_processing. \nFor IOS, since we use hardware AEC, we provide very light weight audio_processing which is pretty much no-op and small binary size. \nGetting rid of software AGC,AEC etc saves ~200KB which is huge for IOS.",
      "parentUuid": "9d2eeb80_d863e946",
      "range": {
        "startLine": 48,
        "startChar": 0,
        "endLine": 48,
        "endChar": 48
      },
      "revId": "4929b7606d9f4449748234de1e20e6fc677212ad",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f2d1670e_292cfc69",
        "filename": "api/create_peerconnection_factory.cc",
        "patchSetId": 4
      },
      "lineNbr": 48,
      "author": {
        "id": 5125
      },
      "writtenOn": "2019-03-22T15:11:57Z",
      "side": 1,
      "message": "Then I\u0027m a bit confused about the value of this CL.\n\nAs I now see it the sole purpose of this CL is to make WebRTC flag if processing is not supplied externally when it is expected to. This makes sense, but it comes at a cost both in code complexity and in that an additional CHECK which is something that should be avoided.\n\nI don\u0027t see anything in this CL that ensures the saving of memory. That is rather achieved by passing an external pointer to an AudioProcessing object to the Factory. The same memory savings should as well be possible without this CL.",
      "parentUuid": "963a7e28_aeab8ba9",
      "range": {
        "startLine": 48,
        "startChar": 0,
        "endLine": 48,
        "endChar": 48
      },
      "revId": "4929b7606d9f4449748234de1e20e6fc677212ad",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "53b3a9be_4e38caa7",
        "filename": "api/create_peerconnection_factory.cc",
        "patchSetId": 4
      },
      "lineNbr": 48,
      "author": {
        "id": 8773
      },
      "writtenOn": "2019-05-23T06:22:24Z",
      "side": 1,
      "message": "I independently reimplemented the same idea in https://webrtc-review.googlesource.com/c/src/+/138101\n\nCurrently because there is no facility to do this from api/, we had to depend on the internal APIs in media/engine/webrtc_media_engine.h, which is fragile. \n\nPer, I did not understand what you meant about saving of memory. We are not trying to save runtime memory with this CL, but rather reduce code size. With this CL, the linker (using link time optimization) can eliminate the audio processing stack as dead code. \n\nRequiring a non-null audio_processing argument would be a breaking change to the API. That seems like a good goal, but this CL seems like a good transitionary state until we can get there.",
      "parentUuid": "f2d1670e_292cfc69",
      "range": {
        "startLine": 48,
        "startChar": 0,
        "endLine": 48,
        "endChar": 48
      },
      "revId": "4929b7606d9f4449748234de1e20e6fc677212ad",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cb5d29f2_3deadc71",
        "filename": "api/create_peerconnection_factory.cc",
        "patchSetId": 4
      },
      "lineNbr": 48,
      "author": {
        "id": 5125
      },
      "writtenOn": "2019-05-27T05:53:50Z",
      "side": 1,
      "message": "I see the point about link time optimization. I missed that benefit.",
      "parentUuid": "53b3a9be_4e38caa7",
      "range": {
        "startLine": 48,
        "startChar": 0,
        "endLine": 48,
        "endChar": 48
      },
      "revId": "4929b7606d9f4449748234de1e20e6fc677212ad",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    }
  ]
}