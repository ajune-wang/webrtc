{
  "comments": [
    {
      "key": {
        "uuid": "7444317d_3c8591aa",
        "filename": "api/create_peerconnection_factory.h",
        "patchSetId": 1
      },
      "lineNbr": 52,
      "author": {
        "id": 5087
      },
      "writtenOn": "2018-12-04T19:52:49Z",
      "side": 1,
      "message": "Shouldn\u0027t we #include \"rtc_base/deprecation.h\"? I know it is outside of api/ but in this case I think it makes sense.",
      "range": {
        "startLine": 52,
        "startChar": 0,
        "endLine": 52,
        "endChar": 14
      },
      "revId": "d6405b2e6125cc6a13fce2851eb92c6d0947c0c2",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "98b24eac_36527918",
        "filename": "api/create_peerconnection_factory.h",
        "patchSetId": 1
      },
      "lineNbr": 52,
      "author": {
        "id": 5126
      },
      "writtenOn": "2018-12-06T09:32:19Z",
      "side": 1,
      "message": "Yes please.",
      "parentUuid": "7444317d_3c8591aa",
      "range": {
        "startLine": 52,
        "startChar": 0,
        "endLine": 52,
        "endChar": 14
      },
      "revId": "d6405b2e6125cc6a13fce2851eb92c6d0947c0c2",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "39e386be_f7065fad",
        "filename": "media/engine/convert_legacy_video_factory.h",
        "patchSetId": 1
      },
      "lineNbr": 48,
      "author": {
        "id": 5098
      },
      "writtenOn": "2018-12-05T13:53:15Z",
      "side": 1,
      "message": "Why can\u0027t we just mark these as RTC_DEPRECATED with no other changes?",
      "range": {
        "startLine": 48,
        "startChar": 0,
        "endLine": 48,
        "endChar": 14
      },
      "revId": "d6405b2e6125cc6a13fce2851eb92c6d0947c0c2",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "27a244b1_31ac2beb",
        "filename": "media/engine/convert_legacy_video_factory.h",
        "patchSetId": 1
      },
      "lineNbr": 48,
      "author": {
        "id": 5249
      },
      "writtenOn": "2018-12-05T14:29:38Z",
      "side": 1,
      "message": "Because we\u0027re using them from `webrtcmediaengine.cc`, and webrtc does not compile if we\u0027re using the functions that are marked as deprecated.\n\nThat is also why I opted to not mark the classes WebRtcVideoEncoder etc as deprecated, because it makes too much of our code not compile so it\u0027s impractical to work around.",
      "parentUuid": "39e386be_f7065fad",
      "range": {
        "startLine": 48,
        "startChar": 0,
        "endLine": 48,
        "endChar": 14
      },
      "revId": "d6405b2e6125cc6a13fce2851eb92c6d0947c0c2",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cdad8ff1_7e971367",
        "filename": "media/engine/convert_legacy_video_factory.h",
        "patchSetId": 1
      },
      "lineNbr": 48,
      "author": {
        "id": 5098
      },
      "writtenOn": "2018-12-05T14:32:55Z",
      "side": 1,
      "message": "Should it be \u0027static inline\u0027? I\u0027m worried we could get duplicate symbols, but I guess if this builds everywhere everything is fine.",
      "range": {
        "startLine": 48,
        "startChar": 26,
        "endLine": 48,
        "endChar": 32
      },
      "revId": "d6405b2e6125cc6a13fce2851eb92c6d0947c0c2",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "eafb820c_f59cd073",
        "filename": "media/engine/convert_legacy_video_factory.h",
        "patchSetId": 1
      },
      "lineNbr": 48,
      "author": {
        "id": 5098
      },
      "writtenOn": "2018-12-05T14:32:55Z",
      "side": 1,
      "message": "I see, and this is the workaround.",
      "parentUuid": "27a244b1_31ac2beb",
      "range": {
        "startLine": 48,
        "startChar": 0,
        "endLine": 48,
        "endChar": 14
      },
      "revId": "d6405b2e6125cc6a13fce2851eb92c6d0947c0c2",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "73e3addd_70d3670e",
        "filename": "media/engine/convert_legacy_video_factory.h",
        "patchSetId": 1
      },
      "lineNbr": 48,
      "author": {
        "id": 5249
      },
      "writtenOn": "2018-12-05T15:08:25Z",
      "side": 1,
      "message": "I don\u0027t think we should introduce any duplicate symbols with this change. We\u0027re only adding two new temporary functions and making the old functions forward to them. The inline is just because the the workaround instructions in rtc_base/deprecation.h said so.",
      "parentUuid": "cdad8ff1_7e971367",
      "range": {
        "startLine": 48,
        "startChar": 26,
        "endLine": 48,
        "endChar": 32
      },
      "revId": "d6405b2e6125cc6a13fce2851eb92c6d0947c0c2",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9dbc8e86_56219f90",
        "filename": "media/engine/convert_legacy_video_factory.h",
        "patchSetId": 1
      },
      "lineNbr": 48,
      "author": {
        "id": 5126
      },
      "writtenOn": "2018-12-06T09:32:19Z",
      "side": 1,
      "message": "tl;dr: `inline`: yes, `static inline`: no\n\n`inline` makes it OK that the function definition is duplicated in several translation units; the linker will de-duplicate.\n\n`static inline` would give the function internal linkage; essentially, this means that each translation unit gets its own private copy of the function. On the one hand, this allows the compiler to not emit a definition if all call sites are inlined. On the other hand, it also means that if all call sites are not inlined, multiple translation units could end up carrying definitions; this is mostly harmless because of the internal linkage, but hurts binary size.\n\nIn C++, the preferred way to give things internal linkage is to put them in an unnamed namespace. The effect is the same as you get with `static`.\n\nGiving definitions in headers internal linkage (whether with `static` or an unnamed namespace) is forbidden by the style guide [https://google.github.io/styleguide/cppguide.html#Unnamed_Namespaces_and_Static_Variables], because \"mostly harmless\" still leaves too many cracks for bugs to slither through.",
      "parentUuid": "73e3addd_70d3670e",
      "range": {
        "startLine": 48,
        "startChar": 26,
        "endLine": 48,
        "endChar": 32
      },
      "revId": "d6405b2e6125cc6a13fce2851eb92c6d0947c0c2",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    }
  ]
}