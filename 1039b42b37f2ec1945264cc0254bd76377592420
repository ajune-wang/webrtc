{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "c2431614_a37bb29f",
        "filename": "media/engine/webrtc_video_engine.cc",
        "patchSetId": 5
      },
      "lineNbr": 3336,
      "author": {
        "id": 19549
      },
      "writtenOn": "2023-04-18T15:19:29Z",
      "side": 1,
      "message": "Does this also need to take header bytes into account?\n\nIn general it looks we have an issue with accounting for probes which currently do not get counted in the retransmittedPacketsSent :-(",
      "revId": "1039b42b37f2ec1945264cc0254bd76377592420",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c9f3ec6d_b80d3a55",
        "filename": "media/engine/webrtc_video_engine.cc",
        "patchSetId": 5
      },
      "lineNbr": 3336,
      "author": {
        "id": 5142
      },
      "writtenOn": "2023-04-20T09:45:26Z",
      "side": 1,
      "message": "\u003e Does this also need to take header bytes into account?\n\nTL;DR: No. Longer answer:\n\nRegarding headerBytesSent and headerBytesReceived there does not appear to be any way to tell how much of that was RTX or not.\n\nThe total transport payload is headerBytes[Sent/Received] + bytes[Sent/Received]. When we\u0027re talking about bytes[Sent/Received] we\u0027re only talking about payload, not header.\n\nOn the send size, retransmittedBytesSent is \"The total number of bytes that were retransmitted for this SSRC, only including payload bytes\". So my understanding is that the symmetrical way to do this is to say that retransmittedBytesReceived would also only include payload.\n\nI.e. for the metrics you\u0027re adding we don\u0027t care about headers. The headerBytesReceived already covers this, and the fact that you don\u0027t know how much of a header is retransmission-related is an existing design choice.\n\n\u003e In general it looks we have an issue with accounting for probes which currently do not get counted in the retransmittedPacketsSent :-(\n\nI\u0027m a bit confused about the probing issue...gut reaction is send and receive counters should be symmetrical? But is it a bug or a feature that probes are not accounted for? Does the spec need to be clarified?",
      "parentUuid": "c2431614_a37bb29f",
      "revId": "1039b42b37f2ec1945264cc0254bd76377592420",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "12f2623e_06b2e279",
        "filename": "media/engine/webrtc_video_engine.cc",
        "patchSetId": 5
      },
      "lineNbr": 3336,
      "author": {
        "id": 19549
      },
      "writtenOn": "2023-04-20T10:39:55Z",
      "side": 1,
      "message": "The packet counter does count header bytes https://source.chromium.org/chromium/chromium/src/+/refs/heads/main:third_party/webrtc/modules/rtp_rtcp/include/rtp_rtcp_defines.h;drc\u003db0f57b7e98590319f0f0786d00e683299b4e96f9;l\u003d299\nand we have one for RTX.\n\nThe question was whether we need to add to add to info.header_and_padding_bytes_rcvd like we do in line 3305 (both RTX header and padding bytes even though the latter should always be 0).\n\nThe problem is that it is very hard to see the difference.\nI am not sure if the payload bytes already include RTX (on a different ssrc) or not.",
      "parentUuid": "c9f3ec6d_b80d3a55",
      "revId": "1039b42b37f2ec1945264cc0254bd76377592420",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f4986e32_b3679240",
        "filename": "media/engine/webrtc_video_engine.cc",
        "patchSetId": 5
      },
      "lineNbr": 3336,
      "author": {
        "id": 19549
      },
      "writtenOn": "2023-04-20T12:42:32Z",
      "side": 1,
      "message": "So I did a test by going to https://webrtc.github.io/samples/src/content/peerconnection/bandwidth/ with webrtc-internals open and then calling pc1.getSenders()[0].track.stop() and comparing it to wireshark.\n\nWithout this patch the inbound-rtp is 487 while outbound-rtp is 528. Looking at Wireshark, there are 34 RTX packets. This suggests we currently don\u0027t count the packets and probably don\u0027t count their contribution to header and padding either.\nWith this patch one can see a big jump of headerBytesReceived in the beginning (due to RTX probing)\n\nI assume the same applies to bytes received but this is hard to validate... what kinda works is comparing to the total transport values (but those include RTCP packets sent?). Doing this:\nlocalStream.getTracks()[0].stop();\nconst s1 \u003d await pc1.getStats(); s1.forEach(r \u003d\u003e [\u0027outbound-rtp\u0027, \u0027transport\u0027].includes(r.type) \u0026\u0026 console.log(\u0027SENT\u0027, r.type, \u0027p\u003d\u0027 + r.bytesSent, \u0027h\u003d\u0027 + r.headerBytesSent, \u0027packetsSent\u003d\u0027 + r.packetsSent, \u0027retransmittedPacketsSent\u003d\u0027 + r.retransmittedPacketsSent))\nconst s2 \u003d await pc2.getStats(); s2.forEach(r \u003d\u003e [\u0027inbound-rtp\u0027, \u0027transport\u0027].includes(r.type) \u0026\u0026 console.log(\u0027RECV\u0027, r.type, \u0027p\u003d\u0027 + r.bytesReceived, \u0027h\u003d\u0027 + r.headerBytesReceived, \u0027packetsReceived\u003d\u0027 + r.packetsReceived, \u0027retransmittedPacketsReceived\u003d\u0027 + r.retransmittedPacketsReceived))\n\nwith this patch yields (--force-fieldtrials\u003dWebRtcStatsReportIdl/Disabled/ helps)\nSENT outbound-rtp p\u003d58066 h\u003d5980 packetsSent\u003d98 retransmittedPacketsSent\u003d0\nSENT transport p\u003d66422 h\u003dundefined packetsSent\u003d103 retransmittedPacketsSent\u003dundefined\nRECV inbound-rtp p\u003d58066 h\u003d5980 packetsReceived\u003d98 retransmittedPacketsReceived\u003d21\nRECV transport p\u003d66422 h\u003dundefined packetsReceived\u003d103 retransmittedPacketsReceived\u003dundefined\n\nwhile without it the following (from a different connection)\nSENT outbound-rtp p\u003d83872 h\u003d3536 packetsSent\u003d108 retransmittedPacketsSent\u003d0\nSENT transport p\u003d89814 h\u003dundefined packetsSent\u003d112 retransmittedPacketsSent\u003dundefined\nRECV inbound-rtp p\u003d78714 h\u003d2536 packetsReceived\u003d97 retransmittedPacketsReceived\u003dundefined\nRECV transport p\u003d89814 h\u003dundefined packetsReceived\u003d112 retransmittedPacketsReceived\u003dundefined\n\nSo this patch improves things and does not only implement the new metrics but takes into account what we didn\u0027t so far.",
      "parentUuid": "12f2623e_06b2e279",
      "revId": "1039b42b37f2ec1945264cc0254bd76377592420",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "aba17fd5_2bba044b",
        "filename": "media/engine/webrtc_video_engine.cc",
        "patchSetId": 5
      },
      "lineNbr": 3336,
      "author": {
        "id": 19549
      },
      "writtenOn": "2023-04-20T18:14:38Z",
      "side": 1,
      "message": "I have done https://jsfiddle.net/fippo/hvpxf5L0/3/ which helps a lot with verification. One can run wireshark in parallel or the WebRTC-Debugging-RtpDump field trial.\nSample result:\n\"outbound-rtp\", \"packetsSent\u003d74\", \"retransmittedPacketsSent\u003d0\", \"bytesSent\u003d46654\", \"headerBytesSent\u003d3148\", \"retransmittedBytesSent\u003d0\"\n\"transport\", \"packetSent\u003d79\", \"bytesSent\u003d50082\"\n\"inbound-rtp\", \"packetsReceived\u003d74\", \"retransmittedPacketsReceived\u003d15\", \"bytesReceived\u003d46654\", \"headerBytesReceived\u003d3148\", \"retransmittedBytesReceived\u003d5932\"\n\"transport\", \"packetsReceived\u003d79\", \"bytesReceived\u003d50082\"\n\nLooking at the pcap, per payload type (97+113 are RTX) lengths/counts are:\nheader:  { \u002797\u0027: 992, \u0027112\u0027:  1524, \u0027113\u0027:  328 } \u003d\u003e  2844\npayload: { \u002797\u0027:   0, \u0027112\u0027: 40833, \u0027113\u0027: 6054 } \u003d\u003e 46887\npacket#: { \u002797\u0027:   4, \u0027112\u0027:    56, \u0027113\u0027:   10 } \u003d\u003e    70\n\nWhat is confusing is that the receive stats show more than what was in the PCAP. This is not from RTCP either, the SRs show a packetCount show a packet count of 70 and octetCount of 46887 (which isn\u0027t entirely correct since it sums RTP and RTX packets and is hence per-ssrc)?\n\nEither way, this is better than before I think.",
      "parentUuid": "f4986e32_b3679240",
      "revId": "1039b42b37f2ec1945264cc0254bd76377592420",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    }
  ]
}