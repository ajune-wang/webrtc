{
  "comments": [
    {
      "key": {
        "uuid": "e10bb160_168076ae",
        "filename": "modules/video_coding/codecs/av1/scalability_structure_l1t3.cc",
        "patchSetId": 2
      },
      "lineNbr": 88,
      "author": {
        "id": 5527
      },
      "writtenOn": "2020-06-08T12:31:46Z",
      "side": 1,
      "message": "Not sure if we want to have this here. It might be the case that some encoder in RT mode only predicts from one buffer, even though it is allowed to predict from several. Not sure...",
      "range": {
        "startLine": 88,
        "startChar": 27,
        "endLine": 88,
        "endChar": 77
      },
      "revId": "323118e8e1349f1e475988a3f0670059b6126adb",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5ea3e247_4f312a81",
        "filename": "modules/video_coding/codecs/av1/scalability_structure_l1t3.cc",
        "patchSetId": 2
      },
      "lineNbr": 88,
      "author": {
        "id": 5019
      },
      "writtenOn": "2020-06-08T14:17:32Z",
      "side": 1,
      "message": "doubled checked libaom rtc example for this structure - it uses single reference for 2nd T2 frame,\nso removed first one.\n\n(then again, encoder wrapper that supports predicting from only one buffer is free to ignore the 2nd buffer where referenced \u003d true. though for such case it would have been better to reverse order of mentioning buffers)",
      "parentUuid": "e10bb160_168076ae",
      "range": {
        "startLine": 88,
        "startChar": 27,
        "endLine": 88,
        "endChar": 77
      },
      "revId": "323118e8e1349f1e475988a3f0670059b6126adb",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ee03ca7c_6b1e3c77",
        "filename": "modules/video_coding/codecs/av1/scalability_structure_l3t1.cc",
        "patchSetId": 2
      },
      "lineNbr": 32,
      "author": {
        "id": 5527
      },
      "writtenOn": "2020-06-08T12:31:46Z",
      "side": 1,
      "message": "kSwitch?",
      "range": {
        "startLine": 32,
        "startChar": 18,
        "endLine": 32,
        "endChar": 27
      },
      "revId": "323118e8e1349f1e475988a3f0670059b6126adb",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2ea4fe3f_1add8594",
        "filename": "modules/video_coding/codecs/av1/scalability_structure_l3t1.cc",
        "patchSetId": 2
      },
      "lineNbr": 32,
      "author": {
        "id": 5019
      },
      "writtenOn": "2020-06-08T14:17:32Z",
      "side": 1,
      "message": "you\u0027re right, fixed.",
      "parentUuid": "ee03ca7c_6b1e3c77",
      "range": {
        "startLine": 32,
        "startChar": 18,
        "endLine": 32,
        "endChar": 27
      },
      "revId": "323118e8e1349f1e475988a3f0670059b6126adb",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2e8838c8_36bd4796",
        "filename": "modules/video_coding/codecs/av1/scalability_structure_l3t1.cc",
        "patchSetId": 2
      },
      "lineNbr": 33,
      "author": {
        "id": 5527
      },
      "writtenOn": "2020-06-08T12:31:46Z",
      "side": 1,
      "message": "Not needed, should be the same as Key, S2?",
      "range": {
        "startLine": 33,
        "startChar": 4,
        "endLine": 33,
        "endChar": 41
      },
      "revId": "323118e8e1349f1e475988a3f0670059b6126adb",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "164b981f_81b0a541",
        "filename": "modules/video_coding/codecs/av1/scalability_structure_l3t1.cc",
        "patchSetId": 2
      },
      "lineNbr": 33,
      "author": {
        "id": 5019
      },
      "writtenOn": "2020-06-08T14:17:32Z",
      "side": 1,
      "message": "Right.... Fixed.",
      "parentUuid": "2e8838c8_36bd4796",
      "range": {
        "startLine": 33,
        "startChar": 4,
        "endLine": 33,
        "endChar": 41
      },
      "revId": "323118e8e1349f1e475988a3f0670059b6126adb",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8651cf79_83546eda",
        "filename": "modules/video_coding/codecs/av1/scalability_structure_l3t3.cc",
        "patchSetId": 2
      },
      "lineNbr": 339,
      "author": {
        "id": 5527
      },
      "writtenOn": "2020-06-08T12:31:46Z",
      "side": 1,
      "message": "What happens to S1 and S2 if the encoder decides to encode a keyframe? It looks like we will provide the wrong encoder_buffers and decoder_target_indications in that case?",
      "range": {
        "startLine": 337,
        "startChar": 0,
        "endLine": 339,
        "endChar": 3
      },
      "revId": "323118e8e1349f1e475988a3f0670059b6126adb",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ad768e3e_80c06ba0",
        "filename": "modules/video_coding/codecs/av1/scalability_structure_l3t3.cc",
        "patchSetId": 2
      },
      "lineNbr": 339,
      "author": {
        "id": 5019
      },
      "writtenOn": "2020-06-08T14:17:32Z",
      "side": 1,
      "message": "I\u0027m not sure what would be right encoder buffers and dti in such case.\nSo added a warning for now.\n\nencoder buffers... probably should be {{/*id\u003d*/0..7, /*referenced\u003d*/false, /*updated\u003d*/true}},\nbut on the the other side it might be better to put such logic into encoder wrapper (it is allowed and encouraged to rewrite config.buffers from \"requested\" to \"actually used\").\n\nif all encoder buffers are updated on the KF, then DTI\u003dS*9 is the right one.",
      "parentUuid": "8651cf79_83546eda",
      "range": {
        "startLine": 337,
        "startChar": 0,
        "endLine": 339,
        "endChar": 3
      },
      "revId": "323118e8e1349f1e475988a3f0670059b6126adb",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    }
  ]
}