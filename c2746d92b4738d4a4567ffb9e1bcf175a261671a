{
  "comments": [
    {
      "key": {
        "uuid": "706421e2_00ab8b92",
        "filename": "rtc_base/file_rotating_stream.cc",
        "patchSetId": 9
      },
      "lineNbr": 264,
      "author": {
        "id": 5234
      },
      "writtenOn": "2019-01-18T08:57:30Z",
      "side": 1,
      "message": "This method is exposed as a property on the objc RTCFileLogger",
      "range": {
        "startLine": 264,
        "startChar": 25,
        "endLine": 264,
        "endChar": 41
      },
      "revId": "c2746d92b4738d4a4567ffb9e1bcf175a261671a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e4fd0795_026952a1",
        "filename": "rtc_base/file_rotating_stream.cc",
        "patchSetId": 9
      },
      "lineNbr": 286,
      "author": {
        "id": 5234
      },
      "writtenOn": "2019-01-18T08:57:30Z",
      "side": 1,
      "message": "Note that this use of errno isn\u0027t documented in the FileWrapper class.",
      "range": {
        "startLine": 286,
        "startChar": 17,
        "endLine": 286,
        "endChar": 22
      },
      "revId": "c2746d92b4738d4a4567ffb9e1bcf175a261671a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fbfba1c3_7066af68",
        "filename": "rtc_base/file_rotating_stream.cc",
        "patchSetId": 9
      },
      "lineNbr": 286,
      "author": {
        "id": 5126
      },
      "writtenOn": "2019-01-18T11:26:51Z",
      "side": 1,
      "message": "So remove it? Or build support for it?",
      "parentUuid": "e4fd0795_026952a1",
      "range": {
        "startLine": 286,
        "startChar": 17,
        "endLine": 286,
        "endChar": 22
      },
      "revId": "c2746d92b4738d4a4567ffb9e1bcf175a261671a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6168d296_530cb7d3",
        "filename": "rtc_base/file_rotating_stream.cc",
        "patchSetId": 9
      },
      "lineNbr": 286,
      "author": {
        "id": 5234
      },
      "writtenOn": "2019-01-21T12:54:06Z",
      "side": 1,
      "message": "Not sure what\u0027s the right thing. The easy way is to document that errno is the way to check the reason a call failed. Another way might be to return something more complex, or add an optional int* error argument where relevant errno value is copied.",
      "parentUuid": "fbfba1c3_7066af68",
      "range": {
        "startLine": 286,
        "startChar": 17,
        "endLine": 286,
        "endChar": 22
      },
      "revId": "c2746d92b4738d4a4567ffb9e1bcf175a261671a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f5b75317_9ce4ee28",
        "filename": "rtc_base/file_rotating_stream.cc",
        "patchSetId": 9
      },
      "lineNbr": 286,
      "author": {
        "id": 5126
      },
      "writtenOn": "2019-01-21T13:40:13Z",
      "side": 1,
      "message": "Since FileWrapper is explicitly a thin wrapper around FILE*, it might make sense to document that callers should use errno. On the other hand, if we ever change our minds, finding all those uses of errno is going to be hard.\n\nMy vote is on adding an optional int* argument where we fill in errno, but I can probably be persuaded to go with just the documentation too.",
      "parentUuid": "6168d296_530cb7d3",
      "range": {
        "startLine": 286,
        "startChar": 17,
        "endLine": 286,
        "endChar": 22
      },
      "revId": "c2746d92b4738d4a4567ffb9e1bcf175a261671a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "49f770bc_6a2e2959",
        "filename": "rtc_base/file_rotating_stream.cc",
        "patchSetId": 9
      },
      "lineNbr": 286,
      "author": {
        "id": 5234
      },
      "writtenOn": "2019-01-21T14:24:59Z",
      "side": 1,
      "message": "Ok, I\u0027ll add on optional argument (and only for the method(s) where it\u0027s used)",
      "parentUuid": "f5b75317_9ce4ee28",
      "range": {
        "startLine": 286,
        "startChar": 17,
        "endLine": 286,
        "endChar": 22
      },
      "revId": "c2746d92b4738d4a4567ffb9e1bcf175a261671a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3908fe40_d7b97858",
        "filename": "rtc_base/file_rotating_stream_unittest.cc",
        "patchSetId": 9
      },
      "lineNbr": 132,
      "author": {
        "id": 5126
      },
      "writtenOn": "2019-01-18T11:26:51Z",
      "side": 1,
      "message": "Are you sure we shouldn\u0027t have a const std::string\u0026 overload?",
      "range": {
        "startLine": 132,
        "startChar": 52,
        "endLine": 132,
        "endChar": 60
      },
      "revId": "c2746d92b4738d4a4567ffb9e1bcf175a261671a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a9f98e7e_1c0d7f0a",
        "filename": "rtc_base/file_rotating_stream_unittest.cc",
        "patchSetId": 9
      },
      "lineNbr": 132,
      "author": {
        "id": 5234
      },
      "writtenOn": "2019-01-21T12:54:06Z",
      "side": 1,
      "message": "I don\u0027t that strong an opinion. If we add it, I want to fail (either RTC_CHECK or returning failure) for embedded NULs. But I don\u0027t see a big problem with leaving .c_str() to callers; it\u0027s few characters, it\u0027s clear what it does, and what potential NUL-problems are.",
      "parentUuid": "3908fe40_d7b97858",
      "range": {
        "startLine": 132,
        "startChar": 52,
        "endLine": 132,
        "endChar": 60
      },
      "revId": "c2746d92b4738d4a4567ffb9e1bcf175a261671a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "efc76a92_3ab1e86c",
        "filename": "rtc_base/file_rotating_stream_unittest.cc",
        "patchSetId": 9
      },
      "lineNbr": 132,
      "author": {
        "id": 5126
      },
      "writtenOn": "2019-01-21T13:40:13Z",
      "side": 1,
      "message": "Having dozens of separate calls to c_str() is only OK if you *don\u0027t* care. If you *do* care about the possibility of embedded nulls (and you seem to do), then checking it centrally seems like the only viable option.\n\nAnd as for the actual check, RTC_CHECK seems like a great choice. No caller should ask for filenames with embedded nulls.",
      "parentUuid": "a9f98e7e_1c0d7f0a",
      "range": {
        "startLine": 132,
        "startChar": 52,
        "endLine": 132,
        "endChar": 60
      },
      "revId": "c2746d92b4738d4a4567ffb9e1bcf175a261671a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5de3f88d_12315898",
        "filename": "rtc_base/file_rotating_stream_unittest.cc",
        "patchSetId": 9
      },
      "lineNbr": 132,
      "author": {
        "id": 5234
      },
      "writtenOn": "2019-01-21T14:24:59Z",
      "side": 1,
      "message": "I don\u0027t care that much about *current* calls, I worry about future calls where silent truncation will be unexpected and possibly dangerous. We should avoid building foot-shooting devices.\n\nBut a convenience overload with a RTC_CHECK is fine with me. I\u0027ll add that.",
      "parentUuid": "efc76a92_3ab1e86c",
      "range": {
        "startLine": 132,
        "startChar": 52,
        "endLine": 132,
        "endChar": 60
      },
      "revId": "c2746d92b4738d4a4567ffb9e1bcf175a261671a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    }
  ]
}