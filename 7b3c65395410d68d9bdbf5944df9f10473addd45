{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "be8d69e7_df69cab4",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 18474
      },
      "writtenOn": "2022-10-18T18:36:35Z",
      "side": 1,
      "message": "LGTM, but let\u0027s maybe add a flag.",
      "revId": "7b3c65395410d68d9bdbf5944df9f10473addd45",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "28732ff4_70e46a09",
        "filename": "modules/desktop_capture/linux/wayland/shared_screencast_stream.cc",
        "patchSetId": 7
      },
      "lineNbr": 41,
      "author": {
        "id": 19629
      },
      "writtenOn": "2022-10-19T11:55:41Z",
      "side": 1,
      "message": "(Comment missed from previous review)\n\nWould you know what happens if the source / compositor wants to send more than the maximum number we are setting here? Would it send more frames with different deltas until it has communicated all the damaged rectangles? If yes, how do we ensure that we have waited for all the damaged rectangles of the frame (otherwise, we might present an inconsistent frame state to the user potentially violating \"perfect frame\" ideology of wayland) or may be it just marks the complete frame as damaged (which is possibly what you were seeing in the testing when you used a single region count)?\n\nMay be we should set the number fairly large (if not unlimited) so that we don\u0027t have to keep on waiting for all the deltas by the compositor (assuming that compositor does send deltas).",
      "revId": "7b3c65395410d68d9bdbf5944df9f10473addd45",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d22d7fdc_085c7302",
        "filename": "modules/desktop_capture/linux/wayland/shared_screencast_stream.cc",
        "patchSetId": 7
      },
      "lineNbr": 41,
      "author": {
        "id": 8046
      },
      "writtenOn": "2022-10-19T12:16:43Z",
      "side": 1,
      "message": "What KWin does, when there are more damage regions in a frame than available damage region metadata in the PW buffer, is that they will just send a bounding rect. I don\u0027t know what others will do as KWin is the only available implementation at this moment and it\u0027s itself limited to 16 damage regions.",
      "parentUuid": "28732ff4_70e46a09",
      "revId": "7b3c65395410d68d9bdbf5944df9f10473addd45",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f5f2c332_49a223bf",
        "filename": "modules/desktop_capture/linux/wayland/shared_screencast_stream.cc",
        "patchSetId": 7
      },
      "lineNbr": 593,
      "author": {
        "id": 18474
      },
      "writtenOn": "2022-10-18T18:36:35Z",
      "side": 1,
      "message": "With us trying to launch this I\u0027m a little worried about unintended behavior from this. Would you consider adding an option (pipewire_use_damage_region) that we check here to determine if we swap in damage_region_ or if we make it a full-sized Rect like we used to do?",
      "range": {
        "startLine": 592,
        "startChar": 0,
        "endLine": 593,
        "endChar": 25
      },
      "revId": "7b3c65395410d68d9bdbf5944df9f10473addd45",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    }
  ]
}