{
  "comments": [
    {
      "key": {
        "uuid": "6489f19d_9f925a44",
        "filename": "rtc_base/logging.h",
        "patchSetId": 16
      },
      "lineNbr": 165,
      "author": {
        "id": 6547
      },
      "writtenOn": "2018-05-18T15:56:51Z",
      "side": 1,
      "message": "Should we support short/unsigned short as well?",
      "range": {
        "startLine": 164,
        "startChar": 0,
        "endLine": 165,
        "endChar": 8
      },
      "revId": "ba18891509e63e1a868c64590efe34489fb1a3ae",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a2925c90_ae7bb1a5",
        "filename": "rtc_base/logging.h",
        "patchSetId": 16
      },
      "lineNbr": 165,
      "author": {
        "id": 5126
      },
      "writtenOn": "2018-05-18T23:18:28Z",
      "side": 1,
      "message": "There\u0027s no point, just as there\u0027s no point supporting float, because smaller types are promoted to int and double: http://en.cppreference.com/w/cpp/language/variadic_arguments.",
      "parentUuid": "6489f19d_9f925a44",
      "range": {
        "startLine": 164,
        "startChar": 0,
        "endLine": 165,
        "endChar": 8
      },
      "revId": "ba18891509e63e1a868c64590efe34489fb1a3ae",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2c326c13_0d7178f7",
        "filename": "rtc_base/logging.h",
        "patchSetId": 16
      },
      "lineNbr": 271,
      "author": {
        "id": 6547
      },
      "writtenOn": "2018-05-18T15:56:51Z",
      "side": 1,
      "message": "What is the effect of assigning the nullptr?",
      "range": {
        "startLine": 271,
        "startChar": 57,
        "endLine": 271,
        "endChar": 66
      },
      "revId": "ba18891509e63e1a868c64590efe34489fb1a3ae",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "99af7238_21477cd9",
        "filename": "rtc_base/logging.h",
        "patchSetId": 16
      },
      "lineNbr": 271,
      "author": {
        "id": 5126
      },
      "writtenOn": "2018-05-18T23:18:28Z",
      "side": 1,
      "message": "enable_if\u003cfalse\u003e doesn\u0027t have a `type` member, so SFINAE will remove us from the overload set.\n \nenable_if\u003ctrue\u003e::type is void, so this becomes the same as void* \u003d nullptr; that is, an unnamed template argument of type void* with default value nullptr. Completely useless, except as a way to force a SFINAE error if the condition is false.",
      "parentUuid": "2c326c13_0d7178f7",
      "range": {
        "startLine": 271,
        "startChar": 57,
        "endLine": 271,
        "endChar": 66
      },
      "revId": "ba18891509e63e1a868c64590efe34489fb1a3ae",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "22f7f413_902ba29f",
        "filename": "rtc_base/logging.h",
        "patchSetId": 16
      },
      "lineNbr": 525,
      "author": {
        "id": 6547
      },
      "writtenOn": "2018-05-18T15:56:51Z",
      "side": 1,
      "message": "Are there other users of LOG_SEVERITY_PRECONDITION?",
      "range": {
        "startLine": 525,
        "startChar": 0,
        "endLine": 525,
        "endChar": 44
      },
      "revId": "ba18891509e63e1a868c64590efe34489fb1a3ae",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3cbc2103_7d9e5411",
        "filename": "rtc_base/logging.h",
        "patchSetId": 16
      },
      "lineNbr": 525,
      "author": {
        "id": 5126
      },
      "writtenOn": "2018-05-18T23:18:28Z",
      "side": 1,
      "message": "Yes---not in our tree, but elsewhere. We break them if we remove it without warning.",
      "parentUuid": "22f7f413_902ba29f",
      "range": {
        "startLine": 525,
        "startChar": 0,
        "endLine": 525,
        "endChar": 44
      },
      "revId": "ba18891509e63e1a868c64590efe34489fb1a3ae",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "280fa0c2_1db024ff",
        "filename": "rtc_base/logging.h",
        "patchSetId": 16
      },
      "lineNbr": 532,
      "author": {
        "id": 6547
      },
      "writtenOn": "2018-05-18T15:56:51Z",
      "side": 1,
      "message": "Have you checked how much space we\u0027d save by replacing this this check with an early return in Log()? It should be less valuable now that we can avoid creating the entire log message.",
      "range": {
        "startLine": 531,
        "startChar": 2,
        "endLine": 532,
        "endChar": 22
      },
      "revId": "ba18891509e63e1a868c64590efe34489fb1a3ae",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a19a4227_7254090c",
        "filename": "rtc_base/logging.h",
        "patchSetId": 16
      },
      "lineNbr": 532,
      "author": {
        "id": 5126
      },
      "writtenOn": "2018-05-18T23:18:28Z",
      "side": 1,
      "message": "No, I haven\u0027t. You\u0027re welcome to try in a follow-up CL, but I suspect performance will suffer.",
      "parentUuid": "280fa0c2_1db024ff",
      "range": {
        "startLine": 531,
        "startChar": 2,
        "endLine": 532,
        "endChar": 22
      },
      "revId": "ba18891509e63e1a868c64590efe34489fb1a3ae",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "87177d50_8835bac8",
        "filename": "rtc_base/logging.h",
        "patchSetId": 16
      },
      "lineNbr": 631,
      "author": {
        "id": 6547
      },
      "writtenOn": "2018-05-18T15:56:51Z",
      "side": 1,
      "message": "would for (;false;) work here?",
      "range": {
        "startLine": 631,
        "startChar": 2,
        "endLine": 631,
        "endChar": 51
      },
      "revId": "ba18891509e63e1a868c64590efe34489fb1a3ae",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "719e1ea1_c5bdf795",
        "filename": "rtc_base/logging.h",
        "patchSetId": 16
      },
      "lineNbr": 631,
      "author": {
        "id": 5126
      },
      "writtenOn": "2018-05-18T23:18:28Z",
      "side": 1,
      "message": "Yes. Or `while(false)`.",
      "parentUuid": "87177d50_8835bac8",
      "range": {
        "startLine": 631,
        "startChar": 2,
        "endLine": 631,
        "endChar": 51
      },
      "revId": "ba18891509e63e1a868c64590efe34489fb1a3ae",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f4a8ad42_223a29a5",
        "filename": "rtc_base/logging.h",
        "patchSetId": 16
      },
      "lineNbr": 634,
      "author": {
        "id": 6547
      },
      "writtenOn": "2018-05-18T15:56:51Z",
      "side": 1,
      "message": "Can\u0027t we remove everything but the LogStreamer?",
      "range": {
        "startLine": 632,
        "startChar": 2,
        "endLine": 634,
        "endChar": 75
      },
      "revId": "ba18891509e63e1a868c64590efe34489fb1a3ae",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "675f382f_058ad2af",
        "filename": "rtc_base/logging.h",
        "patchSetId": 16
      },
      "lineNbr": 634,
      "author": {
        "id": 5126
      },
      "writtenOn": "2018-05-18T23:18:28Z",
      "side": 1,
      "message": "It looks like we can.",
      "parentUuid": "f4a8ad42_223a29a5",
      "range": {
        "startLine": 632,
        "startChar": 2,
        "endLine": 634,
        "endChar": 75
      },
      "revId": "ba18891509e63e1a868c64590efe34489fb1a3ae",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0bb8c575_919a7f9f",
        "filename": "rtc_base/system/inline.h",
        "patchSetId": 16
      },
      "lineNbr": 19,
      "author": {
        "id": 5399
      },
      "writtenOn": "2018-05-22T12:44:03Z",
      "side": 1,
      "message": "Does this cover clang as well, or is there nothing we need to do for that compiler?",
      "revId": "ba18891509e63e1a868c64590efe34489fb1a3ae",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c7b6f99f_9659387f",
        "filename": "rtc_base/system/inline.h",
        "patchSetId": 16
      },
      "lineNbr": 19,
      "author": {
        "id": 5126
      },
      "writtenOn": "2018-05-23T10:02:39Z",
      "side": 1,
      "message": "For historical reasons, clang defines __GNUC__ (because it had to be a drop-in replacement for GCC in order to gain traction).",
      "parentUuid": "0bb8c575_919a7f9f",
      "revId": "ba18891509e63e1a868c64590efe34489fb1a3ae",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    }
  ]
}