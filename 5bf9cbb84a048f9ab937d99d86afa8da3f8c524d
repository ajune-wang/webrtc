{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "c193ab0a_431dc557",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5634
      },
      "writtenOn": "2021-10-19T17:09:07Z",
      "side": 1,
      "message": "Don\u0027t +1 this one (yet). Make commentary on the design choices.\n",
      "revId": "5bf9cbb84a048f9ab937d99d86afa8da3f8c524d",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9107e77b_da5807c8",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 6720
      },
      "writtenOn": "2021-10-19T18:37:51Z",
      "side": 1,
      "message": "adding danilchap@ too for input",
      "revId": "5bf9cbb84a048f9ab937d99d86afa8da3f8c524d",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "34f8d75c_a446741e",
        "filename": "api/peer_connection_interface.cc",
        "patchSetId": 1
      },
      "lineNbr": 60,
      "author": {
        "id": 5508
      },
      "writtenOn": "2021-10-20T07:36:09Z",
      "side": 1,
      "message": "remove this default to make sure the method doesn\u0027t compile if someone forgets to update the ToString method after adding to the enum collection.",
      "revId": "5bf9cbb84a048f9ab937d99d86afa8da3f8c524d",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ca5c4528_c4da0869",
        "filename": "api/peer_connection_interface.cc",
        "patchSetId": 1
      },
      "lineNbr": 64,
      "author": {
        "id": 5508
      },
      "writtenOn": "2021-10-20T07:36:09Z",
      "side": 1,
      "message": "same here - this shouldn\u0027t be necessary or the return statement.",
      "revId": "5bf9cbb84a048f9ab937d99d86afa8da3f8c524d",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ee392018_93a4e795",
        "filename": "api/peer_connection_interface.h",
        "patchSetId": 1
      },
      "lineNbr": 183,
      "author": {
        "id": 6720
      },
      "writtenOn": "2021-10-19T18:37:51Z",
      "side": 1,
      "message": "returning a std::string\u0026 seems problematic.\nIt implies a globally constructed object (discouraged or banned), an object that requires synchronization (which global objects partially are too) or an object that may have gone out of scope when returned.\n\nInstead, can we use trivially static string_view objects? (as in, that do not require runtime construction)",
      "revId": "5bf9cbb84a048f9ab937d99d86afa8da3f8c524d",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "76a500ee_ac5d8b30",
        "filename": "api/peer_connection_interface.h",
        "patchSetId": 1
      },
      "lineNbr": 183,
      "author": {
        "id": 5634
      },
      "writtenOn": "2021-10-19T20:26:14Z",
      "side": 1,
      "message": "Yep, a main point of this review is to settle what the best return type is.\n\nreturn an absl::string_view by value, constructing it from a string?\nor find a way to declare a lookup table of string_view valus without requiring a std::map that has to be destructed on program exit? (I tried with a static std::map\u003cPeerConnectionState, std::string\u003e and was told that this required a destructor on program exit, which was a no-no.)",
      "parentUuid": "ee392018_93a4e795",
      "revId": "5bf9cbb84a048f9ab937d99d86afa8da3f8c524d",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8c4f097a_f46ec28c",
        "filename": "api/peer_connection_interface.h",
        "patchSetId": 1
      },
      "lineNbr": 183,
      "author": {
        "id": 5234
      },
      "writtenOn": "2021-10-20T07:02:29Z",
      "side": 1,
      "message": "I think const std::string\u0026 makes sense if\n\n1. It\u0027s convenient for the implementation to back it by a string, e.g.,\n\nstatic const std::string kFoo \u003d \"foo\";  // In local scope\n\nAs far as I\u0027m aware, that kind of globals isn\u0027t discouraged. But not sure if it will be destructed at exit, which we\u0027d like to avoid.\n\n2. Most callers need a std::string, so returning one avoids construction and copy cost.\n\nOtherwise, returning a string_view (with documentation saying that it refers to a data  that lives for ever) is the \"modern\" way.\n\nRegarding avoiding destructors at exit: The standard trick seems to be\n\n// Intentionally leaked\nstatic std::map\u003c...\u003e* map \u003d new std::map\u003c...\u003e ...  // Also in local scope\n\nWill be constructed first time the scope is entered (in a thread-safe way), and never destroyed.",
      "parentUuid": "76a500ee_ac5d8b30",
      "revId": "5bf9cbb84a048f9ab937d99d86afa8da3f8c524d",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "16b2ded9_fc4a819c",
        "filename": "api/peer_connection_interface.h",
        "patchSetId": 1
      },
      "lineNbr": 183,
      "author": {
        "id": 5087
      },
      "writtenOn": "2021-10-20T07:25:45Z",
      "side": 1,
      "message": "I like the absl::string_view on static storage strings and delegate the conversion to std::string if needed (is it in this case? IIUC this is mostly for logs right?)\n\nI am not sure we should add maps and things that dynamically allocate memory and require a lookup.",
      "parentUuid": "8c4f097a_f46ec28c",
      "revId": "5bf9cbb84a048f9ab937d99d86afa8da3f8c524d",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "87993063_e99a21a1",
        "filename": "api/peer_connection_interface.h",
        "patchSetId": 1
      },
      "lineNbr": 183,
      "author": {
        "id": 5508
      },
      "writtenOn": "2021-10-20T07:30:45Z",
      "side": 1,
      "message": "\"static Foo foo\" is a singleton pattern, which is discouraged. Since the type (std::string) is complex, it\u0027s a different thing than if we were talking about char[]. It also adds implicit global locking and atexit code.\n\nSo for this case it\u0027s not necessary (since the data is known at compile time), besides the above, it\u0027s also inefficient because of allocating additional heap memory for data that already exists in the data section. So I think std::string is a no-go.\n\nI also think that constructing a std::map for this is wasteful. A ToString method for constant enums has *all* the data available at compile time so there shouldn\u0027t be any need to construct a map at compile time and take on additional heap allocations (a std::map isn\u0027t cheap).\n\nI suggest we use absl::string_view as the return type, much like danil has already done for rtp header extension constants.\n\nFor converting a collection of enums to a string_view, we can either\n* have a switch statement inside a ToString() method on the enum values and return a literal.\n\n  absl::string_view ToString(FooEnum f) {\n    switch (f) {\n      case kF1:\n        return \"F1\";\n      // no default label.\n    }\n    // no return statement here.\n  }\n\n* or have a simple static array of const char* with the strings.\n\n  namespace {\n  // Assumes contiguous integral enum type Foo with a last kMaxFoo.\n  const char* g_foo_names[kMaxFoo] \u003d {\n    \"Foo\",\n    ...\n  };\n  }\n\n  absl::string_view ToString(FooEnum f) {\n    return g_foo_names[f];\n  }",
      "parentUuid": "8c4f097a_f46ec28c",
      "revId": "5bf9cbb84a048f9ab937d99d86afa8da3f8c524d",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "88ede450_adce8708",
        "filename": "api/peer_connection_interface.h",
        "patchSetId": 1
      },
      "lineNbr": 191,
      "author": {
        "id": 5508
      },
      "writtenOn": "2021-10-20T07:36:09Z",
      "side": 1,
      "message": "I don\u0027t see an implementation for these methods actually - is it just for discussion?",
      "revId": "5bf9cbb84a048f9ab937d99d86afa8da3f8c524d",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ecac4c98_d5a951e5",
        "filename": "api/peer_connection_interface.h",
        "patchSetId": 1
      },
      "lineNbr": 202,
      "author": {
        "id": 6720
      },
      "writtenOn": "2021-10-19T18:37:51Z",
      "side": 1,
      "message": "it would be nice to be consistent with the return type. const char* works with printf() style formatting, but std::string doesn\u0027t, so they could easily be mixed up, but with potentially bad results.",
      "revId": "5bf9cbb84a048f9ab937d99d86afa8da3f8c524d",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c07fe062_f10d0175",
        "filename": "api/peer_connection_interface.h",
        "patchSetId": 1
      },
      "lineNbr": 202,
      "author": {
        "id": 5634
      },
      "writtenOn": "2021-10-19T20:26:14Z",
      "side": 1,
      "message": "Consistency will arrive once we decide what we\u0027re consistent on.",
      "parentUuid": "ecac4c98_d5a951e5",
      "revId": "5bf9cbb84a048f9ab937d99d86afa8da3f8c524d",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    }
  ]
}