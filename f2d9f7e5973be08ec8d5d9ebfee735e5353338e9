{
  "comments": [
    {
      "key": {
        "uuid": "36600673_108e39e6",
        "filename": "BUILD.gn",
        "patchSetId": 11
      },
      "lineNbr": 211,
      "author": {
        "id": 5098
      },
      "writtenOn": "2018-01-12T13:35:25Z",
      "side": 1,
      "message": "I liked the rtc_use_builtin_sw_codecs name more, maybe rename this to something similar? E.g. USE_BUILTIN_SW_CODECS.",
      "range": {
        "startLine": 211,
        "startChar": 19,
        "endLine": 211,
        "endChar": 35
      },
      "revId": "f2d9f7e5973be08ec8d5d9ebfee735e5353338e9",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fb80f02a_b0f1943c",
        "filename": "BUILD.gn",
        "patchSetId": 11
      },
      "lineNbr": 211,
      "author": {
        "id": 5249
      },
      "writtenOn": "2018-01-15T15:32:02Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "36600673_108e39e6",
      "range": {
        "startLine": 211,
        "startChar": 19,
        "endLine": 211,
        "endChar": 35
      },
      "revId": "f2d9f7e5973be08ec8d5d9ebfee735e5353338e9",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "35c26f1e_038372b1",
        "filename": "api/video_codecs/video_decoder_factory.h",
        "patchSetId": 11
      },
      "lineNbr": 17,
      "author": {
        "id": 5098
      },
      "writtenOn": "2018-01-12T13:35:25Z",
      "side": 1,
      "message": "I\u0027m not sure why we now need this include, but remove forward declaration in that case.",
      "range": {
        "startLine": 17,
        "startChar": 0,
        "endLine": 17,
        "endChar": 43
      },
      "revId": "f2d9f7e5973be08ec8d5d9ebfee735e5353338e9",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "60f18642_b71deeed",
        "filename": "api/video_codecs/video_decoder_factory.h",
        "patchSetId": 11
      },
      "lineNbr": 17,
      "author": {
        "id": 5249
      },
      "writtenOn": "2018-01-15T15:32:02Z",
      "side": 1,
      "message": "I got a warning to add these at some point, but now it seems it works to remove them. Removed.",
      "parentUuid": "35c26f1e_038372b1",
      "range": {
        "startLine": 17,
        "startChar": 0,
        "endLine": 17,
        "endChar": 43
      },
      "revId": "f2d9f7e5973be08ec8d5d9ebfee735e5353338e9",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "48c3cdaf_999e92ca",
        "filename": "media/engine/webrtcvideoengine.h",
        "patchSetId": 11
      },
      "lineNbr": 99,
      "author": {
        "id": 5098
      },
      "writtenOn": "2018-01-12T13:35:25Z",
      "side": 1,
      "message": "If we name the variable USE_BUILTIN_SW_CODECS we can avoid the double negation and it reads easier.",
      "range": {
        "startLine": 99,
        "startChar": 0,
        "endLine": 99,
        "endChar": 31
      },
      "revId": "f2d9f7e5973be08ec8d5d9ebfee735e5353338e9",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "77807ff7_3d22b3ab",
        "filename": "media/engine/webrtcvideoengine.h",
        "patchSetId": 11
      },
      "lineNbr": 99,
      "author": {
        "id": 5249
      },
      "writtenOn": "2018-01-15T15:32:02Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "48c3cdaf_999e92ca",
      "range": {
        "startLine": 99,
        "startChar": 0,
        "endLine": 99,
        "endChar": 31
      },
      "revId": "f2d9f7e5973be08ec8d5d9ebfee735e5353338e9",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1c217933_a6c69aa2",
        "filename": "modules/video_coding/codec_database.cc",
        "patchSetId": 11
      },
      "lineNbr": 470,
      "author": {
        "id": 5098
      },
      "writtenOn": "2018-01-12T13:35:25Z",
      "side": 1,
      "message": "Hmm, why do we need this?",
      "range": {
        "startLine": 467,
        "startChar": 0,
        "endLine": 470,
        "endChar": 5
      },
      "revId": "f2d9f7e5973be08ec8d5d9ebfee735e5353338e9",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "15590801_5de23bbc",
        "filename": "modules/video_coding/codec_database.cc",
        "patchSetId": 11
      },
      "lineNbr": 470,
      "author": {
        "id": 5249
      },
      "writtenOn": "2018-01-15T15:32:02Z",
      "side": 1,
      "message": "Not sure actually. I inherited it from https://webrtc-review.googlesource.com/c/src/+/29203/2/modules/video_coding/codec_database.cc :) I guess it could be nice to raise an exception here instead of later in the code if there is no external codec available and we\u0027re building without SW codecs, but seems unnecessary to add an extra ifdef section for this. I\u0027ll remove it.",
      "parentUuid": "1c217933_a6c69aa2",
      "range": {
        "startLine": 467,
        "startChar": 0,
        "endLine": 470,
        "endChar": 5
      },
      "revId": "f2d9f7e5973be08ec8d5d9ebfee735e5353338e9",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "34c5c5ca_a78bad7f",
        "filename": "modules/video_coding/video_codec_initializer.cc",
        "patchSetId": 11
      },
      "lineNbr": 65,
      "author": {
        "id": 5098
      },
      "writtenOn": "2018-01-12T13:35:25Z",
      "side": 1,
      "message": "What\u0027s the dependency on libvpx here and is it safe to remove? It looks generic.",
      "range": {
        "startLine": 65,
        "startChar": 0,
        "endLine": 65,
        "endChar": 31
      },
      "revId": "f2d9f7e5973be08ec8d5d9ebfee735e5353338e9",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d48a0d69_84784121",
        "filename": "modules/video_coding/video_codec_initializer.cc",
        "patchSetId": 11
      },
      "lineNbr": 65,
      "author": {
        "id": 5249
      },
      "writtenOn": "2018-01-15T15:32:02Z",
      "side": 1,
      "message": "The issue is that ScreenshareTemporalLayersFactory (screenshare_layers.cc) and TemporalLayersFactory (default_temporal_layers.cc) are in the webrtc_vp8 target, because they use the vpx_codec_enc_cfg_t struct from libvpx.\n\nAnother possibility is to do the #ifdefs in those files instead and move them to some other target, like the webrtc_vp8_helpers target we had before.",
      "parentUuid": "34c5c5ca_a78bad7f",
      "range": {
        "startLine": 65,
        "startChar": 0,
        "endLine": 65,
        "endChar": 31
      },
      "revId": "f2d9f7e5973be08ec8d5d9ebfee735e5353338e9",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4f0e4f43_fd2f5dcc",
        "filename": "modules/video_coding/video_codec_initializer.cc",
        "patchSetId": 11
      },
      "lineNbr": 65,
      "author": {
        "id": 5098
      },
      "writtenOn": "2018-01-18T15:20:05Z",
      "side": 1,
      "message": "I see, it\u0027s the thing you have showed me before. The temporal layer thing looks generic and usable from a VP8 HW codec. It feels like the straight forward approach for breaking this dependency would be to make these changes (preferable in a separate CL):\n\nIn modules/video_coding/codecs/vp8/temporal_layers.h:\n\nadd this:\nstruct Vp8EncoderConfig {\n  unsigned int ts_target_bitrate[5];\n  unsigned int ts_rate_decimator[5];\n  unsigned int ts_number_layers;\n  unsigned int ts_periodicity;\n  unsigned int ts_layer_id[16];\n  unsigned int rc_target_bitrate;\n  unsigned int rc_min_quantizer;\n  unsigned int rc_max_quantizer;\n};\n\nand change\nvirtual bool UpdateConfiguration(vpx_codec_enc_cfg_t* cfg) \u003d 0;\nto\nvirtual bool UpdateConfiguration(Vp8EncoderConfig* cfg) \u003d 0;\n\nIn some helper file for modules/video_coding/codecs/ vp8_impl.h/vp9_impl.h:\n\nadd this helper function for constructing a Vp8EncoderConfig from the vpx config:\nstatic Vp8EncoderConfig GetEncoderConfig(const vpx_codec_enc_cfg\u0026 vpx_config) {\n  Vp8EncoderConfig config;\n  config.ts_number_layers \u003d vpx_config.ts_number_layers;\n  ...\n  return config;\n}\n\nand this for filling it in:\nstatic void FillInEncoderConfig(vpx_codec_enc_cfg* vpx_config, const Vp8EncoderConfig\u0026 config) {\n  vpx_config-\u003ets_number_layers \u003d config.ts_number_layers;\n  ...\n}\n\nthen we should be able to make a function like this that is identical to the old behavior: \nstatic bool UpdateVpxConfiguration(TemporalLayers* temporal_layers, vpx_codec_enc_cfg_t* cfg) {\n  Vp8EncoderConfig config \u003d GetEncoderConfig(cfg);\n  const bool res \u003d temporal_layers-\u003eUpdateConfiguration(config);\n  FillInEncoderConfig(cfg, config);\n  return res;\n}\n\nand in vp8_impl and vp9_impl we can change the call sites from\ntemporal_layers-\u003eUpdateConfiguration(cfg)\nto\nUpdateVpxConfiguration(temporal_layers, cfg);\n\nMaybe make a CL like that and throw it to sprang@.",
      "parentUuid": "d48a0d69_84784121",
      "range": {
        "startLine": 65,
        "startChar": 0,
        "endLine": 65,
        "endChar": 31
      },
      "revId": "f2d9f7e5973be08ec8d5d9ebfee735e5353338e9",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "275bf353_36f233ff",
        "filename": "modules/video_coding/video_codec_initializer.cc",
        "patchSetId": 11
      },
      "lineNbr": 65,
      "author": {
        "id": 5249
      },
      "writtenOn": "2018-01-19T14:37:06Z",
      "side": 1,
      "message": "I have sent a preparing CL at https://webrtc-review.googlesource.com/c/src/+/41280",
      "parentUuid": "4f0e4f43_fd2f5dcc",
      "range": {
        "startLine": 65,
        "startChar": 0,
        "endLine": 65,
        "endChar": 31
      },
      "revId": "f2d9f7e5973be08ec8d5d9ebfee735e5353338e9",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d00e51dd_98d1f4eb",
        "filename": "modules/video_coding/video_codec_initializer.cc",
        "patchSetId": 11
      },
      "lineNbr": 65,
      "author": {
        "id": 5249
      },
      "writtenOn": "2018-01-25T13:00:21Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "275bf353_36f233ff",
      "range": {
        "startLine": 65,
        "startChar": 0,
        "endLine": 65,
        "endChar": 31
      },
      "revId": "f2d9f7e5973be08ec8d5d9ebfee735e5353338e9",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "07124776_edf12af7",
        "filename": "modules/video_coding/video_codec_initializer.cc",
        "patchSetId": 11
      },
      "lineNbr": 103,
      "author": {
        "id": 5098
      },
      "writtenOn": "2018-01-12T13:35:25Z",
      "side": 1,
      "message": "This also looks generic.",
      "range": {
        "startLine": 103,
        "startChar": 0,
        "endLine": 103,
        "endChar": 31
      },
      "revId": "f2d9f7e5973be08ec8d5d9ebfee735e5353338e9",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b9144568_0d83bb53",
        "filename": "modules/video_coding/video_codec_initializer.cc",
        "patchSetId": 11
      },
      "lineNbr": 103,
      "author": {
        "id": 5249
      },
      "writtenOn": "2018-01-15T15:32:02Z",
      "side": 1,
      "message": "Same as above: SimulcastRateAllocator uses the TemporalLayersFactory, and therefore has to be in the webrtc_vp8 target.",
      "parentUuid": "07124776_edf12af7",
      "range": {
        "startLine": 103,
        "startChar": 0,
        "endLine": 103,
        "endChar": 31
      },
      "revId": "f2d9f7e5973be08ec8d5d9ebfee735e5353338e9",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "68ad61c6_f5eeaf0f",
        "filename": "modules/video_coding/video_codec_initializer.cc",
        "patchSetId": 11
      },
      "lineNbr": 103,
      "author": {
        "id": 5249
      },
      "writtenOn": "2018-01-25T13:00:21Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b9144568_0d83bb53",
      "range": {
        "startLine": 103,
        "startChar": 0,
        "endLine": 103,
        "endChar": 31
      },
      "revId": "f2d9f7e5973be08ec8d5d9ebfee735e5353338e9",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "daad4285_2b76b4cc",
        "filename": "sdk/BUILD.gn",
        "patchSetId": 11
      },
      "lineNbr": 345,
      "author": {
        "id": 5098
      },
      "writtenOn": "2018-01-12T13:35:25Z",
      "side": 1,
      "message": "Same here, it would be nice if we could put VP8 and VP9 into separate targets since the long term goal is to make it modular on a target level.",
      "range": {
        "startLine": 344,
        "startChar": 0,
        "endLine": 345,
        "endChar": 70
      },
      "revId": "f2d9f7e5973be08ec8d5d9ebfee735e5353338e9",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5e581eca_5fa34617",
        "filename": "sdk/BUILD.gn",
        "patchSetId": 11
      },
      "lineNbr": 345,
      "author": {
        "id": 5249
      },
      "writtenOn": "2018-01-15T15:32:02Z",
      "side": 1,
      "message": "Yes that sounds doable. The question is what to do with the RTCDefaultVideoEncoderFactory. If those classes exist in this target, and the codecs are in separate targets, I guess we would need some kind of run time check what codecs are available in the factory?",
      "parentUuid": "daad4285_2b76b4cc",
      "range": {
        "startLine": 344,
        "startChar": 0,
        "endLine": 345,
        "endChar": 70
      },
      "revId": "f2d9f7e5973be08ec8d5d9ebfee735e5353338e9",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d479323e_9e0cc25f",
        "filename": "sdk/BUILD.gn",
        "patchSetId": 11
      },
      "lineNbr": 345,
      "author": {
        "id": 5098
      },
      "writtenOn": "2018-01-18T15:20:05Z",
      "side": 1,
      "message": "I see. I think the easiest solution is to just let RTCDefaultVideoEncoderFactory depend on VP8 and VP9 always. So if a client wants to reduce binary size, they have to implement their own factory. The default factory is to simplify for clients that don\u0027t care, like AppRTCMobile.",
      "parentUuid": "5e581eca_5fa34617",
      "range": {
        "startLine": 344,
        "startChar": 0,
        "endLine": 345,
        "endChar": 70
      },
      "revId": "f2d9f7e5973be08ec8d5d9ebfee735e5353338e9",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3d2bb77e_b4f0a688",
        "filename": "sdk/BUILD.gn",
        "patchSetId": 11
      },
      "lineNbr": 345,
      "author": {
        "id": 5249
      },
      "writtenOn": "2018-01-19T14:37:06Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d479323e_9e0cc25f",
      "range": {
        "startLine": 344,
        "startChar": 0,
        "endLine": 345,
        "endChar": 70
      },
      "revId": "f2d9f7e5973be08ec8d5d9ebfee735e5353338e9",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa55ee89_e86d88c6",
        "filename": "sdk/android/BUILD.gn",
        "patchSetId": 11
      },
      "lineNbr": 175,
      "author": {
        "id": 5098
      },
      "writtenOn": "2018-01-12T13:35:25Z",
      "side": 1,
      "message": "Can we move VP8 and VP9 into separate targets?",
      "range": {
        "startLine": 170,
        "startChar": 0,
        "endLine": 175,
        "endChar": 44
      },
      "revId": "f2d9f7e5973be08ec8d5d9ebfee735e5353338e9",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c55195ab_bdbcf38c",
        "filename": "sdk/android/BUILD.gn",
        "patchSetId": 11
      },
      "lineNbr": 175,
      "author": {
        "id": 5249
      },
      "writtenOn": "2018-01-15T15:32:02Z",
      "side": 1,
      "message": "Yes, but same question as for iOS. I suppose there is some runtime reflection available in Java to check which codec classes are available in the SoftwareVideoEncoderFactory etc., or are there any better methods?",
      "parentUuid": "fa55ee89_e86d88c6",
      "range": {
        "startLine": 170,
        "startChar": 0,
        "endLine": 175,
        "endChar": 44
      },
      "revId": "f2d9f7e5973be08ec8d5d9ebfee735e5353338e9",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "59af424d_c3594cdd",
        "filename": "sdk/android/BUILD.gn",
        "patchSetId": 11
      },
      "lineNbr": 175,
      "author": {
        "id": 5098
      },
      "writtenOn": "2018-01-18T15:20:05Z",
      "side": 1,
      "message": "I don\u0027t mean to change any real code, just making the targets in this build file more fine grained and modular. Would it be possible to do something like this:\n\ngenerate_jni(\"generated_vp8_jni\") {\n  sources \u003d [VP8Encoder.java, VP8Decoder.java]\n}\n\nrtc_static_library(\"vp8_jni\") {\n  sources \u003d [\"src/jni/vp8codec.cc\"]\n  deps \u003d [ \":generated_vp8_jni\",\n           \"../../modules/video_coding:webrtc_vp8\"]\n}\n\nrtc_static_library(\"libjingle_peerconnection_jni\") {\n  visibility \u003d [ \"*\" ]\n  public_deps \u003d [\n    \":audio_jni\",\n    \":base_jni\",\n    \":media_jni\",\n    \":peerconnection_jni\",\n    \":video_jni\",\n    \"../../pc:create_pc_factory\",\n  ]\n\n  if (rtc_use_builtin_sw_codecs) {\n    public_deps +\u003d [\":vp8_jni\",\n                    \":vp9_jni\",\n                    \":software_video_factory\",\n                    \":default_video_factory\",\n    ]\n  }\n}\n\nThe end goal would be to have modular targets so that a client can compose its own libjingle_peerconnection_jni without flags and remove targets such as libjingle_peerconnection_datachannelonly_so.",
      "parentUuid": "c55195ab_bdbcf38c",
      "range": {
        "startLine": 170,
        "startChar": 0,
        "endLine": 175,
        "endChar": 44
      },
      "revId": "f2d9f7e5973be08ec8d5d9ebfee735e5353338e9",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fb712296_c1d95854",
        "filename": "sdk/android/BUILD.gn",
        "patchSetId": 11
      },
      "lineNbr": 175,
      "author": {
        "id": 5249
      },
      "writtenOn": "2018-01-19T14:37:06Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "59af424d_c3594cdd",
      "range": {
        "startLine": 170,
        "startChar": 0,
        "endLine": 175,
        "endChar": 44
      },
      "revId": "f2d9f7e5973be08ec8d5d9ebfee735e5353338e9",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "abfbc587_29b11aa8",
        "filename": "sdk/android/src/jni/pc/video.cc",
        "patchSetId": 11
      },
      "lineNbr": 62,
      "author": {
        "id": 5098
      },
      "writtenOn": "2018-01-12T13:35:25Z",
      "side": 1,
      "message": "Is this needed?",
      "range": {
        "startLine": 60,
        "startChar": 0,
        "endLine": 62,
        "endChar": 3
      },
      "revId": "f2d9f7e5973be08ec8d5d9ebfee735e5353338e9",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e949a5d7_6b358626",
        "filename": "sdk/android/src/jni/pc/video.cc",
        "patchSetId": 11
      },
      "lineNbr": 62,
      "author": {
        "id": 5249
      },
      "writtenOn": "2018-01-15T15:32:02Z",
      "side": 1,
      "message": "The only reason I put this here is because I got an error about Java_Context_isEgl14Context being an unused function otherwise. I believe that function is generated, so I don\u0027t know if it\u0027s possible to #ifdef that out?",
      "parentUuid": "abfbc587_29b11aa8",
      "range": {
        "startLine": 60,
        "startChar": 0,
        "endLine": 62,
        "endChar": 3
      },
      "revId": "f2d9f7e5973be08ec8d5d9ebfee735e5353338e9",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "78333d3c_a52bcc60",
        "filename": "sdk/android/src/jni/pc/video.cc",
        "patchSetId": 11
      },
      "lineNbr": 62,
      "author": {
        "id": 5098
      },
      "writtenOn": "2018-01-18T15:20:05Z",
      "side": 1,
      "message": "Aaah, right. Ok, let\u0027s keep it.",
      "parentUuid": "e949a5d7_6b358626",
      "range": {
        "startLine": 60,
        "startChar": 0,
        "endLine": 62,
        "endChar": 3
      },
      "revId": "f2d9f7e5973be08ec8d5d9ebfee735e5353338e9",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    }
  ]
}