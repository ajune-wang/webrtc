{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "f4b6ff2e_fdfc6dd6",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 5634
      },
      "writtenOn": "2022-05-24T11:20:35Z",
      "side": 1,
      "message": "Adding jonaso@ for the heavy mods to AlwaysValidPointer\n",
      "revId": "0c2e5381df235335af16e181bba56248f9a27463",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f7c60382_9a5ad353",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 5613
      },
      "writtenOn": "2022-05-24T11:59:38Z",
      "side": 1,
      "message": "with a loose comment that it would be nice to not specify void\nfor the either-or case.",
      "revId": "0c2e5381df235335af16e181bba56248f9a27463",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b69d5994_7fdc3e54",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 9405
      },
      "writtenOn": "2022-05-24T13:25:32Z",
      "side": 1,
      "message": "Does this description is okay?\n```\nThis template allows holding owned or unowned pointers of type |Interface|.\nThe behavior when it is passed a null pointer depends on the type of class\n|Default|. If class |Default| is not void, an object of class |Default| will\nbe created, which will be deallocated when the pointer is deleted.\nIf class |Default| is void, no default object is created.\nIf you want to always have a valid pointer, you shouldn\u0027t pass void for\nclass |Default|.\n```",
      "parentUuid": "f7c60382_9a5ad353",
      "revId": "0c2e5381df235335af16e181bba56248f9a27463",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e20c4295_4025af20",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 5613
      },
      "writtenOn": "2022-05-24T13:28:46Z",
      "side": 1,
      "message": "good enough for me\nhta@ is expert at nit-picking on comments!",
      "parentUuid": "b69d5994_7fdc3e54",
      "revId": "0c2e5381df235335af16e181bba56248f9a27463",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0f5b0936_6793c7a3",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 5634
      },
      "writtenOn": "2022-05-24T13:35:35Z",
      "side": 1,
      "message": "Touching infrastructure is always fun :-)\n",
      "revId": "0c2e5381df235335af16e181bba56248f9a27463",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e322c9ca_ef0c032b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 5634
      },
      "writtenOn": "2022-05-24T13:35:35Z",
      "side": 1,
      "message": "This sounds good, but the added examples and tests in the actual update will hopefully make it all clear!\n\n(All contructors need to have at least one exercise in always_valid_pointer_unittest.cc, or I\u0027m unhappy!)",
      "parentUuid": "e20c4295_4025af20",
      "revId": "0c2e5381df235335af16e181bba56248f9a27463",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "67072f4a_92fa034d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 9405
      },
      "writtenOn": "2022-05-24T13:57:49Z",
      "side": 1,
      "message": "Done ðŸ˜Š",
      "parentUuid": "e322c9ca_ef0c032b",
      "revId": "0c2e5381df235335af16e181bba56248f9a27463",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f76ddb2c_cb6d95e5",
        "filename": "rtc_base/memory/always_valid_pointer.h",
        "patchSetId": 7
      },
      "lineNbr": 25,
      "author": {
        "id": 5613
      },
      "writtenOn": "2022-05-24T11:59:38Z",
      "side": 1,
      "message": "Got use case, seems fine.\n\nNot 100% sure I like the \"interface\",\ncould we add a template specialization, for the \"void\" case ?\nNot sure how that would look though :(",
      "range": {
        "startLine": 25,
        "startChar": 6,
        "endLine": 25,
        "endChar": 24
      },
      "revId": "0c2e5381df235335af16e181bba56248f9a27463",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b2da386f_0d54181e",
        "filename": "rtc_base/memory/always_valid_pointer.h",
        "patchSetId": 7
      },
      "lineNbr": 25,
      "author": {
        "id": 9405
      },
      "writtenOn": "2022-05-24T12:18:32Z",
      "side": 1,
      "message": "Partial class template specialization for \u003cInterface, void\u003e seems fine.\nDo you want to change the name of the template parameter \u0027Interface\u0027?",
      "parentUuid": "f76ddb2c_cb6d95e5",
      "range": {
        "startLine": 25,
        "startChar": 6,
        "endLine": 25,
        "endChar": 24
      },
      "revId": "0c2e5381df235335af16e181bba56248f9a27463",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    }
  ]
}