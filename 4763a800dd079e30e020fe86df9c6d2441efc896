{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "cf3ba3ce_994298a8",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 5634
      },
      "writtenOn": "2024-08-04T06:55:04Z",
      "side": 1,
      "message": "Looks uncontroversial. Do wonder what the underlying cause for that UTF-8 thing was....",
      "revId": "4763a800dd079e30e020fe86df9c6d2441efc896",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e7da546a_88208d9c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 3350241
      },
      "writtenOn": "2024-08-05T15:56:57Z",
      "side": 1,
      "message": "Yeah. I wonder if MBSTRING_ASC would be more correct since then strlen would be equal to size. But in practice OpenSSL is not used in Chrome and we only pass \"webrtc\" as common name outside of unit tests which use fancy cnames like \"client\" and \"server\" ;-)\n\nMaybe davidben@ knows (and I need a second +1 anyway) but it seems boringssl just considers this field a bytestring...",
      "parentUuid": "cf3ba3ce_994298a8",
      "revId": "4763a800dd079e30e020fe86df9c6d2441efc896",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "001eeb5a_4b3daa64",
        "filename": "rtc_base/openssl_certificate.cc",
        "patchSetId": 7
      },
      "lineNbr": 99,
      "author": {
        "id": 5602
      },
      "writtenOn": "2024-08-05T18:06:54Z",
      "side": 1,
      "message": "Optional nitpick: Although C++11 guarantees that `c_str()` is the same thing as `data()`, I generally prefer to use `data()` when paired with `size()` and `c_str()` when paired with an implicit `strlen`.\n\n\n\n```suggestion\n                                  (unsigned char*)params.common_name.data(),\n```",
      "range": {
        "startLine": 99,
        "startChar": 69,
        "endLine": 99,
        "endChar": 74
      },
      "revId": "4763a800dd079e30e020fe86df9c6d2441efc896",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "58b13981_c578df0f",
        "filename": "rtc_base/openssl_certificate.cc",
        "patchSetId": 7
      },
      "lineNbr": 99,
      "author": {
        "id": 3350241
      },
      "writtenOn": "2024-08-06T03:30:18Z",
      "side": 1,
      "message": "Done (manually)",
      "parentUuid": "001eeb5a_4b3daa64",
      "range": {
        "startLine": 99,
        "startChar": 69,
        "endLine": 99,
        "endChar": 74
      },
      "revId": "4763a800dd079e30e020fe86df9c6d2441efc896",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8ce198f9_b77105f7",
        "filename": "rtc_base/openssl_certificate.cc",
        "patchSetId": 7
      },
      "lineNbr": 100,
      "author": {
        "id": 3350241
      },
      "writtenOn": "2024-08-03T15:01:39Z",
      "side": 1,
      "message": "-1 was \"figure out yourself\" which led to UTF8 decode failures. For the CN \"client\"?!",
      "revId": "4763a800dd079e30e020fe86df9c6d2441efc896",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1169e382_0df9ec34",
        "filename": "rtc_base/openssl_certificate.cc",
        "patchSetId": 7
      },
      "lineNbr": 100,
      "author": {
        "id": 5602
      },
      "writtenOn": "2024-08-05T18:06:54Z",
      "side": 1,
      "message": "Hmm, that\u0027s a bit surprising. I mean, the change is a good one, but `-1` should only get it wrong if `params.common_name` had an embedded NUL, in which case the string would truncate.\n\nIs it possible something else was going on here?",
      "parentUuid": "8ce198f9_b77105f7",
      "revId": "4763a800dd079e30e020fe86df9c6d2441efc896",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6a37abf1_103a734b",
        "filename": "rtc_base/openssl_certificate.cc",
        "patchSetId": 7
      },
      "lineNbr": 100,
      "author": {
        "id": 3350241
      },
      "writtenOn": "2024-08-06T03:30:18Z",
      "side": 1,
      "message": "not quite clear, this one caused DtlsTransportTest.TestTransferDtls to crash since the error caused no cert to be returned and then this was not handled all the way up to the unit tests (hence the extra DCHECKs now)",
      "parentUuid": "1169e382_0df9ec34",
      "revId": "4763a800dd079e30e020fe86df9c6d2441efc896",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7c71204e_656974db",
        "filename": "rtc_base/openssl_certificate.cc",
        "patchSetId": 7
      },
      "lineNbr": 100,
      "author": {
        "id": 5602
      },
      "writtenOn": "2024-08-06T16:02:02Z",
      "side": 1,
      "message": "Can you:\n1. Print the value of `params.common_name`. Is it actually \"client\"?\n2. Trace through where in OpenSSL is `X509_NAME_add_entry_by_NID` failing?",
      "parentUuid": "6a37abf1_103a734b",
      "revId": "4763a800dd079e30e020fe86df9c6d2441efc896",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "66623c2e_d45f0d73",
        "filename": "rtc_base/openssl_certificate.cc",
        "patchSetId": 7
      },
      "lineNbr": 100,
      "author": {
        "id": 3350241
      },
      "writtenOn": "2024-08-07T18:10:10Z",
      "side": 1,
      "message": "it is \"client\". Will try tracing deep into openssl next...",
      "parentUuid": "7c71204e_656974db",
      "revId": "4763a800dd079e30e020fe86df9c6d2441efc896",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "da204262_33514f99",
        "filename": "rtc_base/openssl_identity.cc",
        "patchSetId": 7
      },
      "lineNbr": 83,
      "author": {
        "id": 3350241
      },
      "writtenOn": "2024-08-03T15:01:39Z",
      "side": 1,
      "message": "DCHECK maybe since this is a configuration error?",
      "revId": "4763a800dd079e30e020fe86df9c6d2441efc896",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fa7a5562_52e547b2",
        "filename": "rtc_base/openssl_identity.cc",
        "patchSetId": 7
      },
      "lineNbr": 83,
      "author": {
        "id": 5634
      },
      "writtenOn": "2024-08-04T06:55:04Z",
      "side": 1,
      "message": "Let\u0027s not introduce new DCHECKs at this time....",
      "parentUuid": "da204262_33514f99",
      "revId": "4763a800dd079e30e020fe86df9c6d2441efc896",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "423fc991_453bc343",
        "filename": "rtc_base/openssl_identity.cc",
        "patchSetId": 7
      },
      "lineNbr": 124,
      "author": {
        "id": 3350241
      },
      "writtenOn": "2024-08-03T15:01:39Z",
      "side": 1,
      "message": "This is something where I wonder how the old stuff even worked.",
      "revId": "4763a800dd079e30e020fe86df9c6d2441efc896",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e14c33f4_a094cc33",
        "filename": "rtc_base/openssl_identity.cc",
        "patchSetId": 7
      },
      "lineNbr": 124,
      "author": {
        "id": 5634
      },
      "writtenOn": "2024-08-04T06:55:04Z",
      "side": 1,
      "message": "Seems to have depended on getting a quite specific error when hitting BIO_eof....",
      "parentUuid": "423fc991_453bc343",
      "revId": "4763a800dd079e30e020fe86df9c6d2441efc896",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4f72b381_3c174d94",
        "filename": "rtc_base/openssl_identity.cc",
        "patchSetId": 7
      },
      "lineNbr": 124,
      "author": {
        "id": 5602
      },
      "writtenOn": "2024-08-05T18:06:54Z",
      "side": 1,
      "message": "I believe the old version was correct. `BIO_eof` won\u0027t do the right thing if there is trailing data after the last PEM blob.\n\nPEM is a kind of horrible format, that comes out of email. It\u0027s intended to be embedded inside other text, so PEM parsers will just skip over non-PEM data, and also PEM data of an unexpected type. This means that you might have a bunch of whitespace, whole paragraphs of text, or even a private key, all of which you\u0027re meant to skip over. If that bit to skip over is at the bottom, `BIO_eof` will be false (we\u0027re not yet at the end of the buffer), but `PEM_read_bio_X509` will read data and \"successfully\" return nothing.\n\nThe way to distinguish between the two cases (fatal error vs got to the end) in this API is to check for `PEM_R_NO_START_LINE`.\n\n(This API is kind of terrible. I still need to go document pem.h in BoringSSL...)\n\nWhat was the motivation for this change? Was the old one not working?",
      "parentUuid": "e14c33f4_a094cc33",
      "revId": "4763a800dd079e30e020fe86df9c6d2441efc896",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "832b95e1_28dd4e2a",
        "filename": "rtc_base/openssl_identity.cc",
        "patchSetId": 7
      },
      "lineNbr": 124,
      "author": {
        "id": 3350241
      },
      "writtenOn": "2024-08-06T03:30:18Z",
      "side": 1,
      "message": "Without this SSLStreamAdapterTestDTLSCertChain.TwoCertHandshake blows up (for context, OpenSSL support is in a sad state with no bots etc and I poked in this with a stick)\n\nERR_GET_LIB(err) is ERR_LIB_PEM but\nERR_GET_REASON(err) PEM_R_UNSUPPORTED_PUBLIC_KEY_TYPE (110)\nnot PEM_R_NO_START_LINE (108) which is what the code is looking for.\nBIO_eof is true at that point. I suspect that OpenSSL may have changed behavior between 1.x and 3.x but in a case which might be considered \"meh\" since one should not try to read from a EOF BIO. \n\nThe code is not designed to ignore empty lines as would return on the first blank line when a certificate (chain) file with blank lines inserted between keys were to be used?",
      "parentUuid": "4f72b381_3c174d94",
      "revId": "4763a800dd079e30e020fe86df9c6d2441efc896",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f6c5273b_c9bb2d35",
        "filename": "rtc_base/openssl_identity.cc",
        "patchSetId": 7
      },
      "lineNbr": 124,
      "author": {
        "id": 5602
      },
      "writtenOn": "2024-08-06T16:02:02Z",
      "side": 1,
      "message": "Like the other comment, it sounds like there is something more complex going on and needs more investigation. The changes to this file are not a fix but a regression.\n\nWhat exactly is the input here?\n\n\u003e PEM_R_UNSUPPORTED_PUBLIC_KEY_TYPE\n\nGetting PEM_R_UNSUPPORTED_PUBLIC_KEY_TYPE on EOF doesn\u0027t make any sense at all. It sounds like there may be something else going on here.\n\n\u003e but in a case which might be considered \"meh\" since one should not try to read from a EOF BIO\n\nNo, it is reasonable to try to read a PEM block from an EOF BIO. Per the previous comment, EOF detection when iterating over PEM needs to be done inside the PEM library rather than outside. The PEM_R_NO_START_LINE loop appears throughout the ecosystem and within OpenSSL itself. If they broke it, that would absolutely be considered a regression.\n\n\u003e The code is not designed to ignore empty lines as would return on the first blank line when a certificate (chain) file with blank lines inserted between keys were to be used?\n\nThe code, both before and after the CL, *is* designed to ignore empty lines and indeed all non-PEM data because that is how the `PEM_read_*` functions work. That\u0027s how the PEM format itself works. The only difference is that the old version correctly ignored trailing data in the same way as leading and interspersed data, while the new version has a bug in how it handles trailing data.",
      "parentUuid": "832b95e1_28dd4e2a",
      "revId": "4763a800dd079e30e020fe86df9c6d2441efc896",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "34c45073_a16b818b",
        "filename": "rtc_base/openssl_identity.cc",
        "patchSetId": 7
      },
      "lineNbr": 124,
      "author": {
        "id": 3350241
      },
      "writtenOn": "2024-08-07T18:10:10Z",
      "side": 1,
      "message": "this one is quite confusing.... I added this:\n      RTC_LOG(LS_ERROR) \u003c\u003c \"Failed to parse certificate from PEM string: \"\n              \u003c\u003c ERR_reason_error_string(err)\n                \u003c\u003c \" E\u003d\" \u003c\u003c ERR_GET_LIB(err) \u003c\u003c \"+\" \u003c\u003c ERR_GET_REASON(err)\n                \u003c\u003c \" libpem? \" \u003c\u003c (ERR_GET_LIB(err) \u003d\u003d ERR_LIB_PEM)\n                \u003c\u003c \" start? \" \u003c\u003c (ERR_GET_REASON(err) \u003d\u003d PEM_R_NO_START_LINE)\n                \u003c\u003c \" PEM_R_NO_START_LINE\u003d\" \u003c\u003c PEM_R_NO_START_LINE;\nand it showed the following:\n  (openssl_identity.cc:133): Failed to parse certificate from PEM string: NO_START_LINE E\u003d9+110 libpem? 1 start? 0 PEM_R_NO_START_LINE\u003d108\n  \nso the reason_error_string says it is NO_START_LINE but the error code different. Smells like an issue with my environment where the library and the header do not match...",
      "parentUuid": "f6c5273b_c9bb2d35",
      "revId": "4763a800dd079e30e020fe86df9c6d2441efc896",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "805043b8_1c51ed51",
        "filename": "rtc_base/openssl_identity.cc",
        "patchSetId": 7
      },
      "lineNbr": 124,
      "author": {
        "id": 5602
      },
      "writtenOn": "2024-08-07T18:26:54Z",
      "side": 1,
      "message": "\u003e Smells like an issue with my environment where the library and the header do not match...\n\nOh! That could explain the -1 issue too. If you\u0027re building against OpenSSL headers but linking against BoringSSL, we bumped that len parameter from an `int` to an `ssize_t` to fix some overflow problems.\n\nOn most 64-bit calling conventions, an `int` parameter (32-bit) is passed in a 64-bit register (all registers are 64-bit), but the upper 32 bits are undefined.\n\nIf your compiler generated code assuming `int`, but then passed it into a function that expected `ssize_t`, the compiler could left the upper half some arbitrary bit pattern, and then the `ssize_t`-expecting code would misinterpret it as a giant length.",
      "parentUuid": "34c45073_a16b818b",
      "revId": "4763a800dd079e30e020fe86df9c6d2441efc896",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    }
  ]
}