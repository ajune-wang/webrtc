{
  "comments": [
    {
      "key": {
        "uuid": "ca25985c_16d72749",
        "filename": "modules/audio_coding/neteq/tools/rtc_event_log_source.cc",
        "patchSetId": 1
      },
      "lineNbr": 60,
      "author": {
        "id": 7015
      },
      "writtenOn": "2018-10-10T09:39:48Z",
      "side": 1,
      "message": "nit: audio_output_index_++",
      "range": {
        "startLine": 60,
        "startChar": 42,
        "endLine": 60,
        "endChar": 61
      },
      "revId": "72dc71b2b141362970de2b3386dd229a98e4d253",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ac1be005_b1d65ea5",
        "filename": "modules/audio_coding/neteq/tools/rtc_event_log_source.cc",
        "patchSetId": 1
      },
      "lineNbr": 67,
      "author": {
        "id": 7015
      },
      "writtenOn": "2018-09-28T13:56:36Z",
      "side": 1,
      "message": "I am not denying the elegancy of these new codes. But how functionally different is it from just replacing old line 59 with the new Packet constructor?\n\nIMO, this should eventually be merged with https://cs.chromium.org/chromium/src/third_party/webrtc/rtc_tools/event_log_visualizer/analyzer.cc?sq\u003dpackage:chromium\u0026dr\u003dCSs\u0026q\u003danalyzer.cc\u0026g\u003d0\u0026l\u003d1601\n\nso the effort of refactoring it should be inline with \n\nI think the only functional difference between this and NetEqStreamInput in analyzer.cc is that this one allows multiple SSRC as input, which may be invalidated by itself.\n\nIf you think these new codes will help in\nhttps://cs.chromium.org/chromium/src/third_party/webrtc/rtc_tools/event_log_visualizer/analyzer.cc?sq\u003dpackage:chromium\u0026dr\u003dCSs\u0026q\u003danalyzer.cc\u0026g\u003d0\u0026l\u003d1601\n\nlet\u0027s do it. Otherwise I would like to change this as minimal as possible.",
      "range": {
        "startLine": 67,
        "startChar": 24,
        "endLine": 67,
        "endChar": 32
      },
      "revId": "72dc71b2b141362970de2b3386dd229a98e4d253",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ba8a068b_9a5e25d4",
        "filename": "modules/audio_coding/neteq/tools/rtc_event_log_source.cc",
        "patchSetId": 1
      },
      "lineNbr": 67,
      "author": {
        "id": 5150
      },
      "writtenOn": "2018-09-28T14:30:09Z",
      "side": 1,
      "message": "The main point of the CL is to get rid of the deprecated parsing functions, i.e.  GetNumberOfEvents(), GetEventType(index), GetTimestamp(index), GetRtpHeader(index, ...) and GetAudioPlayout(index). This is urgent as it is blocking other work. Just using the new Packet constructor would not solve the issue.\n\nI agree that it would be nice to merge this with NetEqStreamInput. I don\u0027t know whether support for multiple SSRCs is needed, but when I asked in the past, people thought it would be safer to keep it. I decided to minimize functional changes at the cost of the slightly larger code changes below.",
      "parentUuid": "ac1be005_b1d65ea5",
      "range": {
        "startLine": 67,
        "startChar": 24,
        "endLine": 67,
        "endChar": 32
      },
      "revId": "72dc71b2b141362970de2b3386dd229a98e4d253",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "76547483_32931fc9",
        "filename": "modules/audio_coding/neteq/tools/rtc_event_log_source.cc",
        "patchSetId": 1
      },
      "lineNbr": 73,
      "author": {
        "id": 7015
      },
      "writtenOn": "2018-10-10T09:39:48Z",
      "side": 1,
      "message": "filter does not work since it is defined after OpenFile()",
      "range": {
        "startLine": 73,
        "startChar": 6,
        "endLine": 73,
        "endChar": 22
      },
      "revId": "72dc71b2b141362970de2b3386dd229a98e4d253",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9e29c03a_a8c70a47",
        "filename": "modules/audio_coding/neteq/tools/rtc_event_log_source.cc",
        "patchSetId": 1
      },
      "lineNbr": 87,
      "author": {
        "id": 7015
      },
      "writtenOn": "2018-10-04T20:35:01Z",
      "side": 1,
      "message": "I think the problem is that audio_outputs_ and rtp_packets_ are no longer ordered in time.",
      "range": {
        "startLine": 87,
        "startChar": 8,
        "endLine": 87,
        "endChar": 22
      },
      "revId": "72dc71b2b141362970de2b3386dd229a98e4d253",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "80413b1b_9f60e1ac",
        "filename": "modules/audio_coding/neteq/tools/rtc_event_log_source.cc",
        "patchSetId": 1
      },
      "lineNbr": 87,
      "author": {
        "id": 5150
      },
      "writtenOn": "2018-10-05T08:33:36Z",
      "side": 1,
      "message": "The event_processor should go through the events in timestamp order, and repeatedly call |handle_audio| or |handle_rtp| for the earliest remaining event. Please let me know if this doesn\u0027t happen; it would be a bug.",
      "parentUuid": "9e29c03a_a8c70a47",
      "range": {
        "startLine": 87,
        "startChar": 8,
        "endLine": 87,
        "endChar": 22
      },
      "revId": "72dc71b2b141362970de2b3386dd229a98e4d253",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "72b33239_4e81a4c3",
        "filename": "modules/audio_coding/neteq/tools/rtc_event_log_source.cc",
        "patchSetId": 1
      },
      "lineNbr": 87,
      "author": {
        "id": 7015
      },
      "writtenOn": "2018-10-05T11:24:12Z",
      "side": 1,
      "message": "I mean it looks like we first iterate on ssrc then on events.\n\nBut audio_outputs_ and rtp_packets_ want to have ssrc interleaved (and time must be monotonic)",
      "parentUuid": "80413b1b_9f60e1ac",
      "range": {
        "startLine": 87,
        "startChar": 8,
        "endLine": 87,
        "endChar": 22
      },
      "revId": "72dc71b2b141362970de2b3386dd229a98e4d253",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a559a17b_3e499ac2",
        "filename": "modules/audio_coding/neteq/tools/rtc_event_log_source.cc",
        "patchSetId": 1
      },
      "lineNbr": 87,
      "author": {
        "id": 5150
      },
      "writtenOn": "2018-10-05T11:36:08Z",
      "side": 1,
      "message": "Correct, we iterate over each SSRC and insert those events in the event_processor grouped by SSRC (not by timestamp). The ProcessEventsInOrder call will then go over all of the events in timestamp order (regardless of SSRC or even  event type) and insert them into rtp_packets_ and audio_outputs_ respectively sorted by timestamp.\n\nIn fact, the whole purpose of the EventProcessor class is to merge several lists that are individually sorted by timestamps into a single \"virtual\" list containing all the events sorted by timestamp.",
      "parentUuid": "72b33239_4e81a4c3",
      "range": {
        "startLine": 87,
        "startChar": 8,
        "endLine": 87,
        "endChar": 22
      },
      "revId": "72dc71b2b141362970de2b3386dd229a98e4d253",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e186f8fc_f263ad24",
        "filename": "modules/audio_coding/neteq/tools/rtc_event_log_source.cc",
        "patchSetId": 1
      },
      "lineNbr": 87,
      "author": {
        "id": 7015
      },
      "writtenOn": "2018-10-05T11:39:22Z",
      "side": 1,
      "message": "Sorry for my ignorance of EventProcessor, then it is good for sure.",
      "parentUuid": "a559a17b_3e499ac2",
      "range": {
        "startLine": 87,
        "startChar": 8,
        "endLine": 87,
        "endChar": 22
      },
      "revId": "72dc71b2b141362970de2b3386dd229a98e4d253",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    }
  ]
}