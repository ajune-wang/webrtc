{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "0e9352bf_5612b47d",
        "filename": "rtc_base/boringssl_certificate.cc",
        "patchSetId": 18
      },
      "lineNbr": 101,
      "author": {
        "id": 5602
      },
      "writtenOn": "2020-10-30T21:17:17Z",
      "side": 1,
      "message": "Nit/optional: I\u0027d just put these together with ||, but this works too.",
      "revId": "4a554cc994ff68059267b42a6db97cde0c14032e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3dd6d9a5_ba3af7a9",
        "filename": "rtc_base/boringssl_certificate.cc",
        "patchSetId": 18
      },
      "lineNbr": 101,
      "author": {
        "id": 5053
      },
      "writtenOn": "2020-11-04T01:17:01Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0e9352bf_5612b47d",
      "revId": "4a554cc994ff68059267b42a6db97cde0c14032e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dcb50882_f7791abf",
        "filename": "rtc_base/boringssl_identity.cc",
        "patchSetId": 18
      },
      "lineNbr": 146,
      "author": {
        "id": 5602
      },
      "writtenOn": "2020-10-30T21:17:17Z",
      "side": 1,
      "message": "I think you can assume that unsigned char and uint8_t are the same type[*]. BoringSSL already pretty aggressively assumes it. We just write uint8_t in our newer APIs because it\u0027s less typing, and the PEM/X509/ASN1 stuff hasn\u0027t been reworked yet. :-)\n\n[*] This is not actually guaranteed by C, but what type uint8_t is is implementation-defined and every implementation I\u0027ve ever seen makes it a typedef.",
      "range": {
        "startLine": 146,
        "startChar": 26,
        "endLine": 146,
        "endChar": 53
      },
      "revId": "4a554cc994ff68059267b42a6db97cde0c14032e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "25b5fe01_97d7898f",
        "filename": "rtc_base/boringssl_identity.cc",
        "patchSetId": 18
      },
      "lineNbr": 146,
      "author": {
        "id": 5053
      },
      "writtenOn": "2020-11-04T01:17:01Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "dcb50882_f7791abf",
      "range": {
        "startLine": 146,
        "startChar": 26,
        "endLine": 146,
        "endChar": 53
      },
      "revId": "4a554cc994ff68059267b42a6db97cde0c14032e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6de5d0f0_4a9bc507",
        "filename": "rtc_base/openssl_adapter.cc",
        "patchSetId": 18
      },
      "lineNbr": 918,
      "author": {
        "id": 5602
      },
      "writtenOn": "2020-10-30T21:17:17Z",
      "side": 1,
      "message": "It\u0027s still pretty tedious, but here is a somewhat easier version:\n\n  uint8_t *data \u003d nullptr;\n  int length \u003d i2d_X509(X509_STORE_CTX_get_current_cert(store), \u0026data);\n  if (length \u003c 0) {\n    RTC_LOG(LS_ERROR) \u003c\u003c \"Failed to encode X509.\";\n    return ok;\n  }\n  bssl::UniquePtr\u003cuint8_t\u003e owned_data(data);\n  bssl::UniquePtr\u003cCRYPTO_BUFFER\u003e crypto_buffer(CRYPTO_BUFFER_new(\n      data, length, openssl::GetBufferPool()));\n\n(i2d_FOO_bio just calls i2d_FOO and then dumps the data into the BIO. You can usually skip the BIO.)",
      "revId": "4a554cc994ff68059267b42a6db97cde0c14032e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "20fdfe90_1bb7cf1b",
        "filename": "rtc_base/openssl_adapter.cc",
        "patchSetId": 18
      },
      "lineNbr": 918,
      "author": {
        "id": 5053
      },
      "writtenOn": "2020-11-04T01:17:01Z",
      "side": 1,
      "message": "Got it, thanks.",
      "parentUuid": "6de5d0f0_4a9bc507",
      "revId": "4a554cc994ff68059267b42a6db97cde0c14032e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    }
  ]
}