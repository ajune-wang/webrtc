{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "b43272df_653f1387",
        "filename": "/COMMIT_MSG",
        "patchSetId": 9
      },
      "lineNbr": 7,
      "author": {
        "id": 18474
      },
      "writtenOn": "2023-01-27T00:20:09Z",
      "side": 1,
      "message": "NIT: Lines more than 72 chars in commit description",
      "revId": "4038ea18510bc0b10045523f56ed5a8a62561d54",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "77a53eeb_46b38250",
        "filename": "/COMMIT_MSG",
        "patchSetId": 9
      },
      "lineNbr": 7,
      "author": {
        "id": 19629
      },
      "writtenOn": "2023-01-27T16:02:19Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b43272df_653f1387",
      "revId": "4038ea18510bc0b10045523f56ed5a8a62561d54",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9d8c9535_c2ada1b8",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 9
      },
      "lineNbr": 0,
      "author": {
        "id": 18474
      },
      "writtenOn": "2023-01-27T00:20:09Z",
      "side": 1,
      "message": "I think this seems reasonable but I\u0027d like mark to weigh in/a chance to chat with him as to how this might tie into our long-term vision.",
      "revId": "4038ea18510bc0b10045523f56ed5a8a62561d54",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "430e14f2_2bf282ca",
        "filename": "modules/desktop_capture/linux/wayland/shared_screencast_stream.cc",
        "patchSetId": 9
      },
      "lineNbr": 651,
      "author": {
        "id": 18474
      },
      "writtenOn": "2023-01-27T00:20:09Z",
      "side": 1,
      "message": "This is now always creating a new frame, and I think is replicating some of the other logic from the ProcessBuffer code?\n\nAt the very least I think we should re-factor some of the common code paths into a helper method that can take a frame by reference (either from the queue or a new frame).\n\nI\u0027d almost suggested to just always use the queue, but I think one of the things that makes the queue work right now is that because the client is asking for frames, we can be guaranteed that we\u0027re now safe to overwrite the frame that we handed out on the last cycle when needed; but I don\u0027t think we can make this guarantee now. It would be good to understand if we see an increase in memory usage (or at least allocations/de-allocations) now and ways that we might could mitigate that....",
      "range": {
        "startLine": 650,
        "startChar": 0,
        "endLine": 651,
        "endChar": 63
      },
      "revId": "4038ea18510bc0b10045523f56ed5a8a62561d54",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d3518232_4e13a60e",
        "filename": "modules/desktop_capture/linux/wayland/shared_screencast_stream.cc",
        "patchSetId": 9
      },
      "lineNbr": 651,
      "author": {
        "id": 19629
      },
      "writtenOn": "2023-01-27T16:02:19Z",
      "side": 1,
      "message": "I have gone back to using the queue, though I don\u0027t think it is strictly required in this case?\n\nI was under the impression that we were already reallocating when sharing the frame and passing it back to the callback but likely we don\u0027t reallocate the video buffer within the shared frame.",
      "parentUuid": "430e14f2_2bf282ca",
      "range": {
        "startLine": 650,
        "startChar": 0,
        "endLine": 651,
        "endChar": 63
      },
      "revId": "4038ea18510bc0b10045523f56ed5a8a62561d54",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "56b2e9db_3a5b0cb4",
        "filename": "modules/desktop_capture/linux/wayland/shared_screencast_stream.cc",
        "patchSetId": 9
      },
      "lineNbr": 651,
      "author": {
        "id": 18474
      },
      "writtenOn": "2023-01-27T17:46:22Z",
      "side": 1,
      "message": "The queue is not, it just helps with reasoning about allocations. \n\nAs you mention, the queue_.current_frame()-\u003eShare() method creates an object with cloned metadata and a refptr to the same underlying frame data, so we\u0027re allocating a much smaller object; however, I\u0027m not sure we have the same guarantees that the page is done using the frame as we did previously, so I\u0027m not sure if that\u0027s avoidable",
      "parentUuid": "d3518232_4e13a60e",
      "range": {
        "startLine": 650,
        "startChar": 0,
        "endLine": 651,
        "endChar": 63
      },
      "revId": "4038ea18510bc0b10045523f56ed5a8a62561d54",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "198c488f_73f753f6",
        "filename": "modules/desktop_capture/linux/wayland/shared_screencast_stream.cc",
        "patchSetId": 9
      },
      "lineNbr": 651,
      "author": {
        "id": 19629
      },
      "writtenOn": "2023-01-27T19:47:07Z",
      "side": 1,
      "message": "\u003e that the page is done using the frame as we did previously, so I\u0027m not sure if that\u0027s avoidable\n\nI didn\u0027t follow. What does page mean here?\n\nAlso, what is the action item here?",
      "parentUuid": "56b2e9db_3a5b0cb4",
      "range": {
        "startLine": 650,
        "startChar": 0,
        "endLine": 651,
        "endChar": 63
      },
      "revId": "4038ea18510bc0b10045523f56ed5a8a62561d54",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dc2f2aa5_79c9e492",
        "filename": "modules/desktop_capture/linux/wayland/shared_screencast_stream.cc",
        "patchSetId": 9
      },
      "lineNbr": 651,
      "author": {
        "id": 18474
      },
      "writtenOn": "2023-01-27T20:15:37Z",
      "side": 1,
      "message": "In this context page is the client who is receiving frames. I\u0027m not sure if we have any guarantees on when they are done with the frame. With the CaptureFrame call I think the expectation is that they are only holding one frame at that time, so once we return the frame to them we can overwrite the old frame. However, I guess this is existing, becuase ProcessBuffer didn\u0027t take any of this into account already anyway..., so I guess there\u0027s no action item here.\n\nAnother alternative to this approach could be to extend callbacks even more to allow a mechanism to provide the capturer with a frame to write in to, or even just not directly pushing frames, but instead pairing your \"OnFrameCaptureStart\" addition with something like \"OnFrameReady\", which could be used to allow capturers who want real-time frames to immediately query for it instead. Sorry for spitballing ideas here, but I know this is a direction that we long term want to take the capturers in (providing frames when they are ready); but I haven\u0027t had the chance to evaluate the different architectures we could take to do that. I guess I\u0027m fine with just incurring some tech debt in the PipeWire capturer for that to not block you all though :/. @mfoltz@chromium.org FYI.",
      "parentUuid": "198c488f_73f753f6",
      "range": {
        "startLine": 650,
        "startChar": 0,
        "endLine": 651,
        "endChar": 63
      },
      "revId": "4038ea18510bc0b10045523f56ed5a8a62561d54",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6ac1e324_ece669bf",
        "filename": "modules/desktop_capture/linux/wayland/shared_screencast_stream.cc",
        "patchSetId": 9
      },
      "lineNbr": 651,
      "author": {
        "id": 19629
      },
      "writtenOn": "2023-01-27T22:17:45Z",
      "side": 1,
      "message": "\u003e  ProcessBuffer didn\u0027t take any of this into account already anyway..., so I guess there\u0027s no action item here.\n\nThat is my understanding as well. I think similar mechanics apply even to the X11 capturer?\n\n\u003e addition with something like \"OnFrameReady\", which could be used to allow capturers who want real-time frames to immediately query for it instead.\n\nHappy to add it but I am still not quite sure how it guarantees that the callback/page will not hold onto this new frame. Maybe we need to pass the client a callback that it can use to tell webrtc that it is done with the frame? (but then again what prevents the client to hold onto the frame forever?)",
      "parentUuid": "dc2f2aa5_79c9e492",
      "range": {
        "startLine": 650,
        "startChar": 0,
        "endLine": 651,
        "endChar": 63
      },
      "revId": "4038ea18510bc0b10045523f56ed5a8a62561d54",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4cfb1480_85f857e7",
        "filename": "modules/desktop_capture/linux/wayland/shared_screencast_stream.cc",
        "patchSetId": 9
      },
      "lineNbr": 651,
      "author": {
        "id": 18474
      },
      "writtenOn": "2023-01-27T22:28:25Z",
      "side": 1,
      "message": "I think let\u0027s just leave it as-is for now. It\u0027s an existing issue that I think on-demand delivery does not exacerbate (maybe even makes better!)",
      "parentUuid": "6ac1e324_ece669bf",
      "range": {
        "startLine": 650,
        "startChar": 0,
        "endLine": 651,
        "endChar": 63
      },
      "revId": "4038ea18510bc0b10045523f56ed5a8a62561d54",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5829150b_41c1e6b5",
        "filename": "modules/desktop_capture/linux/wayland/shared_screencast_stream.cc",
        "patchSetId": 9
      },
      "lineNbr": 935,
      "author": {
        "id": 18474
      },
      "writtenOn": "2023-01-27T00:20:09Z",
      "side": 1,
      "message": "So this code would turn into something like:\n\nif (callback_) {\n  // Create new frame\n  return CopyCapturedFrameInto(new_frame, updated_src,...)\n}\n\n// grab the queue and check the size then call:\n  return CopyCapturedFrameInto(queue_.current_frame(), ....);",
      "range": {
        "startLine": 914,
        "startChar": 0,
        "endLine": 935,
        "endChar": 0
      },
      "revId": "4038ea18510bc0b10045523f56ed5a8a62561d54",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "016ff0b0_768b5b36",
        "filename": "modules/desktop_capture/linux/wayland/shared_screencast_stream.cc",
        "patchSetId": 9
      },
      "lineNbr": 935,
      "author": {
        "id": 19629
      },
      "writtenOn": "2023-01-27T16:02:19Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "5829150b_41c1e6b5",
      "range": {
        "startLine": 914,
        "startChar": 0,
        "endLine": 935,
        "endChar": 0
      },
      "revId": "4038ea18510bc0b10045523f56ed5a8a62561d54",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b1fb01c1_7f6f8f14",
        "filename": "modules/desktop_capture/linux/wayland/shared_screencast_stream.h",
        "patchSetId": 9
      },
      "lineNbr": 54,
      "author": {
        "id": 18474
      },
      "writtenOn": "2023-01-27T00:20:09Z",
      "side": 1,
      "message": "CRD is calling this method directly and that\u0027s what triggers this code-path to be used?",
      "range": {
        "startLine": 49,
        "startChar": 0,
        "endLine": 54,
        "endChar": 76
      },
      "revId": "4038ea18510bc0b10045523f56ed5a8a62561d54",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "238d953c_e8c2d03a",
        "filename": "modules/desktop_capture/linux/wayland/shared_screencast_stream.h",
        "patchSetId": 9
      },
      "lineNbr": 54,
      "author": {
        "id": 19629
      },
      "writtenOn": "2023-01-27T16:02:19Z",
      "side": 1,
      "message": "No, it is called in `BaseCapturerPipeWire::OnScreenCastRequestResult` (which is the callback for a successful portal start)",
      "parentUuid": "b1fb01c1_7f6f8f14",
      "range": {
        "startLine": 49,
        "startChar": 0,
        "endLine": 54,
        "endChar": 76
      },
      "revId": "4038ea18510bc0b10045523f56ed5a8a62561d54",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    }
  ]
}