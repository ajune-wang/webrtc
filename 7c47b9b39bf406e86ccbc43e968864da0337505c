{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "d08d6498_a26b5b02",
        "filename": "logging/rtc_event_log/encoder/rtc_event_log_encoder_unittest.cc",
        "patchSetId": 1
      },
      "lineNbr": 1246,
      "author": {
        "id": 5677
      },
      "writtenOn": "2020-10-15T19:31:08Z",
      "side": 1,
      "message": "TEST_P and read encoding as a param, thereby eliminating the loop?",
      "range": {
        "startLine": 1246,
        "startChar": 0,
        "endLine": 1246,
        "endChar": 4
      },
      "revId": "7c47b9b39bf406e86ccbc43e968864da0337505c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9c6d6c64_d6839b30",
        "filename": "logging/rtc_event_log/encoder/rtc_event_log_encoder_unittest.cc",
        "patchSetId": 1
      },
      "lineNbr": 1246,
      "author": {
        "id": 5150
      },
      "writtenOn": "2020-10-19T13:02:55Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d08d6498_a26b5b02",
      "range": {
        "startLine": 1246,
        "startChar": 0,
        "endLine": 1246,
        "endChar": 4
      },
      "revId": "7c47b9b39bf406e86ccbc43e968864da0337505c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "55a7b360_2f56282a",
        "filename": "logging/rtc_event_log/encoder/rtc_event_log_encoder_unittest.cc",
        "patchSetId": 1
      },
      "lineNbr": 1249,
      "author": {
        "id": 5677
      },
      "writtenOn": "2020-10-15T19:31:08Z",
      "side": 1,
      "message": "Could you move this closer to where it\u0027s first used?",
      "range": {
        "startLine": 1249,
        "startChar": 4,
        "endLine": 1249,
        "endChar": 50
      },
      "revId": "7c47b9b39bf406e86ccbc43e968864da0337505c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2afdb7ce_5f3e1293",
        "filename": "logging/rtc_event_log/encoder/rtc_event_log_encoder_unittest.cc",
        "patchSetId": 1
      },
      "lineNbr": 1249,
      "author": {
        "id": 5150
      },
      "writtenOn": "2020-10-19T13:02:55Z",
      "side": 1,
      "message": "Moved to fixture.",
      "parentUuid": "55a7b360_2f56282a",
      "range": {
        "startLine": 1249,
        "startChar": 4,
        "endLine": 1249,
        "endChar": 50
      },
      "revId": "7c47b9b39bf406e86ccbc43e968864da0337505c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a9c53d0d_d943a954",
        "filename": "logging/rtc_event_log/encoder/rtc_event_log_encoder_unittest.cc",
        "patchSetId": 1
      },
      "lineNbr": 1261,
      "author": {
        "id": 5677
      },
      "writtenOn": "2020-10-15T19:31:08Z",
      "side": 1,
      "message": "The source of the values for the relationships between 2148 on the one hand, and 255 * 8, etc., are not immediately clear. I came up with one possible explanation while reading the test, that ended up being wrong as I continued reading. The name of the test did not help clarify, and there was no comment I could find to explain it to me.",
      "range": {
        "startLine": 1261,
        "startChar": 33,
        "endLine": 1261,
        "endChar": 37
      },
      "revId": "7c47b9b39bf406e86ccbc43e968864da0337505c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "36976bea_1641902a",
        "filename": "logging/rtc_event_log/encoder/rtc_event_log_encoder_unittest.cc",
        "patchSetId": 1
      },
      "lineNbr": 1261,
      "author": {
        "id": 5150
      },
      "writtenOn": "2020-10-19T13:02:55Z",
      "side": 1,
      "message": "There isn\u0027t a clear relationship. 8*256 bytes would be 2048 and then I added a bit extra for RTCP overhead and SSRCs etc. Do you think it would be worth computing the exact size?",
      "parentUuid": "a9c53d0d_d943a954",
      "range": {
        "startLine": 1261,
        "startChar": 33,
        "endLine": 1261,
        "endChar": 37
      },
      "revId": "7c47b9b39bf406e86ccbc43e968864da0337505c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1037cbea_52968dcc",
        "filename": "logging/rtc_event_log/encoder/rtc_event_log_encoder_unittest.cc",
        "patchSetId": 1
      },
      "lineNbr": 1261,
      "author": {
        "id": 5677
      },
      "writtenOn": "2020-10-19T13:56:58Z",
      "side": 1,
      "message": "1. Maybe we could use round (decimal) numbers? Like a capacity of N*100, and N packets? When 100 is the size with the overhead, and instead of 255, you use whatever would bring the size up to 100?\n2. Seeing a capacity makes me expect tests that show that excessive size is handled correctly by both the encoder as well as the decoder. Assuming there is no longer a hard-cutoff value for excessive, maybe we shouldn\u0027t define a capacity, so as not to hint as much?",
      "parentUuid": "36976bea_1641902a",
      "range": {
        "startLine": 1261,
        "startChar": 33,
        "endLine": 1261,
        "endChar": 37
      },
      "revId": "7c47b9b39bf406e86ccbc43e968864da0337505c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "df057c6b_40d70e14",
        "filename": "logging/rtc_event_log/encoder/rtc_event_log_encoder_unittest.cc",
        "patchSetId": 1
      },
      "lineNbr": 1261,
      "author": {
        "id": 5150
      },
      "writtenOn": "2020-10-19T17:07:51Z",
      "side": 1,
      "message": "PTAL",
      "parentUuid": "1037cbea_52968dcc",
      "range": {
        "startLine": 1261,
        "startChar": 33,
        "endLine": 1261,
        "endChar": 37
      },
      "revId": "7c47b9b39bf406e86ccbc43e968864da0337505c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1c08ada5_52ca45a2",
        "filename": "logging/rtc_event_log/encoder/rtc_event_log_encoder_unittest.cc",
        "patchSetId": 1
      },
      "lineNbr": 1261,
      "author": {
        "id": 5147
      },
      "writtenOn": "2020-10-19T18:12:39Z",
      "side": 1,
      "message": "Thanks for removing the capacity, which misled me into thinking it was pertinent to the test.\nnit: I\u0027d personally have been helped by knowing that (1) the length of the arbitrary contents as well as (2) the number of iterations, are also arbitrary. Please consider commenting.",
      "parentUuid": "df057c6b_40d70e14",
      "range": {
        "startLine": 1261,
        "startChar": 33,
        "endLine": 1261,
        "endChar": 37
      },
      "revId": "7c47b9b39bf406e86ccbc43e968864da0337505c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e80e69c7_1346796f",
        "filename": "logging/rtc_event_log/encoder/rtc_event_log_encoder_unittest.cc",
        "patchSetId": 1
      },
      "lineNbr": 1274,
      "author": {
        "id": 5677
      },
      "writtenOn": "2020-10-15T19:31:08Z",
      "side": 1,
      "message": "Maybe move this inside of the loop to increase coverage? At the moment, you\u0027re only validating the final value.",
      "range": {
        "startLine": 1274,
        "startChar": 4,
        "endLine": 1274,
        "endChar": 40
      },
      "revId": "7c47b9b39bf406e86ccbc43e968864da0337505c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "54b95fad_cf7b9822",
        "filename": "logging/rtc_event_log/encoder/rtc_event_log_encoder_unittest.cc",
        "patchSetId": 1
      },
      "lineNbr": 1274,
      "author": {
        "id": 5150
      },
      "writtenOn": "2020-10-19T13:02:55Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e80e69c7_1346796f",
      "range": {
        "startLine": 1274,
        "startChar": 4,
        "endLine": 1274,
        "endChar": 40
      },
      "revId": "7c47b9b39bf406e86ccbc43e968864da0337505c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f08f7ee2_3ac8a00f",
        "filename": "logging/rtc_event_log/encoder/rtc_event_log_encoder_unittest.cc",
        "patchSetId": 1
      },
      "lineNbr": 1281,
      "author": {
        "id": 5677
      },
      "writtenOn": "2020-10-15T19:31:08Z",
      "side": 1,
      "message": "nit: I\u0027d specify the type; it makes it easier to read.",
      "range": {
        "startLine": 1281,
        "startChar": 4,
        "endLine": 1281,
        "endChar": 8
      },
      "revId": "7c47b9b39bf406e86ccbc43e968864da0337505c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bd11eca9_0f006b2b",
        "filename": "logging/rtc_event_log/encoder/rtc_event_log_encoder_unittest.cc",
        "patchSetId": 1
      },
      "lineNbr": 1281,
      "author": {
        "id": 5150
      },
      "writtenOn": "2020-10-19T13:02:55Z",
      "side": 1,
      "message": "Changed, but not sure I agree about it being easier to read. PTAL.",
      "parentUuid": "f08f7ee2_3ac8a00f",
      "range": {
        "startLine": 1281,
        "startChar": 4,
        "endLine": 1281,
        "endChar": 8
      },
      "revId": "7c47b9b39bf406e86ccbc43e968864da0337505c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ee4c9e82_3677f178",
        "filename": "logging/rtc_event_log/encoder/rtc_event_log_encoder_unittest.cc",
        "patchSetId": 1
      },
      "lineNbr": 1281,
      "author": {
        "id": 5677
      },
      "writtenOn": "2020-10-19T13:56:58Z",
      "side": 1,
      "message": "Are you saying s/auto/ParsedRtcEventLog::ParseStatus reduced readability? How so?",
      "parentUuid": "bd11eca9_0f006b2b",
      "range": {
        "startLine": 1281,
        "startChar": 4,
        "endLine": 1281,
        "endChar": 8
      },
      "revId": "7c47b9b39bf406e86ccbc43e968864da0337505c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a6bd5c3a_94872fba",
        "filename": "logging/rtc_event_log/encoder/rtc_event_log_encoder_unittest.cc",
        "patchSetId": 1
      },
      "lineNbr": 1281,
      "author": {
        "id": 5150
      },
      "writtenOn": "2020-10-19T17:07:51Z",
      "side": 1,
      "message": "In this case, I don\u0027t really need the status object. I could have written\nASSERT_TRUE(log.ParseString(s).ok());\nThe only reason for storing the status in a local variable, is to print a nicer error\nmessage (for something that should never happen). Since the status object isn\u0027t used or propagated anywhere else, and the semantics it quite natural for a status object, I don\u0027t expect it to be terribly important to the reader whether the type is an absl::Status or a ParsedRtcEventLog::ParseStatus or something else.\n\nSo, the explicit type means that almost half of the line is taken up by something that I view as unimportant. But I acknowledge that this may be a biased interpretation of the style guide. If you think the explicit type looks better, we\u0027ll go with that.",
      "parentUuid": "ee4c9e82_3677f178",
      "range": {
        "startLine": 1281,
        "startChar": 4,
        "endLine": 1281,
        "endChar": 8
      },
      "revId": "7c47b9b39bf406e86ccbc43e968864da0337505c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "803996a9_084a362d",
        "filename": "logging/rtc_event_log/encoder/rtc_event_log_encoder_unittest.cc",
        "patchSetId": 1
      },
      "lineNbr": 1281,
      "author": {
        "id": 5147
      },
      "writtenOn": "2020-10-19T18:12:39Z",
      "side": 1,
      "message": "You make good arguments. I\u0027m not sure of the quality of my own argument, but here it is - that the specific type for `status` becomes immediately apparent upon reading the next line, only helps me if I read the next line before I break the reading flow to find out the type ParseString returns. (Admittedly, in the case of `status` the variable name gives a very strong hint.)",
      "parentUuid": "a6bd5c3a_94872fba",
      "range": {
        "startLine": 1281,
        "startChar": 4,
        "endLine": 1281,
        "endChar": 8
      },
      "revId": "7c47b9b39bf406e86ccbc43e968864da0337505c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6679632b_bea95a86",
        "filename": "logging/rtc_event_log/encoder/rtc_event_log_encoder_unittest.cc",
        "patchSetId": 1
      },
      "lineNbr": 1285,
      "author": {
        "id": 5677
      },
      "writtenOn": "2020-10-15T19:31:08Z",
      "side": 1,
      "message": "The way I understand ASSERT vs. EXPECT is:\n1. If you can avoid the test crashing by reading/writing past a valid point, dereferencing a nullptr, etc., it\u0027s OK to use ASSERT for that.\n2. Otherwise, ASSERT can be used to hint to the reader that something is a sanity-test of the test over its own logic.\n3. Otherwise, a check is performed as part of the focus of the test, and should use EXPECT to highlight that.",
      "range": {
        "startLine": 1285,
        "startChar": 4,
        "endLine": 1285,
        "endChar": 13
      },
      "revId": "7c47b9b39bf406e86ccbc43e968864da0337505c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4d199bd7_451914a2",
        "filename": "logging/rtc_event_log/encoder/rtc_event_log_encoder_unittest.cc",
        "patchSetId": 1
      },
      "lineNbr": 1285,
      "author": {
        "id": 5150
      },
      "writtenOn": "2020-10-19T13:02:55Z",
      "side": 1,
      "message": "Yes. We are dereferencing the first element, so the assert on the length is needed. The last ASSERT can be changed to EXPECT though.",
      "parentUuid": "6679632b_bea95a86",
      "range": {
        "startLine": 1285,
        "startChar": 4,
        "endLine": 1285,
        "endChar": 13
      },
      "revId": "7c47b9b39bf406e86ccbc43e968864da0337505c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3f4299b0_66d205b6",
        "filename": "logging/rtc_event_log/rtc_event_log_parser.cc",
        "patchSetId": 1
      },
      "lineNbr": 1669,
      "author": {
        "id": 5677
      },
      "writtenOn": "2020-10-15T19:31:08Z",
      "side": 1,
      "message": "nit: If `packet` we a std::string*, you could assign. Admittedly, not really a change in performance, but I wonder what the reason was for choosing vector over string?",
      "range": {
        "startLine": 1667,
        "startChar": 0,
        "endLine": 1669,
        "endChar": 45
      },
      "revId": "7c47b9b39bf406e86ccbc43e968864da0337505c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "dfa8d5c9_8d0e5ac3",
        "filename": "logging/rtc_event_log/rtc_event_log_parser.cc",
        "patchSetId": 1
      },
      "lineNbr": 1669,
      "author": {
        "id": 5150
      },
      "writtenOn": "2020-10-19T13:02:55Z",
      "side": 1,
      "message": "RTCP is represented as a vector\u003cuint8_t\u003e elsewhere, whereas protobuf only uses std::string.",
      "parentUuid": "3f4299b0_66d205b6",
      "range": {
        "startLine": 1667,
        "startChar": 0,
        "endLine": 1669,
        "endChar": 45
      },
      "revId": "7c47b9b39bf406e86ccbc43e968864da0337505c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    }
  ]
}