{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "4a2d7de4_fac260c2",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 19
      },
      "lineNbr": 0,
      "author": {
        "id": 5634
      },
      "writtenOn": "2021-05-18T21:40:07Z",
      "side": 1,
      "message": "Please address questions raised about the goal of this change, and the choices of architecture.\n",
      "revId": "41835dea635be4813c2da4741c9d8ab069fdc061",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "93c95f59_4d306c27",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 19
      },
      "lineNbr": 0,
      "author": {
        "id": 14874
      },
      "writtenOn": "2021-05-19T11:32:35Z",
      "side": 1,
      "message": "the overall goal is to allow tweaks to, for example, transport-cc feedback is handled.\nWith this change we can provide our own class for the transport controller and maintain it outside the webrtc tree.\n\nI would expect this to be a quite common requirement actually.",
      "parentUuid": "4a2d7de4_fac260c2",
      "revId": "41835dea635be4813c2da4741c9d8ab069fdc061",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "99f61807_20f1f425",
        "filename": "api/call/call_factory_interface.h",
        "patchSetId": 19
      },
      "lineNbr": 34,
      "author": {
        "id": 5634
      },
      "writtenOn": "2021-05-18T21:40:07Z",
      "side": 1,
      "message": "Can you explain why it\u0027s not possible to make the transport_controller_send_factory part of CallConfig, so that the CreateCall API can remain unchanged?",
      "revId": "41835dea635be4813c2da4741c9d8ab069fdc061",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1169c53f_ac5275c1",
        "filename": "api/call/call_factory_interface.h",
        "patchSetId": 19
      },
      "lineNbr": 34,
      "author": {
        "id": 5234
      },
      "writtenOn": "2021-05-19T07:03:55Z",
      "side": 1,
      "message": "Assuming we agree on injecting a unique_ptr\u003cRtpTransportControllerSendInterface\u003e here (no factory at this level), it\u0027s a problem that\nCallConfig is passed as a const ref, which means that it can\u0027t be used to pass unique_ptr ownership. (I\u0027d be fine with fixing that, but preferably as a separate cl).",
      "parentUuid": "99f61807_20f1f425",
      "revId": "41835dea635be4813c2da4741c9d8ab069fdc061",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9f3e812b_4b399d8c",
        "filename": "api/call/call_factory_interface.h",
        "patchSetId": 19
      },
      "lineNbr": 34,
      "author": {
        "id": 5634
      },
      "writtenOn": "2021-05-19T11:08:15Z",
      "side": 1,
      "message": "All the 5 other factories referenced in CallConfig are passed by naked pointer (and it\u0027s a struct). I think \"stick with the pattern of the code around you\" indicates that we shouldn\u0027t be passing an unique_ptr for this factory either.",
      "parentUuid": "1169c53f_ac5275c1",
      "revId": "41835dea635be4813c2da4741c9d8ab069fdc061",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9f213a5b_0d66d38f",
        "filename": "api/call/call_factory_interface.h",
        "patchSetId": 19
      },
      "lineNbr": 34,
      "author": {
        "id": 5234
      },
      "writtenOn": "2021-05-19T12:29:31Z",
      "side": 1,
      "message": "In my opinion, a factory is appropriate when Call needs to instantiate some kind of object multiple times, typically, once per stream.\n\nBut the RtpTransportControllerSendInterface should be one per RTP session (which in itself is a somewhat vague concept). My preference (mostly unchanged since when I introduced these classes) would be to inject an already constructed RtpTransportControllerSendInterface. Either with ownership, as a unique_ptr, or a naked pointer. \n\nIn the latter case, ownership should be in the PeerConnection class, and it makes it possible to pass separate pointers for audio and video, which then can point to the same object or to distinct objects, depending on bundle mode. Not currently used for sending, but we do have distinct RtpStreamReceiverController on the receive path, and it would make sense to me to inject those objects in more or less the same way.",
      "parentUuid": "9f3e812b_4b399d8c",
      "revId": "41835dea635be4813c2da4741c9d8ab069fdc061",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "11a2e8f3_2b2334e3",
        "filename": "api/call/call_factory_interface.h",
        "patchSetId": 19
      },
      "lineNbr": 34,
      "author": {
        "id": 5634
      },
      "writtenOn": "2021-05-19T13:32:41Z",
      "side": 1,
      "message": "RTP session is well-defined, (un)fortunately - one endpoint\u0027s view of an RTP session is equivalent to one transport (DTLS session, RTP transport). (I don\u0027t think there\u0027s any exceptions to this inside one PeerConnection.)\n\nSo if Call needs to play the multitransport game (bundling / not bundling, for instance), and RtpTransportControllerSendInterface is 1:1 with RtpTransport, Call will need to create multiple instances of it.",
      "parentUuid": "9f213a5b_0d66d38f",
      "revId": "41835dea635be4813c2da4741c9d8ab069fdc061",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    }
  ]
}