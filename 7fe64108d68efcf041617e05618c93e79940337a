{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "4b2f0fb8_b8482f0d",
        "filename": "modules/rtp_rtcp/source/packet_sequencer.cc",
        "patchSetId": 2
      },
      "lineNbr": 66,
      "author": {
        "id": 5019
      },
      "writtenOn": "2021-08-04T11:33:28Z",
      "side": 1,
      "message": "why? (tbh, I do not see a strong reason to avoid 0)\nthere might be a weak reason (e.g. debugability: 0 looks like we forgot to randomise it).\n\nEither remove this statement, or explain why 0 is avoided.",
      "range": {
        "startLine": 66,
        "startChar": 27,
        "endLine": 66,
        "endChar": 39
      },
      "revId": "7fe64108d68efcf041617e05618c93e79940337a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1a1b74d4_dd4ac77e",
        "filename": "modules/rtp_rtcp/source/packet_sequencer.cc",
        "patchSetId": 2
      },
      "lineNbr": 66,
      "author": {
        "id": 5524
      },
      "writtenOn": "2021-08-04T12:46:05Z",
      "side": 1,
      "message": "This is just moved from RTPSender. I agree that both the !\u003d 0 and \u003c 2^15 constraints are weird, but would prefer not to change any behavior in this CL.\nI\u0027ll add a TODO and follow up with that in a separate CL.",
      "parentUuid": "4b2f0fb8_b8482f0d",
      "range": {
        "startLine": 66,
        "startChar": 27,
        "endLine": 66,
        "endChar": 39
      },
      "revId": "7fe64108d68efcf041617e05618c93e79940337a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6515e04e_ba20dd0d",
        "filename": "modules/rtp_rtcp/source/packet_sequencer.cc",
        "patchSetId": 2
      },
      "lineNbr": 66,
      "author": {
        "id": 5019
      },
      "writtenOn": "2021-08-04T12:59:30Z",
      "side": 1,
      "message": "I wasn\u0027t really suggesting to allow 0 as valid starting sequence number. Agree better to (indefinitely) postpone it to another CL.\n\nI was suggesting to remove misleading comment \"Can\u0027t be 0\" that repeats code, but doesn\u0027t explain it. (if you can replace it with a comment that does explain why 0 is excluded - that would be even better)",
      "parentUuid": "1a1b74d4_dd4ac77e",
      "range": {
        "startLine": 66,
        "startChar": 27,
        "endLine": 66,
        "endChar": 39
      },
      "revId": "7fe64108d68efcf041617e05618c93e79940337a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1b57357b_0aa3e9c1",
        "filename": "modules/rtp_rtcp/source/rtp_rtcp_impl.cc",
        "patchSetId": 2
      },
      "lineNbr": 49,
      "author": {
        "id": 5019
      },
      "writtenOn": "2021-08-04T11:33:28Z",
      "side": 1,
      "message": "here parameter meaning doesn\u0027t match passed value, so it would be a good idea to explain it:\n/*require_marker_before_media_padding_\u003d*/!config.audio,",
      "range": {
        "startLine": 49,
        "startChar": 17,
        "endLine": 49,
        "endChar": 30
      },
      "revId": "7fe64108d68efcf041617e05618c93e79940337a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d9265407_f828d09c",
        "filename": "modules/rtp_rtcp/source/rtp_rtcp_impl.cc",
        "patchSetId": 2
      },
      "lineNbr": 49,
      "author": {
        "id": 5524
      },
      "writtenOn": "2021-08-04T12:46:05Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1b57357b_0aa3e9c1",
      "range": {
        "startLine": 49,
        "startChar": 17,
        "endLine": 49,
        "endChar": 30
      },
      "revId": "7fe64108d68efcf041617e05618c93e79940337a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3b5ee428_908574d6",
        "filename": "modules/rtp_rtcp/source/rtp_rtcp_impl2.cc",
        "patchSetId": 2
      },
      "lineNbr": 66,
      "author": {
        "id": 5019
      },
      "writtenOn": "2021-08-04T11:33:28Z",
      "side": 1,
      "message": "remove empty line",
      "revId": "7fe64108d68efcf041617e05618c93e79940337a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "68da62be_0e3a527a",
        "filename": "modules/rtp_rtcp/source/rtp_rtcp_impl2.cc",
        "patchSetId": 2
      },
      "lineNbr": 66,
      "author": {
        "id": 5524
      },
      "writtenOn": "2021-08-04T12:46:05Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3b5ee428_908574d6",
      "revId": "7fe64108d68efcf041617e05618c93e79940337a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5340600e_7b55e87f",
        "filename": "modules/rtp_rtcp/source/rtp_sender.cc",
        "patchSetId": 2
      },
      "lineNbr": 204,
      "author": {
        "id": 5019
      },
      "writtenOn": "2021-08-04T11:33:28Z",
      "side": 1,
      "message": "avoid .reset for unique_ptr, specially when parameter is not nullptr.\nowned_sequencer_ \u003d absl::WrapUnique(sequencer_);\n\n(on the other hand, I guess this code doesn\u0027t suppose to live long, so making it clean is not that important)",
      "range": {
        "startLine": 204,
        "startChar": 2,
        "endLine": 204,
        "endChar": 37
      },
      "revId": "7fe64108d68efcf041617e05618c93e79940337a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "88479023_edb7552c",
        "filename": "modules/rtp_rtcp/source/rtp_sender.cc",
        "patchSetId": 2
      },
      "lineNbr": 208,
      "author": {
        "id": 5019
      },
      "writtenOn": "2021-08-04T11:33:28Z",
      "side": 1,
      "message": "sequencer_-\u003eRandomizeSequencerNumbers();\n\nbtw, it looks like \nRandomizeSequencerNumbers is always called and always called right after construction, why have it as separate function?",
      "range": {
        "startLine": 206,
        "startChar": 2,
        "endLine": 208,
        "endChar": 79
      },
      "revId": "7fe64108d68efcf041617e05618c93e79940337a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0d65c57a_a14da492",
        "filename": "modules/rtp_rtcp/source/rtp_sender.cc",
        "patchSetId": 2
      },
      "lineNbr": 208,
      "author": {
        "id": 5524
      },
      "writtenOn": "2021-08-04T12:46:05Z",
      "side": 1,
      "message": "You, mean why not make it part of the PacketSequencer ctor?\nYeah, that makes sense. Other usages of PacketSequencer can just set their wanted values explicitly.",
      "parentUuid": "88479023_edb7552c",
      "range": {
        "startLine": 206,
        "startChar": 2,
        "endLine": 208,
        "endChar": 79
      },
      "revId": "7fe64108d68efcf041617e05618c93e79940337a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fc0eed71_3f11f9d0",
        "filename": "modules/rtp_rtcp/source/rtp_sender_unittest.cc",
        "patchSetId": 2
      },
      "lineNbr": 203,
      "author": {
        "id": 5019
      },
      "writtenOn": "2021-08-04T11:33:28Z",
      "side": 1,
      "message": "https://abseil.io/tips/187#common-anti-pattern-delayed-initialization\n\n\"If delayed initialization is really important and unavoidable, consider using absl::optional with its emplace() method.\"",
      "range": {
        "startLine": 203,
        "startChar": 2,
        "endLine": 203,
        "endChar": 17
      },
      "revId": "7fe64108d68efcf041617e05618c93e79940337a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f7725963_320f3142",
        "filename": "modules/rtp_rtcp/source/rtp_sender_unittest.cc",
        "patchSetId": 2
      },
      "lineNbr": 203,
      "author": {
        "id": 5524
      },
      "writtenOn": "2021-08-04T12:46:05Z",
      "side": 1,
      "message": "Done. Though I personally find it confusing the we have an optional that is definitely not optionally populated :)",
      "parentUuid": "fc0eed71_3f11f9d0",
      "range": {
        "startLine": 203,
        "startChar": 2,
        "endLine": 203,
        "endChar": 17
      },
      "revId": "7fe64108d68efcf041617e05618c93e79940337a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c893040f_43daf7fb",
        "filename": "modules/rtp_rtcp/source/rtp_sender_unittest.cc",
        "patchSetId": 2
      },
      "lineNbr": 203,
      "author": {
        "id": 5019
      },
      "writtenOn": "2021-08-04T12:59:30Z",
      "side": 1,
      "message": "it is nullopt right after construction, but before SetUp finished it work.\n\nWhile it is a bit weird, it is less weird than unique_ptr that is \u0027never\u0027 nullptr, never moved and the run-time type is always the same as compile-time type (i.e. unique_ptr doesn\u0027t point to an abstract interface)\n\nIf you can move construction into the constructor and make it non-optional, or move all the construction into individual tests so that there is no need to recreated it right after construction - that would be better, but right now tests are not structured that way.",
      "parentUuid": "f7725963_320f3142",
      "range": {
        "startLine": 203,
        "startChar": 2,
        "endLine": 203,
        "endChar": 17
      },
      "revId": "7fe64108d68efcf041617e05618c93e79940337a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ae117bae_5266285c",
        "filename": "modules/rtp_rtcp/source/rtp_sender_unittest.cc",
        "patchSetId": 2
      },
      "lineNbr": 1441,
      "author": {
        "id": 5019
      },
      "writtenOn": "2021-08-04T11:33:28Z",
      "side": 1,
      "message": "swap AllOf and Pointee (same as already done in previous tests)\nthen you\u0027ll need to write Pointee once instead of twice.",
      "range": {
        "startLine": 1440,
        "startChar": 41,
        "endLine": 1441,
        "endChar": 26
      },
      "revId": "7fe64108d68efcf041617e05618c93e79940337a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1a5e7489_c1b83fa7",
        "filename": "modules/rtp_rtcp/source/rtp_sender_unittest.cc",
        "patchSetId": 2
      },
      "lineNbr": 1441,
      "author": {
        "id": 5524
      },
      "writtenOn": "2021-08-04T12:46:05Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ae117bae_5266285c",
      "range": {
        "startLine": 1440,
        "startChar": 41,
        "endLine": 1441,
        "endChar": 26
      },
      "revId": "7fe64108d68efcf041617e05618c93e79940337a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    }
  ]
}