{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "9a19ff7d_5c4548df",
        "filename": "api/data_channel_interface.h",
        "patchSetId": 2
      },
      "lineNbr": 95,
      "author": {
        "id": 5142
      },
      "writtenOn": "2024-10-21T14:48:39Z",
      "side": 1,
      "message": "Wait is it the data channel that must be kept alive or the DataChannelObserver?",
      "range": {
        "startLine": 95,
        "startChar": 47,
        "endLine": 95,
        "endChar": 72
      },
      "revId": "a1e574ee2acd647a6d6086096c67895848c9eb5d",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6ed51038_353deddf",
        "filename": "api/data_channel_interface.h",
        "patchSetId": 2
      },
      "lineNbr": 95,
      "author": {
        "id": 5508
      },
      "writtenOn": "2024-10-22T06:51:49Z",
      "side": 1,
      "message": "As Jonas points out, this additional comment is highlighting what has already been called out in the lines directly above.\n\nTo me it sounds like a bug was discovered in an implementation that deleted a reference counted object from within a callback from that object. That\u0027s a pattern to be avoided and arguably not unique to DataChannelObserver.\n\nPossibly related to the problem, CallbackList allows for removing subscriptions from within callbacks - is that relevant to the original problem?",
      "parentUuid": "9a19ff7d_5c4548df",
      "range": {
        "startLine": 95,
        "startChar": 47,
        "endLine": 95,
        "endChar": 72
      },
      "revId": "a1e574ee2acd647a6d6086096c67895848c9eb5d",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0aaf830c_d6693f7c",
        "filename": "api/data_channel_interface.h",
        "patchSetId": 2
      },
      "lineNbr": 95,
      "author": {
        "id": 5142
      },
      "writtenOn": "2024-10-22T07:26:42Z",
      "side": 1,
      "message": "DataChannel being reference counted, couldn\u0027t it protect itself from being deleted while callbacks are pending? It seems strange to me that someone reacting to an event have to take precaution even if that event handler is not referencing the data channel directly. Considering \"re-entrancy is not supported\" (comment above) it probably wouldn\u0027t naturally hold a reference here",
      "parentUuid": "6ed51038_353deddf",
      "range": {
        "startLine": 95,
        "startChar": 47,
        "endLine": 95,
        "endChar": 72
      },
      "revId": "a1e574ee2acd647a6d6086096c67895848c9eb5d",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "26417273_6ce4fb86",
        "filename": "api/data_channel_interface.h",
        "patchSetId": 2
      },
      "lineNbr": 95,
      "author": {
        "id": 5508
      },
      "writtenOn": "2024-10-22T11:45:06Z",
      "side": 1,
      "message": "As I understand it, the problem is that the owner of the datachannel is actually the observer. It\u0027s a circular reference.\n\nI.e. semantically similar to this:\n\n    class O : public Observer {\n     public:\n      O() {\n        producer_ \u003d make_unique\u003cP\u003e(this);\n      }\n      // OnEvent is called by P.\n      void OnEvent() override {\n        // This is a re-entrant call.\n        // It deletes the producer while we\u0027re inside the event.\n        producer_.reset();\n      }\n     private:\n      unique_ptr\u003cProducer\u003e producer_;\n    };\n\nThat pattern is problematic in general, but it\u0027s already called out as something that should be avoided in the comments. What is sometimes done instead is for observers to hold weak pointers whereas event producers hold a strong reference (or full ownership) to the observers.",
      "parentUuid": "0aaf830c_d6693f7c",
      "range": {
        "startLine": 95,
        "startChar": 47,
        "endLine": 95,
        "endChar": 72
      },
      "revId": "a1e574ee2acd647a6d6086096c67895848c9eb5d",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9d781407_ab5a071c",
        "filename": "api/data_channel_interface.h",
        "patchSetId": 2
      },
      "lineNbr": 95,
      "author": {
        "id": 5613
      },
      "writtenOn": "2024-10-22T11:55:57Z",
      "side": 1,
      "message": "we can build a webrtc construct that (e.g in DBUG mode)\ncheck that the API is not called from a callback, which would give a clear assertions.\n\nsomething like:\n\nwebrtc::SomeInternalFunction() {\nAGlobalDebugObject.beforeCallCallback();\ncallACallBack();\nAGlobalDebugObject.afterCallCallback();\n}\n\nwebrtc::SomeApiFunction() {\nAGlobalDebugObject.checkNotInCallback();\n}\n\n---\n\nBut I\u0027m not sure it\u0027s worth it ?",
      "parentUuid": "26417273_6ce4fb86",
      "range": {
        "startLine": 95,
        "startChar": 47,
        "endLine": 95,
        "endChar": 72
      },
      "revId": "a1e574ee2acd647a6d6086096c67895848c9eb5d",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c9c17ca2_76fc86ad",
        "filename": "api/data_channel_interface.h",
        "patchSetId": 2
      },
      "lineNbr": 95,
      "author": {
        "id": 5508
      },
      "writtenOn": "2024-10-23T08:07:58Z",
      "side": 1,
      "message": "I\u0027m not 100% sure it\u0027s worth it and am guessing that peterhanspers@ doesn\u0027t think so either since the CL adds documentation - but can be convinced otherwise. To me it still looks like there was a bug in the observer implementation. It\u0027s unfortunately the kind of bug that\u0027s dependent on operation order (i.e. timing of decrementing the refcount) and therefore might be one of those bugs that unintentionally don\u0027t get triggered by tests but can happen in production.\n\nBtw, CallbackList has a similar mechanism to detect when inside a callback to what you describe. Search for `send_in_progress_` if interested. In particular the CHECK inside the dtor (`~CallbackListReceivers()`) is something that, if we had, would have caught this type of problem.",
      "parentUuid": "9d781407_ab5a071c",
      "range": {
        "startLine": 95,
        "startChar": 47,
        "endLine": 95,
        "endChar": 72
      },
      "revId": "a1e574ee2acd647a6d6086096c67895848c9eb5d",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cd0f55eb_5ac7d47d",
        "filename": "api/data_channel_interface.h",
        "patchSetId": 2
      },
      "lineNbr": 96,
      "author": {
        "id": 5613
      },
      "writtenOn": "2024-10-21T12:32:43Z",
      "side": 1,
      "message": "actually, the comment just above is exactly the same.\nmaybe rephrase as \"E.g. implementations ...\"",
      "range": {
        "startLine": 96,
        "startChar": 22,
        "endLine": 96,
        "endChar": 31
      },
      "revId": "a1e574ee2acd647a6d6086096c67895848c9eb5d",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    }
  ]
}