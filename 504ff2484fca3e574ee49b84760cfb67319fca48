{
  "comments": [
    {
      "key": {
        "uuid": "533e2cc6_2929d52a",
        "filename": "api/BUILD.gn",
        "patchSetId": 1
      },
      "lineNbr": 573,
      "author": {
        "id": 7704
      },
      "writtenOn": "2018-10-15T15:40:17Z",
      "side": 1,
      "message": "why do we need this? Shouldn\u0027t we avoid suppressing bad constructors?",
      "range": {
        "startLine": 573,
        "startChar": 20,
        "endLine": 573,
        "endChar": 74
      },
      "revId": "504ff2484fca3e574ee49b84760cfb67319fca48",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1b89677d_99028f43",
        "filename": "api/BUILD.gn",
        "patchSetId": 1
      },
      "lineNbr": 573,
      "author": {
        "id": 5234
      },
      "writtenOn": "2018-10-16T08:43:32Z",
      "side": 1,
      "message": "We should avoid this. But it\u0027s not added in this cl, I just move a few targets around in order to group the fake_media_transport and loopback_media_transport targets together, above the rtc_api_unittests target.",
      "parentUuid": "533e2cc6_2929d52a",
      "range": {
        "startLine": 573,
        "startChar": 20,
        "endLine": 573,
        "endChar": 74
      },
      "revId": "504ff2484fca3e574ee49b84760cfb67319fca48",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a186b895_15e59491",
        "filename": "api/test/loopback_media_transport.h",
        "patchSetId": 1
      },
      "lineNbr": 22,
      "author": {
        "id": 8020
      },
      "writtenOn": "2018-10-12T17:03:03Z",
      "side": 1,
      "message": "Do you think it makes sense to implement it as MediaTransportFactory, so it could be used in integration tests with PeerConnection and JSEP transport?",
      "revId": "504ff2484fca3e574ee49b84760cfb67319fca48",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3951aa80_031b62b9",
        "filename": "api/test/loopback_media_transport.h",
        "patchSetId": 1
      },
      "lineNbr": 22,
      "author": {
        "id": 5234
      },
      "writtenOn": "2018-10-15T08:34:16Z",
      "side": 1,
      "message": "Something similar would make definitely sense. Should be easy to wrap a MediaTransportPair in a pair of factories, as long as each factory has CreateMediaTransport invoked only once. For multiple transports, it\u0027s not obvious to me to how to pair them up properly (use some place-holder packet_transport with an id?).\n\nFor this cl, I target tests of AudioReceiveStream/AudioSendStream, and I\u0027d like to keep it as simple as possible.",
      "parentUuid": "a186b895_15e59491",
      "revId": "504ff2484fca3e574ee49b84760cfb67319fca48",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8d15056b_ab9dc11a",
        "filename": "api/test/loopback_media_transport.h",
        "patchSetId": 1
      },
      "lineNbr": 22,
      "author": {
        "id": 7565
      },
      "writtenOn": "2018-10-15T17:27:35Z",
      "side": 1,
      "message": "Can be done as a separate change. You can probably make a pair of factories, each factory can only produce one transport, connected to transport from another factory.",
      "parentUuid": "3951aa80_031b62b9",
      "revId": "504ff2484fca3e574ee49b84760cfb67319fca48",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f5fa92a7_c1cf1d56",
        "filename": "api/test/loopback_media_transport.h",
        "patchSetId": 1
      },
      "lineNbr": 25,
      "author": {
        "id": 7704
      },
      "writtenOn": "2018-10-15T15:40:17Z",
      "side": 1,
      "message": "nit: why not 0 and 1, in order?",
      "range": {
        "startLine": 25,
        "startChar": 43,
        "endLine": 25,
        "endChar": 47
      },
      "revId": "504ff2484fca3e574ee49b84760cfb67319fca48",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "caa9dfc7_b49e35c8",
        "filename": "api/test/loopback_media_transport.h",
        "patchSetId": 1
      },
      "lineNbr": 25,
      "author": {
        "id": 5234
      },
      "writtenOn": "2018-10-16T08:43:32Z",
      "side": 1,
      "message": "That\u0027s essential in order to cross-connect the two pipe endpoints. pipe_[0] is connected to pipe_[1] and vice versa.",
      "parentUuid": "f5fa92a7_c1cf1d56",
      "range": {
        "startLine": 25,
        "startChar": 43,
        "endLine": 25,
        "endChar": 47
      },
      "revId": "504ff2484fca3e574ee49b84760cfb67319fca48",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8297c22a_ba48bcc5",
        "filename": "api/test/loopback_media_transport.h",
        "patchSetId": 1
      },
      "lineNbr": 30,
      "author": {
        "id": 7704
      },
      "writtenOn": "2018-10-15T15:40:17Z",
      "side": 1,
      "message": "nit: why not\nMediaTransportInterface* MediaTransportPair::first() { return \u0026pipe_[0]; }\nMediaTransportInterface* MediaTransportPair::second() { return \u0026pipe_[1]; }\n?\nReturning pair causes:\nmedia_transport_pair-\u003eGetTransports().first(); \nwhich is fine, but excessively long / too many nested calls.\n\n(unless there is a use case where we need a pair)",
      "range": {
        "startLine": 30,
        "startChar": 2,
        "endLine": 30,
        "endChar": 19
      },
      "revId": "504ff2484fca3e574ee49b84760cfb67319fca48",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2f4dff97_1ad1a18e",
        "filename": "api/test/loopback_media_transport.h",
        "patchSetId": 1
      },
      "lineNbr": 30,
      "author": {
        "id": 7565
      },
      "writtenOn": "2018-10-15T17:27:35Z",
      "side": 1,
      "message": "+1",
      "parentUuid": "8297c22a_ba48bcc5",
      "range": {
        "startLine": 30,
        "startChar": 2,
        "endLine": 30,
        "endChar": 19
      },
      "revId": "504ff2484fca3e574ee49b84760cfb67319fca48",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4e1c2283_64a9d9ce",
        "filename": "api/test/loopback_media_transport.h",
        "patchSetId": 1
      },
      "lineNbr": 30,
      "author": {
        "id": 5234
      },
      "writtenOn": "2018-10-16T08:43:32Z",
      "side": 1,
      "message": "I used pair to mimic the interface for pipe() and socketpair() syscalls. \n\nThe usecase I see is something like\n\nMediaTransportPair transport_pair;\nauto pipe \u003d transport_pair.GetTransports();\nauto receive_stream \u003d CreateAudioReceiveStream(... pipe.first ...);\nauto send_stream \u003d CreateAudioSendStream( ... pipe.second ...);\n\nBut that gets simpler with the suggested change, so I\u0027ll switch to first and second.\n\n(I also notice that maybe it\u0027s a mistake to produce a bidirectional pipe, a unidirectional pipe with one reading endpoint and one writing endpoint would suffice and maybe be clearer. But we can tweak that later, since I think we may also want to consider narrower stream endpoint-interfaces for MediaTransport itself).",
      "parentUuid": "2f4dff97_1ad1a18e",
      "range": {
        "startLine": 30,
        "startChar": 2,
        "endLine": 30,
        "endChar": 19
      },
      "revId": "504ff2484fca3e574ee49b84760cfb67319fca48",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    }
  ]
}