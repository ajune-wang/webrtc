{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "05d4a69e_463b69fc",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5634
      },
      "writtenOn": "2022-02-03T08:25:41Z",
      "side": 1,
      "message": "As far as I can tell, it\u0027s not unlikely that the answers are \"no\" and \"no\"....\n",
      "revId": "2bd093fcb07fd16a47358a8aeb0fafe8ff7f3280",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f8fadf94_1b349fba",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 6720
      },
      "writtenOn": "2022-02-03T09:53:29Z",
      "side": 1,
      "message": "hah, ok, I may mis-parse that it\u0027s *not* *unlikely* that the answers are *no*.\n\nSo, it\u0027s likely that the answers are no? (please correct me if I misunderstood)\n\nFrom the below, it sounds like the answers are \u0027yes\u0027 though - but I think we may be talking about different things.",
      "parentUuid": "05d4a69e_463b69fc",
      "revId": "2bd093fcb07fd16a47358a8aeb0fafe8ff7f3280",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "eaa36cb1_a7e16058",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5634
      },
      "writtenOn": "2022-02-03T10:15:53Z",
      "side": 1,
      "message": "Well, kind of .... I think the answers are no and no, but they may change in the future.",
      "revId": "2bd093fcb07fd16a47358a8aeb0fafe8ff7f3280",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c641ef09_71048203",
        "filename": "pc/sdp_offer_answer.cc",
        "patchSetId": 1
      },
      "lineNbr": 1993,
      "author": {
        "id": 5634
      },
      "writtenOn": "2022-02-03T08:25:41Z",
      "side": 1,
      "message": "The model in the spec (which I\u0027d like to reflect in the implementation, for future-direction reasons) is that transceivers know about senders and receivers (they have to), but the senders and receivers shouldn\u0027t need to know that they\u0027re owned by a transceiver (when SDP is not required, transceivers shouldn\u0027t be either).\n\nAs far as I can tell, the sender and receiver DOM objects need to find the transport DOM object for returning as an attribute.",
      "revId": "2bd093fcb07fd16a47358a8aeb0fafe8ff7f3280",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b4598fd0_ceab8ebc",
        "filename": "pc/sdp_offer_answer.cc",
        "patchSetId": 1
      },
      "lineNbr": 1993,
      "author": {
        "id": 6720
      },
      "writtenOn": "2022-02-03T09:53:29Z",
      "side": 1,
      "message": "The senders and receivers have an assigned transport based on the mid in this case. How would you look up the transport without having the mid? (or is that not what you\u0027re suggesting?)",
      "parentUuid": "c641ef09_71048203",
      "revId": "2bd093fcb07fd16a47358a8aeb0fafe8ff7f3280",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1aeb19d9_37b4dc8a",
        "filename": "pc/sdp_offer_answer.cc",
        "patchSetId": 1
      },
      "lineNbr": 1993,
      "author": {
        "id": 5634
      },
      "writtenOn": "2022-02-03T10:15:53Z",
      "side": 1,
      "message": "The MID is also an SDP construct.\nIf we want SDP-free senders and receivers (and I hope that\u0027s somewhere in the future), we\u0027ll have to manage those senders and receivers differently, but we don\u0027t have that design on the table yet.",
      "parentUuid": "b4598fd0_ceab8ebc",
      "revId": "2bd093fcb07fd16a47358a8aeb0fafe8ff7f3280",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b501fc64_81a15fd2",
        "filename": "pc/sdp_offer_answer.cc",
        "patchSetId": 1
      },
      "lineNbr": 1993,
      "author": {
        "id": 5508
      },
      "writtenOn": "2022-02-03T13:43:30Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "1aeb19d9_37b4dc8a",
      "revId": "2bd093fcb07fd16a47358a8aeb0fafe8ff7f3280",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8c4fa142_1f2cc000",
        "filename": "pc/sdp_offer_answer.cc",
        "patchSetId": 1
      },
      "lineNbr": 1995,
      "author": {
        "id": 5634
      },
      "writtenOn": "2022-02-03T08:25:41Z",
      "side": 1,
      "message": "JS: The transport DOM object (RTCDtlsTransport) does not have any modifiable attributes or control functions, so no calls are expected using that object. It\u0027s effectively an ID, used for firing events - those originate from the network thread and propagate up.\n\nNote: Future extensions may change this.",
      "revId": "2bd093fcb07fd16a47358a8aeb0fafe8ff7f3280",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "42f42e74_ee5a5075",
        "filename": "pc/sdp_offer_answer.cc",
        "patchSetId": 1
      },
      "lineNbr": 1995,
      "author": {
        "id": 6720
      },
      "writtenOn": "2022-02-03T09:53:29Z",
      "side": 1,
      "message": "it\u0027s needed to access things like state, right? that state is maintained on the network thread.",
      "parentUuid": "8c4fa142_1f2cc000",
      "revId": "2bd093fcb07fd16a47358a8aeb0fafe8ff7f3280",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a25e6d8a_e1699f4e",
        "filename": "pc/sdp_offer_answer.cc",
        "patchSetId": 1
      },
      "lineNbr": 1995,
      "author": {
        "id": 5634
      },
      "writtenOn": "2022-02-03T10:15:53Z",
      "side": 1,
      "message": "The state is maintained in the webrtc::DTLSTransport object, protected by a mutex: https://source.chromium.org/chromium/chromium/src/+/main:third_party/webrtc/pc/dtls_transport.cc;drc\u003dcba00174ca338153b9c4f0c31ddbabaac7dd38c7;l\u003d89\n\nThe network thread calls into the mutex to update the state, and then fires a callback that takes the state (pass-by-value) as argument; if the user wants to know the state at any other time, it gets the cached value protected by the mutex.\n\nSo there is never a call to the network thread to get the state. Deliberately designed it that way to avoid the need for an invoke!",
      "parentUuid": "42f42e74_ee5a5075",
      "revId": "2bd093fcb07fd16a47358a8aeb0fafe8ff7f3280",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "825c8718_9b09d809",
        "filename": "pc/sdp_offer_answer.cc",
        "patchSetId": 1
      },
      "lineNbr": 1995,
      "author": {
        "id": 5508
      },
      "writtenOn": "2022-02-03T13:43:30Z",
      "side": 1,
      "message": "OK, great - thanks for those details. Just to recap for my understanding:\n* For for every state change on the transport, we (in Chrome at least) update the state while holding the lock...\n* post a task to the main (js) thread that notifies the external implementation that it can...\n* call the transport\u0027s Information() method, that grabs the lock and copies the state and caches it.\n* every call to state(), reads the cached value.\n\nThat\u0027s async for sure and avoids an Invoke. I\u0027m assuming it\u0027s designed that way to combine the state() accessor with the onstatechanged notification. The lock might not be needed if a copy of the new state is simply bundled with the notification and the cache is only accessed from the main thread (and Information() is then only called from that thread), but I digress...\n\nThat clears things up for me. While the transport itself is called from the network thread (i.e. as far as `RTC_DCHECK_RUN_ON(owner_thread_);` methods goes), that code is never directly triggerable from the api pov or via the dtls_transport() accessors that the sender/receiver have. Interesting that the transceiver owns them though and that there\u0027s a special receivers_[0] receiver, despite the supposed seperation.\n\nSo, another question - is it conceivable that the transport that the transceiver is associated with (via the channel), is different from the receiver/sender transports?",
      "parentUuid": "a25e6d8a_e1699f4e",
      "revId": "2bd093fcb07fd16a47358a8aeb0fafe8ff7f3280",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    }
  ]
}