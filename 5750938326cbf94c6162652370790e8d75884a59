{
  "comments": [
    {
      "key": {
        "uuid": "1936e512_5ed3ad45",
        "filename": "api/task_queue/task_queue_base.h",
        "patchSetId": 8
      },
      "lineNbr": 27,
      "author": {
        "id": 5126
      },
      "writtenOn": "2019-01-17T10:08:42Z",
      "side": 1,
      "message": "If you guarantee this, why not go all the way and make Delete() fully synchronous? There\u0027s nothing else to wait for, right? Just a bunch of task destructors to run, and we can easily do that synchronously.\n\nI thought the point of the asynchronous delete was to not have to wait for tasks to finish executing.",
      "revId": "5750938326cbf94c6162652370790e8d75884a59",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9e3ff616_6359cf32",
        "filename": "api/task_queue/task_queue_base.h",
        "patchSetId": 8
      },
      "lineNbr": 27,
      "author": {
        "id": 5019
      },
      "writtenOn": "2019-01-17T10:55:17Z",
      "side": 1,
      "message": "There are other events to wait for.\ne.g. GCD delayed task are triggered after the configured period pass.\nDelete shouldn\u0027t wait for that, but TaskQueue object still need to exist to catch that event and delete the task.\nhttps://webrtc-review.googlesource.com/c/src/+/116489/14/rtc_base/task_queue_gcd.cc#75\n(there can be other reasons for postponing deallocation after Delete returns)\n\nDelete only have to wait(block) for the task that is already Running.",
      "parentUuid": "1936e512_5ed3ad45",
      "revId": "5750938326cbf94c6162652370790e8d75884a59",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ad450845_35655a95",
        "filename": "api/task_queue/task_queue_base.h",
        "patchSetId": 8
      },
      "lineNbr": 27,
      "author": {
        "id": 5126
      },
      "writtenOn": "2019-01-17T11:04:35Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "9e3ff616_6359cf32",
      "revId": "5750938326cbf94c6162652370790e8d75884a59",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9b725761_0c6b1f81",
        "filename": "api/task_queue/task_queue_factory.h",
        "patchSetId": 8
      },
      "lineNbr": 28,
      "author": {
        "id": 5126
      },
      "writtenOn": "2019-01-17T11:04:35Z",
      "side": 1,
      "message": "string_view?",
      "range": {
        "startLine": 28,
        "startChar": 6,
        "endLine": 28,
        "endChar": 17
      },
      "revId": "5750938326cbf94c6162652370790e8d75884a59",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "82265b5c_cdc50f31",
        "filename": "api/task_queue/task_queue_factory.h",
        "patchSetId": 8
      },
      "lineNbr": 28,
      "author": {
        "id": 5019
      },
      "writtenOn": "2019-01-17T11:39:11Z",
      "side": 1,
      "message": "would like to, but some implementations expect 0-terminated string\n(e.g. GCD pass the name to dispatch_queue_create, libevent rely on PlatformThread that expects conat char*, though that one is easier to change)",
      "parentUuid": "9b725761_0c6b1f81",
      "range": {
        "startLine": 28,
        "startChar": 6,
        "endLine": 28,
        "endChar": 17
      },
      "revId": "5750938326cbf94c6162652370790e8d75884a59",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a546caee_46287858",
        "filename": "api/task_queue/task_queue_factory.h",
        "patchSetId": 8
      },
      "lineNbr": 28,
      "author": {
        "id": 5126
      },
      "writtenOn": "2019-01-17T11:42:08Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "82265b5c_cdc50f31",
      "range": {
        "startLine": 28,
        "startChar": 6,
        "endLine": 28,
        "endChar": 17
      },
      "revId": "5750938326cbf94c6162652370790e8d75884a59",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    }
  ]
}