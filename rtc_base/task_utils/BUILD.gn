# Copyright (c) 2019 The WebRTC project authors. All Rights Reserved.
#
# Use of this source code is governed by a BSD-style license
# that can be found in the LICENSE file in the root of the source
# tree. An additional intellectual property rights grant can be found
# in the file PATENTS.  All contributing project authors may
# be found in the AUTHORS file in the root of the source tree.

import("../../webrtc.gni")

rtc_library("repeating_task") {
  sources = [
    "repeating_task.cc",
    "repeating_task.h",
  ]
  deps = [
    "..:logging",
    "..:timeutils",
    "../../api:sequence_checker",
    "../../api/task_queue",
    "../../api/task_queue:pending_task_safety_flag",
    "../../api/units:time_delta",
    "../../api/units:timestamp",
    "../../system_wrappers:system_wrappers",
  ]
  absl_deps = [ "//third_party/abseil-cpp/absl/functional:any_invocable" ]
}

rtc_library("inline_task_queue") {
  visibility = [ "*" ]
  sources = [
    "inline_task_queue.cc",
    "inline_task_queue.h",
  ]
  deps = [
    "..:macromagic",
    "..:refcount",
    "../../api:make_ref_counted",
    "../../api:scoped_refptr",
    "../../api/task_queue",
    "../../api/units:time_delta",
    "../synchronization:mutex",
    "../system:rtc_export",
  ]
  absl_deps = [ "//third_party/abseil-cpp/absl/functional:any_invocable" ]
}

if (rtc_include_tests) {
  rtc_library("task_utils_unittests") {
    testonly = true
    sources = [
      "inline_task_queue_unittest.cc",
      "repeating_task_unittest.cc",
    ]
    deps = [
      ":inline_task_queue",
      ":repeating_task",
      "..:platform_thread_types",
      "..:rtc_event",
      "..:rtc_task_queue",
      "..:task_queue_for_test",
      "../../api/task_queue",
      "../../api/task_queue:default_task_queue_factory",
      "../../api/task_queue:task_queue_test",
      "../../api/units:time_delta",
      "../../api/units:timestamp",
      "../../system_wrappers:system_wrappers",
      "../../test:test_support",
    ]
    absl_deps = [ "//third_party/abseil-cpp/absl/functional:any_invocable" ]
  }
}
