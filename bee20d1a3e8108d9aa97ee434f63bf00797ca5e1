{
  "comments": [
    {
      "key": {
        "uuid": "0738982b_6208314c",
        "filename": "rtc_base/task_queue_unittest.cc",
        "patchSetId": 1
      },
      "lineNbr": 378,
      "author": {
        "id": 5019
      },
      "writtenOn": "2019-01-30T11:51:20Z",
      "side": 1,
      "message": "make it struct to follow style (class shouldn\u0027t have public members and have different name convention for them)\n...or do not have struct at all:\n\nint shared_state \u003d 0;\n...\nqueue.PostTask([\u0026shared_state] { shared_state \u003d 1; });",
      "range": {
        "startLine": 377,
        "startChar": 2,
        "endLine": 378,
        "endChar": 10
      },
      "revId": "bee20d1a3e8108d9aa97ee434f63bf00797ca5e1",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fa3aa22d_7e98fc8f",
        "filename": "rtc_base/task_queue_unittest.cc",
        "patchSetId": 1
      },
      "lineNbr": 384,
      "author": {
        "id": 5019
      },
      "writtenOn": "2019-01-30T11:51:20Z",
      "side": 1,
      "message": "personally I do not like pronoun \u0027we\u0027 in comments as I\u0027m not sure who it reference to.\nMay be:\n// Post tasks from the queue to guarantee that 1st task won\u0027t run before second one is posted.",
      "range": {
        "startLine": 383,
        "startChar": 4,
        "endLine": 384,
        "endChar": 46
      },
      "revId": "bee20d1a3e8108d9aa97ee434f63bf00797ca5e1",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "96fc5e8d_a34e9a42",
        "filename": "rtc_base/task_queue_unittest.cc",
        "patchSetId": 1
      },
      "lineNbr": 387,
      "author": {
        "id": 5019
      },
      "writtenOn": "2019-01-30T11:51:20Z",
      "side": 1,
      "message": "probably also wait until all those task run. Right now it is not guaranteed and test would often succeed by accident: last task would never run and never would check the expectation.\ne.g.:\n\nrtc::Event done;\n... queue.PostTask([\u0026state, \u0026done] { EXPECT_EQ(state, 1); done.Set(); }\nEXPECT_TRUE(done.Wait(1000));",
      "revId": "bee20d1a3e8108d9aa97ee434f63bf00797ca5e1",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    }
  ]
}