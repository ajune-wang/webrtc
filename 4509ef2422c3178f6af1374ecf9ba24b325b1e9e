{
  "comments": [
    {
      "key": {
        "uuid": "852a5c34_908684de",
        "filename": "api/frame_transformer_interface.h",
        "patchSetId": 2
      },
      "lineNbr": 55,
      "author": {
        "id": 5125
      },
      "writtenOn": "2020-03-27T13:50:23Z",
      "side": 1,
      "message": "Please add a comment describing the class.",
      "range": {
        "startLine": 55,
        "startChar": 0,
        "endLine": 55,
        "endChar": 77
      },
      "revId": "4509ef2422c3178f6af1374ecf9ba24b325b1e9e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "23a39176_aa8a620f",
        "filename": "api/frame_transformer_interface.h",
        "patchSetId": 2
      },
      "lineNbr": 55,
      "author": {
        "id": 5126
      },
      "writtenOn": "2020-03-30T08:23:41Z",
      "side": 1,
      "message": "+1. Also docs for its method.",
      "parentUuid": "852a5c34_908684de",
      "range": {
        "startLine": 55,
        "startChar": 0,
        "endLine": 55,
        "endChar": 77
      },
      "revId": "4509ef2422c3178f6af1374ecf9ba24b325b1e9e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "15afdedf_11719043",
        "filename": "api/frame_transformer_interface.h",
        "patchSetId": 2
      },
      "lineNbr": 55,
      "author": {
        "id": 8594
      },
      "writtenOn": "2020-04-01T00:14:07Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "23a39176_aa8a620f",
      "range": {
        "startLine": 55,
        "startChar": 0,
        "endLine": 55,
        "endChar": 77
      },
      "revId": "4509ef2422c3178f6af1374ecf9ba24b325b1e9e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3aa0298f_8b0f8570",
        "filename": "api/frame_transformer_interface.h",
        "patchSetId": 2
      },
      "lineNbr": 58,
      "author": {
        "id": 5126
      },
      "writtenOn": "2020-03-30T08:23:41Z",
      "side": 1,
      "message": "CamelCase here too, as in the other CL?",
      "revId": "4509ef2422c3178f6af1374ecf9ba24b325b1e9e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fce14af8_fa930828",
        "filename": "api/frame_transformer_interface.h",
        "patchSetId": 2
      },
      "lineNbr": 58,
      "author": {
        "id": 8594
      },
      "writtenOn": "2020-04-01T00:14:07Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3aa0298f_8b0f8570",
      "revId": "4509ef2422c3178f6af1374ecf9ba24b325b1e9e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6efd78d5_45447e3d",
        "filename": "api/frame_transformer_interface.h",
        "patchSetId": 2
      },
      "lineNbr": 59,
      "author": {
        "id": 5126
      },
      "writtenOn": "2020-03-30T08:23:41Z",
      "side": 1,
      "message": "The entire point of this interface appears to be to be able to produce a const RTPHeader\u0026 on demand. Is the \"on demand\" part important, or would it be possible to just pass around a const RTPHeader\u0026 or a const RTPHeader* instead? (It\u0027s OK if it\u0027s not possible---just checking.)",
      "revId": "4509ef2422c3178f6af1374ecf9ba24b325b1e9e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b7036f29_f52421d6",
        "filename": "api/frame_transformer_interface.h",
        "patchSetId": 2
      },
      "lineNbr": 59,
      "author": {
        "id": 8594
      },
      "writtenOn": "2020-04-01T00:14:07Z",
      "side": 1,
      "message": "No, it makes the header of the frame accessible from the upper layer. This way we will be able to expose the whole header to the application (if needed) as the web api evolves. For now the blink layer will compile a vector of csrcs using the info in the header, it might do more in the future.",
      "parentUuid": "6efd78d5_45447e3d",
      "revId": "4509ef2422c3178f6af1374ecf9ba24b325b1e9e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "143631eb_1a404f0b",
        "filename": "audio/channel_receive.cc",
        "patchSetId": 2
      },
      "lineNbr": 172,
      "author": {
        "id": 5125
      },
      "writtenOn": "2020-03-27T13:50:23Z",
      "side": 1,
      "message": "Since the name is so very similar to the name of the ReceivePacket method, please add a description of this method.\nAlso, please consider if it would be possible to change the name to something less similar.",
      "range": {
        "startLine": 172,
        "startChar": 7,
        "endLine": 172,
        "endChar": 22
      },
      "revId": "4509ef2422c3178f6af1374ecf9ba24b325b1e9e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "00bc6546_e81e382f",
        "filename": "audio/channel_receive.cc",
        "patchSetId": 2
      },
      "lineNbr": 172,
      "author": {
        "id": 8594
      },
      "writtenOn": "2020-04-01T00:14:07Z",
      "side": 1,
      "message": "Removed DoReceivePacket after moving the frame transformation where ReceivePacket is called, in OnRtpPacket.",
      "parentUuid": "143631eb_1a404f0b",
      "range": {
        "startLine": 172,
        "startChar": 7,
        "endLine": 172,
        "endChar": 22
      },
      "revId": "4509ef2422c3178f6af1374ecf9ba24b325b1e9e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c94a0f04_bc76e5ec",
        "filename": "audio/channel_receive.cc",
        "patchSetId": 2
      },
      "lineNbr": 498,
      "author": {
        "id": 5125
      },
      "writtenOn": "2020-03-27T13:50:23Z",
      "side": 1,
      "message": "As commented in another CL. It would be nice if it would be possible to bundle the Init call in the constructor of the delegate.\n\nThe benefit would be both readability and less easy for the user to use this wrongly.",
      "range": {
        "startLine": 498,
        "startChar": 4,
        "endLine": 498,
        "endChar": 40
      },
      "revId": "4509ef2422c3178f6af1374ecf9ba24b325b1e9e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c2a31fa4_57af5b78",
        "filename": "audio/channel_receive.cc",
        "patchSetId": 2
      },
      "lineNbr": 498,
      "author": {
        "id": 5508
      },
      "writtenOn": "2020-03-28T01:42:11Z",
      "side": 1,
      "message": "+1. Also opens the possibility of making frame_transformer_delegate_ const, which simplifies locking and thread usage.",
      "parentUuid": "c94a0f04_bc76e5ec",
      "range": {
        "startLine": 498,
        "startChar": 4,
        "endLine": 498,
        "endChar": 40
      },
      "revId": "4509ef2422c3178f6af1374ecf9ba24b325b1e9e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3011bd77_2ad3dc7c",
        "filename": "audio/channel_receive.cc",
        "patchSetId": 2
      },
      "lineNbr": 498,
      "author": {
        "id": 8594
      },
      "writtenOn": "2020-04-01T00:14:07Z",
      "side": 1,
      "message": "As I mentioned in the other CL, I cannot call init in the constructor because the delegate implements RefCountInterface, which does not allow pass |this| before it is fully constructed.",
      "parentUuid": "c2a31fa4_57af5b78",
      "range": {
        "startLine": 498,
        "startChar": 4,
        "endLine": 498,
        "endChar": 40
      },
      "revId": "4509ef2422c3178f6af1374ecf9ba24b325b1e9e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c0e76f40_c07df780",
        "filename": "audio/channel_receive.cc",
        "patchSetId": 2
      },
      "lineNbr": 591,
      "author": {
        "id": 5125
      },
      "writtenOn": "2020-03-27T13:50:23Z",
      "side": 1,
      "message": "Looking at this usage, one very descriptive name would be\nHandlePacketReceivalInTheAbsenceOfAFrameTransformerDelegate.\n\nI definitely don\u0027t think that name should be used but it would be very nice to have a name that similarly to that is able to convey what this method actually does, so that the code becomes self-describing.",
      "range": {
        "startLine": 591,
        "startChar": 2,
        "endLine": 591,
        "endChar": 17
      },
      "revId": "4509ef2422c3178f6af1374ecf9ba24b325b1e9e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e969d5e8_5242ea6f",
        "filename": "audio/channel_receive.cc",
        "patchSetId": 2
      },
      "lineNbr": 591,
      "author": {
        "id": 8594
      },
      "writtenOn": "2020-04-01T00:14:07Z",
      "side": 1,
      "message": "I realized I can get rid of the extra DoReceivePacket by moving the frame transformation in OnRtpPacket where ReceivePacket is called.",
      "parentUuid": "c0e76f40_c07df780",
      "range": {
        "startLine": 591,
        "startChar": 2,
        "endLine": 591,
        "endChar": 17
      },
      "revId": "4509ef2422c3178f6af1374ecf9ba24b325b1e9e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8425f7f7_944e9948",
        "filename": "audio/channel_receive_frame_transformer_delegate.cc",
        "patchSetId": 2
      },
      "lineNbr": 30,
      "author": {
        "id": 5508
      },
      "writtenOn": "2020-03-28T01:42:11Z",
      "side": 1,
      "message": "thread/sequence checks to guard against races between get/set data?\n\n(could make the sequence/thread checkers enabled only for dcheck enabled builds)",
      "revId": "4509ef2422c3178f6af1374ecf9ba24b325b1e9e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3e5cbc92_db7b9e1a",
        "filename": "audio/channel_receive_frame_transformer_delegate.cc",
        "patchSetId": 2
      },
      "lineNbr": 59,
      "author": {
        "id": 5125
      },
      "writtenOn": "2020-03-27T13:50:23Z",
      "side": 1,
      "message": "Is there a strong reason for why this cannot be put into the constructor?",
      "range": {
        "startLine": 54,
        "startChar": 0,
        "endLine": 59,
        "endChar": 1
      },
      "revId": "4509ef2422c3178f6af1374ecf9ba24b325b1e9e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9912c497_dead74b5",
        "filename": "audio/channel_receive_frame_transformer_delegate.cc",
        "patchSetId": 2
      },
      "lineNbr": 59,
      "author": {
        "id": 8594
      },
      "writtenOn": "2020-04-01T00:14:07Z",
      "side": 1,
      "message": "Explained above.",
      "parentUuid": "3e5cbc92_db7b9e1a",
      "range": {
        "startLine": 54,
        "startChar": 0,
        "endLine": 59,
        "endChar": 1
      },
      "revId": "4509ef2422c3178f6af1374ecf9ba24b325b1e9e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d2863723_134207e5",
        "filename": "audio/channel_receive_frame_transformer_delegate.cc",
        "patchSetId": 2
      },
      "lineNbr": 65,
      "author": {
        "id": 5125
      },
      "writtenOn": "2020-03-27T13:50:23Z",
      "side": 1,
      "message": "What does this line do? Does it create a new callback? Or an empty callback?",
      "range": {
        "startLine": 65,
        "startChar": 2,
        "endLine": 65,
        "endChar": 51
      },
      "revId": "4509ef2422c3178f6af1374ecf9ba24b325b1e9e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f97599b3_61fe1df3",
        "filename": "audio/channel_receive_frame_transformer_delegate.cc",
        "patchSetId": 2
      },
      "lineNbr": 65,
      "author": {
        "id": 8594
      },
      "writtenOn": "2020-04-01T00:14:07Z",
      "side": 1,
      "message": "It creates an empty callback, and the std::function bool operator will return false when tested.",
      "parentUuid": "d2863723_134207e5",
      "range": {
        "startLine": 65,
        "startChar": 2,
        "endLine": 65,
        "endChar": 51
      },
      "revId": "4509ef2422c3178f6af1374ecf9ba24b325b1e9e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "67303de7_2b9e2e4a",
        "filename": "audio/channel_receive_frame_transformer_delegate.cc",
        "patchSetId": 2
      },
      "lineNbr": 76,
      "author": {
        "id": 5125
      },
      "writtenOn": "2020-03-27T13:50:23Z",
      "side": 1,
      "message": "This is always returning 0. If this is intended for future use, please add a comment about that.",
      "range": {
        "startLine": 76,
        "startChar": 2,
        "endLine": 76,
        "endChar": 11
      },
      "revId": "4509ef2422c3178f6af1374ecf9ba24b325b1e9e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "30e86df2_8a7599be",
        "filename": "audio/channel_receive_frame_transformer_delegate.cc",
        "patchSetId": 2
      },
      "lineNbr": 76,
      "author": {
        "id": 8594
      },
      "writtenOn": "2020-04-01T00:14:07Z",
      "side": 1,
      "message": "This shouldn\u0027t return anything, removed.",
      "parentUuid": "67303de7_2b9e2e4a",
      "range": {
        "startLine": 76,
        "startChar": 2,
        "endLine": 76,
        "endChar": 11
      },
      "revId": "4509ef2422c3178f6af1374ecf9ba24b325b1e9e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f3f26cc5_8a9115cb",
        "filename": "audio/channel_receive_frame_transformer_delegate.cc",
        "patchSetId": 2
      },
      "lineNbr": 91,
      "author": {
        "id": 5125
      },
      "writtenOn": "2020-03-27T13:50:23Z",
      "side": 1,
      "message": "I know too little about std::function I realize.\nWill assigning receive_frame_callback_ \u003d ReceiveFrameCallback();\nensure that \n(!receive_frame_callback_) becomes true?",
      "range": {
        "startLine": 91,
        "startChar": 7,
        "endLine": 91,
        "endChar": 30
      },
      "revId": "4509ef2422c3178f6af1374ecf9ba24b325b1e9e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "52062833_bdf93ef6",
        "filename": "audio/channel_receive_frame_transformer_delegate.cc",
        "patchSetId": 2
      },
      "lineNbr": 91,
      "author": {
        "id": 8594
      },
      "writtenOn": "2020-04-01T00:14:07Z",
      "side": 1,
      "message": "Yes, the bool operator of std::function returns if the function is callable or not.",
      "parentUuid": "f3f26cc5_8a9115cb",
      "range": {
        "startLine": 91,
        "startChar": 7,
        "endLine": 91,
        "endChar": 30
      },
      "revId": "4509ef2422c3178f6af1374ecf9ba24b325b1e9e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5bbd8706_3d23eb9d",
        "filename": "audio/channel_receive_frame_transformer_delegate.h",
        "patchSetId": 2
      },
      "lineNbr": 22,
      "author": {
        "id": 5125
      },
      "writtenOn": "2020-03-27T13:50:23Z",
      "side": 1,
      "message": "Please add a comment describing the class.\nAlso, I think there should be an empty row between the namespace and the class",
      "range": {
        "startLine": 22,
        "startChar": 0,
        "endLine": 22,
        "endChar": 80
      },
      "revId": "4509ef2422c3178f6af1374ecf9ba24b325b1e9e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "084804b5_0fd0ef45",
        "filename": "audio/channel_receive_frame_transformer_delegate.h",
        "patchSetId": 2
      },
      "lineNbr": 22,
      "author": {
        "id": 8594
      },
      "writtenOn": "2020-04-01T00:14:07Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5bbd8706_3d23eb9d",
      "range": {
        "startLine": 22,
        "startChar": 0,
        "endLine": 22,
        "endChar": 80
      },
      "revId": "4509ef2422c3178f6af1374ecf9ba24b325b1e9e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "719eee01_ff09637f",
        "filename": "audio/channel_receive_frame_transformer_delegate.h",
        "patchSetId": 2
      },
      "lineNbr": 42,
      "author": {
        "id": 5125
      },
      "writtenOn": "2020-03-27T13:50:23Z",
      "side": 1,
      "message": "Please add comments.",
      "range": {
        "startLine": 32,
        "startChar": 2,
        "endLine": 42,
        "endChar": 78
      },
      "revId": "4509ef2422c3178f6af1374ecf9ba24b325b1e9e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d59b809b_1a0db078",
        "filename": "audio/channel_receive_frame_transformer_delegate.h",
        "patchSetId": 2
      },
      "lineNbr": 42,
      "author": {
        "id": 8594
      },
      "writtenOn": "2020-04-01T00:14:07Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "719eee01_ff09637f",
      "range": {
        "startLine": 32,
        "startChar": 2,
        "endLine": 42,
        "endChar": 78
      },
      "revId": "4509ef2422c3178f6af1374ecf9ba24b325b1e9e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "34c18532_4bc7454d",
        "filename": "audio/channel_receive_frame_transformer_delegate.h",
        "patchSetId": 2
      },
      "lineNbr": 53,
      "author": {
        "id": 5125
      },
      "writtenOn": "2020-03-27T13:50:23Z",
      "side": 1,
      "message": "On the send-side some of these are protected with a lock. Is this not needed herein?",
      "range": {
        "startLine": 48,
        "startChar": 2,
        "endLine": 53,
        "endChar": 39
      },
      "revId": "4509ef2422c3178f6af1374ecf9ba24b325b1e9e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "044e9d6c_e5de3299",
        "filename": "audio/channel_receive_frame_transformer_delegate.h",
        "patchSetId": 2
      },
      "lineNbr": 53,
      "author": {
        "id": 8594
      },
      "writtenOn": "2020-04-01T00:14:07Z",
      "side": 1,
      "message": "It is not needed here because the receive channel operates on a single thread, construction to receiving packets to destruction. The send channel is created and destroyed on a thread, and sends audio on the encoder queue.",
      "parentUuid": "34c18532_4bc7454d",
      "range": {
        "startLine": 48,
        "startChar": 2,
        "endLine": 53,
        "endChar": 39
      },
      "revId": "4509ef2422c3178f6af1374ecf9ba24b325b1e9e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    }
  ]
}