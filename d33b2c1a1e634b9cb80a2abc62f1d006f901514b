{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "9081c520_baf0a841",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 5142
      },
      "writtenOn": "2023-03-23T11:48:51Z",
      "side": 1,
      "message": "+philipel@ for builtin_video_bitrate_allocator_factory.cc stamping again ðŸ˜Š",
      "revId": "d33b2c1a1e634b9cb80a2abc62f1d006f901514b",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8498a472_e4678da6",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 5524
      },
      "writtenOn": "2023-03-23T13:41:12Z",
      "side": 1,
      "message": "Can you give some more context what \"behave like singlecast\" means?\nHistorically, setting up simulcast and then disabling all but one layer has not been the same as singlecast - as \"true\" singlecast uses the QP scaler and no temporal layers, while the single-active-layer case still uses only bandwidth adaptation and keeps the temporal layering.\n\nIs that still the case here? Is there a difference in how VP8 vs VP9 works?",
      "revId": "d33b2c1a1e634b9cb80a2abc62f1d006f901514b",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "97625d07_bea6a6d9",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 5142
      },
      "writtenOn": "2023-03-23T14:19:55Z",
      "side": 1,
      "message": "This CL should not affect any existing QP scaler/BW adaptation differences that may be present as far as I am aware.\n\n\u003e Is that still the case here? Is there a difference in how VP8 vs VP9 works?\n\nThere is no difference AFAIK. I have not found any \"if codec\" gates relating to this.\n\n\u003e what \"behave like singlecast\" means?\n\nWhen I say VP9 simulcast behaves differently from VP9 SVC, I\u0027m talking about things like it having a SimulcastRateAllocator instead of a SvcRateAllocator (something we want to fix for the next milestone). The intent of this CL is to minimize these differences, so that even if you do {active,inactive,inactive}Â you still get SvcRateAllocator.\n\nThis allows apps to specify scalability mode on the 0-th layer and get the SvcRateAllocator as long as the other two layers are inactive, which is what would have happened in the legacy SVC path anyway due to automatically removing the other layers.",
      "parentUuid": "8498a472_e4678da6",
      "revId": "d33b2c1a1e634b9cb80a2abc62f1d006f901514b",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "557a2acc_de77220c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 5524
      },
      "writtenOn": "2023-03-23T14:42:59Z",
      "side": 1,
      "message": "Ack, thanks.",
      "parentUuid": "97625d07_bea6a6d9",
      "revId": "d33b2c1a1e634b9cb80a2abc62f1d006f901514b",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "90bbcd57_e3f413e4",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 5527
      },
      "writtenOn": "2023-03-23T14:46:25Z",
      "side": 1,
      "message": "RSLGTM",
      "revId": "d33b2c1a1e634b9cb80a2abc62f1d006f901514b",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "78ef33f6_6ce933ed",
        "filename": "api/video_codecs/video_codec.cc",
        "patchSetId": 4
      },
      "lineNbr": 155,
      "author": {
        "id": 5524
      },
      "writtenOn": "2023-03-23T13:41:12Z",
      "side": 1,
      "message": "nit: do we support the use case of _all_ layers being inactive to say that encoding is paused? Or is that an illegal setting and pausing should be done with bps \u003d\u003d 0? If the former then this should probably return false for that case. Otherwise perhaps dcheck?",
      "range": {
        "startLine": 155,
        "startChar": 17,
        "endLine": 155,
        "endChar": 56
      },
      "revId": "d33b2c1a1e634b9cb80a2abc62f1d006f901514b",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "808b6458_a54936e3",
        "filename": "api/video_codecs/video_codec.cc",
        "patchSetId": 4
      },
      "lineNbr": 155,
      "author": {
        "id": 5142
      },
      "writtenOn": "2023-03-23T14:19:55Z",
      "side": 1,
      "message": "All encodings being inactive is perfectly legal - this is common practise with the JavaScript API. Most apps would use `active`, much fewer apps would use `maxBitrate` and fewer still would mess with field trials. It is critical that this works or else there could be a serious privacy bug.\n\nThis is why I was so scared to read the old comment to \"Force the first stream to always be active\" in VP9, since at first glance this seems like a serious violation. But as the test shows, it is working thanks to either spatial layer \"active\" flag or bitrates being capped to 0.",
      "parentUuid": "78ef33f6_6ce933ed",
      "range": {
        "startLine": 155,
        "startChar": 17,
        "endLine": 155,
        "endChar": 56
      },
      "revId": "d33b2c1a1e634b9cb80a2abc62f1d006f901514b",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "At least one maximum vote for label \u0027Code-Review\u0027 is required"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader AND -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1 AND -label:Code-Review\u003dMIN"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader AND -label:Code-Review=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Code-Review=MAX,user=non_uploader"],"failingAtoms":["label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1 AND -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1","label:Code-Review=MIN"]}
      },
      "patchSetCommitId": "d33b2c1a1e634b9cb80a2abc62f1d006f901514b",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["is:review-enforced_gerrit"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforcement-satisfied_gerrit"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforcement-satisfied_gerrit"]}
      },
      "patchSetCommitId": "d33b2c1a1e634b9cb80a2abc62f1d006f901514b",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {
        "value": true
      }
    }
  ]
}