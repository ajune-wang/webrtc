{
  "comments": [
    {
      "key": {
        "uuid": "4c0e9b11_ac9f5c6c",
        "filename": "rtc_base/stringencode.cc",
        "patchSetId": 7
      },
      "lineNbr": 425,
      "author": {
        "id": 6720
      },
      "writtenOn": "2018-07-05T08:38:11Z",
      "side": 1,
      "message": "for compile time constants, which this is since you can use it to define the size of |buf|, use kBufferLength.  However, for array sizes, the preference is to use the array itself rather than an additional variable to get the size of the array.  So this should probably be something like:\n\nchar buf[32];\nconst int len \u003d snprintf(\u0026buf[0], arraysize(buf), \"%hd\", s);\nreturn std::string(\u0026buf[0], len);\n\n(I\u0027m using explicit \u0026arr[0] notation for the first element in the array, which is a nit in itself but it\u0027s the explicit way to do it for any sequence container without relying on implicit casting).",
      "revId": "0fdeec3bfcfb240f265974977a4eb61b13ed4dc4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1eb2d1b0_03ea0b4f",
        "filename": "rtc_base/stringencode.cc",
        "patchSetId": 7
      },
      "lineNbr": 427,
      "author": {
        "id": 6720
      },
      "writtenOn": "2018-07-05T08:38:11Z",
      "side": 1,
      "message": "nit: snprintf returns the number of characters written, so you could avoid a call to strlen() inside std::string() by passing that information to the ctor.",
      "range": {
        "startLine": 427,
        "startChar": 7,
        "endLine": 427,
        "endChar": 15
      },
      "revId": "0fdeec3bfcfb240f265974977a4eb61b13ed4dc4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6f33929b_93cc6faa",
        "filename": "rtc_base/stringencode.cc",
        "patchSetId": 7
      },
      "lineNbr": 427,
      "author": {
        "id": 5126
      },
      "writtenOn": "2018-07-05T09:10:09Z",
      "side": 1,
      "message": "Almost. It returns\n\n  \"[the n]umber of characters that would have been written for a sufficiently large buffer if successful (not including the terminating null character), or a negative value if an error occurred. Thus, the (null-terminated) output has been completely written if and only if the returned value is nonnegative and less than buf_size.\"\n  --- https://en.cppreference.com/w/cpp/io/c/fprintf\n\nSo, since the buffer here is supposed to always be large enough, the right thing to do would be to DCHECK that the returned value is less than 32, and then use it as you suggest.",
      "parentUuid": "1eb2d1b0_03ea0b4f",
      "range": {
        "startLine": 427,
        "startChar": 7,
        "endLine": 427,
        "endChar": 15
      },
      "revId": "0fdeec3bfcfb240f265974977a4eb61b13ed4dc4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    }
  ]
}