{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "9bc4134c_538e63d2",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5508
      },
      "writtenOn": "2021-02-11T09:56:47Z",
      "side": 1,
      "message": "marking as -1 since I\u0027m pretty sure that those new locks are not needed.\nCan you add information to the cl description for why they\u0027re needed?",
      "revId": "536721cd27c35ef8d8907822aa6f7510598a7f53",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "16892b6f_395275e9",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5508
      },
      "writtenOn": "2021-02-11T09:59:19Z",
      "side": 1,
      "message": "adding questions for why I think that the locks shouldn\u0027t be needed.",
      "revId": "536721cd27c35ef8d8907822aa6f7510598a7f53",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c354f90f_7f7a64d3",
        "filename": "modules/utility/source/process_thread_impl.cc",
        "patchSetId": 1
      },
      "lineNbr": 80,
      "author": {
        "id": 5508
      },
      "writtenOn": "2021-02-11T09:59:19Z",
      "side": 1,
      "message": "this is reading stop_ which should be safe on this thread (we\u0027re on the only thread that can write to this value).",
      "revId": "536721cd27c35ef8d8907822aa6f7510598a7f53",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a6aacb33_abf6decd",
        "filename": "modules/utility/source/process_thread_impl.cc",
        "patchSetId": 1
      },
      "lineNbr": 80,
      "author": {
        "id": 5234
      },
      "writtenOn": "2021-02-11T10:20:06Z",
      "side": 1,
      "message": "Ack.",
      "parentUuid": "c354f90f_7f7a64d3",
      "revId": "536721cd27c35ef8d8907822aa6f7510598a7f53",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "138fddda_7eeba775",
        "filename": "modules/utility/source/process_thread_impl.cc",
        "patchSetId": 1
      },
      "lineNbr": 105,
      "author": {
        "id": 5508
      },
      "writtenOn": "2021-02-11T09:59:19Z",
      "side": 1,
      "message": "what could be competing with access here?",
      "revId": "536721cd27c35ef8d8907822aa6f7510598a7f53",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7529a301_88330f87",
        "filename": "modules/utility/source/process_thread_impl.cc",
        "patchSetId": 1
      },
      "lineNbr": 105,
      "author": {
        "id": 5234
      },
      "writtenOn": "2021-02-11T10:20:06Z",
      "side": 1,
      "message": "Nothing, I think, but not locking violates the RTC_GUARDED_BY annotation.",
      "parentUuid": "138fddda_7eeba775",
      "revId": "536721cd27c35ef8d8907822aa6f7510598a7f53",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b7ff16c1_24fbbfad",
        "filename": "modules/utility/source/process_thread_impl.h",
        "patchSetId": 1
      },
      "lineNbr": 94,
      "author": {
        "id": 5087
      },
      "writtenOn": "2021-02-09T10:41:02Z",
      "side": 1,
      "message": "Is this still relevant?\n\nIt looks like the layout has changed since this comment was added so maybe the issue has been fixed?",
      "range": {
        "startLine": 89,
        "startChar": 2,
        "endLine": 94,
        "endChar": 44
      },
      "revId": "536721cd27c35ef8d8907822aa6f7510598a7f53",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b3855f6a_901ca299",
        "filename": "modules/utility/source/process_thread_impl.h",
        "patchSetId": 1
      },
      "lineNbr": 94,
      "author": {
        "id": 5508
      },
      "writtenOn": "2021-02-11T09:56:47Z",
      "side": 1,
      "message": "Fine to remove. I think we\u0027ll know soon enough via bots if this is still an issue.",
      "parentUuid": "b7ff16c1_24fbbfad",
      "range": {
        "startLine": 89,
        "startChar": 2,
        "endLine": 94,
        "endChar": 44
      },
      "revId": "536721cd27c35ef8d8907822aa6f7510598a7f53",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b0ccdf10_7b290c37",
        "filename": "modules/utility/source/process_thread_impl.h",
        "patchSetId": 1
      },
      "lineNbr": 105,
      "author": {
        "id": 5234
      },
      "writtenOn": "2021-02-11T10:20:06Z",
      "side": 1,
      "message": "I think I understand the access pattern now: `stop_` is only ever written by the constructor thread. Read from the process thread, which takes the mutex. The constructor thread then needs to take the mutex only when (i) modifying the value, and (ii) the process thread actually is running. I think we\u0027ve discussed using similar access pattern in other places.\n\nIs there a way to express that to the compiler? Otherwise, I can document it (\"used to guard stop_\" as claimed above isn\u0027t accurate, imo), and delete the RTC_GUARDED_BY annotation.",
      "range": {
        "startLine": 105,
        "startChar": 2,
        "endLine": 105,
        "endChar": 35
      },
      "revId": "536721cd27c35ef8d8907822aa6f7510598a7f53",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "691fcf17_f125f550",
        "filename": "modules/utility/source/process_thread_impl.h",
        "patchSetId": 1
      },
      "lineNbr": 105,
      "author": {
        "id": 5087
      },
      "writtenOn": "2021-02-11T10:29:34Z",
      "side": 1,
      "message": "\u003e I think I understand the access pattern now: `stop_` is only ever written by the constructor thread. Read from the process thread, which takes the mutex. The constructor thread then needs to take the mutex only when (i) modifying the value, and (ii) the process thread actually is running. I think we\u0027ve discussed using similar access pattern in other places.\n\u003e \n\u003e Is there a way to express that to the compiler? Otherwise, I can document it (\"used to guard stop_\" as claimed above isn\u0027t accurate, imo), and delete the RTC_GUARDED_BY annotation.\n\nA possibility it is to add the thread annotations and annotate the functions where we are sure we don\u0027t need to lock with RTC_NO_THREAD_SAFETY_ANALYSIS and adding a comment for future readers.\n\nThis way, the two functions are the only ones to be able to workaround the compile time warning/error while future usage outside of them will be enforced at compile time (pushing the person making the change to think about the safety of their change).",
      "parentUuid": "b0ccdf10_7b290c37",
      "range": {
        "startLine": 105,
        "startChar": 2,
        "endLine": 105,
        "endChar": 35
      },
      "revId": "536721cd27c35ef8d8907822aa6f7510598a7f53",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    }
  ]
}