{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "3f4d0000_d981316d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 8038
      },
      "writtenOn": "2021-07-02T14:35:20Z",
      "side": 1,
      "message": "Happy friday ðŸ˜Š\n\nI took a stab at refactoring audio receive stream as discussed in https://webrtc-review.googlesource.com/c/src/+/224085/12#message-d45667997fef584204cd35dc3de4db489f9aa438\n\nThere is no logical reason for these classes to co-exist (such as different responsibilities) and some state was even duplicated between the classes.\n\nThis will remove one step when wiring lower level things like parameters and stats to peerconnection.",
      "revId": "0daaba787f2d617f05bad9ff8facd9984bd63b5a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "800acd43_03d6a973",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 5119
      },
      "writtenOn": "2021-07-02T14:39:37Z",
      "side": 1,
      "message": "Good initiative, good work! I do not have time to review this today, but will look at it on Monday.",
      "parentUuid": "3f4d0000_d981316d",
      "revId": "0daaba787f2d617f05bad9ff8facd9984bd63b5a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7fd2fa7a_76d149ad",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 5119
      },
      "writtenOn": "2021-07-05T11:32:49Z",
      "side": 1,
      "message": "I started looking and this is a pretty big CL (although I understand it is mainly moving logic from ChannelReceive into AudioReceiveStream.) I would like to see it split into smaller refactorings. For example:\n\n1.\nCan either of the interfaces (RtpPacketSinkInterface or RtcpPacketTypeCounterObserver) be split off independently?\n\n2.\nAfter this CL, audio_receive_stream.cc is over 1000 lines of code which sounds like slightly more than a single responsibility, what pieces can really be split off into separete objects or utilities? channel_receive.cc has this comment in the same vein, and looks like a good place to start:\n  // Thread checkers document and lock usage of some methods to specific threads\n  // we know about. The goal is to eventually split up voe::ChannelReceive into\n  // parts with single-threaded semantics, and thereby reduce the need for\n  // locks.\n\nDoing these things after this CL is more difficult since all AudioReceiveStream and all ChannelReceive state is merged, making it difficult to track which pieces belong together due to the sheer size of the class.\n\n\nDoes that seem doable?",
      "parentUuid": "800acd43_03d6a973",
      "revId": "0daaba787f2d617f05bad9ff8facd9984bd63b5a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    }
  ]
}