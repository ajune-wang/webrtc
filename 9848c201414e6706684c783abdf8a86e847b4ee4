{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "354d0ec7_88c4e098",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 7755
      },
      "writtenOn": "2020-11-01T19:55:15Z",
      "side": 1,
      "message": "improving the shift was actually easier than I expected and the new version is much easier to read!\n\nNow ideally this would use some kind of ring buffer to avoid the SetData calls but I didn\u0027t see a data structure that would fit?",
      "revId": "9848c201414e6706684c783abdf8a86e847b4ee4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7034786e_4b7e3610",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 6876
      },
      "writtenOn": "2021-04-13T15:36:44Z",
      "side": 1,
      "message": "Sorry for the delay on reviewing this CL. From our last conversation, I thought that more changes were expected but I was wrong and then I forgot about this.\n\nThe new changes look good but I have a minor question. \n\nKind regards, \nJesus",
      "revId": "9848c201414e6706684c783abdf8a86e847b4ee4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7d8b0dbd_833bb526",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 7755
      },
      "writtenOn": "2021-04-22T17:01:59Z",
      "side": 1,
      "message": "while I viewed this as a blocker :-)\nTurned out to be a great change since we need variable redundancy, switching to email...",
      "parentUuid": "7034786e_4b7e3610",
      "revId": "9848c201414e6706684c783abdf8a86e847b4ee4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ecb98a32_cb546dd6",
        "filename": "modules/audio_coding/codecs/red/audio_encoder_copy_red.cc",
        "patchSetId": 4
      },
      "lineNbr": 137,
      "author": {
        "id": 6876
      },
      "writtenOn": "2021-04-13T15:36:44Z",
      "side": 1,
      "message": "do we need to do this when there is no redundant encoding, case header_length_bytes \u003d\u003d 0? that is, do we need to do this when due to the lack of redundant payloads we are encoding without wrapping the original encoding into RED?",
      "range": {
        "startLine": 137,
        "startChar": 2,
        "endLine": 137,
        "endChar": 33
      },
      "revId": "9848c201414e6706684c783abdf8a86e847b4ee4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "13eae15e_ce84c17f",
        "filename": "modules/audio_coding/codecs/red/audio_encoder_copy_red.cc",
        "patchSetId": 4
      },
      "lineNbr": 137,
      "author": {
        "id": 7755
      },
      "writtenOn": "2021-04-22T17:01:59Z",
      "side": 1,
      "message": "In general I didn\u0027t understand the use of info.redundant but didn\u0027t want to change it either. It seems that this was a more generic mechanism also used for other things but those other things were removed.",
      "parentUuid": "ecb98a32_cb546dd6",
      "range": {
        "startLine": 137,
        "startChar": 2,
        "endLine": 137,
        "endChar": 33
      },
      "revId": "9848c201414e6706684c783abdf8a86e847b4ee4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "12a05d35_da51b1b1",
        "filename": "modules/audio_coding/codecs/red/audio_encoder_copy_red.cc",
        "patchSetId": 4
      },
      "lineNbr": 137,
      "author": {
        "id": 6876
      },
      "writtenOn": "2021-04-23T06:09:22Z",
      "side": 1,
      "message": "I have not tracked how info.redundant is used but we should not change it when we are going to forward a packet with the original encoding payload and not the RED payload. \n\nDigging a bit on the history, I see that from this CL https://webrtc-review.googlesource.com/c/src/+/176371 we changed the implementation from always returning a RED payload to returning a RED payload or an original payload when no redundancy was available. We probably missed that the redundant field on info should not be modified when returning a packet with the original payload that has no redundancy. \n\nWould you mind putting that line inside an if (header_length_bytes \u003e 0)?",
      "parentUuid": "13eae15e_ce84c17f",
      "range": {
        "startLine": 137,
        "startChar": 2,
        "endLine": 137,
        "endChar": 33
      },
      "revId": "9848c201414e6706684c783abdf8a86e847b4ee4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    }
  ]
}