{
  "comments": [
    {
      "key": {
        "uuid": "d602bd51_d80e1711",
        "filename": "common_audio/BUILD.gn",
        "patchSetId": 1
      },
      "lineNbr": 260,
      "author": {
        "id": 5087
      },
      "writtenOn": "2020-06-03T07:02:20Z",
      "side": 1,
      "message": "A new dependency is needed on this target:\n\n\"../system_wrappers:cpu_features_api\"\n\nBecause of system_wrappers/include/cpu_features_wrapper.h.\n\n(See the red bots below).",
      "range": {
        "startLine": 260,
        "startChar": 4,
        "endLine": 260,
        "endChar": 8
      },
      "revId": "101fc6ec8d21fc04a7ccdfd18d7a2c97e8e7b555",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b3952d55_4bb42934",
        "filename": "common_audio/resampler/sinc_resampler_sse.cc",
        "patchSetId": 1
      },
      "lineNbr": 25,
      "author": {
        "id": 5125
      },
      "writtenOn": "2020-06-03T08:36:06Z",
      "side": 1,
      "message": "Would it make sense to change this naming (as well as the naming of the file) with _x86 instead of _sse to reflect that this is no longer only using SSE ?",
      "range": {
        "startLine": 25,
        "startChar": 21,
        "endLine": 25,
        "endChar": 33
      },
      "revId": "101fc6ec8d21fc04a7ccdfd18d7a2c97e8e7b555",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "43954022_377c596d",
        "filename": "common_audio/resampler/sinc_resampler_sse.cc",
        "patchSetId": 1
      },
      "lineNbr": 29,
      "author": {
        "id": 5125
      },
      "writtenOn": "2020-06-03T08:36:06Z",
      "side": 1,
      "message": "While this works, I think it is better to place this into the sinc_resampler.cc file, since a similar check is there done for SSE2.\n(https://source.chromium.org/chromium/chromium/src/+/master:third_party/webrtc/common_audio/resampler/sinc_resampler.cc;drc\u003da4d873786f10eedd72de25ad0d94ad7c53c1f68a;l\u003d135?originalUrl\u003dhttps:%2F%2Fcs.chromium.org%2F).\n\nThat would also avoid having to add a dependency here for the cpu features wrapper.",
      "range": {
        "startLine": 29,
        "startChar": 2,
        "endLine": 29,
        "endChar": 49
      },
      "revId": "101fc6ec8d21fc04a7ccdfd18d7a2c97e8e7b555",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7fe2423e_c7de05e6",
        "filename": "common_audio/resampler/sinc_resampler_sse.cc",
        "patchSetId": 1
      },
      "lineNbr": 41,
      "author": {
        "id": 5125
      },
      "writtenOn": "2020-06-03T08:36:06Z",
      "side": 1,
      "message": "Would it be possible to use the _mm256_fmadd_ps intrinsics instead? It seems like kKernelSize should allow that.",
      "range": {
        "startLine": 41,
        "startChar": 18,
        "endLine": 41,
        "endChar": 30
      },
      "revId": "101fc6ec8d21fc04a7ccdfd18d7a2c97e8e7b555",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7dff54e2_064e30a4",
        "filename": "common_audio/resampler/sinc_resampler_sse.cc",
        "patchSetId": 1
      },
      "lineNbr": 50,
      "author": {
        "id": 5125
      },
      "writtenOn": "2020-06-03T08:36:06Z",
      "side": 1,
      "message": "My knowledge gaps here are considerable, but can we always assume that the AVX2-specific instructions are available on x86 platforms not capable of using AVX2?\n\nSame question for immintrin.h: is that available for all x86 platforms?",
      "range": {
        "startLine": 38,
        "startChar": 2,
        "endLine": 50,
        "endChar": 5
      },
      "revId": "101fc6ec8d21fc04a7ccdfd18d7a2c97e8e7b555",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "de0edaa1_2c66b511",
        "filename": "system_wrappers/source/cpu_features.cc",
        "patchSetId": 1
      },
      "lineNbr": 31,
      "author": {
        "id": 5087
      },
      "writtenOn": "2020-06-03T06:51:37Z",
      "side": 1,
      "message": "Should this be _MSC_VER?",
      "range": {
        "startLine": 31,
        "startChar": 12,
        "endLine": 31,
        "endChar": 25
      },
      "revId": "101fc6ec8d21fc04a7ccdfd18d7a2c97e8e7b555",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f7cd9dbb_6047450e",
        "filename": "system_wrappers/source/cpu_features.cc",
        "patchSetId": 1
      },
      "lineNbr": 87,
      "author": {
        "id": 5125
      },
      "writtenOn": "2020-06-03T08:36:06Z",
      "side": 1,
      "message": "To match with the surrounding bitwise operations, would it be possible to have this constant in hexadecimal format as well?",
      "range": {
        "startLine": 87,
        "startChar": 24,
        "endLine": 87,
        "endChar": 25
      },
      "revId": "101fc6ec8d21fc04a7ccdfd18d7a2c97e8e7b555",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    }
  ]
}