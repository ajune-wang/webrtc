{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "6d30277f_afd0d181",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5100
      },
      "writtenOn": "2023-03-16T09:36:33Z",
      "side": 1,
      "message": "Nice! LGTM with one comment.",
      "revId": "c391d5f467b637c6c10153c0587cba2d276005be",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0eb7ee6e_0d88119b",
        "filename": "modules/audio_coding/neteq/decision_logic.cc",
        "patchSetId": 1
      },
      "lineNbr": 381,
      "author": {
        "id": 5100
      },
      "writtenOn": "2023-03-16T09:36:33Z",
      "side": 1,
      "message": "I\u0027m trying to understand if there is a difference between old and new code in this if clause. If `cng_state_ \u003d\u003d kCngOff`, the operations will be the same. Is it fair to say that it is always `kCngOff` here? If so, should we \"document\" that with a DCHECK?",
      "range": {
        "startLine": 381,
        "startChar": 4,
        "endLine": 381,
        "endChar": 28
      },
      "revId": "c391d5f467b637c6c10153c0587cba2d276005be",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "87abc517_feb830b1",
        "filename": "modules/audio_coding/neteq/decision_logic.cc",
        "patchSetId": 1
      },
      "lineNbr": 381,
      "author": {
        "id": 8038
      },
      "writtenOn": "2023-03-16T14:23:31Z",
      "side": 1,
      "message": "Good question, at least it doesn\u0027t happen in any tests :) I don\u0027t have a good way to test this manually.\n\nI would really like to get rid of this CNG state and only make the decision based on last mode, I think it exists because of DTMF or something.. (another thing I would really like to remove).\n\nCNG state is set to `Off` each time a new packet is decoded: https://source.chromium.org/chromium/chromium/src/+/main:third_party/webrtc/modules/audio_coding/neteq/neteq_impl.cc;l\u003d1286;drc\u003d0e9a0b6e9bb6ec59521977eec805f5d0bca833e0\n\nSo assuming we cannot transition from CNG to expand without decoding a packet, then it should never happen. However, this can happen with the new CNG timeout, but then we will always select expand in NoPacket (but we cannot add the DCHECK here).",
      "parentUuid": "0eb7ee6e_0d88119b",
      "range": {
        "startLine": 381,
        "startChar": 4,
        "endLine": 381,
        "endChar": 28
      },
      "revId": "c391d5f467b637c6c10153c0587cba2d276005be",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f53ea76c_0b48054c",
        "filename": "modules/audio_coding/neteq/decision_logic.cc",
        "patchSetId": 1
      },
      "lineNbr": 381,
      "author": {
        "id": 5100
      },
      "writtenOn": "2023-03-16T14:26:56Z",
      "side": 1,
      "message": "OK. Fair enough. \nDTMF cannot be removed, btw. But we can make it less clunky.",
      "parentUuid": "87abc517_feb830b1",
      "range": {
        "startLine": 381,
        "startChar": 4,
        "endLine": 381,
        "endChar": 28
      },
      "revId": "c391d5f467b637c6c10153c0587cba2d276005be",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "30975933_c5348488",
        "filename": "modules/audio_coding/neteq/decision_logic.cc",
        "patchSetId": 1
      },
      "lineNbr": 381,
      "author": {
        "id": 8038
      },
      "writtenOn": "2023-03-16T15:06:40Z",
      "side": 1,
      "message": "I actually don\u0027t think the standard mentions receiving/playing DTMF, only sending. I can\u0027t think of a valid use case when you have a datachannel :)",
      "parentUuid": "f53ea76c_0b48054c",
      "range": {
        "startLine": 381,
        "startChar": 4,
        "endLine": 381,
        "endChar": 28
      },
      "revId": "c391d5f467b637c6c10153c0587cba2d276005be",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "At least one maximum vote for label \u0027Code-Review\u0027 is required"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader AND -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1 AND -label:Code-Review\u003dMIN"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader AND -label:Code-Review=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Code-Review=MAX,user=non_uploader"],"failingAtoms":["label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1 AND -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1","label:Code-Review=MIN"]}
      },
      "patchSetCommitId": "c391d5f467b637c6c10153c0587cba2d276005be",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["is:review-enforced_gerrit"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforcement-satisfied_gerrit"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforcement-satisfied_gerrit"]}
      },
      "patchSetCommitId": "c391d5f467b637c6c10153c0587cba2d276005be",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {
        "value": true
      }
    }
  ]
}