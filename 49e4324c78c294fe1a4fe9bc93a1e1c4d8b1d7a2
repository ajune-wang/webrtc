{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "eb7a59b5_e9eded74",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5150
      },
      "writtenOn": "2022-10-31T16:36:00Z",
      "side": 1,
      "message": "kron@: Maybe something like this?",
      "revId": "49e4324c78c294fe1a4fe9bc93a1e1c4d8b1d7a2",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3141c878_7dd46f6d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 7641
      },
      "writtenOn": "2022-11-01T14:50:27Z",
      "side": 1,
      "message": "The solution looks good to me in general, however, I think that there is a small but important bug that needs to be fixed.",
      "revId": "49e4324c78c294fe1a4fe9bc93a1e1c4d8b1d7a2",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c47e16d0_29c627b5",
        "filename": "rtc_base/system_time.cc",
        "patchSetId": 2
      },
      "lineNbr": 82,
      "author": {
        "id": 7641
      },
      "writtenOn": "2022-11-01T14:50:27Z",
      "side": 1,
      "message": "That\u0027s clever!",
      "range": {
        "startLine": 80,
        "startChar": 55,
        "endLine": 82,
        "endChar": 22
      },
      "revId": "49e4324c78c294fe1a4fe9bc93a1e1c4d8b1d7a2",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "43c991c2_e68d8932",
        "filename": "rtc_base/system_time.cc",
        "patchSetId": 2
      },
      "lineNbr": 113,
      "author": {
        "id": 7641
      },
      "writtenOn": "2022-11-01T14:50:27Z",
      "side": 1,
      "message": "Isn\u0027t the return value a boolean? At least in the specification that I\u0027ve found\nhttps://en.cppreference.com/w/cpp/atomic/atomic/compare_exchange",
      "range": {
        "startLine": 113,
        "startChar": 4,
        "endLine": 113,
        "endChar": 18
      },
      "revId": "49e4324c78c294fe1a4fe9bc93a1e1c4d8b1d7a2",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4e38f79f_54418c89",
        "filename": "rtc_base/system_time.cc",
        "patchSetId": 2
      },
      "lineNbr": 113,
      "author": {
        "id": 5150
      },
      "writtenOn": "2022-11-02T13:34:23Z",
      "side": 1,
      "message": "Wow, great catch!\n\nI didn\u0027t check the spec too closely since this is copied from chromium https://source.chromium.org/chromium/chromium/src/+/main:base/time/time_win.cc;l\u003d459;drc\u003de4622aaeccea84652488d1822c28c78b7115684f\n\nIt seems like the current comparison would (nearly) always fail, thus repeating the loop (regardless of whether there are any competing threads). However, if there was no competing thread, then the last8_and_rollover_count was updated so the next iteration of the loop would exit early due to `new_state\u003d\u003doriginal`. (If the previous iteration changed the top 8 bits of the timestamp, then the next rollover or change to the most significant bits won\u0027t happen for another 2^24 milliseconds, or 4.6 hours).\n\nI\u0027ll update this code shortly. The chromium implementation will have to be a separate CL.",
      "parentUuid": "43c991c2_e68d8932",
      "range": {
        "startLine": 113,
        "startChar": 4,
        "endLine": 113,
        "endChar": 18
      },
      "revId": "49e4324c78c294fe1a4fe9bc93a1e1c4d8b1d7a2",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    }
  ]
}