{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "29ee690c_ca85971e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5634
      },
      "writtenOn": "2021-06-09T09:13:58Z",
      "side": 1,
      "message": "There\u0027s some polishing to be done, including naming. Suggestions welcome!\n\nAnd the refactoring pointed out some really bizarre potential inconsistencies, that I want to address\nwhen actually changing things. But this is a pure shuffle-the-bits-around CL.\n",
      "revId": "9f82490bbf952a0af4ce6148f148226f91e54964",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c3d01202_e88b10c1",
        "filename": "pc/bundle_manager.cc",
        "patchSetId": 1
      },
      "lineNbr": 58,
      "author": {
        "id": 5142
      },
      "writtenOn": "2021-06-09T09:46:57Z",
      "side": 1,
      "message": "There is a risk of overwriting an old transport that is already mapped by this mid. Can we DCHECK or return whether or not a replacement happened so that the caller can DCHECK whether or not the overwrite was on purpose?",
      "revId": "9f82490bbf952a0af4ce6148f148226f91e54964",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8d5f8515_9d4bcf71",
        "filename": "pc/bundle_manager.cc",
        "patchSetId": 1
      },
      "lineNbr": 75,
      "author": {
        "id": 5142
      },
      "writtenOn": "2021-06-09T09:46:57Z",
      "side": 1,
      "message": "Should pending_mids_ also be cleared?\n\nMaybe we should add some basic unit tests?",
      "revId": "9f82490bbf952a0af4ce6148f148226f91e54964",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b2691452_6c1709c4",
        "filename": "pc/bundle_manager.cc",
        "patchSetId": 1
      },
      "lineNbr": 116,
      "author": {
        "id": 5142
      },
      "writtenOn": "2021-06-09T09:46:57Z",
      "side": 1,
      "message": "Would we ever get the pending mid set multiple times? Should we DCHECK?\n\nOtherwise RollbackTransport() could do RemoveTransportForMid() for the same mid several times, that seems unexpected.",
      "revId": "9f82490bbf952a0af4ce6148f148226f91e54964",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6f6a223c_6d4ba229",
        "filename": "pc/bundle_manager.h",
        "patchSetId": 1
      },
      "lineNbr": 66,
      "author": {
        "id": 5142
      },
      "writtenOn": "2021-06-09T09:46:57Z",
      "side": 1,
      "message": "If they don\u0027t merge I think they should get separate files, but for now no need to keep them separate since they may merge",
      "revId": "9f82490bbf952a0af4ce6148f148226f91e54964",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "08c5e40b_1de5ad09",
        "filename": "pc/bundle_manager.h",
        "patchSetId": 1
      },
      "lineNbr": 72,
      "author": {
        "id": 5142
      },
      "writtenOn": "2021-06-09T09:46:57Z",
      "side": 1,
      "message": "ObserverCallback is not very descriptive, can this be renamed?\n\nOnMidChangedTransport?",
      "revId": "9f82490bbf952a0af4ce6148f148226f91e54964",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "60f816bc_2808a582",
        "filename": "pc/bundle_manager.h",
        "patchSetId": 1
      },
      "lineNbr": 85,
      "author": {
        "id": 5142
      },
      "writtenOn": "2021-06-09T09:46:57Z",
      "side": 1,
      "message": "I think this can be a const method? But maybe that\u0027s \"dishonest\" if the ptr is non-const",
      "revId": "9f82490bbf952a0af4ce6148f148226f91e54964",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d4297b0f_25e0557a",
        "filename": "pc/bundle_manager.h",
        "patchSetId": 1
      },
      "lineNbr": 100,
      "author": {
        "id": 5142
      },
      "writtenOn": "2021-06-09T09:46:57Z",
      "side": 1,
      "message": "nit: end comments with .",
      "revId": "9f82490bbf952a0af4ce6148f148226f91e54964",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5126425a_8768546b",
        "filename": "pc/bundle_manager.h",
        "patchSetId": 1
      },
      "lineNbr": 121,
      "author": {
        "id": 5142
      },
      "writtenOn": "2021-06-09T09:46:57Z",
      "side": 1,
      "message": "nit: end comments with . for these two as well",
      "revId": "9f82490bbf952a0af4ce6148f148226f91e54964",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3169acc7_2b8e8166",
        "filename": "pc/jsep_transport_controller.cc",
        "patchSetId": 1
      },
      "lineNbr": 76,
      "author": {
        "id": 5142
      },
      "writtenOn": "2021-06-09T09:46:57Z",
      "side": 1,
      "message": "I think we should invoke named JsepTransportController methods that takes care of the callbacks. If something crashes in an unnamed lambda it is a lot harder to see what is going on. Besides, having actual code inside of a constructor initializer is not the most readable.",
      "revId": "9f82490bbf952a0af4ce6148f148226f91e54964",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "73efcd09_ac47f01f",
        "filename": "pc/jsep_transport_controller.h",
        "patchSetId": 1
      },
      "lineNbr": 341,
      "author": {
        "id": 5142
      },
      "writtenOn": "2021-06-09T09:46:57Z",
      "side": 1,
      "message": "This is commented out",
      "revId": "9f82490bbf952a0af4ce6148f148226f91e54964",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    }
  ]
}