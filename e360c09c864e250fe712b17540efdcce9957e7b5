{
  "comments": [
    {
      "key": {
        "uuid": "789c53a9_4bc99d4d",
        "filename": "logging/rtc_event_log/output/rtc_event_log_output_file.cc",
        "patchSetId": 1
      },
      "lineNbr": 35,
      "author": {
        "id": 5147
      },
      "writtenOn": "2019-05-03T11:54:25Z",
      "side": 0,
      "message": "The documentation claims ileWrapper::OpenWriteOnly() overwrites existing files. It is not mentioned what FileWrapper::OpenWriteOnly() does, though.",
      "range": {
        "startLine": 35,
        "startChar": 33,
        "endLine": 35,
        "endChar": 51
      },
      "revId": "e360c09c864e250fe712b17540efdcce9957e7b5",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d8a39006_f998bd7a",
        "filename": "logging/rtc_event_log/output/rtc_event_log_output_file.cc",
        "patchSetId": 1
      },
      "lineNbr": 35,
      "author": {
        "id": 5234
      },
      "writtenOn": "2019-05-03T12:08:44Z",
      "side": 0,
      "message": "rtc::CreatePlatformFile calls ::open with O_CREAT | O_TRUNC | O_RDWR, which means that it will create a new file or truncate an existing one. On posix, that is; I can only guess that the windows implementation does something similar.\n\nWhat\u0027s the desired behavior for this class?",
      "parentUuid": "789c53a9_4bc99d4d",
      "range": {
        "startLine": 35,
        "startChar": 33,
        "endLine": 35,
        "endChar": 51
      },
      "revId": "e360c09c864e250fe712b17540efdcce9957e7b5",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "969ce61c_920613e6",
        "filename": "logging/rtc_event_log/output/rtc_event_log_output_file.cc",
        "patchSetId": 1
      },
      "lineNbr": 35,
      "author": {
        "id": 5147
      },
      "writtenOn": "2019-05-03T12:29:33Z",
      "side": 0,
      "message": "* I think we should make sure it\u0027s not possible to end up in this situation (existing file), but if we somehow do, overwriting and failing are both reasonable behaviors, but appending is not.\n* That there is no documentation, and therefore no promise of what different implementations do (or are allowed to do in the future), is what bothers me.",
      "parentUuid": "d8a39006_f998bd7a",
      "range": {
        "startLine": 35,
        "startChar": 33,
        "endLine": 35,
        "endChar": 51
      },
      "revId": "e360c09c864e250fe712b17540efdcce9957e7b5",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    }
  ]
}