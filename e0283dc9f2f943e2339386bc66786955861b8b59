{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "96cad2ba_884b4440",
        "filename": "modules/video_coding/codecs/vp9/libvpx_vp9_encoder.cc",
        "patchSetId": 1
      },
      "lineNbr": 540,
      "author": {
        "id": 5825
      },
      "writtenOn": "2024-06-18T11:36:52Z",
      "side": 1,
      "message": "How about moving this one layer above encoder wrapper, to SEA, and making this codec-type agnostic?\n\nIt can be something like this:\n\n1. In SEA::InitEncode(), derive S mode from the current simulcast config.\n\n2. Query support of that S mode in encoder factory: https://source.chromium.org/chromium/chromium/src/+/main:third_party/webrtc/api/video_codecs/video_encoder_factory.h;l\u003d87\n\n3. If mode is supported, set VideoCodec::scalability_mode\u003dS\n\n4. Update encoder wrapper(s) to use VideoCodec::simucastStreams[] instead of spatialLayers[] when S mode is used (note that simucastStreams and spatialLayers use the same dtype now).",
      "range": {
        "startLine": 531,
        "startChar": 0,
        "endLine": 540,
        "endChar": 3
      },
      "revId": "e0283dc9f2f943e2339386bc66786955861b8b59",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0fe36c42_7752f492",
        "filename": "modules/video_coding/codecs/vp9/libvpx_vp9_encoder.cc",
        "patchSetId": 1
      },
      "lineNbr": 540,
      "author": {
        "id": 5117
      },
      "writtenOn": "2024-06-18T11:51:27Z",
      "side": 1,
      "message": "The issue is that ConvertSimulcastConfigToSvc isn\u0027t codec agnostic. It populates some codec specific fields. In theory, we could teach it to work with AV1 also, and move the code in some more common place. \n\nBut even still, I\u0027m against doing it in the SEA. it will enable all the external encoders. This is risky and may provide no benifit for some of them. I\u0027d like to manually bring in only encoders, which both support Simulcast-like SVC and are more efficient at it. So each external encoder will call the same code (there\u0027s only one candidate currently).\n\nJust checking for S-mode support isn\u0027t sufficent, additional checks for simulcast format is needed, to ensure that it corresponds to the S-mode.\n\nFinally, I don\u0027t like updating the encoder wrapper to use simulcastStreams[] depending on the S-mode. It will be more error prone and the wrapper code will be very confusing.",
      "parentUuid": "96cad2ba_884b4440",
      "range": {
        "startLine": 531,
        "startChar": 0,
        "endLine": 540,
        "endChar": 3
      },
      "revId": "e0283dc9f2f943e2339386bc66786955861b8b59",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6a4e1f77_95233d02",
        "filename": "modules/video_coding/codecs/vp9/libvpx_vp9_encoder.cc",
        "patchSetId": 1
      },
      "lineNbr": 540,
      "author": {
        "id": 5825
      },
      "writtenOn": "2024-06-18T12:26:50Z",
      "side": 1,
      "message": "\u003e  It populates some codec specific fields.\n\nWhich fields you mean?\n\n\u003eit will enable all the external encoders. This is risky and may provide no benifit for some of them\n\nYou can get implementation name from EncoderInfo and restrict this to libvpx (in case of VP9; for AV1 no need this restrict for now) on SEA level.\n\n\n\u003e additional checks for simulcast format is needed, to ensure that it corresponds to the S-mode.\n\nThis will be done in (1).\n\n\u003e simulcastStreams[] depending on the S-mode. It will be more error prone and the wrapper code will be very confusing.\n\nPartially agreed. simulcastStreams -\u003e spatialLayers conversion should be Ok to do.\n\nI still think this can and should be implemented in more codec type agnostic fashion, at SEA level.",
      "parentUuid": "0fe36c42_7752f492",
      "range": {
        "startLine": 531,
        "startChar": 0,
        "endLine": 540,
        "endChar": 3
      },
      "revId": "e0283dc9f2f943e2339386bc66786955861b8b59",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a7705d10_f16e5a3f",
        "filename": "modules/video_coding/codecs/vp9/libvpx_vp9_encoder.cc",
        "patchSetId": 1
      },
      "lineNbr": 540,
      "author": {
        "id": 5117
      },
      "writtenOn": "2024-06-18T12:38:40Z",
      "side": 1,
      "message": "\u003e Which fields you mean?\n\nAt least `codec.VP9()-\u003enumberOfSpatialLayers`. Then `ConvertSvcFrameToSimulcast()` may be a little different, depending on what each specific encoder is producing. There may be some codec specific metadata there beyond \u0027end_of_picture\u0027.\n\n\u003e You can get implementation name from EncoderInfo and restrict this to libvpx\n\nYes, but how would I then enable it for a specific Chrome encoder? \nWell, it\u0027s possible with a new flag in encoderInfo (it works better than a hardcoded list of names). But if each encoder will have to be changed either way for that to work, why not just make the internal conversion for each specific case, without trying to make everything generic and working in all possible scenarios?\n\nI don\u0027t want to pull S-modes logic into the SEA level. It\u0027s supposed to only allow non-simulcast aware encoders to work. Giving it knowledge of S-modes really complicates it beyond it\u0027s original purpose.\n\n\u003e This will be done in (1).\n\nDid you forget to post a link?",
      "parentUuid": "6a4e1f77_95233d02",
      "range": {
        "startLine": 531,
        "startChar": 0,
        "endLine": 540,
        "endChar": 3
      },
      "revId": "e0283dc9f2f943e2339386bc66786955861b8b59",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    }
  ]
}