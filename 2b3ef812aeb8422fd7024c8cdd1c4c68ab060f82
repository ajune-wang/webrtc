{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "a7eb5f3a_4e6e3f62",
        "filename": "modules/desktop_capture/linux/wayland/mouse_cursor_monitor_pipewire.cc",
        "patchSetId": 11
      },
      "lineNbr": 44,
      "author": {
        "id": 14134
      },
      "writtenOn": "2022-02-14T19:16:14Z",
      "side": 1,
      "message": "The documentation for CaptureCursor() says that it will always return a value, but possibly an \"empty cursor\".  Should you write this as RTC_DCHECK(mouse_cursor), and explicitly check for an empty cursor?",
      "revId": "2b3ef812aeb8422fd7024c8cdd1c4c68ab060f82",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "77c0c9d1_d8482e7d",
        "filename": "modules/desktop_capture/linux/wayland/mouse_cursor_monitor_pipewire.cc",
        "patchSetId": 11
      },
      "lineNbr": 44,
      "author": {
        "id": 14134
      },
      "writtenOn": "2022-02-14T19:18:13Z",
      "side": 1,
      "message": "It looks like by \"empty\" you mean \"nullptr\" in mouse_cursor.  Maybe s/empty/nullptr/ in the CaptureCursor documentation string would avoid any confusion.",
      "parentUuid": "a7eb5f3a_4e6e3f62",
      "revId": "2b3ef812aeb8422fd7024c8cdd1c4c68ab060f82",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "612e1d55_24f6751e",
        "filename": "modules/desktop_capture/linux/wayland/mouse_cursor_monitor_pipewire.cc",
        "patchSetId": 11
      },
      "lineNbr": 44,
      "author": {
        "id": 8046
      },
      "writtenOn": "2022-02-14T20:39:13Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "77c0c9d1_d8482e7d",
      "revId": "2b3ef812aeb8422fd7024c8cdd1c4c68ab060f82",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4cec9cba_d78ca681",
        "filename": "modules/desktop_capture/linux/wayland/mouse_cursor_monitor_pipewire.h",
        "patchSetId": 11
      },
      "lineNbr": 28,
      "author": {
        "id": 14134
      },
      "writtenOn": "2022-02-14T19:16:14Z",
      "side": 1,
      "message": "Please make the constructor private if the object is supposed to be created through a factory function.",
      "revId": "2b3ef812aeb8422fd7024c8cdd1c4c68ab060f82",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "46b2168c_4c3f6df4",
        "filename": "modules/desktop_capture/linux/wayland/mouse_cursor_monitor_pipewire.h",
        "patchSetId": 11
      },
      "lineNbr": 28,
      "author": {
        "id": 8046
      },
      "writtenOn": "2022-02-14T20:39:13Z",
      "side": 1,
      "message": "Cannot be private/protected. It is used by the static Create() function below.",
      "parentUuid": "4cec9cba_d78ca681",
      "revId": "2b3ef812aeb8422fd7024c8cdd1c4c68ab060f82",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1dc7dbd6_70054745",
        "filename": "modules/desktop_capture/linux/wayland/mouse_cursor_monitor_pipewire.h",
        "patchSetId": 11
      },
      "lineNbr": 28,
      "author": {
        "id": 14134
      },
      "writtenOn": "2022-02-15T18:33:15Z",
      "side": 1,
      "message": "Normally that\u0027s handled by adding a friend declaration.",
      "parentUuid": "46b2168c_4c3f6df4",
      "revId": "2b3ef812aeb8422fd7024c8cdd1c4c68ab060f82",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b807c107_89e41338",
        "filename": "modules/desktop_capture/linux/wayland/mouse_cursor_monitor_pipewire.h",
        "patchSetId": 11
      },
      "lineNbr": 28,
      "author": {
        "id": 18474
      },
      "writtenOn": "2022-02-15T18:41:09Z",
      "side": 1,
      "message": "It\u0027s worth noting that the chromium c++ Do\u0027s/Dont\u0027s explicitly recommend *against* friending std::make_unique:\nhttps://source.chromium.org/chromium/chromium/src/+/main:styleguide/c++/c++-dos-and-donts.md\n\nThey also suggest that if ::Create doesn\u0027t add much/any value that maybe it\u0027s not worth doing.\n\nUpstream also has the base::PassKey type, which helps guard *who* can actually use a constructor that is public: https://source.chromium.org/chromium/chromium/src/+/main:base/types/pass_key.h;l\u003d38",
      "parentUuid": "1dc7dbd6_70054745",
      "revId": "2b3ef812aeb8422fd7024c8cdd1c4c68ab060f82",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2a1afde0_2e625f2a",
        "filename": "modules/desktop_capture/linux/wayland/mouse_cursor_monitor_pipewire.h",
        "patchSetId": 11
      },
      "lineNbr": 34,
      "author": {
        "id": 14134
      },
      "writtenOn": "2022-02-14T19:16:14Z",
      "side": 1,
      "message": "Add a comment before Init\n\n// MouseCursorMonitor:\n\nto indicate these are overriding declarations from MCM.",
      "revId": "2b3ef812aeb8422fd7024c8cdd1c4c68ab060f82",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e1d87a27_19396b27",
        "filename": "modules/desktop_capture/linux/wayland/mouse_cursor_monitor_pipewire.h",
        "patchSetId": 11
      },
      "lineNbr": 34,
      "author": {
        "id": 8046
      },
      "writtenOn": "2022-02-14T20:39:13Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "2a1afde0_2e625f2a",
      "revId": "2b3ef812aeb8422fd7024c8cdd1c4c68ab060f82",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "04c460de_68a5ad33",
        "filename": "modules/desktop_capture/linux/wayland/shared_screencast_stream.cc",
        "patchSetId": 11
      },
      "lineNbr": 639,
      "author": {
        "id": 14134
      },
      "writtenOn": "2022-02-14T19:16:14Z",
      "side": 1,
      "message": "Can cursor be declared *const?",
      "revId": "2b3ef812aeb8422fd7024c8cdd1c4c68ab060f82",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f13273b2_fdbad022",
        "filename": "modules/desktop_capture/linux/wayland/shared_screencast_stream.cc",
        "patchSetId": 11
      },
      "lineNbr": 639,
      "author": {
        "id": 8046
      },
      "writtenOn": "2022-02-14T20:39:13Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "04c460de_68a5ad33",
      "revId": "2b3ef812aeb8422fd7024c8cdd1c4c68ab060f82",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1e295c54_dd363fb9",
        "filename": "modules/desktop_capture/linux/wayland/shared_screencast_stream.cc",
        "patchSetId": 11
      },
      "lineNbr": 652,
      "author": {
        "id": 14134
      },
      "writtenOn": "2022-02-14T19:16:14Z",
      "side": 1,
      "message": "Is this copying the pixels of just the cursor itself, or does it capture background pixels (blended or unblended)?\n\nIf there is no background capture, then won\u0027t the pixels be identical to the previous cursor frame 99% of the time?  Can Pipwire provide damage information on the mouse cursor?",
      "revId": "2b3ef812aeb8422fd7024c8cdd1c4c68ab060f82",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ff1a8dcb_e549eaf4",
        "filename": "modules/desktop_capture/linux/wayland/shared_screencast_stream.cc",
        "patchSetId": 11
      },
      "lineNbr": 652,
      "author": {
        "id": 8046
      },
      "writtenOn": "2022-02-14T20:39:13Z",
      "side": 1,
      "message": "I cannot say for all implementations, but for example KWin (Wayland compositor in KDE Plasma) does provide cursor image only on change so most of the time we update only the position.\n\nAnd it should include only the cursor.",
      "parentUuid": "1e295c54_dd363fb9",
      "revId": "2b3ef812aeb8422fd7024c8cdd1c4c68ab060f82",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "484797ec_69d10510",
        "filename": "modules/desktop_capture/linux/wayland/shared_screencast_stream.cc",
        "patchSetId": 11
      },
      "lineNbr": 652,
      "author": {
        "id": 14134
      },
      "writtenOn": "2022-02-15T18:33:15Z",
      "side": 1,
      "message": "Thanks, your comment in the .h helps explain that it is an implementation specific behavior.",
      "parentUuid": "ff1a8dcb_e549eaf4",
      "revId": "2b3ef812aeb8422fd7024c8cdd1c4c68ab060f82",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0afe8a1d_b348c527",
        "filename": "modules/desktop_capture/linux/wayland/shared_screencast_stream.cc",
        "patchSetId": 11
      },
      "lineNbr": 657,
      "author": {
        "id": 14134
      },
      "writtenOn": "2022-02-14T19:16:14Z",
      "side": 1,
      "message": "If Pipewire fails to provide cursor information in this buffer, should the caller conclude that the previously-captured cursor hotspot is valid?",
      "revId": "2b3ef812aeb8422fd7024c8cdd1c4c68ab060f82",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d2e3c1e7_9d0b33e8",
        "filename": "modules/desktop_capture/linux/wayland/shared_screencast_stream.cc",
        "patchSetId": 11
      },
      "lineNbr": 657,
      "author": {
        "id": 8046
      },
      "writtenOn": "2022-02-14T20:39:13Z",
      "side": 1,
      "message": "It is probably invalid, but once we pass/send back the cursor, there is no way how to update the hotspot again. I checked X11MouseCursorMonitor and they do the same. They have cursor shape available only on change and once they release it, they don\u0027t update it.",
      "parentUuid": "0afe8a1d_b348c527",
      "revId": "2b3ef812aeb8422fd7024c8cdd1c4c68ab060f82",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ca8a1e9d_20179c12",
        "filename": "modules/desktop_capture/linux/wayland/shared_screencast_stream.cc",
        "patchSetId": 11
      },
      "lineNbr": 657,
      "author": {
        "id": 8046
      },
      "writtenOn": "2022-02-15T07:13:34Z",
      "side": 1,
      "message": "I think it shouldn\u0027t be a problem at all given the hotspot is probably useless value for screen sharing, I think it is used mostly in case of remote desktop. If we identify we need to somehow update it, once the remote desktop is implemented, I will try to figure out.",
      "parentUuid": "d2e3c1e7_9d0b33e8",
      "revId": "2b3ef812aeb8422fd7024c8cdd1c4c68ab060f82",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "03d2a202_f874da54",
        "filename": "modules/desktop_capture/linux/wayland/shared_screencast_stream.cc",
        "patchSetId": 11
      },
      "lineNbr": 657,
      "author": {
        "id": 14134
      },
      "writtenOn": "2022-02-15T18:33:15Z",
      "side": 1,
      "message": "OK.  The remote desktop folks will probably have to do some testing/debugging to work out these implementation specific differences among Wayland implementations.  It\u0027s too bad that Wayland behavior is under-specified in this area.",
      "parentUuid": "ca8a1e9d_20179c12",
      "revId": "2b3ef812aeb8422fd7024c8cdd1c4c68ab060f82",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9c151d84_e68cf5ae",
        "filename": "modules/desktop_capture/linux/wayland/shared_screencast_stream.cc",
        "patchSetId": 11
      },
      "lineNbr": 659,
      "author": {
        "id": 14134
      },
      "writtenOn": "2022-02-14T19:16:14Z",
      "side": 1,
      "message": "It would be an optimization to allocate two cursor frames and do a copy-and-swap, versus allocating a new cursor frame every time.  (This is a followup optimization - not asking for changes here.)",
      "revId": "2b3ef812aeb8422fd7024c8cdd1c4c68ab060f82",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "81e42f6d_ed791b8a",
        "filename": "modules/desktop_capture/linux/wayland/shared_screencast_stream.cc",
        "patchSetId": 11
      },
      "lineNbr": 659,
      "author": {
        "id": 8046
      },
      "writtenOn": "2022-02-14T20:39:13Z",
      "side": 1,
      "message": "You mean to implement something like ScreenCaptureFrameQueue? That should be doable and I would prefer doing this as a followup change.",
      "parentUuid": "9c151d84_e68cf5ae",
      "revId": "2b3ef812aeb8422fd7024c8cdd1c4c68ab060f82",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8ff2b1a9_ae45beb2",
        "filename": "modules/desktop_capture/linux/wayland/shared_screencast_stream.cc",
        "patchSetId": 11
      },
      "lineNbr": 659,
      "author": {
        "id": 14134
      },
      "writtenOn": "2022-02-15T18:33:15Z",
      "side": 1,
      "message": "No problem. If it\u0027s actually the case that images are only provided on shape change then it\u0027s probably not worth it.",
      "parentUuid": "81e42f6d_ed791b8a",
      "revId": "2b3ef812aeb8422fd7024c8cdd1c4c68ab060f82",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9b2e7cef_81c470d0",
        "filename": "modules/desktop_capture/linux/wayland/shared_screencast_stream.cc",
        "patchSetId": 11
      },
      "lineNbr": 660,
      "author": {
        "id": 14134
      },
      "writtenOn": "2022-02-14T19:16:14Z",
      "side": 1,
      "message": "If Pipewire fails to provide updated cursor metadata in |buffer| can the caller always conclude that the cursor has not moved?",
      "revId": "2b3ef812aeb8422fd7024c8cdd1c4c68ab060f82",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8ab4c44e_5ab3e3f6",
        "filename": "modules/desktop_capture/linux/wayland/shared_screencast_stream.cc",
        "patchSetId": 11
      },
      "lineNbr": 660,
      "author": {
        "id": 8046
      },
      "writtenOn": "2022-02-14T20:39:13Z",
      "side": 1,
      "message": "Yes, every |buffer| doesn\u0027t need to carry information about the cursor, it\u0027s up to the wayland compositor to send metadata on change. KWin includes metadata only when there is a change (shape or position).",
      "parentUuid": "9b2e7cef_81c470d0",
      "revId": "2b3ef812aeb8422fd7024c8cdd1c4c68ab060f82",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "22ae9ce6_61534dc6",
        "filename": "modules/desktop_capture/linux/wayland/shared_screencast_stream.cc",
        "patchSetId": 11
      },
      "lineNbr": 665,
      "author": {
        "id": 14134
      },
      "writtenOn": "2022-02-14T19:16:14Z",
      "side": 1,
      "message": "I think RTC_DLOG() would be more appropriate as this could log up to once per frame.  (If you need to log at all.)",
      "revId": "2b3ef812aeb8422fd7024c8cdd1c4c68ab060f82",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "006a9ba7_7e5962ac",
        "filename": "modules/desktop_capture/linux/wayland/shared_screencast_stream.cc",
        "patchSetId": 11
      },
      "lineNbr": 665,
      "author": {
        "id": 8046
      },
      "writtenOn": "2022-02-14T20:39:13Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "22ae9ce6_61534dc6",
      "revId": "2b3ef812aeb8422fd7024c8cdd1c4c68ab060f82",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "25b10336_839a3a85",
        "filename": "modules/desktop_capture/linux/wayland/shared_screencast_stream.h",
        "patchSetId": 11
      },
      "lineNbr": 39,
      "author": {
        "id": 14134
      },
      "writtenOn": "2022-02-14T19:16:14Z",
      "side": 1,
      "message": "Typo in actual",
      "revId": "2b3ef812aeb8422fd7024c8cdd1c4c68ab060f82",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7b77ab49_fe072f25",
        "filename": "modules/desktop_capture/linux/wayland/shared_screencast_stream.h",
        "patchSetId": 11
      },
      "lineNbr": 39,
      "author": {
        "id": 8046
      },
      "writtenOn": "2022-02-14T20:39:13Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "25b10336_839a3a85",
      "revId": "2b3ef812aeb8422fd7024c8cdd1c4c68ab060f82",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3944895e_f14c28c1",
        "filename": "modules/desktop_capture/linux/wayland/shared_screencast_stream.h",
        "patchSetId": 11
      },
      "lineNbr": 43,
      "author": {
        "id": 14134
      },
      "writtenOn": "2022-02-14T19:16:14Z",
      "side": 1,
      "message": "Nit: Add period after buffer",
      "revId": "2b3ef812aeb8422fd7024c8cdd1c4c68ab060f82",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cbc446a8_1909687c",
        "filename": "modules/desktop_capture/linux/wayland/shared_screencast_stream.h",
        "patchSetId": 11
      },
      "lineNbr": 43,
      "author": {
        "id": 8046
      },
      "writtenOn": "2022-02-14T20:39:13Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3944895e_f14c28c1",
      "revId": "2b3ef812aeb8422fd7024c8cdd1c4c68ab060f82",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9b222c66_6a9aa42d",
        "filename": "modules/desktop_capture/linux/wayland/shared_screencast_stream.h",
        "patchSetId": 11
      },
      "lineNbr": 52,
      "author": {
        "id": 14134
      },
      "writtenOn": "2022-02-14T19:16:14Z",
      "side": 1,
      "message": "DesktopVector doesn\u0027t have a concept of valid/invalid, so better to return absl::optional\u003cDesktopVector\u003e here.",
      "revId": "2b3ef812aeb8422fd7024c8cdd1c4c68ab060f82",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5e5e623f_f76ca3c0",
        "filename": "modules/desktop_capture/linux/wayland/shared_screencast_stream.h",
        "patchSetId": 11
      },
      "lineNbr": 52,
      "author": {
        "id": 8046
      },
      "writtenOn": "2022-02-14T20:39:13Z",
      "side": 1,
      "message": "Updated the comment to mention the position will be pos(-1, -1).",
      "parentUuid": "9b222c66_6a9aa42d",
      "revId": "2b3ef812aeb8422fd7024c8cdd1c4c68ab060f82",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4522cbb3_a2c35861",
        "filename": "modules/desktop_capture/linux/wayland/shared_screencast_stream.h",
        "patchSetId": 11
      },
      "lineNbr": 52,
      "author": {
        "id": 14134
      },
      "writtenOn": "2022-02-15T18:33:15Z",
      "side": 1,
      "message": "Sorry for not being clearer.   My point was that code that holds a DesktopVector has no API to test whether it is a valid DesktopVector, or some magic value that comes from this method.  That is why returning an absl::optional\u003cDesktopVector\u003e is a better API here since code will know for sure whether it is valid or missing.",
      "parentUuid": "5e5e623f_f76ca3c0",
      "revId": "2b3ef812aeb8422fd7024c8cdd1c4c68ab060f82",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5e1a59ef_cf31fdf5",
        "filename": "modules/desktop_capture/linux/wayland/shared_screencast_stream.h",
        "patchSetId": 11
      },
      "lineNbr": 54,
      "author": {
        "id": 14134
      },
      "writtenOn": "2022-02-14T19:16:14Z",
      "side": 1,
      "message": "What is the difference between the cursor position and the cursor hotspot?  Is the position the center of the cursor frame on the screen, while the hotspot is e.g. the tip of the arrow in the coordinates of the cursor frame?",
      "revId": "2b3ef812aeb8422fd7024c8cdd1c4c68ab060f82",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "dfd3ece3_aa05822f",
        "filename": "modules/desktop_capture/linux/wayland/shared_screencast_stream.h",
        "patchSetId": 11
      },
      "lineNbr": 54,
      "author": {
        "id": 8046
      },
      "writtenOn": "2022-02-14T20:39:13Z",
      "side": 1,
      "message": "Yes, I think I answered this before already.",
      "parentUuid": "5e1a59ef_cf31fdf5",
      "revId": "2b3ef812aeb8422fd7024c8cdd1c4c68ab060f82",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    }
  ]
}