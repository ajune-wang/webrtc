{
  "comments": [
    {
      "key": {
        "uuid": "69ec73dd_1988dbfe",
        "filename": "rtc_base/experiments/field_trial_parser.cc",
        "patchSetId": 4
      },
      "lineNbr": 20,
      "author": {
        "id": 5234
      },
      "writtenOn": "2018-06-04T13:56:59Z",
      "side": 1,
      "message": "I know style guide generally prefers int, but I\u0027d prefer using the natural type size_t (here and where needed in callers) and delete the shortening static_cast.\n\nIf you really want a signed type, ptrdiff_t ot intptr_t might be an option.",
      "range": {
        "startLine": 20,
        "startChar": 0,
        "endLine": 20,
        "endChar": 3
      },
      "revId": "3b864afeee3173c8b05e15145e8a2ccc190e2ae4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "182e2072_8e6f3429",
        "filename": "rtc_base/experiments/field_trial_parser.cc",
        "patchSetId": 4
      },
      "lineNbr": 20,
      "author": {
        "id": 5531
      },
      "writtenOn": "2018-06-04T18:35:37Z",
      "side": 1,
      "message": "The sign is needed sin the values are used in subtractions later. Unsigned values can cause hard to debug wraparaounds, we don\u0027t need to be able to handle strings that are too large to fit in an int.",
      "parentUuid": "69ec73dd_1988dbfe",
      "range": {
        "startLine": 20,
        "startChar": 0,
        "endLine": 20,
        "endChar": 3
      },
      "revId": "3b864afeee3173c8b05e15145e8a2ccc190e2ae4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c62dd5ba_236c85ba",
        "filename": "rtc_base/experiments/field_trial_parser.cc",
        "patchSetId": 4
      },
      "lineNbr": 22,
      "author": {
        "id": 5234
      },
      "writtenOn": "2018-06-04T13:56:59Z",
      "side": 1,
      "message": "Please enclose in a pair of ().",
      "range": {
        "startLine": 22,
        "startChar": 8,
        "endLine": 22,
        "endChar": 32
      },
      "revId": "3b864afeee3173c8b05e15145e8a2ccc190e2ae4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "38ee3642_fa9cca9f",
        "filename": "rtc_base/experiments/field_trial_parser.cc",
        "patchSetId": 4
      },
      "lineNbr": 22,
      "author": {
        "id": 5531
      },
      "writtenOn": "2018-06-04T18:35:37Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c62dd5ba_236c85ba",
      "range": {
        "startLine": 22,
        "startChar": 8,
        "endLine": 22,
        "endChar": 32
      },
      "revId": "3b864afeee3173c8b05e15145e8a2ccc190e2ae4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bd368124_0466e1e2",
        "filename": "rtc_base/experiments/field_trial_parser.cc",
        "patchSetId": 4
      },
      "lineNbr": 45,
      "author": {
        "id": 5234
      },
      "writtenOn": "2018-06-04T13:56:59Z",
      "side": 1,
      "message": "I think I\u0027d use strcspn(trial_string, \",:\"), or the C++ counterpart, if any.",
      "range": {
        "startLine": 43,
        "startChar": 0,
        "endLine": 45,
        "endChar": 47
      },
      "revId": "3b864afeee3173c8b05e15145e8a2ccc190e2ae4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1c4a0d77_c33b41f8",
        "filename": "rtc_base/experiments/field_trial_parser.cc",
        "patchSetId": 4
      },
      "lineNbr": 45,
      "author": {
        "id": 5531
      },
      "writtenOn": "2018-06-04T18:35:37Z",
      "side": 1,
      "message": "The values are used separately as well.",
      "parentUuid": "bd368124_0466e1e2",
      "range": {
        "startLine": 43,
        "startChar": 0,
        "endLine": 45,
        "endChar": 47
      },
      "revId": "3b864afeee3173c8b05e15145e8a2ccc190e2ae4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "604c0140_83fd96bb",
        "filename": "rtc_base/experiments/field_trial_parser.cc",
        "patchSetId": 4
      },
      "lineNbr": 48,
      "author": {
        "id": 5234
      },
      "writtenOn": "2018-06-04T13:56:59Z",
      "side": 1,
      "message": "Please delete before landing. If you want to keep a log, format it as a friendly summary of recognized field trials.",
      "range": {
        "startLine": 47,
        "startChar": 0,
        "endLine": 48,
        "endChar": 64
      },
      "revId": "3b864afeee3173c8b05e15145e8a2ccc190e2ae4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9ea4ed9a_a231a2cc",
        "filename": "rtc_base/experiments/field_trial_parser.cc",
        "patchSetId": 4
      },
      "lineNbr": 48,
      "author": {
        "id": 5531
      },
      "writtenOn": "2018-06-04T18:35:37Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "604c0140_83fd96bb",
      "range": {
        "startLine": 47,
        "startChar": 0,
        "endLine": 48,
        "endChar": 64
      },
      "revId": "3b864afeee3173c8b05e15145e8a2ccc190e2ae4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a79dc9e6_ac64d451",
        "filename": "rtc_base/experiments/field_trial_parser.cc",
        "patchSetId": 4
      },
      "lineNbr": 57,
      "author": {
        "id": 5234
      },
      "writtenOn": "2018-06-04T13:56:59Z",
      "side": 1,
      "message": "This should have a higher log severity, I\u0027d suggest LS_WARNING.",
      "range": {
        "startLine": 57,
        "startChar": 16,
        "endLine": 57,
        "endChar": 23
      },
      "revId": "3b864afeee3173c8b05e15145e8a2ccc190e2ae4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2257edf7_c872958b",
        "filename": "rtc_base/experiments/field_trial_parser.cc",
        "patchSetId": 4
      },
      "lineNbr": 57,
      "author": {
        "id": 5531
      },
      "writtenOn": "2018-06-04T18:35:37Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a79dc9e6_ac64d451",
      "range": {
        "startLine": 57,
        "startChar": 16,
        "endLine": 57,
        "endChar": 23
      },
      "revId": "3b864afeee3173c8b05e15145e8a2ccc190e2ae4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bc7ab259_09143c80",
        "filename": "rtc_base/experiments/field_trial_parser.cc",
        "patchSetId": 4
      },
      "lineNbr": 74,
      "author": {
        "id": 5234
      },
      "writtenOn": "2018-06-04T13:56:59Z",
      "side": 1,
      "message": "Prefer to avoid double comparison to the same value.\n\nif (str.empty() || str \u003d\u003d \"true\") {\n  value \u003d true;\n} else if (str \u003d\u003d \"false\") {\n  value \u003d false;\n} else ....",
      "range": {
        "startLine": 74,
        "startChar": 14,
        "endLine": 74,
        "endChar": 29
      },
      "revId": "3b864afeee3173c8b05e15145e8a2ccc190e2ae4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fd095fbe_f9350e67",
        "filename": "rtc_base/experiments/field_trial_parser.cc",
        "patchSetId": 4
      },
      "lineNbr": 74,
      "author": {
        "id": 5531
      },
      "writtenOn": "2018-06-04T18:35:37Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "bc7ab259_09143c80",
      "range": {
        "startLine": 74,
        "startChar": 14,
        "endLine": 74,
        "endChar": 29
      },
      "revId": "3b864afeee3173c8b05e15145e8a2ccc190e2ae4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a2c88264_9d345e03",
        "filename": "rtc_base/experiments/field_trial_parser.cc",
        "patchSetId": 4
      },
      "lineNbr": 78,
      "author": {
        "id": 5234
      },
      "writtenOn": "2018-06-04T13:56:59Z",
      "side": 1,
      "message": "Prefer to move the default assignment into this block, to get all assignments to |valid| closer together.",
      "range": {
        "startLine": 78,
        "startChar": 6,
        "endLine": 78,
        "endChar": 20
      },
      "revId": "3b864afeee3173c8b05e15145e8a2ccc190e2ae4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1868c2c1_ff7a8549",
        "filename": "rtc_base/experiments/field_trial_parser.cc",
        "patchSetId": 4
      },
      "lineNbr": 78,
      "author": {
        "id": 5531
      },
      "writtenOn": "2018-06-04T18:35:37Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "a2c88264_9d345e03",
      "range": {
        "startLine": 78,
        "startChar": 6,
        "endLine": 78,
        "endChar": 20
      },
      "revId": "3b864afeee3173c8b05e15145e8a2ccc190e2ae4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3e7ed235_dc828748",
        "filename": "rtc_base/experiments/field_trial_parser.cc",
        "patchSetId": 4
      },
      "lineNbr": 99,
      "author": {
        "id": 5234
      },
      "writtenOn": "2018-06-04T13:56:59Z",
      "side": 1,
      "message": "Not portable, and broken on windows where long int is only 32 bits. The portable (and ugly) way is to use inttypes.h and sscanf(..., \"%\" PRIi64, \u0026value);\n\nAlso, generally for the sscanf conversions, I think you\u0027re allowing (and ignoring) arbitrary whitespace at the start of the value, and arbitrary garbage at the end of the value, maybe that\u0027s not what you want. Making it work with array_view is also a bit tricky (since it doens\u0027t provide NUL-termination), but may be possible with careful use of the field width parameter.\n\nBut I think I\u0027d recommend using some other C or C++ facility for integer conversion.",
      "range": {
        "startLine": 99,
        "startChar": 33,
        "endLine": 99,
        "endChar": 36
      },
      "revId": "3b864afeee3173c8b05e15145e8a2ccc190e2ae4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6a73c3a7_ae31e1ab",
        "filename": "rtc_base/experiments/field_trial_parser.cc",
        "patchSetId": 4
      },
      "lineNbr": 99,
      "author": {
        "id": 5531
      },
      "writtenOn": "2018-06-04T18:35:37Z",
      "side": 1,
      "message": "We are not allowed to use c++ streams. Allowing stuff is ok. It\u0027s not a strict standard, just a helpful tool. It\u0027s up to the user to provide sane input. Currently we commomly use sscanf.\n\nReplacing int64 with int to avoid the windows issue. (one wouldn\u0027t want to provide such long numbers as a parameter anyways, better to use a fixed multiplier or a double for such values)",
      "parentUuid": "3e7ed235_dc828748",
      "range": {
        "startLine": 99,
        "startChar": 33,
        "endLine": 99,
        "endChar": 36
      },
      "revId": "3b864afeee3173c8b05e15145e8a2ccc190e2ae4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "858b48e6_502151c5",
        "filename": "rtc_base/experiments/field_trial_parser.h",
        "patchSetId": 4
      },
      "lineNbr": 19,
      "author": {
        "id": 5234
      },
      "writtenOn": "2018-06-04T13:56:59Z",
      "side": 1,
      "message": "Please document format more precisely. Separators for key:value pairs, any other magic characters, quotes, escapes, treatment of whitespace...  ?",
      "range": {
        "startLine": 18,
        "startChar": 0,
        "endLine": 19,
        "endChar": 40
      },
      "revId": "3b864afeee3173c8b05e15145e8a2ccc190e2ae4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fc67cb7c_d10eae86",
        "filename": "rtc_base/experiments/field_trial_parser.h",
        "patchSetId": 4
      },
      "lineNbr": 19,
      "author": {
        "id": 5531
      },
      "writtenOn": "2018-06-04T18:35:37Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "858b48e6_502151c5",
      "range": {
        "startLine": 18,
        "startChar": 0,
        "endLine": 19,
        "endChar": 40
      },
      "revId": "3b864afeee3173c8b05e15145e8a2ccc190e2ae4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b4d6c663_33256500",
        "filename": "rtc_base/experiments/field_trial_parser.h",
        "patchSetId": 4
      },
      "lineNbr": 24,
      "author": {
        "id": 5234
      },
      "writtenOn": "2018-06-04T13:56:59Z",
      "side": 1,
      "message": "Please add a brief comment on the class purpose, and on the TryParse method.\n\nAfter reviewing the rest of the cl, I think I understand the structure.\nThe caller owns a bunch of objects implementing this interface. Conceptially, the parser should produce a map of keys to values which could be queried like any other map, but since values are of varying types, one of the reasons for this class is to provide one level of indirection.\n\nDuring parsing, each key can end up in one of four(!) states:\n\n1. Not present.\n\n2. Key present, no value.\n\n3. Key present, value present and makes sense.\n\n4. Key present, but with an invalid value (out of range, syntactically incorrect).\n\nAny reduction of this list would make things easier to understand, reason about, and test. I would suggest eliminating state (4), instead let the main function ParseFieldTrial return a blool (true for success). If parsing any of the values fail, it should return false and not promise anything about what the results of any of the keys.\n\nIt would be nice if we could also make (1) and (2) have the same meaning, if you\u0027re willing to sacrifice ,Enabled, as a shorthand for ,Enabled:true,.",
      "range": {
        "startLine": 24,
        "startChar": 0,
        "endLine": 24,
        "endChar": 36
      },
      "revId": "3b864afeee3173c8b05e15145e8a2ccc190e2ae4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d7956eb1_06b4c077",
        "filename": "rtc_base/experiments/field_trial_parser.h",
        "patchSetId": 4
      },
      "lineNbr": 24,
      "author": {
        "id": 5531
      },
      "writtenOn": "2018-06-04T18:35:37Z",
      "side": 1,
      "message": "Allowing ,Enabled, makes it backwards compatible with out current convention.\n\nInvalid values might occur due to parameters added in later versions. It\u0027s a design goal to allow that without breaking earlier versions.",
      "parentUuid": "b4d6c663_33256500",
      "range": {
        "startLine": 24,
        "startChar": 0,
        "endLine": 24,
        "endChar": 36
      },
      "revId": "3b864afeee3173c8b05e15145e8a2ccc190e2ae4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9bb52052_cd395818",
        "filename": "rtc_base/experiments/field_trial_parser.h",
        "patchSetId": 4
      },
      "lineNbr": 58,
      "author": {
        "id": 5234
      },
      "writtenOn": "2018-06-04T13:56:59Z",
      "side": 1,
      "message": "Spelling",
      "range": {
        "startLine": 58,
        "startChar": 32,
        "endLine": 58,
        "endChar": 48
      },
      "revId": "3b864afeee3173c8b05e15145e8a2ccc190e2ae4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2ce1f658_6c9c2969",
        "filename": "rtc_base/experiments/field_trial_parser.h",
        "patchSetId": 4
      },
      "lineNbr": 58,
      "author": {
        "id": 5531
      },
      "writtenOn": "2018-06-04T18:35:37Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9bb52052_cd395818",
      "range": {
        "startLine": 58,
        "startChar": 32,
        "endLine": 58,
        "endChar": 48
      },
      "revId": "3b864afeee3173c8b05e15145e8a2ccc190e2ae4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "08dcbf55_825e64e9",
        "filename": "rtc_base/experiments/field_trial_parser.h",
        "patchSetId": 4
      },
      "lineNbr": 62,
      "author": {
        "id": 5234
      },
      "writtenOn": "2018-06-04T13:56:59Z",
      "side": 1,
      "message": "Please name either |key| or |value| depending on which string it is that goes here.",
      "range": {
        "startLine": 62,
        "startChar": 51,
        "endLine": 62,
        "endChar": 54
      },
      "revId": "3b864afeee3173c8b05e15145e8a2ccc190e2ae4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4a1d1c0c_18ffb380",
        "filename": "rtc_base/experiments/field_trial_parser.h",
        "patchSetId": 4
      },
      "lineNbr": 62,
      "author": {
        "id": 5531
      },
      "writtenOn": "2018-06-04T18:35:37Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "08dcbf55_825e64e9",
      "range": {
        "startLine": 62,
        "startChar": 51,
        "endLine": 62,
        "endChar": 54
      },
      "revId": "3b864afeee3173c8b05e15145e8a2ccc190e2ae4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3b236b3b_fd77f810",
        "filename": "rtc_base/experiments/field_trial_parser.h",
        "patchSetId": 4
      },
      "lineNbr": 63,
      "author": {
        "id": 5234
      },
      "writtenOn": "2018-06-04T13:56:59Z",
      "side": 1,
      "message": "Why this magic string, isn\u0027t empty enough? Or do we need any representation of \"unset value\" at all? Wouldn\u0027t it be cleaner to say that to omit a value, one should omit the corresponding key from the mapping. \n\nIn the example \",Enabled,\" example further down, you also omit the :, that\u0027s yet another way to unambiguously omit a specific value (although I take it the intention is that \",,\" should result in a default value of false, while \",Enabled,\" should result in a default value of true, which is stretching the meaning of \"default\" a bit... It would be slightly better to adopt the xml convention which (unless I\u0027m totally confused) is that \",Enabled,\" is a shorthand for \",Enabled:Enabled,\".\n\nI can see the convenience, but if at all possible, I\u0027d like to avoid having three different kinds of valid input (key missing, key present but value missing, both key and value present) with only a subtle difference in meaning between the first two.",
      "range": {
        "startLine": 63,
        "startChar": 30,
        "endLine": 63,
        "endChar": 35
      },
      "revId": "3b864afeee3173c8b05e15145e8a2ccc190e2ae4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d8b7ef6d_90101833",
        "filename": "rtc_base/experiments/field_trial_parser.h",
        "patchSetId": 4
      },
      "lineNbr": 63,
      "author": {
        "id": 5531
      },
      "writtenOn": "2018-06-04T18:35:37Z",
      "side": 1,
      "message": "Removed the nan as it can be confusing for field that actually would handle it as a value.\n\nThe default value will only ever be used if the key is not present or the value is invalid.\n\nNote that the Enabled example is not using an Optional, it is a boolean flag. There is a comment describing the special behavior of the bool class. I had a special Flag class before for the same behavior, but figured it was a bit redundant.\n\nDo you think having a special class for fields like Enabled that is true by their presence would be easier to understand?",
      "parentUuid": "3b236b3b_fd77f810",
      "range": {
        "startLine": 63,
        "startChar": 30,
        "endLine": 63,
        "endChar": 35
      },
      "revId": "3b864afeee3173c8b05e15145e8a2ccc190e2ae4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9c8e75e5_764161a3",
        "filename": "rtc_base/experiments/field_trial_parser.h",
        "patchSetId": 4
      },
      "lineNbr": 63,
      "author": {
        "id": 5234
      },
      "writtenOn": "2018-06-04T19:07:11Z",
      "side": 1,
      "message": "\u003e Note that the Enabled example is not using an Optional, it is a boolean flag. There is a comment describing the special behavior of the bool class. I had a special Flag class before for the same behavior, but figured it was a bit redundant.\n\nWhat do you think of the following model:\n\n1. Always provide value as an optional, set if and only if there\u0027s a \"key:...\" in the string, with a syntactically correct value.\n\n2. A separate bool |present| set if the key was present with or without a value, i.e., \"key\" or \"key:...\" in the string.\n\n3. Delete all of the default-value things.\n\nFor most field trial parameters, code would only use the optional and do \n\n  parameter.value.value_or(experiment\u0027s default value).\n\nor\n\n  if (parameter.value) {\n    enable_experiment(*parameter.value);\n  }\n\nFor the special case of Enabled, code could do \n\n  parameter.value.value_or(parameter.present);\n\nI think that model would simplify the parser abstraction a fair bit, without adding much boilerplate code to callers. (I\u0027d consider mimicking or even inheriting rtc::Optional, so one could do things like *parameter and parameter.value_or, but maybe that is considered bad style).\n\nAs for error handling, I guess it would be acceptable to ignore any parameters with invalid values and still process the rest of the parameters. But to keep implementation simple, report them to the caller as if they weren\u0027t present at all, and just log the error.",
      "parentUuid": "d8b7ef6d_90101833",
      "range": {
        "startLine": 63,
        "startChar": 30,
        "endLine": 63,
        "endChar": 35
      },
      "revId": "3b864afeee3173c8b05e15145e8a2ccc190e2ae4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0e84f953_3cb141de",
        "filename": "rtc_base/experiments/field_trial_parser.h",
        "patchSetId": 4
      },
      "lineNbr": 75,
      "author": {
        "id": 5234
      },
      "writtenOn": "2018-06-04T13:56:59Z",
      "side": 1,
      "message": "Why do you need both an explicit bool + the implied bool in rtc::Optional?",
      "range": {
        "startLine": 75,
        "startChar": 0,
        "endLine": 75,
        "endChar": 21
      },
      "revId": "3b864afeee3173c8b05e15145e8a2ccc190e2ae4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6f62a2e0_ee26be62",
        "filename": "rtc_base/experiments/field_trial_parser.h",
        "patchSetId": 4
      },
      "lineNbr": 75,
      "author": {
        "id": 5531
      },
      "writtenOn": "2018-06-04T18:35:37Z",
      "side": 1,
      "message": "To separate setting the optional to unset and not keeping it as the default that might be a set value.",
      "parentUuid": "0e84f953_3cb141de",
      "range": {
        "startLine": 75,
        "startChar": 0,
        "endLine": 75,
        "endChar": 21
      },
      "revId": "3b864afeee3173c8b05e15145e8a2ccc190e2ae4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0b8f7ed4_c5d1f550",
        "filename": "rtc_base/experiments/field_trial_parser.h",
        "patchSetId": 4
      },
      "lineNbr": 92,
      "author": {
        "id": 5234
      },
      "writtenOn": "2018-06-04T13:56:59Z",
      "side": 1,
      "message": "Having the actual parsing done by the constructor is a bit awkward, in that you need an extra bool to record success/failure. It would look nicer with a\n\n  rtc::Optional\u003cT\u003e parse\u003cT\u003e(const std::string\u0026);\n\n(and if you don\u0027t need to store any state, you could use an ArrayView rather than a string for the input).",
      "range": {
        "startLine": 90,
        "startChar": 0,
        "endLine": 92,
        "endChar": 28
      },
      "revId": "3b864afeee3173c8b05e15145e8a2ccc190e2ae4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "740b8d0b_b9da5d2b",
        "filename": "rtc_base/experiments/field_trial_parser.h",
        "patchSetId": 4
      },
      "lineNbr": 92,
      "author": {
        "id": 5531
      },
      "writtenOn": "2018-06-04T18:35:37Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "0b8f7ed4_c5d1f550",
      "range": {
        "startLine": 90,
        "startChar": 0,
        "endLine": 92,
        "endChar": 28
      },
      "revId": "3b864afeee3173c8b05e15145e8a2ccc190e2ae4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1de5500b_77ac8cf9",
        "filename": "rtc_base/experiments/field_trial_units.cc",
        "patchSetId": 4
      },
      "lineNbr": 23,
      "author": {
        "id": 5234
      },
      "writtenOn": "2018-06-04T13:56:59Z",
      "side": 1,
      "message": "If you use %10s or so, you don\u0027t need to enforce any size limit on the input string.",
      "range": {
        "startLine": 23,
        "startChar": 46,
        "endLine": 23,
        "endChar": 48
      },
      "revId": "3b864afeee3173c8b05e15145e8a2ccc190e2ae4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "164c8108_acd1b13a",
        "filename": "rtc_base/experiments/field_trial_units.cc",
        "patchSetId": 4
      },
      "lineNbr": 23,
      "author": {
        "id": 5531
      },
      "writtenOn": "2018-06-04T18:35:37Z",
      "side": 1,
      "message": "Thanks.",
      "parentUuid": "1de5500b_77ac8cf9",
      "range": {
        "startLine": 23,
        "startChar": 46,
        "endLine": 23,
        "endChar": 48
      },
      "revId": "3b864afeee3173c8b05e15145e8a2ccc190e2ae4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "26c4ad2c_d1006b2e",
        "filename": "rtc_base/experiments/field_trial_units.cc",
        "patchSetId": 4
      },
      "lineNbr": 25,
      "author": {
        "id": 5234
      },
      "writtenOn": "2018-06-04T13:56:59Z",
      "side": 1,
      "message": "If possible without sacrificing readability, avoid this copy. E.g, by returning the offset to the unit string.",
      "range": {
        "startLine": 25,
        "startChar": 4,
        "endLine": 25,
        "endChar": 22
      },
      "revId": "3b864afeee3173c8b05e15145e8a2ccc190e2ae4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "465539a5_2ee817ca",
        "filename": "rtc_base/experiments/field_trial_units.cc",
        "patchSetId": 4
      },
      "lineNbr": 25,
      "author": {
        "id": 5531
      },
      "writtenOn": "2018-06-04T18:35:37Z",
      "side": 1,
      "message": "I didn\u0027t manage to figure something good out. But I don\u0027t think the memory usage will be any issue.",
      "parentUuid": "26c4ad2c_d1006b2e",
      "range": {
        "startLine": 25,
        "startChar": 4,
        "endLine": 25,
        "endChar": 22
      },
      "revId": "3b864afeee3173c8b05e15145e8a2ccc190e2ae4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bf98371b_e885c3e1",
        "filename": "rtc_base/experiments/field_trial_units.cc",
        "patchSetId": 4
      },
      "lineNbr": 34,
      "author": {
        "id": 5234
      },
      "writtenOn": "2018-06-04T13:56:59Z",
      "side": 1,
      "message": "Do we really need the flexibility with multiple choice of units in a field trial string?\nCan\u0027t the experiment say \"bits per secong, period\" and use that, possibly in combination with standard float exponential notation like 300e3?",
      "range": {
        "startLine": 32,
        "startChar": 0,
        "endLine": 34,
        "endChar": 62
      },
      "revId": "3b864afeee3173c8b05e15145e8a2ccc190e2ae4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "431088d5_538e718c",
        "filename": "rtc_base/experiments/field_trial_units.cc",
        "patchSetId": 4
      },
      "lineNbr": 34,
      "author": {
        "id": 5531
      },
      "writtenOn": "2018-06-04T18:35:37Z",
      "side": 1,
      "message": "It could, but it doesn\u0027t hurt to allow using units if it makes things more clear.",
      "parentUuid": "bf98371b_e885c3e1",
      "range": {
        "startLine": 32,
        "startChar": 0,
        "endLine": 34,
        "endChar": 62
      },
      "revId": "3b864afeee3173c8b05e15145e8a2ccc190e2ae4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    }
  ]
}