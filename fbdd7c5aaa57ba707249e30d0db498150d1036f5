{
  "comments": [
    {
      "key": {
        "uuid": "861f50ff_47e101bb",
        "filename": "rtc_base/ref_counter.h",
        "patchSetId": 4
      },
      "lineNbr": 30,
      "author": {
        "id": 5126
      },
      "writtenOn": "2019-11-26T10:47:17Z",
      "side": 1,
      "message": "Suggestion with less extraneous details:\n\n  // Relaxed memory order: The current thread is allowed to access the reference counted object both before and after the atomic op, so we don\u0027t need to prevent memory access reordering past the atomic op.",
      "revId": "fbdd7c5aaa57ba707249e30d0db498150d1036f5",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a93be886_eecbc1b9",
        "filename": "rtc_base/ref_counter.h",
        "patchSetId": 4
      },
      "lineNbr": 30,
      "author": {
        "id": 5019
      },
      "writtenOn": "2019-11-26T11:29:29Z",
      "side": 1,
      "message": "Done.\n(except that I strictly dislike pronoun \u0027we\u0027 as it may refer both to implementer and to the user of the function)",
      "parentUuid": "861f50ff_47e101bb",
      "revId": "fbdd7c5aaa57ba707249e30d0db498150d1036f5",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fedab67c_61a9adf1",
        "filename": "rtc_base/ref_counter.h",
        "patchSetId": 4
      },
      "lineNbr": 30,
      "author": {
        "id": 5126
      },
      "writtenOn": "2019-11-26T12:37:34Z",
      "side": 1,
      "message": "We think your dislike is unfounded, but very well. :-)",
      "parentUuid": "a93be886_eecbc1b9",
      "revId": "fbdd7c5aaa57ba707249e30d0db498150d1036f5",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a5b9f922_9d6679b1",
        "filename": "rtc_base/ref_counter.h",
        "patchSetId": 4
      },
      "lineNbr": 42,
      "author": {
        "id": 5126
      },
      "writtenOn": "2019-11-26T10:47:17Z",
      "side": 1,
      "message": "Also talk about the acquire half? Suggestion:\n\n  // We need release memory order because after the atomic op, the current thread is no longer allowed to touch the refcounted object, so all memory accesses to it must finish before that. We also need acquire memory order because in case we are the ones removing the last reference, we\u0027ll be destroying the refcounted object, and memory accesses related to that must not be reordered before the atomic op.\n  // In short, we release the permission to use the refcounted object, and conditionally acquire the permission to destroy it.",
      "revId": "fbdd7c5aaa57ba707249e30d0db498150d1036f5",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f492ff45_79f7660f",
        "filename": "rtc_base/ref_counter.h",
        "patchSetId": 4
      },
      "lineNbr": 42,
      "author": {
        "id": 5019
      },
      "writtenOn": "2019-11-26T11:29:29Z",
      "side": 1,
      "message": "I tried to talk about both, since acquire and release are two parts of the same synchronization.\n(tbh, I took this comment from chromium code almost unchanged).\n\nit just happen that this function participates in both parts of that synchronization.",
      "parentUuid": "a5b9f922_9d6679b1",
      "revId": "fbdd7c5aaa57ba707249e30d0db498150d1036f5",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "370c16f3_b865d986",
        "filename": "rtc_base/ref_counter.h",
        "patchSetId": 4
      },
      "lineNbr": 55,
      "author": {
        "id": 5019
      },
      "writtenOn": "2019-11-26T11:29:29Z",
      "side": 1,
      "message": "I also rephrased the comments to be consistent with this phrase.",
      "range": {
        "startLine": 54,
        "startChar": 37,
        "endLine": 55,
        "endChar": 22
      },
      "revId": "fbdd7c5aaa57ba707249e30d0db498150d1036f5",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "62eb05a1_987f655d",
        "filename": "rtc_base/ref_counter.h",
        "patchSetId": 4
      },
      "lineNbr": 59,
      "author": {
        "id": 5126
      },
      "writtenOn": "2019-11-26T10:47:17Z",
      "side": 1,
      "message": "The current text is not correct---we do not release. Suggestion:\n\n  // We need acquire memory order because in case the atomic op returns 1, we\u0027re allowed to access the refcounted object without caring about concurrent accesses from other threads from then on; such accesses must not be reordered before the atomic op.\n  // In short, we release no permissions, and conditionally acquire the permission to exclusive-use the refcounted object.",
      "revId": "fbdd7c5aaa57ba707249e30d0db498150d1036f5",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8946a5ee_7a392c98",
        "filename": "rtc_base/ref_counter.h",
        "patchSetId": 4
      },
      "lineNbr": 59,
      "author": {
        "id": 5019
      },
      "writtenOn": "2019-11-26T11:29:29Z",
      "side": 1,
      "message": "we do release part in DecRef.\n\nAs I understand release and acquire must come in pair:\nhttps://en.cppreference.com/w/cpp/atomic/memory_order#Release-Acquire_ordering\n\ncomment rephrased, does it look correct now?",
      "parentUuid": "62eb05a1_987f655d",
      "revId": "fbdd7c5aaa57ba707249e30d0db498150d1036f5",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "73937837_5ca7f056",
        "filename": "rtc_base/ref_counter.h",
        "patchSetId": 4
      },
      "lineNbr": 59,
      "author": {
        "id": 5126
      },
      "writtenOn": "2019-11-26T12:37:34Z",
      "side": 1,
      "message": "\u003e we do release part in DecRef.\n\nYes, but not here, which is what I thought the comment was talking about when it said \"insert acquire-release barrier\".\n\n\u003e As I understand release and acquire must come in pair:\n\u003e https://en.cppreference.com/w/cpp/atomic/memory_order#Release-Acquire_ordering\n\nThey don\u0027t have to, but if they don\u0027t, the don\u0027t *do* anything.\n\nI find it useful to think of it in terms of acquiring and releasing some permission. For example, in HasOneRef, we acquire the exclusive-use permission; in IncRef, we just keep the share-use permission; and in DecRef, we release any permission we had and acquire the delete permission.\n\n(We initially acquire the share-use *and* exclusive-use permissions when creating the counter---or, equivalently, we always had them---and we lose the exclusive-use permission when we transfer ownership of a refcount to another thread; the inter-thread communication primitive will contain the proper release barrier.)\n\n\u003e comment rephrased, does it look correct now?\n\nYes.",
      "parentUuid": "8946a5ee_7a392c98",
      "revId": "fbdd7c5aaa57ba707249e30d0db498150d1036f5",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    }
  ]
}