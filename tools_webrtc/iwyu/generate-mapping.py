#!/usr/bin/env python3

import os
import re
import subprocess

# Get the current script location
cwd = os.path.dirname(os.path.abspath(__file__))
os.chdir(os.path.join(cwd, "../../buildtools/third_party/libc++/trunk/include"))

# Search for all includes in libc++
search = subprocess.check_output(["git", "grep", "include <.*>"],
                                 encoding="utf-8").splitlines()
pattern = re.compile(r"(.*):.*<(.*)>")

includes = []
for line in search:
  match = pattern.search(line)
  if match:
    includes.append((match.group(1), match.group(2)))

# Filter includes
mapping = []
for source, included in includes:
  source_visibility = "public" if "__" not in source else "private"
  included_visibility = "public" if "__" not in included else "private"

  # Don't include transitive public headers as it could lead to a circular dependency
  if included_visibility == "public": continue

  #if source.split("/")[0] != included.split("/")[0]: continue

  # We don't want the mappings for cfoobar to foobar.h
  if f"{included}.h" == f"c{source}": continue

  mapping.append(
      f"{{ include: [\"<{included}>\", \"{included_visibility}\", \"<{source}>\", \"{source_visibility}\"]}},"
  )

# Sort and remove duplicates
mapping = sorted(set(mapping))

# Write to file
with open(os.path.join(cwd, "libcxx.imp"), "w", encoding="utf-8") as f:
  print("# DO NOT EDIT, generated by generate-mapping.py", file=f)
  print("[", file=f)
  for include in mapping:
    print(include, file=f)
  print("]", file=f)
