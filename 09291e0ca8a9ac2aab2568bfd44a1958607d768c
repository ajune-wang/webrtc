{
  "comments": [
    {
      "key": {
        "uuid": "f6540ad2_8eabcda3",
        "filename": "logging/rtc_event_log/rtc_event_log_parser_new.cc",
        "patchSetId": 1
      },
      "lineNbr": 83,
      "author": {
        "id": 5147
      },
      "writtenOn": "2018-05-28T12:18:40Z",
      "side": 1,
      "message": "git-cl-format seems to have had unexpected results here. Could you put the comment on its own line, and possibly elaborate a bit more?\n\nOr, perhaps better, could you move the code from ParsedRtcEventLogNew::GetEventType up here?",
      "range": {
        "startLine": 82,
        "startChar": 0,
        "endLine": 83,
        "endChar": 60
      },
      "revId": "09291e0ca8a9ac2aab2568bfd44a1958607d768c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c6c1d285_930c09e7",
        "filename": "logging/rtc_event_log/rtc_event_log_parser_new.cc",
        "patchSetId": 1
      },
      "lineNbr": 83,
      "author": {
        "id": 5150
      },
      "writtenOn": "2018-05-28T14:49:56Z",
      "side": 1,
      "message": "Fixed formatting and expanded the comment.\n\nCan\u0027t easily move the code because this function operates only uses the enum and ParsedRtcEventLogNew::GetEventType requires the full event.\n\nThis function will be removed after porting all tests to the new API.",
      "parentUuid": "f6540ad2_8eabcda3",
      "range": {
        "startLine": 82,
        "startChar": 0,
        "endLine": 83,
        "endChar": 60
      },
      "revId": "09291e0ca8a9ac2aab2568bfd44a1958607d768c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "10dc6fb6_893831a0",
        "filename": "logging/rtc_event_log/rtc_event_log_parser_new.cc",
        "patchSetId": 1
      },
      "lineNbr": 83,
      "author": {
        "id": 5147
      },
      "writtenOn": "2018-05-29T11:28:55Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "c6c1d285_930c09e7",
      "range": {
        "startLine": 82,
        "startChar": 0,
        "endLine": 83,
        "endChar": 60
      },
      "revId": "09291e0ca8a9ac2aab2568bfd44a1958607d768c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "53b1928b_58f66ea5",
        "filename": "logging/rtc_event_log/rtc_event_log_parser_new.cc",
        "patchSetId": 1
      },
      "lineNbr": 1134,
      "author": {
        "id": 5147
      },
      "writtenOn": "2018-05-28T12:18:40Z",
      "side": 1,
      "message": "What does the auto-generated code for result() do if !has_result()? I\u0027m asking in case it asserts too, in which case, we could save the RTC_CHECK.",
      "range": {
        "startLine": 1133,
        "startChar": 0,
        "endLine": 1134,
        "endChar": 65
      },
      "revId": "09291e0ca8a9ac2aab2568bfd44a1958607d768c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4d065b7f_cb9fd1c3",
        "filename": "logging/rtc_event_log/rtc_event_log_parser_new.cc",
        "patchSetId": 1
      },
      "lineNbr": 1134,
      "author": {
        "id": 5150
      },
      "writtenOn": "2018-05-28T14:49:56Z",
      "side": 1,
      "message": "It returns a default value.",
      "parentUuid": "53b1928b_58f66ea5",
      "range": {
        "startLine": 1133,
        "startChar": 0,
        "endLine": 1134,
        "endChar": 65
      },
      "revId": "09291e0ca8a9ac2aab2568bfd44a1958607d768c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7828d690_743fb182",
        "filename": "logging/rtc_event_log/rtc_event_log_parser_new.cc",
        "patchSetId": 1
      },
      "lineNbr": 1134,
      "author": {
        "id": 5147
      },
      "writtenOn": "2018-05-29T11:28:55Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "4d065b7f_cb9fd1c3",
      "range": {
        "startLine": 1133,
        "startChar": 0,
        "endLine": 1134,
        "endChar": 65
      },
      "revId": "09291e0ca8a9ac2aab2568bfd44a1958607d768c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4cb762e3_3b660168",
        "filename": "logging/rtc_event_log/rtc_event_log_parser_new.cc",
        "patchSetId": 1
      },
      "lineNbr": 1141,
      "author": {
        "id": 5147
      },
      "writtenOn": "2018-05-28T12:18:40Z",
      "side": 1,
      "message": "Can a defective log end up not having bitrate_bps() set, yet end up reaching this point in the parser? I\u0027m asking because, if yes, failing gracefully rather than crashing, would be advisable.",
      "range": {
        "startLine": 1140,
        "startChar": 0,
        "endLine": 1141,
        "endChar": 43
      },
      "revId": "09291e0ca8a9ac2aab2568bfd44a1958607d768c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9022794d_38d35e9c",
        "filename": "logging/rtc_event_log/rtc_event_log_parser_new.cc",
        "patchSetId": 1
      },
      "lineNbr": 1141,
      "author": {
        "id": 5150
      },
      "writtenOn": "2018-05-28T14:49:56Z",
      "side": 1,
      "message": "It can if you manually manufacture, and allowing graceful failure is on the todo list. However, please note that this would mostly be a cosmetic improvement since no analysis tool should continue if the log is clearly defective. CHECKING in this case is an easy way to break out of the parsing and at the same time print the location of the error without using exceptions. We do the same in all other places in the parser.",
      "parentUuid": "4cb762e3_3b660168",
      "range": {
        "startLine": 1140,
        "startChar": 0,
        "endLine": 1141,
        "endChar": 43
      },
      "revId": "09291e0ca8a9ac2aab2568bfd44a1958607d768c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1b50e9da_07e13ce0",
        "filename": "logging/rtc_event_log/rtc_event_log_parser_new.cc",
        "patchSetId": 1
      },
      "lineNbr": 1141,
      "author": {
        "id": 5147
      },
      "writtenOn": "2018-05-29T11:28:55Z",
      "side": 1,
      "message": "If this is the pattern followed throughout the parser, this CL shouldn\u0027t be the one to change it. But in general, I think it\u0027s better practice to structure code in a way that allows reuse. A function/class/module that assumes that it would only be used in applications that can afford to crash, are not as reusable as ones that don\u0027t.\n\nYou\u0027re probably aware, but it\u0027s not clear from the phrasing of the last comment, so I\u0027ll mention just in case, that corruption on disk or over the wire can end up with a defective log.",
      "parentUuid": "9022794d_38d35e9c",
      "range": {
        "startLine": 1140,
        "startChar": 0,
        "endLine": 1141,
        "endChar": 43
      },
      "revId": "09291e0ca8a9ac2aab2568bfd44a1958607d768c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e56492f0_20283646",
        "filename": "logging/rtc_event_log/rtc_event_log_parser_new.h",
        "patchSetId": 1
      },
      "lineNbr": 473,
      "author": {
        "id": 5147
      },
      "writtenOn": "2018-05-28T12:18:40Z",
      "side": 1,
      "message": "+1",
      "revId": "09291e0ca8a9ac2aab2568bfd44a1958607d768c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "41c09e5b_537ee315",
        "filename": "logging/rtc_event_log/rtc_event_log_parser_new.h",
        "patchSetId": 1
      },
      "lineNbr": 473,
      "author": {
        "id": 5150
      },
      "writtenOn": "2018-05-28T14:49:56Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "e56492f0_20283646",
      "revId": "09291e0ca8a9ac2aab2568bfd44a1958607d768c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0d2b2784_d2e73b44",
        "filename": "logging/rtc_event_log/rtc_event_log_parser_new.h",
        "patchSetId": 1
      },
      "lineNbr": 489,
      "author": {
        "id": 5147
      },
      "writtenOn": "2018-05-28T12:18:40Z",
      "side": 1,
      "message": "Random rant - I wish there were a standard way to order such things. \"Black and white\" is about 40 times more common than \"white and black\", according to a Google search. I wish we also had a way to order success/failure in a common way. My personal preference would 0-1, or failure-success. It also has the benefit of being alphabetically ordered.",
      "range": {
        "startLine": 488,
        "startChar": 0,
        "endLine": 489,
        "endChar": 33
      },
      "revId": "09291e0ca8a9ac2aab2568bfd44a1958607d768c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cc5eae7b_343fea45",
        "filename": "logging/rtc_event_log/rtc_event_log_parser_new.h",
        "patchSetId": 1
      },
      "lineNbr": 489,
      "author": {
        "id": 5150
      },
      "writtenOn": "2018-05-28T14:49:56Z",
      "side": 1,
      "message": "Reordered as you suggested.",
      "parentUuid": "0d2b2784_d2e73b44",
      "range": {
        "startLine": 488,
        "startChar": 0,
        "endLine": 489,
        "endChar": 33
      },
      "revId": "09291e0ca8a9ac2aab2568bfd44a1958607d768c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c80c97e6_0e321b99",
        "filename": "logging/rtc_event_log/rtc_event_log_parser_new.h",
        "patchSetId": 1
      },
      "lineNbr": 643,
      "author": {
        "id": 5147
      },
      "writtenOn": "2018-05-28T12:18:40Z",
      "side": 1,
      "message": "nit: Could we have a comment distinguishing the blocks, rather than just an empty line?\nnit2: My vote would be for empty lines throughout, btw.",
      "range": {
        "startLine": 641,
        "startChar": 0,
        "endLine": 643,
        "endChar": 65
      },
      "revId": "09291e0ca8a9ac2aab2568bfd44a1958607d768c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "44eb1959_1830f23c",
        "filename": "logging/rtc_event_log/rtc_event_log_parser_new.h",
        "patchSetId": 1
      },
      "lineNbr": 643,
      "author": {
        "id": 5150
      },
      "writtenOn": "2018-05-28T14:49:56Z",
      "side": 1,
      "message": "Done. The comments are a bit obvious though.",
      "parentUuid": "c80c97e6_0e321b99",
      "range": {
        "startLine": 641,
        "startChar": 0,
        "endLine": 643,
        "endChar": 65
      },
      "revId": "09291e0ca8a9ac2aab2568bfd44a1958607d768c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8aea02c5_0dbe077e",
        "filename": "logging/rtc_event_log/rtc_event_log_parser_new.h",
        "patchSetId": 1
      },
      "lineNbr": 643,
      "author": {
        "id": 5147
      },
      "writtenOn": "2018-05-29T11:28:55Z",
      "side": 1,
      "message": "I see those as dividers, mostly. When you look in one ssrc-related getter, you immediately see where related getters start and end. Just a personal preference.",
      "parentUuid": "44eb1959_1830f23c",
      "range": {
        "startLine": 641,
        "startChar": 0,
        "endLine": 643,
        "endChar": 65
      },
      "revId": "09291e0ca8a9ac2aab2568bfd44a1958607d768c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c5c291b8_de4db1c6",
        "filename": "logging/rtc_event_log/rtc_event_log_unittest.cc",
        "patchSetId": 1
      },
      "lineNbr": 107,
      "author": {
        "id": 5147
      },
      "writtenOn": "2018-05-28T12:18:40Z",
      "side": 1,
      "message": "FYI, to someone looking at the code for the first time (or first time in a while), it is confusing to see that |event_type_to_string| and |parsed_event_type_to_string| apparently differ not just in being pre/post-parsing, but also one being generally \"EventType\" and the other \"ParsedRtcEventLogNew::EventType\", but a non-new ParsedRtcEventLog::EventType is not in sight.",
      "revId": "09291e0ca8a9ac2aab2568bfd44a1958607d768c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "985bb06f_579f585f",
        "filename": "logging/rtc_event_log/rtc_event_log_unittest.cc",
        "patchSetId": 1
      },
      "lineNbr": 107,
      "author": {
        "id": 5150
      },
      "writtenOn": "2018-05-28T14:49:56Z",
      "side": 1,
      "message": "This will be removed when rewriting the unit tests.\n\nThe non-new version of the event types are in rtc_event_log_parser.h, which is deprecated and therefore not tested.",
      "parentUuid": "c5c291b8_de4db1c6",
      "revId": "09291e0ca8a9ac2aab2568bfd44a1958607d768c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "32df14ff_6615a9b4",
        "filename": "logging/rtc_event_log/rtc_event_log_unittest.cc",
        "patchSetId": 1
      },
      "lineNbr": 107,
      "author": {
        "id": 5147
      },
      "writtenOn": "2018-05-29T11:28:55Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "985bb06f_579f585f",
      "revId": "09291e0ca8a9ac2aab2568bfd44a1958607d768c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "74b51432_2b3cecb7",
        "filename": "logging/rtc_event_log/rtc_event_log_unittest.cc",
        "patchSetId": 1
      },
      "lineNbr": 154,
      "author": {
        "id": 5147
      },
      "writtenOn": "2018-05-28T12:18:40Z",
      "side": 1,
      "message": "Nobody appears to be calling this function.",
      "revId": "09291e0ca8a9ac2aab2568bfd44a1958607d768c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ca89cdaa_128a87e3",
        "filename": "logging/rtc_event_log/rtc_event_log_unittest.cc",
        "patchSetId": 1
      },
      "lineNbr": 154,
      "author": {
        "id": 5150
      },
      "writtenOn": "2018-05-28T14:49:56Z",
      "side": 1,
      "message": "This will be removed when rewriting the unit tests.\n\nPrinting the expected events and the actual events was a very useful tool when debugging failed tests though.",
      "parentUuid": "74b51432_2b3cecb7",
      "revId": "09291e0ca8a9ac2aab2568bfd44a1958607d768c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d3fdaa99_c6f2536a",
        "filename": "logging/rtc_event_log/rtc_event_log_unittest.cc",
        "patchSetId": 1
      },
      "lineNbr": 154,
      "author": {
        "id": 5147
      },
      "writtenOn": "2018-05-29T11:28:55Z",
      "side": 1,
      "message": "Okay; just wanted to make sure it was left behind intentionally.",
      "parentUuid": "ca89cdaa_128a87e3",
      "revId": "09291e0ca8a9ac2aab2568bfd44a1958607d768c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c2652220_d7635468",
        "filename": "logging/rtc_event_log/rtc_event_log_unittest.cc",
        "patchSetId": 1
      },
      "lineNbr": 650,
      "author": {
        "id": 5147
      },
      "writtenOn": "2018-05-28T12:18:40Z",
      "side": 1,
      "message": "Same here; any users?",
      "revId": "09291e0ca8a9ac2aab2568bfd44a1958607d768c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ff698895_a087b4ce",
        "filename": "logging/rtc_event_log/rtc_event_log_unittest.cc",
        "patchSetId": 1
      },
      "lineNbr": 650,
      "author": {
        "id": 5150
      },
      "writtenOn": "2018-05-28T14:49:56Z",
      "side": 1,
      "message": "As above.",
      "parentUuid": "c2652220_d7635468",
      "revId": "09291e0ca8a9ac2aab2568bfd44a1958607d768c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "69b04300_118f99c8",
        "filename": "logging/rtc_event_log/rtc_event_log_unittest.cc",
        "patchSetId": 1
      },
      "lineNbr": 650,
      "author": {
        "id": 5147
      },
      "writtenOn": "2018-05-29T11:28:55Z",
      "side": 1,
      "message": "Oopsie; it was the function and its forward-declaration, not two functions with an overloaded name, as I had thought for some reason. I must have been distracted.",
      "parentUuid": "ff698895_a087b4ce",
      "revId": "09291e0ca8a9ac2aab2568bfd44a1958607d768c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c383b98c_d0654116",
        "filename": "logging/rtc_event_log/rtc_event_log_unittest.cc",
        "patchSetId": 1
      },
      "lineNbr": 651,
      "author": {
        "id": 5147
      },
      "writtenOn": "2018-05-29T11:28:55Z",
      "side": 1,
      "message": "I\u0027m not sure what the new guidelines say about using std::ostream?",
      "revId": "09291e0ca8a9ac2aab2568bfd44a1958607d768c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    }
  ]
}