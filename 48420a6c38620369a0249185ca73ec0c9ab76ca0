{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "1b10b0eb_91ef3f2d",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 9,
      "author": {
        "id": 5634
      },
      "writtenOn": "2022-01-18T22:25:25Z",
      "side": 1,
      "message": "The WebRTC convention is \"Bug: \" and either webrtc:number or chromium:number. Can you file a tracking bug in one of those trackers?",
      "revId": "48420a6c38620369a0249185ca73ec0c9ab76ca0",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a5a6502a_6e6d89a2",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 9,
      "author": {
        "id": 18809
      },
      "writtenOn": "2022-01-18T22:36:49Z",
      "side": 1,
      "message": "Filed https://bugs.chromium.org/p/webrtc/issues/detail?id\u003d13585 and updated description.",
      "parentUuid": "1b10b0eb_91ef3f2d",
      "revId": "48420a6c38620369a0249185ca73ec0c9ab76ca0",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "51674660_9fe7db5b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 18809
      },
      "writtenOn": "2022-01-18T20:17:18Z",
      "side": 1,
      "message": "QC Dry Run build failures look unrelated.",
      "revId": "48420a6c38620369a0249185ca73ec0c9ab76ca0",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fe293787_e9a9f9ea",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5634
      },
      "writtenOn": "2022-01-18T22:25:25Z",
      "side": 1,
      "message": "Adding Mirko who knows more about when we should or should not export symbols.\n\nI\u0027m a bit worried about exposing stuff from namespace rtc::tracing given our efforts to make sure all dependencies go through //api and use the webrtc:: namespace.\n\nAny appropriate design doc references?",
      "revId": "48420a6c38620369a0249185ca73ec0c9ab76ca0",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7a6dfd3a_8b23535a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 18809
      },
      "writtenOn": "2022-01-18T22:36:49Z",
      "side": 1,
      "message": "https://chromium-review.googlesource.com/c/chromium/src/+/3399049 is the CRD change to make use of this functionality. I have a much broader internal design doc, but I put the relevant details into https://bugs.chromium.org/p/webrtc/issues/detail?id\u003d13585.",
      "parentUuid": "fe293787_e9a9f9ea",
      "revId": "48420a6c38620369a0249185ca73ec0c9ab76ca0",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "175bd095_93128d2f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5087
      },
      "writtenOn": "2022-01-19T08:27:14Z",
      "side": 1,
      "message": "It is interesting to note how this API is exposed by the Obj-C layer (https://source.chromium.org/chromium/chromium/src/+/main:third_party/webrtc/sdk/objc/api/peerconnection/RTCTracing.h;l\u003d19-21;drc\u003d7bca8ca4e2d7833da719c22bc0e1368a1d81ddc9) and by the Java layer (https://source.chromium.org/chromium/chromium/src/+/main:third_party/webrtc/sdk/android/src/jni/pc/peer_connection_factory.cc;l\u003d225-237;drc\u003dac0d18341d3bcc13e15dd89170d04aa09f987cfe) so I wonder if this should be moved to api/ in order to let users of the C++ WebRTC API to control trace events more directly.\n\ntommi@, does that make sense?\n\nIf yes, we can move them to api/ before starting to use the APIs in Chromium. Would that work for you Nicolas?",
      "parentUuid": "7a6dfd3a_8b23535a",
      "revId": "48420a6c38620369a0249185ca73ec0c9ab76ca0",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "43a41430_71dd3213",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5634
      },
      "writtenOn": "2022-01-19T09:00:47Z",
      "side": 1,
      "message": "Looking at the names and the structure, would it make sense to make a class in API called InternalTracer, with static methods Setup, StartCapture, StartCaptureToFile, StopCapture and Shutdown? Or even expose the global object that these things manipulate? (at the moment these are 2 global-scope function pointers)\n\nGiven that this interface doesn\u0027t look well-designed to me, perhaps we should just approve this CL and redesign the interface while we\u0027re moving it to api/, so that we don\u0027t block Nicolas?",
      "parentUuid": "175bd095_93128d2f",
      "revId": "48420a6c38620369a0249185ca73ec0c9ab76ca0",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    }
  ]
}