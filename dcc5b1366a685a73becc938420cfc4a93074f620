{
  "comments": [
    {
      "key": {
        "uuid": "15b0a16c_ff423938",
        "filename": "modules/rtp_rtcp/source/source_tracker.cc",
        "patchSetId": 2
      },
      "lineNbr": 14,
      "author": {
        "id": 5019
      },
      "writtenOn": "2019-06-10T17:59:36Z",
      "side": 1,
      "message": "needed?",
      "revId": "dcc5b1366a685a73becc938420cfc4a93074f620",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ba49d5a8_703d8403",
        "filename": "modules/rtp_rtcp/source/source_tracker.cc",
        "patchSetId": 2
      },
      "lineNbr": 14,
      "author": {
        "id": 8392
      },
      "writtenOn": "2019-06-11T14:00:36Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "15b0a16c_ff423938",
      "revId": "dcc5b1366a685a73becc938420cfc4a93074f620",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2101af34_3575352f",
        "filename": "modules/rtp_rtcp/source/source_tracker.cc",
        "patchSetId": 2
      },
      "lineNbr": 41,
      "author": {
        "id": 5019
      },
      "writtenOn": "2019-06-10T17:59:36Z",
      "side": 1,
      "message": "prefer\nSourceKey key(..., ...);\nto show SourceKey is a type, not a function",
      "range": {
        "startLine": 41,
        "startChar": 4,
        "endLine": 41,
        "endChar": 24
      },
      "revId": "dcc5b1366a685a73becc938420cfc4a93074f620",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b8134f60_3ed645d8",
        "filename": "modules/rtp_rtcp/source/source_tracker.cc",
        "patchSetId": 2
      },
      "lineNbr": 41,
      "author": {
        "id": 8392
      },
      "writtenOn": "2019-06-11T14:00:36Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "2101af34_3575352f",
      "range": {
        "startLine": 41,
        "startChar": 4,
        "endLine": 41,
        "endChar": 24
      },
      "revId": "dcc5b1366a685a73becc938420cfc4a93074f620",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b61832f8_315d9f0f",
        "filename": "modules/rtp_rtcp/source/source_tracker.cc",
        "patchSetId": 2
      },
      "lineNbr": 42,
      "author": {
        "id": 5019
      },
      "writtenOn": "2019-06-10T17:59:36Z",
      "side": 1,
      "message": "mentioning type explicitly makes code easier to navigate:\nSourceEntry\u0026 entry \u003d ...",
      "range": {
        "startLine": 42,
        "startChar": 4,
        "endLine": 42,
        "endChar": 8
      },
      "revId": "dcc5b1366a685a73becc938420cfc4a93074f620",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dcbfb8f3_dd6dac44",
        "filename": "modules/rtp_rtcp/source/source_tracker.cc",
        "patchSetId": 2
      },
      "lineNbr": 42,
      "author": {
        "id": 8392
      },
      "writtenOn": "2019-06-11T14:00:36Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b61832f8_315d9f0f",
      "range": {
        "startLine": 42,
        "startChar": 4,
        "endLine": 42,
        "endChar": 8
      },
      "revId": "dcc5b1366a685a73becc938420cfc4a93074f620",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b93012a3_4feb62c2",
        "filename": "modules/rtp_rtcp/source/source_tracker.cc",
        "patchSetId": 2
      },
      "lineNbr": 76,
      "author": {
        "id": 5019
      },
      "writtenOn": "2019-06-10T17:59:36Z",
      "side": 1,
      "message": "here you have a double lookup, it is better to avoid those.\ne.g.\nauto inserted \u003d map_.emplace(key, SourceEntry());\nauto map_it \u003d inserted.first;\nif (inserted.second) {\n   // Inserted a new entry.\n   auto list_it \u003d list_.emplace_front(...);\n   map_it-\u003esecond \u003d list_it;\n   return list_it-\u003esecond;\n}\n...",
      "range": {
        "startLine": 76,
        "startChar": 16,
        "endLine": 76,
        "endChar": 25
      },
      "revId": "dcc5b1366a685a73becc938420cfc4a93074f620",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1b642577_1cd1ec7d",
        "filename": "modules/rtp_rtcp/source/source_tracker.cc",
        "patchSetId": 2
      },
      "lineNbr": 76,
      "author": {
        "id": 8392
      },
      "writtenOn": "2019-06-11T14:00:36Z",
      "side": 1,
      "message": "I thought about it.\n\n`emplace() + second` is slower than `find() + emplace()` when the insertion does not happen. C++17\u0027s `emplace_try()` is better, but we would still have to pay the unnecessary cost of constructing a `SourceEntry`. It\u0027s in this code much more likely (like 1000x more likely) for insertion to not happen than for it to happen. So `find() + emplace()` should be ideal.\n\nI\u0027ve added a comment to let future readers know that this code is intentional.",
      "parentUuid": "b93012a3_4feb62c2",
      "range": {
        "startLine": 76,
        "startChar": 16,
        "endLine": 76,
        "endChar": 25
      },
      "revId": "dcc5b1366a685a73becc938420cfc4a93074f620",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "628f09d1_a73f2bdf",
        "filename": "modules/rtp_rtcp/source/source_tracker.cc",
        "patchSetId": 2
      },
      "lineNbr": 76,
      "author": {
        "id": 5019
      },
      "writtenOn": "2019-06-11T17:22:06Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "1b642577_1cd1ec7d",
      "range": {
        "startLine": 76,
        "startChar": 16,
        "endLine": 76,
        "endChar": 25
      },
      "revId": "dcc5b1366a685a73becc938420cfc4a93074f620",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "44f8fe61_3ad874fb",
        "filename": "modules/rtp_rtcp/source/source_tracker.cc",
        "patchSetId": 2
      },
      "lineNbr": 79,
      "author": {
        "id": 5019
      },
      "writtenOn": "2019-06-10T17:59:36Z",
      "side": 1,
      "message": "why is it safe/portable?\nstd::list documentation always mention 2nd list as \u0027another\u0027",
      "revId": "dcc5b1366a685a73becc938420cfc4a93074f620",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "85ef737d_61b9ee26",
        "filename": "modules/rtp_rtcp/source/source_tracker.cc",
        "patchSetId": 2
      },
      "lineNbr": 79,
      "author": {
        "id": 8392
      },
      "writtenOn": "2019-06-11T14:00:36Z",
      "side": 1,
      "message": "See ยง26.3.10.5 on page 801 at http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/n4713.pdf:\n\n  void splice(const_iterator position, list\u0026 x, const_iterator i);\n  void splice(const_iterator position, list\u0026\u0026 x, const_iterator i);\n\n  7) Requires: i is a valid dereferenceable iterator of x\n\n  8) Effects: Inserts an element pointed to by i from list x before position and removes the element from x. The result is unchanged if position \u003d\u003d i or position \u003d\u003d ++i. Pointers and references to *i continue to refer to this same element but as a member of *this. Iterators to *i (including i itself) continue to refer to the same element, but now behave as iterators into *this, not into x.\n\nThere\u0027s no `\u0026x !\u003d this` requirement for this particular overload. In fact, \"result is unchanged if position \u003d\u003d i\" implies that it\u0027s allowed.",
      "parentUuid": "44f8fe61_3ad874fb",
      "revId": "dcc5b1366a685a73becc938420cfc4a93074f620",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6d1d2967_0bfb0891",
        "filename": "modules/rtp_rtcp/source/source_tracker.cc",
        "patchSetId": 2
      },
      "lineNbr": 79,
      "author": {
        "id": 5019
      },
      "writtenOn": "2019-06-11T17:22:06Z",
      "side": 1,
      "message": "Read std::list::splice documentation a bit more, found  yet another confirmation it is safe:\nComplexity: Constant if other refers to the same object as *this",
      "parentUuid": "85ef737d_61b9ee26",
      "revId": "dcc5b1366a685a73becc938420cfc4a93074f620",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "999b1631_715ba801",
        "filename": "modules/rtp_rtcp/source/source_tracker.h",
        "patchSetId": 2
      },
      "lineNbr": 15,
      "author": {
        "id": 5019
      },
      "writtenOn": "2019-06-10T17:59:36Z",
      "side": 1,
      "message": "needed?",
      "revId": "dcc5b1366a685a73becc938420cfc4a93074f620",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4c17fa7e_80ba250c",
        "filename": "modules/rtp_rtcp/source/source_tracker.h",
        "patchSetId": 2
      },
      "lineNbr": 15,
      "author": {
        "id": 8392
      },
      "writtenOn": "2019-06-11T14:00:36Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "999b1631_715ba801",
      "revId": "dcc5b1366a685a73becc938420cfc4a93074f620",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c8c710b7_a145ddcd",
        "filename": "modules/rtp_rtcp/source/source_tracker.h",
        "patchSetId": 2
      },
      "lineNbr": 38,
      "author": {
        "id": 5019
      },
      "writtenOn": "2019-06-10T17:59:36Z",
      "side": 1,
      "message": "may be add small comment ; // 10 seconds.",
      "revId": "dcc5b1366a685a73becc938420cfc4a93074f620",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9fa386e3_29116c24",
        "filename": "modules/rtp_rtcp/source/source_tracker.h",
        "patchSetId": 2
      },
      "lineNbr": 38,
      "author": {
        "id": 8392
      },
      "writtenOn": "2019-06-11T14:00:36Z",
      "side": 1,
      "message": "The code here is dangerously close to the 80-character line limit. There\u0027s only room for:\n\n static constexpr int64_t kTimeoutMs \u003d 10 * rtc::kNumMillisecsPerSec;  // 10s\n\nBut I don\u0027t think that it would make the code any more readable. One alternative is:\n\n static constexpr int64_t kTimeoutMs \u003d 10000;  // 10 seconds\n\nThe original intention behind using `rtc::kNumMillisecsPerSec` was so to make the code obvious enough to not need a comment.",
      "parentUuid": "c8c710b7_a145ddcd",
      "revId": "dcc5b1366a685a73becc938420cfc4a93074f620",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5bb446ed_60ebaacb",
        "filename": "modules/rtp_rtcp/source/source_tracker.h",
        "patchSetId": 2
      },
      "lineNbr": 38,
      "author": {
        "id": 5019
      },
      "writtenOn": "2019-06-11T17:22:06Z",
      "side": 1,
      "message": "as a reader I was confused :(\nNow it is clear.",
      "parentUuid": "9fa386e3_29116c24",
      "revId": "dcc5b1366a685a73becc938420cfc4a93074f620",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6f135cf8_5cc0c3a3",
        "filename": "modules/rtp_rtcp/source/source_tracker.h",
        "patchSetId": 2
      },
      "lineNbr": 43,
      "author": {
        "id": 5019
      },
      "writtenOn": "2019-06-10T17:59:36Z",
      "side": 1,
      "message": "If you wish, you do not need to be explicit about deleteing move constructor/assignment.\nDeleting copy is enough.\n\nhttps://google.github.io/styleguide/cppguide.html#Copy_Constructors\n\"Explicitly declaring or deleting all four copy/move operations is permitted, but not required.\"",
      "revId": "dcc5b1366a685a73becc938420cfc4a93074f620",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f51f9f6d_c1a08ef8",
        "filename": "modules/rtp_rtcp/source/source_tracker.h",
        "patchSetId": 2
      },
      "lineNbr": 43,
      "author": {
        "id": 8392
      },
      "writtenOn": "2019-06-11T14:00:36Z",
      "side": 1,
      "message": "I think that it adds a bit of clarity. This is especially because the opposite:\n\n  SourceTracker(const SourceTracker\u0026 other) \u003d default;\n\nWould also implicitly suppress the move-constructor.",
      "parentUuid": "6f135cf8_5cc0c3a3",
      "revId": "dcc5b1366a685a73becc938420cfc4a93074f620",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1d5ef944_369ecee0",
        "filename": "modules/rtp_rtcp/source/source_tracker.h",
        "patchSetId": 2
      },
      "lineNbr": 49,
      "author": {
        "id": 5019
      },
      "writtenOn": "2019-06-10T17:59:36Z",
      "side": 1,
      "message": "did you intent to pass by value (then drop const: https://abseil.io/tips/109)\nor by reference? (then add reference)",
      "range": {
        "startLine": 49,
        "startChar": 24,
        "endLine": 49,
        "endChar": 44
      },
      "revId": "dcc5b1366a685a73becc938420cfc4a93074f620",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "332d1bcc_63a97d4d",
        "filename": "modules/rtp_rtcp/source/source_tracker.h",
        "patchSetId": 2
      },
      "lineNbr": 49,
      "author": {
        "id": 8392
      },
      "writtenOn": "2019-06-11T14:00:36Z",
      "side": 1,
      "message": "Good catch! It was indeed meant as a const reference.",
      "parentUuid": "1d5ef944_369ecee0",
      "range": {
        "startLine": 49,
        "startChar": 24,
        "endLine": 49,
        "endChar": 44
      },
      "revId": "dcc5b1366a685a73becc938420cfc4a93074f620",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e0323886_01bf6988",
        "filename": "modules/rtp_rtcp/source/source_tracker.h",
        "patchSetId": 2
      },
      "lineNbr": 68,
      "author": {
        "id": 5019
      },
      "writtenOn": "2019-06-10T17:59:36Z",
      "side": 1,
      "message": "if you want to keep unordered map, may be clearer to have two separate helpers:\nstruct SourceKeyHash { operator() {} };\nstruct SourceKeyComparator // or just add simple operator\u003d\u003d directly to SourceKey:\nstruct SourceKey {\n  ...\n  friend bool operator\u003d\u003d(const SourceKey\u0026 lhs, const SourceKey\u0026 rhs) {...};\n  ...\n}",
      "range": {
        "startLine": 68,
        "startChar": 9,
        "endLine": 68,
        "endChar": 24
      },
      "revId": "dcc5b1366a685a73becc938420cfc4a93074f620",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "023ad1e7_4f570171",
        "filename": "modules/rtp_rtcp/source/source_tracker.h",
        "patchSetId": 2
      },
      "lineNbr": 68,
      "author": {
        "id": 8392
      },
      "writtenOn": "2019-06-11T14:00:36Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e0323886_01bf6988",
      "range": {
        "startLine": 68,
        "startChar": 9,
        "endLine": 68,
        "endChar": 24
      },
      "revId": "dcc5b1366a685a73becc938420cfc4a93074f620",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8bb2fb38_92580679",
        "filename": "modules/rtp_rtcp/source/source_tracker.h",
        "patchSetId": 2
      },
      "lineNbr": 83,
      "author": {
        "id": 5019
      },
      "writtenOn": "2019-06-10T17:59:36Z",
      "side": 1,
      "message": "may be note that it is the most recent time with the name, e.g. last_update_ms;",
      "range": {
        "startLine": 83,
        "startChar": 12,
        "endLine": 83,
        "endChar": 24
      },
      "revId": "dcc5b1366a685a73becc938420cfc4a93074f620",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "20aed0de_e9d9ac78",
        "filename": "modules/rtp_rtcp/source/source_tracker.h",
        "patchSetId": 2
      },
      "lineNbr": 83,
      "author": {
        "id": 8392
      },
      "writtenOn": "2019-06-11T14:00:36Z",
      "side": 1,
      "message": "I think that it\u0027s best to keep the name the same as the one in the specs:\n\n  https://w3c.github.io/webrtc-pc/#dom-rtcrtpcontributingsource",
      "parentUuid": "8bb2fb38_92580679",
      "range": {
        "startLine": 83,
        "startChar": 12,
        "endLine": 83,
        "endChar": 24
      },
      "revId": "dcc5b1366a685a73becc938420cfc4a93074f620",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a23b27ab_47f3aa32",
        "filename": "modules/rtp_rtcp/source/source_tracker.h",
        "patchSetId": 2
      },
      "lineNbr": 83,
      "author": {
        "id": 5019
      },
      "writtenOn": "2019-06-11T17:22:06Z",
      "side": 1,
      "message": "Good point!",
      "parentUuid": "20aed0de_e9d9ac78",
      "range": {
        "startLine": 83,
        "startChar": 12,
        "endLine": 83,
        "endChar": 24
      },
      "revId": "dcc5b1366a685a73becc938420cfc4a93074f620",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f81ef57d_5cc88be9",
        "filename": "modules/rtp_rtcp/source/source_tracker.h",
        "patchSetId": 2
      },
      "lineNbr": 89,
      "author": {
        "id": 5019
      },
      "writtenOn": "2019-06-10T17:59:36Z",
      "side": 1,
      "message": "#include \"absl/types/optional.h\"",
      "range": {
        "startLine": 89,
        "startChar": 4,
        "endLine": 89,
        "endChar": 18
      },
      "revId": "dcc5b1366a685a73becc938420cfc4a93074f620",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c9907a60_722af5aa",
        "filename": "modules/rtp_rtcp/source/source_tracker.h",
        "patchSetId": 2
      },
      "lineNbr": 89,
      "author": {
        "id": 8392
      },
      "writtenOn": "2019-06-11T14:00:36Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f81ef57d_5cc88be9",
      "range": {
        "startLine": 89,
        "startChar": 4,
        "endLine": 89,
        "endChar": 18
      },
      "revId": "dcc5b1366a685a73becc938420cfc4a93074f620",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e00203fc_677d8271",
        "filename": "modules/rtp_rtcp/source/source_tracker.h",
        "patchSetId": 2
      },
      "lineNbr": 100,
      "author": {
        "id": 5019
      },
      "writtenOn": "2019-06-10T17:59:36Z",
      "side": 1,
      "message": "It might be a good opportunity to try\nabsl::flat_hash_map instead, see\nhttps://abseil.io/docs/cpp/guides/container\nhttps://abseil.io/tips/152\n\nhttps://chromium.googlesource.com/external/webrtc/+/refs/heads/master/abseil-in-webrtc.md#using-abseil-in-webrtc\n\"if you find yourself in need of something that isnโt in either subset, please add it to the allowed subset in this doc in the same CL that adds the first use.\"",
      "range": {
        "startLine": 57,
        "startChar": 0,
        "endLine": 100,
        "endChar": 56
      },
      "revId": "dcc5b1366a685a73becc938420cfc4a93074f620",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "151c88c1_d54c63a3",
        "filename": "modules/rtp_rtcp/source/source_tracker.h",
        "patchSetId": 2
      },
      "lineNbr": 100,
      "author": {
        "id": 5019
      },
      "writtenOn": "2019-06-11T10:29:33Z",
      "side": 1,
      "message": "actually, ignore this comment and proceed with unordered_map\nabsl::flat_hash_map currently doesn\u0027t work within webrtc.",
      "parentUuid": "e00203fc_677d8271",
      "range": {
        "startLine": 57,
        "startChar": 0,
        "endLine": 100,
        "endChar": 56
      },
      "revId": "dcc5b1366a685a73becc938420cfc4a93074f620",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a2789b25_351f2041",
        "filename": "modules/rtp_rtcp/source/source_tracker.h",
        "patchSetId": 2
      },
      "lineNbr": 100,
      "author": {
        "id": 8392
      },
      "writtenOn": "2019-06-11T14:00:36Z",
      "side": 1,
      "message": "That\u0027s very unfortunate, but thanks for the link. I was also looking for Swiss Tables since their way of implementing the hashing function is far superior to that of the standard library.",
      "parentUuid": "e00203fc_677d8271",
      "range": {
        "startLine": 57,
        "startChar": 0,
        "endLine": 100,
        "endChar": 56
      },
      "revId": "dcc5b1366a685a73becc938420cfc4a93074f620",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ae1361a3_96f00fd7",
        "filename": "modules/rtp_rtcp/source/source_tracker.h",
        "patchSetId": 2
      },
      "lineNbr": 117,
      "author": {
        "id": 5019
      },
      "writtenOn": "2019-06-10T17:59:36Z",
      "side": 1,
      "message": "what are the reasons to declare GetSources() as const?\n(if you do not plan to use it as const, it might be better not to declare it as const and remove these mutables.)",
      "range": {
        "startLine": 117,
        "startChar": 2,
        "endLine": 117,
        "endChar": 9
      },
      "revId": "dcc5b1366a685a73becc938420cfc4a93074f620",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1b21dc97_93834ccc",
        "filename": "modules/rtp_rtcp/source/source_tracker.h",
        "patchSetId": 2
      },
      "lineNbr": 117,
      "author": {
        "id": 8392
      },
      "writtenOn": "2019-06-11T14:00:36Z",
      "side": 1,
      "message": "Const propagation. If this function is not const then the caller class\u0027s `GetSources()`-like function can\u0027t be const either.\n\nFor example:\n\n  https://cs.chromium.org/chromium/src/third_party/webrtc/audio/channel_receive.cc?l\u003d564\u0026rcl\u003de323359d6f0ace0022d1eefebe7a74833338f665",
      "parentUuid": "ae1361a3_96f00fd7",
      "range": {
        "startLine": 117,
        "startChar": 2,
        "endLine": 117,
        "endChar": 9
      },
      "revId": "dcc5b1366a685a73becc938420cfc4a93074f620",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cc275d42_769b01f2",
        "filename": "modules/rtp_rtcp/source/source_tracker.h",
        "patchSetId": 2
      },
      "lineNbr": 117,
      "author": {
        "id": 5019
      },
      "writtenOn": "2019-06-11T17:22:06Z",
      "side": 1,
      "message": "Aha, I see, there is plan to rely on this function being logically const.",
      "parentUuid": "1b21dc97_93834ccc",
      "range": {
        "startLine": 117,
        "startChar": 2,
        "endLine": 117,
        "endChar": 9
      },
      "revId": "dcc5b1366a685a73becc938420cfc4a93074f620",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "adb344de_3fe1c461",
        "filename": "modules/rtp_rtcp/source/source_tracker_unittest.cc",
        "patchSetId": 2
      },
      "lineNbr": 55,
      "author": {
        "id": 5019
      },
      "writtenOn": "2019-06-10T17:59:36Z",
      "side": 1,
      "message": "prefer to write explicit types instead of auto\nhttps://google.github.io/styleguide/cppguide.html#auto\n\ne.g. here \"uint16_t\" looks more reasonable than \"const uint16_t\u0026\" or \"const auto\u0026\"",
      "range": {
        "startLine": 55,
        "startChar": 8,
        "endLine": 55,
        "endChar": 19
      },
      "revId": "dcc5b1366a685a73becc938420cfc4a93074f620",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b100121f_817a99e6",
        "filename": "modules/rtp_rtcp/source/source_tracker_unittest.cc",
        "patchSetId": 2
      },
      "lineNbr": 55,
      "author": {
        "id": 8392
      },
      "writtenOn": "2019-06-11T14:00:36Z",
      "side": 1,
      "message": "I don\u0027t think that it applies here. It\u0027s not important for the reader to know what the types are in these cases. The variables should simply be treated as stuff that are passed along to RtpPacketInfo() and RtpSource().\n\nIn other words, it\u0027s meant to be on par with:\n\n  RtpPacketInfo(GenerateSsrc(),\n                GenerateCsrcs(),\n                GenerateSequenceNumber(),\n                GenerateRtpTimestamp(),\n                GenerateAudioLevel(),\n                GenerateReceiveTimeMs());\n\n... where you normally wouldn\u0027t see (or care about) the types anyway.\n\nThis is in either case no longer relevant after the refactoring.",
      "parentUuid": "adb344de_3fe1c461",
      "range": {
        "startLine": 55,
        "startChar": 8,
        "endLine": 55,
        "endChar": 19
      },
      "revId": "dcc5b1366a685a73becc938420cfc4a93074f620",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "121ea0c1_1287fa47",
        "filename": "modules/rtp_rtcp/source/source_tracker_unittest.cc",
        "patchSetId": 2
      },
      "lineNbr": 92,
      "author": {
        "id": 5019
      },
      "writtenOn": "2019-06-12T09:15:03Z",
      "side": 1,
      "message": "what this function suppose to do?\ni.e. it returns single ssrcs, but for some reasons takes ssrcs_count as an argument",
      "range": {
        "startLine": 92,
        "startChar": 4,
        "endLine": 92,
        "endChar": 79
      },
      "revId": "dcc5b1366a685a73becc938420cfc4a93074f620",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "950f4d77_6dff1c42",
        "filename": "modules/rtp_rtcp/source/source_tracker_unittest.cc",
        "patchSetId": 2
      },
      "lineNbr": 95,
      "author": {
        "id": 5019
      },
      "writtenOn": "2019-06-12T09:15:03Z",
      "side": 1,
      "message": "what this function suppose to do?\nlooking at the argument I would assume it produce vector of size csrcs_count of random numbers.\nlooking at the implementation it seems like doing something else.",
      "revId": "dcc5b1366a685a73becc938420cfc4a93074f620",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c0557447_21983ffa",
        "filename": "modules/rtp_rtcp/source/source_tracker_unittest.cc",
        "patchSetId": 2
      },
      "lineNbr": 173,
      "author": {
        "id": 5019
      },
      "writtenOn": "2019-06-10T17:59:36Z",
      "side": 1,
      "message": "if you want to test random input it might be better to write a fuzzer",
      "revId": "dcc5b1366a685a73becc938420cfc4a93074f620",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "433070ee_7b849733",
        "filename": "modules/rtp_rtcp/source/source_tracker_unittest.cc",
        "patchSetId": 2
      },
      "lineNbr": 173,
      "author": {
        "id": 8392
      },
      "writtenOn": "2019-06-11T14:00:36Z",
      "side": 1,
      "message": "This is not meant to be a fuzz-test in the traditional sense. There\u0027s a finite number of edge cases that we are interested in, but due to them being so many (edge cases interact with each other), it becomes very tedious to hand-craft test cases to cover them.\n\nWith randomness, and the current set of configs, it\u0027s likely that we\u0027ve \"made\" our unit tests cover all of them.",
      "parentUuid": "c0557447_21983ffa",
      "revId": "dcc5b1366a685a73becc938420cfc4a93074f620",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e5fa7c7c_b326d8fc",
        "filename": "modules/rtp_rtcp/source/source_tracker_unittest.cc",
        "patchSetId": 2
      },
      "lineNbr": 173,
      "author": {
        "id": 5019
      },
      "writtenOn": "2019-06-11T17:22:06Z",
      "side": 1,
      "message": "then make it fuzz-test in the less-traditional sense: use buffer generated by fuzzer as your random input instead queering generator_.\n\ne.g. something like.\nconst uint8_t* buffer;\nconst uint8_t* const end \u003d buffer + size;\n\nuint8_t roll \u003d *buffer;\nbuffer++;\nif (roll \u003c 5) {\n  return 0;\n}\nif (roll \u003c 19 \u0026\u0026 (end - buffer) \u003e\u003d 4) {\n  int64_t time \u003d static_cast\u003cint64_t\u003e(ByteReader\u003cuint32_t\u003e(buffer));\n  buffer +\u003d 4;\n  return time;\n}\n\nFuzzers are smart: they can make it much more likely that most config are covered.",
      "parentUuid": "433070ee_7b849733",
      "revId": "dcc5b1366a685a73becc938420cfc4a93074f620",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b2e7e91b_0397c3fe",
        "filename": "modules/rtp_rtcp/source/source_tracker_unittest.cc",
        "patchSetId": 2
      },
      "lineNbr": 173,
      "author": {
        "id": 8392
      },
      "writtenOn": "2019-06-11T19:55:03Z",
      "side": 1,
      "message": "I\u0027ve looked into `webrtc/test/fuzzers` for doing fuzzing. Considering that `SourceTracker` is a class under 100 lines of code, it doesn\u0027t seem to make sense to go that route. Extracting configs from a fuzzed byte string would also make the test more confusing.",
      "parentUuid": "e5fa7c7c_b326d8fc",
      "revId": "dcc5b1366a685a73becc938420cfc4a93074f620",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ff39edd8_7d19979a",
        "filename": "modules/rtp_rtcp/source/source_tracker_unittest.cc",
        "patchSetId": 2
      },
      "lineNbr": 173,
      "author": {
        "id": 5019
      },
      "writtenOn": "2019-06-12T09:15:03Z",
      "side": 1,
      "message": "I agree that fuzzer might be overkill for this class.\nBut then I would argue that random test is overkill too.\nMoreover I afraid it would be more a problem than help in the future:\nIt is overstrict (mandate order between sources for the last received packet, which is undefined) and thus would block valid refactoring of the tracker.\n\nif fails it would produce expected and actual output, but since scenario is not human readable, I guess it would be unclear why expected output is correct.\n\n(and looking that it randomize sequence number I would imagine it would feed unrealistic scenarios too. e.g. it would feed packets out of sequence number order. It might be valid or even required to discard late [in sequence number order] packets)",
      "parentUuid": "b2e7e91b_0397c3fe",
      "revId": "dcc5b1366a685a73becc938420cfc4a93074f620",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e47e0f83_b615aa5a",
        "filename": "modules/rtp_rtcp/source/source_tracker_unittest.cc",
        "patchSetId": 2
      },
      "lineNbr": 180,
      "author": {
        "id": 5019
      },
      "writtenOn": "2019-06-10T17:59:36Z",
      "side": 1,
      "message": "What behavior does this test validates?\n\nhttps://testing.googleblog.com/2014/10/testing-on-toilet-writing-descriptive.html\nhttps://testing.googleblog.com/2013/08/testing-on-toilet-test-behavior-not.html",
      "range": {
        "startLine": 180,
        "startChar": 26,
        "endLine": 180,
        "endChar": 45
      },
      "revId": "dcc5b1366a685a73becc938420cfc4a93074f620",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "28465668_3047518e",
        "filename": "modules/rtp_rtcp/source/source_tracker_unittest.cc",
        "patchSetId": 2
      },
      "lineNbr": 180,
      "author": {
        "id": 8392
      },
      "writtenOn": "2019-06-11T14:00:36Z",
      "side": 1,
      "message": "It\u0027s a comprehensive test of the `SourceTracker` class to make sure that it follows the specs at:\n\n  https://w3c.github.io/webrtc-pc/#dom-rtcrtpcontributingsource\n  https://w3c.github.io/webrtc-pc/#dom-rtcrtpreceiver-getcontributingsources\n\nIt\u0027s in essence a dual-implementation test where the production implementation is optimized-but-risky and the test implementation is slow-but-bulletproof. I\u0027ve updated the names of the test cases and refactored the code a bit to make that more clear.\n\nThe test has actually already proven itself to be valuable. There was a copy-paste error in the equality-check for `SourceKey` where it was accidentally checking `lhs.source_type \u003d\u003d rhs.source_type` twice. Simple hand-crafted test cases might not have noticed the problem since the hash function was perfectly fine.",
      "parentUuid": "e47e0f83_b615aa5a",
      "range": {
        "startLine": 180,
        "startChar": 26,
        "endLine": 180,
        "endChar": 45
      },
      "revId": "dcc5b1366a685a73becc938420cfc4a93074f620",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ddffdd22_59364408",
        "filename": "modules/rtp_rtcp/source/source_tracker_unittest.cc",
        "patchSetId": 2
      },
      "lineNbr": 180,
      "author": {
        "id": 5019
      },
      "writtenOn": "2019-06-11T17:22:06Z",
      "side": 1,
      "message": "What I miss is \u0027tests as documentation\u0027:\nbunch of simple cases that describes (both with names and simple expectations) what this classes suppose to do normally.\ni.e. tests like\nDistinguishSsrcAndCsrcs\nTimeoutsSourceAfter10Seconds // but do not worry about corner case what happens exactly after 10s since that is probably not important.\nReturnsSourcesOrdedByLastReceivedPacket\netc.\n\"Ideally, a developer should be able to understand everything a class does by reading the names of each test in the suite\"\n\n(and then it is ok to leave corner unusual cases to fuzzer)",
      "parentUuid": "28465668_3047518e",
      "range": {
        "startLine": 180,
        "startChar": 26,
        "endLine": 180,
        "endChar": 45
      },
      "revId": "dcc5b1366a685a73becc938420cfc4a93074f620",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e8762709_9f20e0e6",
        "filename": "modules/rtp_rtcp/source/source_tracker_unittest.cc",
        "patchSetId": 2
      },
      "lineNbr": 180,
      "author": {
        "id": 8392
      },
      "writtenOn": "2019-06-11T19:55:03Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ddffdd22_59364408",
      "range": {
        "startLine": 180,
        "startChar": 26,
        "endLine": 180,
        "endChar": 45
      },
      "revId": "dcc5b1366a685a73becc938420cfc4a93074f620",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "381192e0_cc9d9c00",
        "filename": "modules/rtp_rtcp/source/source_tracker_unittest.cc",
        "patchSetId": 2
      },
      "lineNbr": 181,
      "author": {
        "id": 5019
      },
      "writtenOn": "2019-06-10T17:59:36Z",
      "side": 1,
      "message": "It look like you want to use \nhttps://github.com/google/googletest/blob/master/googletest/docs/advanced.md#value-parameterized-tests",
      "revId": "dcc5b1366a685a73becc938420cfc4a93074f620",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0a4bcb62_a3180492",
        "filename": "modules/rtp_rtcp/source/source_tracker_unittest.cc",
        "patchSetId": 2
      },
      "lineNbr": 181,
      "author": {
        "id": 8392
      },
      "writtenOn": "2019-06-11T14:00:36Z",
      "side": 1,
      "message": "I think that parameterized tests with tuples are harder to read than this approach, but I\u0027m happy to switch.",
      "parentUuid": "381192e0_cc9d9c00",
      "revId": "dcc5b1366a685a73becc938420cfc4a93074f620",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1204f833_a4bbc8eb",
        "filename": "modules/rtp_rtcp/source/source_tracker_unittest.cc",
        "patchSetId": 2
      },
      "lineNbr": 181,
      "author": {
        "id": 5019
      },
      "writtenOn": "2019-06-11T17:22:06Z",
      "side": 1,
      "message": "Now it is clearer to me how tests are structured.",
      "parentUuid": "0a4bcb62_a3180492",
      "revId": "dcc5b1366a685a73becc938420cfc4a93074f620",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    }
  ]
}