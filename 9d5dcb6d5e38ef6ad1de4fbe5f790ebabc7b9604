{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "7903aa40_ef36cb89",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5117
      },
      "writtenOn": "2024-06-28T12:31:34Z",
      "side": 1,
      "message": "I\u0027m fine with it being a follow-up, if it\u0027s too much of a change, but it looks like there\u0027s already class in webrtc to compute this kind of averatge in a window:\nhttps://source.chromium.org/chromium/chromium/src/+/main:third_party/webrtc/rtc_base/numerics/moving_average.h;l\u003d26;drc\u003d96e3b991daeb058859324105635d29f56092e79a\n\nYou can make it work very nicely in your case if you adjust MovingAverage::AddSample() to return the value, which was pushed out of the window (or 0 if there\u0027s no such value). Or add a new method to peek at such an element.\n\nThen you need a counter of elements in your data structure and two MovingAverage classes for older and recent elements. You insert your element into the \u0027recent\u0027 and then insert the pushed out value into the \u0027older\u0027. Don\u0027t increase the amount of elements beyond the combined windows length.\n\nIt would be more efficient and, I would even argue, clearer.",
      "revId": "9d5dcb6d5e38ef6ad1de4fbe5f790ebabc7b9604",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bd213ba8_f5b83ed0",
        "filename": "video/quality_convergence_monitor.cc",
        "patchSetId": 2
      },
      "lineNbr": 22,
      "author": {
        "id": 5117
      },
      "writtenOn": "2024-06-28T12:48:37Z",
      "side": 1,
      "message": "Why allow bogus window_length if the config happens to be disabled?\n\nJust alwasy check that lengths are correct.\n\nAlso, it maybe clearer to insted of window/tail keep configure older_window_length and recent_window_length.\n\nThis way it\u0027s impossible to put in bogus lengths at all (except maybe check for them not being zero).",
      "range": {
        "startLine": 21,
        "startChar": 12,
        "endLine": 22,
        "endChar": 55
      },
      "revId": "9d5dcb6d5e38ef6ad1de4fbe5f790ebabc7b9604",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0eb1729d_889e6b5d",
        "filename": "video/quality_convergence_monitor.cc",
        "patchSetId": 2
      },
      "lineNbr": 24,
      "author": {
        "id": 5117
      },
      "writtenOn": "2024-06-28T12:31:34Z",
      "side": 1,
      "message": "Add an explanation of the logic in a semi-formal way here. Copy some text and formulas fro mthe doc. You can use this for inspiration: https://source.chromium.org/chromium/chromium/src/+/main:third_party/webrtc/rtc_base/timestamp_aligner.cc;l\u003d48;drc\u003d3ca732d12d33372aa4c1327aca7ed94c196b37ea\n\nI think having it before the function is clearer than inline.",
      "revId": "9d5dcb6d5e38ef6ad1de4fbe5f790ebabc7b9604",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1292826e_6247db89",
        "filename": "video/quality_convergence_monitor.cc",
        "patchSetId": 2
      },
      "lineNbr": 67,
      "author": {
        "id": 5117
      },
      "writtenOn": "2024-06-28T12:31:34Z",
      "side": 1,
      "message": "Head and tail are a little confusing: one would have to doublecheck what\u0027s the order of the elements to understand the logic.\n\n Maybe use \"older\" and \"recent\"? So it\u0027s clear which is for the more recent values.\n\nSince you do push_back() and pop_front(), you have more recent values at the beginning, so head \u003d\u003e recent, tail \u003d\u003e older.\n\nPlease do the same change to the documentation you will add.",
      "range": {
        "startLine": 67,
        "startChar": 8,
        "endLine": 67,
        "endChar": 24
      },
      "revId": "9d5dcb6d5e38ef6ad1de4fbe5f790ebabc7b9604",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a85a36c2_105640b3",
        "filename": "video/quality_convergence_monitor.h",
        "patchSetId": 2
      },
      "lineNbr": 30,
      "author": {
        "id": 10557
      },
      "writtenOn": "2024-06-28T11:49:38Z",
      "side": 1,
      "message": "What is a steady-state refresh frame? Is there a simpler term to use?",
      "range": {
        "startLine": 29,
        "startChar": 62,
        "endLine": 30,
        "endChar": 21
      },
      "revId": "9d5dcb6d5e38ef6ad1de4fbe5f790ebabc7b9604",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "42633360_cb32c6ed",
        "filename": "video/quality_convergence_monitor.h",
        "patchSetId": 2
      },
      "lineNbr": 38,
      "author": {
        "id": 10557
      },
      "writtenOn": "2024-06-28T11:49:38Z",
      "side": 1,
      "message": "Should this read \"the average of QP_x\"?",
      "range": {
        "startLine": 38,
        "startChar": 18,
        "endLine": 38,
        "endChar": 41
      },
      "fixSuggestions": [
        {
          "fixId": "2ace31b3_cb0cd813",
          "description": "prompt_to_edit API",
          "replacements": [
            {
              "path": "video/quality_convergence_monitor.h",
              "range": {
                "startLine": 38,
                "startChar": 0,
                "endLine": 40,
                "endChar": 0
              },
              "replacement": "    // `QP_tail`. The average of `QP_head` must be equal to or less than\n    // `QP_tail` to determine that target quality is reached. See the\n    // implementation in `AddSample()`.\n"
            }
          ]
        }
      ],
      "revId": "9d5dcb6d5e38ef6ad1de4fbe5f790ebabc7b9604",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bb138aa6_2e88eaa2",
        "filename": "video/quality_convergence_monitor_unittest.cc",
        "patchSetId": 2
      },
      "lineNbr": 44,
      "author": {
        "id": 5117
      },
      "writtenOn": "2024-06-28T12:43:32Z",
      "side": 1,
      "message": "This wouold be clearer\n```suggestion\n    for (int qp \u003d 100; qp \u003e p.static_qp_threshold; --qp) {\n      monitor-\u003eAddSample(qp, steady_state_fresh_frame);\n      EXPECT_FALSE(monitor-\u003eAtTargetQuality());\n    }\n```",
      "range": {
        "startLine": 40,
        "startChar": 3,
        "endLine": 44,
        "endChar": 5
      },
      "revId": "9d5dcb6d5e38ef6ad1de4fbe5f790ebabc7b9604",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e0451f9f_83dbf222",
        "filename": "video/quality_convergence_monitor_unittest.cc",
        "patchSetId": 2
      },
      "lineNbr": 46,
      "author": {
        "id": 5117
      },
      "writtenOn": "2024-06-28T12:43:32Z",
      "side": 1,
      "message": "p.static_qp_threshold",
      "range": {
        "startLine": 46,
        "startChar": 23,
        "endLine": 46,
        "endChar": 25
      },
      "revId": "9d5dcb6d5e38ef6ad1de4fbe5f790ebabc7b9604",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "78f882e7_d121201c",
        "filename": "video/quality_convergence_monitor_unittest.cc",
        "patchSetId": 2
      },
      "lineNbr": 64,
      "author": {
        "id": 5117
      },
      "writtenOn": "2024-06-28T12:43:32Z",
      "side": 1,
      "message": "{false, true} directly.",
      "range": {
        "startLine": 64,
        "startChar": 39,
        "endLine": 64,
        "endChar": 52
      },
      "revId": "9d5dcb6d5e38ef6ad1de4fbe5f790ebabc7b9604",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8347d6df_2a101fd1",
        "filename": "video/quality_convergence_monitor_unittest.cc",
        "patchSetId": 2
      },
      "lineNbr": 71,
      "author": {
        "id": 5117
      },
      "writtenOn": "2024-06-28T12:43:32Z",
      "side": 1,
      "message": "Here too. The explicit for loop is more readable.",
      "range": {
        "startLine": 71,
        "startChar": 3,
        "endLine": 71,
        "endChar": 40
      },
      "revId": "9d5dcb6d5e38ef6ad1de4fbe5f790ebabc7b9604",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c4056cb7_f30a2635",
        "filename": "video/quality_convergence_monitor_unittest.cc",
        "patchSetId": 2
      },
      "lineNbr": 78,
      "author": {
        "id": 5117
      },
      "writtenOn": "2024-06-28T12:43:32Z",
      "side": 1,
      "message": "This will fail when `steady_state_fresh_frame \u003d\u003d false`.\n\nAlso, it\u0027s unclear how it will ever be true with just one element below the `p.static_qp_threshold`. Add a more detailed comment here, that static threshold is so low that any such frame should be considered converged.",
      "range": {
        "startLine": 78,
        "startChar": 4,
        "endLine": 78,
        "endChar": 44
      },
      "revId": "9d5dcb6d5e38ef6ad1de4fbe5f790ebabc7b9604",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "62de5e92_146eb620",
        "filename": "video/quality_convergence_monitor_unittest.cc",
        "patchSetId": 2
      },
      "lineNbr": 166,
      "author": {
        "id": 5117
      },
      "writtenOn": "2024-06-28T12:43:32Z",
      "side": 1,
      "message": "Replace all head/tail to recent/older",
      "range": {
        "startLine": 166,
        "startChar": 17,
        "endLine": 166,
        "endChar": 21
      },
      "revId": "9d5dcb6d5e38ef6ad1de4fbe5f790ebabc7b9604",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6e869b49_a9b6b9b3",
        "filename": "video/quality_convergence_monitor_unittest.cc",
        "patchSetId": 2
      },
      "lineNbr": 174,
      "author": {
        "id": 5117
      },
      "writtenOn": "2024-06-28T12:43:32Z",
      "side": 1,
      "message": "```suggestion\n  for (int qp : {23, 21, 21, 21, 21, 22}) {\n```",
      "range": {
        "startLine": 173,
        "startChar": 1,
        "endLine": 174,
        "endChar": 34
      },
      "revId": "9d5dcb6d5e38ef6ad1de4fbe5f790ebabc7b9604",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b490c3b1_d0d3c4dc",
        "filename": "video/quality_convergence_monitor_unittest.cc",
        "patchSetId": 2
      },
      "lineNbr": 187,
      "author": {
        "id": 5117
      },
      "writtenOn": "2024-06-28T12:43:32Z",
      "side": 1,
      "message": "```suggestion\n  for (int qp: {22, 21, 21, 21, 21, 22}) {\n```",
      "range": {
        "startLine": 187,
        "startChar": 2,
        "endLine": 187,
        "endChar": 67
      },
      "revId": "9d5dcb6d5e38ef6ad1de4fbe5f790ebabc7b9604",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bbecda3c_afa4169d",
        "filename": "video/quality_convergence_monitor_unittest.cc",
        "patchSetId": 2
      },
      "lineNbr": 203,
      "author": {
        "id": 5117
      },
      "writtenOn": "2024-06-28T12:43:32Z",
      "side": 1,
      "message": "Here too. \"For each\" loop is more clear.",
      "range": {
        "startLine": 202,
        "startChar": 2,
        "endLine": 203,
        "endChar": 66
      },
      "revId": "9d5dcb6d5e38ef6ad1de4fbe5f790ebabc7b9604",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    }
  ]
}