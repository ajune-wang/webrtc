{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "12a77191_fe4f3368",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5234
      },
      "writtenOn": "2022-01-04T07:59:43Z",
      "side": 1,
      "message": "PTAL, broken out from the wip cl https://webrtc-review.googlesource.com/c/src/+/242363",
      "revId": "1a0bfb1cbecdc7fad4e0eacd065c9a1293c1d187",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "10ce3053_f0f5538e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5634
      },
      "writtenOn": "2022-01-04T09:00:16Z",
      "side": 1,
      "message": "This demonstrates very nicely why implicit conversion leads to sloppy API design. Nice working!\n\nLots of comments, but mostly about whether we should add TODOs to do something about these APIs later (and, in some cases, what we should do about them).",
      "revId": "1a0bfb1cbecdc7fad4e0eacd065c9a1293c1d187",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2fad7246_6697d84d",
        "filename": "pc/connection_context.cc",
        "patchSetId": 1
      },
      "lineNbr": 79,
      "author": {
        "id": 5634
      },
      "writtenOn": "2022-01-04T09:00:16Z",
      "side": 1,
      "message": "Can this be done with make_refptr?",
      "revId": "1a0bfb1cbecdc7fad4e0eacd065c9a1293c1d187",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "abbbd6e6_cf108883",
        "filename": "pc/connection_context.cc",
        "patchSetId": 1
      },
      "lineNbr": 79,
      "author": {
        "id": 5234
      },
      "writtenOn": "2022-01-04T09:48:10Z",
      "side": 1,
      "message": "Not without fixes to rtc::make_ref_counted; it can\u0027t deal with this type, that is declared as \n\nclass ConnectionContext final : public rtc::RefCountedNonVirtual\u003cConnectionContext\u003e",
      "parentUuid": "2fad7246_6697d84d",
      "revId": "1a0bfb1cbecdc7fad4e0eacd065c9a1293c1d187",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9c0e0b3d_4b405dc4",
        "filename": "pc/connection_context.cc",
        "patchSetId": 1
      },
      "lineNbr": 79,
      "author": {
        "id": 5634
      },
      "writtenOn": "2022-01-04T11:30:48Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "abbbd6e6_cf108883",
      "revId": "1a0bfb1cbecdc7fad4e0eacd065c9a1293c1d187",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "34f5b427_33e62150",
        "filename": "pc/media_stream.cc",
        "patchSetId": 1
      },
      "lineNbr": 76,
      "author": {
        "id": 5634
      },
      "writtenOn": "2022-01-04T09:00:16Z",
      "side": 1,
      "message": "Ouch. Taking ownership of a raw pointer. can you add a TODO here to change the API?",
      "revId": "1a0bfb1cbecdc7fad4e0eacd065c9a1293c1d187",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "33b56b05_c877d89f",
        "filename": "pc/media_stream.cc",
        "patchSetId": 1
      },
      "lineNbr": 76,
      "author": {
        "id": 5234
      },
      "writtenOn": "2022-01-04T09:48:10Z",
      "side": 1,
      "message": "Adding a comment and TODO in api/media_stream_interface.h, where the corresponding public methods are declared. I guess this private helper method could be changed right away to take a scoped_refptr, what do you think?",
      "parentUuid": "34f5b427_33e62150",
      "revId": "1a0bfb1cbecdc7fad4e0eacd065c9a1293c1d187",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "546d263d_d13b34ca",
        "filename": "pc/media_stream.cc",
        "patchSetId": 1
      },
      "lineNbr": 76,
      "author": {
        "id": 5634
      },
      "writtenOn": "2022-01-04T11:30:48Z",
      "side": 1,
      "message": "getting this done for internal usage ASAP sounds good to me.",
      "parentUuid": "33b56b05_c877d89f",
      "revId": "1a0bfb1cbecdc7fad4e0eacd065c9a1293c1d187",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e97f6c43_02d88be6",
        "filename": "pc/media_stream.cc",
        "patchSetId": 1
      },
      "lineNbr": 76,
      "author": {
        "id": 5508
      },
      "writtenOn": "2022-01-04T11:31:56Z",
      "side": 1,
      "message": "Just checking if the semantics are still the same... both before and after will add one ref count, not take ownership of a refcount passed to AddTrack, correct?",
      "parentUuid": "33b56b05_c877d89f",
      "revId": "1a0bfb1cbecdc7fad4e0eacd065c9a1293c1d187",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ac8c3600_3d1f596f",
        "filename": "pc/peer_connection.cc",
        "patchSetId": 1
      },
      "lineNbr": 852,
      "author": {
        "id": 5634
      },
      "writtenOn": "2022-01-04T09:00:16Z",
      "side": 1,
      "message": "This is an API change that was work-in-progress, but without a tracking bug, it seems.",
      "revId": "1a0bfb1cbecdc7fad4e0eacd065c9a1293c1d187",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "010cb252_b44805a2",
        "filename": "pc/peer_connection.cc",
        "patchSetId": 1
      },
      "lineNbr": 852,
      "author": {
        "id": 5508
      },
      "writtenOn": "2022-01-04T11:31:56Z",
      "side": 1,
      "message": "how many AddRef/Release calls happen now vs before?",
      "parentUuid": "ac8c3600_3d1f596f",
      "revId": "1a0bfb1cbecdc7fad4e0eacd065c9a1293c1d187",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "be4509c7_f04d70d0",
        "filename": "pc/peer_connection.cc",
        "patchSetId": 1
      },
      "lineNbr": 1185,
      "author": {
        "id": 5634
      },
      "writtenOn": "2022-01-04T09:00:16Z",
      "side": 1,
      "message": "Ouch here too.",
      "revId": "1a0bfb1cbecdc7fad4e0eacd065c9a1293c1d187",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e0e778ec_95a2ebea",
        "filename": "pc/peer_connection.cc",
        "patchSetId": 1
      },
      "lineNbr": 1185,
      "author": {
        "id": 5234
      },
      "writtenOn": "2022-01-04T09:48:10Z",
      "side": 1,
      "message": "At least there\u0027s a TODO (assigned hbos) where this is declared on PeerConnectionInterface.",
      "parentUuid": "be4509c7_f04d70d0",
      "revId": "1a0bfb1cbecdc7fad4e0eacd065c9a1293c1d187",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "41f77b70_947cc6bb",
        "filename": "pc/peer_connection_end_to_end_unittest.cc",
        "patchSetId": 1
      },
      "lineNbr": 263,
      "author": {
        "id": 5634
      },
      "writtenOn": "2022-01-04T09:00:16Z",
      "side": 1,
      "message": "Can this be done with make_refptr?",
      "revId": "1a0bfb1cbecdc7fad4e0eacd065c9a1293c1d187",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a659e43f_a61c563b",
        "filename": "pc/peer_connection_end_to_end_unittest.cc",
        "patchSetId": 1
      },
      "lineNbr": 263,
      "author": {
        "id": 5234
      },
      "writtenOn": "2022-01-04T09:48:10Z",
      "side": 1,
      "message": "Seems to work. I\u0027ll try to do that consistently in this file.",
      "parentUuid": "41f77b70_947cc6bb",
      "revId": "1a0bfb1cbecdc7fad4e0eacd065c9a1293c1d187",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5a3f8ee0_47360c24",
        "filename": "pc/peer_connection_factory.cc",
        "patchSetId": 1
      },
      "lineNbr": 288,
      "author": {
        "id": 5634
      },
      "writtenOn": "2022-01-04T09:00:16Z",
      "side": 1,
      "message": "AudioTrack::Create should have returned a refptr, of course. Sigh.",
      "revId": "1a0bfb1cbecdc7fad4e0eacd065c9a1293c1d187",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "58ee5048_e5268fd3",
        "filename": "pc/peer_connection_factory.cc",
        "patchSetId": 1
      },
      "lineNbr": 288,
      "author": {
        "id": 5508
      },
      "writtenOn": "2022-01-04T11:31:56Z",
      "side": 1,
      "message": "These are tricky changes. If the refcount of the returned object from Create(), is 0, then scoped_refptr increments it to 1. If the `source` object has the same reference count, then this temporary variable could cause the object to be deleted (if in some situation Create() wouldn\u0027t also increment the refcount).\n\nCan we separate these changes from the make_ref_counted changes?",
      "parentUuid": "5a3f8ee0_47360c24",
      "revId": "1a0bfb1cbecdc7fad4e0eacd065c9a1293c1d187",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "168d77f6_de39e52b",
        "filename": "pc/peer_connection_interface_unittest.cc",
        "patchSetId": 1
      },
      "lineNbr": 2460,
      "author": {
        "id": 5634
      },
      "writtenOn": "2022-01-04T09:00:16Z",
      "side": 1,
      "message": "The StreamCollection interface has scoped_refptr for internal storage, but vends raw pointers. Another misdesign.",
      "revId": "1a0bfb1cbecdc7fad4e0eacd065c9a1293c1d187",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "50a382fd_6a705cba",
        "filename": "pc/peer_connection_interface_unittest.cc",
        "patchSetId": 1
      },
      "lineNbr": 2460,
      "author": {
        "id": 5508
      },
      "writtenOn": "2022-01-04T11:31:56Z",
      "side": 1,
      "message": "It was the style back in the day 😊 \nclasses such as scoped_refptr were considered implementation utility classes, not meant to be a part of an interface. Having the convention being based on raw interface pointers was also a better fit for exposing objects across binary boundaries (WebRTC in Chrome was split across a couple of binaries some years ago).",
      "parentUuid": "168d77f6_de39e52b",
      "revId": "1a0bfb1cbecdc7fad4e0eacd065c9a1293c1d187",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1b0b7a5f_454af07e",
        "filename": "pc/rtc_stats_collector.cc",
        "patchSetId": 1
      },
      "lineNbr": 1227,
      "author": {
        "id": 5634
      },
      "writtenOn": "2022-01-04T09:00:16Z",
      "side": 1,
      "message": "Is it an OK design pattern to take a scoped_refptr(this)?\nSeems to me the class knows it\u0027s refcounted, so it \"should be OK\", in some sense, but it \"feels weird\" to me.\n\nFor ease of conversion, it\u0027s what we should do anyway, but I wonder if it is an OK pattern or something to be avoided.",
      "revId": "1a0bfb1cbecdc7fad4e0eacd065c9a1293c1d187",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2c745905_a8d48b5f",
        "filename": "pc/rtc_stats_collector.cc",
        "patchSetId": 1
      },
      "lineNbr": 1227,
      "author": {
        "id": 5234
      },
      "writtenOn": "2022-01-04T09:48:10Z",
      "side": 1,
      "message": "In the standard library, there\u0027s shared_from_this, and to use it, you have to inherit std::enable_shared_from_this. I don\u0027t know the details on how that works, but I guess it somehow places the refcount at a known place. So it seems to be a known usecase.",
      "parentUuid": "1b0b7a5f_454af07e",
      "revId": "1a0bfb1cbecdc7fad4e0eacd065c9a1293c1d187",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b437ea70_882c1f76",
        "filename": "pc/rtc_stats_collector.cc",
        "patchSetId": 1
      },
      "lineNbr": 1227,
      "author": {
        "id": 5634
      },
      "writtenOn": "2022-01-04T11:30:48Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "2c745905_a8d48b5f",
      "revId": "1a0bfb1cbecdc7fad4e0eacd065c9a1293c1d187",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4f4a4344_579b94f6",
        "filename": "pc/rtc_stats_collector.cc",
        "patchSetId": 1
      },
      "lineNbr": 1665,
      "author": {
        "id": 5634
      },
      "writtenOn": "2022-01-04T09:00:16Z",
      "side": 1,
      "message": "Do these indicate a need for an \"internalRefptr\" function in addition to \"internal\"?",
      "revId": "1a0bfb1cbecdc7fad4e0eacd065c9a1293c1d187",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "427b3423_18c63d17",
        "filename": "pc/rtc_stats_collector.cc",
        "patchSetId": 1
      },
      "lineNbr": 1665,
      "author": {
        "id": 5234
      },
      "writtenOn": "2022-01-04T09:48:10Z",
      "side": 1,
      "message": "No idea, I haven\u0027t grokked the use of \"...Internal\" classes in this code.",
      "parentUuid": "4f4a4344_579b94f6",
      "revId": "1a0bfb1cbecdc7fad4e0eacd065c9a1293c1d187",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2e88d85b_19333559",
        "filename": "pc/rtc_stats_collector.cc",
        "patchSetId": 1
      },
      "lineNbr": 1665,
      "author": {
        "id": 5634
      },
      "writtenOn": "2022-01-04T11:30:48Z",
      "side": 1,
      "message": "The non-internal classes have proxies, so methods may be dispatched to other threads. We use -\u003einternal() to get at the inner object that doesn\u0027t have a proxy.\n\nThe internal() function is (I think) declared in api/proxy.h.\n\nAnyway, for a later CL.",
      "parentUuid": "427b3423_18c63d17",
      "revId": "1a0bfb1cbecdc7fad4e0eacd065c9a1293c1d187",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "98dede79_d312947d",
        "filename": "pc/rtc_stats_collector.cc",
        "patchSetId": 1
      },
      "lineNbr": 1665,
      "author": {
        "id": 5508
      },
      "writtenOn": "2022-01-04T11:31:56Z",
      "side": 1,
      "message": "The `internal()` concept seems fragile to me for two reasons.\n* It often seems to be used to bypass threading rules.\n* It seems to have come about because of mixing public interfaces with internal code.\n\nBefore adding more to it, I think we could consider whether this is something we want continue with or if an alternate approach would be preferable.",
      "parentUuid": "427b3423_18c63d17",
      "revId": "1a0bfb1cbecdc7fad4e0eacd065c9a1293c1d187",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    }
  ]
}