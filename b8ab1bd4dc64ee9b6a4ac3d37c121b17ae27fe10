{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "c81c07c9_4591c1bd",
        "filename": "modules/audio_mixer/audio_mixer_impl.cc",
        "patchSetId": 7
      },
      "lineNbr": 42,
      "author": {
        "id": 5119
      },
      "writtenOn": "2023-04-24T08:03:21Z",
      "side": 1,
      "message": "(I\u0027m not asking you to make any changes here, the CL LGTM)\n\nThis object has me confused:\n\n1) we track seemingly redundant state (\u003d\u003e opportunity for inconsistency)\n   * there is both `muted_` and `audio_frame_.muted()`\n   * `audio_frame_` seems identical to `\u0026source_status_-\u003eaudio_frame`\n   \n2) `SourceFrame` is only partially used when ramping, with arbitrary values for unused fields (`uint32_t energy_` is set to -1 on line 255)\n\nIf I\u0027ve got that right, then it sounds like:\n\n1) we can remove `audio_frame_` and return `\u0026source_status_-\u003eaudio_frame` from `audio_frame()/mutable_audio_frame()`, and\n\n2) `ramp_list` can just be a list of `SourceStatus`, or even be deleted entirely passing each `SourceStatus` individually to `RampAndUpdateGain` on lines 252-256.",
      "range": {
        "startLine": 42,
        "startChar": 6,
        "endLine": 42,
        "endChar": 17
      },
      "revId": "b8ab1bd4dc64ee9b6a4ac3d37c121b17ae27fe10",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2729950b_119bebf4",
        "filename": "modules/audio_mixer/audio_mixer_impl.cc",
        "patchSetId": 7
      },
      "lineNbr": 42,
      "author": {
        "id": 5508
      },
      "writtenOn": "2023-04-24T08:14:01Z",
      "side": 1,
      "message": "Yes, that makes two of us then that are confused ðŸ˜Š\n\nThere are problems related to how we handle muted audio, which is why I\u0027m digging around in this part of the code (although I don\u0027t believe the problem I\u0027m seeing is directly related to this particular class). But this class had be confused for the same reasons and also made it a bit unclear when we change the state of a supposedly const AudioFrame.\n\nI\u0027ll follow up on the comments in a separate CL. (or, in case you\u0027re planning on making changes instead, just let me know).",
      "parentUuid": "c81c07c9_4591c1bd",
      "range": {
        "startLine": 42,
        "startChar": 6,
        "endLine": 42,
        "endChar": 17
      },
      "revId": "b8ab1bd4dc64ee9b6a4ac3d37c121b17ae27fe10",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "At least one maximum vote for label \u0027Code-Review\u0027 is required"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader AND -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1 AND -label:Code-Review\u003dMIN"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader AND -label:Code-Review=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Code-Review=MAX,user=non_uploader"],"failingAtoms":["label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1 AND -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1","label:Code-Review=MIN"]}
      },
      "patchSetCommitId": "b8ab1bd4dc64ee9b6a4ac3d37c121b17ae27fe10",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["is:review-enforced_gerrit"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforcement-satisfied_gerrit"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforcement-satisfied_gerrit"]}
      },
      "patchSetCommitId": "b8ab1bd4dc64ee9b6a4ac3d37c121b17ae27fe10",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {
        "value": true
      }
    }
  ]
}