{
  "comments": [
    {
      "key": {
        "uuid": "fc3b35cd_a31d5eed",
        "filename": "/COMMIT_MSG",
        "patchSetId": 6
      },
      "lineNbr": 12,
      "author": {
        "id": 5019
      },
      "writtenOn": "2019-12-11T09:40:50Z",
      "side": 1,
      "message": "this message is good in a comment, but doesn\u0027t look good in long-term change description\n\nhttps://google.github.io/eng-practices/review/developer/cl-descriptions.html",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 12,
        "endChar": 14
      },
      "revId": "6d098eb1c52ac61acf8a061ba81dca8badbd4757",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b55a43d2_682638a0",
        "filename": "audio/channel_send.cc",
        "patchSetId": 6
      },
      "lineNbr": 448,
      "author": {
        "id": 5019
      },
      "writtenOn": "2019-12-11T09:40:50Z",
      "side": 1,
      "message": "please refer bugs in TODO as TODO(bugs.webrtc.org/10739)\n\n(so that people who do not work on webrtc would have a good guess where to find more information)",
      "range": {
        "startLine": 448,
        "startChar": 44,
        "endLine": 448,
        "endChar": 56
      },
      "revId": "6d098eb1c52ac61acf8a061ba81dca8badbd4757",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "89d5a8b8_dc341059",
        "filename": "modules/rtp_rtcp/source/rtp_sender_audio.cc",
        "patchSetId": 6
      },
      "lineNbr": 94,
      "author": {
        "id": 5019
      },
      "writtenOn": "2019-12-11T09:40:50Z",
      "side": 1,
      "message": "what payload format is it? (payload name often match codec name)\n\ndifferent audio payload types may have different frequencies. is that supported?\ne.g.\na\u003drtpmap:103 ISAC/16000\na\u003drtpmap:104 ISAC/32000",
      "range": {
        "startLine": 94,
        "startChar": 51,
        "endLine": 94,
        "endChar": 56
      },
      "revId": "6d098eb1c52ac61acf8a061ba81dca8badbd4757",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2700bf86_bc8c33d1",
        "filename": "modules/rtp_rtcp/source/rtp_sender_audio.cc",
        "patchSetId": 6
      },
      "lineNbr": 94,
      "author": {
        "id": 10209
      },
      "writtenOn": "2019-12-11T14:23:05Z",
      "side": 1,
      "message": "I am not 100% sure, I have used it from here\nhttps://cs.chromium.org/chromium/src/third_party/webrtc/audio/channel_send.cc?l\u003d583\u0026rcl\u003d3c4fda2ed8140a330634c0a2704a3cf0311a89de\n\nIn my prototype originally I passed encoder frequency as SendAudio method argument (together with absolute_capture_timestamp_ms)\nhttps://webrtc-review.googlesource.com/c/src/+/158520/8/audio/channel_send.cc#535\nhttps://webrtc-review.googlesource.com/c/src/+/158520/8/modules/audio_coding/acm2/audio_coding_module.cc#393\n\nBut it felt wrong to pass essentially static parameter on each invocation and then I discovered the code above for real audio. That is why I decided to reuse it.\n\nBy \"different audio payload types may have different frequencies\" did you mean that depending on encoder type RtpTimestampRateHz may be different from SampleRate? \nI find these differences between audio Encoder/Decoder RtpTimestampRateHz a bit confusing. It is much easier for video with one RtpTimestamp frequency :) \nBut I have tested it end-to-end with \"opus\" codec at least.",
      "parentUuid": "89d5a8b8_dc341059",
      "range": {
        "startLine": 94,
        "startChar": 51,
        "endLine": 94,
        "endChar": 56
      },
      "revId": "6d098eb1c52ac61acf8a061ba81dca8badbd4757",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fc8677d4_da966dbc",
        "filename": "modules/rtp_rtcp/source/rtp_sender_audio.cc",
        "patchSetId": 6
      },
      "lineNbr": 94,
      "author": {
        "id": 5019
      },
      "writtenOn": "2019-12-11T15:06:17Z",
      "side": 1,
      "message": "since channel_send uses a constant lowcase string, you might as well use regular compare:\nelse if (payload_name \u003d\u003d \"audio\") {",
      "range": {
        "startLine": 94,
        "startChar": 13,
        "endLine": 94,
        "endChar": 36
      },
      "revId": "6d098eb1c52ac61acf8a061ba81dca8badbd4757",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3a827588_6778d419",
        "filename": "modules/rtp_rtcp/source/rtp_sender_audio.cc",
        "patchSetId": 6
      },
      "lineNbr": 94,
      "author": {
        "id": 5019
      },
      "writtenOn": "2019-12-11T15:06:17Z",
      "side": 1,
      "message": "Aha, I see, I\u0027m surprised by channel_send behaviour.\nit uses \u0027audio\u0027 instead of real rtp payload name and re-registers audio payload type when encoder is reconfigured.\n\nBut then this block makes sense.",
      "parentUuid": "2700bf86_bc8c33d1",
      "range": {
        "startLine": 94,
        "startChar": 51,
        "endLine": 94,
        "endChar": 56
      },
      "revId": "6d098eb1c52ac61acf8a061ba81dca8badbd4757",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3d654103_8cce909f",
        "filename": "modules/rtp_rtcp/source/rtp_sender_audio.h",
        "patchSetId": 6
      },
      "lineNbr": 48,
      "author": {
        "id": 5019
      },
      "writtenOn": "2019-12-11T09:40:50Z",
      "side": 1,
      "message": "for backward compatibility you need to leave old signature for a [short] while.\neither with default argument or with overloading.",
      "range": {
        "startLine": 48,
        "startChar": 17,
        "endLine": 48,
        "endChar": 54
      },
      "revId": "6d098eb1c52ac61acf8a061ba81dca8badbd4757",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    }
  ]
}