{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "61063371_a2f6f061",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 3350241
      },
      "writtenOn": "2024-09-26T17:56:07Z",
      "side": 1,
      "message": "Reland did not work (\"identical tree\") so a revert of the revert.\nPS1..2 contains the changes necessary to fix the issue while restoring multislice support.",
      "revId": "f21fc90550b5c34d6f6f0bea403edc80d7a77847",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "51b5c26d_e1b83094",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 5019
      },
      "writtenOn": "2024-09-30T15:54:22Z",
      "side": 1,
      "message": "RS LGTM as OWNER",
      "revId": "f21fc90550b5c34d6f6f0bea403edc80d7a77847",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "01db7cf7_925d1fe1",
        "filename": "modules/rtp_rtcp/source/video_rtp_depacketizer_h264.cc",
        "patchSetId": 3
      },
      "lineNbr": 213,
      "author": {
        "id": 5825
      },
      "writtenOn": "2024-09-27T08:58:40Z",
      "side": 1,
      "message": "I agree that settings is_first_packet_in_frame\u003dtrue at AUD is the right thing to do. But I do not think it is absolutely necessary. Identifying frame border by first_mb_in_slice\u003d\u003d0 should be sufficient (should probably include preceding SEI). Do we understand why it is not working? In theory, video from provided pcap should still be decodable if all AUDs will be removed.",
      "range": {
        "startLine": 213,
        "startChar": 7,
        "endLine": 213,
        "endChar": 68
      },
      "revId": "f21fc90550b5c34d6f6f0bea403edc80d7a77847",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "00e61d1f_8714afea",
        "filename": "modules/rtp_rtcp/source/video_rtp_depacketizer_h264.cc",
        "patchSetId": 3
      },
      "lineNbr": 213,
      "author": {
        "id": 22924
      },
      "writtenOn": "2024-09-27T09:32:56Z",
      "side": 1,
      "message": "I think the input and output requirements for different modules are not the same.\nFor frame assembly lookup based on sequence number continuity, the required input and output are the start and end markers of a frame, which are independent of the frame content. \nFor the decoding module, it does not matter how the encoded frames were generated; as long as they are continuous and decodable, it is acceptable, regardless of whether they were transmitted continuously.\nThe main issue this PR aims to address is that the frame assembly module can cause connectivity detection to fail in certain situations after frame assembly, which in turn leads to subsequent frame loss issues.\nMaybe others can explain it more clearly.",
      "parentUuid": "01db7cf7_925d1fe1",
      "range": {
        "startLine": 213,
        "startChar": 7,
        "endLine": 213,
        "endChar": 68
      },
      "revId": "f21fc90550b5c34d6f6f0bea403edc80d7a77847",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fc9f39f4_57c56cb3",
        "filename": "modules/rtp_rtcp/source/video_rtp_depacketizer_h264.cc",
        "patchSetId": 3
      },
      "lineNbr": 213,
      "author": {
        "id": 5963
      },
      "writtenOn": "2024-09-27T10:54:32Z",
      "side": 1,
      "message": "I agree with @ssilkin@webrtc.org and @phancke@meta.com\n\nsetting the first packet in frame to true on an AUD is the right thing to do, although it is unclear why the issue is solved. Previously we had issues when incorrect detection of the first packet caused to drop packets needed for decoding (for example, in multislice encoding). \n\nNot setting the flag for AUD, should only cause the AUD to be dropped, but not cause any decoding issues. So maybe there is a different underlying issue that we need still to fix.\n\nAnyway, this lgtm, would be great to get confirmation that this solves the hw encoding issue.\n\nI plan to submit a couple of CLs doing some long standing TODO cleanups of the h264 code that maybe help identify any other issue.",
      "parentUuid": "00e61d1f_8714afea",
      "range": {
        "startLine": 213,
        "startChar": 7,
        "endLine": 213,
        "endChar": 68
      },
      "revId": "f21fc90550b5c34d6f6f0bea403edc80d7a77847",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2867d2ba_687bd0a0",
        "filename": "modules/rtp_rtcp/source/video_rtp_depacketizer_h264.cc",
        "patchSetId": 3
      },
      "lineNbr": 213,
      "author": {
        "id": 3350241
      },
      "writtenOn": "2024-09-27T17:52:41Z",
      "side": 1,
      "message": "bear with me... the difference in behavior is in the packet buffer. If you run video_replay with additional\n  --start_timestamp 3177567468 --stop_timestamp 3177598968\nadd this piece of code\nRTC_LOG(LS_ERROR) \u003c\u003c \"BAIL HERE \" \u003c\u003c seq_num \u003c\u003c \" found \" \u003c\u003c found_frames.size() \u003c\u003c \" \" \u003c\u003c (!found_frames.empty() ? found_frames[0]-\u003etimestamp : -1);\nhere\nhttps://source.chromium.org/chromium/chromium/src/+/main:third_party/webrtc/modules/video_coding/packet_buffer.cc;l\u003d253;bpv\u003d1;bpt\u003d1\nthere is a difference in behavior since with this CL you get this:\n(packet_buffer.cc:253): BAIL HERE 17169 found 56 3177567468\nand not setting the first_packet_in_frame flag you get\n (packet_buffer.cc:253): BAIL HERE 17165 found 52 3177567468\n \nthe timestamp is the timestamp of the IDR which has 52 packets so the additional delta is delivered in addition by FindFrames.\n\nSubsequently RtpVideoStreamReceiver2::OnInsertedPacket calls the depacketizer with the IDR and delta frame. Which works (it should not?!) and then calls OnAssembledFrame with a frame spanning from 17113 (start of the IDR) to 17164 (end of the delta).\n\nAlso on main so something is pretty broken here.\nWill try to turn that into another unit test...",
      "parentUuid": "fc9f39f4_57c56cb3",
      "range": {
        "startLine": 213,
        "startChar": 7,
        "endLine": 213,
        "endChar": 68
      },
      "revId": "f21fc90550b5c34d6f6f0bea403edc80d7a77847",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e4564608_8f665cad",
        "filename": "modules/rtp_rtcp/source/video_rtp_depacketizer_h264.cc",
        "patchSetId": 3
      },
      "lineNbr": 213,
      "author": {
        "id": 5963
      },
      "writtenOn": "2024-09-30T16:40:52Z",
      "side": 1,
      "message": "I have started working on cleaning up the h264 depacketizer so it is easier to merge current h26x_pacekt_buffer logic into the main packet_buffer.\n\nhttps://webrtc-review.googlesource.com/c/src/+/364240\n\nHopefully this makes it easier to debug",
      "parentUuid": "2867d2ba_687bd0a0",
      "range": {
        "startLine": 213,
        "startChar": 7,
        "endLine": 213,
        "endChar": 68
      },
      "revId": "f21fc90550b5c34d6f6f0bea403edc80d7a77847",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "If the author is a webrtc committer, code review is required from one other committer. Otherwise, code review is required from two committers."
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "((uploaderin:cria/project-webrtc-committers AND label:Code-Review\u003dMAX,user\u003dnon_uploader) OR label:Code-Review\u003dMAX,count\u003e\u003d2) AND -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1 AND -label:Code-Review\u003dMIN"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"((uploaderin:cria/project-webrtc-committers AND label:Code-Review=MAX,user=non_uploader) OR label:Code-Review=MAX,count>=2) AND -label:Code-Review=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Code-Review=MAX,user=non_uploader","uploaderin:cria/project-webrtc-committers","label:Code-Review=MAX,count>=2"],"failingAtoms":["label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1 AND -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1","label:Code-Review=MIN"]}
      },
      "patchSetCommitId": "f21fc90550b5c34d6f6f0bea403edc80d7a77847",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval. Using a trusted device is required, see go/gerrit-onboarding#review-enforcement."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["is:review-enforced_gerrit"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforcement-satisfied_gerrit"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforcement-satisfied_gerrit"]}
      },
      "patchSetCommitId": "f21fc90550b5c34d6f6f0bea403edc80d7a77847",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {
        "value": true
      }
    }
  ]
}