{
  "comments": [
    {
      "key": {
        "uuid": "b13c3f85_ebe2fc1f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 12
      },
      "lineNbr": 0,
      "author": {
        "id": 5524
      },
      "writtenOn": "2020-08-31T16:25:38Z",
      "side": 1,
      "message": "Two tests are now failing, but from what I can tell it\u0027s actually the tests that don\u0027t behave to spec.\n+titovartem,shampson can I disable these for now, and then we can fix and re-enable them?\n\n* PeerConnectionIntegrationTestUnifiedPlan.EndToEndCallWithTwoVideoTracksAndNoSignaledSsrc\nComment states that:\n// Tests that video flows between multiple video tracks when SSRCs are not\n// signaled. This exercises the MID RTP header extension which is needed to\n// demux the incoming video tracks.\nThe test calls RemoveSsrcsAndKeepMsids() in order to achieve this, but it does not appear that |stream_ids| (i.e. mids) are always empty, so this has in fact been using a single default receive stream which has just been repeatedly created and destroyed for each new ssrc seen. Presumable single-packet frames makes this pass.\n\n* PeerConnectionE2EQualityTestSmokeTest.Simulcast\nThis smoke test sets up a simulcast sender and then expects a single receiver to receive and decode all of the SSRCs. This is in fact not supported and has also been relying on a default stream to decode at least some of the layers.\n",
      "revId": "4b4ecb4446b56e63e85ae4e995373a5cec6e7603",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6b7a58a7_56b19775",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 12
      },
      "lineNbr": 0,
      "author": {
        "id": 5039
      },
      "writtenOn": "2020-08-31T16:56:44Z",
      "side": 1,
      "message": "Re: EndToEndCallWithTwoVideoTracksAndNoSignaledSsrc\n\nI don\u0027t see anything wrong with that test as written. It\u0027s checking the basic premise of spec-compliant Unified Plan, i.e. not signaling SSRCs and relying on the MID RTP header extension (note: MID not MSID).\n\nAt the WebRtcVideoEngine level I believe that behavior relied on unsignaled SSRC handling to create the video receive stream. However, there were still some remaining bugs with this implementation, like RTX not working: bugs.webrtc.org/10297",
      "parentUuid": "b13c3f85_ebe2fc1f",
      "revId": "4b4ecb4446b56e63e85ae4e995373a5cec6e7603",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "21f301b4_f9779f95",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 12
      },
      "lineNbr": 0,
      "author": {
        "id": 5053
      },
      "writtenOn": "2020-08-31T22:18:08Z",
      "side": 1,
      "message": "Sorry for overlooking this, but Steve\u0027s right; I forgot that MID-based demuxing relied on the unsignaled SSRC handling underneath. The scenario you describe with a single default stream being destroyed and recreated won\u0027t happen, because the RtpDemuxer at the BaseChannel level will direct packets to the correct channel based on the MID extension; each WebrtcVideoChannel should only be getting packets from one stream.\n\nSo, when removing the unsignaled streams, we *don\u0027t* want to remove streams that were matched via MID or RID; only those that were matched on payload type alone.\n\nHowever, I don\u0027t see any way to identify said streams; the RtpDemuxer doesn\u0027t keep track of whether an SSRC-\u003esink binding was created from a payload type or a MID. Theoretically you could add the bindings created from payload type to a separate list, but that could get complicated. The simpler approach would be to just remove all unsignaled streams, potentially causing a brief hiccup for streams that didn\u0027t need to be removed and will need to be recreated.\n\nSo basically, I\u0027d suggest changing SetUnsignalledReceiveStreamsAllowed to \"SetPayloadTypeDemuxingEnabled\". On setting to false, it would remove all unsignaled streams (but not disable them from being created later), remove payload types from demuxer_criteria_, and prevent them from being added to demuxer_criteria_ in the future. If you like I can take over from here since I\u0027m familiar with this code.",
      "parentUuid": "6b7a58a7_56b19775",
      "revId": "4b4ecb4446b56e63e85ae4e995373a5cec6e7603",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7d33bff3_060ceaf8",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 12
      },
      "lineNbr": 0,
      "author": {
        "id": 6337
      },
      "writtenOn": "2020-09-01T00:32:23Z",
      "side": 1,
      "message": "Re: PeerConnectionE2EQualityTestSmokeTest.Simulcast\nThere is SDP modification in the middle, so for single receiver it actually should be 3 different streams signaled by MID. Modification swaps MID and RID header extensions in the packets, so for receiver what was RID for sender will become a MID and should be accepted. \n\nThis behavior is also used in a batch of performance tests that we have in pc_full_stack_tests.cc. I suppose they may also fail if we won\u0027t fix things here.\n\nI think maybe the thing explained by Steve and Taylor maybe the case for this issue too.",
      "parentUuid": "21f301b4_f9779f95",
      "revId": "4b4ecb4446b56e63e85ae4e995373a5cec6e7603",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9b1cadbc_debf4e7b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 12
      },
      "lineNbr": 0,
      "author": {
        "id": 5524
      },
      "writtenOn": "2020-09-01T13:24:56Z",
      "side": 1,
      "message": "Thank for your replies!\nI see, I misunderstood. This is new territory for me and code is getting quite complex. If you have the time Taylor I\u0027d appreciate if you took over as per your offer so that I don\u0027t waste more time falling into these pitfalls :)\nLet me know if there are other places where I can contribute.\n\nRe the solution. One option I considered was adding metadata to the RtpPacketReceived as it\u0027s passed through the RtpDemuxer. However, in BaseChannel::OnRtpPacket() that is stripped down again to just CopyOnWriteBuffer.\nThis buffer is then passed to the media channel which then passes it to Call, which re-parses it again to an RtpPacketReceived. It seems to me like a good refactoring to plumb the parsed packet all the way - but that\u0027s way out of scope for this CL...",
      "parentUuid": "7d33bff3_060ceaf8",
      "revId": "4b4ecb4446b56e63e85ae4e995373a5cec6e7603",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    }
  ]
}