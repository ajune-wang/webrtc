{
  "comments": [
    {
      "key": {
        "uuid": "ad0a6452_305338fb",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 5125
      },
      "writtenOn": "2020-08-19T12:51:29Z",
      "side": 1,
      "message": "Thanks for the CL!!!!\nI have initial comments.",
      "revId": "544b19d61ad9b93e07b17a4cc754369ac7dd5120",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a4351feb_44b10e10",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 5125
      },
      "writtenOn": "2020-08-19T12:55:32Z",
      "side": 1,
      "message": "Some more comments",
      "revId": "544b19d61ad9b93e07b17a4cc754369ac7dd5120",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "759f10ac_d5929f9e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 9741
      },
      "writtenOn": "2020-08-21T07:26:18Z",
      "side": 1,
      "message": "Thanks Per, comments replied, PTAL!",
      "parentUuid": "ad0a6452_305338fb",
      "revId": "544b19d61ad9b93e07b17a4cc754369ac7dd5120",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "83729dda_885b8585",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 5125
      },
      "writtenOn": "2020-08-28T11:15:29Z",
      "side": 1,
      "message": "This is a really great CL! \nThanks you for adding the AVX2 optimizations to the WebRTC code!!!\n\nI have no comments on the code. Apart from reviewing the code I have tested the output quality achieved by the AVX2 code on a number of test cases and compared against the SSE2 counterpart and the differences in the audio output are negligible/non-audible (which is great).\n\nYou have an lgtm from me.\n\nAfter this CL has landed I will \n1) Create a CL that Activates the AVX2 code (which also involves adding a case in the unittests for that).\n2) Look into moving the SSE2 and Neon variants of the code into separate .cc files to follow the pattern introduced in this CL.\n\n",
      "revId": "544b19d61ad9b93e07b17a4cc754369ac7dd5120",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "74a77770_f44c3957",
        "filename": "modules/audio_processing/aec3/BUILD.gn",
        "patchSetId": 4
      },
      "lineNbr": 272,
      "author": {
        "id": 5125
      },
      "writtenOn": "2020-08-19T12:51:29Z",
      "side": 1,
      "message": "When adding platform specific-code, there are basically two paths to go: either let the build-system decide whether to include the code, or using build-flags (in #ifdef) to include the code.\n\nThe rest of the AEC3 code uses the build-flag approach for the SSE2 and Neon code, but the approach taken here for AVX2 is the build-system approach.\n\nThat results in that we have a two different ways of handling this, which I don\u0027t think is good.\n\nWhile there are pros and cons with both variants I personally prefer the build-flag approach since\n-With that there is only one source of truth (the code) and a reader of the code only needs to look at the source code, and not the build files, to understand the code.\n-With that the code is more portable since it is less relying features of the  build system to work.\n\n\nRegardless of my personal preference I think that the right thing in this CL is to keep the approach used currently in AEC3 and instead use build-flags to control the building of the AVX2 code (similarly to the SSE2 code).\n\nThat will also avoid the necessity to break up the code in lots of smaller build targets.",
      "range": {
        "startLine": 152,
        "startChar": 2,
        "endLine": 272,
        "endChar": 1
      },
      "revId": "544b19d61ad9b93e07b17a4cc754369ac7dd5120",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fda6812c_d0bc059c",
        "filename": "modules/audio_processing/aec3/BUILD.gn",
        "patchSetId": 4
      },
      "lineNbr": 272,
      "author": {
        "id": 9741
      },
      "writtenOn": "2020-08-21T07:26:18Z",
      "side": 1,
      "message": "I have tried to use build-flag approach for SSE2 and AVX2 code before, the problem is that the avx2 version code needs to build with cflag \"-mavx2\", different version of intrinsic needs different cflag, eg, -mssse3, -msse4.1, -msse4.2, -mavx. And we need to use \"-mavx2\" for the file if we put sse2 and avx2 version in the same file, and this will cause the other non-intrincis code in sse2 version compiled with avx2 intrinsic, and it will fail exec with illegal instruction on devices which don\u0027t support avx2. IMHO, I think the general method is put the different version intrinsic code into different files and select file specific options. Like libvpx and libaom, https://source.chromium.org/chromium/chromium/src/+/master:third_party/libaom/BUILD.gn;l\u003d171;bpv\u003d1;\nhttps://source.chromium.org/chromium/chromium/src/+/master:third_party/libvpx/BUILD.gn;l\u003d207;bpv\u003d1. What do you think?",
      "parentUuid": "74a77770_f44c3957",
      "range": {
        "startLine": 152,
        "startChar": 2,
        "endLine": 272,
        "endChar": 1
      },
      "revId": "544b19d61ad9b93e07b17a4cc754369ac7dd5120",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7b76f040_0b156a86",
        "filename": "modules/audio_processing/aec3/BUILD.gn",
        "patchSetId": 4
      },
      "lineNbr": 272,
      "author": {
        "id": 5125
      },
      "writtenOn": "2020-08-27T05:49:26Z",
      "side": 1,
      "message": "I see your point! And do I understand it correctly that the intrinsics are inlined?\n\nThat then indeed means that we need to follow your approach here.\nLet\u0027s go for that.",
      "parentUuid": "fda6812c_d0bc059c",
      "range": {
        "startLine": 152,
        "startChar": 2,
        "endLine": 272,
        "endChar": 1
      },
      "revId": "544b19d61ad9b93e07b17a4cc754369ac7dd5120",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "42a39bac_d05bb0d2",
        "filename": "modules/audio_processing/aec3/fft_data.h",
        "patchSetId": 4
      },
      "lineNbr": 67,
      "author": {
        "id": 5125
      },
      "writtenOn": "2020-08-19T12:51:29Z",
      "side": 1,
      "message": "The idea with putting the SSE2 code as part of the header file is to allow inlining if the compiler wants to. \nThis could make sense if the method is called in a loop (maybe in particular so since the default implementation is a simple transform operation).\n\nI think the the AVX2 code should follow the same pattern as the other code and put the method implementation here in the header file.",
      "range": {
        "startLine": 67,
        "startChar": 8,
        "endLine": 67,
        "endChar": 37
      },
      "revId": "544b19d61ad9b93e07b17a4cc754369ac7dd5120",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "32dda166_e5271268",
        "filename": "modules/audio_processing/aec3/fft_data.h",
        "patchSetId": 4
      },
      "lineNbr": 67,
      "author": {
        "id": 5125
      },
      "writtenOn": "2020-08-27T05:49:26Z",
      "side": 1,
      "message": "As commented elsewhere, let\u0027s keep this one as it is.",
      "parentUuid": "42a39bac_d05bb0d2",
      "range": {
        "startLine": 67,
        "startChar": 8,
        "endLine": 67,
        "endChar": 37
      },
      "revId": "544b19d61ad9b93e07b17a4cc754369ac7dd5120",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e888331b_3c949037",
        "filename": "modules/audio_processing/aec3/fft_data_avx2.cc",
        "patchSetId": 4
      },
      "lineNbr": 32,
      "author": {
        "id": 5125
      },
      "writtenOn": "2020-08-19T12:51:29Z",
      "side": 1,
      "message": "As mentioned elsewhere, please move this to the header file.",
      "range": {
        "startLine": 19,
        "startChar": 1,
        "endLine": 32,
        "endChar": 0
      },
      "revId": "544b19d61ad9b93e07b17a4cc754369ac7dd5120",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "61185cba_8645d77e",
        "filename": "modules/audio_processing/aec3/fft_data_avx2.cc",
        "patchSetId": 4
      },
      "lineNbr": 32,
      "author": {
        "id": 5125
      },
      "writtenOn": "2020-08-27T05:49:26Z",
      "side": 1,
      "message": "As commented elsewhere, let\u0027s keep this one as it is.",
      "parentUuid": "e888331b_3c949037",
      "range": {
        "startLine": 19,
        "startChar": 1,
        "endLine": 32,
        "endChar": 0
      },
      "revId": "544b19d61ad9b93e07b17a4cc754369ac7dd5120",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2a0539a7_69055d33",
        "filename": "modules/audio_processing/aec3/matched_filter_avx2.cc",
        "patchSetId": 4
      },
      "lineNbr": 20,
      "author": {
        "id": 5125
      },
      "writtenOn": "2020-08-19T12:51:29Z",
      "side": 1,
      "message": "I think the choice to move the AVX2 code into a separate file is the right one, considering that the matched_filter.cc is so long.\nI\u0027ll follow up this CL with a CL that does the same think for the other variants of the MatchedFilterCore implementations since I don\u0027t think it makes sense to have different approaches for the different variants.\n\nHowever, along my comment in the BUILD file I think that the code in this file should always be included in the builds and instead have #ifdef  build flags to control the inclusion of the code into the compilation.",
      "range": {
        "startLine": 20,
        "startChar": 0,
        "endLine": 20,
        "endChar": 49
      },
      "revId": "544b19d61ad9b93e07b17a4cc754369ac7dd5120",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "79ee91fe_91031560",
        "filename": "modules/audio_processing/aec3/matched_filter_avx2.cc",
        "patchSetId": 4
      },
      "lineNbr": 20,
      "author": {
        "id": 5125
      },
      "writtenOn": "2020-08-27T05:49:26Z",
      "side": 1,
      "message": "As commented elsewhere, let\u0027s keep this one as it is.",
      "parentUuid": "2a0539a7_69055d33",
      "range": {
        "startLine": 20,
        "startChar": 0,
        "endLine": 20,
        "endChar": 49
      },
      "revId": "544b19d61ad9b93e07b17a4cc754369ac7dd5120",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1ab1e04b_85302658",
        "filename": "modules/audio_processing/aec3/vector_math.h",
        "patchSetId": 4
      },
      "lineNbr": 43,
      "author": {
        "id": 5125
      },
      "writtenOn": "2020-08-19T12:51:29Z",
      "side": 1,
      "message": "As commented elsewhere, please follow the pattern used for SSE2 and add the implementation inline here.\n\nThat will allow inlining, and will also be consistent to how the Neon and SSE2 optimizations are made.",
      "range": {
        "startLine": 43,
        "startChar": 1,
        "endLine": 43,
        "endChar": 41
      },
      "revId": "544b19d61ad9b93e07b17a4cc754369ac7dd5120",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "52703cc7_4e114a4b",
        "filename": "modules/audio_processing/aec3/vector_math.h",
        "patchSetId": 4
      },
      "lineNbr": 43,
      "author": {
        "id": 5125
      },
      "writtenOn": "2020-08-27T05:49:26Z",
      "side": 1,
      "message": "As commented elsewhere, let\u0027s keep this one as it is.",
      "parentUuid": "1ab1e04b_85302658",
      "range": {
        "startLine": 43,
        "startChar": 1,
        "endLine": 43,
        "endChar": 41
      },
      "revId": "544b19d61ad9b93e07b17a4cc754369ac7dd5120",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    }
  ]
}