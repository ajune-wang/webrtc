{
  "comments": [
    {
      "key": {
        "uuid": "e7670f1c_189324dc",
        "filename": "test/fuzzers/rtp_dependency_descriptor_fuzzer.cc",
        "patchSetId": 1
      },
      "lineNbr": 38,
      "author": {
        "id": 5119
      },
      "writtenOn": "2019-09-19T11:03:00Z",
      "side": 1,
      "message": "The DependencyDescriptors are stack-allocated but structure1 and structure2 are kept in unique_ptrs. Aren\u0027t they handled in the same way? What\u0027s stopping us from stack-allocating the FrameDependencyStructure. initialized to nullptr?",
      "range": {
        "startLine": 38,
        "startChar": 2,
        "endLine": 38,
        "endChar": 43
      },
      "revId": "f6f9decfd1561b82feaeba72a8c7ba817b186bdc",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "17e43c08_337fdef9",
        "filename": "test/fuzzers/rtp_dependency_descriptor_fuzzer.cc",
        "patchSetId": 1
      },
      "lineNbr": 38,
      "author": {
        "id": 5019
      },
      "writtenOn": "2019-09-19T12:10:50Z",
      "side": 1,
      "message": "Yes, initialized to nullptr is one reason, though not the main one.\nStructure is normally allocated by the RtpDependencyDescriptorExtension::Parse.\n\nstructure1 though can live on the stack. no need to reallocte it. adjusted.",
      "parentUuid": "e7670f1c_189324dc",
      "range": {
        "startLine": 38,
        "startChar": 2,
        "endLine": 38,
        "endChar": 43
      },
      "revId": "f6f9decfd1561b82feaeba72a8c7ba817b186bdc",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "82daab71_a4febf65",
        "filename": "test/fuzzers/rtp_dependency_descriptor_fuzzer.cc",
        "patchSetId": 1
      },
      "lineNbr": 39,
      "author": {
        "id": 5119
      },
      "writtenOn": "2019-09-19T11:03:00Z",
      "side": 1,
      "message": "Do these represent some sequential state between iterations of the while-loop? Otherwise the fuzzer could run just one parsing iteration per input, to reduce the search space.",
      "range": {
        "startLine": 38,
        "startChar": 0,
        "endLine": 39,
        "endChar": 55
      },
      "revId": "f6f9decfd1561b82feaeba72a8c7ba817b186bdc",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "608ac6c1_beeed2b8",
        "filename": "test/fuzzers/rtp_dependency_descriptor_fuzzer.cc",
        "patchSetId": 1
      },
      "lineNbr": 39,
      "author": {
        "id": 5019
      },
      "writtenOn": "2019-09-19T12:10:50Z",
      "side": 1,
      "message": "If only Parse would be checked, then yes, one Parse would be enough.\n\nbut this fuzzer validates both Parsing and Building. To validate Building it does re-parsing.\n(and building itself validates that Parsing did reject unreasonable structures. e.g. this fuzzer noticed a corner case fixed in this CL in reader.)\n\nafter each loop structure1 and structure2 should be equivalent,\nthough not necessary identical.",
      "parentUuid": "82daab71_a4febf65",
      "range": {
        "startLine": 38,
        "startChar": 0,
        "endLine": 39,
        "endChar": 55
      },
      "revId": "f6f9decfd1561b82feaeba72a8c7ba817b186bdc",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "05af7c31_05c6d396",
        "filename": "test/fuzzers/rtp_dependency_descriptor_fuzzer.cc",
        "patchSetId": 1
      },
      "lineNbr": 39,
      "author": {
        "id": 5119
      },
      "writtenOn": "2019-09-20T08:56:20Z",
      "side": 1,
      "message": "Ok, thank you for explaining.",
      "parentUuid": "608ac6c1_beeed2b8",
      "range": {
        "startLine": 38,
        "startChar": 0,
        "endLine": 39,
        "endChar": 55
      },
      "revId": "f6f9decfd1561b82feaeba72a8c7ba817b186bdc",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "137f84a6_5ddcc247",
        "filename": "test/fuzzers/rtp_dependency_descriptor_fuzzer.cc",
        "patchSetId": 1
      },
      "lineNbr": 44,
      "author": {
        "id": 5119
      },
      "writtenOn": "2019-09-19T11:03:00Z",
      "side": 1,
      "message": "nit: const int",
      "range": {
        "startLine": 44,
        "startChar": 4,
        "endLine": 44,
        "endChar": 7
      },
      "revId": "f6f9decfd1561b82feaeba72a8c7ba817b186bdc",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "80089dc6_a7444017",
        "filename": "test/fuzzers/rtp_dependency_descriptor_fuzzer.cc",
        "patchSetId": 1
      },
      "lineNbr": 44,
      "author": {
        "id": 5019
      },
      "writtenOn": "2019-09-19T12:10:50Z",
      "side": 1,
      "message": "why?\n\nhttps://google.github.io/styleguide/cppguide.html#Use_of_const\n\n\"Using const on local variables is neither encouraged nor discouraged.\"",
      "parentUuid": "137f84a6_5ddcc247",
      "range": {
        "startLine": 44,
        "startChar": 4,
        "endLine": 44,
        "endChar": 7
      },
      "revId": "f6f9decfd1561b82feaeba72a8c7ba817b186bdc",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7041ee10_a8ced6c0",
        "filename": "test/fuzzers/rtp_dependency_descriptor_fuzzer.cc",
        "patchSetId": 1
      },
      "lineNbr": 44,
      "author": {
        "id": 5119
      },
      "writtenOn": "2019-09-20T08:56:20Z",
      "side": 1,
      "message": "Oh so it\u0027s probably just personal preference. Thanks for pointing it out. Feel free to ignore :)\n\nI would have const\u0027d it since data and size are modified in the same context as next_size and I\u0027d like to tell my future self that at least next_size will remain unchanged.",
      "parentUuid": "80089dc6_a7444017",
      "range": {
        "startLine": 44,
        "startChar": 4,
        "endLine": 44,
        "endChar": 7
      },
      "revId": "f6f9decfd1561b82feaeba72a8c7ba817b186bdc",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    }
  ]
}