{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "9c059eb3_6aa2a425",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 17
      },
      "lineNbr": 0,
      "author": {
        "id": 5634
      },
      "writtenOn": "2023-03-13T15:26:59Z",
      "side": 1,
      "message": "One operational WTF on the change, and one micronit.",
      "revId": "7bc1c8408aabbd46ab4642961b3ad26fc5a984b7",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "18ccd566_86d33cfa",
        "filename": "pc/sctp_data_channel.cc",
        "patchSetId": 17
      },
      "lineNbr": 399,
      "author": {
        "id": 5634
      },
      "writtenOn": "2023-03-13T15:26:59Z",
      "side": 1,
      "message": "I don\u0027t understand this action. The closing procedure completing doesn\u0027t mean that the object will be destroyed (I think) - there may very well be JS references to the object (I think).\nThe DisconnectFromTransport() does something completely different.\n\nIn particular, SetState() will call controller-\u003eOnChannelStateChanged before this change, and won\u0027t do so after this change.\n\nPlease explain more.",
      "revId": "7bc1c8408aabbd46ab4642961b3ad26fc5a984b7",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ec8917fc_b28b1ce8",
        "filename": "pc/sctp_data_channel.cc",
        "patchSetId": 17
      },
      "lineNbr": 399,
      "author": {
        "id": 5508
      },
      "writtenOn": "2023-03-13T17:51:02Z",
      "side": 1,
      "message": "This is to avoid making the call on line 612 in this file, so yes, that (not calling OnChannelStateChanged) is deliberate.\n\nWhen we get to `OnClosingProcedureComplete`, we\u0027re being called from within a callback from the controller. That callback is triggered by the transport and I\u0027ve made it so in this CL that the controller clears up state related to this channel object, without posting an additional task. Eventually all of this should happen on the network thread, not require a PostTask for the transport notification (which is still in `OnChannelClosed`) or an additional PostTask to release the object reference (not needed now).\n\nThere are (still) a few ways for a channel object to be closed, this particular one is fairly straight forward now. The other one you mention, e.g. via the Close() method, which triggers a call to the OnChannelStateChange callback, which calls OnSctpDataChannelClosed, which posts a task to release the reference that the controller has to the channnel (but can\u0027t be released for safety reasons because OnSctpDataChannelClosed might otherwise be releasing the last reference to the channel).",
      "parentUuid": "18ccd566_86d33cfa",
      "revId": "7bc1c8408aabbd46ab4642961b3ad26fc5a984b7",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ec1fa8f5_dd84f4aa",
        "filename": "pc/sctp_data_channel.cc",
        "patchSetId": 17
      },
      "lineNbr": 399,
      "author": {
        "id": 5634
      },
      "writtenOn": "2023-03-13T18:07:10Z",
      "side": 1,
      "message": "The terminology in this file is quite confusing, because there are two usages of the word \"transport\" in the spec - one referring to the SCTP session, and one referring to the SCTP Stream (of which there are many per session).\n\nThe Close() method SHOULD close the datachannel \"gracefully\" - ie it gets a SCTP level ack for all outstanding data before declaring the channel closed. So in the case where there is unacked data on the channel, the channel will be in the \"closing\" session for a significant amount of time, and the call to transition to the closed state is triggered by an incoming SCTP-level event.\n\nThe SetState() will then call the channel\u0027s observer object to notify it of the change.\n\nAnyway, I think the tests for datachannel behavior in WPT are more extensive than the unittest-level tests, so I\u0027ve triggered a WPT run on this cl (bot linux-blink-rel). Let\u0027s see if it notices any change.",
      "parentUuid": "ec8917fc_b28b1ce8",
      "revId": "7bc1c8408aabbd46ab4642961b3ad26fc5a984b7",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "45050263_cb259a21",
        "filename": "pc/sctp_data_channel.cc",
        "patchSetId": 17
      },
      "lineNbr": 399,
      "author": {
        "id": 5508
      },
      "writtenOn": "2023-03-13T18:25:58Z",
      "side": 1,
      "message": "In this file, the terms \"controller\" and \"transport\" map to the implementation instances. Basically an instance of `DataChannelController` and `SctpTransport` respectively. The transport by extension points to an `SctpTransportInternal` object which eventually gets us to `DcSctpTransport`.\n\nBtw, this CL doesn\u0027t make any changes to the Close() path. This is focused on the sigslot which is connected to the final notification from the transport, which notifies the channel (via the controller) that the last step of closing down a channel, is now complete (hence `OnClosingProcedureComplete`).",
      "parentUuid": "ec1fa8f5_dd84f4aa",
      "revId": "7bc1c8408aabbd46ab4642961b3ad26fc5a984b7",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6675ce87_af249018",
        "filename": "pc/sctp_data_channel.cc",
        "patchSetId": 17
      },
      "lineNbr": 399,
      "author": {
        "id": 5634
      },
      "writtenOn": "2023-03-13T19:15:33Z",
      "side": 1,
      "message": "???\nthe Close() path is supposed to end at OnClosingProceureComplete, which is what is changed here, and is what we\u0027re discussing.\n\nThe statement that gets me all confused is \"knowing this is the last step before destruction\" - how does this class know that someone will destroy this channel just after this function finishes? And who is going to do that destruction?\n\nThe controller_ is a weak pointer initialized at class construction and never touched afterwards; the reason for using a weak pointer is to ensure that the controller can be safely destroyed while there are still references to some channel. I would have made it const if weak pointers could be const. (Can they?)\n\nClearing the controller link here seems strange to me - it complicates thinking about the model. Is it worth complexifying the model in order to make other points in the code not treat the closed state differently?",
      "parentUuid": "45050263_cb259a21",
      "revId": "7bc1c8408aabbd46ab4642961b3ad26fc5a984b7",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e088c6f2_9e57d5a3",
        "filename": "pc/test/fake_data_channel_controller.h",
        "patchSetId": 17
      },
      "lineNbr": 92,
      "author": {
        "id": 5634
      },
      "writtenOn": "2023-03-13T15:26:59Z",
      "side": 1,
      "message": "hypernit: do do -\u003e do\nbetter: \"doesn\u0027t have a transport that would call OnClosingProcedureComplete\".",
      "revId": "7bc1c8408aabbd46ab4642961b3ad26fc5a984b7",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "185a6cd0_983d91ac",
        "filename": "pc/test/fake_data_channel_controller.h",
        "patchSetId": 17
      },
      "lineNbr": 92,
      "author": {
        "id": 5508
      },
      "writtenOn": "2023-03-13T17:51:02Z",
      "side": 1,
      "message": "hah, fixed\n(was tempted to add a \"de da da da\" instead)",
      "parentUuid": "e088c6f2_9e57d5a3",
      "revId": "7bc1c8408aabbd46ab4642961b3ad26fc5a984b7",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    }
  ]
}