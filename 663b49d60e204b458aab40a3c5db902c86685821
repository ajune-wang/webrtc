{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "f2c38826_e19870cf",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 11
      },
      "lineNbr": 0,
      "author": {
        "id": 5634
      },
      "writtenOn": "2022-05-25T21:48:12Z",
      "side": 1,
      "message": "Reply on a comment...",
      "revId": "663b49d60e204b458aab40a3c5db902c86685821",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c567ad58_9099051b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 11
      },
      "lineNbr": 0,
      "author": {
        "id": 5634
      },
      "writtenOn": "2022-05-25T21:53:12Z",
      "side": 1,
      "message": "A few more comments.\n",
      "revId": "663b49d60e204b458aab40a3c5db902c86685821",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fbf167c3_1731711d",
        "filename": "rtc_base/memory/always_valid_pointer.h",
        "patchSetId": 11
      },
      "lineNbr": 140,
      "author": {
        "id": 5634
      },
      "writtenOn": "2022-05-25T21:53:12Z",
      "side": 1,
      "message": "be careful of namespace rules - \"detail\" may be too generic, may need to use \"webrtc::always_valid_pointer_internal\" for a namespace name.",
      "revId": "663b49d60e204b458aab40a3c5db902c86685821",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1089a750_8280aa62",
        "filename": "rtc_base/memory/always_valid_pointer.h",
        "patchSetId": 11
      },
      "lineNbr": 140,
      "author": {
        "id": 9405
      },
      "writtenOn": "2022-05-25T23:56:37Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "fbf167c3_1731711d",
      "revId": "663b49d60e204b458aab40a3c5db902c86685821",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6d286dac_1fad72f5",
        "filename": "rtc_base/network.h",
        "patchSetId": 11
      },
      "lineNbr": 360,
      "author": {
        "id": 5634
      },
      "writtenOn": "2022-05-25T21:53:12Z",
      "side": 1,
      "message": "I don\u0027t particularly like exposing this name to users. The concept of \"always valid pointer\" should be the generic case - all read operations can assume that it\u0027s valid, no matter how it\u0027s constructed (if not, you have crashed before this).\n\nThe details of what arguments it\u0027s constructed with should be internal to its initialization.\n\nBut if it\u0027s hard....",
      "revId": "663b49d60e204b458aab40a3c5db902c86685821",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "552d509d_71b7ae3b",
        "filename": "rtc_base/network.h",
        "patchSetId": 11
      },
      "lineNbr": 360,
      "author": {
        "id": 9405
      },
      "writtenOn": "2022-05-25T23:56:37Z",
      "side": 1,
      "message": "I can declare this as `AlwaysValidPointer\u003cconst FieldTrialsView\u003e field_trials_;` and initialize it as `field_trials_(field_trials, []() { return std::make_unique\u003cFieldTrialBasedConfig\u003e(); })`. Since FieldTrialsView is an abstract class, one must pass a proper concrete implementation to create a default instance.\nBut I\u0027m not sure if this is a cleaner approach.",
      "parentUuid": "6d286dac_1fad72f5",
      "revId": "663b49d60e204b458aab40a3c5db902c86685821",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "64177931_b2909d73",
        "filename": "rtc_base/network.h",
        "patchSetId": 11
      },
      "lineNbr": 360,
      "author": {
        "id": 5634
      },
      "writtenOn": "2022-05-29T20:24:53Z",
      "side": 1,
      "message": "I think that was the point of the two-type initializer. Declaring the member as\n\nAlwaysValidPointer\u003cconst FieldTrialsView, FieldTrialBaseConfig\u003e \n\nand initializing it as field_trials_() should Just Work (if I understood Jonas\u0027 code correctly).",
      "parentUuid": "552d509d_71b7ae3b",
      "revId": "663b49d60e204b458aab40a3c5db902c86685821",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1a663fdb_292806e1",
        "filename": "rtc_base/network.h",
        "patchSetId": 11
      },
      "lineNbr": 360,
      "author": {
        "id": 9405
      },
      "writtenOn": "2022-05-30T13:13:25Z",
      "side": 1,
      "message": "Naming things is hard.\nDo you think the code from #PS8 (i.e. `AlwaysValidPointer\u003cInterface, Default\u003e` and `AlwaysValidPointer\u003cInterface, void\u003e`) is better in terms of naming?",
      "parentUuid": "64177931_b2909d73",
      "revId": "663b49d60e204b458aab40a3c5db902c86685821",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3f31af18_8dbbfbf1",
        "filename": "rtc_base/network.h",
        "patchSetId": 11
      },
      "lineNbr": 360,
      "author": {
        "id": 5634
      },
      "writtenOn": "2022-05-30T13:24:47Z",
      "side": 1,
      "message": "I kind of liked \u003ctype, void\u003e as a way to say \"and never fall back\", so I\u0027d be OK with going back to that approach.\n\nI don\u0027t think Niels liked it that much, but I\u0027ll let him speak for himself.\n\n(We could even create a special class called NoDefault and use that to trigger the will-crash-if-no-value path....)",
      "parentUuid": "1a663fdb_292806e1",
      "revId": "663b49d60e204b458aab40a3c5db902c86685821",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "85c7adc9_4c4a67f5",
        "filename": "rtc_base/network.h",
        "patchSetId": 11
      },
      "lineNbr": 360,
      "author": {
        "id": 5234
      },
      "writtenOn": "2022-05-30T13:42:10Z",
      "side": 1,
      "message": "I don\u0027t quite like using void type as a naming device. Having a single type AlwaysValidPointer would be nice (whatever a \"single\" type means in the context of templates), but not essential, imo.\n\nBut I\u0027d prefer something explicit like \"NoDefault\" close to where it\u0027s constructed.\n\nSome other alternatives: AlwaysValidPointer::Create(...), AlwaysValidPointer::CreateWithDefault()(...), ...\n\nAs I understand it, the state of all AlwaysValidPointer variants is the same: a unique_ptr and a (non-null) raw pointer (possibly of different type, with former being a subclass of the latter). It\u0027s just the construction time logic that differs. From that perspective, it makes sense to have a single type, templated only on the type of those pointers. And then having several constructors or static Create methods seems like one reasonable way to organize it.",
      "parentUuid": "3f31af18_8dbbfbf1",
      "revId": "663b49d60e204b458aab40a3c5db902c86685821",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e5ebfc82_74b5ad15",
        "filename": "rtc_base/network.h",
        "patchSetId": 11
      },
      "lineNbr": 360,
      "author": {
        "id": 9405
      },
      "writtenOn": "2022-05-30T14:20:01Z",
      "side": 1,
      "message": "Creating a factory method requires a move constructor, so we have to introduce an empty state, which contradicts the purpose of this class.\n\nI\u0027m thinking of using #PS8\u0027s code, with leave AlwaysValidPointer\u003cInterface, Default\u003e as it is and renaming `AlwaysValidPointer\u003cInterface, void\u003e` to `AlwaysValidPointerNoDefault\u003cInterface\u003e` to make it clear to the user that an initial value should be passed. Would it be good enough?",
      "parentUuid": "85c7adc9_4c4a67f5",
      "revId": "663b49d60e204b458aab40a3c5db902c86685821",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1e97d33f_26f87efb",
        "filename": "rtc_base/network.h",
        "patchSetId": 11
      },
      "lineNbr": 360,
      "author": {
        "id": 5634
      },
      "writtenOn": "2022-05-30T14:24:41Z",
      "side": 1,
      "message": "I wonder if we should stop blocking this CL on perfecting the AlwaysValidPointer design, and iterate on that in another CL?\n\nByoungchan\u0027s latest suggestion sounds good enough to land for me.",
      "parentUuid": "85c7adc9_4c4a67f5",
      "revId": "663b49d60e204b458aab40a3c5db902c86685821",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    }
  ]
}