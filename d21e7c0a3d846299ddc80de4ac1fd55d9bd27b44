{
  "comments": [
    {
      "key": {
        "uuid": "d0f76c13_e74c3303",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 5634
      },
      "writtenOn": "2020-09-28T11:34:57Z",
      "side": 1,
      "message": "Thanks for the quick review!\n\nYes, this is a *ton* of moving things around.\n",
      "revId": "d21e7c0a3d846299ddc80de4ac1fd55d9bd27b44",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa370880_ce297c28",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 5142
      },
      "writtenOn": "2020-09-28T12:21:03Z",
      "side": 1,
      "message": "Giving my +1 but pointing out a change that may or may not cause problems so please consider it before landing",
      "revId": "d21e7c0a3d846299ddc80de4ac1fd55d9bd27b44",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cc82dbcb_126fb0fd",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 5634
      },
      "writtenOn": "2020-09-28T12:32:52Z",
      "side": 1,
      "message": "Thanks for the review!\n\nI think the path I chose is the lesser evil.\nLet\u0027s see if there\u0027s another reviewer who wants to speak up.\n",
      "revId": "d21e7c0a3d846299ddc80de4ac1fd55d9bd27b44",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b60cee16_38656551",
        "filename": "pc/peer_connection.cc",
        "patchSetId": 8
      },
      "lineNbr": 2326,
      "author": {
        "id": 5142
      },
      "writtenOn": "2020-09-28T12:21:03Z",
      "side": 1,
      "message": "Order prior to this CL:\n- Set signaling state to closed\n- Set ICE and connection state to close and fire fire events.\n- Fire onsignalingstatechange.\n\nIn this CL:\n- Set ICE and connection state to close and fire fire events.\n- Set signaling state to closed and fire onsignalingstatechange.\n\nSo if you were to inspect the pc.signaling_state() inside of the observer for ICE or connection states you may be surprised to have it not be closed. I don\u0027t know if this would cause a real problem today but this could potentially cause problems if we copy states inside of the observers and expose this order of events.\n\nMight I suggest you do one of the following...\na) Revert the changes and do a fix in a follow-up CL that is careful with the events.\nb) Move sdp_handler_.Close() to before these lines? Then signaling state still changes first even if you could inspect the pc and see that ICE is not closed yet. Or maybe that\u0027s just as bad?\n\nNot sure if this is a real problem but this is the kind of change that could slip past our tests.",
      "revId": "d21e7c0a3d846299ddc80de4ac1fd55d9bd27b44",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d2d4fa69_2fb94ff5",
        "filename": "pc/peer_connection.cc",
        "patchSetId": 8
      },
      "lineNbr": 2326,
      "author": {
        "id": 5634
      },
      "writtenOn": "2020-09-28T12:32:52Z",
      "side": 1,
      "message": "I did worry about that. If we want sdp_handler.Close() to both set the state and fire the event, and not know about ICE and connection state (the situation before the change), one of them has to move. I chose the one where the state is updated before the events fire (so state is consistent in event handlers); the alternative was to let events fire in the same order as before, but expose the signaling state before the close() in the event handlers for the other state changes.\n\nLeaving sdp_handler.close() as the only thing that accesses ICE and connection state seemed like something we should avoid.",
      "parentUuid": "b60cee16_38656551",
      "revId": "d21e7c0a3d846299ddc80de4ac1fd55d9bd27b44",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "310ebfe2_55748455",
        "filename": "pc/peer_connection.h",
        "patchSetId": 8
      },
      "lineNbr": 379,
      "author": {
        "id": 5142
      },
      "writtenOn": "2020-09-28T11:01:16Z",
      "side": 1,
      "message": "Add a bug reference.",
      "revId": "d21e7c0a3d846299ddc80de4ac1fd55d9bd27b44",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "30f89bf1_f9e52c83",
        "filename": "pc/peer_connection.h",
        "patchSetId": 8
      },
      "lineNbr": 379,
      "author": {
        "id": 5634
      },
      "writtenOn": "2020-09-28T11:34:57Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "310ebfe2_55748455",
      "revId": "d21e7c0a3d846299ddc80de4ac1fd55d9bd27b44",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2288eb80_699e9050",
        "filename": "pc/peer_connection.h",
        "patchSetId": 8
      },
      "lineNbr": 457,
      "author": {
        "id": 5142
      },
      "writtenOn": "2020-09-28T11:01:16Z",
      "side": 1,
      "message": "Why have to removed RTC_RUN_ON(signaling_thread()) here and elsewhere? Is something changing with regards to threading or is there a limitation in the compile-time checks when multiple classes are used and have their own reference to the thread?\n\nI wonder if you can get around that with RTC_RUN_ON(foo-\u003esignaling_thread()) but I don\u0027t want to hold off landing unnecessarily.",
      "revId": "d21e7c0a3d846299ddc80de4ac1fd55d9bd27b44",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "282510c1_fc71513c",
        "filename": "pc/peer_connection.h",
        "patchSetId": 8
      },
      "lineNbr": 457,
      "author": {
        "id": 5634
      },
      "writtenOn": "2020-09-28T11:34:57Z",
      "side": 1,
      "message": "Because RTC_RUN_ON(foo_-\u003esignaling_thread()) is butt-ugly. I used that for variable access, but for access to functions that will become part of PeerConnection\u0027s public interface, I changed all those into RTC_DCHECK_RUN_ON inside the function. Same static analysis can be performed, but the caller site doesn\u0027t have to care.",
      "parentUuid": "2288eb80_699e9050",
      "revId": "d21e7c0a3d846299ddc80de4ac1fd55d9bd27b44",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2f94adbc_7139cf54",
        "filename": "pc/peer_connection.h",
        "patchSetId": 8
      },
      "lineNbr": 457,
      "author": {
        "id": 5142
      },
      "writtenOn": "2020-09-28T12:21:03Z",
      "side": 1,
      "message": "Alright sounds good, as long as we\u0027re nog changing any actual threading behavior.",
      "parentUuid": "282510c1_fc71513c",
      "revId": "d21e7c0a3d846299ddc80de4ac1fd55d9bd27b44",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2e5784bf_f7c29791",
        "filename": "pc/peer_connection.h",
        "patchSetId": 8
      },
      "lineNbr": 1145,
      "author": {
        "id": 5142
      },
      "writtenOn": "2020-09-28T11:01:16Z",
      "side": 1,
      "message": "Do you envision transceivers continuing to live in the PeerConnection with accessors for getting/setting/adding or is this something to be moved? My mental picture is that transceivers belong to the PC but a separate \"JSEP\" module is reading and writing to that set in our current implementation.\n\nIf we implemented \"JSEP\" as a *true* in-parallel operation, we may consider copying the set of transceivers at SLD/SRD and then surfacing the results at SLD/SRD completion.\n\nThe spec introduced a \"jsepSetOfTransceivers\" when I pointed out the spec not being thread safe when Jan-Ivar insisted they be the same object. So there are different ways to implement this.\n\nAnyway I\u0027m rambling again... This is not important for this CL or the current implementation of running SLD/SRD on the signaling thread, but it may influence our mental picture of where objects belong.",
      "revId": "d21e7c0a3d846299ddc80de4ac1fd55d9bd27b44",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f982a9f8_66f74191",
        "filename": "pc/peer_connection.h",
        "patchSetId": 8
      },
      "lineNbr": 1145,
      "author": {
        "id": 5634
      },
      "writtenOn": "2020-09-28T11:34:57Z",
      "side": 1,
      "message": "transceivers_ is the big thing that I don\u0027t feel like this split settles. In my mind, the existence of transceivers is a result of SDP + Unified Plan; a SDP-less peerconnection wouldn\u0027t have them. So conceptually, they belong in sdp_offer_answer. There are also multiple things that happen with transceivers - such as the list of transceivers that might be affected by a rollback, but is not linked to the main transceiver list - that make me unhappy.\n\nBut in the current state, 9/10 of the accesses to transceivers_ is in the peer_connection.cc file. So statistically, they shouldn\u0027t move.\n\nI\u0027m leaving the issue of transceivers_ for a later refactoring.",
      "parentUuid": "2e5784bf_f7c29791",
      "revId": "d21e7c0a3d846299ddc80de4ac1fd55d9bd27b44",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7c8d21a2_5726f65a",
        "filename": "pc/peer_connection.h",
        "patchSetId": 8
      },
      "lineNbr": 1145,
      "author": {
        "id": 5142
      },
      "writtenOn": "2020-09-28T12:21:03Z",
      "side": 1,
      "message": "Sounds good.\n\nAnd it\u0027s not clear cut. You could argue that they conceptually belong to sdp_offer_answer since they are API control knobs for the m\u003d sections. But you could also argue that conceptually it\u0027s just a sender-and-receiver pair and this API could work regardless of the underlying negotiation mechanism (which just \"happens to be SDP today\"). But no matter how you slice it, they\u0027re tightly coupled down to mid and onnegotiationneeded. I think you\u0027re right in that they wouldn\u0027t exist if not for SDP.",
      "parentUuid": "f982a9f8_66f74191",
      "revId": "d21e7c0a3d846299ddc80de4ac1fd55d9bd27b44",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9b10d4fb_3ccf1dc9",
        "filename": "pc/peer_connection.h",
        "patchSetId": 8
      },
      "lineNbr": 1145,
      "author": {
        "id": 5634
      },
      "writtenOn": "2020-09-28T12:32:52Z",
      "side": 1,
      "message": "The fact that senders and receivers are paired is the one I think of as a side effect of SDP :-)",
      "parentUuid": "7c8d21a2_5726f65a",
      "revId": "d21e7c0a3d846299ddc80de4ac1fd55d9bd27b44",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    }
  ]
}