{
  "comments": [
    {
      "key": {
        "uuid": "064ddfa6_ad2511c1",
        "filename": "logging/rtc_event_log/rtc_event_log_unittest.cc",
        "patchSetId": 7
      },
      "lineNbr": 95,
      "author": {
        "id": 5147
      },
      "writtenOn": "2018-06-18T11:06:37Z",
      "side": 1,
      "message": "?",
      "revId": "dc4a38e1a0a98d03577ea9a00da9854c87d93d0a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3bd29891_986316cd",
        "filename": "logging/rtc_event_log/rtc_event_log_unittest.cc",
        "patchSetId": 7
      },
      "lineNbr": 95,
      "author": {
        "id": 5150
      },
      "writtenOn": "2018-06-21T14:13:04Z",
      "side": 1,
      "message": "As discussed offline, we want to seed the two prngs differently, but we\u0027re only receiving one seed in the fixture. To get a new seed, we need a function which maps non-zero numbers to non-zero numbers modulo a power of two. Multiplying by an odd number does this. The exact constant doesn\u0027t really matter, but it seems reasonable to have roughly half of the bits set.",
      "parentUuid": "064ddfa6_ad2511c1",
      "revId": "dc4a38e1a0a98d03577ea9a00da9854c87d93d0a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4ef52880_fbd836de",
        "filename": "logging/rtc_event_log/rtc_event_log_unittest.cc",
        "patchSetId": 7
      },
      "lineNbr": 95,
      "author": {
        "id": 5147
      },
      "writtenOn": "2018-06-21T21:19:30Z",
      "side": 1,
      "message": "I think the code\u0027s intention would be easier to divine, if you use the following:\n  prng_(std::get\u003c0\u003e(GetParam())),\n  gen_(prng_.Rand\u003cuint64_t\u003e()),\n(Note that you don\u0027t actually need to keep |seed_| around.)",
      "parentUuid": "3bd29891_986316cd",
      "revId": "dc4a38e1a0a98d03577ea9a00da9854c87d93d0a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "00005edd_42f67091",
        "filename": "logging/rtc_event_log/rtc_event_log_unittest.cc",
        "patchSetId": 7
      },
      "lineNbr": 97,
      "author": {
        "id": 5147
      },
      "writtenOn": "2018-06-18T11:06:37Z",
      "side": 1,
      "message": "Due-diligence: Clock wrap-around? Or overkill?",
      "revId": "dc4a38e1a0a98d03577ea9a00da9854c87d93d0a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a7a6907f_8d8b3a66",
        "filename": "logging/rtc_event_log/rtc_event_log_unittest.cc",
        "patchSetId": 7
      },
      "lineNbr": 97,
      "author": {
        "id": 5150
      },
      "writtenOn": "2018-06-21T14:13:04Z",
      "side": 1,
      "message": "This real clock should not wrap around, and this fake clock will not wrap around since we initialize a 64_bit int from a 32 bit random value.",
      "parentUuid": "00005edd_42f67091",
      "revId": "dc4a38e1a0a98d03577ea9a00da9854c87d93d0a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7346f559_621bee5f",
        "filename": "logging/rtc_event_log/rtc_event_log_unittest.cc",
        "patchSetId": 7
      },
      "lineNbr": 97,
      "author": {
        "id": 5147
      },
      "writtenOn": "2018-06-21T21:19:30Z",
      "side": 1,
      "message": "The real clock would wrap around at some point, I assume. And a user can theoretically set any clock well beyond the real date at the time. But I guess that would be overkill to test.",
      "parentUuid": "a7a6907f_8d8b3a66",
      "revId": "dc4a38e1a0a98d03577ea9a00da9854c87d93d0a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7949c8d2_e6d32107",
        "filename": "logging/rtc_event_log/rtc_event_log_unittest.cc",
        "patchSetId": 7
      },
      "lineNbr": 104,
      "author": {
        "id": 5147
      },
      "writtenOn": "2018-06-18T11:06:37Z",
      "side": 1,
      "message": "Sorry for bringing it up again, but this looks odd. If you want a temporary file, why not create one, and then memorize its (arbitrary) path? The Chrome codebase has CreateTemporaryFile(). I\u0027ve asked nisse@ about WebRTC equivalents, and he\u0027s pointed me here:\ntest/testsupport/fileutils.h",
      "range": {
        "startLine": 98,
        "startChar": 0,
        "endLine": 104,
        "endChar": 51
      },
      "revId": "dc4a38e1a0a98d03577ea9a00da9854c87d93d0a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b9f4688d_d4f5d53a",
        "filename": "logging/rtc_event_log/rtc_event_log_unittest.cc",
        "patchSetId": 7
      },
      "lineNbr": 104,
      "author": {
        "id": 5150
      },
      "writtenOn": "2018-06-21T14:13:04Z",
      "side": 1,
      "message": "Added TODO. The WebRTC support for temp files is not very convenient.",
      "parentUuid": "7949c8d2_e6d32107",
      "range": {
        "startLine": 98,
        "startChar": 0,
        "endLine": 104,
        "endChar": 51
      },
      "revId": "dc4a38e1a0a98d03577ea9a00da9854c87d93d0a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "79f77879_f540d947",
        "filename": "logging/rtc_event_log/rtc_event_log_unittest.cc",
        "patchSetId": 7
      },
      "lineNbr": 104,
      "author": {
        "id": 5147
      },
      "writtenOn": "2018-06-21T21:19:30Z",
      "side": 1,
      "message": "Thanks.",
      "parentUuid": "b9f4688d_d4f5d53a",
      "range": {
        "startLine": 98,
        "startChar": 0,
        "endLine": 104,
        "endChar": 51
      },
      "revId": "dc4a38e1a0a98d03577ea9a00da9854c87d93d0a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "28fb1342_da9f621d",
        "filename": "logging/rtc_event_log/rtc_event_log_unittest.cc",
        "patchSetId": 7
      },
      "lineNbr": 106,
      "author": {
        "id": 5147
      },
      "writtenOn": "2018-06-18T11:06:37Z",
      "side": 1,
      "message": "Suggest a comment, as |num_events_before_log_start|\u0027s exact meaning is not immediately apparent from the function\u0027s declaration.",
      "revId": "dc4a38e1a0a98d03577ea9a00da9854c87d93d0a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c4e8f847_0550d725",
        "filename": "logging/rtc_event_log/rtc_event_log_unittest.cc",
        "patchSetId": 7
      },
      "lineNbr": 106,
      "author": {
        "id": 5150
      },
      "writtenOn": "2018-06-21T14:13:04Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "28fb1342_da9f621d",
      "revId": "dc4a38e1a0a98d03577ea9a00da9854c87d93d0a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e616fcf4_4998127c",
        "filename": "logging/rtc_event_log/rtc_event_log_unittest.cc",
        "patchSetId": 7
      },
      "lineNbr": 112,
      "author": {
        "id": 5147
      },
      "writtenOn": "2018-06-18T11:06:37Z",
      "side": 1,
      "message": "A vector of pairs where the second element is a map. :-) And one wonders how non-trivial the key and value of that map is. :-)\n(Not actionable.)",
      "revId": "dc4a38e1a0a98d03577ea9a00da9854c87d93d0a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c8f49497_97073555",
        "filename": "logging/rtc_event_log/rtc_event_log_unittest.cc",
        "patchSetId": 7
      },
      "lineNbr": 115,
      "author": {
        "id": 5147
      },
      "writtenOn": "2018-06-18T11:06:37Z",
      "side": 1,
      "message": "nit: \"Config events\", to match comment below?",
      "revId": "dc4a38e1a0a98d03577ea9a00da9854c87d93d0a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "24156fbc_b0de8aee",
        "filename": "logging/rtc_event_log/rtc_event_log_unittest.cc",
        "patchSetId": 7
      },
      "lineNbr": 115,
      "author": {
        "id": 5150
      },
      "writtenOn": "2018-06-21T14:13:04Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c8f49497_97073555",
      "revId": "dc4a38e1a0a98d03577ea9a00da9854c87d93d0a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bc6a242a_a5cfe2f8",
        "filename": "logging/rtc_event_log/rtc_event_log_unittest.cc",
        "patchSetId": 7
      },
      "lineNbr": 127,
      "author": {
        "id": 5147
      },
      "writtenOn": "2018-06-18T11:06:37Z",
      "side": 1,
      "message": "Not the most involved definition I\u0027ve seen, but not the simplest either. :-)",
      "revId": "dc4a38e1a0a98d03577ea9a00da9854c87d93d0a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e5b0ac6e_7ca9cbed",
        "filename": "logging/rtc_event_log/rtc_event_log_unittest.cc",
        "patchSetId": 7
      },
      "lineNbr": 149,
      "author": {
        "id": 5147
      },
      "writtenOn": "2018-06-18T11:06:37Z",
      "side": 1,
      "message": "const",
      "revId": "dc4a38e1a0a98d03577ea9a00da9854c87d93d0a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f2ac62cd_e3e78ed6",
        "filename": "logging/rtc_event_log/rtc_event_log_unittest.cc",
        "patchSetId": 7
      },
      "lineNbr": 149,
      "author": {
        "id": 5150
      },
      "writtenOn": "2018-06-21T14:13:04Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e5b0ac6e_7ca9cbed",
      "revId": "dc4a38e1a0a98d03577ea9a00da9854c87d93d0a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f8b9fc9a_16d7ad6d",
        "filename": "logging/rtc_event_log/rtc_event_log_unittest.cc",
        "patchSetId": 7
      },
      "lineNbr": 149,
      "author": {
        "id": 5147
      },
      "writtenOn": "2018-06-21T21:19:30Z",
      "side": 1,
      "message": "Actually, why are we even keeping this around?",
      "parentUuid": "f2ac62cd_e3e78ed6",
      "revId": "dc4a38e1a0a98d03577ea9a00da9854c87d93d0a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dece9ddd_0ea430f5",
        "filename": "logging/rtc_event_log/rtc_event_log_unittest.cc",
        "patchSetId": 7
      },
      "lineNbr": 154,
      "author": {
        "id": 5147
      },
      "writtenOn": "2018-06-18T11:06:37Z",
      "side": 1,
      "message": "Suffix _",
      "revId": "dc4a38e1a0a98d03577ea9a00da9854c87d93d0a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2a4d4b9d_e883a926",
        "filename": "logging/rtc_event_log/rtc_event_log_unittest.cc",
        "patchSetId": 7
      },
      "lineNbr": 154,
      "author": {
        "id": 5150
      },
      "writtenOn": "2018-06-21T14:13:04Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "dece9ddd_0ea430f5",
      "revId": "dc4a38e1a0a98d03577ea9a00da9854c87d93d0a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f3b40105_9dc9ac3d",
        "filename": "logging/rtc_event_log/rtc_event_log_unittest.cc",
        "patchSetId": 7
      },
      "lineNbr": 183,
      "author": {
        "id": 5147
      },
      "writtenOn": "2018-06-18T11:59:38Z",
      "side": 1,
      "message": "If this had its own function, WriteConfigs() would be shorter.",
      "range": {
        "startLine": 174,
        "startChar": 0,
        "endLine": 183,
        "endChar": 55
      },
      "revId": "dc4a38e1a0a98d03577ea9a00da9854c87d93d0a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9bb77237_6346860c",
        "filename": "logging/rtc_event_log/rtc_event_log_unittest.cc",
        "patchSetId": 7
      },
      "lineNbr": 183,
      "author": {
        "id": 5150
      },
      "writtenOn": "2018-06-21T14:13:04Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f3b40105_9dc9ac3d",
      "range": {
        "startLine": 174,
        "startChar": 0,
        "endLine": 183,
        "endChar": 55
      },
      "revId": "dc4a38e1a0a98d03577ea9a00da9854c87d93d0a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "226b4e9a_94119e27",
        "filename": "logging/rtc_event_log/rtc_event_log_unittest.cc",
        "patchSetId": 7
      },
      "lineNbr": 185,
      "author": {
        "id": 5147
      },
      "writtenOn": "2018-06-18T11:59:38Z",
      "side": 1,
      "message": "Would it be possible to have this in its own function?",
      "revId": "dc4a38e1a0a98d03577ea9a00da9854c87d93d0a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4cf6ff1a_f09b6a60",
        "filename": "logging/rtc_event_log/rtc_event_log_unittest.cc",
        "patchSetId": 7
      },
      "lineNbr": 185,
      "author": {
        "id": 5150
      },
      "writtenOn": "2018-06-21T14:13:04Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "226b4e9a_94119e27",
      "revId": "dc4a38e1a0a98d03577ea9a00da9854c87d93d0a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7ce9d4f6_a817e5c6",
        "filename": "logging/rtc_event_log/rtc_event_log_unittest.cc",
        "patchSetId": 7
      },
      "lineNbr": 189,
      "author": {
        "id": 5147
      },
      "writtenOn": "2018-06-18T11:59:38Z",
      "side": 1,
      "message": "Sorry, but why do we sometimes want all extensions, but sometimes not?",
      "revId": "dc4a38e1a0a98d03577ea9a00da9854c87d93d0a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8a2c4475_1fe9f3cd",
        "filename": "logging/rtc_event_log/rtc_event_log_unittest.cc",
        "patchSetId": 7
      },
      "lineNbr": 189,
      "author": {
        "id": 5150
      },
      "writtenOn": "2018-06-21T14:13:04Z",
      "side": 1,
      "message": "The number of configs is smaller than the number of packets, and the config determines what extensions are used in each packet. By having at least one stream with all extensions enabled, I ensure (statistically) that all extensions will be tested.",
      "parentUuid": "7ce9d4f6_a817e5c6",
      "revId": "dc4a38e1a0a98d03577ea9a00da9854c87d93d0a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "90c7a20d_3a5df475",
        "filename": "logging/rtc_event_log/rtc_event_log_unittest.cc",
        "patchSetId": 7
      },
      "lineNbr": 189,
      "author": {
        "id": 5147
      },
      "writtenOn": "2018-06-21T21:19:30Z",
      "side": 1,
      "message": "1. Thanks for explaining.\n2. Do we test for cases where the received packets\u0027 extensions do not actually match the config? Or would that be rejected before logged?\n3. Suggest: comment.",
      "parentUuid": "8a2c4475_1fe9f3cd",
      "revId": "dc4a38e1a0a98d03577ea9a00da9854c87d93d0a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b8940deb_4258db19",
        "filename": "logging/rtc_event_log/rtc_event_log_unittest.cc",
        "patchSetId": 7
      },
      "lineNbr": 192,
      "author": {
        "id": 5147
      },
      "writtenOn": "2018-06-18T11:59:38Z",
      "side": 1,
      "message": "nit: If video_recv_streams \u003d\u003d 1, the clock will not be advanced between NewVideoReceiveStreamConfig and NewVideoSendStreamConfig. I see that that Rand(20) could still mean that the timestamp does not change, due to AdvanceTimeMicros(0), but this case\u0027s status as OK behavior of the test is not immediately apparent to a reader. I think it would generally be better to advance the clock *after* every event generation.",
      "revId": "dc4a38e1a0a98d03577ea9a00da9854c87d93d0a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f553c388_d06fc2c1",
        "filename": "logging/rtc_event_log/rtc_event_log_unittest.cc",
        "patchSetId": 7
      },
      "lineNbr": 192,
      "author": {
        "id": 5150
      },
      "writtenOn": "2018-06-21T14:13:04Z",
      "side": 1,
      "message": "I added an AdvanceTimeMicros() above.",
      "parentUuid": "b8940deb_4258db19",
      "revId": "dc4a38e1a0a98d03577ea9a00da9854c87d93d0a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "63b41314_8c30032d",
        "filename": "logging/rtc_event_log/rtc_event_log_unittest.cc",
        "patchSetId": 7
      },
      "lineNbr": 196,
      "author": {
        "id": 5147
      },
      "writtenOn": "2018-06-18T11:59:38Z",
      "side": 1,
      "message": "Maybe CHECK that |count.video_recv_streams| isn\u0027t excessive, leading the test to run into too many collisions before the loop can be escaped?",
      "revId": "dc4a38e1a0a98d03577ea9a00da9854c87d93d0a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ff01b31f_0bd56efb",
        "filename": "logging/rtc_event_log/rtc_event_log_unittest.cc",
        "patchSetId": 7
      },
      "lineNbr": 196,
      "author": {
        "id": 5150
      },
      "writtenOn": "2018-06-21T14:13:04Z",
      "side": 1,
      "message": "You\u0027d have to run with more than 2 billion streams before this becomes an issue. There would most likely be other problems before that point.",
      "parentUuid": "63b41314_8c30032d",
      "revId": "dc4a38e1a0a98d03577ea9a00da9854c87d93d0a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0abfe6d5_146bff1b",
        "filename": "logging/rtc_event_log/rtc_event_log_unittest.cc",
        "patchSetId": 7
      },
      "lineNbr": 196,
      "author": {
        "id": 5147
      },
      "writtenOn": "2018-06-21T21:19:30Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "ff01b31f_0bd56efb",
      "revId": "dc4a38e1a0a98d03577ea9a00da9854c87d93d0a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3168752c_3f45a5a4",
        "filename": "logging/rtc_event_log/rtc_event_log_unittest.cc",
        "patchSetId": 7
      },
      "lineNbr": 216,
      "author": {
        "id": 5147
      },
      "writtenOn": "2018-06-18T11:59:38Z",
      "side": 1,
      "message": "Would it be possible to have this in its own function?",
      "revId": "dc4a38e1a0a98d03577ea9a00da9854c87d93d0a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "33b28685_12f1c50f",
        "filename": "logging/rtc_event_log/rtc_event_log_unittest.cc",
        "patchSetId": 7
      },
      "lineNbr": 216,
      "author": {
        "id": 5150
      },
      "writtenOn": "2018-06-21T14:13:04Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3168752c_3f45a5a4",
      "revId": "dc4a38e1a0a98d03577ea9a00da9854c87d93d0a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7b65415e_89e8ebdb",
        "filename": "logging/rtc_event_log/rtc_event_log_unittest.cc",
        "patchSetId": 7
      },
      "lineNbr": 263,
      "author": {
        "id": 5147
      },
      "writtenOn": "2018-06-18T11:59:38Z",
      "side": 1,
      "message": "IMHO, it would be more readable to have a helper that can be called |num_events_before_start| times, then the start event would be produced, then the helper would be called |remaining_events_at_start| more times.",
      "revId": "dc4a38e1a0a98d03577ea9a00da9854c87d93d0a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7afa8ab6_326292ac",
        "filename": "logging/rtc_event_log/rtc_event_log_unittest.cc",
        "patchSetId": 7
      },
      "lineNbr": 263,
      "author": {
        "id": 5147
      },
      "writtenOn": "2018-06-21T21:19:30Z",
      "side": 1,
      "message": "Ping (can ignore if you don\u0027t think it\u0027s worth the effort; I just want to make sure it wasn\u0027t missed).",
      "parentUuid": "7b65415e_89e8ebdb",
      "revId": "dc4a38e1a0a98d03577ea9a00da9854c87d93d0a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0fd861df_80b4ff1f",
        "filename": "logging/rtc_event_log/rtc_event_log_unittest.cc",
        "patchSetId": 7
      },
      "lineNbr": 268,
      "author": {
        "id": 5147
      },
      "writtenOn": "2018-06-18T11:59:38Z",
      "side": 1,
      "message": "I think it would be clearer to advance the clock after each event generation, where each iteration yields exactly one event.",
      "revId": "dc4a38e1a0a98d03577ea9a00da9854c87d93d0a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b82ec1c4_9a05de11",
        "filename": "logging/rtc_event_log/rtc_event_log_unittest.cc",
        "patchSetId": 7
      },
      "lineNbr": 268,
      "author": {
        "id": 5150
      },
      "writtenOn": "2018-06-21T14:13:04Z",
      "side": 1,
      "message": "If we advance at the end of the loop, then we can\u0027t \"continue;\"\n\nChanged to a single Advance before the different cases instead.",
      "parentUuid": "0fd861df_80b4ff1f",
      "revId": "dc4a38e1a0a98d03577ea9a00da9854c87d93d0a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "45537829_b50e797c",
        "filename": "logging/rtc_event_log/rtc_event_log_unittest.cc",
        "patchSetId": 7
      },
      "lineNbr": 268,
      "author": {
        "id": 5147
      },
      "writtenOn": "2018-06-21T21:19:30Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "b82ec1c4_9a05de11",
      "revId": "dc4a38e1a0a98d03577ea9a00da9854c87d93d0a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "19faefd1_f3735a7b",
        "filename": "logging/rtc_event_log/rtc_event_log_unittest.cc",
        "patchSetId": 7
      },
      "lineNbr": 273,
      "author": {
        "id": 5147
      },
      "writtenOn": "2018-06-18T11:59:38Z",
      "side": 1,
      "message": "Just a thought, might be overkill:\nThere\u0027s a clear structure to each if-else-case here. I wonder if it would improve the code to have a loop run over a vector of pairs, where one element is a pointer to count.current_type, and the other element is a lambda that generates gen_.CurrentType().\nIt might be too \"clever\" though. Maybe this code is more readable and maintainable?",
      "revId": "dc4a38e1a0a98d03577ea9a00da9854c87d93d0a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b82067cf_a6d9035a",
        "filename": "logging/rtc_event_log/rtc_event_log_unittest.cc",
        "patchSetId": 7
      },
      "lineNbr": 273,
      "author": {
        "id": 5150
      },
      "writtenOn": "2018-06-21T14:13:04Z",
      "side": 1,
      "message": "I thought about it, but you get extra type casts and a somewhat complicated vector with pointers to event lists, pointers to event counts and lambdas that are different for each type. It didn\u0027t seem much simpler to me.",
      "parentUuid": "19faefd1_f3735a7b",
      "revId": "dc4a38e1a0a98d03577ea9a00da9854c87d93d0a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7b958f3a_35362e78",
        "filename": "logging/rtc_event_log/rtc_event_log_unittest.cc",
        "patchSetId": 7
      },
      "lineNbr": 273,
      "author": {
        "id": 5147
      },
      "writtenOn": "2018-06-21T21:19:30Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "b82067cf_a6d9035a",
      "revId": "dc4a38e1a0a98d03577ea9a00da9854c87d93d0a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1214f8c3_218d4974",
        "filename": "logging/rtc_event_log/rtc_event_log_unittest.cc",
        "patchSetId": 7
      },
      "lineNbr": 426,
      "author": {
        "id": 5147
      },
      "writtenOn": "2018-06-18T11:59:38Z",
      "side": 1,
      "message": "I think we should also have unit tests for defective cases, where the log somehow receives defective timestamps that appear to run backward, and make sure nothing crashes then. It might be that testing *writing* such a log is unnecessary, but maybe we should be careful when *reading* it?",
      "revId": "dc4a38e1a0a98d03577ea9a00da9854c87d93d0a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "57a01061_768b48a5",
        "filename": "logging/rtc_event_log/rtc_event_log_unittest.cc",
        "patchSetId": 7
      },
      "lineNbr": 426,
      "author": {
        "id": 5150
      },
      "writtenOn": "2018-06-21T14:13:04Z",
      "side": 1,
      "message": "Yeah, it could possibly cause problems in parsing. Not clear what to do in this case. Maybe sort them by timestamp when parsing? Added TODO.",
      "parentUuid": "1214f8c3_218d4974",
      "revId": "dc4a38e1a0a98d03577ea9a00da9854c87d93d0a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "41aa65d8_ced31b25",
        "filename": "logging/rtc_event_log/rtc_event_log_unittest.cc",
        "patchSetId": 7
      },
      "lineNbr": 426,
      "author": {
        "id": 5147
      },
      "writtenOn": "2018-06-21T21:19:30Z",
      "side": 1,
      "message": "I think that, eventually (TODOs are perfectly OK), we should ensure:\n* When attempting to Log() an impossible sequence of events, the logger itself must not crash.\n* If possible, it would be good to abort logging altogether in such a case, as the resulting log would either be unparseable or misleading. (I can think of arguments against this; it\u0027s debatable.)\n* If the parser is processing a file which it recognizes to be defective in some way (time runs backwards, etc.), it should abort, rather than produce a misleading result.\n\nYour thoughts?",
      "parentUuid": "57a01061_768b48a5",
      "revId": "dc4a38e1a0a98d03577ea9a00da9854c87d93d0a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4cdc986b_b7df9ea7",
        "filename": "logging/rtc_event_log/rtc_event_log_unittest.cc",
        "patchSetId": 7
      },
      "lineNbr": 428,
      "author": {
        "id": 5147
      },
      "writtenOn": "2018-06-18T11:59:38Z",
      "side": 1,
      "message": "1. Is this sanity over the test itself? If so, make that clearer by using ASSERT_EQ instead?\n2. Why over total_nonconfig_events, and not over total_events?",
      "revId": "dc4a38e1a0a98d03577ea9a00da9854c87d93d0a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1f32581c_44b47124",
        "filename": "logging/rtc_event_log/rtc_event_log_unittest.cc",
        "patchSetId": 7
      },
      "lineNbr": 428,
      "author": {
        "id": 5150
      },
      "writtenOn": "2018-06-21T14:13:04Z",
      "side": 1,
      "message": "1. Done.\n2. The config events are written separately, are we\u0027re not updating the count.x for those events.",
      "parentUuid": "4cdc986b_b7df9ea7",
      "revId": "dc4a38e1a0a98d03577ea9a00da9854c87d93d0a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d2605f4f_eeacce3c",
        "filename": "logging/rtc_event_log/rtc_event_log_unittest.cc",
        "patchSetId": 7
      },
      "lineNbr": 428,
      "author": {
        "id": 5147
      },
      "writtenOn": "2018-06-21T21:19:30Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "1f32581c_44b47124",
      "revId": "dc4a38e1a0a98d03577ea9a00da9854c87d93d0a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e8fac691_076fee3d",
        "filename": "logging/rtc_event_log/rtc_event_log_unittest.cc",
        "patchSetId": 7
      },
      "lineNbr": 476,
      "author": {
        "id": 5147
      },
      "writtenOn": "2018-06-18T11:59:38Z",
      "side": 1,
      "message": "Just a thought:\n\n1. ana_configs_list_, bwe_delay_list_, etc., are containers of elements that share a common ancestor type.\n2. parsed_audio_network_adaptation_events, parsed_bwe_delay_updates, etc., are containers of elements that do not share a common ancestor, but we COULD make them share an ancestor. That ancestor can have a single virtual function - operator\u003d\u003d(const RtcEvent\u0026 other).\n\nIt would then be possible to change all of these separate loops, into a nested loop that would use EXPECT_EQ instead of VerifyX.\n\nMight be more work than its worth. For your consideration.",
      "range": {
        "startLine": 468,
        "startChar": 0,
        "endLine": 476,
        "endChar": 3
      },
      "revId": "dc4a38e1a0a98d03577ea9a00da9854c87d93d0a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9f28208a_4fbd08d4",
        "filename": "logging/rtc_event_log/rtc_event_log_unittest.cc",
        "patchSetId": 7
      },
      "lineNbr": 476,
      "author": {
        "id": 5150
      },
      "writtenOn": "2018-06-21T14:13:04Z",
      "side": 1,
      "message": "Since we want the parsed events to be efficient when processing large logs, I\u0027d like to avoid  virtual function calls. Inheritance would also break the assumption that the parsed events are standard layout type.",
      "parentUuid": "e8fac691_076fee3d",
      "range": {
        "startLine": 468,
        "startChar": 0,
        "endLine": 476,
        "endChar": 3
      },
      "revId": "dc4a38e1a0a98d03577ea9a00da9854c87d93d0a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1884fb84_aca76b58",
        "filename": "logging/rtc_event_log/rtc_event_log_unittest.cc",
        "patchSetId": 7
      },
      "lineNbr": 476,
      "author": {
        "id": 5147
      },
      "writtenOn": "2018-06-21T21:19:30Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "9f28208a_4fbd08d4",
      "range": {
        "startLine": 468,
        "startChar": 0,
        "endLine": 476,
        "endChar": 3
      },
      "revId": "dc4a38e1a0a98d03577ea9a00da9854c87d93d0a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "379baa0e_26df7281",
        "filename": "logging/rtc_event_log/rtc_event_log_unittest.cc",
        "patchSetId": 7
      },
      "lineNbr": 626,
      "author": {
        "id": 5147
      },
      "writtenOn": "2018-06-18T11:06:37Z",
      "side": 1,
      "message": "The main difference between this test and the following line, is the second argument to WriteLog(). However, this is hidden away by many randomly assigned but hard-coded values to many, many fields. I would suggest populating EventCounts from a helper function instead (might be also good to do some randomization there). That way, the second argument to WriteLog will be the only difference between the tests, and a reader would see it immediately.",
      "revId": "dc4a38e1a0a98d03577ea9a00da9854c87d93d0a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "96c4ee8d_51b8145f",
        "filename": "logging/rtc_event_log/rtc_event_log_unittest.cc",
        "patchSetId": 7
      },
      "lineNbr": 626,
      "author": {
        "id": 5150
      },
      "writtenOn": "2018-06-21T14:13:04Z",
      "side": 1,
      "message": "All of the constants are different too, so we wouldn\u0027t be able to use the same helper function.",
      "parentUuid": "379baa0e_26df7281",
      "revId": "dc4a38e1a0a98d03577ea9a00da9854c87d93d0a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "db402a8d_7e76018e",
        "filename": "logging/rtc_event_log/rtc_event_log_unittest.cc",
        "patchSetId": 7
      },
      "lineNbr": 626,
      "author": {
        "id": 5147
      },
      "writtenOn": "2018-06-21T21:19:30Z",
      "side": 1,
      "message": "Aren\u0027t the constants arbitrary? The gap between arbitrary and random is not wide.",
      "parentUuid": "96c4ee8d_51b8145f",
      "revId": "dc4a38e1a0a98d03577ea9a00da9854c87d93d0a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4aeac4c5_a2ac8b64",
        "filename": "logging/rtc_event_log/rtc_event_log_unittest.cc",
        "patchSetId": 7
      },
      "lineNbr": 654,
      "author": {
        "id": 5147
      },
      "writtenOn": "2018-06-18T11:06:37Z",
      "side": 1,
      "message": "As per offline discussion, I would suggest a TODO to make this RtcEventLogImplTest, then moving RtcEventLogImpl\u0027s definition to its own header file, so that it might be test directly, since the buffer size is being tested here.",
      "revId": "dc4a38e1a0a98d03577ea9a00da9854c87d93d0a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "49479bf5_cfaa65a8",
        "filename": "logging/rtc_event_log/rtc_event_log_unittest.cc",
        "patchSetId": 7
      },
      "lineNbr": 654,
      "author": {
        "id": 5150
      },
      "writtenOn": "2018-06-21T14:13:04Z",
      "side": 1,
      "message": "Added TODO.",
      "parentUuid": "4aeac4c5_a2ac8b64",
      "revId": "dc4a38e1a0a98d03577ea9a00da9854c87d93d0a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "56f7a452_a7db647b",
        "filename": "logging/rtc_event_log/rtc_event_log_unittest.cc",
        "patchSetId": 7
      },
      "lineNbr": 689,
      "author": {
        "id": 5147
      },
      "writtenOn": "2018-06-18T11:06:37Z",
      "side": 1,
      "message": "Don\u0027t you want to advance this?",
      "revId": "dc4a38e1a0a98d03577ea9a00da9854c87d93d0a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cfc06910_25823e03",
        "filename": "logging/rtc_event_log/rtc_event_log_unittest.cc",
        "patchSetId": 7
      },
      "lineNbr": 689,
      "author": {
        "id": 5150
      },
      "writtenOn": "2018-06-21T14:13:04Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "56f7a452_a7db647b",
      "revId": "dc4a38e1a0a98d03577ea9a00da9854c87d93d0a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a08b453b_c919ebc2",
        "filename": "logging/rtc_event_log/rtc_event_log_unittest.cc",
        "patchSetId": 7
      },
      "lineNbr": 710,
      "author": {
        "id": 5147
      },
      "writtenOn": "2018-06-18T11:59:38Z",
      "side": 1,
      "message": "You\u0027ve used ASSERT for one, and EXPECT for the other. Is that intentional?",
      "revId": "dc4a38e1a0a98d03577ea9a00da9854c87d93d0a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ab662eb9_d24ce6a2",
        "filename": "logging/rtc_event_log/rtc_event_log_unittest.cc",
        "patchSetId": 7
      },
      "lineNbr": 710,
      "author": {
        "id": 5150
      },
      "writtenOn": "2018-06-21T14:13:04Z",
      "side": 1,
      "message": "I\u0027m generally asserting if continuing past the check would index out of bounds or crash.",
      "parentUuid": "a08b453b_c919ebc2",
      "revId": "dc4a38e1a0a98d03577ea9a00da9854c87d93d0a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "55dc3107_1cbb8531",
        "filename": "logging/rtc_event_log/rtc_event_log_unittest.cc",
        "patchSetId": 7
      },
      "lineNbr": 710,
      "author": {
        "id": 5147
      },
      "writtenOn": "2018-06-21T21:19:30Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "ab662eb9_d24ce6a2",
      "revId": "dc4a38e1a0a98d03577ea9a00da9854c87d93d0a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1941afb6_8b44776f",
        "filename": "logging/rtc_event_log/rtc_event_log_unittest_helper.cc",
        "patchSetId": 7
      },
      "lineNbr": 57,
      "author": {
        "id": 5147
      },
      "writtenOn": "2018-06-18T11:06:37Z",
      "side": 1,
      "message": "I see, avoiding (size() - 1) in case (size() \u003d\u003d 0). I should adopt this.",
      "revId": "dc4a38e1a0a98d03577ea9a00da9854c87d93d0a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "670e1dad_b954f7bb",
        "filename": "logging/rtc_event_log/rtc_event_log_unittest_helper.cc",
        "patchSetId": 7
      },
      "lineNbr": 71,
      "author": {
        "id": 5147
      },
      "writtenOn": "2018-06-18T11:06:37Z",
      "side": 1,
      "message": "I\u0027m assuming this is here for consistency\u0027s sake.",
      "revId": "dc4a38e1a0a98d03577ea9a00da9854c87d93d0a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7f3ce93c_20b6d0d1",
        "filename": "logging/rtc_event_log/rtc_event_log_unittest_helper.cc",
        "patchSetId": 7
      },
      "lineNbr": 192,
      "author": {
        "id": 5147
      },
      "writtenOn": "2018-06-18T11:06:37Z",
      "side": 1,
      "message": "I suggest supporting at least two types right off the bat. I suggest letting this helper call one of X (where X\u003e\u003d2) different sub-helpers.\n\nRationale:\n1. Currently, whatever way you have to encode the type, is only ever encoding one thing (in tests). Your own principle was to always check with at least two values.\n2. Laying down an easy path to extend, makes it more likely that it will one day be done.",
      "revId": "dc4a38e1a0a98d03577ea9a00da9854c87d93d0a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "00250e99_33529009",
        "filename": "logging/rtc_event_log/rtc_event_log_unittest_helper.cc",
        "patchSetId": 7
      },
      "lineNbr": 192,
      "author": {
        "id": 5150
      },
      "writtenOn": "2018-06-21T14:13:04Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7f3ce93c_20b6d0d1",
      "revId": "dc4a38e1a0a98d03577ea9a00da9854c87d93d0a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a70aa847_343931c5",
        "filename": "logging/rtc_event_log/rtc_event_log_unittest_helper.cc",
        "patchSetId": 7
      },
      "lineNbr": 195,
      "author": {
        "id": 5147
      },
      "writtenOn": "2018-06-18T11:06:37Z",
      "side": 1,
      "message": "I would prefer prng.Rand\u003cuint8_t\u003e().",
      "revId": "dc4a38e1a0a98d03577ea9a00da9854c87d93d0a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b33cc494_90c8762b",
        "filename": "logging/rtc_event_log/rtc_event_log_unittest_helper.cc",
        "patchSetId": 7
      },
      "lineNbr": 195,
      "author": {
        "id": 5150
      },
      "writtenOn": "2018-06-21T14:13:04Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a70aa847_343931c5",
      "revId": "dc4a38e1a0a98d03577ea9a00da9854c87d93d0a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e9d26f02_f89aa076",
        "filename": "logging/rtc_event_log/rtc_event_log_unittest_helper.cc",
        "patchSetId": 7
      },
      "lineNbr": 209,
      "author": {
        "id": 5147
      },
      "writtenOn": "2018-06-18T11:06:37Z",
      "side": 1,
      "message": "Duplicate code (over generating a SenderReport) can be removed to helper.",
      "revId": "dc4a38e1a0a98d03577ea9a00da9854c87d93d0a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b862fff7_bb6890ca",
        "filename": "logging/rtc_event_log/rtc_event_log_unittest_helper.cc",
        "patchSetId": 7
      },
      "lineNbr": 209,
      "author": {
        "id": 5150
      },
      "writtenOn": "2018-06-21T14:13:04Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e9d26f02_f89aa076",
      "revId": "dc4a38e1a0a98d03577ea9a00da9854c87d93d0a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b501e801_180c0407",
        "filename": "logging/rtc_event_log/rtc_event_log_unittest_helper.cc",
        "patchSetId": 7
      },
      "lineNbr": 228,
      "author": {
        "id": 5147
      },
      "writtenOn": "2018-06-18T11:06:37Z",
      "side": 1,
      "message": "Please note comment elsewhere about accepting bool for incoming/outgoing and returning the packet.",
      "range": {
        "startLine": 224,
        "startChar": 0,
        "endLine": 228,
        "endChar": 28
      },
      "revId": "dc4a38e1a0a98d03577ea9a00da9854c87d93d0a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d03e06a8_ae97fa41",
        "filename": "logging/rtc_event_log/rtc_event_log_unittest_helper.cc",
        "patchSetId": 7
      },
      "lineNbr": 228,
      "author": {
        "id": 5150
      },
      "writtenOn": "2018-06-21T14:13:04Z",
      "side": 1,
      "message": "Incoming and outgoing packets are completely different event types, so I\u0027m deliberately trying to move away from patterns which treat them the same except for a bool. Instead, this function breaks out RTP part which is likely to stay shared between them.",
      "parentUuid": "b501e801_180c0407",
      "range": {
        "startLine": 224,
        "startChar": 0,
        "endLine": 228,
        "endChar": 28
      },
      "revId": "dc4a38e1a0a98d03577ea9a00da9854c87d93d0a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1bccd0ce_7f5ca549",
        "filename": "logging/rtc_event_log/rtc_event_log_unittest_helper.cc",
        "patchSetId": 7
      },
      "lineNbr": 228,
      "author": {
        "id": 5147
      },
      "writtenOn": "2018-06-21T21:19:30Z",
      "side": 1,
      "message": "RtcEventRtpPacketOutgoing and RtcEventRtpPacketIncoming are indeed different, and do not share a type. RtpPacketToSend and RtpPacketReceived share a common type. But I guess what you\u0027re saying is that you\u0027d have to cast RtpPacket to either RtpPacketReceived or RtpPacketToSend before constructing the event, which is something I guess I had forgotten. So yeah, forget my suggestion.",
      "parentUuid": "d03e06a8_ae97fa41",
      "range": {
        "startLine": 224,
        "startChar": 0,
        "endLine": 228,
        "endChar": 28
      },
      "revId": "dc4a38e1a0a98d03577ea9a00da9854c87d93d0a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "48958546_3c41db9b",
        "filename": "logging/rtc_event_log/rtc_event_log_unittest_helper.cc",
        "patchSetId": 7
      },
      "lineNbr": 233,
      "author": {
        "id": 5147
      },
      "writtenOn": "2018-06-18T11:06:37Z",
      "side": 1,
      "message": "I wonder if it might be a problem that we normally end up getting non-consecutive sequence numbers when randomizing packet sequences? Similarly for repeating the same exact sequence number? Is there special behavior in the UUT (unit under test) that does not get tested?",
      "revId": "dc4a38e1a0a98d03577ea9a00da9854c87d93d0a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e5904f21_85422c01",
        "filename": "logging/rtc_event_log/rtc_event_log_unittest_helper.cc",
        "patchSetId": 7
      },
      "lineNbr": 233,
      "author": {
        "id": 5150
      },
      "writtenOn": "2018-06-21T14:13:04Z",
      "side": 1,
      "message": "Nothing in the current code relies on consecutive sequence numbers.",
      "parentUuid": "48958546_3c41db9b",
      "revId": "dc4a38e1a0a98d03577ea9a00da9854c87d93d0a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fb1200ed_95d08057",
        "filename": "logging/rtc_event_log/rtc_event_log_unittest_helper.cc",
        "patchSetId": 7
      },
      "lineNbr": 233,
      "author": {
        "id": 5147
      },
      "writtenOn": "2018-06-21T21:19:30Z",
      "side": 1,
      "message": "You\u0027re doing delta-encoding, right? A delta of 0 and a delta of 1 are special cases, and deserve to be tested. The probability you\u0027re testing those deltas when only Rand\u003cuint16_t\u003e() is ever used, is not sufficiently high, IMHO. I would have added a TODO. Just my opinion, of course.",
      "parentUuid": "e5904f21_85422c01",
      "revId": "dc4a38e1a0a98d03577ea9a00da9854c87d93d0a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "31326b8c_0a5d6fd0",
        "filename": "logging/rtc_event_log/rtc_event_log_unittest_helper.cc",
        "patchSetId": 7
      },
      "lineNbr": 237,
      "author": {
        "id": 5147
      },
      "writtenOn": "2018-06-18T11:06:37Z",
      "side": 1,
      "message": "By moving the decision about the size into the function (see comments elsewhere), we can maker sure that the size is randomized according to the selected |csrcs_count|, rather than according to |kMaxCsrcs|.",
      "revId": "dc4a38e1a0a98d03577ea9a00da9854c87d93d0a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b55060c9_b6332ca5",
        "filename": "logging/rtc_event_log/rtc_event_log_unittest_helper.cc",
        "patchSetId": 7
      },
      "lineNbr": 237,
      "author": {
        "id": 5150
      },
      "writtenOn": "2018-06-21T14:13:04Z",
      "side": 1,
      "message": "I don\u0027t see why this is a benefit. We don\u0027t know the exact size of the headers anyway so it is still going to be an upper bound.\n\nPlease note that RtpPacketToSend expects the packet size in the constructor, we can\u0027t write the headers until we have constructed the packet, and we can\u0027t (easily) find the size of the headers before we\u0027ve written them.",
      "parentUuid": "31326b8c_0a5d6fd0",
      "revId": "dc4a38e1a0a98d03577ea9a00da9854c87d93d0a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2583e61c_abcf7d02",
        "filename": "logging/rtc_event_log/rtc_event_log_unittest_helper.cc",
        "patchSetId": 7
      },
      "lineNbr": 237,
      "author": {
        "id": 5147
      },
      "writtenOn": "2018-06-21T21:19:30Z",
      "side": 1,
      "message": "I wanted the code to uniformly select a size over what\u0027s left for the payload, after the CSRCs have taken their cut. As it is, you\u0027re slightly biased upwards, when kMaxCsrcs ends up not being the number of used CSRCs. But you\u0027re right, this is not at all important.",
      "parentUuid": "b55060c9_b6332ca5",
      "revId": "dc4a38e1a0a98d03577ea9a00da9854c87d93d0a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "66e4da64_54df6caf",
        "filename": "logging/rtc_event_log/rtc_event_log_unittest_helper.cc",
        "patchSetId": 7
      },
      "lineNbr": 239,
      "author": {
        "id": 5147
      },
      "writtenOn": "2018-06-18T11:06:37Z",
      "side": 1,
      "message": "nit: Minyue has once told me to prefer size_t for loop indices. I don\u0027t see it being used inside the loop, so there\u0027s probably no reason to not do that here?",
      "revId": "dc4a38e1a0a98d03577ea9a00da9854c87d93d0a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "eca0f337_fba5b5c0",
        "filename": "logging/rtc_event_log/rtc_event_log_unittest_helper.cc",
        "patchSetId": 7
      },
      "lineNbr": 239,
      "author": {
        "id": 5150
      },
      "writtenOn": "2018-06-21T14:13:04Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "66e4da64_54df6caf",
      "revId": "dc4a38e1a0a98d03577ea9a00da9854c87d93d0a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "70710a1a_d6eba790",
        "filename": "logging/rtc_event_log/rtc_event_log_unittest_helper.cc",
        "patchSetId": 7
      },
      "lineNbr": 258,
      "author": {
        "id": 5147
      },
      "writtenOn": "2018-06-18T11:06:37Z",
      "side": 1,
      "message": "nit: AllocatePayload()\u0027s documentation says it can return nullptr, so good practice would be to at least DCHECK(payload), I think.",
      "revId": "dc4a38e1a0a98d03577ea9a00da9854c87d93d0a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7b0c4d46_1dc30654",
        "filename": "logging/rtc_event_log/rtc_event_log_unittest_helper.cc",
        "patchSetId": 7
      },
      "lineNbr": 258,
      "author": {
        "id": 5150
      },
      "writtenOn": "2018-06-21T14:13:04Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "70710a1a_d6eba790",
      "revId": "dc4a38e1a0a98d03577ea9a00da9854c87d93d0a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e58c20db_cf071530",
        "filename": "logging/rtc_event_log/rtc_event_log_unittest_helper.cc",
        "patchSetId": 7
      },
      "lineNbr": 267,
      "author": {
        "id": 5147
      },
      "writtenOn": "2018-06-18T11:06:37Z",
      "side": 1,
      "message": "You\u0027re defining this here, then again inside RandomizeRtpPacket(), while implicitly relying on the value being the same. The easiest solution would be to make this a global (in an anonymous namespace, of course). A better solution might be to only define it where it\u0027s necessary? Does RandomizeRtpPacket() need to get the size from outside, or could it randomize that too? (It might need a bool for incoming/outgoing, of course, to generate the correct subclass of RtpPacket. But it would then be able to return a value, rather than right into it, which I would consider a small plus.)",
      "revId": "dc4a38e1a0a98d03577ea9a00da9854c87d93d0a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "631ba2f8_e9c96425",
        "filename": "logging/rtc_event_log/rtc_event_log_unittest_helper.cc",
        "patchSetId": 7
      },
      "lineNbr": 267,
      "author": {
        "id": 5150
      },
      "writtenOn": "2018-06-21T14:13:04Z",
      "side": 1,
      "message": "Moved it to anonymous namespace. See discussion in previous comment.",
      "parentUuid": "e58c20db_cf071530",
      "revId": "dc4a38e1a0a98d03577ea9a00da9854c87d93d0a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1a02d57f_097b3709",
        "filename": "logging/rtc_event_log/rtc_event_log_unittest_helper.cc",
        "patchSetId": 7
      },
      "lineNbr": 300,
      "author": {
        "id": 5147
      },
      "writtenOn": "2018-06-18T11:06:37Z",
      "side": 1,
      "message": "1. Could we use RtpExtension::kMaxId here?\n2. Is RtpHeaderExtensionMap::kMaxId designed to be the exact same value? If so, perhaps one should define itself in terms of the other? Or eliminate one altogether?",
      "revId": "dc4a38e1a0a98d03577ea9a00da9854c87d93d0a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c9c68e27_43ae6012",
        "filename": "logging/rtc_event_log/rtc_event_log_unittest_helper.cc",
        "patchSetId": 7
      },
      "lineNbr": 300,
      "author": {
        "id": 5147
      },
      "writtenOn": "2018-06-21T21:19:30Z",
      "side": 1,
      "message": "Ping (same caveat as other ping).",
      "parentUuid": "1a02d57f_097b3709",
      "revId": "dc4a38e1a0a98d03577ea9a00da9854c87d93d0a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2d2dca79_5e65800e",
        "filename": "logging/rtc_event_log/rtc_event_log_unittest_helper.cc",
        "patchSetId": 7
      },
      "lineNbr": 332,
      "author": {
        "id": 5147
      },
      "writtenOn": "2018-06-18T11:06:37Z",
      "side": 1,
      "message": "size_t?",
      "revId": "dc4a38e1a0a98d03577ea9a00da9854c87d93d0a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e0e8ab33_1eceab04",
        "filename": "logging/rtc_event_log/rtc_event_log_unittest_helper.cc",
        "patchSetId": 7
      },
      "lineNbr": 332,
      "author": {
        "id": 5150
      },
      "writtenOn": "2018-06-21T14:13:04Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "2d2dca79_5e65800e",
      "revId": "dc4a38e1a0a98d03577ea9a00da9854c87d93d0a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c3abd1f8_2841825d",
        "filename": "logging/rtc_event_log/rtc_event_log_unittest_helper.cc",
        "patchSetId": 7
      },
      "lineNbr": 350,
      "author": {
        "id": 5147
      },
      "writtenOn": "2018-06-18T11:06:37Z",
      "side": 1,
      "message": "nit: size_t?",
      "revId": "dc4a38e1a0a98d03577ea9a00da9854c87d93d0a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e73f7d6a_749e9032",
        "filename": "logging/rtc_event_log/rtc_event_log_unittest_helper.cc",
        "patchSetId": 7
      },
      "lineNbr": 350,
      "author": {
        "id": 5150
      },
      "writtenOn": "2018-06-21T14:13:04Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c3abd1f8_2841825d",
      "revId": "dc4a38e1a0a98d03577ea9a00da9854c87d93d0a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2444ef78_bc24a899",
        "filename": "logging/rtc_event_log/rtc_event_log_unittest_helper.cc",
        "patchSetId": 7
      },
      "lineNbr": 376,
      "author": {
        "id": 5147
      },
      "writtenOn": "2018-06-18T11:06:37Z",
      "side": 1,
      "message": "nit: size_t",
      "revId": "dc4a38e1a0a98d03577ea9a00da9854c87d93d0a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d321c938_040f8407",
        "filename": "logging/rtc_event_log/rtc_event_log_unittest_helper.cc",
        "patchSetId": 7
      },
      "lineNbr": 376,
      "author": {
        "id": 5150
      },
      "writtenOn": "2018-06-21T14:13:04Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "2444ef78_bc24a899",
      "revId": "dc4a38e1a0a98d03577ea9a00da9854c87d93d0a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cba6d22a_225d9c0d",
        "filename": "logging/rtc_event_log/rtc_event_log_unittest_helper.cc",
        "patchSetId": 7
      },
      "lineNbr": 396,
      "author": {
        "id": 5147
      },
      "writtenOn": "2018-06-18T11:06:37Z",
      "side": 1,
      "message": "~/webrtc/src:$ git grep \u0027for (size_t i \u003d\u0027 | wc\n   1437   16010  141187\n~/webrtc/src:$ git grep \u0027for (unsigned i \u003d\u0027 | wc\n      6      67     655",
      "revId": "dc4a38e1a0a98d03577ea9a00da9854c87d93d0a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7c28edaf_aba8ba33",
        "filename": "logging/rtc_event_log/rtc_event_log_unittest_helper.cc",
        "patchSetId": 7
      },
      "lineNbr": 396,
      "author": {
        "id": 5150
      },
      "writtenOn": "2018-06-21T14:13:04Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "cba6d22a_225d9c0d",
      "revId": "dc4a38e1a0a98d03577ea9a00da9854c87d93d0a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "519ccdc0_36216bd5",
        "filename": "logging/rtc_event_log/rtc_event_log_unittest_helper.cc",
        "patchSetId": 7
      },
      "lineNbr": 682,
      "author": {
        "id": 5147
      },
      "writtenOn": "2018-06-18T11:06:37Z",
      "side": 1,
      "message": "Typo?",
      "range": {
        "startLine": 682,
        "startChar": 13,
        "endLine": 682,
        "endChar": 22
      },
      "revId": "dc4a38e1a0a98d03577ea9a00da9854c87d93d0a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "609f10b4_b7b7fd1c",
        "filename": "logging/rtc_event_log/rtc_event_log_unittest_helper.cc",
        "patchSetId": 7
      },
      "lineNbr": 682,
      "author": {
        "id": 5150
      },
      "writtenOn": "2018-06-21T14:13:04Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "519ccdc0_36216bd5",
      "range": {
        "startLine": 682,
        "startChar": 13,
        "endLine": 682,
        "endChar": 22
      },
      "revId": "dc4a38e1a0a98d03577ea9a00da9854c87d93d0a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e6b3891c_db266acb",
        "filename": "logging/rtc_event_log/rtc_event_log_unittest_helper.cc",
        "patchSetId": 7
      },
      "lineNbr": 701,
      "author": {
        "id": 5147
      },
      "writtenOn": "2018-06-18T11:06:37Z",
      "side": 1,
      "message": "Same comment as below.",
      "range": {
        "startLine": 698,
        "startChar": 0,
        "endLine": 701,
        "endChar": 3
      },
      "revId": "dc4a38e1a0a98d03577ea9a00da9854c87d93d0a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e7de25a5_9e1fa705",
        "filename": "logging/rtc_event_log/rtc_event_log_unittest_helper.cc",
        "patchSetId": 7
      },
      "lineNbr": 701,
      "author": {
        "id": 5150
      },
      "writtenOn": "2018-06-21T14:13:04Z",
      "side": 1,
      "message": "Same response as below.",
      "parentUuid": "e6b3891c_db266acb",
      "range": {
        "startLine": 698,
        "startChar": 0,
        "endLine": 701,
        "endChar": 3
      },
      "revId": "dc4a38e1a0a98d03577ea9a00da9854c87d93d0a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8b6d344b_861219b9",
        "filename": "logging/rtc_event_log/rtc_event_log_unittest_helper.cc",
        "patchSetId": 7
      },
      "lineNbr": 701,
      "author": {
        "id": 5147
      },
      "writtenOn": "2018-06-21T21:19:30Z",
      "side": 1,
      "message": "Oops! :-)",
      "parentUuid": "e7de25a5_9e1fa705",
      "range": {
        "startLine": 698,
        "startChar": 0,
        "endLine": 701,
        "endChar": 3
      },
      "revId": "dc4a38e1a0a98d03577ea9a00da9854c87d93d0a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ac094ddc_2975ba8c",
        "filename": "logging/rtc_event_log/rtc_event_log_unittest_helper.cc",
        "patchSetId": 7
      },
      "lineNbr": 713,
      "author": {
        "id": 5147
      },
      "writtenOn": "2018-06-18T11:06:37Z",
      "side": 1,
      "message": "Before memcmp() reads logged_event.rtcp.raw_data.data() beyond (potentially) the edge of the vector, could you add:\n  if (original_event.packet_.size() !\u003d logged_event.rtcp.raw_data.size())\n    return false;\n?",
      "revId": "dc4a38e1a0a98d03577ea9a00da9854c87d93d0a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9cfaeebd_62e82351",
        "filename": "logging/rtc_event_log/rtc_event_log_unittest_helper.cc",
        "patchSetId": 7
      },
      "lineNbr": 713,
      "author": {
        "id": 5150
      },
      "writtenOn": "2018-06-21T14:13:04Z",
      "side": 1,
      "message": "Huh. Isn\u0027t that exactly what\u0027s written on the line above?",
      "parentUuid": "ac094ddc_2975ba8c",
      "revId": "dc4a38e1a0a98d03577ea9a00da9854c87d93d0a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fdfea923_da9c1f4b",
        "filename": "logging/rtc_event_log/rtc_event_log_unittest_helper.cc",
        "patchSetId": 7
      },
      "lineNbr": 713,
      "author": {
        "id": 5147
      },
      "writtenOn": "2018-06-21T21:19:30Z",
      "side": 1,
      "message": "Oops! :-)",
      "parentUuid": "9cfaeebd_62e82351",
      "revId": "dc4a38e1a0a98d03577ea9a00da9854c87d93d0a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "89b33bbd_3e6dba8a",
        "filename": "logging/rtc_event_log/rtc_event_log_unittest_helper.cc",
        "patchSetId": 7
      },
      "lineNbr": 769,
      "author": {
        "id": 5147
      },
      "writtenOn": "2018-06-18T11:06:37Z",
      "side": 1,
      "message": "This seems suspicious. If not a mistake, could you put a comment that would explain why |logged_event.configs| is a container, despite the expectation that it would always contain exactly one element?",
      "revId": "dc4a38e1a0a98d03577ea9a00da9854c87d93d0a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7b9c61e0_70fb1a30",
        "filename": "logging/rtc_event_log/rtc_event_log_unittest_helper.cc",
        "patchSetId": 7
      },
      "lineNbr": 769,
      "author": {
        "id": 5150
      },
      "writtenOn": "2018-06-21T14:13:04Z",
      "side": 1,
      "message": "At some point in the past, we changed the way we store send configs for simulcast streams. Afaicr, previously we stored all SSRCs in the same VideoSendConfig, but now we would store one VideoSendConfig per SSRC. We maintained the parser for backwards compatibility.\n\nWe should look into dropping support for this. Added TODO.",
      "parentUuid": "89b33bbd_3e6dba8a",
      "revId": "dc4a38e1a0a98d03577ea9a00da9854c87d93d0a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8d0cb373_0e8ee065",
        "filename": "logging/rtc_event_log/rtc_event_log_unittest_helper.cc",
        "patchSetId": 7
      },
      "lineNbr": 769,
      "author": {
        "id": 5147
      },
      "writtenOn": "2018-06-21T21:19:30Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "7b9c61e0_70fb1a30",
      "revId": "dc4a38e1a0a98d03577ea9a00da9854c87d93d0a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    }
  ]
}