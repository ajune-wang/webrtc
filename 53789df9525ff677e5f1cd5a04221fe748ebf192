{
  "comments": [
    {
      "key": {
        "uuid": "3d3d4133_3ac306f4",
        "filename": "modules/rtp_rtcp/source/rtcp_transceiver_impl.cc",
        "patchSetId": 13
      },
      "lineNbr": 235,
      "author": {
        "id": 5234
      },
      "writtenOn": "2017-12-07T08:56:43Z",
      "side": 1,
      "message": "Looks like you use the same send_packet callback here and below. Any reason it can\u0027t be done inside PacketSender, by giving it access to the outging_transport?",
      "range": {
        "startLine": 235,
        "startChar": 22,
        "endLine": 235,
        "endChar": 33
      },
      "revId": "53789df9525ff677e5f1cd5a04221fe748ebf192",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5b6ff2ae_146af00c",
        "filename": "modules/rtp_rtcp/source/rtcp_transceiver_impl.cc",
        "patchSetId": 13
      },
      "lineNbr": 235,
      "author": {
        "id": 5019
      },
      "writtenOn": "2017-12-07T09:27:36Z",
      "side": 1,
      "message": "I tried, but didn\u0027t found that cleaner: callback is used twice inside PacketSender, so moving it inside still cause about same code duplication.\n(second use could be simplified to just outgoing_transport_-\u003eSendRtcp, but that would make it less visible it should be same.)",
      "parentUuid": "3d3d4133_3ac306f4",
      "range": {
        "startLine": 235,
        "startChar": 22,
        "endLine": 235,
        "endChar": 33
      },
      "revId": "53789df9525ff677e5f1cd5a04221fe748ebf192",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9451a497_a0df0ac4",
        "filename": "modules/rtp_rtcp/source/rtcp_transceiver_impl.cc",
        "patchSetId": 13
      },
      "lineNbr": 235,
      "author": {
        "id": 5234
      },
      "writtenOn": "2017-12-07T10:12:44Z",
      "side": 1,
      "message": "I still think it would be a slight improvement to move the logic to PacketSender. E.g, you could pass outgoing_transport to the PacketSender constructor, and then let the PacketSender constructor could create the callback object like\n\ncallback_ \u003d [\u0026] (...) { outgoing_transport_-\u003eSendRtcp(...); }\n\nI leave that for your judgement.\n\n(It would be even nicer if there were a easy way convert a (private) method reference into a FunctionView, so the PacketSender::callback_ variable could be replaced by a private member function, but I\u0027m not sure if that works).",
      "parentUuid": "5b6ff2ae_146af00c",
      "range": {
        "startLine": 235,
        "startChar": 22,
        "endLine": 235,
        "endChar": 33
      },
      "revId": "53789df9525ff677e5f1cd5a04221fe748ebf192",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "510c3769_53d0beae",
        "filename": "modules/rtp_rtcp/source/rtcp_transceiver_impl.cc",
        "patchSetId": 13
      },
      "lineNbr": 235,
      "author": {
        "id": 5019
      },
      "writtenOn": "2017-12-07T10:29:19Z",
      "side": 1,
      "message": "rtc::FunctionView is a view, unlike std::function it doesn\u0027t own what it points to.\n\nstd::function\u003c\u003e callback_ \u003d [\u0026] (...) {};\nwould work, but std::function is not among allowed features in webrtc.\n\nrtc::FunctionView\u003c\u003e callback_ \u003d [\u0026] (...) {}; \nis an error, it would point to destroyed temporary lambda.\n\nanother solution is to make callback_ a lambda type, but since that type can\u0027t be written explicitly, it would require template dark magic to put it as member inside PacketSender.",
      "parentUuid": "9451a497_a0df0ac4",
      "range": {
        "startLine": 235,
        "startChar": 22,
        "endLine": 235,
        "endChar": 33
      },
      "revId": "53789df9525ff677e5f1cd5a04221fe748ebf192",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    }
  ]
}