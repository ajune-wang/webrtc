{
  "comments": [
    {
      "key": {
        "uuid": "f8f22fc1_6e484f51",
        "filename": "modules/rtp_rtcp/source/rtp_sequence_number_map.cc",
        "patchSetId": 5
      },
      "lineNbr": 49,
      "author": {
        "id": 5019
      },
      "writtenOn": "2019-04-03T12:04:22Z",
      "side": 1,
      "message": "as I understand planned usage (insert packets as they sent)\nThis scenario should be extremely rare.\nMay be also log a warning",
      "revId": "bf9785d58c624a5898098edd5a397323f502a844",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3c7eccc6_8f56c5ed",
        "filename": "modules/rtp_rtcp/source/rtp_sequence_number_map.cc",
        "patchSetId": 5
      },
      "lineNbr": 49,
      "author": {
        "id": 5147
      },
      "writtenOn": "2019-04-03T13:10:28Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f8f22fc1_6e484f51",
      "revId": "bf9785d58c624a5898098edd5a397323f502a844",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a765094a_1dbb4a96",
        "filename": "modules/rtp_rtcp/source/rtp_sequence_number_map.cc",
        "patchSetId": 5
      },
      "lineNbr": 61,
      "author": {
        "id": 5019
      },
      "writtenOn": "2019-04-03T12:04:22Z",
      "side": 1,
      "message": "did you measure performance to backup this claim?\n(dequeue.erase performance is linear in number of removed elements)\n\nIf you worried about performance, it might be faster to use circular buffer approach.\nIf sequence_number is mostly sequential, then it would be also possible to have constant lookup.",
      "range": {
        "startLine": 61,
        "startChar": 53,
        "endLine": 61,
        "endChar": 68
      },
      "revId": "bf9785d58c624a5898098edd5a397323f502a844",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ff0e32f0_696a380e",
        "filename": "modules/rtp_rtcp/source/rtp_sequence_number_map.cc",
        "patchSetId": 5
      },
      "lineNbr": 61,
      "author": {
        "id": 5147
      },
      "writtenOn": "2019-04-03T13:10:28Z",
      "side": 1,
      "message": "* The word \"too\" is subjective, I admit. Perhaps I should have said \"less efficient\". Let me do that... Actually, maybe the comment itself was actually superfluous. I\u0027ll delete it instead.\n* Removal of elements at the edges is O(1). Incurring that cost once for N/4 deletions is more efficient than incurring O(1) N/4 times, which is O(N).",
      "parentUuid": "a765094a_1dbb4a96",
      "range": {
        "startLine": 61,
        "startChar": 53,
        "endLine": 61,
        "endChar": 68
      },
      "revId": "bf9785d58c624a5898098edd5a397323f502a844",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cf1ba23d_2b9d1381",
        "filename": "modules/rtp_rtcp/source/rtp_sequence_number_map.cc",
        "patchSetId": 5
      },
      "lineNbr": 61,
      "author": {
        "id": 5019
      },
      "writtenOn": "2019-04-04T09:11:41Z",
      "side": 1,
      "message": "In practice it most likely wouldn\u0027t matter. So I would prefer (not strongly) code simplicity over theoretical performance improvement.\nIf you think performance matter, it would be good to make some benchmarks.\n\nAlso, in practice it might be more important to optimize for tail latency, for maximum time it takes to process a packet.\nIn practice also binary size matter.",
      "parentUuid": "ff0e32f0_696a380e",
      "range": {
        "startLine": 61,
        "startChar": 53,
        "endLine": 61,
        "endChar": 68
      },
      "revId": "bf9785d58c624a5898098edd5a397323f502a844",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "54c36b13_ca12d529",
        "filename": "modules/rtp_rtcp/source/rtp_sequence_number_map.cc",
        "patchSetId": 5
      },
      "lineNbr": 61,
      "author": {
        "id": 5147
      },
      "writtenOn": "2019-04-04T10:18:20Z",
      "side": 1,
      "message": "I don\u0027t think tail latency will be affected here, because the elements in the std::deque are POD, and do not require a destructor to be invoked. I therefore expect that std::deque will spend exactly as much effort deleting a single element, as it does deleting a bunch of them in one go.\n\nTrue about binary size, but I think we\u0027re on the right side of the trade-off here.",
      "parentUuid": "cf1ba23d_2b9d1381",
      "range": {
        "startLine": 61,
        "startChar": 53,
        "endLine": 61,
        "endChar": 68
      },
      "revId": "bf9785d58c624a5898098edd5a397323f502a844",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4fc114e1_b17fc8b4",
        "filename": "modules/rtp_rtcp/source/rtp_sequence_number_map.h",
        "patchSetId": 5
      },
      "lineNbr": 24,
      "author": {
        "id": 5019
      },
      "writtenOn": "2019-04-03T12:04:22Z",
      "side": 1,
      "message": "still mismatch code",
      "range": {
        "startLine": 24,
        "startChar": 29,
        "endLine": 24,
        "endChar": 46
      },
      "revId": "bf9785d58c624a5898098edd5a397323f502a844",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "60c17190_edb18564",
        "filename": "modules/rtp_rtcp/source/rtp_sequence_number_map.h",
        "patchSetId": 5
      },
      "lineNbr": 24,
      "author": {
        "id": 5147
      },
      "writtenOn": "2019-04-03T13:10:28Z",
      "side": 1,
      "message": "Fixed elsewhere; missed this one. Thanks for catching.\nCan you spot any additional places I might still have missed?",
      "parentUuid": "4fc114e1_b17fc8b4",
      "range": {
        "startLine": 24,
        "startChar": 29,
        "endLine": 24,
        "endChar": 46
      },
      "revId": "bf9785d58c624a5898098edd5a397323f502a844",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "535df237_958d65e7",
        "filename": "modules/rtp_rtcp/source/rtp_sequence_number_map.h",
        "patchSetId": 5
      },
      "lineNbr": 48,
      "author": {
        "id": 5019
      },
      "writtenOn": "2019-04-03T12:04:22Z",
      "side": 1,
      "message": "it is recommended to document if this class is copyable and assignable\nhttps://google.github.io/styleguide/cppguide.html#Copyable_Movable_Types\n(I guess it is not intended to), i.e. add just before destructor\nRtpSequenceNumberMap(const RtpSequenceNumberMap\u0026) \u003d delete;\nRtpSequenceNumberMap\u0026 operator\u003d(const RtpSequenceNumberMap\u0026) \u003d delete;",
      "revId": "bf9785d58c624a5898098edd5a397323f502a844",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "be96a3a4_21eef635",
        "filename": "modules/rtp_rtcp/source/rtp_sequence_number_map.h",
        "patchSetId": 5
      },
      "lineNbr": 48,
      "author": {
        "id": 5147
      },
      "writtenOn": "2019-04-03T13:10:28Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "535df237_958d65e7",
      "revId": "bf9785d58c624a5898098edd5a397323f502a844",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e0cfaba7_65a53433",
        "filename": "modules/rtp_rtcp/source/rtp_sequence_number_map_unittest.cc",
        "patchSetId": 5
      },
      "lineNbr": 31,
      "author": {
        "id": 5019
      },
      "writtenOn": "2019-04-03T12:04:22Z",
      "side": 1,
      "message": "static constants should use kConstantNameNotation\nhttps://google.github.io/styleguide/cppguide.html#Constant_Names",
      "range": {
        "startLine": 31,
        "startChar": 19,
        "endLine": 31,
        "endChar": 31
      },
      "revId": "bf9785d58c624a5898098edd5a397323f502a844",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5c7be503_18de1d11",
        "filename": "modules/rtp_rtcp/source/rtp_sequence_number_map_unittest.cc",
        "patchSetId": 5
      },
      "lineNbr": 31,
      "author": {
        "id": 5147
      },
      "writtenOn": "2019-04-03T13:10:28Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e0cfaba7_65a53433",
      "range": {
        "startLine": 31,
        "startChar": 19,
        "endLine": 31,
        "endChar": 31
      },
      "revId": "bf9785d58c624a5898098edd5a397323f502a844",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "389ff871_84cccd99",
        "filename": "modules/rtp_rtcp/source/rtp_sequence_number_map_unittest.cc",
        "patchSetId": 5
      },
      "lineNbr": 45,
      "author": {
        "id": 5019
      },
      "writtenOn": "2019-04-03T12:04:22Z",
      "side": 1,
      "message": "any reason for this constant to be member of the fixture?\n(technically, until c++17, such member declaration should be paired with the definition:\nuint64_t RtpSequenceNumberMapTest::kSeed; )",
      "revId": "bf9785d58c624a5898098edd5a397323f502a844",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "90eaaea9_73d2bd60",
        "filename": "modules/rtp_rtcp/source/rtp_sequence_number_map_unittest.cc",
        "patchSetId": 5
      },
      "lineNbr": 45,
      "author": {
        "id": 5147
      },
      "writtenOn": "2019-04-03T13:10:28Z",
      "side": 1,
      "message": "* Just because it\u0027s closer to the place where it\u0027s used like this, making it clearer.\n* Since the compilers aren\u0027t complaining, I think we can keep our code already C++17-style by not having a separate definition outside the class.",
      "parentUuid": "389ff871_84cccd99",
      "revId": "bf9785d58c624a5898098edd5a397323f502a844",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c61b4587_719b1a0d",
        "filename": "modules/rtp_rtcp/source/rtp_sequence_number_map_unittest.cc",
        "patchSetId": 5
      },
      "lineNbr": 45,
      "author": {
        "id": 5019
      },
      "writtenOn": "2019-04-04T09:11:41Z",
      "side": 1,
      "message": "actually it may generate weird linking errors, I won\u0027t insist on adding it, but give a reason when it would cause weird problem:\nIf someone decides to refactor Random constructor, e.g. to make it\nRandom::Random(const uint64_t\u0026 seed);\nthen this unittests would generate linking error making Random author surprised.\n\nAlso added a suggesting how to avoid it and bring the constant even closer to where it is used.",
      "parentUuid": "90eaaea9_73d2bd60",
      "revId": "bf9785d58c624a5898098edd5a397323f502a844",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    }
  ]
}