{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "31b0be4c_bf16a49c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 7529
      },
      "writtenOn": "2023-08-15T21:49:32Z",
      "side": 1,
      "message": "Writing a test for this case is a bit tricky since there\u0027s no API for set_use_rtx(false) and since this is not an officially supported use case, but perhaps we should add one anyway - Or some field trial.",
      "revId": "c3f0f5721ff9845baf2f402f456ff6410c212fc8",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "25067e1e_60852575",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 5634
      },
      "writtenOn": "2023-08-16T04:59:31Z",
      "side": 1,
      "message": "can you add a test?",
      "revId": "c3f0f5721ff9845baf2f402f456ff6410c212fc8",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7a431fcc_d4f3dc64",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 5634
      },
      "writtenOn": "2023-08-16T06:26:21Z",
      "side": 1,
      "message": "An unit test should be reasonable to write - just (??) inject (??) a client that hardcodes use_rtx to false and call GetRtpSenderCapabilities (and ReceiverCapabilities for good meaure), and check that RTX codecs don\u0027t occur in the output.\n\n(would be nice to have a test that checks the use_rtx\u003dtrue case too)",
      "parentUuid": "25067e1e_60852575",
      "revId": "c3f0f5721ff9845baf2f402f456ff6410c212fc8",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3630b0c8_63a85fd5",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 7529
      },
      "writtenOn": "2023-08-16T21:07:35Z",
      "side": 1,
      "message": "Updating the CL with a test. The test case is not particularly pretty since it needs to duplicate quite a bit of the initialization logic from create_peerconnection_factory.cc in order to inject a custom ConnectionContext.\n\nAn alternative approach that would simplify the test is to expose disable_rtx as a parameter in the PeerConnectionFactory::Options struct. WDYT?",
      "parentUuid": "7a431fcc_d4f3dc64",
      "revId": "c3f0f5721ff9845baf2f402f456ff6410c212fc8",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "945aa92c_8e0473c2",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 5634
      },
      "writtenOn": "2023-08-16T21:21:02Z",
      "side": 1,
      "message": "Adding use_rtx with a default value of true (I don\u0027t want to have disable_rtx in one place and use_rtx in another) to the PeerConnectionFactory::Options struct sounds good to me.\n\nI found this comment: \n\n  // Note: There is lots of code that wants to know whether or not we\n  // use RTX, but so far, no code has been found that sets it to false.\n  // Kept in the API in order to ease introduction if we want to resurrect\n  // the functionality.\n  bool use_rtx() { return true; }\n  \nInteresting that you found code that forced it false!\n  \nA custom ConnectionContext object seems like a Bad Idea architecturally to me; this is very much an implementation detail, not something we want to be injected from outside. (I ripped it out of PeerConnectionFactory a year or two back, in order to split between the factory (only accessed when creating a PC) and the context (accessed throughout the lifetime of the PC).",
      "parentUuid": "3630b0c8_63a85fd5",
      "revId": "c3f0f5721ff9845baf2f402f456ff6410c212fc8",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5f2cd56e_2f6adf20",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 7529
      },
      "writtenOn": "2023-08-16T21:26:22Z",
      "side": 1,
      "message": "Sounds good, I will add a param to PeerConnectionFactory::Options instead.\n\n\u003e Interesting that you found code that forced it false!\n\nTo be clear, this was the case only in Meta-internal code. In the public repo there are no use cases I\u0027m aware of that force it to false.",
      "parentUuid": "945aa92c_8e0473c2",
      "revId": "c3f0f5721ff9845baf2f402f456ff6410c212fc8",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    }
  ]
}