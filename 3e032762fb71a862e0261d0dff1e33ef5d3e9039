{
  "comments": [
    {
      "key": {
        "uuid": "f52aa3c9_81ee30ec",
        "filename": "modules/rtp_rtcp/source/rtp_packet.cc",
        "patchSetId": 4
      },
      "lineNbr": 170,
      "author": {
        "id": 5234
      },
      "writtenOn": "2020-01-17T12:02:30Z",
      "side": 1,
      "message": "extension.offset was lost?",
      "range": {
        "startLine": 170,
        "startChar": 12,
        "endLine": 170,
        "endChar": 54
      },
      "revId": "3e032762fb71a862e0261d0dff1e33ef5d3e9039",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4cdb098b_63795974",
        "filename": "modules/rtp_rtcp/source/rtp_packet.cc",
        "patchSetId": 4
      },
      "lineNbr": 170,
      "author": {
        "id": 5019
      },
      "writtenOn": "2020-01-17T12:06:37Z",
      "side": 1,
      "message": "no, offset doesn\u0027t add to the length\n(there are extension.length bytes available for this extensions starting at the extension.offset)",
      "parentUuid": "f52aa3c9_81ee30ec",
      "range": {
        "startLine": 170,
        "startChar": 12,
        "endLine": 170,
        "endChar": 54
      },
      "revId": "3e032762fb71a862e0261d0dff1e33ef5d3e9039",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7a6c6516_45cefcd5",
        "filename": "modules/rtp_rtcp/source/rtp_packet.cc",
        "patchSetId": 4
      },
      "lineNbr": 170,
      "author": {
        "id": 5117
      },
      "writtenOn": "2020-01-17T12:08:29Z",
      "side": 1,
      "message": "That was an error! \n\nThis check here looks at offset within extension and ensures that extension is long enough.\n\nIf we add extension.offset here we need to compare not to extension.length, but with the actual packet buffer length.",
      "parentUuid": "f52aa3c9_81ee30ec",
      "range": {
        "startLine": 170,
        "startChar": 12,
        "endLine": 170,
        "endChar": 54
      },
      "revId": "3e032762fb71a862e0261d0dff1e33ef5d3e9039",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5022e12c_247a4be5",
        "filename": "modules/rtp_rtcp/source/rtp_packet.cc",
        "patchSetId": 4
      },
      "lineNbr": 170,
      "author": {
        "id": 5234
      },
      "writtenOn": "2020-01-17T12:17:40Z",
      "side": 1,
      "message": "I\u0027m a bit confused about how this works. But lgtm as long as Danil and Ilya agree on what\u0027s correct.",
      "parentUuid": "7a6c6516_45cefcd5",
      "range": {
        "startLine": 170,
        "startChar": 12,
        "endLine": 170,
        "endChar": 54
      },
      "revId": "3e032762fb71a862e0261d0dff1e33ef5d3e9039",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e868d23b_a02c6b2f",
        "filename": "modules/rtp_rtcp/source/rtp_packet.cc",
        "patchSetId": 4
      },
      "lineNbr": 170,
      "author": {
        "id": 5019
      },
      "writtenOn": "2020-01-17T12:21:04Z",
      "side": 1,
      "message": "would similar code make it clearer?\nif (extension.length \u003e\u003d 6) {\n  memeset(WriteAt(extension.offset + extension.length - 6), 0, 6);\n}",
      "parentUuid": "5022e12c_247a4be5",
      "range": {
        "startLine": 170,
        "startChar": 12,
        "endLine": 170,
        "endChar": 54
      },
      "revId": "3e032762fb71a862e0261d0dff1e33ef5d3e9039",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e1fe0eb1_9aa211c1",
        "filename": "modules/rtp_rtcp/source/rtp_packet.cc",
        "patchSetId": 4
      },
      "lineNbr": 170,
      "author": {
        "id": 5117
      },
      "writtenOn": "2020-01-17T12:23:03Z",
      "side": 1,
      "message": "There\u0027s packet buffer. Some extensions are found in it and populated as entries {offset, length}. These are already checked that they are inside the buffer while they are parsed.\n\nThis code here tried to write 6 bytes in one extension without checking it\u0027s size.\n\nVideoSendTiming::KpacerExitDeltaOffset is extension-specific offset of a field within it.\n\nSo, the correct check is to look only on things relative to extension.",
      "parentUuid": "5022e12c_247a4be5",
      "range": {
        "startLine": 170,
        "startChar": 12,
        "endLine": 170,
        "endChar": 54
      },
      "revId": "3e032762fb71a862e0261d0dff1e33ef5d3e9039",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "772404cb_40c34056",
        "filename": "modules/rtp_rtcp/source/rtp_packet.cc",
        "patchSetId": 4
      },
      "lineNbr": 170,
      "author": {
        "id": 5234
      },
      "writtenOn": "2020-01-17T12:30:14Z",
      "side": 1,
      "message": "Danil: I read it slightly differently. To me, the current code reads as \"zero the six bytes starting at kPacerExitDeltaOffset\", while your alternative reads \"zero the last six bytes\".  Which flavor is clearest in this context, I\u0027m not sure. \n\nAnother variant would be \"zero everything after kPacerExitDeltaOffset\", like\n\nRTC_CHECK_LE(VideoSendTiming::kPacerExitDeltaOffset, extension.length);\nmemset(WriteAt(extension.offset + VideoSendTiming::kPacerExitDeltaOffset), \n       0, extension.length - VideoSendTiming::kPacerExitDeltaOffset);\n\nThen we avoid mentioning the magic number 6.",
      "parentUuid": "e1fe0eb1_9aa211c1",
      "range": {
        "startLine": 170,
        "startChar": 12,
        "endLine": 170,
        "endChar": 54
      },
      "revId": "3e032762fb71a862e0261d0dff1e33ef5d3e9039",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7b563ac7_411fe64a",
        "filename": "modules/rtp_rtcp/source/rtp_packet.cc",
        "patchSetId": 4
      },
      "lineNbr": 170,
      "author": {
        "id": 5019
      },
      "writtenOn": "2020-01-17T12:35:10Z",
      "side": 1,
      "message": "(my suggestion behave differently for malformed packets, but same for valid packets)\n\nCHECK might fail for malformed packet, but it can be runtime-check:\nif (VideoSendTiming::kPacerExitDeltaOffset \u003c extension.length) {\n  memset(WriteAt(extension.offset + VideoSendTiming::kPacerExitDeltaOffset), \n         0, extension.length - VideoSendTiming::kPacerExitDeltaOffset);\n}",
      "parentUuid": "772404cb_40c34056",
      "range": {
        "startLine": 170,
        "startChar": 12,
        "endLine": 170,
        "endChar": 54
      },
      "revId": "3e032762fb71a862e0261d0dff1e33ef5d3e9039",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d6dd5129_3fbda8f7",
        "filename": "modules/rtp_rtcp/source/rtp_packet.cc",
        "patchSetId": 4
      },
      "lineNbr": 170,
      "author": {
        "id": 5117
      },
      "writtenOn": "2020-01-17T13:08:51Z",
      "side": 1,
      "message": "Danil, I like that suggestion. I\u0027ll use it.",
      "parentUuid": "7b563ac7_411fe64a",
      "range": {
        "startLine": 170,
        "startChar": 12,
        "endLine": 170,
        "endChar": 54
      },
      "revId": "3e032762fb71a862e0261d0dff1e33ef5d3e9039",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    }
  ]
}