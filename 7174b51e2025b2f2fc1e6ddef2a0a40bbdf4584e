{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "3d91a7e3_43575378",
        "filename": "logging/rtc_event_log/events/rtc_event_field_extraction.cc",
        "patchSetId": 10
      },
      "lineNbr": 36,
      "author": {
        "id": 5531
      },
      "writtenOn": "2021-09-09T16:06:57Z",
      "side": 1,
      "message": "1. I\u0027d suggest using this simpler version unless there\u0027s strong reasons to go with the optimized version. Easier to review and maintain.\n2. This todo fits better into a bug than in the code IMO.\n3. Don\u0027t keep dead code in comments, if you want to remember to do this and keep the code around, add it to the tracking bug.",
      "range": {
        "startLine": 27,
        "startChar": 0,
        "endLine": 36,
        "endChar": 3
      },
      "revId": "7174b51e2025b2f2fc1e6ddef2a0a40bbdf4584e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "af78252e_2efb5692",
        "filename": "logging/rtc_event_log/events/rtc_event_field_extraction.cc",
        "patchSetId": 10
      },
      "lineNbr": 38,
      "author": {
        "id": 5531
      },
      "writtenOn": "2021-09-09T16:06:57Z",
      "side": 1,
      "message": "RequiredBitWidth? Would also be good with a short explanation of what it does and why.",
      "range": {
        "startLine": 38,
        "startChar": 9,
        "endLine": 38,
        "endChar": 25
      },
      "revId": "7174b51e2025b2f2fc1e6ddef2a0a40bbdf4584e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "977fe820_1d57c878",
        "filename": "logging/rtc_event_log/events/rtc_event_field_extraction.cc",
        "patchSetId": 10
      },
      "lineNbr": 38,
      "author": {
        "id": 5531
      },
      "writtenOn": "2021-09-09T16:06:57Z",
      "side": 1,
      "message": "This is always true and known at compile time. Ideally, remove it. If we need both, create two separate functions, one for the true case and one for the false case. (Ok to have a common subfunction to calculate the log.)",
      "range": {
        "startLine": 38,
        "startChar": 43,
        "endLine": 38,
        "endChar": 65
      },
      "revId": "7174b51e2025b2f2fc1e6ddef2a0a40bbdf4584e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "19b66913_2755d732",
        "filename": "logging/rtc_event_log/events/rtc_event_field_extraction.cc",
        "patchSetId": 10
      },
      "lineNbr": 39,
      "author": {
        "id": 5531
      },
      "writtenOn": "2021-09-09T16:06:57Z",
      "side": 1,
      "message": "Sorry if I\u0027m slow here, but I don\u0027t follow the meaning of this variable. Is the idea that it\u0027s the logarithm?",
      "range": {
        "startLine": 39,
        "startChar": 11,
        "endLine": 39,
        "endChar": 14
      },
      "revId": "7174b51e2025b2f2fc1e6ddef2a0a40bbdf4584e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "340e9857_0d4bf129",
        "filename": "logging/rtc_event_log/events/rtc_event_field_extraction.cc",
        "patchSetId": 10
      },
      "lineNbr": 39,
      "author": {
        "id": 5531
      },
      "writtenOn": "2021-09-09T16:06:57Z",
      "side": 1,
      "message": "Sorry if I\u0027m slow here, but I don\u0027t follow the meaning of this variable. Is the idea that it\u0027s the logarithm?",
      "range": {
        "startLine": 39,
        "startChar": 11,
        "endLine": 39,
        "endChar": 14
      },
      "revId": "7174b51e2025b2f2fc1e6ddef2a0a40bbdf4584e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "87ca0e71_7898b1e2",
        "filename": "logging/rtc_event_log/events/rtc_event_field_extraction.h",
        "patchSetId": 10
      },
      "lineNbr": 70,
      "author": {
        "id": 5531
      },
      "writtenOn": "2021-09-09T16:06:57Z",
      "side": 1,
      "message": "It\u0027s a bit odd to me that we get a batch of RtcEvent* but later on we assume that they\u0027re all E*. I\u0027d prefer to see rtc::ArrayView\u003cconst E*\u003e as the argument type here, even if it means that we need to do some ugly casting before calling this. Ideally we\u0027d ensure type safety throughout if possible.",
      "range": {
        "startLine": 70,
        "startChar": 4,
        "endLine": 70,
        "endChar": 41
      },
      "revId": "7174b51e2025b2f2fc1e6ddef2a0a40bbdf4584e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "18fa8a28_f95a4a90",
        "filename": "logging/rtc_event_log/events/rtc_event_field_extraction.h",
        "patchSetId": 10
      },
      "lineNbr": 72,
      "author": {
        "id": 5531
      },
      "writtenOn": "2021-09-09T16:06:57Z",
      "side": 1,
      "message": "nit: Remove",
      "range": {
        "startLine": 72,
        "startChar": 0,
        "endLine": 72,
        "endChar": 52
      },
      "revId": "7174b51e2025b2f2fc1e6ddef2a0a40bbdf4584e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0a3007db_eb7da576",
        "filename": "logging/rtc_event_log/events/rtc_event_field_extraction.h",
        "patchSetId": 10
      },
      "lineNbr": 76,
      "author": {
        "id": 5531
      },
      "writtenOn": "2021-09-09T16:06:57Z",
      "side": 1,
      "message": "nit: E::kType",
      "range": {
        "startLine": 76,
        "startChar": 36,
        "endLine": 76,
        "endChar": 49
      },
      "revId": "7174b51e2025b2f2fc1e6ddef2a0a40bbdf4584e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "07a35047_87cc5b1a",
        "filename": "logging/rtc_event_log/events/rtc_event_field_extraction.h",
        "patchSetId": 10
      },
      "lineNbr": 110,
      "author": {
        "id": 5531
      },
      "writtenOn": "2021-09-09T16:06:57Z",
      "side": 1,
      "message": "Maybe?:\nresult.positions.push_back(field.has_value());\nif(field.has_value()) {\n      result.values.push_back(EncodeAsUnsigned(field.value()));\n}",
      "range": {
        "startLine": 105,
        "startChar": 3,
        "endLine": 110,
        "endChar": 5
      },
      "revId": "7174b51e2025b2f2fc1e6ddef2a0a40bbdf4584e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a4f7c241_6348f951",
        "filename": "logging/rtc_event_log/events/rtc_event_field_extraction.h",
        "patchSetId": 10
      },
      "lineNbr": 123,
      "author": {
        "id": 5531
      },
      "writtenOn": "2021-09-09T16:06:57Z",
      "side": 1,
      "message": "nit: should be reference since we don\u0027t allow nullptr.",
      "range": {
        "startLine": 123,
        "startChar": 42,
        "endLine": 123,
        "endChar": 43
      },
      "revId": "7174b51e2025b2f2fc1e6ddef2a0a40bbdf4584e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "161a8477_3d9b8769",
        "filename": "logging/rtc_event_log/events/rtc_event_field_extraction.h",
        "patchSetId": 10
      },
      "lineNbr": 127,
      "author": {
        "id": 5531
      },
      "writtenOn": "2021-09-09T16:06:57Z",
      "side": 1,
      "message": "Mixing unsigned types with subtraction makes me nervous... Would be avoided if using targeted span as output variable.",
      "range": {
        "startLine": 127,
        "startChar": 7,
        "endLine": 127,
        "endChar": 15
      },
      "revId": "7174b51e2025b2f2fc1e6ddef2a0a40bbdf4584e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b883c5de_bcc79d8f",
        "filename": "logging/rtc_event_log/events/rtc_event_field_extraction.h",
        "patchSetId": 10
      },
      "lineNbr": 127,
      "author": {
        "id": 5531
      },
      "writtenOn": "2021-09-09T16:06:57Z",
      "side": 1,
      "message": "nit: ++i for speed :)",
      "range": {
        "startLine": 127,
        "startChar": 37,
        "endLine": 127,
        "endChar": 40
      },
      "revId": "7174b51e2025b2f2fc1e6ddef2a0a40bbdf4584e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fce77afd_628542ea",
        "filename": "logging/rtc_event_log/events/rtc_event_field_extraction.h",
        "patchSetId": 10
      },
      "lineNbr": 129,
      "author": {
        "id": 5531
      },
      "writtenOn": "2021-09-09T16:06:57Z",
      "side": 1,
      "message": "Looks like we\u0027re allowing to fill in one batch at a time, could we document this behavior? Or maybe preferred, provide a std::span\u003cE\u003e which has already been sliced to match the batch size. (can use an assert to check that target.size() \u003d\u003d values.size() making this specific part of the code slightly clearer)",
      "range": {
        "startLine": 129,
        "startChar": 14,
        "endLine": 129,
        "endChar": 45
      },
      "revId": "7174b51e2025b2f2fc1e6ddef2a0a40bbdf4584e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    }
  ]
}