{
  "comments": [
    {
      "key": {
        "uuid": "281df00e_917eb294",
        "filename": "api/stats/rtc_stats.h",
        "patchSetId": 1
      },
      "lineNbr": 285,
      "author": {
        "id": 5509
      },
      "writtenOn": "2019-10-30T12:33:58Z",
      "side": 1,
      "message": "This whole approach here is kind of strange C++.\n\nIt sounds like you want to say \"this class can only be instantiated with a few types, and none other\".\n\nThe way this is currently implemented is that you define a template in the header, and then a bunch of specializations in the cc file.\n\nHowever, you still only have a regular template in the header, so every client of this .h file / template will get its own instantiation of this template.\n\nWhat I think you want instead is to have template instantiation declarations in the .h so that no instantiations are done for clients, and then the template instantiation definitions in the cc file you have (https://en.cppreference.com/w/cpp/language/class_template#Explicit_instantiation).\n\nYou then need something like https://cs.chromium.org/chromium/src/base/export_template.h?q\u003dexport.template+file:base\u0026sq\u003dpackage:chromium\u0026dr\u003dCSs\u0026l\u003d5 to export those instantiation correctly. (...I need to rewrite that file to make it a bit clearer what it\u0027s doing.)\n\nThere\u0027s a good chance that\u0027d take care of the clang-cl issue too.",
      "revId": "6d1edc163cd649f59c3272713f85997ed5a18ec4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f1d1a644_7428eddd",
        "filename": "api/stats/rtc_stats.h",
        "patchSetId": 1
      },
      "lineNbr": 285,
      "author": {
        "id": 7332
      },
      "writtenOn": "2019-11-01T01:50:21Z",
      "side": 1,
      "message": "I see 3 distinct concerns:\n(1) Preventing usage for arbitrary types.\n(2) Consolidation of instantiations.\n(3) Spurious implicit instantiation by the combination clang-cl + dllexport + static member.\n\nMy understanding is that the source comment is about (1), which is achieved by defining some methods in the cc file.\nThe (2) seems fine as it is. The fact that the clients can use an instantiation (say, RTCStatsMember\u003cstd::string\u003e) indicates that the definitions from rtc_stats.cc are picked.\n\nThis CL properly addresses (3) with minimum drama, and for that reason I believe we should favor this solution.",
      "parentUuid": "281df00e_917eb294",
      "revId": "6d1edc163cd649f59c3272713f85997ed5a18ec4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bb41c7a5_2cdc46f2",
        "filename": "api/stats/rtc_stats.h",
        "patchSetId": 1
      },
      "lineNbr": 285,
      "author": {
        "id": 5087
      },
      "writtenOn": "2019-11-01T10:03:01Z",
      "side": 1,
      "message": "Thank you for taking a look Yves!\n\nI have just finished to create https://webrtc-review.googlesource.com/c/src/+/158795, I think it is possible that one takes care of everything but PTAL. :)",
      "parentUuid": "f1d1a644_7428eddd",
      "revId": "6d1edc163cd649f59c3272713f85997ed5a18ec4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ba150048_fd4ab133",
        "filename": "api/stats/rtc_stats.h",
        "patchSetId": 1
      },
      "lineNbr": 285,
      "author": {
        "id": 5087
      },
      "writtenOn": "2019-11-01T15:20:37Z",
      "side": 1,
      "message": "Ok, it looks like we are going with https://webrtc-review.googlesource.com/c/src/+/158795 which embeds this small fix but also uses template instantiation declarations and definitions which should be a (small) build time optimization.",
      "parentUuid": "bb41c7a5_2cdc46f2",
      "revId": "6d1edc163cd649f59c3272713f85997ed5a18ec4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2dffa483_8356f1ea",
        "filename": "api/stats/rtc_stats.h",
        "patchSetId": 1
      },
      "lineNbr": 304,
      "author": {
        "id": 7332
      },
      "writtenOn": "2019-11-01T01:50:21Z",
      "side": 1,
      "message": "Why the indirection?",
      "range": {
        "startLine": 304,
        "startChar": 0,
        "endLine": 304,
        "endChar": 50
      },
      "revId": "6d1edc163cd649f59c3272713f85997ed5a18ec4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a1860053_2d237a41",
        "filename": "api/stats/rtc_stats.h",
        "patchSetId": 1
      },
      "lineNbr": 304,
      "author": {
        "id": 5087
      },
      "writtenOn": "2019-11-01T15:20:37Z",
      "side": 1,
      "message": "We need to DCHECK before the cast at line 270 and we don\u0027t have an instance there.",
      "parentUuid": "2dffa483_8356f1ea",
      "range": {
        "startLine": 304,
        "startChar": 0,
        "endLine": 304,
        "endChar": 50
      },
      "revId": "6d1edc163cd649f59c3272713f85997ed5a18ec4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    }
  ]
}