{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "556db7bb_4209056e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 16600
      },
      "writtenOn": "2021-03-23T16:23:30Z",
      "side": 1,
      "message": "Thanks for the fix :) Lg2m. Sorry for the miss again.\n\n\n",
      "revId": "2f71b61a34c86c5a267e671d36ad5c74f1a0fb69",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "158b3173_5a3f22a2",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 16600
      },
      "writtenOn": "2021-03-23T16:37:38Z",
      "side": 1,
      "message": "Also curious - how did you catch this? In a test from Chromium or it\u0027s just manual detection?",
      "revId": "2f71b61a34c86c5a267e671d36ad5c74f1a0fb69",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "71e17c5b_645c40f1",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 7755
      },
      "writtenOn": "2021-03-24T06:06:40Z",
      "side": 1,
      "message": "There are chrome tests for this, in particular this one:\nhttps://source.chromium.org/chromium/chromium/src/+/master:third_party/blink/web_tests/external/wpt/webrtc-stats/supported-stats.html\nThere is a test expectation too:\nhttps://source.chromium.org/chromium/chromium/src/+/master:third_party/blink/web_tests/external/wpt/webrtc-stats/supported-stats-expected.txt\n\nIn order to fix a broken test one needs to deactivate the test in chrome, commit the test in webrtc, wait for chrome to update webrtc and then (back in chrome) reactivate the test while updating the test expectation.\nWhich is as error-prone as it sounds :-)",
      "parentUuid": "158b3173_5a3f22a2",
      "revId": "2f71b61a34c86c5a267e671d36ad5c74f1a0fb69",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4f8f2270_9dbbb64f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 5142
      },
      "writtenOn": "2021-03-24T08:27:40Z",
      "side": 1,
      "message": "Alessio happened to discover this manually while looking/updating the supported-stats expectations.\n\nI wonder why I didn\u0027t discover this, if I was just sloppy when re-enabling the test or if I forgot to re-enable it...",
      "parentUuid": "71e17c5b_645c40f1",
      "revId": "2f71b61a34c86c5a267e671d36ad5c74f1a0fb69",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "59747f50_a8e56f4e",
        "filename": "pc/rtc_stats_integrationtest.cc",
        "patchSetId": 5
      },
      "lineNbr": 928,
      "author": {
        "id": 16600
      },
      "writtenOn": "2021-03-23T16:23:30Z",
      "side": 1,
      "message": "I can take this if you want",
      "revId": "2f71b61a34c86c5a267e671d36ad5c74f1a0fb69",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c4e82139_9c6e5c29",
        "filename": "pc/rtc_stats_integrationtest.cc",
        "patchSetId": 5
      },
      "lineNbr": 928,
      "author": {
        "id": 5142
      },
      "writtenOn": "2021-03-24T08:27:40Z",
      "side": 1,
      "message": "Thank you! You are very welcome to do it.",
      "parentUuid": "59747f50_a8e56f4e",
      "revId": "2f71b61a34c86c5a267e671d36ad5c74f1a0fb69",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "82c70f65_0ea489f4",
        "filename": "pc/rtc_stats_integrationtest.cc",
        "patchSetId": 5
      },
      "lineNbr": 928,
      "author": {
        "id": 16600
      },
      "writtenOn": "2021-04-02T22:22:11Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "c4e82139_9c6e5c29",
      "revId": "2f71b61a34c86c5a267e671d36ad5c74f1a0fb69",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ab4b50bf_d5a53a4a",
        "filename": "stats/rtcstats_objects.cc",
        "patchSetId": 5
      },
      "lineNbr": 877,
      "author": {
        "id": 16600
      },
      "writtenOn": "2021-03-23T16:23:30Z",
      "side": 1,
      "message": "Is there a way to assert that the parent_class is the direct parent class in the macro?",
      "revId": "2f71b61a34c86c5a267e671d36ad5c74f1a0fb69",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1174ae3c_df7313a9",
        "filename": "stats/rtcstats_objects.cc",
        "patchSetId": 5
      },
      "lineNbr": 877,
      "author": {
        "id": 5142
      },
      "writtenOn": "2021-03-24T08:27:40Z",
      "side": 1,
      "message": "I can\u0027t think of a way, I don\u0027t think C++ has any way to do \"super\"?\n\nBut the point of the parent_class argument is for the MembersOfThisObjectAndAncestors() implementation that is defined by the macro to be able to do:\n\nparent_class::MembersOfThisObjectAndAncestors()\n\nSo it got me thinking, can we somehow know what the parent_class is without this argument?\n\nWell maybe you can do a typedef for it? \"using parent_class \u003d ...\" inside WEBRTC_RTCSTATS_DECL();\n\nBut I don\u0027t know, you have to manually enter it somewhere, so I guess it is error-prone either way. I guess I don\u0027t know of a solution.\n\n---\n\nBut the real issue is that if the Members() method is broken the stats don\u0027t get exposed to JS or native apps that just do \"for each member\".\n\nWhat if we iterate all the members, check which stats type that member is and static_cast it, then do a \"sizeof()\" for each member. Then we will know what the total size, in bytes, of all the members in the RTCStats class is.\n\nCan we somehow compare that number to sizeof(RTCRemoteInboundRtpStreamStats) and verify that they add up?\n\nIf the sizeof an RTCStats object is \u003csome overhead\u003e + \u003cbytes of all members\u003e?",
      "parentUuid": "ab4b50bf_d5a53a4a",
      "revId": "2f71b61a34c86c5a267e671d36ad5c74f1a0fb69",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3d669ccb_6310c8c4",
        "filename": "stats/rtcstats_objects.cc",
        "patchSetId": 5
      },
      "lineNbr": 879,
      "author": {
        "id": 6432
      },
      "writtenOn": "2021-04-07T20:17:16Z",
      "side": 1,
      "message": "In the objc interface there is a dcheck that member names aren\u0027t duplicated. Did this change make it so members such as ssrc are duplicated now because they are listed both here and in RTCRTPStreamStats?\n\nssrc, kind, codec_id, transport_id appear in both lists.\n\nhttps://source.corp.google.com/piper///depot/google3/third_party/webrtc/files/stable/webrtc/sdk/objc/api/peerconnection/RTCStatisticsReport.mm;rcl\u003d340858730;l\u003d122",
      "revId": "2f71b61a34c86c5a267e671d36ad5c74f1a0fb69",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "70f9b12a_9210512d",
        "filename": "stats/rtcstats_objects.cc",
        "patchSetId": 5
      },
      "lineNbr": 879,
      "author": {
        "id": 5142
      },
      "writtenOn": "2021-04-08T08:32:36Z",
      "side": 1,
      "message": "Fixed it here: https://webrtc-review.googlesource.com/c/src/+/214343\n\nThanks",
      "parentUuid": "3d669ccb_6310c8c4",
      "revId": "2f71b61a34c86c5a267e671d36ad5c74f1a0fb69",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    }
  ]
}