{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "1b1f5202_96add85a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 5634
      },
      "writtenOn": "2020-10-05T11:46:31Z",
      "side": 1,
      "message": "The webcodec spec for video frame is here:\n\nhttps://wicg.github.io/web-codecs/#videoframe\n",
      "revId": "83577ec2c053b887966edbb5ed7c432b7fb47ef7",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "24085f33_7d84cb2f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 5234
      },
      "writtenOn": "2020-10-05T11:58:14Z",
      "side": 1,
      "message": "(Intended to send these questions earlier)",
      "revId": "83577ec2c053b887966edbb5ed7c432b7fb47ef7",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "622132f9_4361b0e7",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 5234
      },
      "writtenOn": "2020-10-05T12:05:50Z",
      "side": 1,
      "message": "Did we have any filed bug about deleting supports_native_handle?\n\nWould the following approach work: Change all encoders included in webrtc to advertise supports_native_handle \u003d true, and call ToI420 as needed?",
      "revId": "83577ec2c053b887966edbb5ed7c432b7fb47ef7",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1a85514d_25315316",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 8683
      },
      "writtenOn": "2020-10-06T07:52:42Z",
      "side": 1,
      "message": "I would be fine for doing that for libvpx, and perhaps deprecating and removing supports_native_handle as I suggested above. However, we still want a way to avoid conversions where possible, so having an option to get the frame without conversion would be best.",
      "parentUuid": "622132f9_4361b0e7",
      "revId": "83577ec2c053b887966edbb5ed7c432b7fb47ef7",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d41a88ef_03dca308",
        "filename": "api/video/video_frame_buffer.h",
        "patchSetId": 7
      },
      "lineNbr": 88,
      "author": {
        "id": 6337
      },
      "writtenOn": "2020-10-05T11:45:18Z",
      "side": 1,
      "message": "As I understand it will make a non-native frame with a same pixel format as it was in native. From this comments it\u0027s a bit unclear what this method is doing.",
      "range": {
        "startLine": 86,
        "startChar": 2,
        "endLine": 88,
        "endChar": 13
      },
      "revId": "83577ec2c053b887966edbb5ed7c432b7fb47ef7",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cb41c09b_6b6c9a4b",
        "filename": "api/video/video_frame_buffer.h",
        "patchSetId": 7
      },
      "lineNbr": 88,
      "author": {
        "id": 5234
      },
      "writtenOn": "2020-10-05T12:25:52Z",
      "side": 1,
      "message": "If we need to generalize ToI420(), I would suggest something like\n\n// Returns a memory-backed frame buffer, in one of the listed formats, or null if none \n// supported. All sub classes are expected to support kI420.\nvirtual rtc::scoped_refptr\u003cVideoFrameBuffer\u003e ToMemoryFrameBuffer(rtc::ArrayView\u003cType\u003e types);\n\nIt could be extended further to pass a list of types and priorities etc, but I think that\u0027s overkill for now.",
      "parentUuid": "d41a88ef_03dca308",
      "range": {
        "startLine": 86,
        "startChar": 2,
        "endLine": 88,
        "endChar": 13
      },
      "revId": "83577ec2c053b887966edbb5ed7c432b7fb47ef7",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9f2d5e01_fc684b91",
        "filename": "api/video/video_frame_buffer.h",
        "patchSetId": 7
      },
      "lineNbr": 88,
      "author": {
        "id": 8683
      },
      "writtenOn": "2020-10-06T07:52:42Z",
      "side": 1,
      "message": "Perhaps a separate option for getting the native frame pixel format would work better, which would result in only one conversion of the native frame. This would somewhat the storage type from the pixel format. Something like,\n\nType GetNativePixelFormat();\nrtc::scoped_refptr\u003cVideoFrameBuffer\u003e ToMainMemoryFrameBuffer(); // returns frame in pixel format\n\nand then when an encoder receives a kNative frame, it can use the GetNativePixelFormat method to determine if it should copy it to main memory or just convert it to I420. \n\nWhat do you think?",
      "parentUuid": "cb41c09b_6b6c9a4b",
      "range": {
        "startLine": 86,
        "startChar": 2,
        "endLine": 88,
        "endChar": 13
      },
      "revId": "83577ec2c053b887966edbb5ed7c432b7fb47ef7",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "659b5caf_c92b6589",
        "filename": "api/video/video_frame_buffer.h",
        "patchSetId": 7
      },
      "lineNbr": 88,
      "author": {
        "id": 5234
      },
      "writtenOn": "2020-10-06T08:22:52Z",
      "side": 1,
      "message": "\u003e What do you think?\n\nTo me, kNative means an opaque representation. I don\u0027t quite like the concept of \"native pixel format\", since it makes sense only for this quirky usecase of wrapping and unwrapping media::VideoFrame. \n\nWith the method I propose, an encoder supporting more than I420, e.g., NV12 or I010, etc, will just pass its list to ToMainMemoryFrame, and the input VideoFrameBuffer can select an appropriate format depending on efficiency and fidelity. E.g., if input is a gpu texture, it could be converted to I010 if the encoder supports that. Which could make sense if the texture represents more than 8 bits per pixel, or to reduce rounding errors when converting between color spaces. I think that\u0027s a better generalization of ToI420.",
      "parentUuid": "9f2d5e01_fc684b91",
      "range": {
        "startLine": 86,
        "startChar": 2,
        "endLine": 88,
        "endChar": 13
      },
      "revId": "83577ec2c053b887966edbb5ed7c432b7fb47ef7",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b20972c6_4d949b93",
        "filename": "api/video/video_frame_buffer.h",
        "patchSetId": 7
      },
      "lineNbr": 88,
      "author": {
        "id": 5117
      },
      "writtenOn": "2020-10-06T08:36:07Z",
      "side": 1,
      "message": "There\u0027s one little issue here: we need to also know if the conversion was pixel-perfect or not. Because if it was, update_rect stays the same. If not, we can\u0027t guarantee anything about it.",
      "parentUuid": "659b5caf_c92b6589",
      "range": {
        "startLine": 86,
        "startChar": 2,
        "endLine": 88,
        "endChar": 13
      },
      "revId": "83577ec2c053b887966edbb5ed7c432b7fb47ef7",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e3769d90_c243e4ef",
        "filename": "api/video/video_frame_buffer.h",
        "patchSetId": 7
      },
      "lineNbr": 88,
      "author": {
        "id": 8683
      },
      "writtenOn": "2020-10-06T08:45:31Z",
      "side": 1,
      "message": "Maybe the long term play here is to separate kNative from type. That is, separate the pixel format from the way the frame is stored and able to be accessed, like how it is in media::VideoFrame. How one reads the data depends on the storage type, and the data layout depends on the pixel format. Additionally, conversion methods to arbitrary formats could be supported, and backed by hardware where applicable.\n\nAs to move forward in the short term, a single method to get the native frame data to main memory still seems to me the way forward.",
      "parentUuid": "b20972c6_4d949b93",
      "range": {
        "startLine": 86,
        "startChar": 2,
        "endLine": 88,
        "endChar": 13
      },
      "revId": "83577ec2c053b887966edbb5ed7c432b7fb47ef7",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "58263987_3697c3e0",
        "filename": "api/video/video_frame_buffer.h",
        "patchSetId": 7
      },
      "lineNbr": 88,
      "author": {
        "id": 5117
      },
      "writtenOn": "2020-10-06T08:49:06Z",
      "side": 1,
      "message": "\u003e Maybe the long term play here is to separate kNative from type.\n\nIt\u0027s impossible, since the native frame may use any weird pixel format. So, some place-holder value for non-webrtc-defined pixel format is needed. Also that change would break existing implementations.",
      "parentUuid": "e3769d90_c243e4ef",
      "range": {
        "startLine": 86,
        "startChar": 2,
        "endLine": 88,
        "endChar": 13
      },
      "revId": "83577ec2c053b887966edbb5ed7c432b7fb47ef7",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b802f955_5610cdab",
        "filename": "video/video_stream_encoder.cc",
        "patchSetId": 7
      },
      "lineNbr": 1342,
      "author": {
        "id": 5117
      },
      "writtenOn": "2020-10-05T10:30:48Z",
      "side": 1,
      "message": "Remove obsolete comment.",
      "range": {
        "startLine": 1340,
        "startChar": 7,
        "endLine": 1342,
        "endChar": 27
      },
      "revId": "83577ec2c053b887966edbb5ed7c432b7fb47ef7",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "83e8b47b_3d13bed8",
        "filename": "video/video_stream_encoder.cc",
        "patchSetId": 7
      },
      "lineNbr": 1342,
      "author": {
        "id": 8683
      },
      "writtenOn": "2020-10-07T09:26:37Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b802f955_5610cdab",
      "range": {
        "startLine": 1340,
        "startChar": 7,
        "endLine": 1342,
        "endChar": 27
      },
      "revId": "83577ec2c053b887966edbb5ed7c432b7fb47ef7",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    }
  ]
}