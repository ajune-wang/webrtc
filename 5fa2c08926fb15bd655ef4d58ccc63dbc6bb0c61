{
  "comments": [
    {
      "key": {
        "uuid": "001e1527_c0264306",
        "filename": "modules/rtp_rtcp/source/rtp_packet_unittest.cc",
        "patchSetId": 2
      },
      "lineNbr": 482,
      "author": {
        "id": 7641
      },
      "writtenOn": "2018-11-08T14:39:51Z",
      "side": 1,
      "message": "Should it be *time_offset?",
      "range": {
        "startLine": 482,
        "startChar": 2,
        "endLine": 482,
        "endChar": 38
      },
      "revId": "5fa2c08926fb15bd655ef4d58ccc63dbc6bb0c61",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "64cd3f19_ca82dc38",
        "filename": "modules/rtp_rtcp/source/rtp_packet_unittest.cc",
        "patchSetId": 2
      },
      "lineNbr": 482,
      "author": {
        "id": 5126
      },
      "writtenOn": "2018-11-08T14:47:52Z",
      "side": 1,
      "message": "No, because then you get a crash (or UB) if it\u0027s nullopt, instead of a clean test failure.",
      "parentUuid": "001e1527_c0264306",
      "range": {
        "startLine": 482,
        "startChar": 2,
        "endLine": 482,
        "endChar": 38
      },
      "revId": "5fa2c08926fb15bd655ef4d58ccc63dbc6bb0c61",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "68210884_8738a78e",
        "filename": "modules/rtp_rtcp/source/rtp_packet_unittest.cc",
        "patchSetId": 2
      },
      "lineNbr": 482,
      "author": {
        "id": 7641
      },
      "writtenOn": "2018-11-08T15:46:58Z",
      "side": 1,
      "message": "I guess you would add ASSERT_TRUE(time_offset) first then.\nJust wanted to make sure it wasn\u0027t a mistake.",
      "parentUuid": "64cd3f19_ca82dc38",
      "range": {
        "startLine": 482,
        "startChar": 2,
        "endLine": 482,
        "endChar": 38
      },
      "revId": "5fa2c08926fb15bd655ef4d58ccc63dbc6bb0c61",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8f13119c_1550943b",
        "filename": "modules/rtp_rtcp/source/rtp_packet_unittest.cc",
        "patchSetId": 2
      },
      "lineNbr": 482,
      "author": {
        "id": 5019
      },
      "writtenOn": "2018-11-08T15:58:52Z",
      "side": 1,
      "message": "it is by design, reason exactly as Karl described them.\n\nwhen I see \nASSERT_TRUE(some_optional);\nEXPECT_EQ(*some_optional, value);\nor \nif (some_optional \u0026\u0026 *some_optional \u003d\u003d value)\n\nI recommend to switch to single\nEXPECT_EQ(some_optional, value);\nor\nif (some_optional \u003d\u003d value)\n\nit is cleaner, e.g. allows test to continue if that expectation fails because of nullopt.",
      "parentUuid": "68210884_8738a78e",
      "range": {
        "startLine": 482,
        "startChar": 2,
        "endLine": 482,
        "endChar": 38
      },
      "revId": "5fa2c08926fb15bd655ef4d58ccc63dbc6bb0c61",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e7716912_4af59149",
        "filename": "modules/rtp_rtcp/source/rtp_packet_unittest.cc",
        "patchSetId": 2
      },
      "lineNbr": 482,
      "author": {
        "id": 5126
      },
      "writtenOn": "2018-11-09T10:08:30Z",
      "side": 1,
      "message": "When I write code to test optional values, I usually go one step further and do\n\n  EXPECT_EQ(x, absl::optional\u003cint\u003e(17));\n\nThis works exactly like\n\n  EXPECT_EQ(x, 17);\n\nbut additionally provides a compile-time guarantee that x has type absl::optional\u003cint\u003e, which I find good for readability. I don\u0027t usually feel strongly enough about it to actively recommend others to do the same, though.",
      "parentUuid": "8f13119c_1550943b",
      "range": {
        "startLine": 482,
        "startChar": 2,
        "endLine": 482,
        "endChar": 38
      },
      "revId": "5fa2c08926fb15bd655ef4d58ccc63dbc6bb0c61",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    }
  ]
}