{
  "comments": [
    {
      "key": {
        "uuid": "11305f2d_50b24141",
        "filename": "common_audio/smoothing_filter.cc",
        "patchSetId": 1
      },
      "lineNbr": 13,
      "author": {
        "id": 5087
      },
      "writtenOn": "2019-03-21T07:34:38Z",
      "side": 1,
      "message": "I added this because there are some calls to ::powf that I am not sure we need to migrate.",
      "range": {
        "startLine": 13,
        "startChar": 0,
        "endLine": 13,
        "endChar": 17
      },
      "revId": "e9550f34572a9760df618fe5739cd0085526b0ae",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "745686f8_cf955184",
        "filename": "common_audio/smoothing_filter.cc",
        "patchSetId": 1
      },
      "lineNbr": 13,
      "author": {
        "id": 7015
      },
      "writtenOn": "2019-03-21T09:12:11Z",
      "side": 1,
      "message": "ok. let\u0027s solve only exp() in this cl.",
      "parentUuid": "11305f2d_50b24141",
      "range": {
        "startLine": 13,
        "startChar": 0,
        "endLine": 13,
        "endChar": 17
      },
      "revId": "e9550f34572a9760df618fe5739cd0085526b0ae",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "08daef48_55cecb1f",
        "filename": "common_audio/smoothing_filter.cc",
        "patchSetId": 1
      },
      "lineNbr": 13,
      "author": {
        "id": 5087
      },
      "writtenOn": "2019-03-21T09:28:40Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "745686f8_cf955184",
      "range": {
        "startLine": 13,
        "startChar": 0,
        "endLine": 13,
        "endChar": 17
      },
      "revId": "e9550f34572a9760df618fe5739cd0085526b0ae",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a3fcf3cd_1b59b3d7",
        "filename": "common_audio/smoothing_filter.cc",
        "patchSetId": 1
      },
      "lineNbr": 97,
      "author": {
        "id": 5087
      },
      "writtenOn": "2019-03-21T09:28:40Z",
      "side": 1,
      "message": "After a closer inspection, I think this one is interesting because it calls std::exp with an int64_t so probably it is calling the double version of std::exp which returns a double, while multiplier is a float.",
      "range": {
        "startLine": 97,
        "startChar": 6,
        "endLine": 97,
        "endChar": 59
      },
      "revId": "e9550f34572a9760df618fe5739cd0085526b0ae",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "87254c1d_38e49502",
        "filename": "common_audio/smoothing_filter.cc",
        "patchSetId": 1
      },
      "lineNbr": 97,
      "author": {
        "id": 5126
      },
      "writtenOn": "2019-03-21T10:18:52Z",
      "side": 1,
      "message": "That\u0027s probably appropriate, if the exponent actually needs the full int64_t range. But I presume this will be a small number in practice, so std::expf might be more appropriate?",
      "parentUuid": "a3fcf3cd_1b59b3d7",
      "range": {
        "startLine": 97,
        "startChar": 6,
        "endLine": 97,
        "endChar": 59
      },
      "revId": "e9550f34572a9760df618fe5739cd0085526b0ae",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "95a7f822_2eebd3f8",
        "filename": "common_audio/smoothing_filter.cc",
        "patchSetId": 1
      },
      "lineNbr": 97,
      "author": {
        "id": 5087
      },
      "writtenOn": "2019-03-21T11:16:37Z",
      "side": 1,
      "message": "Agreed, I have done that in PS#2 but I am not an export of this code and since I am paranoid I was thinking about doing:\n\n  multiplier \u003d std::exp(rtc::dchecked_cast\u003cfloat\u003e(last_state_time_ms_ - time_ms));\n\nDoes that make sense?",
      "parentUuid": "87254c1d_38e49502",
      "range": {
        "startLine": 97,
        "startChar": 6,
        "endLine": 97,
        "endChar": 59
      },
      "revId": "e9550f34572a9760df618fe5739cd0085526b0ae",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9741bb20_d9120f6b",
        "filename": "common_audio/smoothing_filter.cc",
        "patchSetId": 1
      },
      "lineNbr": 97,
      "author": {
        "id": 5087
      },
      "writtenOn": "2019-03-21T11:17:11Z",
      "side": 1,
      "message": "s/export/expert :)",
      "parentUuid": "95a7f822_2eebd3f8",
      "range": {
        "startLine": 97,
        "startChar": 6,
        "endLine": 97,
        "endChar": 59
      },
      "revId": "e9550f34572a9760df618fe5739cd0085526b0ae",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c7736c05_f6ba17f8",
        "filename": "common_audio/smoothing_filter.cc",
        "patchSetId": 1
      },
      "lineNbr": 97,
      "author": {
        "id": 5126
      },
      "writtenOn": "2019-03-21T11:26:25Z",
      "side": 1,
      "message": "I didn\u0027t think dchecked_cast worked well with floating-point types?",
      "parentUuid": "9741bb20_d9120f6b",
      "range": {
        "startLine": 97,
        "startChar": 6,
        "endLine": 97,
        "endChar": 59
      },
      "revId": "e9550f34572a9760df618fe5739cd0085526b0ae",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "66b3d8fb_f74cdf8b",
        "filename": "common_audio/smoothing_filter.cc",
        "patchSetId": 1
      },
      "lineNbr": 97,
      "author": {
        "id": 5087
      },
      "writtenOn": "2019-03-21T11:30:23Z",
      "side": 1,
      "message": "Hmm, isn\u0027t that based on std::numeric_limits?",
      "parentUuid": "c7736c05_f6ba17f8",
      "range": {
        "startLine": 97,
        "startChar": 6,
        "endLine": 97,
        "endChar": 59
      },
      "revId": "e9550f34572a9760df618fe5739cd0085526b0ae",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f5d03f47_a52c9b81",
        "filename": "common_audio/smoothing_filter.cc",
        "patchSetId": 1
      },
      "lineNbr": 97,
      "author": {
        "id": 5126
      },
      "writtenOn": "2019-03-21T11:45:48Z",
      "side": 1,
      "message": "It looks like it checks the max an min value, but with floats you typically don\u0027t have that problem; int128 fits in float (the smallest floating-point type), and uint128 just barely doesn\u0027t. However, with integer-\u003efloating conversion you can lose precision: float can exactly represent integers in [-2^24,2^24], and double handles [-2^53,2^53]. Outside those ranges, some integers aren\u0027t exactly representable.\n\nThe useful thing for dchecked_cast to check for would be precision loss, since the range is ~always going to be a non-issue.",
      "parentUuid": "66b3d8fb_f74cdf8b",
      "range": {
        "startLine": 97,
        "startChar": 6,
        "endLine": 97,
        "endChar": 59
      },
      "revId": "e9550f34572a9760df618fe5739cd0085526b0ae",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    }
  ]
}