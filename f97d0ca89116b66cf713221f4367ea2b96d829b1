{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "7f81e5c6_e9a9948c",
        "filename": "media/engine/simulcast_encoder_adapter.cc",
        "patchSetId": 5
      },
      "lineNbr": 77,
      "author": {
        "id": 5117
      },
      "writtenOn": "2021-01-28T10:56:57Z",
      "side": 1,
      "message": "Shouldn\u0027t it be |codec.active ? 1 : 0| in this case?",
      "range": {
        "startLine": 77,
        "startChar": 11,
        "endLine": 77,
        "endChar": 12
      },
      "revId": "f97d0ca89116b66cf713221f4367ea2b96d829b1",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cb85b9d1_56e0b2f9",
        "filename": "media/engine/simulcast_encoder_adapter.cc",
        "patchSetId": 5
      },
      "lineNbr": 77,
      "author": {
        "id": 5825
      },
      "writtenOn": "2021-01-28T12:27:38Z",
      "side": 1,
      "message": "Is codec.active needed at all? Why would someone initialize a codec with .active\u003dfalse? There is no way to update .active other then by re-init.",
      "parentUuid": "7f81e5c6_e9a9948c",
      "range": {
        "startLine": 77,
        "startChar": 11,
        "endLine": 77,
        "endChar": 12
      },
      "revId": "f97d0ca89116b66cf713221f4367ea2b96d829b1",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7da35cd2_3e821e0e",
        "filename": "media/engine/simulcast_encoder_adapter.cc",
        "patchSetId": 5
      },
      "lineNbr": 77,
      "author": {
        "id": 5117
      },
      "writtenOn": "2021-01-28T13:03:23Z",
      "side": 1,
      "message": "CountActiveStreams is called for initialisation also.\n\nif |numberOfSimulcastStreams \u003d\u003d 0| there\u0027s no simulcastStream[].active to set. So maybe some code somewhere would set codec.active now or in the future in that case.\n\nActually, I don\u0027t believe we should change the code to never have numberOfSimulcastStreams \u003d\u003d 0. That doesn\u0027t make sense to me.",
      "parentUuid": "cb85b9d1_56e0b2f9",
      "range": {
        "startLine": 77,
        "startChar": 11,
        "endLine": 77,
        "endChar": 12
      },
      "revId": "f97d0ca89116b66cf713221f4367ea2b96d829b1",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8328f828_12114dfd",
        "filename": "media/engine/simulcast_encoder_adapter.cc",
        "patchSetId": 5
      },
      "lineNbr": 380,
      "author": {
        "id": 5117
      },
      "writtenOn": "2021-01-28T10:56:57Z",
      "side": 1,
      "message": "/*is_lowest_quality_stream\u003d*/stream_idx \u003d\u003d lowest_quality_stream_idx.\n\nAdd \"\u003d\" in comment and no space. IIRC, this way automatic tools would trigger a warning if the order of parameters is mistaken.",
      "range": {
        "startLine": 380,
        "startChar": 10,
        "endLine": 380,
        "endChar": 34
      },
      "revId": "f97d0ca89116b66cf713221f4367ea2b96d829b1",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f09e9c2d_a969418b",
        "filename": "media/engine/simulcast_encoder_adapter.cc",
        "patchSetId": 5
      },
      "lineNbr": 380,
      "author": {
        "id": 5825
      },
      "writtenOn": "2021-01-29T11:32:59Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "8328f828_12114dfd",
      "range": {
        "startLine": 380,
        "startChar": 10,
        "endLine": 380,
        "endChar": 34
      },
      "revId": "f97d0ca89116b66cf713221f4367ea2b96d829b1",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e5d57beb_d208bcd7",
        "filename": "media/engine/simulcast_encoder_adapter.cc",
        "patchSetId": 5
      },
      "lineNbr": 381,
      "author": {
        "id": 5117
      },
      "writtenOn": "2021-01-28T10:56:57Z",
      "side": 1,
      "message": "ditto",
      "range": {
        "startLine": 381,
        "startChar": 10,
        "endLine": 381,
        "endChar": 35
      },
      "revId": "f97d0ca89116b66cf713221f4367ea2b96d829b1",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f28aadb4_2741050d",
        "filename": "media/engine/simulcast_encoder_adapter.cc",
        "patchSetId": 5
      },
      "lineNbr": 381,
      "author": {
        "id": 5825
      },
      "writtenOn": "2021-01-29T11:32:59Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e5d57beb_d208bcd7",
      "range": {
        "startLine": 381,
        "startChar": 10,
        "endLine": 381,
        "endChar": 35
      },
      "revId": "f97d0ca89116b66cf713221f4367ea2b96d829b1",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c6bf9b28_2eb844d2",
        "filename": "media/engine/simulcast_encoder_adapter.cc",
        "patchSetId": 5
      },
      "lineNbr": 483,
      "author": {
        "id": 5117
      },
      "writtenOn": "2021-01-28T10:56:57Z",
      "side": 1,
      "message": "|bypass_mode_| would be clearer here.",
      "range": {
        "startLine": 483,
        "startChar": 8,
        "endLine": 483,
        "endChar": 37
      },
      "revId": "f97d0ca89116b66cf713221f4367ea2b96d829b1",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "417fc0e0_2ef70fc0",
        "filename": "media/engine/simulcast_encoder_adapter.cc",
        "patchSetId": 5
      },
      "lineNbr": 483,
      "author": {
        "id": 5825
      },
      "writtenOn": "2021-01-29T11:32:59Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c6bf9b28_2eb844d2",
      "range": {
        "startLine": 483,
        "startChar": 8,
        "endLine": 483,
        "endChar": 37
      },
      "revId": "f97d0ca89116b66cf713221f4367ea2b96d829b1",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f95b1251_17245d72",
        "filename": "media/engine/simulcast_encoder_adapter.cc",
        "patchSetId": 5
      },
      "lineNbr": 671,
      "author": {
        "id": 5117
      },
      "writtenOn": "2021-01-28T10:56:57Z",
      "side": 1,
      "message": "This is currently ignored if there\u0027s a stored encoder present.\n\nI see two ways around it: in stored_encoders_ also store creation parameters and compare that.\nOr make it a map\u003cbool, unique_ptr\u003cVideoEncoder\u003e\u003e.\n\nAlternatively don\u0027t store |is_lowest_quality_stream\u003d\u003dtrue| as stored encoders and don\u0027t look there if |is_lowest_quality_stream \u003d\u003d true|",
      "range": {
        "startLine": 671,
        "startChar": 9,
        "endLine": 671,
        "endChar": 33
      },
      "revId": "f97d0ca89116b66cf713221f4367ea2b96d829b1",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a43a9adf_acf545bc",
        "filename": "media/engine/simulcast_encoder_adapter.cc",
        "patchSetId": 5
      },
      "lineNbr": 671,
      "author": {
        "id": 5825
      },
      "writtenOn": "2021-01-29T11:32:59Z",
      "side": 1,
      "message": "hm, it seems there is an issue with prefer_temporal_support_on_base_layer_: when number of active layers\u003d1 (singlecast) and prefer_temporal_support_on_base_layer_\u003dtrue, SEA always falls back to SW because is_lowest_quality_stream\u003dtrue. I.e., SW will be used to encode HD layer.\n\n+jakobi@",
      "parentUuid": "f95b1251_17245d72",
      "range": {
        "startLine": 671,
        "startChar": 9,
        "endLine": 671,
        "endChar": 33
      },
      "revId": "f97d0ca89116b66cf713221f4367ea2b96d829b1",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "785ef2bf_d977fbe1",
        "filename": "media/engine/simulcast_encoder_adapter.cc",
        "patchSetId": 5
      },
      "lineNbr": 671,
      "author": {
        "id": 5825
      },
      "writtenOn": "2021-01-29T11:42:38Z",
      "side": 1,
      "message": "Wrong. is_lowest_quality_stream will be \u003dfalse when total_streams_count \u003e 1 and active_streams_count \u003d1. I.e., HD will use HW at singlecast via layers deactivation.\n\nBut at pure singlecast (total_streams_count\u003d1) SEA always falls back to SW if prefer_temporal_support_on_base_layer_\u003dtrue.",
      "parentUuid": "a43a9adf_acf545bc",
      "range": {
        "startLine": 671,
        "startChar": 9,
        "endLine": 671,
        "endChar": 33
      },
      "revId": "f97d0ca89116b66cf713221f4367ea2b96d829b1",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "00b37427_e8738f3f",
        "filename": "media/engine/simulcast_encoder_adapter.cc",
        "patchSetId": 5
      },
      "lineNbr": 671,
      "author": {
        "id": 5117
      },
      "writtenOn": "2021-01-29T11:59:59Z",
      "side": 1,
      "message": "I don\u0027t get it.\n\nis_lowest_quality_stream\u003d\u003dtrue in two cases: we are creating a simulcast encoder for bypass mode, or encoder for the lowest active stream.\n\nWe push to stored encoders when re-initializing the encoder.\nAnd, if we succeeded in creating a simulcast encoder, we clear all the encoders.\n\nNote, the libvpx encoder will stop supporting the simulcast if the scaling factors are not standard, for example. Or number of temporal layers per stream is different.\n\nThus, consider the situation: streams were using non-standard scaling factors. We created 3 separate encoders for streams and only one of these has |is_lowest_quality_stream\u003d\u003dtrue|. Then the user has changed scaling factors to standard ones via transcievers API and InitEncode is called. All 3 encoders are stored now.\n\nThen, first FetchOrCreateEncoder() call tries to get the encoder for standard simulcast, however, it may take any of the 3 encoders in stored_encoders_, even one with is_lowest_quality_stream\u003d\u003dfalse. Even though this is the case where we want it to be true (because the lowest stream may be any of the 3 - order is not fixed).\n\nEven if there\u0027s some more complicated logic which may prevent this exact scenario, it\u0027s still dangerous: we cache encoders with different parameters in the same vector regardless of their actual parameters.",
      "parentUuid": "785ef2bf_d977fbe1",
      "range": {
        "startLine": 671,
        "startChar": 9,
        "endLine": 671,
        "endChar": 33
      },
      "revId": "f97d0ca89116b66cf713221f4367ea2b96d829b1",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "79b7372d_da800fd6",
        "filename": "media/engine/simulcast_encoder_adapter.cc",
        "patchSetId": 5
      },
      "lineNbr": 671,
      "author": {
        "id": 5825
      },
      "writtenOn": "2021-01-29T12:59:07Z",
      "side": 1,
      "message": "Yes, yes, you are totally right. Fetched encoder can have undesired state. I\u0027m going to fix this.\n\nI\u0027m trying to understand if prefer_temporal_support_on_base_layer_\u003dtrue could force SW for HD (no matter if we always recreate or fetch encoder).",
      "parentUuid": "00b37427_e8738f3f",
      "range": {
        "startLine": 671,
        "startChar": 9,
        "endLine": 671,
        "endChar": 33
      },
      "revId": "f97d0ca89116b66cf713221f4367ea2b96d829b1",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9bf70380_cd862455",
        "filename": "media/engine/simulcast_encoder_adapter_unittest.cc",
        "patchSetId": 5
      },
      "lineNbr": 164,
      "author": {
        "id": 5117
      },
      "writtenOn": "2021-01-28T10:56:57Z",
      "side": 1,
      "message": "Please update this to keep track of number of created encoders.\n\nAdd a test which have some inactive streams and checks that only, say, 2 out of 3 encoders were actually created by querying the factory().",
      "range": {
        "startLine": 164,
        "startChar": 6,
        "endLine": 164,
        "endChar": 29
      },
      "revId": "f97d0ca89116b66cf713221f4367ea2b96d829b1",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0ea28349_b30ffe35",
        "filename": "media/engine/simulcast_encoder_adapter_unittest.cc",
        "patchSetId": 5
      },
      "lineNbr": 164,
      "author": {
        "id": 5825
      },
      "writtenOn": "2021-01-29T11:32:59Z",
      "side": 1,
      "message": "Added CreatesEncoderOnlyIfStreamIsActive",
      "parentUuid": "9bf70380_cd862455",
      "range": {
        "startLine": 164,
        "startChar": 6,
        "endLine": 164,
        "endChar": 29
      },
      "revId": "f97d0ca89116b66cf713221f4367ea2b96d829b1",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    }
  ]
}