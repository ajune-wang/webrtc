{
  "comments": [
    {
      "key": {
        "uuid": "afaeeef0_535c0087",
        "filename": "api/media_transport_interface.h",
        "patchSetId": 8
      },
      "lineNbr": 14,
      "author": {
        "id": 5525
      },
      "writtenOn": "2018-08-27T07:49:35Z",
      "side": 1,
      "message": "through the media",
      "range": {
        "startLine": 14,
        "startChar": 29,
        "endLine": 14,
        "endChar": 33
      },
      "revId": "5032e7564f690fba87ee1f97065c6d44628d5628",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "67e9a101_79a9848b",
        "filename": "api/media_transport_interface.h",
        "patchSetId": 8
      },
      "lineNbr": 15,
      "author": {
        "id": 5525
      },
      "writtenOn": "2018-08-27T07:49:35Z",
      "side": 1,
      "message": "implementations",
      "range": {
        "startLine": 15,
        "startChar": 36,
        "endLine": 15,
        "endChar": 50
      },
      "revId": "5032e7564f690fba87ee1f97065c6d44628d5628",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a332c638_56ad36b4",
        "filename": "api/media_transport_interface.h",
        "patchSetId": 8
      },
      "lineNbr": 31,
      "author": {
        "id": 5525
      },
      "writtenOn": "2018-08-27T07:49:35Z",
      "side": 1,
      "message": "encoded",
      "range": {
        "startLine": 31,
        "startChar": 14,
        "endLine": 31,
        "endChar": 15
      },
      "revId": "5032e7564f690fba87ee1f97065c6d44628d5628",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3233c136_629b7606",
        "filename": "api/media_transport_interface.h",
        "patchSetId": 8
      },
      "lineNbr": 61,
      "author": {
        "id": 5525
      },
      "writtenOn": "2018-08-27T07:49:35Z",
      "side": 1,
      "message": "I think it would be good to understand how we this and MediaTransportEncodedVideoFrame will map to the existing EncodedFrame/EncodedImage etc in WebRTC. Are we replacing those with these, or are we just adding one more?",
      "revId": "5032e7564f690fba87ee1f97065c6d44628d5628",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fb12bf5c_fc061978",
        "filename": "api/media_transport_interface.h",
        "patchSetId": 8
      },
      "lineNbr": 61,
      "author": {
        "id": 7704
      },
      "writtenOn": "2018-08-27T14:19:17Z",
      "side": 1,
      "message": "This is particularly an AudioFrame. I just shared with you the CR which defines VideoFrame and the relation with EncodedFrame \u0026 EncodedImage.",
      "parentUuid": "3233c136_629b7606",
      "revId": "5032e7564f690fba87ee1f97065c6d44628d5628",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9150178f_b1bdfcd2",
        "filename": "api/media_transport_interface.h",
        "patchSetId": 8
      },
      "lineNbr": 64,
      "author": {
        "id": 5126
      },
      "writtenOn": "2018-08-27T01:50:41Z",
      "side": 1,
      "message": "Are these genuinely 32-bit unsigned integers, or are they just integers that won\u0027t ever be terribly large? If the latter, just use `int`. See https://google.github.io/styleguide/cppguide.html#Integer_Types",
      "revId": "5032e7564f690fba87ee1f97065c6d44628d5628",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "eceaa6a5_d0650fe6",
        "filename": "api/media_transport_interface.h",
        "patchSetId": 8
      },
      "lineNbr": 65,
      "author": {
        "id": 5077
      },
      "writtenOn": "2018-08-28T06:53:35Z",
      "side": 1,
      "message": "FrameType mixes audio and video frames. Is there really a need for that if we have separate audio video frame types? Can we break it apart into two new enums instead which only contain the audio/video specifics?\n\nOh, and do we really need to know the frame type for the transport at all? We have the payload type below already. The transport should know as little as possible about the payload contents.\n\nIf there\u0027s a doc describing how this class is supposed to be used, please point me at it.",
      "revId": "5032e7564f690fba87ee1f97065c6d44628d5628",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1d47cdbc_84be76cc",
        "filename": "api/media_transport_interface.h",
        "patchSetId": 8
      },
      "lineNbr": 66,
      "author": {
        "id": 5126
      },
      "writtenOn": "2018-08-27T01:50:41Z",
      "side": 1,
      "message": "This should almost certainly be `int`. See https://google.github.io/styleguide/cppguide.html#Integer_Types",
      "revId": "5032e7564f690fba87ee1f97065c6d44628d5628",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c79fad07_eec6b933",
        "filename": "api/media_transport_interface.h",
        "patchSetId": 8
      },
      "lineNbr": 67,
      "author": {
        "id": 5126
      },
      "writtenOn": "2018-08-27T01:50:41Z",
      "side": 1,
      "message": "Is this really text? If not, something like std::vector\u003cuint8_t\u003e or rtc::ArrayView\u003cconst uint8_t\u003e would seem more appropriate.",
      "revId": "5032e7564f690fba87ee1f97065c6d44628d5628",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b9a3520f_d3e5caa0",
        "filename": "api/media_transport_interface.h",
        "patchSetId": 8
      },
      "lineNbr": 85,
      "author": {
        "id": 5126
      },
      "writtenOn": "2018-08-27T01:50:41Z",
      "side": 1,
      "message": "This comment seems to belong on the data member, not the getter.",
      "revId": "5032e7564f690fba87ee1f97065c6d44628d5628",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4ae6a133_ef7caeab",
        "filename": "api/media_transport_interface.h",
        "patchSetId": 8
      },
      "lineNbr": 94,
      "author": {
        "id": 5077
      },
      "writtenOn": "2018-08-28T06:53:35Z",
      "side": 1,
      "message": "*Very* nice that you don\u0027t allow modifying the frame!",
      "revId": "5032e7564f690fba87ee1f97065c6d44628d5628",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "84da073a_30981666",
        "filename": "api/media_transport_interface.h",
        "patchSetId": 8
      },
      "lineNbr": 102,
      "author": {
        "id": 5077
      },
      "writtenOn": "2018-08-28T06:53:35Z",
      "side": 1,
      "message": "+1 - payload type (as an 8-bit number) is an RTP concept.",
      "revId": "5032e7564f690fba87ee1f97065c6d44628d5628",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e9201297_1fc11c70",
        "filename": "api/media_transport_interface.h",
        "patchSetId": 8
      },
      "lineNbr": 105,
      "author": {
        "id": 5077
      },
      "writtenOn": "2018-08-28T06:53:35Z",
      "side": 1,
      "message": "Why not vector\u003cuint_8\u003e ?",
      "revId": "5032e7564f690fba87ee1f97065c6d44628d5628",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ff61a03b_19849c64",
        "filename": "api/media_transport_interface.h",
        "patchSetId": 8
      },
      "lineNbr": 106,
      "author": {
        "id": 5126
      },
      "writtenOn": "2018-08-27T01:50:41Z",
      "side": 1,
      "message": "By making the members `const`, you ensure that MediaTransportEncodedAudioFrame instances aren\u0027t movable, which they otherwise could be (and would benefit from, since they store some of their state on the heap). Is this a good choice?",
      "revId": "5032e7564f690fba87ee1f97065c6d44628d5628",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "780bf007_3a00025b",
        "filename": "api/media_transport_interface.h",
        "patchSetId": 8
      },
      "lineNbr": 110,
      "author": {
        "id": 5077
      },
      "writtenOn": "2018-08-28T06:53:35Z",
      "side": 1,
      "message": "An idea: since this interface is just one method, could we replace it with passing a lambda to the transport instead?",
      "revId": "5032e7564f690fba87ee1f97065c6d44628d5628",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e20ce7e2_1aa38581",
        "filename": "api/media_transport_interface.h",
        "patchSetId": 8
      },
      "lineNbr": 113,
      "author": {
        "id": 5126
      },
      "writtenOn": "2018-08-27T01:50:41Z",
      "side": 1,
      "message": "Genuinely an unsigned 64-bit integer, or just large? (If the latter, prefer to use int64_t.)",
      "range": {
        "startLine": 113,
        "startChar": 22,
        "endLine": 113,
        "endChar": 30
      },
      "revId": "5032e7564f690fba87ee1f97065c6d44628d5628",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "11b699aa_1e839e3c",
        "filename": "api/media_transport_interface.h",
        "patchSetId": 8
      },
      "lineNbr": 117,
      "author": {
        "id": 5126
      },
      "writtenOn": "2018-08-27T01:50:41Z",
      "side": 1,
      "message": "Why is the destructor not public?",
      "revId": "5032e7564f690fba87ee1f97065c6d44628d5628",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6ef6368f_7551a9e3",
        "filename": "api/media_transport_interface.h",
        "patchSetId": 8
      },
      "lineNbr": 122,
      "author": {
        "id": 5077
      },
      "writtenOn": "2018-08-28T06:53:35Z",
      "side": 1,
      "message": "Do we really want to mix sending/receiving in one class? We\u0027ve been working to get rid of such constructs in both the old VideoEngine and VoiceEngine.",
      "revId": "5032e7564f690fba87ee1f97065c6d44628d5628",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5385773b_0dcf5492",
        "filename": "api/media_transport_interface.h",
        "patchSetId": 8
      },
      "lineNbr": 134,
      "author": {
        "id": 5126
      },
      "writtenOn": "2018-08-27T01:50:41Z",
      "side": 1,
      "message": "Yes, please simplify the interface in this manner if possible. It\u0027s usually worth it to make tests a bit more complex if it makes the production code simpler and more robust.\n\nAdditionally: Does the sink ever change during the lifetime of the MediaTransportInterface instance? If not, prefer to make this a constructor argument instead. (Which would keep it out of the interface, probably simplifying things further.)",
      "revId": "5032e7564f690fba87ee1f97065c6d44628d5628",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "55bbe9d2_b5c89400",
        "filename": "api/media_transport_interface.h",
        "patchSetId": 8
      },
      "lineNbr": 146,
      "author": {
        "id": 5126
      },
      "writtenOn": "2018-08-27T01:50:41Z",
      "side": 1,
      "message": "Why is the destructor not public?",
      "revId": "5032e7564f690fba87ee1f97065c6d44628d5628",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    }
  ]
}