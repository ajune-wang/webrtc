{
  "comments": [
    {
      "key": {
        "uuid": "cefd7f2c_af341e51",
        "filename": "rtc_base/task_queue_stdlib.cc",
        "patchSetId": 7
      },
      "lineNbr": 154,
      "author": {
        "id": 5234
      },
      "writtenOn": "2018-11-06T09:32:28Z",
      "side": 1,
      "message": "I think a min-heap is the natural data structure for the list of pending tasks. Is that easily accessible in the C++ standard library? If not, std::map is likely good enough, since we don\u0027t expect a very large number of delayed task.",
      "range": {
        "startLine": 154,
        "startChar": 2,
        "endLine": 154,
        "endChar": 10
      },
      "revId": "c9921fc1753f21596bc8f92eee7aa037cac9b32d",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c20ecae5_3d203644",
        "filename": "rtc_base/task_queue_stdlib.cc",
        "patchSetId": 7
      },
      "lineNbr": 154,
      "author": {
        "id": 5126
      },
      "writtenOn": "2018-11-06T10:53:26Z",
      "side": 1,
      "message": "Oh, right, there\u0027s std::priority_queue: https://en.cppreference.com/w/cpp/container/priority_queue\n\nIt\u0027ll use a std::vector for backing storage by default, so it should avoid a bunch of heap allocations compared to std::map.",
      "parentUuid": "cefd7f2c_af341e51",
      "range": {
        "startLine": 154,
        "startChar": 2,
        "endLine": 154,
        "endChar": 10
      },
      "revId": "c9921fc1753f21596bc8f92eee7aa037cac9b32d",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "034bc96b_da874b11",
        "filename": "rtc_base/task_queue_stdlib.cc",
        "patchSetId": 7
      },
      "lineNbr": 154,
      "author": {
        "id": 6219
      },
      "writtenOn": "2018-11-06T21:18:35Z",
      "side": 1,
      "message": "Will do. I can use std::priority_queue in combination with std::greater\u003cT\u003e to ensure the smallest next element is in the queue.",
      "parentUuid": "c20ecae5_3d203644",
      "range": {
        "startLine": 154,
        "startChar": 2,
        "endLine": 154,
        "endChar": 10
      },
      "revId": "c9921fc1753f21596bc8f92eee7aa037cac9b32d",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "de26a5de_ddb5e57b",
        "filename": "rtc_base/task_queue_stdlib.cc",
        "patchSetId": 7
      },
      "lineNbr": 154,
      "author": {
        "id": 6219
      },
      "writtenOn": "2018-11-08T03:16:34Z",
      "side": 1,
      "message": "Ok, std::priority_queue is not very friendly with std::unique_ptr because once an item is put into the queue it cannot be modified (due to inherent ordering of the queue). For example top() can only returns a const reference. I don\u0027t use the unique_ptr for any ordering but it doesn\u0027t matter because just being present in the queue\u0027s entry is enough to stop the extraction of the unique_ptr later. I can do some kind of hack to work around (stripping const, inheriting and overriding std::priority_queue, custom container wrapping std::vector etc) this but I assume that\u0027s not desirable. Any recommendation in this case?",
      "parentUuid": "034bc96b_da874b11",
      "range": {
        "startLine": 154,
        "startChar": 2,
        "endLine": 154,
        "endChar": 10
      },
      "revId": "c9921fc1753f21596bc8f92eee7aa037cac9b32d",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "130a32a4_662f3b16",
        "filename": "rtc_base/task_queue_stdlib.cc",
        "patchSetId": 7
      },
      "lineNbr": 159,
      "author": {
        "id": 5234
      },
      "writtenOn": "2018-11-06T09:32:28Z",
      "side": 1,
      "message": "I take it this initialization applies to random threads not related to any TaskQueue? So that CurrentQueue reliably returns nullptr when called from unrelated threads.",
      "range": {
        "startLine": 159,
        "startChar": 0,
        "endLine": 159,
        "endChar": 73
      },
      "revId": "c9921fc1753f21596bc8f92eee7aa037cac9b32d",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7e2ce4d7_bdc76aa5",
        "filename": "rtc_base/task_queue_stdlib.cc",
        "patchSetId": 7
      },
      "lineNbr": 159,
      "author": {
        "id": 6219
      },
      "writtenOn": "2018-11-06T21:18:35Z",
      "side": 1,
      "message": "Correct. https://en.cppreference.com/w/cpp/language/storage_duration -- it uses \"thread\" storage duration.",
      "parentUuid": "130a32a4_662f3b16",
      "range": {
        "startLine": 159,
        "startChar": 0,
        "endLine": 159,
        "endChar": 73
      },
      "revId": "c9921fc1753f21596bc8f92eee7aa037cac9b32d",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    }
  ]
}