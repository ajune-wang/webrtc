{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "06c9897f_91e3e7b1",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 5234
      },
      "writtenOn": "2022-03-31T07:47:26Z",
      "side": 1,
      "message": "I take it all the affected code lives exclusively on the network thread?",
      "revId": "0fb0808a0edc21d97c40f8926e14e7e7a07c628e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3c543288_075356bc",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 5508
      },
      "writtenOn": "2022-03-31T11:02:08Z",
      "side": 1,
      "message": "Yes - WeakPtr has the added benefit of implicit thread dchecks.",
      "parentUuid": "06c9897f_91e3e7b1",
      "revId": "0fb0808a0edc21d97c40f8926e14e7e7a07c628e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1ad44e2c_8736b2be",
        "filename": "p2p/base/connection.h",
        "patchSetId": 6
      },
      "lineNbr": 352,
      "author": {
        "id": 5234
      },
      "writtenOn": "2022-03-31T07:47:26Z",
      "side": 1,
      "message": "I don\u0027t quite remember how these (single-threaded) weak pointers work. What\u0027s the behavior if the port has been destroyed, will .get() crash, or will it just return nullptr? But it looks like not all callers check for null ptr. \n\nIs the intention to handle that more gracefully, or is the point just to transform any use-after-free errors into more obvious null ptr crashes?",
      "range": {
        "startLine": 352,
        "startChar": 24,
        "endLine": 352,
        "endChar": 37
      },
      "revId": "0fb0808a0edc21d97c40f8926e14e7e7a07c628e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0be9fde2_d049aad4",
        "filename": "p2p/base/connection.h",
        "patchSetId": 6
      },
      "lineNbr": 352,
      "author": {
        "id": 5508
      },
      "writtenOn": "2022-03-31T11:02:08Z",
      "side": 1,
      "message": "get() will return nullptr for an expired object. But in the case where port() is used for e.g. sigslot registration, there\u0027s still a problem with the cached pointer held by the sigslot instance.\n\nThe intention of this CL is to introduce the concept of managed pointers. They\u0027ll help with catching regressions and might also point out existing issues (and in those cases, transform uaf to nullptr deref). Moving forward though, there are a few things such as clearing up the ownership rules, getting rid of sigslot etc, that needs to happen.",
      "parentUuid": "1ad44e2c_8736b2be",
      "range": {
        "startLine": 352,
        "startChar": 24,
        "endLine": 352,
        "endChar": 37
      },
      "revId": "0fb0808a0edc21d97c40f8926e14e7e7a07c628e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5f3d841b_a5a4f691",
        "filename": "p2p/base/connection.h",
        "patchSetId": 6
      },
      "lineNbr": 352,
      "author": {
        "id": 5234
      },
      "writtenOn": "2022-03-31T12:13:22Z",
      "side": 1,
      "message": "Ack. Do you know any particular place where you know we should add a check for an expired object? I see none in this cl.",
      "parentUuid": "0be9fde2_d049aad4",
      "range": {
        "startLine": 352,
        "startChar": 24,
        "endLine": 352,
        "endChar": 37
      },
      "revId": "0fb0808a0edc21d97c40f8926e14e7e7a07c628e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "19a875e6_3424ee66",
        "filename": "p2p/base/connection.h",
        "patchSetId": 6
      },
      "lineNbr": 352,
      "author": {
        "id": 5508
      },
      "writtenOn": "2022-03-31T12:41:15Z",
      "side": 1,
      "message": "I\u0027ve addressed all the ones I\u0027m aware of in separate CLs. However, they\u0027ve all pointed to the general problem of using raw pointers being the problem.\n\nAn example of how those problems manifest themselves though is how Port deletes Connection objects. In one place, the Destroy() method is used and in another place (dtor) a `delete` is used. The `delete` operation is basically the workaround that avoids obvious uaf port_ pointers from being used and why you don\u0027t see explicit checks. The use of Destroy() however, hides the lifetime problem because it asynchronously queues a deletion of a Connection object that has a pointer to the port object. While I believe we\u0027ve fixed places where a uaf potential exists, the use of a WeakPtr should help us out with finding more and a potential next step of using the weak ptr could be to replace the pending_deletion_ flag with using the weak port pointer.",
      "parentUuid": "5f3d841b_a5a4f691",
      "range": {
        "startLine": 352,
        "startChar": 24,
        "endLine": 352,
        "endChar": 37
      },
      "revId": "0fb0808a0edc21d97c40f8926e14e7e7a07c628e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "At least one maximum vote for label \u0027Code-Review\u0027 is required"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader AND -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader AND -label:Code-Review=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Code-Review=MAX,user=non_uploader"],"failingAtoms":["label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1"]}
      },
      "patchSetCommitId": "0fb0808a0edc21d97c40f8926e14e7e7a07c628e",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforced_gerrit"]}
      },
      "submittabilityExpressionResult": {},
      "overrideExpressionResult": {},
      "patchSetCommitId": "0fb0808a0edc21d97c40f8926e14e7e7a07c628e",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}