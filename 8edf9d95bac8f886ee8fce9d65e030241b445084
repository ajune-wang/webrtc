{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "45e2ae3e_7bf43a6f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5634
      },
      "writtenOn": "2023-01-24T04:03:51Z",
      "side": 1,
      "message": "Drive-by comment....",
      "revId": "8edf9d95bac8f886ee8fce9d65e030241b445084",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7fb75cfd_9c52f661",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5142
      },
      "writtenOn": "2023-01-24T12:37:55Z",
      "side": 1,
      "message": "To std::move or not to std::move. I prefer moving to const\u0026 because it lets callee decide. See comments",
      "revId": "8edf9d95bac8f886ee8fce9d65e030241b445084",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6372e411_8d1135de",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 17470
      },
      "writtenOn": "2023-01-25T11:39:50Z",
      "side": 1,
      "message": "Decided to go with the pass-by-value + move() model, which I think I got everywhere.\n\nThanks all!",
      "revId": "8edf9d95bac8f886ee8fce9d65e030241b445084",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b34dc6be_068a57f4",
        "filename": "api/video/video_frame_metadata.cc",
        "patchSetId": 2
      },
      "lineNbr": 143,
      "author": {
        "id": 20299
      },
      "writtenOn": "2023-01-24T11:56:55Z",
      "side": 1,
      "message": "consider pass by const-reference here too",
      "range": {
        "startLine": 143,
        "startChar": 34,
        "endLine": 143,
        "endChar": 61
      },
      "revId": "8edf9d95bac8f886ee8fce9d65e030241b445084",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "25bf8a7c_e9a46301",
        "filename": "api/video/video_frame_metadata.cc",
        "patchSetId": 2
      },
      "lineNbr": 143,
      "author": {
        "id": 17470
      },
      "writtenOn": "2023-01-25T11:39:50Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "b34dc6be_068a57f4",
      "range": {
        "startLine": 143,
        "startChar": 34,
        "endLine": 143,
        "endChar": 61
      },
      "revId": "8edf9d95bac8f886ee8fce9d65e030241b445084",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0cf7956c_20379473",
        "filename": "api/video/video_frame_metadata.cc",
        "patchSetId": 2
      },
      "lineNbr": 144,
      "author": {
        "id": 5142
      },
      "writtenOn": "2023-01-24T12:37:55Z",
      "side": 1,
      "message": "Personally I would keep the argument as std::vector\u003cuint32_t\u003e because then the caller can decide whether to std::move() or copy, and unlike const\u0026, this allows passing r-values e.g.\n\n// Works without having to create a local variable in order to pass the argument.\nmetadata.SetCsrcs({1, 2, 3});\n\nHowever in order for this not to result in unnecessary copies, you do need to explicitly move-assign it.\n\n```\n  csrcs_ \u003d std::move(csrcs);\n```",
      "revId": "8edf9d95bac8f886ee8fce9d65e030241b445084",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b8b8b60a_5d8c7a80",
        "filename": "api/video/video_frame_metadata.cc",
        "patchSetId": 2
      },
      "lineNbr": 144,
      "author": {
        "id": 17470
      },
      "writtenOn": "2023-01-25T11:39:50Z",
      "side": 1,
      "message": "Done, thanks.",
      "parentUuid": "0cf7956c_20379473",
      "revId": "8edf9d95bac8f886ee8fce9d65e030241b445084",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e718d036_1563e951",
        "filename": "api/video/video_frame_metadata.h",
        "patchSetId": 2
      },
      "lineNbr": 92,
      "author": {
        "id": 5142
      },
      "writtenOn": "2023-01-24T12:37:55Z",
      "side": 1,
      "message": "Considering we are returning by value, is there any benefit to restricting this to const as opposed to \"std::vector\u003cuint32_t\u003e\"? This prevents the callee to std::move the return value",
      "revId": "8edf9d95bac8f886ee8fce9d65e030241b445084",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4dfdb548_9ca68f36",
        "filename": "api/video/video_frame_metadata.h",
        "patchSetId": 2
      },
      "lineNbr": 92,
      "author": {
        "id": 17470
      },
      "writtenOn": "2023-01-25T11:39:50Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e718d036_1563e951",
      "revId": "8edf9d95bac8f886ee8fce9d65e030241b445084",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "13564308_0ab29b9d",
        "filename": "api/video/video_frame_metadata.h",
        "patchSetId": 2
      },
      "lineNbr": 93,
      "author": {
        "id": 20299
      },
      "writtenOn": "2023-01-24T11:56:55Z",
      "side": 1,
      "message": "I believe passing by const-reference is preferred here.",
      "range": {
        "startLine": 93,
        "startChar": 16,
        "endLine": 93,
        "endChar": 37
      },
      "revId": "8edf9d95bac8f886ee8fce9d65e030241b445084",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "19e1d0e6_d717ae6b",
        "filename": "api/video/video_frame_metadata.h",
        "patchSetId": 2
      },
      "lineNbr": 93,
      "author": {
        "id": 17470
      },
      "writtenOn": "2023-01-25T11:39:50Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "13564308_0ab29b9d",
      "range": {
        "startLine": 93,
        "startChar": 16,
        "endLine": 93,
        "endChar": 37
      },
      "revId": "8edf9d95bac8f886ee8fce9d65e030241b445084",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "89d1a8c8_31ecf1cc",
        "filename": "modules/rtp_rtcp/source/frame_transformer_factory_unittest.cc",
        "patchSetId": 2
      },
      "lineNbr": 69,
      "author": {
        "id": 5634
      },
      "writtenOn": "2023-01-24T04:03:51Z",
      "side": 1,
      "message": "do you want to add a few EXPECT_EQ here to check that the new metadata is the same as the old metadata?",
      "revId": "8edf9d95bac8f886ee8fce9d65e030241b445084",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3d42cb96_927a2294",
        "filename": "modules/rtp_rtcp/source/frame_transformer_factory_unittest.cc",
        "patchSetId": 2
      },
      "lineNbr": 69,
      "author": {
        "id": 20299
      },
      "writtenOn": "2023-01-24T11:56:55Z",
      "side": 1,
      "message": "I added a lot of these checks here: https://webrtc-review.googlesource.com/c/src/+/290989\n\nFeel free to copy to your heart\u0027s content",
      "parentUuid": "89d1a8c8_31ecf1cc",
      "revId": "8edf9d95bac8f886ee8fce9d65e030241b445084",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "88f00bbb_154672f2",
        "filename": "modules/rtp_rtcp/source/frame_transformer_factory_unittest.cc",
        "patchSetId": 2
      },
      "lineNbr": 69,
      "author": {
        "id": 17470
      },
      "writtenOn": "2023-01-25T11:39:50Z",
      "side": 1,
      "message": "Added a simple CSRC field and expected that\u0027s the same, as it\u0027s all I\u0027m touching in this cl. Let\u0027s add some more comprehensive testing when working on expanding the clone.",
      "parentUuid": "3d42cb96_927a2294",
      "revId": "8edf9d95bac8f886ee8fce9d65e030241b445084",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e7950219_c1508f05",
        "filename": "modules/rtp_rtcp/source/rtp_sender_video.cc",
        "patchSetId": 2
      },
      "lineNbr": 479,
      "author": {
        "id": 20299
      },
      "writtenOn": "2023-01-24T11:56:55Z",
      "side": 1,
      "message": "and here",
      "range": {
        "startLine": 479,
        "startChar": 4,
        "endLine": 479,
        "endChar": 31
      },
      "revId": "8edf9d95bac8f886ee8fce9d65e030241b445084",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "12b9a969_d69242b6",
        "filename": "modules/rtp_rtcp/source/rtp_sender_video.cc",
        "patchSetId": 2
      },
      "lineNbr": 479,
      "author": {
        "id": 17470
      },
      "writtenOn": "2023-01-25T11:39:50Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "e7950219_c1508f05",
      "range": {
        "startLine": 479,
        "startChar": 4,
        "endLine": 479,
        "endChar": 31
      },
      "revId": "8edf9d95bac8f886ee8fce9d65e030241b445084",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dddf527e_fc716833",
        "filename": "modules/rtp_rtcp/source/rtp_sender_video.cc",
        "patchSetId": 2
      },
      "lineNbr": 536,
      "author": {
        "id": 20299
      },
      "writtenOn": "2023-01-24T11:56:55Z",
      "side": 1,
      "message": "I am not super happy about setting this value sticky for following frames and would prefer to pass it as an argument to AllocatePacket. But given the interactions with the stateful UpdateHeaderSizes method in RTPSender it might be necessary, so I guess we might need to do it this way?",
      "range": {
        "startLine": 536,
        "startChar": 0,
        "endLine": 536,
        "endChar": 31
      },
      "revId": "8edf9d95bac8f886ee8fce9d65e030241b445084",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f2ba5fab_7ed64888",
        "filename": "modules/rtp_rtcp/source/rtp_sender_video.cc",
        "patchSetId": 2
      },
      "lineNbr": 536,
      "author": {
        "id": 17470
      },
      "writtenOn": "2023-01-25T11:39:50Z",
      "side": 1,
      "message": "It\u0027s definitely clunky. Leaving unresolved to discuss with WebRTC owners I\u0027m about to add.",
      "parentUuid": "dddf527e_fc716833",
      "range": {
        "startLine": 536,
        "startChar": 0,
        "endLine": 536,
        "endChar": 31
      },
      "revId": "8edf9d95bac8f886ee8fce9d65e030241b445084",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4a0dfc7b_0261fd07",
        "filename": "modules/rtp_rtcp/source/rtp_sender_video.cc",
        "patchSetId": 2
      },
      "lineNbr": 536,
      "author": {
        "id": 5019
      },
      "writtenOn": "2023-01-25T12:17:58Z",
      "side": 1,
      "message": "I agree that making csrcs_ a member variable was a mistake, csrcs changes all the time (calculated per frame).\n\nI\u0027ve sketched a suggestion to change it:\nhttps://webrtc-review.googlesource.com/c/src/+/291334",
      "parentUuid": "f2ba5fab_7ed64888",
      "range": {
        "startLine": 536,
        "startChar": 0,
        "endLine": 536,
        "endChar": 31
      },
      "revId": "8edf9d95bac8f886ee8fce9d65e030241b445084",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5965c2ef_53d351e6",
        "filename": "modules/rtp_rtcp/source/rtp_sender_video.h",
        "patchSetId": 2
      },
      "lineNbr": 102,
      "author": {
        "id": 20299
      },
      "writtenOn": "2023-01-24T11:56:55Z",
      "side": 1,
      "message": "consider passing by const-reference here too",
      "range": {
        "startLine": 102,
        "startChar": 17,
        "endLine": 102,
        "endChar": 44
      },
      "revId": "8edf9d95bac8f886ee8fce9d65e030241b445084",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a139ec91_9465a976",
        "filename": "modules/rtp_rtcp/source/rtp_sender_video.h",
        "patchSetId": 2
      },
      "lineNbr": 102,
      "author": {
        "id": 5142
      },
      "writtenOn": "2023-01-24T12:37:55Z",
      "side": 1,
      "message": "I\u0027d argue for std::move() on all layers",
      "parentUuid": "5965c2ef_53d351e6",
      "range": {
        "startLine": 102,
        "startChar": 17,
        "endLine": 102,
        "endChar": 44
      },
      "revId": "8edf9d95bac8f886ee8fce9d65e030241b445084",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "800992db_b91fa3e8",
        "filename": "modules/rtp_rtcp/source/rtp_sender_video.h",
        "patchSetId": 2
      },
      "lineNbr": 102,
      "author": {
        "id": 20299
      },
      "writtenOn": "2023-01-24T15:38:44Z",
      "side": 1,
      "message": "Presentation by Herb Sutter who argues for pass-by-const-reference for these type of methods (p24 and onwards): https://github.com/CppCon/CppCon2014/tree/master/Presentations/Back%20to%20the%20Basics!%20Essentials%20of%20Modern%20C%2B%2B%20Style\nyoutube: https://www.youtube.com/watch?v\u003dxnqTKD8uD64\u0026t\u003d5589s\n\n\nHowever, I don\u0027t think it really matters much in this particular case so I\u0027m fine with either.",
      "parentUuid": "a139ec91_9465a976",
      "range": {
        "startLine": 102,
        "startChar": 17,
        "endLine": 102,
        "endChar": 44
      },
      "revId": "8edf9d95bac8f886ee8fce9d65e030241b445084",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fb68a4ea_73a47ebf",
        "filename": "modules/rtp_rtcp/source/rtp_sender_video.h",
        "patchSetId": 2
      },
      "lineNbr": 102,
      "author": {
        "id": 5142
      },
      "writtenOn": "2023-01-24T15:47:07Z",
      "side": 1,
      "message": "OK either way is fine with me as well",
      "parentUuid": "800992db_b91fa3e8",
      "range": {
        "startLine": 102,
        "startChar": 17,
        "endLine": 102,
        "endChar": 44
      },
      "revId": "8edf9d95bac8f886ee8fce9d65e030241b445084",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "006e06ac_aa9e5ae1",
        "filename": "modules/rtp_rtcp/source/rtp_sender_video.h",
        "patchSetId": 2
      },
      "lineNbr": 102,
      "author": {
        "id": 5019
      },
      "writtenOn": "2023-01-24T15:58:11Z",
      "side": 1,
      "message": "(drive by comment)\nin c++17 we have guaranteed copy elision, \nso passing by value might be slightly better (+1 to Henrik\u0027s comment)\nhttps://abseil.io/tips/117",
      "parentUuid": "fb68a4ea_73a47ebf",
      "range": {
        "startLine": 102,
        "startChar": 17,
        "endLine": 102,
        "endChar": 44
      },
      "revId": "8edf9d95bac8f886ee8fce9d65e030241b445084",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a3b34a2e_a8af02ea",
        "filename": "modules/rtp_rtcp/source/rtp_sender_video.h",
        "patchSetId": 2
      },
      "lineNbr": 102,
      "author": {
        "id": 17470
      },
      "writtenOn": "2023-01-25T11:39:50Z",
      "side": 1,
      "message": "Going with pass-by-value and move() everywhere, just as it seems to be the majority view.",
      "parentUuid": "006e06ac_aa9e5ae1",
      "range": {
        "startLine": 102,
        "startChar": 17,
        "endLine": 102,
        "endChar": 44
      },
      "revId": "8edf9d95bac8f886ee8fce9d65e030241b445084",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c264dfd0_1499a760",
        "filename": "modules/rtp_rtcp/source/rtp_sender_video_frame_transformer_delegate.cc",
        "patchSetId": 2
      },
      "lineNbr": 110,
      "author": {
        "id": 20299
      },
      "writtenOn": "2023-01-24T11:56:55Z",
      "side": 1,
      "message": "Do we need to have yet another copy of csrcs_ here or can we use the VideoFrameMetadata member?",
      "range": {
        "startLine": 110,
        "startChar": 0,
        "endLine": 110,
        "endChar": 31
      },
      "revId": "8edf9d95bac8f886ee8fce9d65e030241b445084",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2e40897f_6f3646c9",
        "filename": "modules/rtp_rtcp/source/rtp_sender_video_frame_transformer_delegate.cc",
        "patchSetId": 2
      },
      "lineNbr": 110,
      "author": {
        "id": 17470
      },
      "writtenOn": "2023-01-25T11:39:50Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c264dfd0_1499a760",
      "range": {
        "startLine": 110,
        "startChar": 0,
        "endLine": 110,
        "endChar": 31
      },
      "revId": "8edf9d95bac8f886ee8fce9d65e030241b445084",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    }
  ]
}