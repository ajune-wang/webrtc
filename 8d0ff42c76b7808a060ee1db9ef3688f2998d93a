{
  "comments": [
    {
      "key": {
        "uuid": "81bf02ce_2b8bd023",
        "filename": "rtc_base/stringutils.h",
        "patchSetId": 6
      },
      "lineNbr": 82,
      "author": {
        "id": 5126
      },
      "writtenOn": "2018-05-30T12:45:26Z",
      "side": 1,
      "message": "We very often call these with std::string arguments, with manual .c_str() conversions. Could you make overloads that take const std::string\u0026 arguments too?\n\nAnd now we also have the option to use absl::string_view. It\u0027s not free to convert const char* to string_view (you need to compute the string length), but it should be almost free to convert std::string to string_view. So maybe we should have overloads for const char* and string_view?\n\nAlso, do we *ever* do anything with the return value other than compare it to 0? It seems like bool-returning functions called Str[N]CaseEq might be more appropriate...",
      "revId": "8d0ff42c76b7808a060ee1db9ef3688f2998d93a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ffce1163_d0d877f0",
        "filename": "rtc_base/stringutils.h",
        "patchSetId": 6
      },
      "lineNbr": 82,
      "author": {
        "id": 5234
      },
      "writtenOn": "2018-05-30T13:07:19Z",
      "side": 1,
      "message": "\u003e And now we also have the option to use absl::string_view. It\u0027s not free to convert const char* to string_view (you need to compute the string length), but it should be almost free to convert std::string to string_view. So maybe we should have overloads for const char* and string_view?\n\nMakes sense from an interface point of view, but to implement it properly and support strings with embedded NUL characters, simply wrapping strcasecmp/_stricmp isn\u0027t good enough.\n\nSpeaking of abseil, are there any suitable string comparison functions in abseil we could use, instead of rolling our own rtc::-functions?",
      "parentUuid": "81bf02ce_2b8bd023",
      "revId": "8d0ff42c76b7808a060ee1db9ef3688f2998d93a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "920b7e33_2d439118",
        "filename": "rtc_base/stringutils.h",
        "patchSetId": 6
      },
      "lineNbr": 82,
      "author": {
        "id": 5126
      },
      "writtenOn": "2018-05-31T08:12:16Z",
      "side": 1,
      "message": "I don\u0027t think we\u0027re ever interested in strings with embedded nulls. I would either ignore that problem, or DCHECK that the string doesn\u0027t have nulls in it.\n\nThe first thing I did when you sent me this CL was to look for existing Abseil functions, but I didn\u0027t find them. absl/strings/ascii.h has functions for converting the case of characters and whole strings, but no comparison functions. Hmmm... but absl/strings/match.h has absl::StartsWithIgnoreCase and absl::EndsWithIgnoreCase, which are close to what we want. I guess most of our uses of rtc::StrNCaseCmp could usefully be converted to use absl::StartsWithIgnoreCase instead, but we still need a function to compare two *whole* strings.\n\nI guess the ambitious option is to ask the Abseil people about it, and offer to write an absl::EqualsWithIgnoreCase function. It looks really simple to do---they already have that function as an implementation detail of the StartsWith... and EndsWith... functions.",
      "parentUuid": "ffce1163_d0d877f0",
      "revId": "8d0ff42c76b7808a060ee1db9ef3688f2998d93a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5bddf514_2b097bc0",
        "filename": "rtc_base/stringutils.h",
        "patchSetId": 6
      },
      "lineNbr": 82,
      "author": {
        "id": 5234
      },
      "writtenOn": "2018-05-31T08:36:49Z",
      "side": 1,
      "message": "\u003e I don\u0027t think we\u0027re ever interested in strings with embedded nulls. I would either ignore that problem, or DCHECK that the string doesn\u0027t have nulls in it.\n\nSilent ignore sounds dangerous (but no change to current code passing .c_str()). When handling evil data received from the network, we risk interpreting the data in inconsistent ways if some uses do silent and implicit truncation at the first NUL character. I seem to recall real-world problems when doing that in the context of x.509 certificates.\n \n\u003e I guess the ambitious option is to ask the Abseil people about it, and offer to write an absl::EqualsWithIgnoreCase function. It looks really simple to do---they already have that function as an implementation detail of the StartsWith... and EndsWith... functions.\n\nFor our uses, I also think we want ascii only. We don\u0027t want to drag in any unicode case tables. It\u0027s not clear to me what abseil\u0027s *IgnoreCase functions do? (And the posix strcasecmp is kind-of broken in this respect too, as far as it\u0027s connected to the broken design of locales).\n\nIs a github account required for posting abseil feature requests?",
      "parentUuid": "920b7e33_2d439118",
      "revId": "8d0ff42c76b7808a060ee1db9ef3688f2998d93a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "10acb51a_1ae2d9dd",
        "filename": "rtc_base/stringutils.h",
        "patchSetId": 6
      },
      "lineNbr": 82,
      "author": {
        "id": 5126
      },
      "writtenOn": "2018-05-31T09:06:50Z",
      "side": 1,
      "message": "I\u0027m pretty sure they\u0027re ASCII-only---they appear to be using the case conversion functions from absl/strings/ascii.h in the implementation. Ideally there would be documentation promising that, though.\n\nI would imagine you need a Github account in order to interact with them on Github. But there\u0027s also a public mailing list: https://groups.google.com/forum/#!forum/abseil-io",
      "parentUuid": "5bddf514_2b097bc0",
      "revId": "8d0ff42c76b7808a060ee1db9ef3688f2998d93a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    }
  ]
}