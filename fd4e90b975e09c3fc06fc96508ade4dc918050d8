{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "e5776979_9f61dc82",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 10,
      "author": {
        "id": 5019
      },
      "writtenOn": "2021-01-20T09:08:04Z",
      "side": 1,
      "message": "cause?",
      "range": {
        "startLine": 10,
        "startChar": 53,
        "endLine": 10,
        "endChar": 57
      },
      "revId": "fd4e90b975e09c3fc06fc96508ade4dc918050d8",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e96c23d5_c81e66f7",
        "filename": "modules/video_coding/codecs/vp9/libvpx_vp9_encoder.cc",
        "patchSetId": 1
      },
      "lineNbr": 765,
      "author": {
        "id": 5019
      },
      "writtenOn": "2021-01-20T09:08:04Z",
      "side": 1,
      "message": "btw, while changing this block, would it make sense to increase the version here?",
      "range": {
        "startLine": 765,
        "startChar": 20,
        "endLine": 765,
        "endChar": 21
      },
      "revId": "fd4e90b975e09c3fc06fc96508ade4dc918050d8",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4ef8c416_0ab2c6c5",
        "filename": "modules/video_coding/codecs/vp9/test/vp9_impl_unittest.cc",
        "patchSetId": 1
      },
      "lineNbr": 42,
      "author": {
        "id": 5019
      },
      "writtenOn": "2021-01-20T09:08:04Z",
      "side": 1,
      "message": "looks unused (with WillByDefault/WillRepeateadly/WillOnce accepting lambdas and other functors directly, usage of the Invoke should be extremely rare)",
      "range": {
        "startLine": 42,
        "startChar": 17,
        "endLine": 42,
        "endChar": 23
      },
      "revId": "fd4e90b975e09c3fc06fc96508ade4dc918050d8",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1c78a02f_5c211d7a",
        "filename": "modules/video_coding/codecs/vp9/test/vp9_impl_unittest.cc",
        "patchSetId": 1
      },
      "lineNbr": 2075,
      "author": {
        "id": 5019
      },
      "writtenOn": "2021-01-20T09:08:04Z",
      "side": 1,
      "message": "This double doesn\u0027t look like mock, look like fake\nhttps://testing.googleblog.com/2013/07/testing-on-toilet-know-your-test-doubles.html",
      "range": {
        "startLine": 2075,
        "startChar": 10,
        "endLine": 2075,
        "endChar": 14
      },
      "revId": "fd4e90b975e09c3fc06fc96508ade4dc918050d8",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a8e59227_b497ad05",
        "filename": "modules/video_coding/codecs/vp9/test/vp9_impl_unittest.cc",
        "patchSetId": 1
      },
      "lineNbr": 2083,
      "author": {
        "id": 5019
      },
      "writtenOn": "2021-01-20T09:08:04Z",
      "side": 1,
      "message": "Please prefer regular function name style\nhttps://google.github.io/styleguide/cppguide.html#Function_Names",
      "range": {
        "startLine": 2083,
        "startChar": 0,
        "endLine": 2083,
        "endChar": 8
      },
      "revId": "fd4e90b975e09c3fc06fc96508ade4dc918050d8",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d6fde8da_9fc2db43",
        "filename": "modules/video_coding/codecs/vp9/test/vp9_impl_unittest.cc",
        "patchSetId": 1
      },
      "lineNbr": 2097,
      "author": {
        "id": 5019
      },
      "writtenOn": "2021-01-20T09:08:04Z",
      "side": 1,
      "message": "to avoid manual memory management, may be do other way around: assert first, then do arrange:\n\nauto vpx \u003d std::make_unique\u003cNiceMock\u003cMockLibvpxInterface\u003e\u003e();\n// Assert\nvpx_image_t img \u003d {};\nON_CALL(*vpx, img_wrap).WillByDefault(img_wrap(\u0026img));\nEXPECT_CALL(*vpx, codec_control(...);\n// Arrange\nLibvpxVp9Encoder encoder({}, std::move(vpx), tirals);\n...\n// Act\nencoder.InitEncode(...);",
      "range": {
        "startLine": 2097,
        "startChar": 0,
        "endLine": 2097,
        "endChar": 56
      },
      "revId": "fd4e90b975e09c3fc06fc96508ade4dc918050d8",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f5ffc849_4b04445c",
        "filename": "modules/video_coding/codecs/vp9/test/vp9_impl_unittest.cc",
        "patchSetId": 1
      },
      "lineNbr": 2110,
      "author": {
        "id": 5019
      },
      "writtenOn": "2021-01-20T09:08:04Z",
      "side": 1,
      "message": "Likely you mean ON_CALL\n\nhttps://github.com/google/googletest/blob/master/docs/gmock_cook_book.md#setting-expectations",
      "range": {
        "startLine": 2110,
        "startChar": 2,
        "endLine": 2110,
        "endChar": 13
      },
      "revId": "fd4e90b975e09c3fc06fc96508ade4dc918050d8",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3e0d545e_de8ac03b",
        "filename": "modules/video_coding/codecs/vp9/test/vp9_impl_unittest.cc",
        "patchSetId": 1
      },
      "lineNbr": 2113,
      "author": {
        "id": 5019
      },
      "writtenOn": "2021-01-20T09:08:04Z",
      "side": 1,
      "message": "Would it work to add an extra matcher An\u003cvpx_svc_extra_cfg_t*\u003e to the AllOf?\nIf not, may be use MatcherCast or SafeMatcherCast.\nhttps://github.com/google/googletest/blob/master/docs/gmock_cheat_sheet.md#adapters-for-matchers",
      "range": {
        "startLine": 2113,
        "startChar": 26,
        "endLine": 2113,
        "endChar": 55
      },
      "revId": "fd4e90b975e09c3fc06fc96508ade4dc918050d8",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1d1f9fe7_9f50baf9",
        "filename": "modules/video_coding/codecs/vp9/test/vp9_impl_unittest.cc",
        "patchSetId": 1
      },
      "lineNbr": 2115,
      "author": {
        "id": 5019
      },
      "writtenOn": "2021-01-20T09:08:04Z",
      "side": 1,
      "message": "May be you mean Each(0) (or Each(Eq(0)) if you think that reads better)\nyou probably shouldn\u0027t test that there are 12 elements in the speed_per_layer array.\n(or at least it would be safer to use constant VPX_MAX_LAYERS instead of the constant 12)",
      "range": {
        "startLine": 2115,
        "startChar": 36,
        "endLine": 2115,
        "endChar": 68
      },
      "revId": "fd4e90b975e09c3fc06fc96508ade4dc918050d8",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ced4476f_58bfeeb9",
        "filename": "modules/video_coding/codecs/vp9/test/vp9_impl_unittest.cc",
        "patchSetId": 1
      },
      "lineNbr": 2146,
      "author": {
        "id": 5019
      },
      "writtenOn": "2021-01-20T09:08:04Z",
      "side": 1,
      "message": "Theres is matcher A\u003cvpx_svc_extra_cfg_t*\u003e() for this use case\n(or An\u003cvpx_svc_extra_cfg_t*\u003e() - if you think that reads better)\n\nhttps://github.com/google/googletest/blob/master/docs/gmock_cheat_sheet.md#wildcard",
      "range": {
        "startLine": 2146,
        "startChar": 34,
        "endLine": 2146,
        "endChar": 63
      },
      "revId": "fd4e90b975e09c3fc06fc96508ade4dc918050d8",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1373480e_c19ec908",
        "filename": "modules/video_coding/codecs/vp9/test/vp9_impl_unittest.cc",
        "patchSetId": 1
      },
      "lineNbr": 2149,
      "author": {
        "id": 5019
      },
      "writtenOn": "2021-01-20T09:08:04Z",
      "side": 1,
      "message": "VP9?\n(afaik you shouldn\u0027t copy code from prod to test)",
      "range": {
        "startLine": 2149,
        "startChar": 37,
        "endLine": 2149,
        "endChar": 40
      },
      "revId": "fd4e90b975e09c3fc06fc96508ade4dc918050d8",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ea3a9e17_bcf2a9ed",
        "filename": "modules/video_coding/codecs/vp9/test/vp9_impl_unittest.cc",
        "patchSetId": 1
      },
      "lineNbr": 2149,
      "author": {
        "id": 5019
      },
      "writtenOn": "2021-01-20T09:08:04Z",
      "side": 1,
      "message": "TypedEq\u003cint\u003e(8)",
      "range": {
        "startLine": 2149,
        "startChar": 55,
        "endLine": 2149,
        "endChar": 70
      },
      "revId": "fd4e90b975e09c3fc06fc96508ade4dc918050d8",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "793f7216_cd4afd5c",
        "filename": "modules/video_coding/codecs/vp9/test/vp9_impl_unittest.cc",
        "patchSetId": 1
      },
      "lineNbr": 2182,
      "author": {
        "id": 5019
      },
      "writtenOn": "2021-01-20T09:08:04Z",
      "side": 1,
      "message": "that reads to me as \"expect nothing\", why do you have this line?\n\n(vpx already wrapped into NiceMock not bother by the \"Uninteresting mock function call\" messages)",
      "range": {
        "startLine": 2181,
        "startChar": 0,
        "endLine": 2182,
        "endChar": 37
      },
      "revId": "fd4e90b975e09c3fc06fc96508ade4dc918050d8",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "72bf1447_2ec2d487",
        "filename": "modules/video_coding/codecs/vp9/test/vp9_impl_unittest.cc",
        "patchSetId": 1
      },
      "lineNbr": 2287,
      "author": {
        "id": 5019
      },
      "writtenOn": "2021-01-20T09:08:04Z",
      "side": 1,
      "message": "you may use type ::testing::Unused\nor an extra matcher WithArg\u003cN\u003e (or WithArgs\u003cN1, N2...\u003e) to avoid mentioning unused parameters.",
      "range": {
        "startLine": 2287,
        "startChar": 26,
        "endLine": 2287,
        "endChar": 63
      },
      "revId": "fd4e90b975e09c3fc06fc96508ade4dc918050d8",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3f66dad8_2eb1cb08",
        "filename": "modules/video_coding/codecs/vp9/test/vp9_impl_unittest.cc",
        "patchSetId": 1
      },
      "lineNbr": 2296,
      "author": {
        "id": 5019
      },
      "writtenOn": "2021-01-20T09:08:04Z",
      "side": 1,
      "message": "s/vp8/vp9/g",
      "range": {
        "startLine": 2296,
        "startChar": 44,
        "endLine": 2296,
        "endChar": 47
      },
      "revId": "fd4e90b975e09c3fc06fc96508ade4dc918050d8",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c28bbb8b_1d2ee33b",
        "filename": "modules/video_coding/codecs/vp9/test/vp9_impl_unittest.cc",
        "patchSetId": 1
      },
      "lineNbr": 2312,
      "author": {
        "id": 5019
      },
      "writtenOn": "2021-01-20T09:08:04Z",
      "side": 1,
      "message": "would you find it cleaner to rewrite it into two ON_CALL instead?\nON_CALL(*vpx, codec_control(_, VP9E_SET_SVC_REF_FRAME_CONFIG, A\u003cvpx_svc_ref_frame_config_t*\u003e())).WillByDefault(SaveArgPointee\u003c2\u003e(*stored_ref));\n// SetArgPointee\u003cN\u003e(value) probably won\u0027t work, as is, since it takes parameter by value,\n// but may work if you write SetArgPointee\u003c2\u003e(std::ref(stored_refs))\nON_CALL(*vpx, codec_control(_, VP9E_GET_SVC_REF_FRAME_CONFIG, A\u003cvpx_svc_ref_frame_config_t*\u003e())).WillByDefault(WithArg\u003c2\u003e([](vpx_svc_ref_frame_config_t* ref) { *ref \u003d *stored_ref; return VPX_CODEC_OK));\n\nhttps://github.com/google/googletest/blob/master/docs/gmock_cheat_sheet.md#side-effects",
      "range": {
        "startLine": 2294,
        "startChar": 2,
        "endLine": 2312,
        "endChar": 0
      },
      "revId": "fd4e90b975e09c3fc06fc96508ade4dc918050d8",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    }
  ]
}