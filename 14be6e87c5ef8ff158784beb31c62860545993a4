{
  "comments": [
    {
      "key": {
        "uuid": "5eeaadc3_2375c560",
        "filename": "modules/rtp_rtcp/source/receive_statistics_impl.cc",
        "patchSetId": 1
      },
      "lineNbr": 122,
      "author": {
        "id": 5531
      },
      "writtenOn": "2018-08-09T11:56:03Z",
      "side": 1,
      "message": "It would be nice if it\u0027s possible to write this without the helper function to make it easier to follow what actually happens. Maybe that would allow us to flatten the conditionals as well?",
      "range": {
        "startLine": 119,
        "startChar": 8,
        "endLine": 122,
        "endChar": 60
      },
      "revId": "14be6e87c5ef8ff158784beb31c62860545993a4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1eb6045f_2c44cd75",
        "filename": "modules/rtp_rtcp/source/receive_statistics_impl.cc",
        "patchSetId": 1
      },
      "lineNbr": 122,
      "author": {
        "id": 5150
      },
      "writtenOn": "2018-08-10T13:14:20Z",
      "side": 1,
      "message": "Tried it, but imo it doesn\u0027t seem simpler. The key part would be:\nconstexpr uint16_t kBreakpoint \u003d (std::numeric_limits\u003cuint16_t\u003e::max() \u003e\u003e 1) + 1;\nif (static_cast\u003cuint16_t\u003e(received_seq_first_ - header.sequenceNumber) \u003c kBreakpoint \u0026\u0026\n    static_cast\u003cuint16_t\u003e(header.sequenceNumber - (received_seq_first_ - \n                                                   max_reordering_threshold_)) \u003c kBreakpoint)\nThere might also be some extra conditions dealing with exact equality.",
      "parentUuid": "5eeaadc3_2375c560",
      "range": {
        "startLine": 119,
        "startChar": 8,
        "endLine": 122,
        "endChar": 60
      },
      "revId": "14be6e87c5ef8ff158784beb31c62860545993a4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7f24ebd0_e40591ef",
        "filename": "modules/rtp_rtcp/source/receive_statistics_impl.cc",
        "patchSetId": 1
      },
      "lineNbr": 122,
      "author": {
        "id": 5531
      },
      "writtenOn": "2018-08-13T09:29:18Z",
      "side": 1,
      "message": "Seems easier to follow to me, more code (although some verbosity could be skipped by using % instead of static casts, which probably is a good idea anyway) but it\u0027s all in one place \u003d I don\u0027t have to jump to the definition of IsNewer... and I don\u0027t have to keep that definition in my head.\n\nThough, if I\u0027m reading this correctly, is\u0027t it equivalent to the following (assuming that we use in\u0027ts rather than uint16_t for some of the values to avoid accidental wrap-arounds):\nconstexpr int kWrap \u003d std::numeric_limits\u003cuint16_t\u003e::max();\n\nif (header.sequenceNumber \u003c received_seq_first_){\n  received_seq_first_ \u003d header.sequenceNumber;\n} else if (header.sequenceNumber \u003e received_seq_first_-max_reordering_threshold_ + kWrap) {\n  received_seq_first_backwards_wraps_ \u003d 1;\n  received_seq_first_ \u003d header.sequenceNumber;\n}",
      "parentUuid": "1eb6045f_2c44cd75",
      "range": {
        "startLine": 119,
        "startChar": 8,
        "endLine": 122,
        "endChar": 60
      },
      "revId": "14be6e87c5ef8ff158784beb31c62860545993a4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e3d593b7_ac0123a6",
        "filename": "modules/rtp_rtcp/source/receive_statistics_impl.cc",
        "patchSetId": 1
      },
      "lineNbr": 122,
      "author": {
        "id": 5150
      },
      "writtenOn": "2018-08-15T14:40:14Z",
      "side": 1,
      "message": "Done as discussed offline.",
      "parentUuid": "7f24ebd0_e40591ef",
      "range": {
        "startLine": 119,
        "startChar": 8,
        "endLine": 122,
        "endChar": 60
      },
      "revId": "14be6e87c5ef8ff158784beb31c62860545993a4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "746603fb_3a9603fb",
        "filename": "modules/rtp_rtcp/source/receive_statistics_impl.cc",
        "patchSetId": 1
      },
      "lineNbr": 225,
      "author": {
        "id": 5531
      },
      "writtenOn": "2018-08-09T11:56:03Z",
      "side": 1,
      "message": "Could these be combined into one?",
      "range": {
        "startLine": 225,
        "startChar": 19,
        "endLine": 225,
        "endChar": 76
      },
      "revId": "14be6e87c5ef8ff158784beb31c62860545993a4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ebd0130f_36e04250",
        "filename": "modules/rtp_rtcp/source/receive_statistics_impl.cc",
        "patchSetId": 1
      },
      "lineNbr": 225,
      "author": {
        "id": 5150
      },
      "writtenOn": "2018-08-10T13:14:20Z",
      "side": 1,
      "message": "No, because of the problem you point out below.",
      "parentUuid": "746603fb_3a9603fb",
      "range": {
        "startLine": 225,
        "startChar": 19,
        "endLine": 225,
        "endChar": 76
      },
      "revId": "14be6e87c5ef8ff158784beb31c62860545993a4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "55708752_84c055e8",
        "filename": "modules/rtp_rtcp/source/receive_statistics_impl.cc",
        "patchSetId": 1
      },
      "lineNbr": 226,
      "author": {
        "id": 5531
      },
      "writtenOn": "2018-08-09T11:56:03Z",
      "side": 1,
      "message": "Does this mean that the reported software_fallback could go from 1 to UINT16_MAX between two reports if we are unlucky? If so, are we sure that it is withing specified behavior and doesn\u0027t risk breaking assumptions in client code? (For instance if the extended_seq_max delta is used to calculate number of packets received)",
      "range": {
        "startLine": 226,
        "startChar": 11,
        "endLine": 226,
        "endChar": 27
      },
      "revId": "14be6e87c5ef8ff158784beb31c62860545993a4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c581aad8_3da550b4",
        "filename": "modules/rtp_rtcp/source/receive_statistics_impl.cc",
        "patchSetId": 1
      },
      "lineNbr": 226,
      "author": {
        "id": 5150
      },
      "writtenOn": "2018-08-10T13:14:20Z",
      "side": 1,
      "message": "Good point. The reverse wraps should be used for cumulated_lost_packets, but not for extended_highest_sequence_number. Fixed",
      "parentUuid": "55708752_84c055e8",
      "range": {
        "startLine": 226,
        "startChar": 11,
        "endLine": 226,
        "endChar": 27
      },
      "revId": "14be6e87c5ef8ff158784beb31c62860545993a4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a6ae2890_4715c55d",
        "filename": "modules/rtp_rtcp/source/receive_statistics_impl.h",
        "patchSetId": 1
      },
      "lineNbr": 67,
      "author": {
        "id": 5531
      },
      "writtenOn": "2018-08-09T11:56:03Z",
      "side": 1,
      "message": "Why change the type? Do we want this to wrap?",
      "range": {
        "startLine": 67,
        "startChar": 11,
        "endLine": 67,
        "endChar": 36
      },
      "revId": "14be6e87c5ef8ff158784beb31c62860545993a4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "63fc2c8f_df3ac098",
        "filename": "modules/rtp_rtcp/source/receive_statistics_impl.h",
        "patchSetId": 1
      },
      "lineNbr": 67,
      "author": {
        "id": 5150
      },
      "writtenOn": "2018-08-10T13:14:20Z",
      "side": 1,
      "message": "Since it refers to sequence numbers, only the values that fit in uint16_t make sense. It\u0027s not neccessary to change the type, but we\u0027re doing arithmetic and comparisons on this and sequence numbers so I think it makes sense to avoid mixing types.",
      "parentUuid": "a6ae2890_4715c55d",
      "range": {
        "startLine": 67,
        "startChar": 11,
        "endLine": 67,
        "endChar": 36
      },
      "revId": "14be6e87c5ef8ff158784beb31c62860545993a4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e683426d_0cdb37a1",
        "filename": "modules/rtp_rtcp/source/receive_statistics_impl.h",
        "patchSetId": 1
      },
      "lineNbr": 76,
      "author": {
        "id": 5531
      },
      "writtenOn": "2018-08-09T11:56:03Z",
      "side": 1,
      "message": "int should work for this right? Or would that mess up other calculations?",
      "range": {
        "startLine": 76,
        "startChar": 11,
        "endLine": 76,
        "endChar": 46
      },
      "revId": "14be6e87c5ef8ff158784beb31c62860545993a4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "14a87c42_4b8fe7f8",
        "filename": "modules/rtp_rtcp/source/receive_statistics_impl.h",
        "patchSetId": 1
      },
      "lineNbr": 76,
      "author": {
        "id": 5150
      },
      "writtenOn": "2018-08-10T13:14:20Z",
      "side": 1,
      "message": "Would probably work, but the wrap counter |received_seq_wraps_| uses uint16_t and I think it makes sense to have the same type. Since we\u0027re shifting, it is rather important that the value isn\u0027t negative. An unsigned type makes this clear.",
      "parentUuid": "e683426d_0cdb37a1",
      "range": {
        "startLine": 76,
        "startChar": 11,
        "endLine": 76,
        "endChar": 46
      },
      "revId": "14be6e87c5ef8ff158784beb31c62860545993a4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "767a06e1_c43a6fc5",
        "filename": "modules/rtp_rtcp/source/receive_statistics_impl.h",
        "patchSetId": 1
      },
      "lineNbr": 76,
      "author": {
        "id": 5531
      },
      "writtenOn": "2018-08-13T09:29:18Z",
      "side": 1,
      "message": "An unsigned type will hide accidental negative numbers by wrapping, making it hard to detect. Using int in calculations and then doing a dchecked cast for final output would detect accidents in sign usage.\n\nI see the point of seeing uint as semantic markup, the problem is that it\u0027s not really managed like a constraint by the compiler, making it easy to hide bugs. We have had bugs due to storing -1 in uints, hidden by the fact that -1 is perfectly valid to store in an uint in c++.",
      "parentUuid": "14a87c42_4b8fe7f8",
      "range": {
        "startLine": 76,
        "startChar": 11,
        "endLine": 76,
        "endChar": 46
      },
      "revId": "14be6e87c5ef8ff158784beb31c62860545993a4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1c12a25d_3a0bc26c",
        "filename": "modules/rtp_rtcp/source/receive_statistics_impl.h",
        "patchSetId": 1
      },
      "lineNbr": 76,
      "author": {
        "id": 5150
      },
      "writtenOn": "2018-08-15T14:40:14Z",
      "side": 1,
      "message": "Changed to uint32_t as discussed offline.",
      "parentUuid": "767a06e1_c43a6fc5",
      "range": {
        "startLine": 76,
        "startChar": 11,
        "endLine": 76,
        "endChar": 46
      },
      "revId": "14be6e87c5ef8ff158784beb31c62860545993a4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5c241cc6_38ff80e2",
        "filename": "modules/rtp_rtcp/source/receive_statistics_unittest.cc",
        "patchSetId": 1
      },
      "lineNbr": 225,
      "author": {
        "id": 5531
      },
      "writtenOn": "2018-08-09T09:15:53Z",
      "side": 1,
      "message": "I think this would show the intention better:\nheader1_.sequenceNumber \u003d static_cast\u003cuint16_t\u003e(-1);",
      "range": {
        "startLine": 225,
        "startChar": 2,
        "endLine": 225,
        "endChar": 28
      },
      "revId": "14be6e87c5ef8ff158784beb31c62860545993a4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "03d586c2_c4f15859",
        "filename": "modules/rtp_rtcp/source/receive_statistics_unittest.cc",
        "patchSetId": 1
      },
      "lineNbr": 225,
      "author": {
        "id": 5150
      },
      "writtenOn": "2018-08-09T11:04:16Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5c241cc6_38ff80e2",
      "range": {
        "startLine": 225,
        "startChar": 2,
        "endLine": 225,
        "endChar": 28
      },
      "revId": "14be6e87c5ef8ff158784beb31c62860545993a4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a3148f0a_ca9a258a",
        "filename": "modules/rtp_rtcp/source/receive_statistics_unittest.cc",
        "patchSetId": 1
      },
      "lineNbr": 231,
      "author": {
        "id": 5531
      },
      "writtenOn": "2018-08-09T09:15:53Z",
      "side": 1,
      "message": "Does this fail before your changes?",
      "range": {
        "startLine": 231,
        "startChar": 0,
        "endLine": 231,
        "endChar": 40
      },
      "revId": "14be6e87c5ef8ff158784beb31c62860545993a4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f8da5126_a68d61e1",
        "filename": "modules/rtp_rtcp/source/receive_statistics_unittest.cc",
        "patchSetId": 1
      },
      "lineNbr": 231,
      "author": {
        "id": 5150
      },
      "writtenOn": "2018-08-09T11:04:16Z",
      "side": 1,
      "message": "Yes, both tests fail before the change. This test also fails with after the change if we omit the \n\"if (received_seq_first_ \u003c header.sequenceNumber) received_seq_first_backwards_wraps_ \u003d 1;\" part.",
      "parentUuid": "a3148f0a_ca9a258a",
      "range": {
        "startLine": 231,
        "startChar": 0,
        "endLine": 231,
        "endChar": 40
      },
      "revId": "14be6e87c5ef8ff158784beb31c62860545993a4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    }
  ]
}