{
  "comments": [
    {
      "key": {
        "uuid": "10a7d7d4_0a51e5a8",
        "filename": "modules/rtp_rtcp/source/rtp_generic_frame_descriptor_extension_unittest.cc",
        "patchSetId": 2
      },
      "lineNbr": 80,
      "author": {
        "id": 5019
      },
      "writtenOn": "2019-01-18T15:22:07Z",
      "side": 1,
      "message": "why change EXPECTs into ASSERTs?\n\nI read ASSERT as \u0027there is absolutely no point to continue test if this fails\u0027\nAnother meaning even stricter: \u0027test will crash if this condition not true, better fail test than crash it\u0027.",
      "range": {
        "startLine": 80,
        "startChar": 2,
        "endLine": 80,
        "endChar": 8
      },
      "revId": "24050a6062fec90a4487804c96d627d8a62ce878",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b4f7090a_f6707af4",
        "filename": "modules/rtp_rtcp/source/rtp_generic_frame_descriptor_extension_unittest.cc",
        "patchSetId": 2
      },
      "lineNbr": 80,
      "author": {
        "id": 5147
      },
      "writtenOn": "2019-01-18T15:50:05Z",
      "side": 1,
      "message": "I use it to convey one of two meanings.\n1. The practical one of not continuing when the test would crash.\n2. Distinguishing between the test focus (expectation), and assumptions which, if broken, render the test irrelevant (assertions).\nIn the case of this test, it\u0027s not clear why some flags are tested, but others aren\u0027t. After all, only LastPacketInSubFrame is the focus of the test. What about kFlagMoreDependencies, for example?",
      "parentUuid": "10a7d7d4_0a51e5a8",
      "range": {
        "startLine": 80,
        "startChar": 2,
        "endLine": 80,
        "endChar": 8
      },
      "revId": "24050a6062fec90a4487804c96d627d8a62ce878",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5e7261fe_0c7cdc97",
        "filename": "modules/rtp_rtcp/source/rtp_generic_frame_descriptor_extension_unittest.cc",
        "patchSetId": 2
      },
      "lineNbr": 104,
      "author": {
        "id": 5019
      },
      "writtenOn": "2019-01-18T15:22:07Z",
      "side": 1,
      "message": "It become less clear what is the meaning of this bool parameter\n\nif you believe code under test behave differently when you set and when you clear the flag, make two tests.",
      "range": {
        "startLine": 104,
        "startChar": 12,
        "endLine": 104,
        "endChar": 22
      },
      "revId": "24050a6062fec90a4487804c96d627d8a62ce878",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "59d52448_fafd54df",
        "filename": "modules/rtp_rtcp/source/rtp_generic_frame_descriptor_extension_unittest.cc",
        "patchSetId": 2
      },
      "lineNbr": 104,
      "author": {
        "id": 5147
      },
      "writtenOn": "2019-01-18T15:50:05Z",
      "side": 1,
      "message": "What if Parse() always thinks this flag is set? An unparameterized test would not catch that. When testing the parsing of bools, IMHO, one should check both cases. It would be overkill to write two tests, though. How about a local variable for documentation, such as flag_value?",
      "parentUuid": "5e7261fe_0c7cdc97",
      "range": {
        "startLine": 104,
        "startChar": 12,
        "endLine": 104,
        "endChar": 22
      },
      "revId": "24050a6062fec90a4487804c96d627d8a62ce878",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "95f349b0_cf2bda1b",
        "filename": "modules/rtp_rtcp/source/rtp_generic_frame_descriptor_extension_unittest.cc",
        "patchSetId": 2
      },
      "lineNbr": 104,
      "author": {
        "id": 5019
      },
      "writtenOn": "2019-01-18T16:33:58Z",
      "side": 1,
      "message": "I think parameterized test are much bigger overkill compare to creating two test cases.\n\nParameterized test works good when you have 10 scenarios and 10 configurations and you want 10*10 tests.",
      "parentUuid": "59d52448_fafd54df",
      "range": {
        "startLine": 104,
        "startChar": 12,
        "endLine": 104,
        "endChar": 22
      },
      "revId": "24050a6062fec90a4487804c96d627d8a62ce878",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "12233779_d7179671",
        "filename": "modules/rtp_rtcp/source/rtp_generic_frame_descriptor_extension_unittest.cc",
        "patchSetId": 2
      },
      "lineNbr": 104,
      "author": {
        "id": 5147
      },
      "writtenOn": "2019-01-18T20:50:12Z",
      "side": 1,
      "message": "This CL (see link below) further parameterizes the test, so I think it makes sense to keep this here.\nhttps://webrtc-review.googlesource.com/c/src/+/118444",
      "parentUuid": "95f349b0_cf2bda1b",
      "range": {
        "startLine": 104,
        "startChar": 12,
        "endLine": 104,
        "endChar": 22
      },
      "revId": "24050a6062fec90a4487804c96d627d8a62ce878",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c38010f3_9ccea0a5",
        "filename": "modules/rtp_rtcp/source/rtp_generic_frame_descriptor_extension_unittest.cc",
        "patchSetId": 2
      },
      "lineNbr": 104,
      "author": {
        "id": 5019
      },
      "writtenOn": "2019-01-21T10:21:27Z",
      "side": 1,
      "message": "I feel strongly against using value-parameterized tests in this case:\n\nunnamed/arbitrary_bool parameter makes tests harder to understand.\nI checked motivations for using value-parameterized tests:\nhttps://github.com/google/googletest/blob/master/googletest/docs/advanced.md#value-parameterized-tests\nLook like use in this CL fall into last category, \u0027data-driven\u0027 test, but to me it seems it also match the warning next to it: \u0027this feature is easy to abuse\u0027.\n\nSuggestion. Since you think duplication each test is overkill, add single extra test:\n,ParseFrameBoundaryFlagsAsFalseFromZeroValue) {\n uint8_t kRaw \u003d {0}\n ...\n EXPECT_FALSE(FirstPacketInSubFrame());\n EXPECT_FALSE(LastPacketInSubFrame());\n // in the next CL these two checks can be guarded with if (!use_deprecated_flag_)\n EXPECT_FALSE(FirstSubframeInFrame());\n EXPECT_FALSE(LastSubframeInFrame());\n}\n\n\n(Though, I\u0027m not sure how expanding this test is relevant to the change description.)",
      "parentUuid": "12233779_d7179671",
      "range": {
        "startLine": 104,
        "startChar": 12,
        "endLine": 104,
        "endChar": 22
      },
      "revId": "24050a6062fec90a4487804c96d627d8a62ce878",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9964fb15_648393fa",
        "filename": "modules/rtp_rtcp/source/rtp_generic_frame_descriptor_extension_unittest.cc",
        "patchSetId": 2
      },
      "lineNbr": 104,
      "author": {
        "id": 5147
      },
      "writtenOn": "2019-01-21T13:12:18Z",
      "side": 1,
      "message": "I politely disagree, as explained offline, but it\u0027s your final decision. The changes have been made. PTAL.",
      "parentUuid": "c38010f3_9ccea0a5",
      "range": {
        "startLine": 104,
        "startChar": 12,
        "endLine": 104,
        "endChar": 22
      },
      "revId": "24050a6062fec90a4487804c96d627d8a62ce878",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    }
  ]
}