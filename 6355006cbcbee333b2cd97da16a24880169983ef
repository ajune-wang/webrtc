{
  "comments": [
    {
      "key": {
        "uuid": "cdc26a1d_652cacd8",
        "filename": "modules/video_coding/packet_buffer.h",
        "patchSetId": 4
      },
      "lineNbr": 46,
      "author": {
        "id": 5527
      },
      "writtenOn": "2019-10-23T08:28:13Z",
      "side": 1,
      "message": "Should have asked the first time, but why?",
      "range": {
        "startLine": 46,
        "startChar": 47,
        "endLine": 46,
        "endChar": 67
      },
      "revId": "6355006cbcbee333b2cd97da16a24880169983ef",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e26a9faa_34a6a7fb",
        "filename": "modules/video_coding/packet_buffer.h",
        "patchSetId": 4
      },
      "lineNbr": 46,
      "author": {
        "id": 5019
      },
      "writtenOn": "2019-10-23T08:43:53Z",
      "side": 1,
      "message": "to stress caller shouldn\u0027t discard result.\nthat can be particular useful for InsertPadding function where user might forget that that function can emit ready frames too.\n\nDo you find it too verbose and prefer to rely on unit tests to ensure result is not missed?",
      "parentUuid": "cdc26a1d_652cacd8",
      "range": {
        "startLine": 46,
        "startChar": 47,
        "endLine": 46,
        "endChar": 67
      },
      "revId": "6355006cbcbee333b2cd97da16a24880169983ef",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "955dd932_79ff99aa",
        "filename": "modules/video_coding/packet_buffer.h",
        "patchSetId": 4
      },
      "lineNbr": 46,
      "author": {
        "id": 5527
      },
      "writtenOn": "2019-10-23T10:58:58Z",
      "side": 1,
      "message": "You make a good point about InsertPadding where having frames returned might be a bit unexpected, so keep the annotation.\n\nBut I still find it weird since choosing whether to use or ignore some result is something we do every time we call a function.\n\nWhat I would like is some annotation that can be used to warn (not a MUST) and a macro to suppress that warning if we really want to discard the result.\n\nLooking at https://github.com/abseil/abseil-cpp/blob/master/absl/base/attributes.h#L439, maybe we could define something like:\n  \n  #define RTC_WARN_UNUSED ABSL_MUST_USE_RESULT\n  #define RTC_IGNORE_RESULT(x) static_cast\u003cvoid\u003e(x)\n\nNot for this CL of course.",
      "parentUuid": "e26a9faa_34a6a7fb",
      "range": {
        "startLine": 46,
        "startChar": 47,
        "endLine": 46,
        "endChar": 67
      },
      "revId": "6355006cbcbee333b2cd97da16a24880169983ef",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a36a4a06_dc7cc89b",
        "filename": "modules/video_coding/packet_buffer.h",
        "patchSetId": 4
      },
      "lineNbr": 46,
      "author": {
        "id": 5019
      },
      "writtenOn": "2019-10-23T11:44:20Z",
      "side": 1,
      "message": "functions are different.\nfor functions where main purpose is side effect it is ok to ignore result.\nfor functions with main purpose of returning value and without important side effects it is not helpful to call the function if you do not use the result.\nThese functions both have a significant side effect and return important result.\nThat might be confusing, and that why annotation is there to remind to use the result.\n\ntechnically ABSL_MUST_USE_RESULT is a warning.\nbut in webrtc we treat all warnings as errors.\n\n(side note: I strongly oppose adding new macros.\nhttps://google.github.io/styleguide/cppguide.html#Preprocessor_Macros\nin this case inline function looks strictly better than a macro)",
      "parentUuid": "955dd932_79ff99aa",
      "range": {
        "startLine": 46,
        "startChar": 47,
        "endLine": 46,
        "endChar": 67
      },
      "revId": "6355006cbcbee333b2cd97da16a24880169983ef",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ba2a94b1_f169dba0",
        "filename": "modules/video_coding/packet_buffer_unittest.cc",
        "patchSetId": 4
      },
      "lineNbr": 35,
      "author": {
        "id": 5527
      },
      "writtenOn": "2019-10-23T10:58:58Z",
      "side": 1,
      "message": "Not sure which way is best to ignore a result. Abseil seem to suggest a cast to void is the way to do it.",
      "range": {
        "startLine": 35,
        "startChar": 5,
        "endLine": 35,
        "endChar": 17
      },
      "revId": "6355006cbcbee333b2cd97da16a24880169983ef",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "158c4151_e55095e6",
        "filename": "modules/video_coding/packet_buffer_unittest.cc",
        "patchSetId": 4
      },
      "lineNbr": 35,
      "author": {
        "id": 5019
      },
      "writtenOn": "2019-10-23T11:44:20Z",
      "side": 1,
      "message": "it is equivalent to the templated static_cast\u003cvoid\u003e(x) function.\nExcept that this version is not templated nor by output, nor by input parameter,\nand uses name to better reflect the intent.\n\nI was considering to add function to the InsertResult struct itself,\nlike done e.g. in https://github.com/grpc/grpc/blob/master/include/grpcpp/impl/codegen/status.h#L123\nbut then it will be available for non-test code also. Something I prefer to avoid until there is a use case for that.",
      "parentUuid": "ba2a94b1_f169dba0",
      "range": {
        "startLine": 35,
        "startChar": 5,
        "endLine": 35,
        "endChar": 17
      },
      "revId": "6355006cbcbee333b2cd97da16a24880169983ef",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5b6cfc01_be254efe",
        "filename": "video/rtp_video_stream_receiver.cc",
        "patchSetId": 4
      },
      "lineNbr": 579,
      "author": {
        "id": 5527
      },
      "writtenOn": "2019-10-23T08:28:13Z",
      "side": 1,
      "message": "video_coding::PacketBuffer::InsertResult\u0026\u0026 ?",
      "range": {
        "startLine": 579,
        "startChar": 4,
        "endLine": 579,
        "endChar": 44
      },
      "revId": "6355006cbcbee333b2cd97da16a24880169983ef",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "37018120_a7866436",
        "filename": "video/rtp_video_stream_receiver.cc",
        "patchSetId": 4
      },
      "lineNbr": 579,
      "author": {
        "id": 5019
      },
      "writtenOn": "2019-10-23T08:43:53Z",
      "side": 1,
      "message": "why?\nthis use-case is not among allowed use cases for r-value reference https://google.github.io/styleguide/cppguide.html#Rvalue_references\n\nAs for optimiaztion, there is copy-elision not to worry about the performance.\nhttps://abseil.io/tips/117",
      "parentUuid": "5b6cfc01_be254efe",
      "range": {
        "startLine": 579,
        "startChar": 4,
        "endLine": 579,
        "endChar": 44
      },
      "revId": "6355006cbcbee333b2cd97da16a24880169983ef",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c895d8c3_3446d079",
        "filename": "video/rtp_video_stream_receiver.cc",
        "patchSetId": 4
      },
      "lineNbr": 579,
      "author": {
        "id": 5527
      },
      "writtenOn": "2019-10-23T10:58:58Z",
      "side": 1,
      "message": "I was thinking about overhead, but yes as you pointed out copy-elision will take care of that.",
      "parentUuid": "37018120_a7866436",
      "range": {
        "startLine": 579,
        "startChar": 4,
        "endLine": 579,
        "endChar": 44
      },
      "revId": "6355006cbcbee333b2cd97da16a24880169983ef",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    }
  ]
}