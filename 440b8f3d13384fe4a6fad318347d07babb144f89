{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "20119084_0e1af5cb",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 7755
      },
      "writtenOn": "2020-10-21T06:46:34Z",
      "side": 1,
      "message": "mbonadei: since this is basically a compiler thing can you take a look please?\nThe style is used in a couple of other places so it makes sense to have this consistent.",
      "revId": "440b8f3d13384fe4a6fad318347d07babb144f89",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "aa290a94_a75f161d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5087
      },
      "writtenOn": "2020-10-21T13:19:57Z",
      "side": 1,
      "message": "Adding Karl for a comment.\n\nIn the meantime I am running presubmit.",
      "revId": "440b8f3d13384fe4a6fad318347d07babb144f89",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9a9471c5_83802310",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5234
      },
      "writtenOn": "2020-10-21T14:16:28Z",
      "side": 1,
      "message": "I\u0027m tempted to say it\u0027s a compiler bug; it makes the \"enumeration value ... not handled in switch [-Wswitch]\" warning a bit less useful, if the compiler\u0027s data flow analysis isn\u0027t willing to assume that run-time enum values are valid. Please consider filing a gcc bug report. Example program:\n\nenum class Foo { A, B, C };\n\nconst char *Lookup(Foo foo)\n{\n  switch (foo) {\n    case Foo::A: return \"a\";\n    case Foo::B: return \"b\";\n    case Foo::C: return \"c\";\n  }\n}\n\nI\u0027ve tried \n  g++ -Wall -c enum-warnings.cc # g++ (Debian 9.3.0-15) 9.3.0)\nand\n  g++-10 -Wall -c enum-warnings.cc # g++-10 (Debian 10.1.0-6) 10.1.0\n\nand I get the same warning you report. clang++ (I\u0027m testing with 9.0.1) doesn\u0027t warn. But if one of the case labels is deleted, both compilers warn both about an unhandled enum value and control reaching end of non-void function.\n\nIs there some easy way to add -Wno-return-type when building with gcc, until this is fixed?",
      "revId": "440b8f3d13384fe4a6fad318347d07babb144f89",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ee52a05b_f7e7d6ee",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5087
      },
      "writtenOn": "2020-10-21T14:25:27Z",
      "side": 1,
      "message": "Good catch nisse@! It looks like it should be enabled by default: https://clang.llvm.org/docs/DiagnosticsReference.html#wreturn-type.\n\nnisse@, can you open a crbug.com with component Tools\u003eLLVM with this repro (and CC me)?",
      "parentUuid": "9a9471c5_83802310",
      "revId": "440b8f3d13384fe4a6fad318347d07babb144f89",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1079f3d7_884fdc92",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 14590
      },
      "writtenOn": "2020-10-21T14:32:36Z",
      "side": 1,
      "message": "https://gcc.gnu.org/wiki/VerboseDiagnostics#enum_switch\n\n(Also https://gcc.gnu.org/bugzilla/show_bug.cgi?id\u003d87951)\nLooks like gcc guys are not going to \"fix\" it. \n\nTo be honest I don\u0027t mind if the patch is dropped - afterall, it\u0027s only a warning.",
      "parentUuid": "9a9471c5_83802310",
      "revId": "440b8f3d13384fe4a6fad318347d07babb144f89",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4ef9014e_efdbe660",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5087
      },
      "writtenOn": "2020-10-21T14:37:39Z",
      "side": 1,
      "message": "So it is the other way around, no need for the Tools\u003eLLVM bug.\n\nThe issue with landing this is that we will regress again in the future (since we don\u0027t test it) and we are going to make the code less clean to workaround this issue.",
      "parentUuid": "1079f3d7_884fdc92",
      "revId": "440b8f3d13384fe4a6fad318347d07babb144f89",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8e5d256b_fdcc0ff9",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5234
      },
      "writtenOn": "2020-10-22T07:45:55Z",
      "side": 1,
      "message": "Interesting discussion on that bug. It mentions the -fstrict-enums gcc option, but that doesn\u0027t seem to have any effect on warnings. Let\u0027s amend the example as this:\n\nenum class Foo { A, B, C };\n\nconst char *Lookup(Foo foo)\n{\n  switch (foo) {\n    case Foo::A: return \"a\";\n    case Foo::B: return \"b\";\n    case Foo::C: return \"c\";\n  }\n}\n\nFoo OutOfRange() {\n  return Foo(5);\n}\n\nNo matter if I use -fstrict-enums or not, I get a control flow warning on the Lookup function, and no warning on the OutOfRange function, because the latter is apparently perfectly valid C++ according to the standards.\n\nSo then the approach in this cl is likely right after all, and it\u0027s llvm that is a bit lax and doesn\u0027t warn for code that is clearly invalid in case the program constructs out-of-range enum values.",
      "parentUuid": "4ef9014e_efdbe660",
      "revId": "440b8f3d13384fe4a6fad318347d07babb144f89",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4c81bf8e_5424e650",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5087
      },
      "writtenOn": "2020-10-22T07:59:27Z",
      "side": 1,
      "message": "\u003e Interesting discussion on that bug. It mentions the -fstrict-enums gcc option, but that doesn\u0027t seem to have any effect on warnings. Let\u0027s amend the example as this:\n\u003e \n\u003e enum class Foo { A, B, C };\n\u003e \n\u003e const char *Lookup(Foo foo)\n\u003e {\n\u003e   switch (foo) {\n\u003e     case Foo::A: return \"a\";\n\u003e     case Foo::B: return \"b\";\n\u003e     case Foo::C: return \"c\";\n\u003e   }\n\u003e }\n\u003e \n\u003e Foo OutOfRange() {\n\u003e   return Foo(5);\n\u003e }\n\u003e \n\u003e No matter if I use -fstrict-enums or not, I get a control flow warning on the Lookup function, and no warning on the OutOfRange function, because the latter is apparently perfectly valid C++ according to the standards.\n\u003e \n\u003e So then the approach in this cl is likely right after all, and it\u0027s llvm that is a bit lax and doesn\u0027t warn for code that is clearly invalid in case the program constructs out-of-range enum values.\n\nIn this case I would still open a crbug.com on Tools\u003eLLVM and ask them if this is something we can have in clang as well (maybe this is a regression). Because as I said, if we land this we might still regress with time since we almost only have clang on CI.",
      "parentUuid": "8e5d256b_fdcc0ff9",
      "revId": "440b8f3d13384fe4a6fad318347d07babb144f89",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bdbc9af1_a8901952",
        "filename": "AUTHORS",
        "patchSetId": 1
      },
      "lineNbr": 125,
      "author": {
        "id": 5087
      },
      "writtenOn": "2020-10-21T13:19:57Z",
      "side": 1,
      "message": "Netgem S.A.",
      "range": {
        "startLine": 125,
        "startChar": 0,
        "endLine": 125,
        "endChar": 6
      },
      "revId": "440b8f3d13384fe4a6fad318347d07babb144f89",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "faab40c7_89055014",
        "filename": "AUTHORS",
        "patchSetId": 1
      },
      "lineNbr": 125,
      "author": {
        "id": 14590
      },
      "writtenOn": "2020-10-22T08:11:02Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "bdbc9af1_a8901952",
      "range": {
        "startLine": 125,
        "startChar": 0,
        "endLine": 125,
        "endChar": 6
      },
      "revId": "440b8f3d13384fe4a6fad318347d07babb144f89",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ee6369b2_94c2257d",
        "filename": "call/adaptation/video_stream_adapter.cc",
        "patchSetId": 1
      },
      "lineNbr": 608,
      "author": {
        "id": 5087
      },
      "writtenOn": "2020-10-21T13:19:57Z",
      "side": 1,
      "message": "Adding kwiberg@ to decide which style we prefer here and in other places where we have switch (no default and return out of the switch or default with return).",
      "range": {
        "startLine": 607,
        "startChar": 2,
        "endLine": 608,
        "endChar": 29
      },
      "revId": "440b8f3d13384fe4a6fad318347d07babb144f89",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c29b094a_66d84084",
        "filename": "call/adaptation/video_stream_adapter.cc",
        "patchSetId": 1
      },
      "lineNbr": 608,
      "author": {
        "id": 14590
      },
      "writtenOn": "2020-10-21T13:31:54Z",
      "side": 1,
      "message": "FYI: Removed the default here so the compiler could warn if a new element is added to the enum",
      "parentUuid": "ee6369b2_94c2257d",
      "range": {
        "startLine": 607,
        "startChar": 2,
        "endLine": 608,
        "endChar": 29
      },
      "revId": "440b8f3d13384fe4a6fad318347d07babb144f89",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "14ae17c2_67fadcce",
        "filename": "call/adaptation/video_stream_adapter.cc",
        "patchSetId": 1
      },
      "lineNbr": 608,
      "author": {
        "id": 5087
      },
      "writtenOn": "2020-10-21T13:35:11Z",
      "side": 1,
      "message": "Yes, I think this is a good thing (but I suspect we are not doing it in a lot of places).\n\nBut passing this to Karl.",
      "parentUuid": "c29b094a_66d84084",
      "range": {
        "startLine": 607,
        "startChar": 2,
        "endLine": 608,
        "endChar": 29
      },
      "revId": "440b8f3d13384fe4a6fad318347d07babb144f89",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fd0eb221_2dd95266",
        "filename": "call/adaptation/video_stream_adapter.cc",
        "patchSetId": 1
      },
      "lineNbr": 608,
      "author": {
        "id": 5126
      },
      "writtenOn": "2020-10-21T14:40:40Z",
      "side": 1,
      "message": "This looks like what\u0027s recommended by https://abseil.io/tips/147: no `default:` label so that the compiler will remind us if we don\u0027t handle all the enum cases, but still handle the case where none of the switch cases matched.\n\nHowever, RTC_NOTREACHED() is approximately equivalent to RTC_DCHECK(false), which does nothing in production builds; this is why a `return` is needed on the following line. I suspect a lot (most?) of the cases in this CL would be better written as `RTC_CHECK(false)`, with no return statement afterwards.\n\n(Related: https://crbug.com/webrtc/9065 calls for renaming RTC_NOTREACHED to RTC_DCHECK_NOTREACHED; this would allow us to add RTC_CHECK_NOTREACHED, which is what I would really recommend we use here.)",
      "parentUuid": "14ae17c2_67fadcce",
      "range": {
        "startLine": 607,
        "startChar": 2,
        "endLine": 608,
        "endChar": 29
      },
      "revId": "440b8f3d13384fe4a6fad318347d07babb144f89",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    }
  ]
}