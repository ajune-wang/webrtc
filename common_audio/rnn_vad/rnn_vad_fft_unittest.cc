/*
 *  Copyright (c) 2018 The WebRTC project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree. An additional intellectual property rights grant can be found
 *  in the file PATENTS.  All contributing project authors may
 *  be found in the AUTHORS file in the root of the source tree.
 */

#include <array>

#include "common_audio/rnn_vad/common.h"
#include "common_audio/rnn_vad/features_extraction.h"
#include "common_audio/rnn_vad/rnn_vad_fft.h"
#include "common_audio/rnn_vad/test_utils.h"
#include "rtc_base/checks.h"
#include "test/gtest.h"

namespace webrtc {
namespace test {

using rnn_vad::BiQuadFilter;
using rnn_vad::k48kHpfConfig;
using rnn_vad::k48kHpfInitialState;
using rnn_vad::RnnVadFft;

namespace {

// FFT coefficients computed with Kiss FFT.
constexpr std::array<float, k48k20msNumFftCoeffs> kExpectedFftCoeffsReal = {
    -4.6236f, 4.7342f,  -4.6857f, -0.6570f, 10.1290f, -9.8816f, 0.0908f,
    2.7273f,  -0.2640f, 3.4679f,  -5.0903f, 1.8102f,  -0.4294f, 0.1618f,
    -0.0786f, 1.3723f,  -0.8347f, -1.1301f, 0.4822f,  0.9220f,  -0.4847f,
    -0.1167f, -0.3907f, 0.8645f,  -0.2896f, -0.1069f, -0.1973f, 0.2208f,
    0.1127f,  -0.2377f, 0.0730f,  -0.1385f, 0.1004f,  0.2941f,  -0.1617f,
    -0.2737f, 0.2511f,  -0.1248f, 0.2642f,  -0.2516f, 0.0055f,  0.0227f,
    0.1311f,  -0.1168f, -0.0723f, 0.0926f,  -0.0177f, 0.0878f,  -0.0879f,
    -0.0902f, 0.2073f,  -0.1131f, -0.0366f, 0.0539f,  0.0153f,  -0.0303f,
    0.0129f,  -0.0048f, -0.0111f, 0.0405f,  -0.0700f, 0.0753f,  -0.0649f,
    0.0294f,  0.0227f,  -0.0389f, 0.0017f,  0.0494f,  -0.0434f, 0.0102f,
    0.0036f,  -0.0213f, -0.0085f, 0.0533f,  -0.0455f, 0.0116f,  0.0186f,
    0.0042f,  -0.0136f, -0.0395f, 0.0660f,  -0.0621f, 0.0355f,  -0.0214f,
    0.0727f,  -0.0640f, 0.0241f,  -0.0189f, -0.0166f, 0.0160f,  0.0071f,
    0.0219f,  -0.0121f, -0.0650f, 0.0362f,  0.0954f,  -0.1197f, 0.0281f,
    0.0387f,  -0.0566f, 0.0233f,  0.0265f,  -0.0236f, 0.0064f,  -0.0142f,
    0.0147f,  -0.0139f, 0.0128f,  0.0061f,  0.0020f,  0.0014f,  -0.0411f,
    0.0481f,  -0.0300f, 0.0120f,  0.0059f,  -0.0039f, 0.0023f,  -0.0108f,
    0.0174f,  -0.0099f, -0.0119f, 0.0196f,  -0.0122f, -0.0223f, 0.0272f,
    -0.0007f, 0.0094f,  -0.0113f, -0.0222f, 0.0256f,  0.0113f,  -0.0146f,
    0.0112f,  -0.0134f, 0.0023f,  0.0128f,  -0.0264f, -0.0062f, 0.0405f,
    -0.0344f, 0.0445f,  -0.0161f, -0.0206f, -0.0049f, 0.0080f,  0.0008f,
    -0.0232f, 0.0555f,  -0.0351f, 0.0031f,  0.0077f,  0.0012f,  -0.0131f,
    0.0139f,  -0.0070f, -0.0173f, 0.0057f,  0.0325f,  -0.0023f, -0.0489f,
    0.0802f,  -0.1017f, 0.0374f,  0.0322f,  0.0441f,  -0.0993f, 0.0269f,
    0.0090f,  0.0141f,  -0.0283f, 0.0113f,  0.0019f,  0.0130f,  -0.0147f,
    0.0121f,  -0.0143f, 0.0069f,  0.0059f,  -0.0047f, -0.0207f, 0.0352f,
    -0.0229f, 0.0133f,  -0.0438f, 0.0743f,  -0.0412f, -0.0013f, -0.0003f,
    0.0248f,  -0.0183f, 0.0321f,  -0.0659f, 0.0069f,  0.0472f,  -0.0226f,
    0.0061f,  0.0133f,  -0.0386f, -0.0012f, -0.0065f, 0.0628f,  -0.0307f,
    0.0069f,  -0.0116f, -0.0139f, 0.0349f,  -0.0415f, 0.0412f,  0.0061f,
    -0.0490f, 0.0182f,  0.0052f,  0.0066f,  -0.0217f, 0.0054f,  0.0497f,
    -0.0349f, 0.0107f,  -0.0894f, 0.0694f,  0.0246f,  -0.0289f, 0.0121f,
    -0.0209f, 0.0312f,  -0.0075f, -0.0056f, 0.0025f,  -0.0029f, 0.0042f,
    -0.0138f, 0.0091f,  -0.0015f, 0.0026f,  -0.0006f, -0.0081f, 0.0083f,
    0.0021f,  0.0010f,  -0.0134f, 0.0183f,  -0.0212f, 0.0280f,  -0.0182f,
    -0.0042f, 0.0061f,  0.0049f,  0.0001f,  -0.0157f, 0.0304f,  -0.0196f,
    -0.0025f, -0.0063f, 0.0115f,  -0.0032f, -0.0023f, 0.0035f,  -0.0074f,
    0.0151f,  -0.0061f, 0.0026f,  -0.0050f, -0.0041f, 0.0024f,  0.0019f,
    -0.0034f, 0.0048f,  0.0043f,  -0.0085f, 0.0014f,  0.0071f,  -0.0037f,
    -0.0018f, -0.0076f, 0.0126f,  -0.0023f, -0.0047f, -0.0024f, 0.0028f,
    0.0053f,  -0.0096f, 0.0134f,  -0.0082f, -0.0041f, 0.0086f,  -0.0094f,
    0.0086f,  -0.0018f, 0.0009f,  0.0033f,  -0.0114f, 0.0071f,  -0.0009f,
    0.0028f,  -0.0071f, 0.0105f,  -0.0144f, 0.0079f,  -0.0010f, 0.0032f,
    0.0023f,  -0.0120f, 0.0208f,  -0.0142f, 0.0037f,  -0.0083f, 0.0093f,
    -0.0089f, 0.0023f,  0.0042f,  0.0009f,  -0.0044f, 0.0061f,  -0.0076f,
    0.0004f,  0.0048f,  0.0038f,  -0.0091f, 0.0092f,  -0.0071f, -0.0014f,
    0.0045f,  0.0004f,  0.0013f,  -0.0092f, 0.0133f,  -0.0159f, 0.0112f,
    0.0047f,  -0.0181f, 0.0162f,  -0.0054f, -0.0058f, 0.0084f,  -0.0040f,
    0.0026f,  0.0044f,  -0.0115f, 0.0058f,  0.0025f,  -0.0073f, 0.0064f,
    0.0014f,  -0.0086f, 0.0141f,  -0.0047f, -0.0063f, -0.0000f, 0.0065f,
    -0.0083f, 0.0121f,  -0.0187f, 0.0168f,  -0.0082f, -0.0001f, 0.0053f,
    -0.0001f, -0.0030f, 0.0036f,  -0.0092f, 0.0101f,  -0.0095f, 0.0078f,
    -0.0062f, 0.0080f,  -0.0074f, 0.0099f,  -0.0112f, 0.0057f,  -0.0014f,
    -0.0030f, 0.0060f,  -0.0026f, 0.0002f,  -0.0019f, 0.0029f,  -0.0020f,
    -0.0003f, -0.0042f, 0.0142f,  -0.0154f, 0.0047f,  0.0081f,  -0.0070f,
    -0.0065f, 0.0012f,  0.0166f,  -0.0181f, 0.0128f,  -0.0068f, -0.0080f,
    0.0176f,  -0.0086f, -0.0005f, -0.0033f, 0.0067f,  -0.0085f, 0.0086f,
    -0.0017f, -0.0037f, 0.0015f,  0.0124f,  -0.0193f, 0.0058f,  -0.0028f,
    0.0056f,  0.0075f,  -0.0132f, 0.0032f,  0.0056f,  -0.0059f, 0.0050f,
    -0.0023f, -0.0065f, 0.0070f,  0.0014f,  -0.0100f, 0.0101f,  0.0039f,
    -0.0106f, 0.0053f,  -0.0023f, -0.0036f, 0.0086f,  -0.0027f, -0.0023f,
    0.0019f,  -0.0019f, -0.0017f, 0.0068f,  -0.0084f, 0.0077f,  0.0007f,
    -0.0112f, 0.0138f,  -0.0099f, 0.0080f,  -0.0114f, 0.0012f,  0.0054f,
    0.0055f,  -0.0020f, -0.0030f, -0.0002f, -0.0109f, 0.0172f,  -0.0065f,
    0.0006f,  0.0046f,  -0.0102f, 0.0049f,  0.0022f,  -0.0001f, -0.0040f,
    0.0076f,  -0.0131f, 0.0067f,  0.0049f,  -0.0091f, 0.0041f,  0.0046f,
    -0.0065f, 0.0023f,  0.0018f,  0.0021f,  -0.0105f, 0.0122f,  0.0011f,
    -0.0121f, 0.0102f,  -0.0068f, 0.0010f,  -0.0021f, 0.0059f,  0.0015f,
    -0.0052f, 0.0010f,  -0.0009f, 0.0008f,  -0.0006f, -0.0024f, 0.0056f,
    -0.0002f, -0.0016f, 0.0009f,  0.0022f,  -0.0080f, 0.0078f,  -0.0011f,
    -0.0019f, -0.0002f, 0.0047f,  -0.0096f, 0.0027f,  0.0049f,  -0.0043f,
    0.0043f,  -0.0024f, -0.0033f, 0.0014f,  0.0023f,  0.0005f,  -0.0018f,
    -0.0014f, 0.0127f,  -0.0176f, 0.0079f,  -0.0080f, 0.0153f,  -0.0118f,
    -0.0031f, 0.0135f};
constexpr std::array<float, k48k20msNumFftCoeffs> kExpectedFftCoeffsImag = {
    0.0000f,  3.8850f,  -5.4477f, 7.3073f,  -5.2311f, -1.7965f, 3.5078f,
    1.1172f,  -0.0988f, -4.2159f, 2.5748f,  0.1299f,  -0.2481f, 0.0342f,
    0.7023f,  -0.2496f, -1.6821f, 1.0860f,  0.8234f,  -0.4348f, -0.4300f,
    -0.2231f, 1.1850f,  -0.9472f, 0.2060f,  -0.0887f, 0.0888f,  0.0310f,
    -0.0459f, -0.0441f, 0.0349f,  -0.0424f, 0.4004f,  -0.3532f, -0.1769f,
    0.1920f,  0.0551f,  0.0835f,  -0.2208f, 0.0508f,  0.0117f,  0.0788f,
    -0.0450f, -0.0940f, 0.1137f,  -0.0100f, 0.0228f,  -0.0221f, -0.2140f,
    0.4553f,  -0.3396f, 0.0171f,  0.1076f,  -0.0332f, -0.0110f, 0.0263f,
    -0.0621f, 0.0192f,  0.0496f,  -0.0225f, -0.0411f, 0.0472f,  -0.0343f,
    0.0369f,  -0.0040f, -0.0747f, 0.1207f,  -0.0450f, -0.0759f, 0.0859f,
    -0.0352f, -0.0049f, 0.0359f,  -0.0440f, 0.0534f,  -0.0251f, -0.0157f,
    0.0077f,  -0.0004f, 0.0173f,  -0.0731f, 0.1061f,  -0.0549f, 0.0473f,
    -0.0203f, -0.0901f, 0.0891f,  -0.0360f, 0.0131f,  0.0288f,  -0.0415f,
    0.0400f,  -0.0591f, 0.0245f,  0.0355f,  -0.0032f, -0.0911f, 0.1291f,
    -0.0815f, 0.0021f,  0.0441f,  -0.0113f, -0.0438f, 0.0485f,  -0.0203f,
    -0.0061f, 0.0204f,  0.0012f,  -0.0166f, 0.0114f,  -0.0206f, 0.0005f,
    0.0221f,  0.0009f,  -0.0084f, -0.0083f, 0.0071f,  0.0059f,  -0.0260f,
    0.0428f,  -0.0471f, 0.0351f,  -0.0352f, 0.0267f,  0.0107f,  -0.0328f,
    0.0438f,  -0.0432f, 0.0456f,  -0.0544f, 0.0624f,  -0.0437f, 0.0089f,
    -0.0048f, 0.0070f,  0.0127f,  -0.0411f, 0.0261f,  -0.0046f, 0.0265f,
    -0.0056f, 0.0002f,  -0.0612f, 0.0326f,  0.0096f,  0.0181f,  -0.0222f,
    0.0110f,  0.0093f,  -0.0259f, 0.0178f,  -0.0079f, 0.0107f,  -0.0166f,
    0.0039f,  -0.0041f, 0.0099f,  0.0163f,  0.0026f,  -0.0525f, 0.0312f,
    0.0082f,  -0.0502f, 0.1171f,  -0.0685f, -0.0545f, 0.0345f,  0.0372f,
    -0.0307f, 0.0054f,  0.0033f,  -0.0164f, 0.0377f,  -0.0116f, -0.0318f,
    0.0291f,  -0.0106f, 0.0135f,  -0.0205f, -0.0110f, 0.0466f,  -0.0268f,
    -0.0192f, 0.0327f,  -0.0115f, 0.0080f,  0.0051f,  -0.0610f, 0.0783f,
    -0.0132f, -0.0141f, -0.0546f, 0.0525f,  0.0008f,  0.0166f,  -0.0088f,
    -0.0503f, 0.0462f,  -0.0128f, -0.0252f, 0.0972f,  -0.0484f, -0.0482f,
    0.0343f,  -0.0059f, 0.0016f,  -0.0041f, 0.0179f,  0.0065f,  -0.0435f,
    0.0061f,  0.0047f,  0.0323f,  -0.0082f, -0.0277f, 0.0203f,  0.0270f,
    -0.0572f, -0.0307f, 0.0682f,  0.0246f,  -0.0408f, 0.0010f,  0.0155f,
    -0.0066f, 0.0097f,  -0.0257f, 0.0171f,  -0.0130f, 0.0098f,  0.0018f,
    -0.0192f, 0.0152f,  0.0027f,  0.0057f,  -0.0148f, -0.0071f, 0.0345f,
    -0.0270f, 0.0103f,  -0.0130f, 0.0088f,  0.0072f,  -0.0085f, -0.0058f,
    0.0137f,  -0.0031f, -0.0133f, 0.0149f,  -0.0005f, -0.0088f, 0.0037f,
    -0.0151f, 0.0194f,  -0.0029f, -0.0007f, -0.0033f, 0.0120f,  -0.0146f,
    0.0114f,  -0.0068f, 0.0005f,  -0.0052f, 0.0045f,  -0.0041f, 0.0160f,
    -0.0196f, 0.0181f,  -0.0108f, 0.0023f,  -0.0040f, 0.0063f,  -0.0055f,
    -0.0000f, 0.0053f,  -0.0082f, 0.0081f,  -0.0096f, 0.0122f,  -0.0045f,
    -0.0069f, 0.0130f,  -0.0103f, 0.0046f,  -0.0024f, 0.0005f,  0.0038f,
    -0.0048f, 0.0051f,  -0.0046f, 0.0001f,  -0.0006f, 0.0008f,  -0.0022f,
    0.0081f,  -0.0038f, -0.0108f, 0.0080f,  0.0076f,  0.0015f,  -0.0101f,
    0.0031f,  -0.0051f, 0.0128f,  -0.0136f, 0.0035f,  -0.0009f, -0.0029f,
    0.0084f,  -0.0010f, -0.0014f, 0.0024f,  -0.0031f, -0.0032f, -0.0013f,
    0.0127f,  -0.0045f, -0.0067f, 0.0057f,  -0.0024f, -0.0016f, -0.0050f,
    0.0141f,  -0.0107f, 0.0105f,  -0.0175f, 0.0156f,  -0.0096f, 0.0052f,
    -0.0013f, -0.0005f, 0.0049f,  -0.0115f, 0.0144f,  -0.0113f, 0.0107f,
    -0.0079f, -0.0004f, -0.0000f, 0.0050f,  0.0008f,  -0.0076f, 0.0066f,
    -0.0020f, -0.0023f, 0.0071f,  -0.0093f, 0.0051f,  0.0000f,  -0.0076f,
    0.0076f,  -0.0040f, 0.0039f,  -0.0005f, 0.0044f,  -0.0095f, 0.0138f,
    -0.0184f, 0.0111f,  -0.0013f, -0.0040f, 0.0061f,  -0.0044f, 0.0045f,
    -0.0047f, 0.0062f,  -0.0075f, 0.0017f,  0.0049f,  -0.0028f, -0.0045f,
    0.0027f,  0.0027f,  0.0022f,  -0.0055f, -0.0036f, 0.0093f,  -0.0046f,
    -0.0019f, 0.0051f,  -0.0027f, -0.0005f, 0.0010f,  -0.0015f, -0.0040f,
    0.0066f,  0.0042f,  -0.0082f, -0.0008f, 0.0099f,  -0.0121f, 0.0089f,
    -0.0054f, 0.0022f,  -0.0036f, 0.0066f,  -0.0010f, -0.0056f, 0.0039f,
    0.0032f,  -0.0065f, 0.0100f,  -0.0139f, 0.0011f,  0.0052f,  0.0039f,
    0.0047f,  -0.0110f, -0.0040f, 0.0099f,  -0.0032f, 0.0061f,  -0.0123f,
    0.0008f,  0.0063f,  -0.0005f, 0.0014f,  0.0043f,  -0.0124f, 0.0074f,
    -0.0012f, -0.0012f, -0.0009f, 0.0039f,  0.0012f,  -0.0052f, -0.0017f,
    0.0033f,  0.0034f,  -0.0036f, 0.0049f,  -0.0060f, -0.0008f, -0.0012f,
    0.0111f,  -0.0121f, 0.0033f,  -0.0062f, 0.0158f,  -0.0118f, 0.0090f,
    -0.0015f, -0.0114f, 0.0089f,  -0.0027f, -0.0001f, 0.0053f,  -0.0006f,
    -0.0081f, 0.0025f,  0.0072f,  -0.0075f, 0.0033f,  -0.0024f, 0.0023f,
    -0.0058f, 0.0084f,  -0.0040f, -0.0031f, 0.0037f,  0.0052f,  -0.0065f,
    0.0011f,  0.0027f,  -0.0035f, 0.0038f,  -0.0065f, 0.0085f,  -0.0132f,
    0.0161f,  -0.0109f, -0.0009f, 0.0029f,  0.0084f,  -0.0111f, 0.0023f,
    0.0061f,  -0.0067f, -0.0022f, 0.0080f,  -0.0048f, 0.0050f,  -0.0027f,
    -0.0026f, 0.0054f,  -0.0005f, -0.0091f, 0.0064f,  0.0023f,  -0.0052f,
    0.0039f,  -0.0036f, 0.0001f,  0.0007f,  0.0076f,  -0.0148f, 0.0111f,
    -0.0003f, -0.0040f, -0.0024f, 0.0105f,  -0.0097f, 0.0035f,  0.0052f,
    -0.0046f, -0.0044f, -0.0029f, 0.0099f,  0.0004f,  -0.0032f, -0.0040f,
    0.0072f,  0.0000f};

void CheckFftResult(rtc::ArrayView<const float> expected_real,
                    rtc::ArrayView<const float> expected_imag,
                    rtc::ArrayView<const std::complex<float>> computed,
                    const float scaling_factor) {
  ASSERT_EQ(expected_real.size(), expected_imag.size());
  ASSERT_LT(0.f, scaling_factor);
  ASSERT_EQ(computed.size(), expected_real.size());
  for (size_t i = 0; i < computed.size(); ++i) {
    SCOPED_TRACE(i);
    EXPECT_NEAR(expected_real[i], computed[i].real() * scaling_factor, 1e-4);
    EXPECT_NEAR(expected_imag[i], computed[i].imag() * scaling_factor, 1e-4);
    break;
  }
}

}  // namespace

TEST(RnnVad, ComputeForwardFftBitExactness) {
  // Read frame.
  auto samples_reader = CreatePcmSamplesReader(k48k20msFrameSize);
  std::array<float, k48k20msFrameSize> samples;
  samples_reader.first->SeekForward(9 * k48k20msFrameSize);
  samples_reader.first->ReadChunk({samples.data(), samples.size()});
  ASSERT_EQ(samples[0], 27);
  // Apply high-pass filter to the two 10 ms chunks.
  {
    rtc::ArrayView<float> frame1(samples.data(), k48k10msFrameSize);
    rtc::ArrayView<float> frame2(samples.data() + k48k10msFrameSize,
                                 k48k10msFrameSize);
    BiQuadFilter hpf(k48kHpfConfig);
    hpf.SetState(k48kHpfInitialState);
    hpf.ProcessFrame(frame1, frame1);
    hpf.ProcessFrame(frame2, frame2);
    ASSERT_NEAR(-18.993244f, samples[0], 1e-6f);
    ASSERT_NEAR(7.230698f, samples[k48k10msFrameSize], 1e-6f);
  }
  // Init FFT.
  RnnVadFft fft(samples.size());
  ASSERT_EQ(fft.num_fft_points(), kExpectedFftCoeffsReal.size());
  auto fft_output_buf_view = fft.GetFftOutputBufferView();
  // Compute the FFT twice to check that each computation is independent.
  for (size_t i = 0; i < 2; ++i) {
    SCOPED_TRACE(i);
    fft.ForwardFft({samples});
    CheckFftResult({kExpectedFftCoeffsReal}, {kExpectedFftCoeffsImag},
                   fft_output_buf_view, 1.f / fft.fft_length());
  }
}

}  // namespace test
}  // namespace webrtc
