{
  "comments": [
    {
      "key": {
        "uuid": "58080aa0_4a2dcaf9",
        "filename": "modules/video_coding/frame_buffer2_unittest.cc",
        "patchSetId": 7
      },
      "lineNbr": 427,
      "author": {
        "id": 5142
      },
      "writtenOn": "2019-08-26T09:31:41Z",
      "side": 1,
      "message": "Can you add a couple of tests specifically for the behaviors of OnDroppedFrames, that asserts as little as possible about other behaviors, and that nails the edge cases? I prefer behavioral-driven tests to tests that asserts multiple outcomes/behaviors of a single use case.\n\nTests that would be good for the added code:\n- When a single frame is dropped (basically what you\u0027re doing above but in a separate test).\n- When multiple frames are dropped simultaneously and the callback has a value greater than 1 as argument.\n- When frames are dropped because of ClearFramesAndHistory",
      "revId": "b23f88eb373a2923882968dca858522cc448c582",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "eab52766_d8aba1ef",
        "filename": "modules/video_coding/frame_buffer2_unittest.cc",
        "patchSetId": 7
      },
      "lineNbr": 427,
      "author": {
        "id": 7641
      },
      "writtenOn": "2019-08-26T13:11:32Z",
      "side": 1,
      "message": "You\u0027re right a few more unit tests are needed.\n\nI\u0027ve added a test when multiple frames are dropped and a test for when the buffer is cleared.\n\nI started with a test for when a single frame is dropped but ended up with essentially the same test as DropTemporalLayerSlowDecoder so I keep this one as is.\n\nLet me know if you think it\u0027s good enough.",
      "parentUuid": "58080aa0_4a2dcaf9",
      "revId": "b23f88eb373a2923882968dca858522cc448c582",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3691460a_51f55ed4",
        "filename": "modules/video_coding/frame_buffer2_unittest.cc",
        "patchSetId": 7
      },
      "lineNbr": 427,
      "author": {
        "id": 5142
      },
      "writtenOn": "2019-08-26T14:41:30Z",
      "side": 1,
      "message": "I don\u0027t think it hurts to have a test that does essentially the same thing. The risk with testing this behavior in a seemingly unrelated test is that if that test is modified or removed, you don\u0027t realize that we lost test coverage for this other behavior. I think repeating some code in a test file is OK. Alternatively, if you have a separate test for the dropping a single frame case, you can remove the assertion in DropTemporalLayerSlowDecoder so that that test doesn\u0027t do multiple things like it does now.\n\nThat\u0027s my suggestion, but I leave this up to you. LGTM.",
      "parentUuid": "eab52766_d8aba1ef",
      "revId": "b23f88eb373a2923882968dca858522cc448c582",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "09a880be_363ed277",
        "filename": "modules/video_coding/frame_buffer2_unittest.cc",
        "patchSetId": 7
      },
      "lineNbr": 427,
      "author": {
        "id": 7641
      },
      "writtenOn": "2019-08-27T07:40:27Z",
      "side": 1,
      "message": "I think that they are related since one of the cases where a single frame is  dropped is if there\u0027s a temporal layer and the decoder is too slow.\nSo, I\u0027ll keep the test as is.",
      "parentUuid": "3691460a_51f55ed4",
      "revId": "b23f88eb373a2923882968dca858522cc448c582",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1b0e71f0_0e018b6d",
        "filename": "modules/video_coding/frame_buffer2_unittest.cc",
        "patchSetId": 7
      },
      "lineNbr": 427,
      "author": {
        "id": 5142
      },
      "writtenOn": "2019-08-27T08:10:16Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "09a880be_363ed277",
      "revId": "b23f88eb373a2923882968dca858522cc448c582",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    }
  ]
}