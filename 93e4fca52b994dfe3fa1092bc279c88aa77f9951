{
  "comments": [
    {
      "key": {
        "uuid": "42e352b0_890105db",
        "filename": "modules/video_coding/codecs/av1/create_scalability_structure.cc",
        "patchSetId": 6
      },
      "lineNbr": 46,
      "author": {
        "id": 5527
      },
      "writtenOn": "2020-07-14T11:29:31Z",
      "side": 1,
      "message": "Is there are good reason to not use enums?",
      "range": {
        "startLine": 46,
        "startChar": 6,
        "endLine": 46,
        "endChar": 10
      },
      "revId": "93e4fca52b994dfe3fa1092bc279c88aa77f9951",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9167e3c5_422b7c47",
        "filename": "modules/video_coding/codecs/av1/create_scalability_structure.cc",
        "patchSetId": 6
      },
      "lineNbr": 46,
      "author": {
        "id": 5019
      },
      "writtenOn": "2020-07-14T12:02:05Z",
      "side": 1,
      "message": "this string (not \u0027NONE\u0027, but any other one) will eventually come from the api. so some code is needed to convert string into the structure. I do not see a reason to add an enum inbetween.\n\n(would rather prefer to pass factory function instead of enum, where needed.)",
      "parentUuid": "42e352b0_890105db",
      "range": {
        "startLine": 46,
        "startChar": 6,
        "endLine": 46,
        "endChar": 10
      },
      "revId": "93e4fca52b994dfe3fa1092bc279c88aa77f9951",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "764e917a_3c114bbc",
        "filename": "modules/video_coding/codecs/av1/create_scalability_structure.cc",
        "patchSetId": 6
      },
      "lineNbr": 46,
      "author": {
        "id": 5527
      },
      "writtenOn": "2020-07-14T12:52:40Z",
      "side": 1,
      "message": "I don\u0027t think we should consider details about how webrtc interacts with javascript land, but even then I don\u0027t see why this couldn\u0027t be an enum all the way down? In other words, an enum defined in JS and then in chrome somewhere convert it into a webrtc enum.\n\nNot sure I get your idea with the factory function?",
      "parentUuid": "9167e3c5_422b7c47",
      "range": {
        "startLine": 46,
        "startChar": 6,
        "endLine": 46,
        "endChar": 10
      },
      "revId": "93e4fca52b994dfe3fa1092bc279c88aa77f9951",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e72209fb_4c5f6e71",
        "filename": "modules/video_coding/codecs/av1/create_scalability_structure.cc",
        "patchSetId": 6
      },
      "lineNbr": 46,
      "author": {
        "id": 5019
      },
      "writtenOn": "2020-07-14T15:22:56Z",
      "side": 1,
      "message": "I still do not see how enum can help address the problem I\u0027m trying to address:\nmake a step towards webrtc-svc spec, add flexibility in specifying scalability mode to use.\n\nwebrtc-svc defines scalabilityMode as a string. so there has to be a conversion from a string somewhere. My idea is to propagate the mode as a string through the stack and convert from string directly to the structure at the very end.\n\nstring is more flexible than enum.\nCurrently it helps to avoid duplicating string\u003c-\u003eClass mapping in two unittests.\nWith mode provided as string factory can e.g. automatically handle \u0027h\u0027 suffix, pass spatial scalability ratio separately from creating a class.\nIt is also not just about javascript land, e.g. I was looking into setting scalability mode in video_loopback tool. input there is also a string (a command line flag).\n\n(side note: ignore the idea of passing around factory function. It is a solution for a different problem, i.e. offtopic)",
      "parentUuid": "764e917a_3c114bbc",
      "range": {
        "startLine": 46,
        "startChar": 6,
        "endLine": 46,
        "endChar": 10
      },
      "revId": "93e4fca52b994dfe3fa1092bc279c88aa77f9951",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    }
  ]
}