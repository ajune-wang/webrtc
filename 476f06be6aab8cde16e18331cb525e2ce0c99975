{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "a6b6edec_af6d0fca",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 5125
      },
      "writtenOn": "2024-07-24T11:49:56Z",
      "side": 1,
      "message": "Thanks for this CL!",
      "revId": "476f06be6aab8cde16e18331cb525e2ce0c99975",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6ac55d0a_6acd0d7a",
        "filename": "modules/audio_processing/audio_buffer.h",
        "patchSetId": 7
      },
      "lineNbr": 69,
      "author": {
        "id": 5125
      },
      "writtenOn": "2024-07-24T11:49:56Z",
      "side": 1,
      "message": "I was not part of the review of the initial addition of the view function, but I\u0027m not convinced that the view approach works that well here without modifications. \n\nOne thing I\u0027m concerned with here is that the implementation is based on assumptions on the underlying data. \nE.g., by doing it like this it is required that the underlying data is linearly stacked in the underlying data. I think that is the case\n(https://source.chromium.org/chromium/chromium/src/+/main:third_party/webrtc/common_audio/channel_buffer.h) but it is not immediately obvious and it is a fragile setup to rely on that without somehow enforcing it.\n\nAnother aspect is that the code opens up for nullptr (empty buffer) being a valid construct, which I think it isn\u0027t. E.g., https://source.chromium.org/chromium/chromium/src/+/main:third_party/webrtc/modules/audio_processing/audio_buffer.cc;drc\u003dd6ef33e59b81a2d85e91aa7a4367c36320eefc81;l\u003d57\nThat means that the using code would have to start checking for that, instead of relying on that.\n\nA third concern I have is that this concept does not work on the split_bands functions, where the underlying data is not continously stored.\n\nI think it would be good to see if there is some other/adjusted construct that could be used here that can remove all the raw pointer instances?",
      "range": {
        "startLine": 69,
        "startChar": 2,
        "endLine": 69,
        "endChar": 19
      },
      "revId": "476f06be6aab8cde16e18331cb525e2ce0c99975",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c0d0bff4_ab7a147d",
        "filename": "modules/audio_processing/audio_buffer.h",
        "patchSetId": 7
      },
      "lineNbr": 69,
      "author": {
        "id": 5125
      },
      "writtenOn": "2024-07-24T12:03:49Z",
      "side": 1,
      "message": "I think I would rather prefer an approach that does not tightly couple the API to the implementation.\n\nE.g., such as something along getter-methods that retrieve each channel or band separately, rather than provides a view into the underlying data structure.",
      "parentUuid": "6ac55d0a_6acd0d7a",
      "range": {
        "startLine": 69,
        "startChar": 2,
        "endLine": 69,
        "endChar": 19
      },
      "revId": "476f06be6aab8cde16e18331cb525e2ce0c99975",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "069b0aa5_d3f4c9eb",
        "filename": "modules/audio_processing/audio_buffer.h",
        "patchSetId": 7
      },
      "lineNbr": 69,
      "author": {
        "id": 5508
      },
      "writtenOn": "2024-07-24T12:44:26Z",
      "side": 1,
      "message": "Wdyt if we change the name from `view()` to `channels_view()` or e.g. `channels_v()`, with the intent to eventually remove/replace the current `channels()` accessor?\n\nThere are a few problems with `channels()` as is. One is, as you point out that it returns a raw pointer that assumes a particular layout/implementation. With having `view()` (or equivalent), we\u0027d at least move that assumption into the class implementation, away from the current places where `channels()` is currently called. That also allows us to add more verification that the state is correct before returning a DeinterleavedView instance.\n\nBtw, getter methods that retrieve each channel separately, is exactly what I wanted to use DeinterleavedView for, but as you point out, there\u0027s an issue with the split bands. The same issue exists in the `ChannelBuffer` class I think. Do you remember when we discussed having a `stride` property in the DeinterleavedView class. Should we bring that back?",
      "parentUuid": "c0d0bff4_ab7a147d",
      "range": {
        "startLine": 69,
        "startChar": 2,
        "endLine": 69,
        "endChar": 19
      },
      "revId": "476f06be6aab8cde16e18331cb525e2ce0c99975",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "981c45d9_1e41d52b",
        "filename": "modules/audio_processing/audio_buffer.h",
        "patchSetId": 7
      },
      "lineNbr": 69,
      "author": {
        "id": 5125
      },
      "writtenOn": "2024-07-24T12:57:54Z",
      "side": 1,
      "message": "The channels() output does not actually assume that there is a certain layout of the data in that it is ok for each channel to be located at any point in the memory (e.g., the data of channel 1 does not have to be located immediately after the data of channel 0).\n\nI\u0027d suggest to use something similar to what the Block class does\nthird_party/webrtc/modules/audio_processing/aec3/block.h\nI.e., never access more than one channel/band at a time.\n\nWhile access into the bundled channel/band data is powerful, it is also risky and causes a rigid implementation. And there is very little code that today benefits from the bundled access.",
      "parentUuid": "069b0aa5_d3f4c9eb",
      "range": {
        "startLine": 69,
        "startChar": 2,
        "endLine": 69,
        "endChar": 19
      },
      "revId": "476f06be6aab8cde16e18331cb525e2ce0c99975",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    }
  ]
}