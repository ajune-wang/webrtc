{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "ccba3435_a115cbcb",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 5234
      },
      "writtenOn": "2022-02-01T14:46:15Z",
      "side": 1,
      "message": "PTAL. Makes existing injection more explicit, although it\u0027s still somewhat confusing with injection of either network_thread (and associated rtc:SocketServer), and PacketSocketFactory, which also ought to use an rtc::SocketServer associated with the network thread.",
      "revId": "61920d73574c6f1fbea811f1962791f52ee8ac2f",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "de41f7b3_46f2887f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 5634
      },
      "writtenOn": "2022-02-01T20:14:20Z",
      "side": 1,
      "message": "I feel like this doesn\u0027t filter out the SocketFactory from the Thread at the right level.\n",
      "revId": "61920d73574c6f1fbea811f1962791f52ee8ac2f",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ca45e0d7_0186c50f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 5634
      },
      "writtenOn": "2022-02-03T12:00:31Z",
      "side": 1,
      "message": "More comments ... trying to find a better pattern given the current constraints and not finding one easily, so I\u0027m likely to approve this with a TODO.",
      "revId": "61920d73574c6f1fbea811f1962791f52ee8ac2f",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "984fa877_fd4e84f6",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 5234
      },
      "writtenOn": "2022-02-03T13:41:25Z",
      "side": 1,
      "message": "Comments only, no updated patchset yet.",
      "revId": "61920d73574c6f1fbea811f1962791f52ee8ac2f",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "efd9fd3e_2a53464d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 5634
      },
      "writtenOn": "2022-02-04T12:29:03Z",
      "side": 1,
      "message": "Feels like further discussion will only give marginal improvements. Approving.\n",
      "revId": "61920d73574c6f1fbea811f1962791f52ee8ac2f",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4bfab19e_c0b8903b",
        "filename": "pc/connection_context.cc",
        "patchSetId": 3
      },
      "lineNbr": 31,
      "author": {
        "id": 5634
      },
      "writtenOn": "2022-02-01T20:14:20Z",
      "side": 1,
      "message": "This feels unclean. It takes the badness of with_socket_server and makes it worse.\n\nAnd once the two concepts of SocketFactory and Thread are separated, it will need refactoring.\n\nI\u0027d rather have the MaybeStartThread just start the thread, and the surrounding code take care of extracting the SocketFactory. It\u0027s closer to the end state.",
      "revId": "61920d73574c6f1fbea811f1962791f52ee8ac2f",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "38386aa7_9215e36f",
        "filename": "pc/connection_context.cc",
        "patchSetId": 3
      },
      "lineNbr": 31,
      "author": {
        "id": 5234
      },
      "writtenOn": "2022-02-02T08:43:07Z",
      "side": 1,
      "message": "I think the advantage of my current way of doing it, is that in the common case that the network thread is created internally in webrtc, we don\u0027t have to call the rtc::Thread::socketserver() method at all here.\n\nBut I can change to do it differently, if that\u0027s what you prefer.",
      "parentUuid": "4bfab19e_c0b8903b",
      "revId": "61920d73574c6f1fbea811f1962791f52ee8ac2f",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "00dcda3e_a5d40d3b",
        "filename": "pc/connection_context.cc",
        "patchSetId": 3
      },
      "lineNbr": 31,
      "author": {
        "id": 5634
      },
      "writtenOn": "2022-02-03T12:00:31Z",
      "side": 1,
      "message": "A compromise may be to annotate this line with \"TODO(this bug): Remove this argument when the socket factory is no longer part of the thread API\".",
      "parentUuid": "38386aa7_9215e36f",
      "revId": "61920d73574c6f1fbea811f1962791f52ee8ac2f",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "281b1f37_1ea80561",
        "filename": "pc/connection_context.cc",
        "patchSetId": 3
      },
      "lineNbr": 31,
      "author": {
        "id": 5234
      },
      "writtenOn": "2022-02-03T13:41:25Z",
      "side": 1,
      "message": "Not entirely clear what the end state will be. Completely breaking relationship between rtc::Thread and rtc::SocketServer would be a rather complex refactoring, and I think I passing rtc::SocketServer to rtc::Thread on thread creation is preferable over making the association later on.\n\nMy aim now is to arrange so that code using of the rtc::Thread and the rtc::ScoketFactory should neither be aware, nor depend, on that they\u0027re hooked together. More or less all those change clutters up the code construction the objects a bit.",
      "parentUuid": "00dcda3e_a5d40d3b",
      "revId": "61920d73574c6f1fbea811f1962791f52ee8ac2f",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e2de1a9a_bce0de7a",
        "filename": "pc/connection_context.cc",
        "patchSetId": 3
      },
      "lineNbr": 31,
      "author": {
        "id": 5634
      },
      "writtenOn": "2022-02-04T12:29:03Z",
      "side": 1,
      "message": "Still haven\u0027t found a better pattern. It\u0027s possible we can refactor this code into MaybeCreateThread() and MaybeCreateThreadWithSocketFactory (avoiding the possibly-null argument), which is somewhat more readable but duplicates a bit of code.\n\nBut it\u0027s not so much better as to block landing this.",
      "parentUuid": "281b1f37_1ea80561",
      "revId": "61920d73574c6f1fbea811f1962791f52ee8ac2f",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "13cb8c49_d4d96a95",
        "filename": "pc/connection_context.cc",
        "patchSetId": 3
      },
      "lineNbr": 40,
      "author": {
        "id": 5634
      },
      "writtenOn": "2022-02-03T12:00:31Z",
      "side": 1,
      "message": "Different point: the current (new) C++ rules say that output arguments should be references not pointers. That will make this code slightly more obvious.",
      "revId": "61920d73574c6f1fbea811f1962791f52ee8ac2f",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2d743268_92c6e155",
        "filename": "pc/connection_context.cc",
        "patchSetId": 3
      },
      "lineNbr": 40,
      "author": {
        "id": 5234
      },
      "writtenOn": "2022-02-03T13:41:25Z",
      "side": 1,
      "message": "Works for thread_holder, but for socket_factory_holder, needs nullptr as a possible value.",
      "parentUuid": "13cb8c49_d4d96a95",
      "revId": "61920d73574c6f1fbea811f1962791f52ee8ac2f",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d7a9523b_0bf40df1",
        "filename": "pc/connection_context.cc",
        "patchSetId": 3
      },
      "lineNbr": 135,
      "author": {
        "id": 5634
      },
      "writtenOn": "2022-02-01T20:14:20Z",
      "side": 1,
      "message": "This line illustrates why I dislike the duality of factory vs server.",
      "revId": "61920d73574c6f1fbea811f1962791f52ee8ac2f",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7064a0ca_d9a407af",
        "filename": "pc/connection_context.cc",
        "patchSetId": 3
      },
      "lineNbr": 135,
      "author": {
        "id": 5634
      },
      "writtenOn": "2022-02-03T12:00:31Z",
      "side": 1,
      "message": "Another question: do we always need the socket_factory?\nIf yes - should there be a CHECK or DCHECK that it\u0027s non-null here?\nIf no (like when we\u0027re also passed the packet socket factory?), can this be null if we\u0027re being passed a network thread that doesn\u0027t have one?",
      "parentUuid": "d7a9523b_0bf40df1",
      "revId": "61920d73574c6f1fbea811f1962791f52ee8ac2f",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "438a34b0_a43bec66",
        "filename": "pc/connection_context.cc",
        "patchSetId": 3
      },
      "lineNbr": 135,
      "author": {
        "id": 5234
      },
      "writtenOn": "2022-02-03T13:41:25Z",
      "side": 1,
      "message": "I think we currently always have a socket server, but it may be an instance of NullSocketServer.",
      "parentUuid": "7064a0ca_d9a407af",
      "revId": "61920d73574c6f1fbea811f1962791f52ee8ac2f",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    }
  ]
}