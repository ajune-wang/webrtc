{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "ff13bbf0_ee73190f",
        "filename": "call/bitrate_allocator.cc",
        "patchSetId": 1
      },
      "lineNbr": 321,
      "author": {
        "id": 5597
      },
      "writtenOn": "2024-08-15T15:03:24Z",
      "side": 1,
      "message": "pass this as a const reference",
      "range": {
        "startLine": 321,
        "startChar": 18,
        "endLine": 321,
        "endChar": 71
      },
      "revId": "db7006a0f35a119c71a7b785f0a0f006bb5bcda6",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "253fe2cd_3299d0d6",
        "filename": "call/bitrate_allocator.cc",
        "patchSetId": 1
      },
      "lineNbr": 321,
      "author": {
        "id": 19269
      },
      "writtenOn": "2024-08-16T06:46:01Z",
      "side": 1,
      "message": "I am storing/rewriting the new allocation back into `allocation`. Alternatively, `ApplySurplus` can return the new allocation, but that seems to require more copying.",
      "parentUuid": "ff13bbf0_ee73190f",
      "range": {
        "startLine": 321,
        "startChar": 18,
        "endLine": 321,
        "endChar": 71
      },
      "revId": "db7006a0f35a119c71a7b785f0a0f006bb5bcda6",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "00a0ec58_20bbda28",
        "filename": "call/bitrate_allocator.cc",
        "patchSetId": 1
      },
      "lineNbr": 321,
      "author": {
        "id": 5524
      },
      "writtenOn": "2024-08-21T09:07:16Z",
      "side": 1,
      "message": "Ahaa, I missed that last assignment.\nI usually try to avoid input/output arguments as it can be confusing when reading the callsite what the functions are expected to mutate.\n\nPerhaps you can change the signature to something like\n```\nabsl::optional\u003cmap\u003cBitrateAllocationObserver*, int\u003e\u003e MaybeApplySurplus(\n  const map\u003cBitrateAllocationObserver*, int\u003e\u0026 allocation,\n  const std::vector\u003cAllocatableTrack\u003e\u0026 allocatable_tracks,\n  DataRate bitrate,\n  DataRate upper_elastic_limit) {\n```\n\nthen it becomes clear that no input arguments are mutated, and you get a new output only if the state was actually changed. So everywhere you now just return early without changing anything you would return an `absl::nullopt` instead - and then only when you get to the last for-loop where you actually change the allocation would you create a new map and return that value.\n\nThe call-site would then look something like\n```\nreturn MaybeApplySurplus(allocation, allocatable_tracks,\n                         DataRate::BitsPerSec(bitrate),\n                         upper_elastic_limit)\n         .value_or(allocation);\n```\n\nThat shouldn\u0027t really result it too much copying. Also I expect these maps to be small anyway.\n\nwdyt?",
      "parentUuid": "253fe2cd_3299d0d6",
      "range": {
        "startLine": 321,
        "startChar": 18,
        "endLine": 321,
        "endChar": 71
      },
      "revId": "db7006a0f35a119c71a7b785f0a0f006bb5bcda6",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c7e37e3e_00532902",
        "filename": "call/bitrate_allocator.cc",
        "patchSetId": 1
      },
      "lineNbr": 321,
      "author": {
        "id": 19269
      },
      "writtenOn": "2024-08-22T00:52:58Z",
      "side": 1,
      "message": "Thanks, indeed better to be consistent in style/convention. Please take a look at the change.",
      "parentUuid": "00a0ec58_20bbda28",
      "range": {
        "startLine": 321,
        "startChar": 18,
        "endLine": 321,
        "endChar": 71
      },
      "revId": "db7006a0f35a119c71a7b785f0a0f006bb5bcda6",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3cdcdb51_698fe66a",
        "filename": "call/bitrate_allocator.cc",
        "patchSetId": 1
      },
      "lineNbr": 321,
      "author": {
        "id": 5524
      },
      "writtenOn": "2024-08-22T06:19:57Z",
      "side": 1,
      "message": "Thanks for fixgin!",
      "parentUuid": "c7e37e3e_00532902",
      "range": {
        "startLine": 321,
        "startChar": 18,
        "endLine": 321,
        "endChar": 71
      },
      "revId": "db7006a0f35a119c71a7b785f0a0f006bb5bcda6",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "01f9b4ea_3c4a40af",
        "filename": "call/bitrate_allocator.cc",
        "patchSetId": 1
      },
      "lineNbr": 324,
      "author": {
        "id": 5597
      },
      "writtenOn": "2024-08-15T15:03:24Z",
      "side": 1,
      "message": "Suggest moving all new code to use unit types like `DataRate` instead of ints.\n\nRefactoring the whole class would be great, but it outside the scope of this cl.",
      "range": {
        "startLine": 323,
        "startChar": 18,
        "endLine": 324,
        "endChar": 49
      },
      "revId": "db7006a0f35a119c71a7b785f0a0f006bb5bcda6",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ad2fe8ec_95d429a8",
        "filename": "call/bitrate_allocator.cc",
        "patchSetId": 1
      },
      "lineNbr": 324,
      "author": {
        "id": 19269
      },
      "writtenOn": "2024-08-16T06:46:01Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "01f9b4ea_3c4a40af",
      "range": {
        "startLine": 323,
        "startChar": 18,
        "endLine": 324,
        "endChar": 49
      },
      "revId": "db7006a0f35a119c71a7b785f0a0f006bb5bcda6",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6b716c7a_96254639",
        "filename": "call/bitrate_allocator.cc",
        "patchSetId": 1
      },
      "lineNbr": 328,
      "author": {
        "id": 5597
      },
      "writtenOn": "2024-08-15T15:03:24Z",
      "side": 1,
      "message": "nit: Feel free to expand on this comment, especially what `sum_demand` is, and start with capital letter and end with period.",
      "range": {
        "startLine": 328,
        "startChar": 0,
        "endLine": 328,
        "endChar": 37
      },
      "revId": "db7006a0f35a119c71a7b785f0a0f006bb5bcda6",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8764e29c_2c565e5a",
        "filename": "call/bitrate_allocator.cc",
        "patchSetId": 1
      },
      "lineNbr": 328,
      "author": {
        "id": 19269
      },
      "writtenOn": "2024-08-16T06:46:01Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6b716c7a_96254639",
      "range": {
        "startLine": 328,
        "startChar": 0,
        "endLine": 328,
        "endChar": 37
      },
      "revId": "db7006a0f35a119c71a7b785f0a0f006bb5bcda6",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c4be9270_65ed9069",
        "filename": "call/bitrate_allocator.cc",
        "patchSetId": 1
      },
      "lineNbr": 329,
      "author": {
        "id": 5597
      },
      "writtenOn": "2024-08-15T15:03:24Z",
      "side": 1,
      "message": "Suggest changing both `surplus` and `sum_assigned` to `DataRate` type.",
      "range": {
        "startLine": 329,
        "startChar": 2,
        "endLine": 329,
        "endChar": 22
      },
      "revId": "db7006a0f35a119c71a7b785f0a0f006bb5bcda6",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bbe2a5fd_88583d5d",
        "filename": "call/bitrate_allocator.cc",
        "patchSetId": 1
      },
      "lineNbr": 329,
      "author": {
        "id": 19269
      },
      "writtenOn": "2024-08-16T06:46:01Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c4be9270_65ed9069",
      "range": {
        "startLine": 329,
        "startChar": 2,
        "endLine": 329,
        "endChar": 22
      },
      "revId": "db7006a0f35a119c71a7b785f0a0f006bb5bcda6",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "84804034_892fa695",
        "filename": "call/bitrate_allocator.cc",
        "patchSetId": 1
      },
      "lineNbr": 334,
      "author": {
        "id": 5597
      },
      "writtenOn": "2024-08-15T15:03:24Z",
      "side": 1,
      "message": "Avoid using `operator[]` here. Partly because it might insert a new value in the map if the key is not found, which is both unexpected and forces the `allocation` argument to be non-const. There\u0027s also a lot of repetition below the causes a lookup tree traversal every time. Suggest something along these lines:\n```\n  auto it \u003d allocation.find(observer_config.observer);\n  \n// ...then if allocation MUST always contain all keys from allocatable_tracks\n  RTC_CHECK(it !\u003d allocation.end()); \n// ...else if an entry is not required for all tracks\n  if (it \u003d\u003d allocation.end()) {\n    // No allocation for this track.\n    continue;\n  }\n\n  DataRate track_allocation \u003d DataRate::BitsPerSecond(*it);\n  \n  ...\n```",
      "range": {
        "startLine": 334,
        "startChar": 20,
        "endLine": 334,
        "endChar": 56
      },
      "revId": "db7006a0f35a119c71a7b785f0a0f006bb5bcda6",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "806f4b73_0500d340",
        "filename": "call/bitrate_allocator.cc",
        "patchSetId": 1
      },
      "lineNbr": 334,
      "author": {
        "id": 19269
      },
      "writtenOn": "2024-08-16T06:46:01Z",
      "side": 1,
      "message": "Thanks! I completely overlooked observer_config.observer might not be in allocation.",
      "parentUuid": "84804034_892fa695",
      "range": {
        "startLine": 334,
        "startChar": 20,
        "endLine": 334,
        "endChar": 56
      },
      "revId": "db7006a0f35a119c71a7b785f0a0f006bb5bcda6",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0db868ce_dada8216",
        "filename": "call/bitrate_allocator.cc",
        "patchSetId": 1
      },
      "lineNbr": 370,
      "author": {
        "id": 5597
      },
      "writtenOn": "2024-08-15T15:03:24Z",
      "side": 1,
      "message": "Usually it\u0027s preferable to check the relative size rather than the delta, and I\u0027d put the `sum_demand` check first since that takes precedence. e.g.\n\n```\n  DataRate overshoot \u003d sum_assigned \u003e\u003d bitrate ? (sum_assigned - bitrate) : DataRate::Zero();\n  if (sum_demand \u003c 0.0001 || overshoot \u003e surplus) {\n    // No available surplus.\n    return;\n  }\n  surplus -\u003d overshoot;\n```",
      "range": {
        "startLine": 364,
        "startChar": 0,
        "endLine": 370,
        "endChar": 3
      },
      "revId": "db7006a0f35a119c71a7b785f0a0f006bb5bcda6",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0d5c1b89_d9715d0b",
        "filename": "call/bitrate_allocator.cc",
        "patchSetId": 1
      },
      "lineNbr": 370,
      "author": {
        "id": 19269
      },
      "writtenOn": "2024-08-16T06:46:01Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0db868ce_dada8216",
      "range": {
        "startLine": 364,
        "startChar": 0,
        "endLine": 370,
        "endChar": 3
      },
      "revId": "db7006a0f35a119c71a7b785f0a0f006bb5bcda6",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c1397a3b_edee9c63",
        "filename": "call/bitrate_allocator.cc",
        "patchSetId": 1
      },
      "lineNbr": 525,
      "author": {
        "id": 5597
      },
      "writtenOn": "2024-08-15T15:03:24Z",
      "side": 1,
      "message": "What should `last_used_bitrate_bps` be if this optional is not set? Do we need to keep the current value or can explicitly set it to either 0 or -1 (looks like the default value?)\n\nDepending on which, this could be simplified to either.\n```\n  if (absl::Optional\u003cDataRate\u003e used_rate \u003d config.observer-\u003eGetUsedRate())\n    config.last_used_bitrate_bps \u003d used_rate-\u003ebps();\n```\n\nor\n\n```\n  config.last_used_bitrate_bps \u003d config.observer-\u003eGetUsedRate().value_or(-1);\n```",
      "range": {
        "startLine": 523,
        "startChar": 0,
        "endLine": 525,
        "endChar": 60
      },
      "revId": "db7006a0f35a119c71a7b785f0a0f006bb5bcda6",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ac013129_f3dcd803",
        "filename": "call/bitrate_allocator.cc",
        "patchSetId": 1
      },
      "lineNbr": 525,
      "author": {
        "id": 19269
      },
      "writtenOn": "2024-08-16T06:46:01Z",
      "side": 1,
      "message": "Very good suggestion. `config.last_used_bitrate_bps` is for detecting significant audio bitrate changes. (Rather than going deep into audio codec to detect silence to speech transition, it is suggested that it is simpler/better to simply check jump in bitrate usage). For audio, GetUsedRate() always return a valid value except in cases when the audio encoder just (re)started. Setting to -1 or 0 would avoid diffing with stale values.\n\nHowever, keeping with the spirit of moving to use DataRate, it is even simpler if we change last_used_bitrate_bps to an optional DataRate.",
      "parentUuid": "c1397a3b_edee9c63",
      "range": {
        "startLine": 523,
        "startChar": 0,
        "endLine": 525,
        "endChar": 60
      },
      "revId": "db7006a0f35a119c71a7b785f0a0f006bb5bcda6",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5d5e269a_8da34b47",
        "filename": "call/bitrate_allocator.cc",
        "patchSetId": 1
      },
      "lineNbr": 525,
      "author": {
        "id": 5524
      },
      "writtenOn": "2024-08-21T09:07:16Z",
      "side": 1,
      "message": "Great!",
      "parentUuid": "ac013129_f3dcd803",
      "range": {
        "startLine": 523,
        "startChar": 0,
        "endLine": 525,
        "endChar": 60
      },
      "revId": "db7006a0f35a119c71a7b785f0a0f006bb5bcda6",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2228ed66_ebb4b977",
        "filename": "call/bitrate_allocator.cc",
        "patchSetId": 1
      },
      "lineNbr": 567,
      "author": {
        "id": 5597
      },
      "writtenOn": "2024-08-15T15:03:24Z",
      "side": 1,
      "message": "ditto",
      "range": {
        "startLine": 565,
        "startChar": 0,
        "endLine": 567,
        "endChar": 62
      },
      "fixSuggestions": [
        {
          "fixId": "0d29042c_35a1de37",
          "description": "prompt_to_edit API",
          "replacements": [
            {
              "path": "call/bitrate_allocator.cc",
              "range": {
                "startLine": 565,
                "startChar": 0,
                "endLine": 568,
                "endChar": 0
              },
              "replacement": "      config.last_used_bitrate_bps \u003d config.observer-\u003eGetUsedRate().bps();\n"
            }
          ]
        }
      ],
      "revId": "db7006a0f35a119c71a7b785f0a0f006bb5bcda6",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a023582c_244fd665",
        "filename": "call/bitrate_allocator.cc",
        "patchSetId": 1
      },
      "lineNbr": 567,
      "author": {
        "id": 19269
      },
      "writtenOn": "2024-08-16T06:46:01Z",
      "side": 1,
      "message": "Same as above, changed last_used_bitrate_bps to be optiona\u003cDataRate\u003e.",
      "parentUuid": "2228ed66_ebb4b977",
      "range": {
        "startLine": 565,
        "startChar": 0,
        "endLine": 567,
        "endChar": 62
      },
      "revId": "db7006a0f35a119c71a7b785f0a0f006bb5bcda6",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a65f102b_adb12ed3",
        "filename": "call/bitrate_allocator.cc",
        "patchSetId": 1
      },
      "lineNbr": 590,
      "author": {
        "id": 5597
      },
      "writtenOn": "2024-08-15T15:03:24Z",
      "side": 1,
      "message": "nit: or `.IsZero()`",
      "range": {
        "startLine": 590,
        "startChar": 31,
        "endLine": 590,
        "endChar": 51
      },
      "fixSuggestions": [
        {
          "fixId": "372000a6_d2b8500b",
          "description": "prompt_to_edit API",
          "replacements": [
            {
              "path": "call/bitrate_allocator.cc",
              "range": {
                "startLine": 590,
                "startChar": 0,
                "endLine": 591,
                "endChar": 0
              },
              "replacement": "  if (upper_elastic_rate_limit_.IsZero()) {\n"
            }
          ]
        }
      ],
      "revId": "db7006a0f35a119c71a7b785f0a0f006bb5bcda6",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "94a4adb2_48b51455",
        "filename": "call/bitrate_allocator.cc",
        "patchSetId": 1
      },
      "lineNbr": 590,
      "author": {
        "id": 19269
      },
      "writtenOn": "2024-08-16T06:46:01Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a65f102b_adb12ed3",
      "range": {
        "startLine": 590,
        "startChar": 31,
        "endLine": 590,
        "endChar": 51
      },
      "revId": "db7006a0f35a119c71a7b785f0a0f006bb5bcda6",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9cad0a5f_7d8650bb",
        "filename": "call/bitrate_allocator.cc",
        "patchSetId": 1
      },
      "lineNbr": 599,
      "author": {
        "id": 5597
      },
      "writtenOn": "2024-08-15T15:03:24Z",
      "side": 1,
      "message": "nit: Prefer explicit type over `auto` except where it is very obvious or the type is complex such as and stl iterator.\n\nAlso, prefer using `operator*()` over `value()` so it follows the same pattern as e.g. unique_ptr.",
      "range": {
        "startLine": 599,
        "startChar": 6,
        "endLine": 599,
        "endChar": 10
      },
      "fixSuggestions": [
        {
          "fixId": "e13f8e11_248ff0a6",
          "description": "prompt_to_edit API",
          "replacements": [
            {
              "path": "call/bitrate_allocator.cc",
              "range": {
                "startLine": 599,
                "startChar": 0,
                "endLine": 600,
                "endChar": 0
              },
              "replacement": "      TrackRateElasticity elasticity \u003d *config.config.rate_elasticity;\n"
            }
          ]
        }
      ],
      "revId": "db7006a0f35a119c71a7b785f0a0f006bb5bcda6",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "351c6cf3_10a401cf",
        "filename": "call/bitrate_allocator.cc",
        "patchSetId": 1
      },
      "lineNbr": 599,
      "author": {
        "id": 19269
      },
      "writtenOn": "2024-08-16T06:46:01Z",
      "side": 1,
      "message": "Done. Globally used * in place of value().",
      "parentUuid": "9cad0a5f_7d8650bb",
      "range": {
        "startLine": 599,
        "startChar": 6,
        "endLine": 599,
        "endChar": 10
      },
      "revId": "db7006a0f35a119c71a7b785f0a0f006bb5bcda6",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e72bea4d_a007460e",
        "filename": "call/bitrate_allocator.cc",
        "patchSetId": 1
      },
      "lineNbr": 605,
      "author": {
        "id": 5597
      },
      "writtenOn": "2024-08-15T15:03:24Z",
      "side": 1,
      "message": "suggestion:\n```\n  // TODO: Explaining commment\n  constexpr kUsageDeadBandThreshold \u003d DataRate::KilobitsPerSecond(3);\n...\n\n  DataRate current_usage \u003d config.observer-\u003eGetUsedRate().value_or(DataRate::Zero());\n  DataRate last_usage \u003d DataRate::BitsPerSecond(config.last_used_bitrate);\n  if (!last_usage.IsZero() \u0026\u0026 current_usage \u003e last_usage + kUsageDeadBandThreshold) {\n    needs_recompute \u003d true;\n  }\n```",
      "range": {
        "startLine": 602,
        "startChar": 8,
        "endLine": 605,
        "endChar": 21
      },
      "revId": "db7006a0f35a119c71a7b785f0a0f006bb5bcda6",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ae1a9263_b38083ec",
        "filename": "call/bitrate_allocator.cc",
        "patchSetId": 1
      },
      "lineNbr": 605,
      "author": {
        "id": 5597
      },
      "writtenOn": "2024-08-15T15:03:24Z",
      "side": 1,
      "message": "Where does this magic constant come from? Should it be extracted to e.g. a named static with a comment?",
      "range": {
        "startLine": 605,
        "startChar": 14,
        "endLine": 605,
        "endChar": 18
      },
      "revId": "db7006a0f35a119c71a7b785f0a0f006bb5bcda6",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7920fc01_042e36e4",
        "filename": "call/bitrate_allocator.cc",
        "patchSetId": 1
      },
      "lineNbr": 605,
      "author": {
        "id": 19269
      },
      "writtenOn": "2024-08-16T06:46:01Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e72bea4d_a007460e",
      "range": {
        "startLine": 602,
        "startChar": 8,
        "endLine": 605,
        "endChar": 21
      },
      "revId": "db7006a0f35a119c71a7b785f0a0f006bb5bcda6",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ea281a52_3683608c",
        "filename": "call/bitrate_allocator.cc",
        "patchSetId": 1
      },
      "lineNbr": 605,
      "author": {
        "id": 19269
      },
      "writtenOn": "2024-08-16T06:46:01Z",
      "side": 1,
      "message": "At lowest bitrate, audio might report about 5kbps usage for silence periods (via GetUsedRate() for payload plus all headers).  During speech period, usage is closer to 12kbps for a difference of 7kbps. So 3k is a reasonable threshold. However, 3k might be too small for high bitrate calls.  Let me change that to a fraction (20%) of allocated_bitrate, so that it would be about 2.5k for min audio bitrate, but scale with bitrate.",
      "parentUuid": "ae1a9263_b38083ec",
      "range": {
        "startLine": 605,
        "startChar": 14,
        "endLine": 605,
        "endChar": 18
      },
      "revId": "db7006a0f35a119c71a7b785f0a0f006bb5bcda6",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b3163a74_754a7104",
        "filename": "call/bitrate_allocator.cc",
        "patchSetId": 1
      },
      "lineNbr": 605,
      "author": {
        "id": 5524
      },
      "writtenOn": "2024-08-21T09:07:16Z",
      "side": 1,
      "message": "Sounds good, thanks!",
      "parentUuid": "ea281a52_3683608c",
      "range": {
        "startLine": 605,
        "startChar": 14,
        "endLine": 605,
        "endChar": 18
      },
      "revId": "db7006a0f35a119c71a7b785f0a0f006bb5bcda6",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5c0683fd_0ae99f7c",
        "filename": "call/bitrate_allocator.cc",
        "patchSetId": 1
      },
      "lineNbr": 627,
      "author": {
        "id": 5597
      },
      "writtenOn": "2024-08-15T15:03:24Z",
      "side": 1,
      "message": "nit: you can convert to DataRate right off the bat here (or refactor the functions to return units type in the first place)",
      "range": {
        "startLine": 627,
        "startChar": 6,
        "endLine": 627,
        "endChar": 32
      },
      "fixSuggestions": [
        {
          "fixId": "369edde3_f4617afe",
          "description": "prompt_to_edit API",
          "replacements": [
            {
              "path": "call/bitrate_allocator.cc",
              "range": {
                "startLine": 553,
                "startChar": 0,
                "endLine": 556,
                "endChar": 0
              },
              "replacement": "      DataRate allocated_bitrate \u003d\n          DataRate::BitsPerSec(allocation[config.observer]);\n      DataRate allocated_stable_bitrate \u003d\n          DataRate::BitsPerSec(stable_bitrate_allocation[config.observer]);\n"
            },
            {
              "path": "call/bitrate_allocator.cc",
              "range": {
                "startLine": 557,
                "startChar": 0,
                "endLine": 560,
                "endChar": 0
              },
              "replacement": "      update.target_bitrate \u003d allocated_bitrate;\n      update.stable_target_bitrate \u003d allocated_stable_bitrate;\n"
            },
            {
              "path": "call/bitrate_allocator.cc",
              "range": {
                "startLine": 563,
                "startChar": 0,
                "endLine": 565,
                "endChar": 0
              },
              "replacement": "      DataRate protection_bitrate \u003d\n          DataRate::BitsPerSec(config.observer-\u003eOnBitrateUpdated(update));\n      config.allocated_bitrate_bps \u003d allocated_bitrate.bps();\n"
            },
            {
              "path": "call/bitrate_allocator.cc",
              "range": {
                "startLine": 568,
                "startChar": 0,
                "endLine": 570,
                "endChar": 0
              },
              "replacement": "      if (allocated_bitrate.bps() \u003e 0)\n        config.media_ratio \u003d\n            MediaRatio(allocated_bitrate.bps(), protection_bitrate.bps());\n"
            }
          ]
        }
      ],
      "revId": "db7006a0f35a119c71a7b785f0a0f006bb5bcda6",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a870cb57_1f51e554",
        "filename": "call/bitrate_allocator.cc",
        "patchSetId": 1
      },
      "lineNbr": 627,
      "author": {
        "id": 19269
      },
      "writtenOn": "2024-08-16T06:46:01Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5c0683fd_0ae99f7c",
      "range": {
        "startLine": 627,
        "startChar": 6,
        "endLine": 627,
        "endChar": 32
      },
      "revId": "db7006a0f35a119c71a7b785f0a0f006bb5bcda6",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4a7cec09_3278ad78",
        "filename": "call/bitrate_allocator.cc",
        "patchSetId": 1
      },
      "lineNbr": 634,
      "author": {
        "id": 5597
      },
      "writtenOn": "2024-08-15T15:03:24Z",
      "side": 1,
      "message": "Not really a new thing, but shouldn\u0027t this be 255.0?",
      "range": {
        "startLine": 634,
        "startChar": 55,
        "endLine": 634,
        "endChar": 61
      },
      "fixSuggestions": [
        {
          "fixId": "f7b9e65f_b3c770c1",
          "description": "prompt_to_edit API",
          "replacements": [
            {
              "path": "call/bitrate_allocator.cc",
              "range": {
                "startLine": 490,
                "startChar": 0,
                "endLine": 491,
                "endChar": 0
              },
              "replacement": "    update.packet_loss_ratio \u003d last_fraction_loss_ / 255.0;\n"
            },
            {
              "path": "call/bitrate_allocator.cc",
              "range": {
                "startLine": 560,
                "startChar": 0,
                "endLine": 561,
                "endChar": 0
              },
              "replacement": "      update.packet_loss_ratio \u003d last_fraction_loss_ / 255.0;\n"
            },
            {
              "path": "call/bitrate_allocator.cc",
              "range": {
                "startLine": 579,
                "startChar": 0,
                "endLine": 580,
                "endChar": 0
              },
              "replacement": "    update.packet_loss_ratio \u003d last_fraction_loss_ / 255.0;\n"
            },
            {
              "path": "call/bitrate_allocator.cc",
              "range": {
                "startLine": 634,
                "startChar": 0,
                "endLine": 635,
                "endChar": 0
              },
              "replacement": "      update.packet_loss_ratio \u003d last_fraction_loss_ / 255.0;\n"
            }
          ]
        }
      ],
      "revId": "db7006a0f35a119c71a7b785f0a0f006bb5bcda6",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4c736e6d_bf3057fd",
        "filename": "call/bitrate_allocator.cc",
        "patchSetId": 1
      },
      "lineNbr": 634,
      "author": {
        "id": 19269
      },
      "writtenOn": "2024-08-16T06:46:01Z",
      "side": 1,
      "message": "Existing code (e.g., in BitrateAllocator::OnNetworkEstimateChanged) also computes `packet_loss_ratio` using divide-by-256.0. RFC 3550 says fraction loss is \"equivalent to taking the integer part after multiplying the loss fraction by 256.\" Since truncation is done, division by 256 is indeed underestimating. If we prefer 255, we should change that uniformly at least inside BitrateAllocator.",
      "parentUuid": "4a7cec09_3278ad78",
      "range": {
        "startLine": 634,
        "startChar": 55,
        "endLine": 634,
        "endChar": 61
      },
      "revId": "db7006a0f35a119c71a7b785f0a0f006bb5bcda6",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "83f66039_6c239944",
        "filename": "call/bitrate_allocator.cc",
        "patchSetId": 1
      },
      "lineNbr": 634,
      "author": {
        "id": 5524
      },
      "writtenOn": "2024-08-21T09:07:16Z",
      "side": 1,
      "message": "Huh, interesting. Let\u0027s just follow the RFC for now then - I don\u0027t want to cause regressions.",
      "parentUuid": "4c736e6d_bf3057fd",
      "range": {
        "startLine": 634,
        "startChar": 55,
        "endLine": 634,
        "endChar": 61
      },
      "revId": "db7006a0f35a119c71a7b785f0a0f006bb5bcda6",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4f66760c_8a9e2586",
        "filename": "call/bitrate_allocator.h",
        "patchSetId": 1
      },
      "lineNbr": 129,
      "author": {
        "id": 5597
      },
      "writtenOn": "2024-08-15T15:03:24Z",
      "side": 1,
      "message": "nit: Use `explicit` only for single-argument constructors.",
      "range": {
        "startLine": 129,
        "startChar": 2,
        "endLine": 129,
        "endChar": 10
      },
      "fixSuggestions": [
        {
          "fixId": "9f11c092_a0a0bf67",
          "description": "prompt_to_edit API",
          "replacements": [
            {
              "path": "call/bitrate_allocator.h",
              "range": {
                "startLine": 129,
                "startChar": 0,
                "endLine": 132,
                "endChar": 0
              },
              "replacement": "  BitrateAllocator(LimitObserver* limit_observer,\n                   DataRate upper_elastic_rate_limit \u003d DataRate::Zero());\n"
            }
          ]
        }
      ],
      "revId": "db7006a0f35a119c71a7b785f0a0f006bb5bcda6",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "269b7e9f_1b8efd6d",
        "filename": "call/bitrate_allocator.h",
        "patchSetId": 1
      },
      "lineNbr": 129,
      "author": {
        "id": 19269
      },
      "writtenOn": "2024-08-16T06:46:01Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4f66760c_8a9e2586",
      "range": {
        "startLine": 129,
        "startChar": 2,
        "endLine": 129,
        "endChar": 10
      },
      "revId": "db7006a0f35a119c71a7b785f0a0f006bb5bcda6",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "de420083_2cde128c",
        "filename": "call/bitrate_allocator.h",
        "patchSetId": 1
      },
      "lineNbr": 131,
      "author": {
        "id": 5597
      },
      "writtenOn": "2024-08-15T15:03:24Z",
      "side": 1,
      "message": "Avoid default arguments.",
      "range": {
        "startLine": 131,
        "startChar": 39,
        "endLine": 131,
        "endChar": 58
      },
      "fixSuggestions": [
        {
          "fixId": "eeb9eecd_c9bbb45b",
          "description": "prompt_to_edit API",
          "replacements": [
            {
              "path": "call/bitrate_allocator.h",
              "range": {
                "startLine": 129,
                "startChar": 0,
                "endLine": 132,
                "endChar": 0
              },
              "replacement": "  explicit BitrateAllocator(LimitObserver* limit_observer,\n                            DataRate upper_elastic_rate_limit);\n"
            }
          ]
        }
      ],
      "revId": "db7006a0f35a119c71a7b785f0a0f006bb5bcda6",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c77b6007_1799bbb2",
        "filename": "call/bitrate_allocator.h",
        "patchSetId": 1
      },
      "lineNbr": 131,
      "author": {
        "id": 19269
      },
      "writtenOn": "2024-08-16T06:46:01Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "de420083_2cde128c",
      "range": {
        "startLine": 131,
        "startChar": 39,
        "endLine": 131,
        "endChar": 58
      },
      "revId": "db7006a0f35a119c71a7b785f0a0f006bb5bcda6",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "75baed9f_af7d27c2",
        "filename": "call/bitrate_allocator.h",
        "patchSetId": 1
      },
      "lineNbr": 190,
      "author": {
        "id": 5597
      },
      "writtenOn": "2024-08-15T15:03:24Z",
      "side": 1,
      "message": "can this be const?",
      "fixSuggestions": [
        {
          "fixId": "c52a5eae_540035d7",
          "description": "prompt_to_edit API",
          "replacements": [
            {
              "path": "call/bitrate_allocator.h",
              "range": {
                "startLine": 190,
                "startChar": 0,
                "endLine": 191,
                "endChar": 0
              },
              "replacement": "  const DataRate upper_elastic_rate_limit_ RTC_GUARDED_BY(\u0026sequenced_checker_);\n"
            }
          ]
        }
      ],
      "revId": "db7006a0f35a119c71a7b785f0a0f006bb5bcda6",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b1fc8f42_72c71763",
        "filename": "call/bitrate_allocator.h",
        "patchSetId": 1
      },
      "lineNbr": 190,
      "author": {
        "id": 19269
      },
      "writtenOn": "2024-08-16T06:46:01Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "75baed9f_af7d27c2",
      "revId": "db7006a0f35a119c71a7b785f0a0f006bb5bcda6",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "988d1236_404088d5",
        "filename": "call/call.cc",
        "patchSetId": 1
      },
      "lineNbr": 711,
      "author": {
        "id": 5597
      },
      "writtenOn": "2024-08-15T15:03:24Z",
      "side": 1,
      "message": "just make this the right type from the beginning, e.g. `TimeDelta next_scheduled_interval \u003d TimeDelta::Millis(25);`",
      "range": {
        "startLine": 711,
        "startChar": 10,
        "endLine": 711,
        "endChar": 36
      },
      "fixSuggestions": [
        {
          "fixId": "4368f7c7_74b13e51",
          "description": "prompt_to_edit API",
          "replacements": [
            {
              "path": "call/call.cc",
              "range": {
                "startLine": 711,
                "startChar": 0,
                "endLine": 712,
                "endChar": 0
              },
              "replacement": "          TimeDelta next_schedule_interval \u003d TimeDelta::Millis(25);\n"
            },
            {
              "path": "call/call.cc",
              "range": {
                "startLine": 714,
                "startChar": 0,
                "endLine": 715,
                "endChar": 0
              },
              "replacement": "              next_schedule_interval \u003d TimeDelta::Millis(300);\n"
            },
            {
              "path": "call/call.cc",
              "range": {
                "startLine": 716,
                "startChar": 0,
                "endLine": 717,
                "endChar": 0
              },
              "replacement": "          return next_schedule_interval;\n"
            }
          ]
        }
      ],
      "revId": "db7006a0f35a119c71a7b785f0a0f006bb5bcda6",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "400bf8fb_3c033e64",
        "filename": "call/call.cc",
        "patchSetId": 1
      },
      "lineNbr": 711,
      "author": {
        "id": 19269
      },
      "writtenOn": "2024-08-16T06:46:01Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "988d1236_404088d5",
      "range": {
        "startLine": 711,
        "startChar": 10,
        "endLine": 711,
        "endChar": 36
      },
      "revId": "db7006a0f35a119c71a7b785f0a0f006bb5bcda6",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    }
  ]
}