{
  "comments": [
    {
      "key": {
        "uuid": "7851d5da_c0716c10",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 8683
      },
      "writtenOn": "2020-09-09T12:54:25Z",
      "side": 1,
      "message": "+nisse for OWNERS review",
      "revId": "8d2ba7ea203c1815511c18483389a55b7c43240c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c498a846_fe511f28",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 5234
      },
      "writtenOn": "2020-09-09T13:24:11Z",
      "side": 1,
      "message": "Code looks pretty good, but please add some more context to linked bug or commit message. Do you have some particular encoder or decoder in mind that handles NV12 efficiently?",
      "revId": "8d2ba7ea203c1815511c18483389a55b7c43240c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "aae3bcd5_62db4494",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 8683
      },
      "writtenOn": "2020-09-09T14:13:35Z",
      "side": 1,
      "message": "libvpx has NV12 support now, added information in the bug and the description.",
      "parentUuid": "c498a846_fe511f28",
      "revId": "8d2ba7ea203c1815511c18483389a55b7c43240c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0c5d7bb7_509936de",
        "filename": "api/video/nv12_buffer.cc",
        "patchSetId": 4
      },
      "lineNbr": 102,
      "author": {
        "id": 5234
      },
      "writtenOn": "2020-09-09T13:24:11Z",
      "side": 1,
      "message": "This is similar to I420Buffer. I wonder if the casts could be avoided (in both places), without making things overly verbose, by something like\n\nsize_t UVOffset() { return stride_y_ * height_; }  // as a private method\n\nconst uint8_t* NV12Buffer::DataUV() const {\n  return data_.get() + UVOffset();\n}\nuint8_t* NV12Buffer::MutableDataUV() {\n  return data_.get() + UVOffset();\n}\n\nBut not essential for this cl.",
      "range": {
        "startLine": 96,
        "startChar": 0,
        "endLine": 102,
        "endChar": 1
      },
      "revId": "8d2ba7ea203c1815511c18483389a55b7c43240c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "34e10eda_b4d1bf0d",
        "filename": "api/video/nv12_buffer.cc",
        "patchSetId": 4
      },
      "lineNbr": 102,
      "author": {
        "id": 8683
      },
      "writtenOn": "2020-09-09T14:13:35Z",
      "side": 1,
      "message": "I don\u0027t like the const cast either, but kept it for consistency. I prefer removing them so will do as you suggested.",
      "parentUuid": "0c5d7bb7_509936de",
      "range": {
        "startLine": 96,
        "startChar": 0,
        "endLine": 102,
        "endChar": 1
      },
      "revId": "8d2ba7ea203c1815511c18483389a55b7c43240c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5761748f_77ce654b",
        "filename": "api/video/nv12_buffer.h",
        "patchSetId": 4
      },
      "lineNbr": 24,
      "author": {
        "id": 5234
      },
      "writtenOn": "2020-09-09T13:24:11Z",
      "side": 1,
      "message": "Please add class comment, and describe or link to a definition of the NV12 format.",
      "range": {
        "startLine": 24,
        "startChar": 0,
        "endLine": 24,
        "endChar": 56
      },
      "revId": "8d2ba7ea203c1815511c18483389a55b7c43240c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "560e943f_617a9819",
        "filename": "api/video/nv12_buffer.h",
        "patchSetId": 4
      },
      "lineNbr": 24,
      "author": {
        "id": 8683
      },
      "writtenOn": "2020-09-09T14:13:35Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5761748f_77ce654b",
      "range": {
        "startLine": 24,
        "startChar": 0,
        "endLine": 24,
        "endChar": 56
      },
      "revId": "8d2ba7ea203c1815511c18483389a55b7c43240c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "518d4ea2_7211bfa8",
        "filename": "api/video/test/nv12_buffer_unittest.cc",
        "patchSetId": 4
      },
      "lineNbr": 103,
      "author": {
        "id": 5234
      },
      "writtenOn": "2020-09-09T13:24:11Z",
      "side": 1,
      "message": "This kind of mirrors the production code under test. I think I\u0027d prefer a more explicit test not relying on libyuv. But I don\u0027t have that strong an opinion on that.",
      "range": {
        "startLine": 99,
        "startChar": 0,
        "endLine": 103,
        "endChar": 76
      },
      "revId": "8d2ba7ea203c1815511c18483389a55b7c43240c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5bf38373_086e65d5",
        "filename": "api/video/test/nv12_buffer_unittest.cc",
        "patchSetId": 4
      },
      "lineNbr": 103,
      "author": {
        "id": 8683
      },
      "writtenOn": "2020-09-09T14:13:35Z",
      "side": 1,
      "message": "Agreed, I can force set the YUV values instead.",
      "parentUuid": "518d4ea2_7211bfa8",
      "range": {
        "startLine": 99,
        "startChar": 0,
        "endLine": 103,
        "endChar": 76
      },
      "revId": "8d2ba7ea203c1815511c18483389a55b7c43240c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "88575c2d_db57bce2",
        "filename": "api/video/video_frame_buffer.h",
        "patchSetId": 4
      },
      "lineNbr": 202,
      "author": {
        "id": 5234
      },
      "writtenOn": "2020-09-09T13:24:11Z",
      "side": 1,
      "message": "Do you expect to implement any other kinds of BiplanarYuvBuffer soon? If not, consider deleting one or both intermediate classes, to keep things simpler.",
      "range": {
        "startLine": 195,
        "startChar": 0,
        "endLine": 202,
        "endChar": 2
      },
      "revId": "8d2ba7ea203c1815511c18483389a55b7c43240c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "27c3479b_495bb50b",
        "filename": "api/video/video_frame_buffer.h",
        "patchSetId": 4
      },
      "lineNbr": 202,
      "author": {
        "id": 5117
      },
      "writtenOn": "2020-09-09T13:27:33Z",
      "side": 1,
      "message": "Yes, we want to also add 16 bit biplanar format soon.",
      "parentUuid": "88575c2d_db57bce2",
      "range": {
        "startLine": 195,
        "startChar": 0,
        "endLine": 202,
        "endChar": 2
      },
      "revId": "8d2ba7ea203c1815511c18483389a55b7c43240c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "73237fb1_5eed8470",
        "filename": "api/video/video_frame_buffer.h",
        "patchSetId": 4
      },
      "lineNbr": 202,
      "author": {
        "id": 8683
      },
      "writtenOn": "2020-09-09T14:13:35Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "27c3479b_495bb50b",
      "range": {
        "startLine": 195,
        "startChar": 0,
        "endLine": 202,
        "endChar": 2
      },
      "revId": "8d2ba7ea203c1815511c18483389a55b7c43240c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    }
  ]
}