{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "824a10c4_f9090187",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 15
      },
      "lineNbr": 0,
      "author": {
        "id": 17470
      },
      "writtenOn": "2024-05-07T10:13:27Z",
      "side": 1,
      "message": "PTAL Danil, thanks for the comments!",
      "revId": "2dc14fd71e40e48d0c663014b560725495563ffc",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0a34c53a_2ba57cc7",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 15
      },
      "lineNbr": 0,
      "author": {
        "id": 17470
      },
      "writtenOn": "2024-05-13T12:33:28Z",
      "side": 1,
      "message": "@all assuming we can make the downcasting safe  any remaining concerns here",
      "revId": "2dc14fd71e40e48d0c663014b560725495563ffc",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9b8b2b85_bd9252aa",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 15
      },
      "lineNbr": 0,
      "author": {
        "id": 17470
      },
      "writtenOn": "2024-05-13T12:33:28Z",
      "side": 1,
      "message": "@all assuming we can make the downcasting safe, do you have any remaining concerns here?",
      "revId": "2dc14fd71e40e48d0c663014b560725495563ffc",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4992d7a2_b248672b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 15
      },
      "lineNbr": 0,
      "author": {
        "id": 17470
      },
      "writtenOn": "2024-05-13T12:33:59Z",
      "side": 1,
      "message": "@all assuming we can make the downcasting safe, do you have any remaining concerns here?",
      "revId": "2dc14fd71e40e48d0c663014b560725495563ffc",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4a0dc380_90c85953",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 15
      },
      "lineNbr": 0,
      "author": {
        "id": 5019
      },
      "writtenOn": "2024-05-14T10:30:35Z",
      "side": 1,
      "message": "My main concern is increasing code complexity:\n\n- Extra intermediate interface TransformableVideoFrameWithDependencies that makes casting a bit less safe.\nIs it possible instead to move TransformableVideoReceiverFrame into own file and add test helper to create one for testing purposing instead of introducing the Mock?\n\n- Getter function that is called once instead of passing the value directly.\nI have a draft where that is not needed.\n\nHow urgently this change is needed? If it is urgent, I can accept that extra complexity with the promise to clean it up a bit later. (can you please injects TODOs so it won\u0027t be forgotten)\nIf it is not urgent, first I prefer to see refactorings that allows to make this change simpler.",
      "parentUuid": "4992d7a2_b248672b",
      "revId": "2dc14fd71e40e48d0c663014b560725495563ffc",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7d259c64_0201a6c4",
        "filename": "modules/rtp_rtcp/source/rtp_sender_video_frame_transformer_delegate.h",
        "patchSetId": 15
      },
      "lineNbr": 83,
      "author": {
        "id": 5019
      },
      "writtenOn": "2024-05-07T16:47:26Z",
      "side": 1,
      "message": "If Video structure would pass together with a frame, but not with a dedicated function (transformer mutliplies those functions), then getter workaround I think can be avoided in favor of just passing around the right structure, \nsomething like in this dirty draft:\nhttps://webrtc-review.googlesource.com/c/src/+/349925",
      "range": {
        "startLine": 83,
        "startChar": 53,
        "endLine": 83,
        "endChar": 60
      },
      "revId": "2dc14fd71e40e48d0c663014b560725495563ffc",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e36e4528_9d45a00d",
        "filename": "modules/rtp_rtcp/source/rtp_sender_video_frame_transformer_delegate.h",
        "patchSetId": 15
      },
      "lineNbr": 83,
      "author": {
        "id": 17470
      },
      "writtenOn": "2024-05-10T13:25:06Z",
      "side": 1,
      "message": "Ah, good point. Does move the time that we\u0027re setting the structure, so I\u0027ll hold off from trying to integrate it straight away.",
      "parentUuid": "7d259c64_0201a6c4",
      "range": {
        "startLine": 83,
        "startChar": 53,
        "endLine": 83,
        "endChar": 60
      },
      "revId": "2dc14fd71e40e48d0c663014b560725495563ffc",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "58107cf6_b68a9f4b",
        "filename": "video/rtp_video_stream_receiver2.cc",
        "patchSetId": 15
      },
      "lineNbr": 897,
      "author": {
        "id": 5019
      },
      "writtenOn": "2024-05-07T16:47:26Z",
      "side": 1,
      "message": "slightly brittle, RtpVideoSender uses more complicated algorithm for deciding when to update VideoStructure\nhttps://source.chromium.org/chromium/chromium/src/+/main:third_party/webrtc/call/rtp_video_sender.cc;l\u003d323;drc\u003d02af84064c5f31caf7d9f89a24b9beeddf32b05e\n\nThough... this would likely work in all scenarios we are supporting in practice,\nspecially since VP9 no longer sets kVideoFrame for higher spatial layers after spatial layer 0 key frame.",
      "revId": "2dc14fd71e40e48d0c663014b560725495563ffc",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a1bb7fe9_4128ccdd",
        "filename": "video/rtp_video_stream_receiver2.cc",
        "patchSetId": 15
      },
      "lineNbr": 897,
      "author": {
        "id": 17470
      },
      "writtenOn": "2024-05-10T13:25:06Z",
      "side": 1,
      "message": "The set of frames passing this check is a super set of those with IsFirstFrameOfACodedVideoSequence() being true, so we\u0027ll just end up copying \u0026 setting the video_structure a little more often, but that should be safe shouldn\u0027t it, just a little addition CPU work on copying? Or have I missed something?",
      "parentUuid": "58107cf6_b68a9f4b",
      "revId": "2dc14fd71e40e48d0c663014b560725495563ffc",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    }
  ]
}