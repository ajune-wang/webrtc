{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "70091a2d_4b2d7eb3",
        "filename": "/COMMIT_MSG",
        "patchSetId": 5
      },
      "lineNbr": 10,
      "author": {
        "id": 5142
      },
      "writtenOn": "2022-02-28T08:48:46Z",
      "side": 1,
      "message": "The caller can be sure that two tasks with the same delay would have the second task\u0027s timestamp be \u003e\u003d the first task\u0027s timestamp, so order should be ensured. But the caller does not control the exact timestamp, that is up to the clock\u0027s precision of \"now\".\n\nI do think FIFO makes sense, and would be essential to have if we ever implemented PostDelayedTaskAt (specifying target timestamp instead of delay).\n\nBut does not having FIFO cause any issues today? Considering callers are quite limited in their ability to coordinate multiple delayed tasks, I wonder if there is any code today that is attempting to have multiple tasks with the same delay.\n\nBut happy for this to be fixed regardless.",
      "revId": "abbfb3799366078df63fe9c037db269ce82d5306",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b8023ed2_84996ebd",
        "filename": "/COMMIT_MSG",
        "patchSetId": 5
      },
      "lineNbr": 10,
      "author": {
        "id": 18554
      },
      "writtenOn": "2022-02-28T14:24:56Z",
      "side": 1,
      "message": "\u003e But does not having FIFO cause any issues today? Considering callers are quite limited in their ability to coordinate multiple delayed tasks, I wonder if there is any code today that is attempting to have multiple tasks with the same delay.\n\nWe are working on a POC to use PostDelayTask(0) to replace all PostTask() in RtcEventLogImpl[^1]. Thus, all logging task can be post in Metronome (64hz) to reduce wakeup. It is a parallel optimization w/ Markus[^2].\n\n[^1]: https://source.chromium.org/chromium/chromium/src/+/main:third_party/webrtc/logging/rtc_event_log/rtc_event_log_impl.cc\n[^2]: https://webrtc-review.googlesource.com/c/src/+/250165\n\n\n\u003e The caller can be sure that two tasks with the same delay would have the second task\u0027s timestamp be \u003e\u003d the first task\u0027s timestamp, so order should be ensured. But the caller does not control the exact timestamp, that is up to the clock\u0027s precision of \"now\".\n\nThe TaskQueue is millisecond precision. In RtcEventLog, the logging are quit heavy, some delayed tasks are post within 1ms window, but we still need ensure the ordering. Some RtcEventLog UnitTest failed caused by this ordering issue.\n\n\u003d\u003dDo you have any recommendations for an alternative fixing?\u003d\u003d",
      "parentUuid": "70091a2d_4b2d7eb3",
      "revId": "abbfb3799366078df63fe9c037db269ce82d5306",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cec8d190_7204acc0",
        "filename": "/COMMIT_MSG",
        "patchSetId": 5
      },
      "lineNbr": 10,
      "author": {
        "id": 5142
      },
      "writtenOn": "2022-02-28T16:34:36Z",
      "side": 1,
      "message": "I see.\n\nThere are many implementations of the task queues, both inside the WebRTC repo and outside of it. I don\u0027t have an understanding over all the different implementations or how scheduling differs between PostTask() and PostDelayedTask(0) on some of them, but I do believe PostDelayedTask() can generally trigger other code paths than PostTask() and so I do not think it is safe to assume that it is for free to replace PostTask() with PostDelayedTask(0) for non-metronome implementations of the TQs. Not sure about this though.\n\nI also do not think that PostDelayedTask(0) should be assumed to happen any significant amount of time in the future either, since this is not what the task queue interface promises. On the other hand, I would not want to replace PostTask() with PostDelayedTask(delay) with delay \u003e 0 either since this would add more wake ups if the metronome isn\u0027t available.\n\nIf you want to listen to the next tick you could make this explicit instead, and use the webrtc::Metronome interface if it is available. It has an OnTick() method where you could flush the logs, but if the metronome isn\u0027t available you could keep doing PostTask like today.\n\nIt\u0027s not clear how this would impact performance though.",
      "parentUuid": "b8023ed2_84996ebd",
      "revId": "abbfb3799366078df63fe9c037db269ce82d5306",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "68a7fe08_972eac9c",
        "filename": "/COMMIT_MSG",
        "patchSetId": 5
      },
      "lineNbr": 10,
      "author": {
        "id": 8392
      },
      "writtenOn": "2022-02-28T17:12:15Z",
      "side": 1,
      "message": "I\u0027m curious of why PostTask() is considered an important wakeup to remove? From a package-idleness point-of-view, it should have no impact since the caller was already executing on a core and hence keeping the package awake anyway.",
      "parentUuid": "cec8d190_7204acc0",
      "revId": "abbfb3799366078df63fe9c037db269ce82d5306",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b3483ae3_5abceaf6",
        "filename": "/COMMIT_MSG",
        "patchSetId": 5
      },
      "lineNbr": 10,
      "author": {
        "id": 18554
      },
      "writtenOn": "2022-03-01T06:44:42Z",
      "side": 1,
      "message": "\u003e If you want to listen to the next tick you could make this explicit instead, and use the webrtc::Metronome interface if it is available. It has an OnTick() method where you could flush the logs, but if the metronome isn\u0027t available you could keep doing PostTask like today.\n\n\nThanks. We will look into the next webrtc::Metronome interface to experiment bundle logging.\n\n\n\u003e I\u0027m curious of why PostTask() is considered an important wakeup to remove? From a package-idleness point-of-view, it should have no impact since the caller was already executing on a core and hence keeping the package awake anyway.\n\n\nIMO, each PostTask() probably wakeup TaskRunner thread (if the runner thread is previous idle), and thus a thread context switch. I am not quite sure the exact cost of such context switch. But the less switch the better. \nWe experiment to bundle some low priority async tasks (e.g. logging) for batch processing with single context switch.",
      "parentUuid": "68a7fe08_972eac9c",
      "revId": "abbfb3799366078df63fe9c037db269ce82d5306",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5384ade9_3436260b",
        "filename": "/COMMIT_MSG",
        "patchSetId": 5
      },
      "lineNbr": 10,
      "author": {
        "id": 5142
      },
      "writtenOn": "2022-03-07T11:47:10Z",
      "side": 1,
      "message": "Considering the overlap with https://webrtc-review.googlesource.com/c/src/+/250165, I\u0027d like to get +Markus input on whether or not it is worth doing anything about the event logs until then.\n\nBut we can certainly fix this out of order bug regardless.",
      "parentUuid": "b3483ae3_5abceaf6",
      "revId": "abbfb3799366078df63fe9c037db269ce82d5306",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "50c94326_858b8df6",
        "filename": "/COMMIT_MSG",
        "patchSetId": 5
      },
      "lineNbr": 10,
      "author": {
        "id": 18554
      },
      "writtenOn": "2022-03-08T01:39:24Z",
      "side": 1,
      "message": "Yes. I drop the idea to use PostDelayedTask in event log. As you mentioned, DelayedTask perhaps have other cost in different implementations.\n\nJust fix this order issue.",
      "parentUuid": "5384ade9_3436260b",
      "revId": "abbfb3799366078df63fe9c037db269ce82d5306",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "02fdd70f_d9dc4239",
        "filename": "/COMMIT_MSG",
        "patchSetId": 5
      },
      "lineNbr": 10,
      "author": {
        "id": 18554
      },
      "writtenOn": "2022-03-09T03:10:06Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "50c94326_858b8df6",
      "revId": "abbfb3799366078df63fe9c037db269ce82d5306",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "55dc26a8_3c788d05",
        "filename": "api/task_queue/task_queue_test.cc",
        "patchSetId": 5
      },
      "lineNbr": 158,
      "author": {
        "id": 5142
      },
      "writtenOn": "2022-02-28T08:48:46Z",
      "side": 1,
      "message": "Note that this test could have false positive since time \"now\" may increase between first and second PostDelayedTask, so target timestamp may end up being different. But there\u0027s no way to mock time for TQs right now AFAIK, so I think this is the best we can do.",
      "revId": "abbfb3799366078df63fe9c037db269ce82d5306",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0c6ac92a_2edb0b2c",
        "filename": "api/task_queue/task_queue_test.cc",
        "patchSetId": 5
      },
      "lineNbr": 158,
      "author": {
        "id": 18554
      },
      "writtenOn": "2022-02-28T14:24:56Z",
      "side": 1,
      "message": "If we have 2 delayed tasks.\n1. PostDelayedTask(0) at 1.1ms\n2. PostDelayedTask(0) at 1.2ms\nWe expect 1st task is executed earlier than 2nd task. \n\nBut TaskQueue is millisecond precision. The execution ordering is random depend on the implementation.",
      "parentUuid": "55dc26a8_3c788d05",
      "revId": "abbfb3799366078df63fe9c037db269ce82d5306",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "92f5632b_b4136917",
        "filename": "api/task_queue/task_queue_test.cc",
        "patchSetId": 5
      },
      "lineNbr": 158,
      "author": {
        "id": 18554
      },
      "writtenOn": "2022-03-09T03:10:06Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0c6ac92a_2edb0b2c",
      "revId": "abbfb3799366078df63fe9c037db269ce82d5306",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a7c2f5b9_5694bbd3",
        "filename": "api/task_queue/task_queue_test.cc",
        "patchSetId": 5
      },
      "lineNbr": 163,
      "author": {
        "id": 5142
      },
      "writtenOn": "2022-02-28T08:48:46Z",
      "side": 1,
      "message": "Do you specifically want to test delay\u003d0 or do you want to test any delay (delay \u003e\u003d 0)?\n\nSome TQ implementations special case delay\u003c\u003d0 to mean PostTask rather than PostDelayedTask, so for this reason you may want to test both delay\u003d0 and delay\u003e0.",
      "revId": "abbfb3799366078df63fe9c037db269ce82d5306",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c0246b90_5a376f0d",
        "filename": "api/task_queue/task_queue_test.cc",
        "patchSetId": 5
      },
      "lineNbr": 163,
      "author": {
        "id": 18554
      },
      "writtenOn": "2022-02-28T14:24:56Z",
      "side": 1,
      "message": "The usage is only to PostDelayTaks(0) in looping, and we expect all of them are executed on the same enqueue ordering.\n\nNo (delay \u003e 0) in our usage. Perhaps we can add TestCase on (delay \u003e 0).",
      "parentUuid": "a7c2f5b9_5694bbd3",
      "revId": "abbfb3799366078df63fe9c037db269ce82d5306",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "44ab57f2_92301e37",
        "filename": "api/task_queue/task_queue_test.cc",
        "patchSetId": 5
      },
      "lineNbr": 163,
      "author": {
        "id": 18554
      },
      "writtenOn": "2022-03-09T03:10:06Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c0246b90_5a376f0d",
      "revId": "abbfb3799366078df63fe9c037db269ce82d5306",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    }
  ]
}