{
  "comments": [
    {
      "key": {
        "uuid": "66446fe4_34480553",
        "filename": "api/peerconnectioninterface.h",
        "patchSetId": 11
      },
      "lineNbr": 179,
      "author": {
        "id": 5142
      },
      "writtenOn": "2018-10-12T12:44:41Z",
      "side": 1,
      "message": "I know the surrounding enums are normal enums but I still prefer enum class",
      "revId": "2aafa01908af77cfdd3f683ddab9121ed8b7588d",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7efd9344_af4d3592",
        "filename": "api/peerconnectioninterface.h",
        "patchSetId": 11
      },
      "lineNbr": 179,
      "author": {
        "id": 6547
      },
      "writtenOn": "2018-10-17T11:17:03Z",
      "side": 1,
      "message": "On a second thought, I also prefer it. I didn\u0027t realize that old-school enums can be used in place of each other, that seems like a nice thing to avoid.",
      "parentUuid": "66446fe4_34480553",
      "revId": "2aafa01908af77cfdd3f683ddab9121ed8b7588d",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ada1c347_3223a284",
        "filename": "api/peerconnectioninterface.h",
        "patchSetId": 11
      },
      "lineNbr": 1072,
      "author": {
        "id": 5142
      },
      "writtenOn": "2018-10-12T12:44:41Z",
      "side": 1,
      "message": "Add a TODO to remove the default implementation once upstream projects are updated.",
      "revId": "2aafa01908af77cfdd3f683ddab9121ed8b7588d",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "26531552_7a15f0e0",
        "filename": "api/peerconnectioninterface.h",
        "patchSetId": 11
      },
      "lineNbr": 1072,
      "author": {
        "id": 6547
      },
      "writtenOn": "2018-10-17T11:17:03Z",
      "side": 1,
      "message": "I\u0027ve removed the new ice state from api/, let\u0027s switch it over in webrtc instead when we\u0027re ready.",
      "parentUuid": "ada1c347_3223a284",
      "revId": "2aafa01908af77cfdd3f683ddab9121ed8b7588d",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4f84bcb3_b2c36b36",
        "filename": "pc/jseptransportcontroller.cc",
        "patchSetId": 11
      },
      "lineNbr": 1175,
      "author": {
        "id": 5142
      },
      "writtenOn": "2018-10-12T12:44:41Z",
      "side": 1,
      "message": "nit: Remove space between link and .",
      "revId": "2aafa01908af77cfdd3f683ddab9121ed8b7588d",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "07387417_c834a8a5",
        "filename": "pc/jseptransportcontroller.cc",
        "patchSetId": 11
      },
      "lineNbr": 1175,
      "author": {
        "id": 6547
      },
      "writtenOn": "2018-10-17T11:17:03Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4f84bcb3_b2c36b36",
      "revId": "2aafa01908af77cfdd3f683ddab9121ed8b7588d",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d11abdb2_7b661219",
        "filename": "pc/jseptransportcontroller.cc",
        "patchSetId": 11
      },
      "lineNbr": 1187,
      "author": {
        "id": 5142
      },
      "writtenOn": "2018-10-12T12:44:41Z",
      "side": 1,
      "message": "Nice! I like how the code maps really neatly to the spec, easy to see that the logic is the same.",
      "revId": "2aafa01908af77cfdd3f683ddab9121ed8b7588d",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d572c1a8_9a2063b4",
        "filename": "pc/jseptransportcontroller.cc",
        "patchSetId": 11
      },
      "lineNbr": 1215,
      "author": {
        "id": 5142
      },
      "writtenOn": "2018-10-12T12:44:41Z",
      "side": 1,
      "message": "Do we want to DCHECK this?\n\nThere\u0027s also the kClosed state, but I guess that\u0027s a special case. Does this layer know whether the peer connection is closed?",
      "revId": "2aafa01908af77cfdd3f683ddab9121ed8b7588d",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9b034b3d_c0a188de",
        "filename": "pc/jseptransportcontroller.cc",
        "patchSetId": 11
      },
      "lineNbr": 1216,
      "author": {
        "id": 5634
      },
      "writtenOn": "2018-10-11T11:14:36Z",
      "side": 1,
      "message": "It seems strange that when everything is closed, the state is \"new\", but that\u0027s commentary on the spec, not commmentary on the implementation....",
      "revId": "2aafa01908af77cfdd3f683ddab9121ed8b7588d",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c4fcccf1_5b926f3f",
        "filename": "pc/jseptransportcontroller.cc",
        "patchSetId": 11
      },
      "lineNbr": 1216,
      "author": {
        "id": 6547
      },
      "writtenOn": "2018-10-11T11:21:08Z",
      "side": 1,
      "message": "I guess it\u0027s \"new\" in the same sense that a freshly wiped blackboard is? I do agree it feels weird though.",
      "parentUuid": "9b034b3d_c0a188de",
      "revId": "2aafa01908af77cfdd3f683ddab9121ed8b7588d",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "80e8f5e2_77793cc9",
        "filename": "pc/jseptransportcontroller.cc",
        "patchSetId": 11
      },
      "lineNbr": 1228,
      "author": {
        "id": 5142
      },
      "writtenOn": "2018-10-12T12:44:41Z",
      "side": 1,
      "message": "nit: Remove space between link and .",
      "revId": "2aafa01908af77cfdd3f683ddab9121ed8b7588d",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "32d2aa1c_1a872b17",
        "filename": "pc/jseptransportcontroller.cc",
        "patchSetId": 11
      },
      "lineNbr": 1228,
      "author": {
        "id": 6547
      },
      "writtenOn": "2018-10-17T11:17:03Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "80e8f5e2_77793cc9",
      "revId": "2aafa01908af77cfdd3f683ddab9121ed8b7588d",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4c6d5337_8820957b",
        "filename": "pc/jseptransportcontroller.cc",
        "patchSetId": 11
      },
      "lineNbr": 1241,
      "author": {
        "id": 5142
      },
      "writtenOn": "2018-10-12T12:44:41Z",
      "side": 1,
      "message": "Is this always true?\nEarlier we are iterating all DTLS transports; all of them have an ICE transport.\n...But does every ICE transport have a DTLS transport?",
      "revId": "2aafa01908af77cfdd3f683ddab9121ed8b7588d",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f907d56b_2f463437",
        "filename": "pc/jseptransportcontroller.cc",
        "patchSetId": 11
      },
      "lineNbr": 1241,
      "author": {
        "id": 6547
      },
      "writtenOn": "2018-10-17T11:17:03Z",
      "side": 1,
      "message": "Every ICE transport that we base this stat on, at least. We could compute this value by adding all values in the two maps, but that seems like a bunch of useless overhead.",
      "parentUuid": "4c6d5337_8820957b",
      "revId": "2aafa01908af77cfdd3f683ddab9121ed8b7588d",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "15ed815b_c6f710d5",
        "filename": "pc/jseptransportcontroller.cc",
        "patchSetId": 11
      },
      "lineNbr": 1254,
      "author": {
        "id": 5142
      },
      "writtenOn": "2018-10-12T12:44:41Z",
      "side": 1,
      "message": "nit: you can DCHECK that total_failed \u003d\u003d 0 since it is part of the definition of \"connecting\" but superfluous to test due to earlier ifs (in case anything is ever moved around or whatnot).",
      "revId": "2aafa01908af77cfdd3f683ddab9121ed8b7588d",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "28c81c0f_1d52e82d",
        "filename": "pc/jseptransportcontroller.cc",
        "patchSetId": 11
      },
      "lineNbr": 1254,
      "author": {
        "id": 6547
      },
      "writtenOn": "2018-10-17T11:17:03Z",
      "side": 1,
      "message": "I don\u0027t think DCHECKING is the right tool here. Either we should trust the other conditions to enforce the preconditions like I do now, or we should have the complete condition in every branch, so that moving them around is actually safe.\n\nDo you have a preference either way?",
      "parentUuid": "15ed815b_c6f710d5",
      "revId": "2aafa01908af77cfdd3f683ddab9121ed8b7588d",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "163da7cb_a1dbc36a",
        "filename": "pc/jseptransportcontroller.cc",
        "patchSetId": 11
      },
      "lineNbr": 1254,
      "author": {
        "id": 5634
      },
      "writtenOn": "2018-10-17T12:31:15Z",
      "side": 1,
      "message": "I think of DCHECK as \"trust but verify\" - it\u0027s free in release builds, and catches mistakes done during refactoring.",
      "parentUuid": "28c81c0f_1d52e82d",
      "revId": "2aafa01908af77cfdd3f683ddab9121ed8b7588d",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4d17eda0_456dc8be",
        "filename": "pc/jseptransportcontroller.cc",
        "patchSetId": 11
      },
      "lineNbr": 1254,
      "author": {
        "id": 6547
      },
      "writtenOn": "2018-10-17T13:07:41Z",
      "side": 1,
      "message": "True, but if we\u0027re afraid of the \"careless refactor\" scenario, shouldn\u0027t we prefer the solution that remains correct after reordering over the one that\u0027s simply a run-time crash in debug builds? I also find it easier to understand e.g. this:\n\nif (a) {\n} else if (!a \u0026\u0026 b) {\n} else ...\n\nas opposed to\n\nif (a) {\n} else if (b) {\n  RTC_DCHECK(!a);\n} else ...\n\nRegarding inefficiencies in release builds, this seems like the type of problem that should be easy for compilers to optimize away. I did some experiments(https://godbolt.org/z/eYMu9l), and that does indeed seem to be the case.",
      "parentUuid": "163da7cb_a1dbc36a",
      "revId": "2aafa01908af77cfdd3f683ddab9121ed8b7588d",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "93713133_22bb0613",
        "filename": "pc/jseptransportcontroller.cc",
        "patchSetId": 11
      },
      "lineNbr": 1270,
      "author": {
        "id": 5142
      },
      "writtenOn": "2018-10-12T12:44:41Z",
      "side": 1,
      "message": "nit: DCHECK the conditions?",
      "revId": "2aafa01908af77cfdd3f683ddab9121ed8b7588d",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e0125aaa_3673ca96",
        "filename": "pc/jseptransportcontroller.cc",
        "patchSetId": 11
      },
      "lineNbr": 1279,
      "author": {
        "id": 5142
      },
      "writtenOn": "2018-10-12T12:44:41Z",
      "side": 1,
      "message": "There may be possible races between in-flight tasks and the JsepTransportController destructor. In-flight tasks will be cancelled when the AsyncInvoker is destroyed. But I guess destruction only happens at PC destruction, which is after it has already been closed, and closing probably closes all the states anyway. This is no different than the existing code but always good to think about this stuff.",
      "revId": "2aafa01908af77cfdd3f683ddab9121ed8b7588d",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "11579628_748dacc6",
        "filename": "pc/peerconnection.h",
        "patchSetId": 11
      },
      "lineNbr": 380,
      "author": {
        "id": 5142
      },
      "writtenOn": "2018-10-12T12:44:41Z",
      "side": 1,
      "message": "Should this be called Set(Peer)ConnectionState?",
      "revId": "2aafa01908af77cfdd3f683ddab9121ed8b7588d",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a33e0a8b_3371fb83",
        "filename": "pc/peerconnection.h",
        "patchSetId": 11
      },
      "lineNbr": 380,
      "author": {
        "id": 6547
      },
      "writtenOn": "2018-10-17T11:17:03Z",
      "side": 1,
      "message": "Yeah, that\u0027s probably better.",
      "parentUuid": "11579628_748dacc6",
      "revId": "2aafa01908af77cfdd3f683ddab9121ed8b7588d",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3b852e96_1ca5d004",
        "filename": "pc/peerconnection_integrationtest.cc",
        "patchSetId": 11
      },
      "lineNbr": 3596,
      "author": {
        "id": 5142
      },
      "writtenOn": "2018-10-12T12:44:41Z",
      "side": 1,
      "message": "After \"new\", is it expected to go \"new\" -\u003e \"connected\" and not \"new\" -\u003e \"connecting\" -\u003e \"connected\"? My thinking is that the DTLS connecting should be reflected in the PC connecting?",
      "revId": "2aafa01908af77cfdd3f683ddab9121ed8b7588d",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    }
  ]
}