{
  "comments": [
    {
      "key": {
        "uuid": "fcb7242f_2ae7f461",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 9002
      },
      "writtenOn": "2020-07-31T06:13:04Z",
      "side": 1,
      "message": "Thanks Christoffer! Should I interpret your +1 as ready to submit?",
      "revId": "4bd693561d7ae9cb036e50abaf1b4ae6c9298057",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dfd00194_7a13f870",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 5845
      },
      "writtenOn": "2020-07-31T06:25:57Z",
      "side": 1,
      "message": "Yes",
      "parentUuid": "fcb7242f_2ae7f461",
      "revId": "4bd693561d7ae9cb036e50abaf1b4ae6c9298057",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b2d85dc5_5eefbdbe",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 9002
      },
      "writtenOn": "2020-07-31T21:19:06Z",
      "side": 1,
      "message": "Hi Magnus and Niels, could you please review this CL, as owners of webrtc_video_engine? Christoffer has already approved. Thank you!",
      "revId": "4bd693561d7ae9cb036e50abaf1b4ae6c9298057",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4a9718fd_18c13792",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 5234
      },
      "writtenOn": "2020-08-03T07:55:06Z",
      "side": 1,
      "message": "Looks reasonable, but can you explain why it has to be a field trial? It sounds a bit similar to using DegradationPreference::MAINTAIN_RESOLUTION, which is in the advertised peerconnection api.",
      "revId": "4bd693561d7ae9cb036e50abaf1b4ae6c9298057",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d87f279c_4bdeed7c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 9002
      },
      "writtenOn": "2020-08-05T05:35:55Z",
      "side": 1,
      "message": "Good question. For context, the code that needs this particular change is based on webrtc/examples/peerconnection/client/conductor.cc, and it already sets the degradation preference you mention in a snippet that looks like this:\n\n  rtc::scoped_refptr\u003cwebrtc::VideoTrackInterface\u003e video_track_(\n      peer_connection_factory_-\u003eCreateVideoTrack(track_identifier,\n                                                 video_source));\n  result_or_error \u003d peer_connection_-\u003eAddTrack(video_track_, {kStreamId});\n  if (!result_or_error.ok()) {\n    std::string msg \u003d \"Failed to add video track to PeerConnection: \";\n    msg +\u003d result_or_error.error().message();\n    SendFatalError(msg);\n  }\n  webrtc::RtpParameters params \u003d result_or_error.value()-\u003eGetParameters();\n  params.degradation_preference \u003d\n      webrtc::DegradationPreference::MAINTAIN_RESOLUTION;\n  result_or_error.value()-\u003eSetParameters(params);\n\nUnfortunately, despite this, by the time we get to WebRtcVideoChannel::WebRtcVideoSendStream::ConfigureVideoEncoderSettings(), automatic_resize ends up being set to true -- hence this CL\u0027s proposal to turn automatic_resize off via a field trial.\n\nAre you proposing to change ConfigureVideoEncoderSettings() to look at GetDegradationPreference() for computing automatic_resize (assuming that the call graph permits that -- which I am don\u0027t know enough about)? If true, this seems like a change with potential ramifications well beyond this CL.",
      "parentUuid": "4a9718fd_18c13792",
      "revId": "4bd693561d7ae9cb036e50abaf1b4ae6c9298057",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a7e0b492_69cab40c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 5234
      },
      "writtenOn": "2020-08-05T07:24:44Z",
      "side": 1,
      "message": "Åsa, PTAL. Do you know how DegradationPreference::MAINTAIN_RESOLUTION is intended to interact with automatic_resize?",
      "revId": "4bd693561d7ae9cb036e50abaf1b4ae6c9298057",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dbeb1934_5277f14e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 5234
      },
      "writtenOn": "2020-08-05T07:24:44Z",
      "side": 1,
      "message": "I would expect using MAINTAIN_RESOLUTION to disable all downscaling of the frame, but I\u0027m not really familiar with all ways downscaling (or frame drops, for that matter) can happen. So wiring the degradation settings down to the place where automatic_resize is set sounds right to me.\n\nAdding Åsa, who knows these things a lot better than I do.\n\nMy gut feeling is that we shouldn\u0027t add any field trials that act in parallel with advertised api knobs.",
      "parentUuid": "d87f279c_4bdeed7c",
      "revId": "4bd693561d7ae9cb036e50abaf1b4ae6c9298057",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dd57c308_d30df91e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 5492
      },
      "writtenOn": "2020-08-05T11:19:46Z",
      "side": 1,
      "message": "MAINTAIN_RESOLUTION (or DISABLED) should ensure that the resolution is not downscaled (even if automatic resize is enabled). If a downgrade is requested (due to quality or cpu), the degradation preference determines the preferred downgrading way. Automatic_resize can disable the quality scaler.",
      "parentUuid": "a7e0b492_69cab40c",
      "revId": "4bd693561d7ae9cb036e50abaf1b4ae6c9298057",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a711a04a_4bba2179",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 9002
      },
      "writtenOn": "2020-08-05T16:21:30Z",
      "side": 1,
      "message": "Thanks for the perspective -- but I\u0027m still unclear if this means I should keep the CL as-is?",
      "parentUuid": "dd57c308_d30df91e",
      "revId": "4bd693561d7ae9cb036e50abaf1b4ae6c9298057",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    }
  ]
}