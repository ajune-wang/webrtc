{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "46d6cccc_e84bdf11",
        "filename": "rtc_base/copy_on_write_buffer.h",
        "patchSetId": 6
      },
      "lineNbr": 79,
      "author": {
        "id": 5019
      },
      "writtenOn": "2021-09-17T13:23:47Z",
      "side": 1,
      "message": "likely you\u0027ll need to add clause\n\u0026\u0026 !std::is_same\u003cV, CopyOnWriteBuffer\u003e\n\nto avoid conflict the copy constructor.\n(copy constructor avoid memcpy, unlike this constructor)",
      "range": {
        "startLine": 79,
        "startChar": 60,
        "endLine": 79,
        "endChar": 62
      },
      "revId": "c571f527221f52fa67db748a7fa5fd7b5bbe49a1",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9c955163_55b5f662",
        "filename": "rtc_base/copy_on_write_buffer.h",
        "patchSetId": 6
      },
      "lineNbr": 79,
      "author": {
        "id": 5527
      },
      "writtenOn": "2021-09-17T14:06:20Z",
      "side": 1,
      "message": "Good point!\n\nupdated",
      "parentUuid": "46d6cccc_e84bdf11",
      "range": {
        "startLine": 79,
        "startChar": 60,
        "endLine": 79,
        "endChar": 62
      },
      "revId": "c571f527221f52fa67db748a7fa5fd7b5bbe49a1",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f1b98233_1342de0b",
        "filename": "rtc_base/copy_on_write_buffer.h",
        "patchSetId": 6
      },
      "lineNbr": 82,
      "author": {
        "id": 5019
      },
      "writtenOn": "2021-09-17T13:23:47Z",
      "side": 1,
      "message": "why this constructor is implicit?\ndo you have an example where you rely on it beeing implicit?",
      "range": {
        "startLine": 82,
        "startChar": 2,
        "endLine": 82,
        "endChar": 19
      },
      "revId": "c571f527221f52fa67db748a7fa5fd7b5bbe49a1",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d3a51f58_ba6ace84",
        "filename": "rtc_base/copy_on_write_buffer.h",
        "patchSetId": 6
      },
      "lineNbr": 82,
      "author": {
        "id": 5527
      },
      "writtenOn": "2021-09-17T14:06:20Z",
      "side": 1,
      "message": "I think it\u0027s more consistent if you can use a COW buffer like this:\n\n    void fun(rtc::CopyOnWriteBuffer b) {\n      ...\n    }\n\n    uint8_t foo[] \u003d {1,2,3};\n    std::vector\u003cint8_t\u003e bar \u003d {4,5,6};\n    std::string baz \u003d \"MetaProgrammingIsFun\"\n\n    fun(\"abc\");\n    fun(\"baz\");\n    fun(foo);\n    fun(bar);\n    fun(CopyOnWriteBuffer(bar));  // don\u0027t wanna have to do this",
      "parentUuid": "f1b98233_1342de0b",
      "range": {
        "startLine": 82,
        "startChar": 2,
        "endLine": 82,
        "endChar": 19
      },
      "revId": "c571f527221f52fa67db748a7fa5fd7b5bbe49a1",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5a7bb602_ef421d09",
        "filename": "rtc_base/copy_on_write_buffer.h",
        "patchSetId": 6
      },
      "lineNbr": 82,
      "author": {
        "id": 5019
      },
      "writtenOn": "2021-09-17T14:22:42Z",
      "side": 1,
      "message": "I disagree: unlike ArrayView, point of COWBuffer is not type erasure.\nthe main point of COWBuffer is shared ownership of the underlying memory (cheap copy and slice)\nin particular this COWBuffer constructor is expensive (memcpy), so I think it should be explicit.\n\n(in particular I think it is currently a mistake that CopyOnWriteBuffer that takes array of bytes is implicit)",
      "parentUuid": "d3a51f58_ba6ace84",
      "range": {
        "startLine": 82,
        "startChar": 2,
        "endLine": 82,
        "endChar": 19
      },
      "revId": "c571f527221f52fa67db748a7fa5fd7b5bbe49a1",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "af4cbb19_a0f66cc1",
        "filename": "rtc_base/copy_on_write_buffer.h",
        "patchSetId": 6
      },
      "lineNbr": 82,
      "author": {
        "id": 5527
      },
      "writtenOn": "2021-09-17T14:51:20Z",
      "side": 1,
      "message": "Updated, had a look at c-array ctor as well, looks like it shouldn\u0027t be too hard to mark it explicit as well.",
      "parentUuid": "5a7bb602_ef421d09",
      "range": {
        "startLine": 82,
        "startChar": 2,
        "endLine": 82,
        "endChar": 19
      },
      "revId": "c571f527221f52fa67db748a7fa5fd7b5bbe49a1",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2b5d9b0d_b2e24aad",
        "filename": "rtc_base/copy_on_write_buffer.h",
        "patchSetId": 6
      },
      "lineNbr": 249,
      "author": {
        "id": 5019
      },
      "writtenOn": "2021-09-17T13:23:47Z",
      "side": 1,
      "message": "you can remove this version in favor of the template just above",
      "range": {
        "startLine": 246,
        "startChar": 0,
        "endLine": 249,
        "endChar": 0
      },
      "revId": "c571f527221f52fa67db748a7fa5fd7b5bbe49a1",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f6b1f53a_c083e3d9",
        "filename": "rtc_base/copy_on_write_buffer.h",
        "patchSetId": 6
      },
      "lineNbr": 249,
      "author": {
        "id": 5527
      },
      "writtenOn": "2021-09-17T14:06:20Z",
      "side": 1,
      "message": "Maybe I\u0027m just complicating things, but my plan was to do a followup CL where this and the std::string ctor was removed.",
      "parentUuid": "2b5d9b0d_b2e24aad",
      "range": {
        "startLine": 246,
        "startChar": 0,
        "endLine": 249,
        "endChar": 0
      },
      "revId": "c571f527221f52fa67db748a7fa5fd7b5bbe49a1",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "67a528d1_a88bee2f",
        "filename": "rtc_base/copy_on_write_buffer.h",
        "patchSetId": 6
      },
      "lineNbr": 249,
      "author": {
        "id": 5019
      },
      "writtenOn": "2021-09-17T15:28:33Z",
      "side": 1,
      "message": "for AppendData I think it is better to remove this version right away.\ntreat set of function overloads as single entity.\n\nif you replace template magic with simple overload:\nvoid AppendData(rtc::ArrayView\u003cconst uint8_t\u003e buf);\nvoid AppendData(rtc::ArrayView\u003cconst int8_t\u003e buf);\n\nthen you can remove AppendData for c array too.\n\n(i.e. why re-implement type erasure that ArrayView does?)\n\nFor constructors I also think it is better to declare single set in the same CL.",
      "parentUuid": "f6b1f53a_c083e3d9",
      "range": {
        "startLine": 246,
        "startChar": 0,
        "endLine": 249,
        "endChar": 0
      },
      "revId": "c571f527221f52fa67db748a7fa5fd7b5bbe49a1",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ea739665_f74a9e42",
        "filename": "rtc_base/copy_on_write_buffer.h",
        "patchSetId": 6
      },
      "lineNbr": 249,
      "author": {
        "id": 5527
      },
      "writtenOn": "2021-09-20T09:26:36Z",
      "side": 1,
      "message": "I would also prefer the non template-magic version, unfortunately it doesn\u0027t work downstream (but it works in OS). \n\nNot sure what the difference is but downstream the problems is that this call for example: https://source.chromium.org/chromium/_/webrtc/src.git/+/b26863ed0cd3ae890271424f01e560baeb380e64:rtc_base/copy_on_write_buffer_unittest.cc;l\u003d119;drc\u003de4fd1ba3198932d4c4ca0e0cc98635758555adee becomes ambiguous as the compiler can\u0027t choose between the uint8_t and int8_t version.",
      "parentUuid": "67a528d1_a88bee2f",
      "range": {
        "startLine": 246,
        "startChar": 0,
        "endLine": 249,
        "endChar": 0
      },
      "revId": "c571f527221f52fa67db748a7fa5fd7b5bbe49a1",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9e4f5d98_4f6f05d2",
        "filename": "rtc_base/copy_on_write_buffer.h",
        "patchSetId": 6
      },
      "lineNbr": 249,
      "author": {
        "id": 5019
      },
      "writtenOn": "2021-09-20T09:36:37Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "ea739665_f74a9e42",
      "range": {
        "startLine": 246,
        "startChar": 0,
        "endLine": 249,
        "endChar": 0
      },
      "revId": "c571f527221f52fa67db748a7fa5fd7b5bbe49a1",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    }
  ]
}