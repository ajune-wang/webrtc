{
  "comments": [
    {
      "key": {
        "uuid": "04bd49a8_b60f792d",
        "filename": "rtc_base/experiments/audio_allocation_settings.cc",
        "patchSetId": 5
      },
      "lineNbr": 40,
      "author": {
        "id": 5126
      },
      "writtenOn": "2019-01-21T10:02:30Z",
      "side": 1,
      "message": "constexpr?",
      "range": {
        "startLine": 40,
        "startChar": 4,
        "endLine": 40,
        "endChar": 9
      },
      "revId": "5b98354434d26da2ec58cc9b185ff22c039a6e8c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "173c906c_0970f62c",
        "filename": "rtc_base/experiments/audio_allocation_settings.cc",
        "patchSetId": 5
      },
      "lineNbr": 40,
      "author": {
        "id": 5531
      },
      "writtenOn": "2019-01-21T18:41:51Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "04bd49a8_b60f792d",
      "range": {
        "startLine": 40,
        "startChar": 4,
        "endLine": 40,
        "endChar": 9
      },
      "revId": "5b98354434d26da2ec58cc9b185ff22c039a6e8c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "af66261a_b82185bc",
        "filename": "rtc_base/experiments/audio_allocation_settings.h",
        "patchSetId": 5
      },
      "lineNbr": 41,
      "author": {
        "id": 5126
      },
      "writtenOn": "2019-01-21T10:02:30Z",
      "side": 1,
      "message": "\"Regular functions have mixed case; accessors and mutators may be named like variables.\" -- https://google.github.io/styleguide/cppguide.html#Function_Names\n\nAlmost all of these are neither accessors nor mutators. Personally, I favor just using SnakeCase everywhere (also style guide compliant), since that\u0027s much simpler.\n\nOh, and please document what the methods and the class do.",
      "revId": "5b98354434d26da2ec58cc9b185ff22c039a6e8c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0fa4a931_b5b819f5",
        "filename": "rtc_base/experiments/audio_allocation_settings.h",
        "patchSetId": 5
      },
      "lineNbr": 41,
      "author": {
        "id": 5531
      },
      "writtenOn": "2019-01-21T18:41:51Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "af66261a_b82185bc",
      "revId": "5b98354434d26da2ec58cc9b185ff22c039a6e8c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "06b6ddc1_180d547a",
        "filename": "rtc_base/experiments/audio_allocation_settings.h",
        "patchSetId": 5
      },
      "lineNbr": 49,
      "author": {
        "id": 5126
      },
      "writtenOn": "2019-01-21T10:02:30Z",
      "side": 1,
      "message": "This one can be const, right? Unless you want to support operator\u003d, but you currently don\u0027t.",
      "revId": "5b98354434d26da2ec58cc9b185ff22c039a6e8c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9d35d2c3_d47e2d6c",
        "filename": "rtc_base/experiments/audio_allocation_settings.h",
        "patchSetId": 5
      },
      "lineNbr": 49,
      "author": {
        "id": 5531
      },
      "writtenOn": "2019-01-21T18:41:51Z",
      "side": 1,
      "message": "No, it\u0027s set in the constructor, not in the initializer.",
      "parentUuid": "06b6ddc1_180d547a",
      "revId": "5b98354434d26da2ec58cc9b185ff22c039a6e8c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "72121510_40322b09",
        "filename": "rtc_base/experiments/audio_allocation_settings.h",
        "patchSetId": 5
      },
      "lineNbr": 49,
      "author": {
        "id": 5126
      },
      "writtenOn": "2019-01-22T00:17:34Z",
      "side": 1,
      "message": "But that can be changed. In fact, now that I look closer, can\u0027t *all* member variables be const? The fact that all the methods are const gave it away...\n\nI hope this isn\u0027t coming across as just busywork. When reading code, const annotations are very valuable, because they\u0027re a compiler-verified assertion that the variable in question will behave in a much simpler way than might otherwise be the case. Therefore it\u0027s worth some effort to be able to apply them where possible.",
      "parentUuid": "9d35d2c3_d47e2d6c",
      "revId": "5b98354434d26da2ec58cc9b185ff22c039a6e8c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6a7b4e13_427363b3",
        "filename": "rtc_base/experiments/audio_allocation_settings.h",
        "patchSetId": 5
      },
      "lineNbr": 49,
      "author": {
        "id": 5126
      },
      "writtenOn": "2019-01-22T10:34:37Z",
      "side": 1,
      "message": "This (that all the member variables should be const) is the one remaining point on my list. Do you agree, or do you have a counterargument?",
      "parentUuid": "72121510_40322b09",
      "revId": "5b98354434d26da2ec58cc9b185ff22c039a6e8c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8af54b38_b46a0318",
        "filename": "rtc_base/experiments/audio_allocation_settings.h",
        "patchSetId": 5
      },
      "lineNbr": 49,
      "author": {
        "id": 5531
      },
      "writtenOn": "2019-01-23T07:56:29Z",
      "side": 1,
      "message": "They can\u0027t be made const either, as they are read using the parser.\n\nI don\u0027t think it\u0027s a big issue ass all public members are const it\u0027s quite clear that the state isn\u0027t expected to change. However, I made all usages of the class const to clarify.",
      "parentUuid": "6a7b4e13_427363b3",
      "revId": "5b98354434d26da2ec58cc9b185ff22c039a6e8c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3158fe76_ddef5360",
        "filename": "rtc_base/experiments/audio_allocation_settings.h",
        "patchSetId": 5
      },
      "lineNbr": 49,
      "author": {
        "id": 5126
      },
      "writtenOn": "2019-01-23T10:32:09Z",
      "side": 1,
      "message": "You can transform code like this\n\n  MyClass(int x) {\n    Foo(x, \u0026member_);\n  }\n\nto this\n\n  Bar CallFoo(int x) {\n    Bar b;\n    Foo(x, \u0026b);\n    return b;\n  }\n  MyClass(int x) : member_(CallFoo(x)) {}\n\nprovided only that Bar (the type of member_) is move constructible. (You can of course use a lambda instead of a named function---whichever is more readable.)\n\nIf I\u0027m reading the code right, FieldTrialFlag isn\u0027t currently movable, but only because it doesn\u0027t declare itself to be.\n\nIf you still think this is a bad idea I won\u0027t try to force you, but constness is an important tool for C++ code readability, and it\u0027s unfortunate if we design our code so that we can\u0027t or won\u0027t use it. For example, if you don\u0027t want to do this on the grounds that it makes the code verbose and convoluted, we should maybe consider if there shouldn\u0027t exist a function that does the same job as ParseFieldTrial, but returns a result instead of taking an output argument.",
      "parentUuid": "8af54b38_b46a0318",
      "revId": "5b98354434d26da2ec58cc9b185ff22c039a6e8c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a3f2b708_4c06d493",
        "filename": "rtc_base/experiments/audio_allocation_settings.h",
        "patchSetId": 5
      },
      "lineNbr": 49,
      "author": {
        "id": 5531
      },
      "writtenOn": "2019-01-23T10:51:29Z",
      "side": 1,
      "message": "I agree on the general principle. Maybe we can figure something out and land a fix in a future CL.",
      "parentUuid": "3158fe76_ddef5360",
      "revId": "5b98354434d26da2ec58cc9b185ff22c039a6e8c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    }
  ]
}