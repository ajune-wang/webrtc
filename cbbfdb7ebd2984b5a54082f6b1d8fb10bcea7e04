{
  "comments": [
    {
      "key": {
        "uuid": "a67a1772_51942ec5",
        "filename": "logging/rtc_event_log/encoder/rtc_event_log_encoder_unittest.cc",
        "patchSetId": 7
      },
      "lineNbr": 502,
      "author": {
        "id": 5147
      },
      "writtenOn": "2018-11-29T09:25:56Z",
      "side": 1,
      "message": "nit: const",
      "range": {
        "startLine": 502,
        "startChar": 2,
        "endLine": 502,
        "endChar": 21
      },
      "revId": "cbbfdb7ebd2984b5a54082f6b1d8fb10bcea7e04",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5b41ee37_a2dd3330",
        "filename": "logging/rtc_event_log/encoder/rtc_event_log_encoder_unittest.cc",
        "patchSetId": 7
      },
      "lineNbr": 502,
      "author": {
        "id": 5281
      },
      "writtenOn": "2018-11-29T22:15:05Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a67a1772_51942ec5",
      "range": {
        "startLine": 502,
        "startChar": 2,
        "endLine": 502,
        "endChar": 21
      },
      "revId": "cbbfdb7ebd2984b5a54082f6b1d8fb10bcea7e04",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8643901c_446b1dad",
        "filename": "logging/rtc_event_log/rtc_event_log_unittest.cc",
        "patchSetId": 7
      },
      "lineNbr": 667,
      "author": {
        "id": 5147
      },
      "writtenOn": "2018-11-29T09:25:56Z",
      "side": 1,
      "message": "Perhaps Björn could suggest a comment here that would explain the nature of the seemingly arbitrary values assigned by this test, so that future developers could follow the same rationale in picking new values? If so, then for the other test(s?), too.",
      "revId": "cbbfdb7ebd2984b5a54082f6b1d8fb10bcea7e04",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1d8d4914_8537838a",
        "filename": "logging/rtc_event_log/rtc_event_log_unittest.cc",
        "patchSetId": 7
      },
      "lineNbr": 667,
      "author": {
        "id": 5150
      },
      "writtenOn": "2018-11-29T12:34:13Z",
      "side": 1,
      "message": "It is somewhat arbitrary. As a basis, I used the expected number of events per second, but rare events needs to be given extra weight (since they would otherwise not be tested at all). Similarly complex events are given some extra weight sinse there is more to test. But I think this is mostly up to the programmer.",
      "parentUuid": "8643901c_446b1dad",
      "revId": "cbbfdb7ebd2984b5a54082f6b1d8fb10bcea7e04",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f9a670b1_559ff191",
        "filename": "logging/rtc_event_log/rtc_event_log_unittest.cc",
        "patchSetId": 7
      },
      "lineNbr": 667,
      "author": {
        "id": 5281
      },
      "writtenOn": "2018-11-29T22:15:05Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "1d8d4914_8537838a",
      "revId": "cbbfdb7ebd2984b5a54082f6b1d8fb10bcea7e04",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f5649485_b9f377de",
        "filename": "logging/rtc_event_log/rtc_event_log_unittest_helper.cc",
        "patchSetId": 7
      },
      "lineNbr": 620,
      "author": {
        "id": 5147
      },
      "writtenOn": "2018-11-29T09:25:56Z",
      "side": 1,
      "message": "Björn, in a separate discussion we\u0027d recently had, I suggested, for other reasons, to introduce a templatized Verify\u003c\u003e(). If so, that function could first check timestamp_ms(), then call a private VerifyInternal\u003c\u003e() that would check the state specific to the two types (using the code we already have in this file). This, I think, would have the nice side-effect that it would become much harder to forget to check timestamp_ms(), as well as any other common state, should such common state ever be added.",
      "revId": "cbbfdb7ebd2984b5a54082f6b1d8fb10bcea7e04",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a7da1076_a1577c0c",
        "filename": "logging/rtc_event_log/rtc_event_log_unittest_helper.cc",
        "patchSetId": 7
      },
      "lineNbr": 620,
      "author": {
        "id": 5150
      },
      "writtenOn": "2018-11-29T12:34:13Z",
      "side": 1,
      "message": "I don\u0027t think people are more likely to forget the timestamp than they are to forget any other field.",
      "parentUuid": "f5649485_b9f377de",
      "revId": "cbbfdb7ebd2984b5a54082f6b1d8fb10bcea7e04",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "350157fb_31a9716c",
        "filename": "logging/rtc_event_log/rtc_event_log_unittest_helper.cc",
        "patchSetId": 7
      },
      "lineNbr": 620,
      "author": {
        "id": 5281
      },
      "writtenOn": "2018-11-29T22:15:05Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "a7da1076_a1577c0c",
      "revId": "cbbfdb7ebd2984b5a54082f6b1d8fb10bcea7e04",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    }
  ]
}