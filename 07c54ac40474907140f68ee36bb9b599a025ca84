{
  "comments": [
    {
      "key": {
        "uuid": "297a9bbb_fda78b0f",
        "filename": "video/video_send_stream_impl.cc",
        "patchSetId": 3
      },
      "lineNbr": 96,
      "author": {
        "id": 5234
      },
      "writtenOn": "2018-09-12T06:43:52Z",
      "side": 1,
      "message": "General question: Is the order of the streams documented somewhere? And are they ordered by min_bitrate, target_bitrate, pixels / second, or some more fluffy notion of high/low?",
      "range": {
        "startLine": 95,
        "startChar": 0,
        "endLine": 96,
        "endChar": 52
      },
      "revId": "07c54ac40474907140f68ee36bb9b599a025ca84",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8ddfcfbc_e54c1d67",
        "filename": "video/video_send_stream_impl.cc",
        "patchSetId": 3
      },
      "lineNbr": 96,
      "author": {
        "id": 5524
      },
      "writtenOn": "2018-09-12T16:07:37Z",
      "side": 1,
      "message": "They are ordered from \"low\" to \"high\" according to how the particular instance of VideoStreamFactoryInterface used sees them. I don\u0027t think it\u0027s well documented beyond that.",
      "parentUuid": "297a9bbb_fda78b0f",
      "range": {
        "startLine": 95,
        "startChar": 0,
        "endLine": 96,
        "endChar": 52
      },
      "revId": "07c54ac40474907140f68ee36bb9b599a025ca84",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c4890ee2_e418a7a0",
        "filename": "video/video_send_stream_impl.cc",
        "patchSetId": 3
      },
      "lineNbr": 106,
      "author": {
        "id": 5531
      },
      "writtenOn": "2018-09-11T16:39:56Z",
      "side": 1,
      "message": "How come this is only checked in the one active stream case?",
      "range": {
        "startLine": 106,
        "startChar": 40,
        "endLine": 106,
        "endChar": 58
      },
      "revId": "07c54ac40474907140f68ee36bb9b599a025ca84",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "635b3eaa_deaf1d50",
        "filename": "video/video_send_stream_impl.cc",
        "patchSetId": 3
      },
      "lineNbr": 106,
      "author": {
        "id": 5531
      },
      "writtenOn": "2018-09-11T16:39:56Z",
      "side": 1,
      "message": "This changes the behaviour compared to before in the case when we have one stream that is not currently active. Is this intended?",
      "range": {
        "startLine": 106,
        "startChar": 13,
        "endLine": 106,
        "endChar": 36
      },
      "revId": "07c54ac40474907140f68ee36bb9b599a025ca84",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f0a78214_41e6bc24",
        "filename": "video/video_send_stream_impl.cc",
        "patchSetId": 3
      },
      "lineNbr": 106,
      "author": {
        "id": 5234
      },
      "writtenOn": "2018-09-12T06:43:52Z",
      "side": 1,
      "message": "If it should be applied in all cases, code would be clearer with an outer\n\nif (pad_to_min_bitrate) { ... }\n\nor an early\n\nif (!pad_to_min_bitrate) return 0;\n\nAnd if the latter is the intended behavior, it might be even clearer to move that check to the caller and delete the |pad_to_min_bitrate| argument, like\n\n  if (codec_type \u003d\u003d kVideoCodecVP9) {\n    max_padding_bitrate_ \u003d streams[0].target_bitrate_bps;\n  } else if (config_-\u003esuspend_below_min_bitrate) {\n    max_padding_bitrate_ \u003d CalculateMaxPadBitrateBps(\n        streams, min_transmit_bitrate_bps, ... new alr flag...);\n  } else {\n    max_padding_bitrate \u003d 0;\n  }\n\n(and then the connection between suspend_below_min_bitrate and padding isn\u0027t obvious to me; might deserve a comment).",
      "parentUuid": "c4890ee2_e418a7a0",
      "range": {
        "startLine": 106,
        "startChar": 40,
        "endLine": 106,
        "endChar": 58
      },
      "revId": "07c54ac40474907140f68ee36bb9b599a025ca84",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bb79c1fe_d612ff65",
        "filename": "video/video_send_stream_impl.cc",
        "patchSetId": 3
      },
      "lineNbr": 106,
      "author": {
        "id": 5524
      },
      "writtenOn": "2018-09-12T16:07:37Z",
      "side": 1,
      "message": "Yes. If the application has explicitly disabled that one stream, I don\u0027t see why we would want to pad up to it. Ability to disable a stream is a much more recent addition than pad_to_min_bitrate, I think it was just missed.\nI can remove this if you wish.",
      "parentUuid": "635b3eaa_deaf1d50",
      "range": {
        "startLine": 106,
        "startChar": 13,
        "endLine": 106,
        "endChar": 36
      },
      "revId": "07c54ac40474907140f68ee36bb9b599a025ca84",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "917cb215_e90a636e",
        "filename": "video/video_send_stream_impl.cc",
        "patchSetId": 3
      },
      "lineNbr": 106,
      "author": {
        "id": 5524
      },
      "writtenOn": "2018-09-12T16:07:37Z",
      "side": 1,
      "message": "It seems that pad_to_min_bitrate is directly tied to suspend_below_min_bitrate. That is, with the flag true the encoder will stop if the available bandwidth falls below the min_bitrate. In that case we need to make sure we send padding so that the bwe can ramp up again.\n\nWe probably don\u0027t want to force-enable that behavior for simulcast users.\nThe naming and api here could do with a bit of love. But no love in this cl please!",
      "parentUuid": "f0a78214_41e6bc24",
      "range": {
        "startLine": 106,
        "startChar": 40,
        "endLine": 106,
        "endChar": 58
      },
      "revId": "07c54ac40474907140f68ee36bb9b599a025ca84",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9a1289bb_e1ef3b36",
        "filename": "video/video_send_stream_impl.cc",
        "patchSetId": 3
      },
      "lineNbr": 233,
      "author": {
        "id": 5531
      },
      "writtenOn": "2018-09-11T16:39:56Z",
      "side": 1,
      "message": "what if this is set on another stream?",
      "range": {
        "startLine": 233,
        "startChar": 31,
        "endLine": 233,
        "endChar": 61
      },
      "revId": "07c54ac40474907140f68ee36bb9b599a025ca84",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "99335c79_6e451732",
        "filename": "video/video_send_stream_impl.cc",
        "patchSetId": 3
      },
      "lineNbr": 233,
      "author": {
        "id": 5524
      },
      "writtenOn": "2018-09-12T16:07:37Z",
      "side": 1,
      "message": "If we have two VideoSendStreams of which only one uses alr? I guess the one without will request the padding it wants and gets probing as a bonus, and the one alr gets some unexpected padding in addition to the probing. Sounds like that\u0027s a reasonable thing to do?",
      "parentUuid": "9a1289bb_e1ef3b36",
      "range": {
        "startLine": 233,
        "startChar": 31,
        "endLine": 233,
        "endChar": 61
      },
      "revId": "07c54ac40474907140f68ee36bb9b599a025ca84",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d3c089d5_84158b47",
        "filename": "video/video_send_stream_impl.h",
        "patchSetId": 3
      },
      "lineNbr": 143,
      "author": {
        "id": 5234
      },
      "writtenOn": "2018-09-12T06:43:52Z",
      "side": 1,
      "message": "Minor nit: Move next to |const bool send_side_bwe_with_overhead_;| above, to group config flags together.",
      "range": {
        "startLine": 142,
        "startChar": 0,
        "endLine": 143,
        "endChar": 0
      },
      "revId": "07c54ac40474907140f68ee36bb9b599a025ca84",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "750436e7_f16d92df",
        "filename": "video/video_send_stream_impl.h",
        "patchSetId": 3
      },
      "lineNbr": 143,
      "author": {
        "id": 5524
      },
      "writtenOn": "2018-09-12T16:07:37Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d3c089d5_84158b47",
      "range": {
        "startLine": 142,
        "startChar": 0,
        "endLine": 143,
        "endChar": 0
      },
      "revId": "07c54ac40474907140f68ee36bb9b599a025ca84",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    }
  ]
}