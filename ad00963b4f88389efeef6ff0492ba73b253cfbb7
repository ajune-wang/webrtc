{
  "comments": [
    {
      "key": {
        "uuid": "da85fe42_ea032419",
        "filename": "api/rtp_parameters.cc",
        "patchSetId": 3
      },
      "lineNbr": 112,
      "author": {
        "id": 5525
      },
      "writtenOn": "2019-02-05T09:46:40Z",
      "side": 1,
      "message": "A bit unclear if it\u0027s necessary to increment the version number or not without having the changes to the format in the same CL, but I assume you have concluded that this is needed.",
      "range": {
        "startLine": 112,
        "startChar": 0,
        "endLine": 112,
        "endChar": 80
      },
      "revId": "ad00963b4f88389efeef6ff0492ba73b253cfbb7",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "557a610c_727bad12",
        "filename": "api/rtp_parameters.cc",
        "patchSetId": 3
      },
      "lineNbr": 112,
      "author": {
        "id": 7641
      },
      "writtenOn": "2019-02-05T10:06:52Z",
      "side": 1,
      "message": "We need someway of telling if the feedback should be periodic or on request.\n\nPerhaps, it would be enough to add support for RTP header extension attributes,\n\na\u003dextmap:5 http://www.ietf.org/id/draft-holmer-rmcat-transport-wide-cc-extensions-01 on-request\n\nThis seems to be allowed in the standard:\nhttps://tools.ietf.org/html/rfc8285#section-5",
      "parentUuid": "da85fe42_ea032419",
      "range": {
        "startLine": 112,
        "startChar": 0,
        "endLine": 112,
        "endChar": 80
      },
      "revId": "ad00963b4f88389efeef6ff0492ba73b253cfbb7",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "10eefad3_7c1fbff6",
        "filename": "api/rtp_parameters.cc",
        "patchSetId": 3
      },
      "lineNbr": 112,
      "author": {
        "id": 5525
      },
      "writtenOn": "2019-02-05T10:38:39Z",
      "side": 1,
      "message": "Ok, I\u0027m not sure what\u0027s best, but referring to -02 seems OK.",
      "parentUuid": "557a610c_727bad12",
      "range": {
        "startLine": 112,
        "startChar": 0,
        "endLine": 112,
        "endChar": 80
      },
      "revId": "ad00963b4f88389efeef6ff0492ba73b253cfbb7",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1caf44cd_b0be37af",
        "filename": "modules/remote_bitrate_estimator/remote_estimator_proxy.h",
        "patchSetId": 3
      },
      "lineNbr": 77,
      "author": {
        "id": 5126
      },
      "writtenOn": "2019-02-05T10:32:45Z",
      "side": 1,
      "message": "Why isn\u0027t this guarded by `lock_` like every other member variable?",
      "revId": "ad00963b4f88389efeef6ff0492ba73b253cfbb7",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2661831f_c18a247d",
        "filename": "modules/remote_bitrate_estimator/remote_estimator_proxy.h",
        "patchSetId": 3
      },
      "lineNbr": 77,
      "author": {
        "id": 7641
      },
      "writtenOn": "2019-02-05T14:11:13Z",
      "side": 1,
      "message": "This should be set once before this module starts to get calls.\nDo you think that I should still guard with a lock to protect against unintended use cases?",
      "parentUuid": "1caf44cd_b0be37af",
      "revId": "ad00963b4f88389efeef6ff0492ba73b253cfbb7",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4d715b12_5868a1ca",
        "filename": "modules/remote_bitrate_estimator/remote_estimator_proxy.h",
        "patchSetId": 3
      },
      "lineNbr": 77,
      "author": {
        "id": 5525
      },
      "writtenOn": "2019-02-05T14:31:22Z",
      "side": 1,
      "message": "Can we pass it in the constructor instead so it can be made const?",
      "parentUuid": "2661831f_c18a247d",
      "revId": "ad00963b4f88389efeef6ff0492ba73b253cfbb7",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    }
  ]
}