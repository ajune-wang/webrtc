{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "35ef141a_ae36ac92",
        "filename": "modules/rtp_rtcp/source/rtp_sender_unittest.cc",
        "patchSetId": 1
      },
      "lineNbr": 174,
      "author": {
        "id": 5524
      },
      "writtenOn": "2022-07-07T10:24:50Z",
      "side": 1,
      "message": "Just a drive-by style fix.",
      "range": {
        "startLine": 174,
        "startChar": 13,
        "endLine": 174,
        "endChar": 24
      },
      "revId": "667a8f469e675732e3c40138ef25c50e0b1e507f",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7eb83133_13a9fc15",
        "filename": "modules/rtp_rtcp/source/rtp_sender_unittest.cc",
        "patchSetId": 1
      },
      "lineNbr": 174,
      "author": {
        "id": 5019
      },
      "writtenOn": "2022-07-07T11:09:53Z",
      "side": 1,
      "message": "alternative way to fix it is \n`static constexpr bool kMarkerBit \u003d true;`\n\nbut your way is still an improvment.",
      "parentUuid": "35ef141a_ae36ac92",
      "range": {
        "startLine": 174,
        "startChar": 13,
        "endLine": 174,
        "endChar": 24
      },
      "revId": "667a8f469e675732e3c40138ef25c50e0b1e507f",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b65e728f_794ae222",
        "filename": "modules/rtp_rtcp/source/rtp_sender_unittest.cc",
        "patchSetId": 1
      },
      "lineNbr": 174,
      "author": {
        "id": 5524
      },
      "writtenOn": "2022-07-07T12:29:43Z",
      "side": 1,
      "message": "Ah, indeed. I read the code too hastily and though some place provided it as an argument, but that was a different method. Fixed.",
      "parentUuid": "7eb83133_13a9fc15",
      "range": {
        "startLine": 174,
        "startChar": 13,
        "endLine": 174,
        "endChar": 24
      },
      "revId": "667a8f469e675732e3c40138ef25c50e0b1e507f",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "610f46f9_4025e0b0",
        "filename": "modules/rtp_rtcp/source/rtp_sender_unittest.cc",
        "patchSetId": 1
      },
      "lineNbr": 175,
      "author": {
        "id": 5019
      },
      "writtenOn": "2022-07-07T11:09:53Z",
      "side": 1,
      "message": "ScopedKeyValueConfig suppose to override certain field, but this test doesn\u0027t, it just need an empty field trials.\nDo we have some simple NoFieldTrials class?\nMay be update existent class that you\u0027ve deleted:\n\n```\nclass FieldTrialConfig : public FieldTrialsView {\n public:\n  std::string Lookup(absl::string_view key) const override {\n    return \"\";\n  }\n};\n```\n(There might be need to add a new field tiral, it would be simpler to add it to existent local class)\n\n\nOr use class from `api/field_trials.h`:\nconst FieldTrials field_trials_{\"\"}",
      "range": {
        "startLine": 175,
        "startChar": 14,
        "endLine": 175,
        "endChar": 34
      },
      "revId": "667a8f469e675732e3c40138ef25c50e0b1e507f",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4f6c72a9_4c89567a",
        "filename": "modules/rtp_rtcp/source/rtp_sender_unittest.cc",
        "patchSetId": 1
      },
      "lineNbr": 175,
      "author": {
        "id": 5524
      },
      "writtenOn": "2022-07-07T12:29:43Z",
      "side": 1,
      "message": "I don\u0027t think we have a NullFieldTrials class, no. Might be a good idea, as it\u0027s something I seed the need for with some frequency.\n\nAn alternative would be the ExplicitKeyValueConfig with en empty string argument.\n\nIt feels a bit weird to keep a field trial utility internal to RtpSenderUnitTest that does nothing at the moment, just in case we need to extend it in the future. If we need to test with trial in the future imo we should use one of the classes mentioned above instead.",
      "parentUuid": "610f46f9_4025e0b0",
      "range": {
        "startLine": 175,
        "startChar": 14,
        "endLine": 175,
        "endChar": 34
      },
      "revId": "667a8f469e675732e3c40138ef25c50e0b1e507f",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fb2c9965_cec0b91f",
        "filename": "modules/rtp_rtcp/source/rtp_sender_unittest.cc",
        "patchSetId": 1
      },
      "lineNbr": 545,
      "author": {
        "id": 5019
      },
      "writtenOn": "2022-07-07T11:09:53Z",
      "side": 1,
      "message": "why this change?",
      "range": {
        "startLine": 545,
        "startChar": 30,
        "endLine": 545,
        "endChar": 33
      },
      "revId": "667a8f469e675732e3c40138ef25c50e0b1e507f",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "65a6a2f0_24d194bf",
        "filename": "modules/rtp_rtcp/source/rtp_sender_unittest.cc",
        "patchSetId": 1
      },
      "lineNbr": 545,
      "author": {
        "id": 5524
      },
      "writtenOn": "2022-07-07T12:29:43Z",
      "side": 1,
      "message": "The tests here seem to have been running with a very unrealistic max padding size factor default, see deleted code above: `max_padding_factor_(1200)`\n\nPresumably that was intended as an absolute size, not a factor.\n\nThis change was made to get the padding / packet size ratio below 3.",
      "parentUuid": "fb2c9965_cec0b91f",
      "range": {
        "startLine": 545,
        "startChar": 30,
        "endLine": 545,
        "endChar": 33
      },
      "revId": "667a8f469e675732e3c40138ef25c50e0b1e507f",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    }
  ]
}