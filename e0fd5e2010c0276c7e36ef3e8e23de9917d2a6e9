{
  "comments": [
    {
      "key": {
        "uuid": "b545028e_2a74e2ee",
        "filename": "pc/peer_connection.cc",
        "patchSetId": 2
      },
      "lineNbr": 3247,
      "author": {
        "id": 5142
      },
      "writtenOn": "2019-11-19T15:41:44Z",
      "side": 1,
      "message": "Idea for a test (which I believe this will pass considering not inserting if we already have a value): multiple remote offers in a row without an answer in-between should still revert to the stable stream set.\n\nE.g.\nInitially stream A\nRemote offer for stream B -\u003e have-remote-offer (but don\u0027t answer)\nRemote offer for stream C -\u003e have-remote-offer (but don\u0027t answer)\nRollback\nEXPECT stream A",
      "revId": "e0fd5e2010c0276c7e36ef3e8e23de9917d2a6e9",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "13c4c015_d5623c88",
        "filename": "pc/peer_connection.cc",
        "patchSetId": 2
      },
      "lineNbr": 3247,
      "author": {
        "id": 9279
      },
      "writtenOn": "2019-11-21T12:13:32Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b545028e_2a74e2ee",
      "revId": "e0fd5e2010c0276c7e36ef3e8e23de9917d2a6e9",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "03bb0d64_dc513181",
        "filename": "pc/peer_connection.cc",
        "patchSetId": 2
      },
      "lineNbr": 3254,
      "author": {
        "id": 5142
      },
      "writtenOn": "2019-11-19T15:41:44Z",
      "side": 1,
      "message": "Shouldn\u0027t this be \"transceiver_stream_ids_by_transceivers_[transceiver] \u003d transceiver-\u003ereceiver()-\u003estream_ids()\"? remote_streams_ is a collection of all remote streams, not just the remote streams associated with this receiver.\n\nE.g.\nIf I have trackA: [streamA] and trackB: [streamB] then rollback should not cause trackA: [streamA, streamB]",
      "revId": "e0fd5e2010c0276c7e36ef3e8e23de9917d2a6e9",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "398ec658_61581568",
        "filename": "pc/peer_connection.cc",
        "patchSetId": 2
      },
      "lineNbr": 3254,
      "author": {
        "id": 9279
      },
      "writtenOn": "2019-11-20T09:21:34Z",
      "side": 1,
      "message": "Yes, that was a bug.",
      "parentUuid": "03bb0d64_dc513181",
      "revId": "e0fd5e2010c0276c7e36ef3e8e23de9917d2a6e9",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f6e5d6f7_02250483",
        "filename": "pc/peer_connection.cc",
        "patchSetId": 2
      },
      "lineNbr": 3254,
      "author": {
        "id": 9279
      },
      "writtenOn": "2019-11-20T22:44:37Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "398ec658_61581568",
      "revId": "e0fd5e2010c0276c7e36ef3e8e23de9917d2a6e9",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "07777ab0_b15e013f",
        "filename": "pc/peer_connection.h",
        "patchSetId": 2
      },
      "lineNbr": 1371,
      "author": {
        "id": 5142
      },
      "writtenOn": "2019-11-19T15:41:44Z",
      "side": 1,
      "message": "Can we move the stream ID list to TransceiverStableState?\nAlso these are remote streams, i.e. associated streams of the transceiver.receiver. Should we rename it receiver_stream_ids or remote_stream_ids?",
      "revId": "e0fd5e2010c0276c7e36ef3e8e23de9917d2a6e9",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f19c97f9_9e9b9035",
        "filename": "pc/peer_connection.h",
        "patchSetId": 2
      },
      "lineNbr": 1371,
      "author": {
        "id": 9279
      },
      "writtenOn": "2019-11-20T09:21:34Z",
      "side": 1,
      "message": "\u003eTransceiverStableState?\n\nIt is possible. But doesn\u0027t come for free. Testing gets more complicated because of the coupling. Probably need to add tests in combined scenarios rather than testing both things separately.",
      "parentUuid": "07777ab0_b15e013f",
      "revId": "e0fd5e2010c0276c7e36ef3e8e23de9917d2a6e9",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "43d7f022_6b170047",
        "filename": "pc/peer_connection.h",
        "patchSetId": 2
      },
      "lineNbr": 1371,
      "author": {
        "id": 5142
      },
      "writtenOn": "2019-11-20T09:54:05Z",
      "side": 1,
      "message": "Can you elaborate? I view this as a snapshot to go back to, so it would make sense that when we take the snapshot we store all relevant pieces of information rather than maintaining multiple independent snapshots that stitched together make up the one we really care about.\n\nIs the lifetime of the receiver\u0027s associated streams somehow different from the other part of the snapshot?",
      "parentUuid": "f19c97f9_9e9b9035",
      "revId": "e0fd5e2010c0276c7e36ef3e8e23de9917d2a6e9",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "85cd48cb_da556e58",
        "filename": "pc/peer_connection.h",
        "patchSetId": 2
      },
      "lineNbr": 1371,
      "author": {
        "id": 9279
      },
      "writtenOn": "2019-11-20T10:42:07Z",
      "side": 1,
      "message": "I made the actual change to try it out. Code looks nicer in some places but overall it might be harder to understand how it works. Testing I already mentioned. I think quite some lines of test code needs to be added. Can be matter of taste of course. Problem is that these snapshots are taken in different places and on different conditions when something is about to change in the state. At the same time the presence of snapshot indicates need for a rollback. The merged snapshot opens possibility that something gets overwritten/discarded by accident. Created new patch with the change.",
      "parentUuid": "43d7f022_6b170047",
      "revId": "e0fd5e2010c0276c7e36ef3e8e23de9917d2a6e9",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d1f32264_29d559ac",
        "filename": "pc/peer_connection.h",
        "patchSetId": 2
      },
      "lineNbr": 1371,
      "author": {
        "id": 5142
      },
      "writtenOn": "2019-11-20T14:08:25Z",
      "side": 1,
      "message": "I reviewed the latest patch and the implicit creation of transceiver states worries me. Like you say it opens up the risk that something gets overwritten or discarded by accident.\n\n\u003e Problem is that these snapshots are taken in different places and on different conditions\n\nHmm. The conditions I see are:\n\nWhen we associate a transceiver, i.e. SLD or SRD offer when...\n1. a transceiver is created as a result of an m\u003d section on remote SDP, which I think only applies to remote offer.\n2. a transceiver that already exist and doesn\u0027t have a state stored yet changes direction or mid. This could be a local offer assigning a mid or this could be a remote offer changing the direction.\n\nAnd then new in this CL is:\n3. Remote SDP has a receiving m\u003d section and we\u0027re examining the new stream IDs.\n\nSo we have 3 different conditions. But I suspect they\u0027re all the same problem:\n\"Store a snapshot of the transceiver on offer as it was in the stable state\"\n\nSo are 1-3 really different things, or are they just 3 different points in the code base where we happen to stumble upon m\u003d sections and transceivers and decide to store a snapshot?\n\nWould there be any harm in storing receiver remote streams at 2)? Would there be any harm in storing transceiver mid at 3)? Well, maybe it would, but only because at 3) we\u0027ve already modified the mid so we would be snapshotting the wrong value. My point is, if snapshots were taken early, it probably wouldn\u0027t hurt to snapshot everything.\n\nAnyway, I don\u0027t want to restructure everyhing, and accidentally reverting some piece of state that we didn\u0027t mean to is something I want to avoid. So I suggest for now we go with your previous approach. The more I think about it, using more of TransceiverStableState worries me, especially its direction (see other comment).",
      "parentUuid": "85cd48cb_da556e58",
      "revId": "e0fd5e2010c0276c7e36ef3e8e23de9917d2a6e9",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c3cbb4ed_e9bb51ae",
        "filename": "pc/peer_connection.h",
        "patchSetId": 2
      },
      "lineNbr": 1371,
      "author": {
        "id": 9279
      },
      "writtenOn": "2019-11-21T12:13:32Z",
      "side": 1,
      "message": "\u003eit probably wouldn\u0027t hurt to snapshot everything\n\nI would leave it as it is for now. Let see maybe more problems will surface and then can reconsider the snapshot logic.",
      "parentUuid": "d1f32264_29d559ac",
      "revId": "e0fd5e2010c0276c7e36ef3e8e23de9917d2a6e9",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7aacd94b_0c442d8e",
        "filename": "pc/peer_connection.h",
        "patchSetId": 2
      },
      "lineNbr": 1375,
      "author": {
        "id": 5142
      },
      "writtenOn": "2019-11-20T14:08:25Z",
      "side": 1,
      "message": "Looking here..\nhttps://cs.chromium.org/chromium/src/third_party/webrtc/pc/peer_connection.cc?type\u003dcs\u0026sq\u003dpackage:chromium\u0026g\u003d0\u0026l\u003d3825\n\nI think we store the direction from stable state when associating a transceiver, and that\u0027s what we revert back to. What happens if we modify the direction while has-remote-offer? Would direction changes caused by the application be reverted?\n\nWe did conclude that rolling back a transceiver that was created by SDP should be destroyed even if you touched it. And that\u0027s fine. But what about rolling back direction changes on a transceiver that we created earlier, that SDP only happened to have associated?\n\nconst pc \u003d new RTCPeerConnection();\npc.addTrack(track);\n// The addTrack-transceiver:\nconst transceiver \u003d pc.getTranscievers()[0];\n// transceiver.direction \u003d\u003d \u0027sendrecv\u0027;\npc.ontrack \u003d e \u003d\u003e {\n  // Due to FindAvailableTransceiverToReceive, e.transceiver \u003d\u003d transceiver.\n  transciever.direction \u003d \u0027sendonly\u0027;\n}\nawait pc.setRemoteDescription(offer);\n// Now transceiver.direction \u003d\u003d \u0027sendonly\u0027\nawait pc.setRemoteDescription(rollback);\n// And now transceiver.direction is reverted back to \u0027sendrecv\u0027 even though the application\n// explicitly set the the attribute to \u0027sendonly\u0027 while has-remote-offer.\n\nNot sure what the spec intends should happen here: Rollback to only unassign the mid or if rollback should also revert direction changes. If this is a bug it might be solvable by making TransceiverStableState::direction_ optional and not rolling back direction if it doesn\u0027t have a value, but let\u0027s not do that in this CL.\n\nIn any case, this highlights that creating more TransceiverStableState objects than necessary may be risky.",
      "revId": "e0fd5e2010c0276c7e36ef3e8e23de9917d2a6e9",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "92e9861a_7c5479fa",
        "filename": "pc/peer_connection.h",
        "patchSetId": 2
      },
      "lineNbr": 1375,
      "author": {
        "id": 5142
      },
      "writtenOn": "2019-11-20T14:18:13Z",
      "side": 1,
      "message": "Side-track: Why are we storing \"direction\" anyway?\n\nWhen you complete an O/A exchange the direction in the SDP modifies the currentDirection to match it. But it doesn\u0027t modify the direction attribute of your transceivers. Except if the SDP caused a transciever to be created, then the direction in the SDP would be the initial value of that attribute I suppose.\n\nI feel like if we could get rid of this line then TranscieverStableState would be less scary:\ntransceiver-\u003einternal()-\u003eset_direction(state.direction());\nhttps://cs.chromium.org/chromium/src/third_party/webrtc/pc/peer_connection.cc?type\u003dcs\u0026sq\u003dpackage:chromium\u0026g\u003d0\u0026l\u003d8050\n\nBut maybe I\u0027m forgetting something.",
      "parentUuid": "7aacd94b_0c442d8e",
      "revId": "e0fd5e2010c0276c7e36ef3e8e23de9917d2a6e9",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8b516230_df0e1534",
        "filename": "pc/peer_connection.h",
        "patchSetId": 2
      },
      "lineNbr": 1375,
      "author": {
        "id": 9279
      },
      "writtenOn": "2019-11-20T22:44:37Z",
      "side": 1,
      "message": "It was puzzling me too if restoring direction was even needed as all the current tests would pass without it and I didn\u0027t manage to construct a test for it either. At the same time I was hesitant to remove it since there was \"For the RTCRtpTransceivers remaining on connection, revert any changes to the [[CurrentDirection]] and [[Receptive]] internal slots made by the application of the RTCSessionDescription that is being rolled back.\" in the spec. But in the latest draft I don\u0027t see that restoring direction is mentioned anywhere and I am fine with removing it from the code too.",
      "parentUuid": "92e9861a_7c5479fa",
      "revId": "e0fd5e2010c0276c7e36ef3e8e23de9917d2a6e9",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c0727ab5_4bfd3855",
        "filename": "pc/peer_connection.h",
        "patchSetId": 2
      },
      "lineNbr": 1375,
      "author": {
        "id": 5142
      },
      "writtenOn": "2019-11-22T13:09:17Z",
      "side": 1,
      "message": "OK in that case I think we should remove it. I suspect reverting the direction is a bug, since it doesn\u0027t revert something negotiated rather it reverts the state of an application control-knob.",
      "parentUuid": "8b516230_df0e1534",
      "revId": "e0fd5e2010c0276c7e36ef3e8e23de9917d2a6e9",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "973bb39a_77730c00",
        "filename": "pc/rtp_transceiver.h",
        "patchSetId": 2
      },
      "lineNbr": 212,
      "author": {
        "id": 5142
      },
      "writtenOn": "2019-11-19T15:50:32Z",
      "side": 1,
      "message": "Don\u0027t we want a single bool for \"has been used by addTrack\"?\nIf I understand the spec correctly, the point is that if addTrack() was called then the user of the API expects the returned sender object to be reliable. So if the transceiver.sender was ever used then that transceiver is permanently blessed. Is any other code path needed? Why differentiate between \"created_by\" and \"reused\"?",
      "revId": "e0fd5e2010c0276c7e36ef3e8e23de9917d2a6e9",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f9d24c9b_3fdfd746",
        "filename": "pc/rtp_transceiver.h",
        "patchSetId": 2
      },
      "lineNbr": 212,
      "author": {
        "id": 9279
      },
      "writtenOn": "2019-11-20T09:21:34Z",
      "side": 1,
      "message": "I don\u0027t quite understand how single bool can do. Otherwise I could have just use the created_by_addtrack in the first place. Or what you are suspecting is that maybe existing behavior of https://cs.chromium.org/search/?q\u003dcreated_by_addtrack\u0026type\u003dcs is not exactly spec compliant and the flag could be set always in PeerConnection::AddTrackUnifiedPlan even when new transceiver was not created?",
      "parentUuid": "973bb39a_77730c00",
      "revId": "e0fd5e2010c0276c7e36ef3e8e23de9917d2a6e9",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "66be3d12_03322e10",
        "filename": "pc/rtp_transceiver.h",
        "patchSetId": 2
      },
      "lineNbr": 212,
      "author": {
        "id": 5142
      },
      "writtenOn": "2019-11-20T09:54:05Z",
      "side": 1,
      "message": "I imagine you can always set the one and only flag in AddTrackUnifiedPlan(). If AddTrack() has \"blessed\" the transceiver, it must not be removed. This is what we care about, not how the transceiver was created per-se, only if addTrack() was involved - before or after its creation.\n\nIt might create a transceiver or it might reuse one that is currently on offer, but if I as an API user invoke addTrack() I know that the returned sender is mine to keep.\n\nAt least that is my understanding, I might be missing something.",
      "parentUuid": "f9d24c9b_3fdfd746",
      "revId": "e0fd5e2010c0276c7e36ef3e8e23de9917d2a6e9",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "acc683cf_e2069e4a",
        "filename": "pc/rtp_transceiver.h",
        "patchSetId": 2
      },
      "lineNbr": 212,
      "author": {
        "id": 9279
      },
      "writtenOn": "2019-11-20T10:42:07Z",
      "side": 1,
      "message": "If to leave the rollback aside for a moment, my concern is that setting the flag always in AddTrackUnifiedPlan() changes also the behavior in FindAvailableTransceiverToReceive().",
      "parentUuid": "66be3d12_03322e10",
      "revId": "e0fd5e2010c0276c7e36ef3e8e23de9917d2a6e9",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "eb22efe7_b8177439",
        "filename": "pc/rtp_transceiver.h",
        "patchSetId": 2
      },
      "lineNbr": 212,
      "author": {
        "id": 5142
      },
      "writtenOn": "2019-11-20T12:16:57Z",
      "side": 1,
      "message": "Oh you\u0027re right, addTrack-created is in that case slightly different. I\u0027m fine with two booleans then!",
      "parentUuid": "acc683cf_e2069e4a",
      "revId": "e0fd5e2010c0276c7e36ef3e8e23de9917d2a6e9",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    }
  ]
}