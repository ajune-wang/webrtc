{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "3b772533_1905e849",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 15
      },
      "lineNbr": 0,
      "author": {
        "id": 5234
      },
      "writtenOn": "2020-10-08T09:50:20Z",
      "side": 1,
      "message": "api/video lgtm, % one nit.",
      "revId": "364aaf6cc91ef6eee4c93004040f6562350c1d31",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3223683c_1b535109",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 15
      },
      "lineNbr": 0,
      "author": {
        "id": 9515
      },
      "writtenOn": "2020-10-08T10:32:44Z",
      "side": 1,
      "message": "lgtm % discussion",
      "revId": "364aaf6cc91ef6eee4c93004040f6562350c1d31",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "654aee51_5a7be227",
        "filename": "api/video/video_frame_buffer.h",
        "patchSetId": 15
      },
      "lineNbr": 102,
      "author": {
        "id": 5234
      },
      "writtenOn": "2020-10-08T09:50:20Z",
      "side": 1,
      "message": "Can this either be VideoFrameBuffer::kNumTypes, with definition next to the VideoFrameBuffer::Type enum, or moved to the .cc file and viewed as a part of the VideoFrameBufferTypeToString implementation?\n\nIs it useful to expose the constant it as part of the webrtc api?",
      "range": {
        "startLine": 102,
        "startChar": 17,
        "endLine": 102,
        "endChar": 42
      },
      "revId": "364aaf6cc91ef6eee4c93004040f6562350c1d31",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e83717a4_0ed6d73e",
        "filename": "api/video/video_frame_buffer.h",
        "patchSetId": 15
      },
      "lineNbr": 102,
      "author": {
        "id": 8683
      },
      "writtenOn": "2020-10-08T09:59:04Z",
      "side": 1,
      "message": "Can also be removed if we replace the InlineVector with an unordered_set. Wdyt?",
      "parentUuid": "654aee51_5a7be227",
      "range": {
        "startLine": 102,
        "startChar": 17,
        "endLine": 102,
        "endChar": 42
      },
      "revId": "364aaf6cc91ef6eee4c93004040f6562350c1d31",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3bc84bd6_81419a4d",
        "filename": "api/video/video_frame_buffer.h",
        "patchSetId": 15
      },
      "lineNbr": 102,
      "author": {
        "id": 5117
      },
      "writtenOn": "2020-10-08T09:59:29Z",
      "side": 1,
      "message": "Maybe it should be moved to api/video_codecs/video_encoder.h as a part of EncoderInfo API.",
      "parentUuid": "654aee51_5a7be227",
      "range": {
        "startLine": 102,
        "startChar": 17,
        "endLine": 102,
        "endChar": 42
      },
      "revId": "364aaf6cc91ef6eee4c93004040f6562350c1d31",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "33da4b7a_39ea0957",
        "filename": "api/video/video_frame_buffer.h",
        "patchSetId": 15
      },
      "lineNbr": 102,
      "author": {
        "id": 9515
      },
      "writtenOn": "2020-10-08T10:31:17Z",
      "side": 1,
      "message": "As we\u0027re accessing preferred_pixel_formats every frame, we need to pass the ref to it in constant time. I may speak against myself but undordered_set is probably way more overhead than just using an array. But this constant is ugly. Since we\u0027re not updating |preferred_pixel_formats| every time, the storage type for it is not that important. Wdyt changing back to std::vector\u003c\u003e?",
      "parentUuid": "3bc84bd6_81419a4d",
      "range": {
        "startLine": 102,
        "startChar": 17,
        "endLine": 102,
        "endChar": 42
      },
      "revId": "364aaf6cc91ef6eee4c93004040f6562350c1d31",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4d0a476e_64f7843e",
        "filename": "api/video/video_frame_buffer.h",
        "patchSetId": 15
      },
      "lineNbr": 102,
      "author": {
        "id": 8683
      },
      "writtenOn": "2020-10-08T11:17:22Z",
      "side": 1,
      "message": "I put this back to vector and removed the constant.",
      "parentUuid": "3bc84bd6_81419a4d",
      "range": {
        "startLine": 102,
        "startChar": 17,
        "endLine": 102,
        "endChar": 42
      },
      "revId": "364aaf6cc91ef6eee4c93004040f6562350c1d31",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8d63e40b_1368b64d",
        "filename": "api/video/video_frame_buffer.h",
        "patchSetId": 15
      },
      "lineNbr": 102,
      "author": {
        "id": 5234
      },
      "writtenOn": "2020-10-08T11:59:19Z",
      "side": 1,
      "message": "As I understand it, the size pass in the InlineVector template isn\u0027t a maximum size, it will just fall back to heap allocation if it is exceeded. So I was thinking that using 2 or 3 would cover the common case and reduce overhead every type the GetEncoderInfo method is called.\n\nAnd note that GetEncoderInfo returns a value rather than a reference, so there will be an extra allocation per call for each member that use heap allocation.",
      "parentUuid": "4d0a476e_64f7843e",
      "range": {
        "startLine": 102,
        "startChar": 17,
        "endLine": 102,
        "endChar": 42
      },
      "revId": "364aaf6cc91ef6eee4c93004040f6562350c1d31",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    }
  ]
}