{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "abdfb5ce_e0252899",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 11
      },
      "lineNbr": 0,
      "author": {
        "id": 8392
      },
      "writtenOn": "2023-10-26T10:15:41Z",
      "side": 1,
      "message": "Thanks for spending all the effort to improve this code!",
      "revId": "f3e150d42b42edba17bbdf382d0efe6a2d85976f",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d870db77_a43464fe",
        "filename": "modules/rtp_rtcp/source/absolute_capture_time_sender.h",
        "patchSetId": 11
      },
      "lineNbr": 102,
      "author": {
        "id": 8392
      },
      "writtenOn": "2023-10-26T10:15:41Z",
      "side": 1,
      "message": "For the sake of consistency, is it possible to change these member variables to use the same `last_sent_extension_` approach as `AbsoluteCaptureTimeInterpolator`?",
      "range": {
        "startLine": 97,
        "startChar": 0,
        "endLine": 102,
        "endChar": 63
      },
      "revId": "f3e150d42b42edba17bbdf382d0efe6a2d85976f",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f2887afa_0c3bc20a",
        "filename": "modules/rtp_rtcp/source/absolute_capture_time_sender.h",
        "patchSetId": 11
      },
      "lineNbr": 102,
      "author": {
        "id": 5019
      },
      "writtenOn": "2023-10-26T10:27:03Z",
      "side": 1,
      "message": "I\u0027m using different view of consistency here:\nFor the sake of consistency these last_ variables match input parameters of the main On(Receive|Send)Packet function.\n\nInterpolator takes AbsoluteCaptureTime as a parameter, thus saves that as AbsoluteCaptureTime\n\nSender takes AbsoluteCaptureTime as two parameters (do you suggest to change signature to take single parameter?), thus saves two member variables.",
      "parentUuid": "d870db77_a43464fe",
      "range": {
        "startLine": 97,
        "startChar": 0,
        "endLine": 102,
        "endChar": 63
      },
      "revId": "f3e150d42b42edba17bbdf382d0efe6a2d85976f",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "842db57e_f63b4fc2",
        "filename": "modules/rtp_rtcp/source/absolute_capture_time_sender.h",
        "patchSetId": 11
      },
      "lineNbr": 102,
      "author": {
        "id": 8392
      },
      "writtenOn": "2023-10-26T12:20:06Z",
      "side": 1,
      "message": "I see your point!\n\nI think for the sender case, we can reason that what we want to store isn\u0027t necessarily the \"caller-provided parameters\" but rather the \"last known extension sent\". You can for example see this by `OnSendPacket()` only updating the variables for the non-`nullopt` case. If it was storing the \"last input parameters\", then it should also have done so for the `nullopt` case.\n\nI can also see that it could be interpreted as \"storing the input parameters used to generate the last extension sent\", so I\u0027m OK either way!",
      "parentUuid": "f2887afa_0c3bc20a",
      "range": {
        "startLine": 97,
        "startChar": 0,
        "endLine": 102,
        "endChar": 63
      },
      "revId": "f3e150d42b42edba17bbdf382d0efe6a2d85976f",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9e94ff4c_0fb06012",
        "filename": "modules/rtp_rtcp/source/absolute_capture_time_sender.h",
        "patchSetId": 11
      },
      "lineNbr": 102,
      "author": {
        "id": 5019
      },
      "writtenOn": "2023-10-26T12:24:36Z",
      "side": 1,
      "message": "I do not think it makes noticeable difference, so keeping it as it is now.\n\nfor now output is always the same as input (or nullopt),\nwhen output and input would be different, then it would be more meaningful to review what do we want to store.",
      "parentUuid": "842db57e_f63b4fc2",
      "range": {
        "startLine": 97,
        "startChar": 0,
        "endLine": 102,
        "endChar": 63
      },
      "revId": "f3e150d42b42edba17bbdf382d0efe6a2d85976f",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "At least one maximum vote for label \u0027Code-Review\u0027 is required"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader AND -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1 AND -label:Code-Review\u003dMIN"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader AND -label:Code-Review=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Code-Review=MAX,user=non_uploader"],"failingAtoms":["label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1 AND -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1","label:Code-Review=MIN"]}
      },
      "patchSetCommitId": "f3e150d42b42edba17bbdf382d0efe6a2d85976f",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["is:review-enforced_gerrit"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforcement-satisfied_gerrit"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforcement-satisfied_gerrit"]}
      },
      "patchSetCommitId": "f3e150d42b42edba17bbdf382d0efe6a2d85976f",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {
        "value": true
      }
    }
  ]
}