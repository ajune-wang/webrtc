{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "2ba95d4f_31d5e6c8",
        "filename": "rtc_base/platform_thread.cc",
        "patchSetId": 13
      },
      "lineNbr": 54,
      "author": {
        "id": 5508
      },
      "writtenOn": "2021-04-10T14:42:12Z",
      "side": 1,
      "message": "I\u0027d prefer to keep this in Stop() for detached threads. I think it makes things a bit more consistent from the pov of PlatformThread.\n\nWhat we could do specifically for detached threads, could be to offer a utility function that spawns a fire-and-forget type thread and hides the Stop() call from the caller.",
      "revId": "97e394c2e62d90263246f4592b117c7a6efd26a3",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7fa1ca95_a80ab3d7",
        "filename": "rtc_base/platform_thread.cc",
        "patchSetId": 13
      },
      "lineNbr": 54,
      "author": {
        "id": 9515
      },
      "writtenOn": "2021-04-11T19:00:34Z",
      "side": 1,
      "message": "Done.",
      "parentUuid": "2ba95d4f_31d5e6c8",
      "revId": "97e394c2e62d90263246f4592b117c7a6efd26a3",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3ce8e1fb_ab58197b",
        "filename": "rtc_base/platform_thread.cc",
        "patchSetId": 13
      },
      "lineNbr": 81,
      "author": {
        "id": 5508
      },
      "writtenOn": "2021-04-10T14:42:12Z",
      "side": 1,
      "message": "when we initially implemented this, we went through some lengths to avoid having to do this sort of synchronization.\nA couple of options:\n* Can the attributes be reference counted instead?\n\n* If not, can we avoid having start_complete_event_ be a member variable and avoid the dependency on Event in the PlatformThread class?\nI\u0027m thinking that a local struct that points to the on-stack Event object and object variable, could be used as a parameter to a bootstrapping root function.\nIf required, you could fwd declare the struct as a class scoped struct in the header, make the Run function take a pointer to such an instance but only declare the struct in the cc file, thus avoiding the Event type in the header and PlatformThread class itself.",
      "revId": "97e394c2e62d90263246f4592b117c7a6efd26a3",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9ef6badc_731789be",
        "filename": "rtc_base/platform_thread.cc",
        "patchSetId": 13
      },
      "lineNbr": 81,
      "author": {
        "id": 9515
      },
      "writtenOn": "2021-04-11T19:00:34Z",
      "side": 1,
      "message": "Fixed it by passing a heap blob with the attributes used, at the expense of changing the prototype for the RunFunction. I used the Event to not cause call stack migration for any crashes PlatformThread might be involved in currently.\n\nI realized both previously before my CL things were broken (and remains broken in PS13) - priority might not be set correctly because thread_ can still be unassigned when dereferencing it in SetPriority().\n\nFixed both in the new PS.",
      "parentUuid": "3ce8e1fb_ab58197b",
      "revId": "97e394c2e62d90263246f4592b117c7a6efd26a3",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d8cf4f02_bb791693",
        "filename": "rtc_base/platform_thread.cc",
        "patchSetId": 13
      },
      "lineNbr": 94,
      "author": {
        "id": 9515
      },
      "writtenOn": "2021-04-11T19:00:34Z",
      "side": 1,
      "message": "Yikes, using the pointer of another kind of object. Fixing.",
      "range": {
        "startLine": 94,
        "startChar": 27,
        "endLine": 94,
        "endChar": 33
      },
      "revId": "97e394c2e62d90263246f4592b117c7a6efd26a3",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0a6b0bc3_8a2204b7",
        "filename": "rtc_base/platform_thread.cc",
        "patchSetId": 13
      },
      "lineNbr": 159,
      "author": {
        "id": 9515
      },
      "writtenOn": "2021-04-11T19:00:34Z",
      "side": 1,
      "message": "Yikes, using an attribute from thread context when it might not be set yet...",
      "range": {
        "startLine": 159,
        "startChar": 27,
        "endLine": 159,
        "endChar": 34
      },
      "revId": "97e394c2e62d90263246f4592b117c7a6efd26a3",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a047ef19_64e9cb29",
        "filename": "rtc_base/platform_thread.cc",
        "patchSetId": 13
      },
      "lineNbr": 201,
      "author": {
        "id": 9515
      },
      "writtenOn": "2021-04-11T19:00:34Z",
      "side": 1,
      "message": "Yikes, using an attribute from thread context when it might not be set yet...",
      "range": {
        "startLine": 201,
        "startChar": 31,
        "endLine": 201,
        "endChar": 38
      },
      "revId": "97e394c2e62d90263246f4592b117c7a6efd26a3",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "17323cde_8f8b8c10",
        "filename": "rtc_base/platform_thread.h",
        "patchSetId": 13
      },
      "lineNbr": 55,
      "author": {
        "id": 5508
      },
      "writtenOn": "2021-04-10T14:42:12Z",
      "side": 1,
      "message": "nit: remove `this-\u003e`\ncan we remove it above too and just rename the param?",
      "revId": "97e394c2e62d90263246f4592b117c7a6efd26a3",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e1b61c0d_b637cfc5",
        "filename": "rtc_base/platform_thread.h",
        "patchSetId": 13
      },
      "lineNbr": 55,
      "author": {
        "id": 9515
      },
      "writtenOn": "2021-04-11T19:00:34Z",
      "side": 1,
      "message": "Right, leftovers from previous exercises, thanks. Done.",
      "parentUuid": "17323cde_8f8b8c10",
      "revId": "97e394c2e62d90263246f4592b117c7a6efd26a3",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3290ee63_4d2618b8",
        "filename": "rtc_base/platform_thread.h",
        "patchSetId": 13
      },
      "lineNbr": 85,
      "author": {
        "id": 5508
      },
      "writtenOn": "2021-04-10T14:42:12Z",
      "side": 1,
      "message": "nit: \"returns immediately\"\n-\u003e\n\"returns immediately after freeing any held resources\"\n\nOr something to that effect - I\u0027m thinking about emphasizing the need to call Stop() even if you have a detached thread.",
      "revId": "97e394c2e62d90263246f4592b117c7a6efd26a3",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5f4d989a_ea2a723a",
        "filename": "rtc_base/platform_thread.h",
        "patchSetId": 13
      },
      "lineNbr": 85,
      "author": {
        "id": 9515
      },
      "writtenOn": "2021-04-11T19:00:34Z",
      "side": 1,
      "message": "There are no resources that are freed in the detached case (except on win the thread handle is closed) and it\u0027s artificial to require the Stop call for detached threads as you can\u0027t actually stop anything. But I see that the implementation prepares the object for another Start() call. I updated the docs for that case.\n\n(The use of a second Start call is pretty limited as the |obj_| value is re-used.)\n\n(The word \"Stop\" is misleading, what it does is more \"JoinAndPrepareForANewStart\". In fact the whole interface of this class is weird, TBH I would make a completely different interface 2021 which isn\u0027t open for interpretation and with this clunky ptr-based interface, it\u0027s very tempting.)",
      "parentUuid": "3290ee63_4d2618b8",
      "revId": "97e394c2e62d90263246f4592b117c7a6efd26a3",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "16bbaa29_ffa03191",
        "filename": "rtc_base/platform_thread_unittest.cc",
        "patchSetId": 13
      },
      "lineNbr": 36,
      "author": {
        "id": 5508
      },
      "writtenOn": "2021-04-19T08:53:24Z",
      "side": 1,
      "message": "would prefer to not use global variables. This is used within a single test, so a local variable should be enough.",
      "revId": "97e394c2e62d90263246f4592b117c7a6efd26a3",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "db91fa30_f1d3c3c5",
        "filename": "rtc_base/platform_thread_unittest.cc",
        "patchSetId": 13
      },
      "lineNbr": 79,
      "author": {
        "id": 5508
      },
      "writtenOn": "2021-04-10T14:42:12Z",
      "side": 1,
      "message": "can we use something else than sleep?",
      "revId": "97e394c2e62d90263246f4592b117c7a6efd26a3",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "83de674d_3609cb5a",
        "filename": "rtc_base/platform_thread_unittest.cc",
        "patchSetId": 13
      },
      "lineNbr": 79,
      "author": {
        "id": 9515
      },
      "writtenOn": "2021-04-11T19:00:34Z",
      "side": 1,
      "message": "In the case of a faulty join implementation, I wanted to make it unlikely that the event is set immediately after Stop. Removing the Sleep increases that probability and makes such a problem potentially slip.\nCurious, what can be used instead of a sleep?\n\nDo you think 5s is too much? Changed to 1s.",
      "parentUuid": "db91fa30_f1d3c3c5",
      "revId": "97e394c2e62d90263246f4592b117c7a6efd26a3",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "027dd41b_d1e184e0",
        "filename": "rtc_base/platform_thread_unittest.cc",
        "patchSetId": 13
      },
      "lineNbr": 79,
      "author": {
        "id": 5508
      },
      "writtenOn": "2021-04-19T08:53:24Z",
      "side": 1,
      "message": "To make the test more hermetic, I\u0027d prefer to not have lingering threads when the test exits. Instead of Sleep, would something like this work?\n\nEvent* thread_blocker \u003d new Event();\n...\n... {\n  thread_blocker-\u003eWait(kForever);\n  event.Set();\n  delete thread_blocker;\n}\n...\nASSERT_TRUE(event.Wait(/*give_up_after_ms\u003d*/0));\nthread_blocker-\u003eSet();\n\nIt also makes the test not rely on a global variable. Think of running the test with gtest_repeat\u003d10000. (or multiple parallel runs)",
      "parentUuid": "83de674d_3609cb5a",
      "revId": "97e394c2e62d90263246f4592b117c7a6efd26a3",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "97fd46b9_ef0eb283",
        "filename": "rtc_base/platform_thread_unittest.cc",
        "patchSetId": 13
      },
      "lineNbr": 96,
      "author": {
        "id": 5508
      },
      "writtenOn": "2021-04-10T14:42:12Z",
      "side": 1,
      "message": "for how long does the test run and for how long does this thread live?\nSeems like it could be cleaner to wait on an event instead and signal that event after the test itself has been completed",
      "revId": "97e394c2e62d90263246f4592b117c7a6efd26a3",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "81a1b547_e08a99d9",
        "filename": "rtc_base/platform_thread_unittest.cc",
        "patchSetId": 13
      },
      "lineNbr": 96,
      "author": {
        "id": 9515
      },
      "writtenOn": "2021-04-11T19:00:34Z",
      "side": 1,
      "message": "The test completes immediately. The spawned thread runs for 5s+.\n\nWe need to survive the case where the PlatformThread is destroyed with a detached thread running because the end of the run function could be accessing PlatformThread attributes.\n\nSpeculatively changing sleep duration to 1s.",
      "parentUuid": "97fd46b9_ef0eb283",
      "revId": "97e394c2e62d90263246f4592b117c7a6efd26a3",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    }
  ]
}