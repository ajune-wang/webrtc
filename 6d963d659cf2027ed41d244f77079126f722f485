{
  "comments": [
    {
      "key": {
        "uuid": "38ad81bf_865b9e19",
        "filename": "pc/peerconnection.cc",
        "patchSetId": 1
      },
      "lineNbr": 1010,
      "author": {
        "id": 5660
      },
      "writtenOn": "2017-12-09T16:57:00Z",
      "side": 1,
      "message": "I\u0027m confused by this.  Does this automatically wrap the given streams in scoped_refptr?  That seems dangerous.  I don\u0027t think we can safely retain a reference to the streams because there\u0027s no guarantee the caller won\u0027t destroy the streams immediately after calling AddTrack.\n\nBut this is call kind of silly anyway.  The only thing we need is the label of the stream.  So we might as well just change everything to take a \"std::vector\u003cstd::string\u003e stream_labels\", including for the public AddTrack.  That would be safer and more simple.",
      "revId": "6d963d659cf2027ed41d244f77079126f722f485",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "52a60ae7_c52b1125",
        "filename": "pc/peerconnection.cc",
        "patchSetId": 1
      },
      "lineNbr": 1010,
      "author": {
        "id": 5039
      },
      "writtenOn": "2017-12-12T19:28:01Z",
      "side": 1,
      "message": "The MediaStreamInterface is reference counted, so I\u0027m not sure that I understand your concerns about them being destroyed by the caller.\n\nIs there no value in having the stream represented by a full object MediaStreamInterface?",
      "parentUuid": "38ad81bf_865b9e19",
      "revId": "6d963d659cf2027ed41d244f77079126f722f485",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d6b1013d_9d467176",
        "filename": "pc/peerconnection.cc",
        "patchSetId": 1
      },
      "lineNbr": 1010,
      "author": {
        "id": 5660
      },
      "writtenOn": "2017-12-12T21:39:31Z",
      "side": 1,
      "message": "No, there is no value in having a full MediaStreamInterface at this point in the code.  The only thing we use it for is the label.",
      "parentUuid": "52a60ae7_c52b1125",
      "revId": "6d963d659cf2027ed41d244f77079126f722f485",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2a562510_72e82529",
        "filename": "pc/peerconnection.cc",
        "patchSetId": 1
      },
      "lineNbr": 1010,
      "author": {
        "id": 5039
      },
      "writtenOn": "2017-12-12T22:17:03Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d6b1013d_9d467176",
      "revId": "6d963d659cf2027ed41d244f77079126f722f485",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "48d91121_c12948de",
        "filename": "pc/peerconnection.cc",
        "patchSetId": 1
      },
      "lineNbr": 1010,
      "author": {
        "id": 5142
      },
      "writtenOn": "2017-12-13T15:42:26Z",
      "side": 1,
      "message": "The WebRTC spec, and Chromium implementation, uses objects for all interfaces and events/callbacks, not ids/labels. It is possible to end up with multiple track objects and stream objects that share the same ID, and I\u0027ve had to fix bugs caused by objects getting mixed up because they had the same ID and there was faulty assumptions about IDs being unique. E.g. if you add, remove, and then add again a remote track or stream you should end up with a new object with the same ID. One track could be muted, the other could be unmuted.\n\nSurely which track / streams were added is important, not just what label they go by.\n\nIs the plan to make the webrtc layer only care about labels? If I inspect a peer connection I will get ahold of objects (senders, receivers, streams, tracks), not IDs. The tracks and streams that I add are the ones that I expect to have been added if I look at the PC.\n\nI would be very careful about changing APIs to use ids/labels over references. If I call AddTrack with this track and those stream, those are the objects that should be tied to the sender, not some other track or streams that have the same IDs. There is a relationship here. It\u0027s not just conceptual. The sender should reference the streams, the streams should not be able to reach ref count 0 as long as they are in-use.\n\nAs for \"the caller might destroy...\". Its a ref counted object, so there should be no explicit delete call. On the other hand, if we *don\u0027t* keep a reference to the objects because we only keep labels, the streams could be deleted because there are no references sender -\u003e streams.\n\nFrom a Chromium perspective, if the PC does not keep track of the relationships of objects, only relationships between labels, I would have to duplicate this work effort in chromium to protect objects against destruction. I would probably have to make assumptions about when a PC is or is not using an object separate from the PC implementation.\n\nI encourage you use references. I\u0027d argue that labels is not the only thing you are using in this layer. You are using objects which have associated labels. Objects need to be referenced when used - ownership is shared.",
      "parentUuid": "2a562510_72e82529",
      "revId": "6d963d659cf2027ed41d244f77079126f722f485",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ff597c75_d6943af1",
        "filename": "pc/peerconnection.cc",
        "patchSetId": 1
      },
      "lineNbr": 1108,
      "author": {
        "id": 5660
      },
      "writtenOn": "2017-12-09T16:57:00Z",
      "side": 1,
      "message": "We should rename this stream_labels.\n\nIt\u0027s kind of confusing.  The MediaStream calls it a label.  The SDP calls it a \"MediaStreamID\".  Our code internally calls it a stream label, stream ID, a sync label, and a sync group.\n\nI think we should unify around \"stream label\", but whatever we pick we should pick one and use it every where.  But we\u0027re kind of stuck with stream-\u003elabel() here.  I don\u0027t care that it would conflict with \"MediaStreamID\".  So I\u0027m in favor of \"stream label\".  But I could live with \"stream ID\" if there\u0027s a good argument for it.",
      "range": {
        "startLine": 1108,
        "startChar": 75,
        "endLine": 1108,
        "endChar": 0
      },
      "revId": "6d963d659cf2027ed41d244f77079126f722f485",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b6bd5080_5b8dbd4e",
        "filename": "pc/peerconnection.cc",
        "patchSetId": 1
      },
      "lineNbr": 1108,
      "author": {
        "id": 5039
      },
      "writtenOn": "2017-12-12T19:28:01Z",
      "side": 1,
      "message": "stream_label sounds fine with me. Renaming that sounds like a good candidate for a follow-up CL.",
      "parentUuid": "ff597c75_d6943af1",
      "range": {
        "startLine": 1108,
        "startChar": 75,
        "endLine": 1108,
        "endChar": 0
      },
      "revId": "6d963d659cf2027ed41d244f77079126f722f485",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9dc5c7c4_efe596db",
        "filename": "pc/peerconnection.h",
        "patchSetId": 1
      },
      "lineNbr": 361,
      "author": {
        "id": 5660
      },
      "writtenOn": "2017-12-09T16:57:00Z",
      "side": 1,
      "message": "Would a better name be FindFirstTranscieverForAddedTrack?",
      "range": {
        "startLine": 361,
        "startChar": 35,
        "endLine": 361,
        "endChar": 0
      },
      "revId": "6d963d659cf2027ed41d244f77079126f722f485",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7485dfcf_8765ec18",
        "filename": "pc/peerconnection.h",
        "patchSetId": 1
      },
      "lineNbr": 361,
      "author": {
        "id": 5039
      },
      "writtenOn": "2017-12-12T19:28:01Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9dc5c7c4_efe596db",
      "range": {
        "startLine": 361,
        "startChar": 35,
        "endLine": 361,
        "endChar": 0
      },
      "revId": "6d963d659cf2027ed41d244f77079126f722f485",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e799531c_6c5d9723",
        "filename": "pc/rtpsender.h",
        "patchSetId": 1
      },
      "lineNbr": 86,
      "author": {
        "id": 5660
      },
      "writtenOn": "2017-12-09T16:57:00Z",
      "side": 1,
      "message": "Why is this change needed?",
      "range": {
        "startLine": 86,
        "startChar": 63,
        "endLine": 86,
        "endChar": 0
      },
      "revId": "6d963d659cf2027ed41d244f77079126f722f485",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c539604e_d9e6e8f4",
        "filename": "pc/rtpsender.h",
        "patchSetId": 1
      },
      "lineNbr": 86,
      "author": {
        "id": 5039
      },
      "writtenOn": "2017-12-12T19:28:01Z",
      "side": 1,
      "message": "I was told that it\u0027s best to pass reference counted pointer using the rtc::scoped_refptr instead of a bare pointer. I guess it\u0027s not strictly related to this CL change, but it seemed like a convenient time to change it.",
      "parentUuid": "e799531c_6c5d9723",
      "range": {
        "startLine": 86,
        "startChar": 63,
        "endLine": 86,
        "endChar": 0
      },
      "revId": "6d963d659cf2027ed41d244f77079126f722f485",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    }
  ]
}