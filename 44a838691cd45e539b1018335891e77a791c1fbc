{
  "comments": [
    {
      "key": {
        "uuid": "effaf7e4_5f86c3e9",
        "filename": "api/media_transport_interface.h",
        "patchSetId": 20
      },
      "lineNbr": 280,
      "author": {
        "id": 7704
      },
      "writtenOn": "2019-01-02T15:13:22Z",
      "side": 1,
      "message": "Are we expecting to call it with every ACK?\nThere are two sources of this signal to me:\n1) OnTargetBitrate notification \n2) Whenever we get an ACK, we get an updated rtt.\n\nSo is the expectation to call this callback with every ack, if available?",
      "range": {
        "startLine": 280,
        "startChar": 15,
        "endLine": 280,
        "endChar": 27
      },
      "revId": "44a838691cd45e539b1018335891e77a791c1fbc",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "30f7b23e_aa360324",
        "filename": "api/media_transport_interface.h",
        "patchSetId": 20
      },
      "lineNbr": 280,
      "author": {
        "id": 5234
      },
      "writtenOn": "2019-01-03T08:48:14Z",
      "side": 1,
      "message": "As the above comment says, this isn\u0027t entirely clear. Calling it for each ACK is a good start, I think.",
      "parentUuid": "effaf7e4_5f86c3e9",
      "range": {
        "startLine": 280,
        "startChar": 15,
        "endLine": 280,
        "endChar": 27
      },
      "revId": "44a838691cd45e539b1018335891e77a791c1fbc",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "83e14a9b_572e4393",
        "filename": "api/media_transport_interface.h",
        "patchSetId": 20
      },
      "lineNbr": 396,
      "author": {
        "id": 7704
      },
      "writtenOn": "2019-01-02T15:13:22Z",
      "side": 1,
      "message": "This is not related to your change, but a general direction: what worries me is that we are pushing logic for managing list of observers down to the implementation. \nThis leads to\n1) Duplicated code (along implementations)\n2) non-tested code (because this type of code is often considered \u0027trivial\u0027, it\u0027s frequently not tested).\n\nP.S. Please document \u0027Before media transport is destructed\n  // the observer must be unregistered (by calling\n  // RemoveTargetTransferRateObserver).\u0027 if it is the case.",
      "range": {
        "startLine": 396,
        "startChar": 15,
        "endLine": 396,
        "endChar": 29
      },
      "revId": "44a838691cd45e539b1018335891e77a791c1fbc",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bc47983a_7f33ecbc",
        "filename": "api/media_transport_interface.h",
        "patchSetId": 20
      },
      "lineNbr": 396,
      "author": {
        "id": 5234
      },
      "writtenOn": "2019-01-03T08:48:14Z",
      "side": 1,
      "message": "If duplication is a problem, we could introduce a shared helper class. I would expect that when we reorganize mux/demux, some of these observers would be come constrution-time settings on the per-stream objects.",
      "parentUuid": "83e14a9b_572e4393",
      "range": {
        "startLine": 396,
        "startChar": 15,
        "endLine": 396,
        "endChar": 29
      },
      "revId": "44a838691cd45e539b1018335891e77a791c1fbc",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "24cbeea1_d63cad6c",
        "filename": "api/test/loopback_media_transport.cc",
        "patchSetId": 20
      },
      "lineNbr": 206,
      "author": {
        "id": 7704
      },
      "writtenOn": "2019-01-02T15:13:22Z",
      "side": 1,
      "message": "what\u0027s the style guide for \u0027auto*\u0027? \u0027*\u0027 itself is redundant, so I would just omit it, or used the full type.",
      "range": {
        "startLine": 206,
        "startChar": 13,
        "endLine": 206,
        "endChar": 14
      },
      "revId": "44a838691cd45e539b1018335891e77a791c1fbc",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7f042008_a1c009f0",
        "filename": "api/test/loopback_media_transport.cc",
        "patchSetId": 20
      },
      "lineNbr": 206,
      "author": {
        "id": 5234
      },
      "writtenOn": "2019-01-03T08:48:14Z",
      "side": 1,
      "message": "https://chromium-cpp.appspot.com/ says \"do not use auto to deduce a raw pointer, use auto* instead.\"",
      "parentUuid": "24cbeea1_d63cad6c",
      "range": {
        "startLine": 206,
        "startChar": 13,
        "endLine": 206,
        "endChar": 14
      },
      "revId": "44a838691cd45e539b1018335891e77a791c1fbc",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d2a08ee8_56221a66",
        "filename": "video/video_receive_stream.cc",
        "patchSetId": 20
      },
      "lineNbr": 120,
      "author": {
        "id": 7704
      },
      "writtenOn": "2019-01-02T15:13:22Z",
      "side": 1,
      "message": "Please document why can\u0027t we just use EncodedImage, and who becomes the owner of the buffer.\n\nI can see allocation, but I don\u0027t see deallocation of memory during destruction.",
      "revId": "44a838691cd45e539b1018335891e77a791c1fbc",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5bbb5507_3b9cb53a",
        "filename": "video/video_receive_stream.cc",
        "patchSetId": 20
      },
      "lineNbr": 120,
      "author": {
        "id": 5234
      },
      "writtenOn": "2019-01-03T08:48:14Z",
      "side": 1,
      "message": "I\u0027m adding a comment. Deallocation is done by the VCMEncodedFrame desrtuctor.",
      "parentUuid": "d2a08ee8_56221a66",
      "revId": "44a838691cd45e539b1018335891e77a791c1fbc",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6d08b2c4_c099ff9d",
        "filename": "video/video_receive_stream.cc",
        "patchSetId": 20
      },
      "lineNbr": 148,
      "author": {
        "id": 5525
      },
      "writtenOn": "2019-01-02T14:22:16Z",
      "side": 1,
      "message": "TODO to implement these?",
      "range": {
        "startLine": 146,
        "startChar": 3,
        "endLine": 148,
        "endChar": 51
      },
      "revId": "44a838691cd45e539b1018335891e77a791c1fbc",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "56f94674_a6736335",
        "filename": "video/video_receive_stream.cc",
        "patchSetId": 20
      },
      "lineNbr": 148,
      "author": {
        "id": 5234
      },
      "writtenOn": "2019-01-03T08:48:14Z",
      "side": 1,
      "message": "Added TODO.",
      "parentUuid": "6d08b2c4_c099ff9d",
      "range": {
        "startLine": 146,
        "startChar": 3,
        "endLine": 148,
        "endChar": 51
      },
      "revId": "44a838691cd45e539b1018335891e77a791c1fbc",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "31404b02_2c6aeb3c",
        "filename": "video/video_send_stream_impl.cc",
        "patchSetId": 20
      },
      "lineNbr": 610,
      "author": {
        "id": 5525
      },
      "writtenOn": "2019-01-02T14:22:16Z",
      "side": 1,
      "message": "Currently this is the responsibility of RtpVideoSender: https://cs.chromium.org/chromium/src/third_party/webrtc/call/rtp_video_sender.cc?sq\u003dpackage:chromium\u0026dr\u0026q\u003dRtpVideoSEnder+file:%5Esrc/third_party/webrtc/+package:%5Echromium$\u0026g\u003d0\u0026l\u003d356\n\nPerhaps this is a better place for it to live though? Would be good to only have one at least... Make sure you sync with Philip on how to deal with this if you haven\u0027t already.",
      "range": {
        "startLine": 610,
        "startChar": 0,
        "endLine": 610,
        "endChar": 28
      },
      "revId": "44a838691cd45e539b1018335891e77a791c1fbc",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c3594010_e061d60e",
        "filename": "video/video_send_stream_impl.cc",
        "patchSetId": 20
      },
      "lineNbr": 610,
      "author": {
        "id": 5234
      },
      "writtenOn": "2019-01-03T08:48:14Z",
      "side": 1,
      "message": "Talked to Philip, and we think this responsibility belongs in VideoStreamEncoder. May be a bit difficult to move it, though. Updated comment to say so.",
      "parentUuid": "31404b02_2c6aeb3c",
      "range": {
        "startLine": 610,
        "startChar": 0,
        "endLine": 610,
        "endChar": 28
      },
      "revId": "44a838691cd45e539b1018335891e77a791c1fbc",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d75a8619_d73146a5",
        "filename": "video/video_send_stream_impl.h",
        "patchSetId": 20
      },
      "lineNbr": 190,
      "author": {
        "id": 5525
      },
      "writtenOn": "2019-01-02T14:22:16Z",
      "side": 1,
      "message": "media_transport_id_lock_?",
      "range": {
        "startLine": 190,
        "startChar": 23,
        "endLine": 190,
        "endChar": 44
      },
      "revId": "44a838691cd45e539b1018335891e77a791c1fbc",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "24a5211e_b14fa6f3",
        "filename": "video/video_send_stream_impl.h",
        "patchSetId": 20
      },
      "lineNbr": 190,
      "author": {
        "id": 5234
      },
      "writtenOn": "2019-01-03T08:48:14Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d75a8619_d73146a5",
      "range": {
        "startLine": 190,
        "startChar": 23,
        "endLine": 190,
        "endChar": 44
      },
      "revId": "44a838691cd45e539b1018335891e77a791c1fbc",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    }
  ]
}