{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "6003c17a_40ee6fd4",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 20759
      },
      "writtenOn": "2023-07-12T09:01:59Z",
      "side": 1,
      "message": "Many thanks for the answers.\n\nWe will take the issue back to the drawing-table and discuss with\nthe team how to solve it.\n\nIf I understand the problem correctly, all entries in getStats() have to\nbe defined in W3C standard, and what we are adding is not standard ?\n\nThanks,",
      "revId": "091371cc79c14375687232d0fd53ec2cd4267606",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e653b091_8094a172",
        "filename": "api/stats/rtcstats_objects.h",
        "patchSetId": 1
      },
      "lineNbr": 324,
      "author": {
        "id": 5142
      },
      "writtenOn": "2023-07-10T12:01:42Z",
      "side": 1,
      "message": "The getStats() API is the wrong place for per-frame metrics due to the performance overhead of calling getStats() often.\n\nWe also strive not to add non-standard metrics, i.e. metrics that are not defined in https://w3c.github.io/webrtc-stats/, a W3C document that is edited via github issues and PRs: https://github.com/w3c/webrtc-stats/issues\n\nWhere best to expose information like this depends on use case I think, if it should be close to the decoder impl or a higher level API.",
      "revId": "091371cc79c14375687232d0fd53ec2cd4267606",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c136eee8_0d09ff71",
        "filename": "api/stats/rtcstats_objects.h",
        "patchSetId": 1
      },
      "lineNbr": 324,
      "author": {
        "id": 19549
      },
      "writtenOn": "2023-07-10T14:31:11Z",
      "side": 1,
      "message": "requestVideoFrameCallback is per-frame (with caveat of being for rendered frames and there may be gaps), see https://chromium-review.googlesource.com/c/chromium/src/+/2675937 for some older thoughts on how to do this. The alternative would be an insertable streams stats sink which would be a lot of effort to standardize.",
      "parentUuid": "e653b091_8094a172",
      "revId": "091371cc79c14375687232d0fd53ec2cd4267606",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "At least one maximum vote for label \u0027Code-Review\u0027 is required"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader AND -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1 AND -label:Code-Review\u003dMIN"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader AND -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Code-Review=MAX,user=non_uploader","label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1 AND -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1","label:Code-Review=MIN"]}
      },
      "patchSetCommitId": "091371cc79c14375687232d0fd53ec2cd4267606",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforced_gerrit"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforcement-satisfied_gerrit"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "091371cc79c14375687232d0fd53ec2cd4267606",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}