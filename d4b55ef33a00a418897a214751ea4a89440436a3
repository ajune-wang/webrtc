{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "f6c0d6ba_78505bbb",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 16,
      "author": {
        "id": 5019
      },
      "writtenOn": "2021-07-08T11:01:01Z",
      "side": 1,
      "message": "should address real-time case too:\nafter thread is destroyed, delayed task shouldn\u0027t run. (delayed task may still live, but that is not an issue here)",
      "range": {
        "startLine": 15,
        "startChar": 17,
        "endLine": 16,
        "endChar": 50
      },
      "revId": "d4b55ef33a00a418897a214751ea4a89440436a3",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "aa497cc5_991f72b2",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 16,
      "author": {
        "id": 5087
      },
      "writtenOn": "2021-07-08T11:10:07Z",
      "side": 1,
      "message": "I was referring to the `EXPECT_THAT(execution_order.order(), ElementsAreArray({1, 2}))` part. This one might still fail is the delayed task doesn\u0027t execute but I guess this is classic flakiness from real-time (still really low from what I see).",
      "parentUuid": "f6c0d6ba_78505bbb",
      "range": {
        "startLine": 15,
        "startChar": 17,
        "endLine": 16,
        "endChar": 50
      },
      "revId": "d4b55ef33a00a418897a214751ea4a89440436a3",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a7c53cdb_0324cac9",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5019
      },
      "writtenOn": "2021-07-08T10:51:45Z",
      "side": 1,
      "message": "I do not understand why this change should have any effect:\n`thread` variable is unique_ptr, it should be destroyed when existing scope, before `time_controller` and test tear down",
      "revId": "d4b55ef33a00a418897a214751ea4a89440436a3",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "59a18dc3_a251e360",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5087
      },
      "writtenOn": "2021-07-08T11:10:07Z",
      "side": 1,
      "message": "Adding Andrey for OWNERS approval.",
      "revId": "d4b55ef33a00a418897a214751ea4a89440436a3",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b60216b4_85653afd",
        "filename": "test/time_controller/time_controller_conformance_test.cc",
        "patchSetId": 1
      },
      "lineNbr": 95,
      "author": {
        "id": 5019
      },
      "writtenOn": "2021-07-08T10:51:45Z",
      "side": 1,
      "message": "what does it change?\nit look like it only changes destruction order of `thread` and `execution_order` variables.\nThat order doesn\u0027t look important",
      "revId": "d4b55ef33a00a418897a214751ea4a89440436a3",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2c7d9d53_f1710e2c",
        "filename": "test/time_controller/time_controller_conformance_test.cc",
        "patchSetId": 1
      },
      "lineNbr": 95,
      "author": {
        "id": 5019
      },
      "writtenOn": "2021-07-08T10:58:53Z",
      "side": 1,
      "message": "hm, I think I see a scenario where it matters:\ntasked posted with PostTask didn\u0027t run until after execution_order is destroyed.\nThen yes, instead of just failing the test, it would also cause stack-use-after-scope.\n\nMay be added a comment about it, something like\n// Destroy thread before execution_order to be sure execution_order is not accessed on the posted task after it is destroyed.",
      "parentUuid": "b60216b4_85653afd",
      "revId": "d4b55ef33a00a418897a214751ea4a89440436a3",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0b1a8ee2_6ac44a4f",
        "filename": "test/time_controller/time_controller_conformance_test.cc",
        "patchSetId": 1
      },
      "lineNbr": 95,
      "author": {
        "id": 5087
      },
      "writtenOn": "2021-07-08T10:59:36Z",
      "side": 1,
      "message": "Yes, changing the destruction order is what matters. What happens is that the callback on `thread` runs after `execution_order` has been marked as out of scope by ASan:\n\nThis frame has 11 object(s):\n    [32, 64) \u0027ref.tmp.i.i\u0027\n    [96, 120) \u0027agg.tmp.i\u0027\n    [160, 176) \u0027mutex_attribute.i.i.i.i.i.i\u0027\n    [192, 216) \u0027ref.tmp\u0027 (line 100)\n    [256, 344) \u0027execution_order\u0027 (line 102) \u003c\u003d\u003d Memory access at offset 328 is inside this variable\n    [384, 400) \u0027gtest_ar\u0027 (line 107)\n    [416, 440) \u0027ref.tmp48\u0027 (line 107)\n    [480, 504) \u0027agg.tmp49\u0027\n    [544, 568) \u0027ref.tmp51\u0027 (line 107)\n    [608, 616) \u0027ref.tmp53\u0027 (line 107)\n    [640, 648) \u0027ref.tmp54\u0027 (line 107)\n\nInstead of explicitly destroying `thread`, I can just move the creation of `execution_order` before. What do you think?",
      "parentUuid": "b60216b4_85653afd",
      "revId": "d4b55ef33a00a418897a214751ea4a89440436a3",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d5cef29a_41bc92d1",
        "filename": "test/time_controller/time_controller_conformance_test.cc",
        "patchSetId": 1
      },
      "lineNbr": 95,
      "author": {
        "id": 5087
      },
      "writtenOn": "2021-07-08T11:00:57Z",
      "side": 1,
      "message": "Ok, adding a comment.\n\nI personally prefer this + comment instead of moving `execution_order` initialization before `thread`.",
      "parentUuid": "0b1a8ee2_6ac44a4f",
      "revId": "d4b55ef33a00a418897a214751ea4a89440436a3",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "80957dae_2f0662d7",
        "filename": "test/time_controller/time_controller_conformance_test.cc",
        "patchSetId": 1
      },
      "lineNbr": 95,
      "author": {
        "id": 5019
      },
      "writtenOn": "2021-07-08T11:05:10Z",
      "side": 1,
      "message": "in production code I would prefer to change construction order (it is usually simpler when destruction order is reverse to the construction order)\nBut then again, grabbing reference when posting a Task is generally a bad idea in prod, instead there should be some safety flag.\n\nIn test a comment is probably clearer.",
      "parentUuid": "d5cef29a_41bc92d1",
      "revId": "d4b55ef33a00a418897a214751ea4a89440436a3",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "71d8cb33_fddab3cc",
        "filename": "test/time_controller/time_controller_conformance_test.cc",
        "patchSetId": 1
      },
      "lineNbr": 95,
      "author": {
        "id": 5087
      },
      "writtenOn": "2021-07-08T11:10:07Z",
      "side": 1,
      "message": "Thanks.\n\nYes, agree on both.",
      "parentUuid": "d5cef29a_41bc92d1",
      "revId": "d4b55ef33a00a418897a214751ea4a89440436a3",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    }
  ]
}