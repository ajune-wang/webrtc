{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "6cf67dd8_9eb91a94",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 14134
      },
      "writtenOn": "2022-10-24T21:21:28Z",
      "side": 1,
      "message": "Getting closer.  Having one and only one initialization code-path would make the capturer code easier to reason about.",
      "revId": "ab213cf3c4c5247d95530dc103adcf987ecdb1b6",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0ca94abd_b23efb50",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 18474
      },
      "writtenOn": "2022-10-24T21:48:44Z",
      "side": 1,
      "message": "FWIW, the InitializePipeWire code is essentially the same code (actually already a bit cleaner) than what\u0027s being pulled out into modules/portal in: https://webrtc-review.googlesource.com/c/src/+/263721 \n\nwhich is just waiting to be merged in. The combination of that extraction and further checks to create the \"BaseCapturerPipeWire::IsSupported\" method makes the experience for users that don\u0027t have PipeWire loads better (both with and without the flag enabled); and I\u0027d really like to get this in before Feature Freeze. (Even if it does mean that I may end up needing to do a quick cleanup to reconcile the two versions of the code).\n\nI don\u0027t think the existing usages allow for reconciling a single initialization code path like you\u0027ve discussed; nor do I necessarily agree that relying on \"BaseCapturerPipeWire::IsSupported\" is the right path to ensure that initialization has happened, as it relies on a side effect that I\u0027d rather we didn\u0027t have if it was avoidable.",
      "parentUuid": "6cf67dd8_9eb91a94",
      "revId": "ab213cf3c4c5247d95530dc103adcf987ecdb1b6",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4dd77b13_ac657ad0",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 14134
      },
      "writtenOn": "2022-10-25T16:47:27Z",
      "side": 1,
      "message": "Let me be more explicit about what I see as the best solution:\n\n\n- Have an explicit Initialize() method that only loads the library, returns success and sets a static boolean.  (Only has side effects on first call.)\n- Have IsInitialized() return that boolean.  (No side effects.)\n- Have IsSupported() use IsInitialized().\n- Have all clients call Initialize() before doing anything that requires PipeWire.",
      "parentUuid": "0ca94abd_b23efb50",
      "revId": "ab213cf3c4c5247d95530dc103adcf987ecdb1b6",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "086802d4_1428064f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 18474
      },
      "writtenOn": "2022-10-25T17:19:44Z",
      "side": 1,
      "message": "Via the function local static `result` My current `InitializePipeWire` essentially fulfills the role of the first two. Due to the requirements of needing to load to ensure we\u0027re supported, then `IsSupported` has to call `Initialize`, rather than your suggested `IsInitialized` to return an accurate answer. I think it\u0027s a much cleaner pattern in general to have to check `IsSupported` before trying to `Initialize` anything; but also to *not* know/rely on `IsSupported` calling any `Initialize` code.\n\nI then think that it\u0027s cleaner for the classes that actually interface with PipeWire (shared_screencast_stream, test_screencast_stream, the webcam code) to ensure that PipeWire is initialized rather than their callers (I think by \u0027clients\u0027 you mean \u0027places that construct objects that use PipeWire\u0027)?",
      "parentUuid": "4dd77b13_ac657ad0",
      "revId": "ab213cf3c4c5247d95530dc103adcf987ecdb1b6",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4e7a8f53_aba49845",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 14134
      },
      "writtenOn": "2022-10-25T18:14:07Z",
      "side": 1,
      "message": "Ok.  I guess this is a chicken and egg problem.  If you take the initialization out of IsSupported(), and call it before initialization, it would have to return \"unknown\" since it doesn\u0027t know whether dlopen will succeed or not.\n\nAdding an unknown return value would be accurate and keep side effects out ... but be more complicated for calling code.",
      "parentUuid": "086802d4_1428064f",
      "revId": "ab213cf3c4c5247d95530dc103adcf987ecdb1b6",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5395d5ad_e73fd77e",
        "filename": "modules/desktop_capture/linux/wayland/base_capturer_pipewire.cc",
        "patchSetId": 6
      },
      "lineNbr": 33,
      "author": {
        "id": 14134
      },
      "writtenOn": "2022-10-24T21:21:28Z",
      "side": 1,
      "message": "A shorter version of this comment should go in the .h, explaining that a side  effect is to initialize PipeWire, which may involve loading the DSO.",
      "revId": "ab213cf3c4c5247d95530dc103adcf987ecdb1b6",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "df1470f3_4e2339f2",
        "filename": "modules/desktop_capture/linux/wayland/base_capturer_pipewire.cc",
        "patchSetId": 6
      },
      "lineNbr": 33,
      "author": {
        "id": 18474
      },
      "writtenOn": "2022-10-24T21:48:44Z",
      "side": 1,
      "message": "I don\u0027t particularly love exposing implementation details at such a distance, but I think it\u0027s fair to note such a large potential side effect. Done.",
      "parentUuid": "5395d5ad_e73fd77e",
      "revId": "ab213cf3c4c5247d95530dc103adcf987ecdb1b6",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d688a5c7_34e94c65",
        "filename": "modules/desktop_capture/linux/wayland/shared_screencast_stream.cc",
        "patchSetId": 6
      },
      "lineNbr": 382,
      "author": {
        "id": 14134
      },
      "writtenOn": "2022-10-24T21:21:28Z",
      "side": 1,
      "message": "It seems like this must already have happened because you are calling IsSupported() when creating the capturer.  Maybe this should be `DCHECK(IsSupported())`?",
      "revId": "ab213cf3c4c5247d95530dc103adcf987ecdb1b6",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "634e6ba1_44c21bb9",
        "filename": "modules/desktop_capture/linux/wayland/shared_screencast_stream.cc",
        "patchSetId": 6
      },
      "lineNbr": 382,
      "author": {
        "id": 18474
      },
      "writtenOn": "2022-10-24T21:48:44Z",
      "side": 1,
      "message": "The Chrome Remote Desktop code also leverages this and doesn\u0027t necessarily have to go through the initial \"IsSupported\" check, and nothing blocks just creating a BaseCapturerPipeWire without doing so. I also don\u0027t really *love* that IsSupported has to try to initialize, and would prefer to keep the initialization logic in place where it is now, so that we don\u0027t have to change it all if we ever *are* able to feature detect without loading the library.\n\nPlus I feel that this is a cleaner pattern of explicitly ensuring that it\u0027s opened before we need to use any methods.\n\nAlso worth noting that \"IsSupported\" is actually implemented as a static for a different class; which also makes it not feel right.",
      "parentUuid": "d688a5c7_34e94c65",
      "revId": "ab213cf3c4c5247d95530dc103adcf987ecdb1b6",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1830ff19_550b64d4",
        "filename": "modules/desktop_capture/linux/wayland/shared_screencast_stream.cc",
        "patchSetId": 6
      },
      "lineNbr": 382,
      "author": {
        "id": 14134
      },
      "writtenOn": "2022-10-25T16:47:27Z",
      "side": 1,
      "message": "It seems that the point of disagreement is that I want the client to have already initialized PipeWire before the code reaches this point, while you\u0027re landing various code-paths that do lazy-initialization.\n\nEven if there is nothing we can do to recover from a failed initialization, having one codepath makes it easier to collect metrics, report errors consistently, and means that crashes end up with fewer distinct stack traces.\n\nIt sounds like the requirements driving the solution in this patch come from remote desktop.  If this lands, we should work with remote desktop to land an eager initialization path and go back to remove this.  WDYT?",
      "parentUuid": "634e6ba1_44c21bb9",
      "revId": "ab213cf3c4c5247d95530dc103adcf987ecdb1b6",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6ae2118f_09019130",
        "filename": "modules/desktop_capture/linux/wayland/shared_screencast_stream.cc",
        "patchSetId": 6
      },
      "lineNbr": 382,
      "author": {
        "id": 18474
      },
      "writtenOn": "2022-10-25T17:19:44Z",
      "side": 1,
      "message": "I disagree that the client (which I assume you mean \"places that create BaseCapturerPipeWire\") should be the one responsible for Initializing PipeWire and I think that would actually spread out the places that need to call Initialize and make it \"riskier\" to use PipeWire (since you then have to know \"I need to call this helper method before creating this object\"), I think it should be the responsibility of the class that actually uses the connection to PipeWire to ensure that it can connect; even if that means exposing an \"Initialize\" method on itself. \n\nAdding an \"Initialize\" method as this CL does currently gives us a single place to collect metrics or report errors. There are currently only two places that call \"Initialize\":\n\n1) SharedScreencastStream (Which is actually created by DesktopCaptureOptions::CreateDefault, which I don\u0027t like now that I know that)\n2) *Test*SharedScreencastStreamProvider -\u003e Which the test creates neither a DesktopCaptureOptions nor a BaseCapturerPipeWire and creates this object in the constructor for the test class.\n\nMichael\u0027s CL adds a third place which is for the Webcam code and would thus not go through BaseCapturerPipeWire anyways. I think \"InitializePipeWire\" *is* the one place to initialize that will allow us to collect metrics and consistently report errors.\n\nI don\u0027t see it actually as landing various code paths that do lazy-initialization at all, given that there is only one product initialization path and the other is test-only.",
      "parentUuid": "1830ff19_550b64d4",
      "revId": "ab213cf3c4c5247d95530dc103adcf987ecdb1b6",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "76aafab7_fae7288f",
        "filename": "modules/desktop_capture/linux/wayland/shared_screencast_stream.cc",
        "patchSetId": 6
      },
      "lineNbr": 382,
      "author": {
        "id": 14134
      },
      "writtenOn": "2022-10-25T18:14:07Z",
      "side": 1,
      "message": "OK, you\u0027ve convinced me that the current InitializePipewire is sufficient as a single point of initialization.  I guess we will end up with three paths in production:\n\n- Desktop capture\n- Remoting host (albeit, separate from Chrome usage) \n- Webcam usage\n\nHowever imagine a scenario where a crash occurs in Chrome when dlopening pipewire.  The crash will manifest with different repro steps and stack traces according to whether Chrome is using a webcam first or doing desktop capture first.  Unless someone already knows that they share a common implementation (pipewire) and/or the crash server knows to cluster the stack traces, then you\u0027ll end up chasing them as separate issues.\n\nIt\u0027s not the end of the world, certainly not the only place where shared code crashes, but doing risky static initialization in one place tends to make issues easier to track down. (Wearing my stability sheriff hat.)",
      "parentUuid": "6ae2118f_09019130",
      "revId": "ab213cf3c4c5247d95530dc103adcf987ecdb1b6",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "77822d79_34101e57",
        "filename": "modules/desktop_capture/linux/wayland/shared_screencast_stream.cc",
        "patchSetId": 6
      },
      "lineNbr": 382,
      "author": {
        "id": 18474
      },
      "writtenOn": "2022-10-25T18:44:06Z",
      "side": 1,
      "message": "I *think* the crash tool should be smart enough to see the common \"InitializePipeWire\" on the stack and cluster it via the magic signature; especially since it\u0027s not in an anonymous namespace and InitializeStubs should add a couple of extra layers onto it.\n\nAlso, given that the InitializePipeWire call for SharedScreencastStream is in \"StartScreenCastStream\" both Desktop Capture and Remoting host should share that portion of the stack as well.",
      "parentUuid": "76aafab7_fae7288f",
      "revId": "ab213cf3c4c5247d95530dc103adcf987ecdb1b6",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "20973354_01f3f3a8",
        "filename": "modules/desktop_capture/linux/wayland/test/test_screencast_stream_provider.cc",
        "patchSetId": 6
      },
      "lineNbr": 34,
      "author": {
        "id": 14134
      },
      "writtenOn": "2022-10-24T21:21:28Z",
      "side": 1,
      "message": "Same comment here.",
      "revId": "ab213cf3c4c5247d95530dc103adcf987ecdb1b6",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9049aa0f_6bf0761f",
        "filename": "modules/desktop_capture/linux/wayland/test/test_screencast_stream_provider.cc",
        "patchSetId": 6
      },
      "lineNbr": 34,
      "author": {
        "id": 18474
      },
      "writtenOn": "2022-10-24T21:48:44Z",
      "side": 1,
      "message": "This is test code; so I\u0027d prefer to just try to initialize it rather than DCHECK; especially since the current configuration is such that we only include this on builders that should be supported so we just create it.",
      "parentUuid": "20973354_01f3f3a8",
      "revId": "ab213cf3c4c5247d95530dc103adcf987ecdb1b6",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    }
  ]
}