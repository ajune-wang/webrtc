{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "319496b5_6bb3c7c3",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5234
      },
      "writtenOn": "2022-03-17T14:38:29Z",
      "side": 1,
      "message": "PTAL, extracted from https://webrtc-review.googlesource.com/c/src/+/252441, to try to get that landed in smaller pieces.",
      "revId": "bd59e6152e3bfeef4a6d32c325fd90f7ea6af552",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5b97917b_8504b8bb",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5508
      },
      "writtenOn": "2022-03-17T16:27:58Z",
      "side": 1,
      "message": "make_ref_counted already works for RefCountedInterface and in such a case, adds RefCountedObject.\nWhat are the cases where changing make_ref_counted is the right thing to do and not removing the RefCountedObject inheritance from the class?",
      "revId": "bd59e6152e3bfeef4a6d32c325fd90f7ea6af552",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "12eea2e1_7d5190fe",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5508
      },
      "writtenOn": "2022-03-18T08:27:49Z",
      "side": 1,
      "message": "assuming that removing me from the reviewer list was unintentional ðŸ˜Š",
      "revId": "bd59e6152e3bfeef4a6d32c325fd90f7ea6af552",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b28830ea_f91b6d39",
        "filename": "rtc_base/ref_counted_object.h",
        "patchSetId": 1
      },
      "lineNbr": 163,
      "author": {
        "id": 5508
      },
      "writtenOn": "2022-03-17T16:29:22Z",
      "side": 1,
      "message": "I\u0027m a bit confused by this. \"make ref counted\" should not be needed for classes that already carry a ref count - right?",
      "revId": "bd59e6152e3bfeef4a6d32c325fd90f7ea6af552",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "da504ea8_5268cc8a",
        "filename": "rtc_base/ref_counted_object.h",
        "patchSetId": 1
      },
      "lineNbr": 163,
      "author": {
        "id": 5234
      },
      "writtenOn": "2022-03-18T08:21:18Z",
      "side": 1,
      "message": "Depends on what you mean by \"needed\"?\n\n  make_ref_counted\u003cFoo\u003e(...)\n\nlooks clearer to me than\n\n  rtc::scoped_refptr\u003cFoo\u003e(new Foo(...))\n\neven though they\u0027re equivalent in the case that the Foo class already carries a ref count. In this case, it\u0027s a convenience in about the same way as std::make_unique.",
      "parentUuid": "b28830ea_f91b6d39",
      "revId": "bd59e6152e3bfeef4a6d32c325fd90f7ea6af552",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fcfeb538_7e218984",
        "filename": "rtc_base/ref_counted_object.h",
        "patchSetId": 1
      },
      "lineNbr": 163,
      "author": {
        "id": 5508
      },
      "writtenOn": "2022-03-18T08:34:30Z",
      "side": 1,
      "message": "My point is that \"make ref counted\" isn\u0027t the same thing as \"construct a scoped_refptr\". The point of this utility is to add an implementation to the contained class, that has state. While similar, it\u0027s not the same thing as std::make_unique\u003c\u003e (or a hypothetical make_scoped_refptr\u003c\u003e).\n\nBut regardless, I think that this change is adding flexibility to allow for something we don\u0027t want to encourage, which is for RefCountedObject to not be the most derived class.",
      "parentUuid": "da504ea8_5268cc8a",
      "revId": "bd59e6152e3bfeef4a6d32c325fd90f7ea6af552",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    }
  ]
}