{
  "comments": [
    {
      "key": {
        "uuid": "d37dba6f_d325d672",
        "filename": "call/call.cc",
        "patchSetId": 6
      },
      "lineNbr": 758,
      "author": {
        "id": 5524
      },
      "writtenOn": "2018-11-29T12:57:03Z",
      "side": 1,
      "message": "nit: Little bit of shame to take this lock only for a dcheck. Would it be easy to for instance dcheck a lambda that takes the lock and returns equality?\nIf it\u0027s messy please ignore this comment :)",
      "range": {
        "startLine": 758,
        "startChar": 19,
        "endLine": 758,
        "endChar": 23
      },
      "revId": "c583ac41cf93e42f29c52209467b5dcc74aaadf0",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bc84a1f7_75c8ce47",
        "filename": "call/video_receive_stream.h",
        "patchSetId": 6
      },
      "lineNbr": 116,
      "author": {
        "id": 5525
      },
      "writtenOn": "2018-11-29T13:08:45Z",
      "side": 1,
      "message": "Remove explicit",
      "range": {
        "startLine": 116,
        "startChar": 4,
        "endLine": 116,
        "endChar": 12
      },
      "revId": "c583ac41cf93e42f29c52209467b5dcc74aaadf0",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b2ca518d_77bc75f6",
        "filename": "call/video_receive_stream.h",
        "patchSetId": 6
      },
      "lineNbr": 116,
      "author": {
        "id": 5234
      },
      "writtenOn": "2018-11-29T15:23:04Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "bc84a1f7_75c8ce47",
      "range": {
        "startLine": 116,
        "startChar": 4,
        "endLine": 116,
        "endChar": 12
      },
      "revId": "c583ac41cf93e42f29c52209467b5dcc74aaadf0",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1849a340_0a5af4fb",
        "filename": "call/video_send_stream.cc",
        "patchSetId": 6
      },
      "lineNbr": 86,
      "author": {
        "id": 5525
      },
      "writtenOn": "2018-11-29T13:08:45Z",
      "side": 1,
      "message": "Others say nullptr",
      "range": {
        "startLine": 86,
        "startChar": 67,
        "endLine": 86,
        "endChar": 71
      },
      "revId": "c583ac41cf93e42f29c52209467b5dcc74aaadf0",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e18a83e3_2836211d",
        "filename": "call/video_send_stream.cc",
        "patchSetId": 6
      },
      "lineNbr": 86,
      "author": {
        "id": 5234
      },
      "writtenOn": "2018-11-29T15:23:04Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1849a340_0a5af4fb",
      "range": {
        "startLine": 86,
        "startChar": 67,
        "endLine": 86,
        "endChar": 71
      },
      "revId": "c583ac41cf93e42f29c52209467b5dcc74aaadf0",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "08fffe69_6a704658",
        "filename": "video/video_receive_stream.cc",
        "patchSetId": 6
      },
      "lineNbr": 122,
      "author": {
        "id": 5525
      },
      "writtenOn": "2018-11-29T13:08:45Z",
      "side": 1,
      "message": "const MediaTransportEncodedVideoFrame\u0026?",
      "range": {
        "startLine": 122,
        "startChar": 6,
        "endLine": 122,
        "endChar": 37
      },
      "revId": "c583ac41cf93e42f29c52209467b5dcc74aaadf0",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e72d358e_70db6fed",
        "filename": "video/video_receive_stream.cc",
        "patchSetId": 6
      },
      "lineNbr": 122,
      "author": {
        "id": 5234
      },
      "writtenOn": "2018-11-29T15:23:04Z",
      "side": 1,
      "message": "Where this constructor is called, frames are passed by-value, and using std::move. Now, current EncodedImage classes don\u0027t really support efficient move, but maybe they should.",
      "parentUuid": "08fffe69_6a704658",
      "range": {
        "startLine": 122,
        "startChar": 6,
        "endLine": 122,
        "endChar": 37
      },
      "revId": "c583ac41cf93e42f29c52209467b5dcc74aaadf0",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d70676f7_1fa203c4",
        "filename": "video/video_receive_stream.cc",
        "patchSetId": 6
      },
      "lineNbr": 425,
      "author": {
        "id": 5524
      },
      "writtenOn": "2018-11-29T12:57:03Z",
      "side": 1,
      "message": "Planned for this CL?",
      "range": {
        "startLine": 425,
        "startChar": 2,
        "endLine": 425,
        "endChar": 29
      },
      "revId": "c583ac41cf93e42f29c52209467b5dcc74aaadf0",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bca32164_8760ca20",
        "filename": "video/video_receive_stream.cc",
        "patchSetId": 6
      },
      "lineNbr": 425,
      "author": {
        "id": 5234
      },
      "writtenOn": "2018-11-29T15:23:04Z",
      "side": 1,
      "message": "Should probably add it in this cl, but not sure there will be any test coverage.\n\nIntention for this cl is to do the minimal work needed to get frames through the pipeline, with one basic test for it.",
      "parentUuid": "d70676f7_1fa203c4",
      "range": {
        "startLine": 425,
        "startChar": 2,
        "endLine": 425,
        "endChar": 29
      },
      "revId": "c583ac41cf93e42f29c52209467b5dcc74aaadf0",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9741a523_a1808552",
        "filename": "video/video_receive_stream.cc",
        "patchSetId": 6
      },
      "lineNbr": 425,
      "author": {
        "id": 5234
      },
      "writtenOn": "2018-12-04T11:48:48Z",
      "side": 1,
      "message": "On second though, not sure this method (part of the MediaTransportVideoSinkInterface) makes sense at all. It\u0027s the *sender* that needs to respond to key frame requests, right?\n\nMaybe it\u0027s time to split up the MediaTransportInterface in separate interfaces for the various roles (which might still be implemented by the same object, if so desired). \n\nHere, we should add a MediaTransport alternative in VideoReceiveStream::RequestKeyFrame.",
      "parentUuid": "bca32164_8760ca20",
      "range": {
        "startLine": 425,
        "startChar": 2,
        "endLine": 425,
        "endChar": 29
      },
      "revId": "c583ac41cf93e42f29c52209467b5dcc74aaadf0",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    }
  ]
}