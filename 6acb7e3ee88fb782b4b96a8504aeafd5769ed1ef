{
  "comments": [
    {
      "key": {
        "uuid": "48d46e70_8bc880f5",
        "filename": "modules/rtp_rtcp/source/forward_error_correction.cc",
        "patchSetId": 3
      },
      "lineNbr": 36,
      "author": {
        "id": 5019
      },
      "writtenOn": "2019-09-19T16:41:13Z",
      "side": 1,
      "message": "personally prefer not to mention variable when using default constructor.",
      "range": {
        "startLine": 36,
        "startChar": 43,
        "endLine": 36,
        "endChar": 49
      },
      "revId": "6acb7e3ee88fb782b4b96a8504aeafd5769ed1ef",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "eee1f137_ce6a03d1",
        "filename": "modules/rtp_rtcp/source/forward_error_correction.cc",
        "patchSetId": 3
      },
      "lineNbr": 36,
      "author": {
        "id": 5117
      },
      "writtenOn": "2019-09-20T13:49:54Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "48d46e70_8bc880f5",
      "range": {
        "startLine": 36,
        "startChar": 43,
        "endLine": 36,
        "endChar": 49
      },
      "revId": "6acb7e3ee88fb782b4b96a8504aeafd5769ed1ef",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6426b95d_b0e1fddc",
        "filename": "modules/rtp_rtcp/source/ulpfec_receiver_impl.cc",
        "patchSetId": 3
      },
      "lineNbr": 190,
      "author": {
        "id": 5019
      },
      "writtenOn": "2019-09-19T16:41:13Z",
      "side": 1,
      "message": "const auto* (or better no auto at all: const uint8_t*)",
      "range": {
        "startLine": 190,
        "startChar": 6,
        "endLine": 190,
        "endChar": 11
      },
      "revId": "6acb7e3ee88fb782b4b96a8504aeafd5769ed1ef",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "10fbc403_31953ba5",
        "filename": "modules/rtp_rtcp/source/ulpfec_receiver_impl.cc",
        "patchSetId": 3
      },
      "lineNbr": 190,
      "author": {
        "id": 5117
      },
      "writtenOn": "2019-09-20T13:49:54Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6426b95d_b0e1fddc",
      "range": {
        "startLine": 190,
        "startChar": 6,
        "endLine": 190,
        "endChar": 11
      },
      "revId": "6acb7e3ee88fb782b4b96a8504aeafd5769ed1ef",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dec22ded_cefe37e4",
        "filename": "rtc_base/BUILD.gn",
        "patchSetId": 3
      },
      "lineNbr": 81,
      "author": {
        "id": 5087
      },
      "writtenOn": "2019-09-20T05:34:29Z",
      "side": 1,
      "message": "If this is not needed outside of WebRTC I suggest we create its own rtc_source_set (without visibility \u003d [ \"*\" ]).",
      "range": {
        "startLine": 80,
        "startChar": 4,
        "endLine": 81,
        "endChar": 34
      },
      "revId": "6acb7e3ee88fb782b4b96a8504aeafd5769ed1ef",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "95be01ff_d4f13d33",
        "filename": "rtc_base/BUILD.gn",
        "patchSetId": 3
      },
      "lineNbr": 81,
      "author": {
        "id": 5117
      },
      "writtenOn": "2019-09-20T13:49:54Z",
      "side": 1,
      "message": "Not relevant anymore.",
      "parentUuid": "dec22ded_cefe37e4",
      "range": {
        "startLine": 80,
        "startChar": 4,
        "endLine": 81,
        "endChar": 34
      },
      "revId": "6acb7e3ee88fb782b4b96a8504aeafd5769ed1ef",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b9914227_2d40477b",
        "filename": "rtc_base/copy_on_write_buffer_unittest.cc",
        "patchSetId": 3
      },
      "lineNbr": 323,
      "author": {
        "id": 5019
      },
      "writtenOn": "2019-09-19T16:41:13Z",
      "side": 1,
      "message": "TestCreateSlice -\u003e CreateSlice",
      "range": {
        "startLine": 323,
        "startChar": 26,
        "endLine": 323,
        "endChar": 36
      },
      "revId": "6acb7e3ee88fb782b4b96a8504aeafd5769ed1ef",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "66934a81_6d4867ab",
        "filename": "rtc_base/copy_on_write_buffer_unittest.cc",
        "patchSetId": 3
      },
      "lineNbr": 323,
      "author": {
        "id": 5019
      },
      "writtenOn": "2019-09-19T16:41:13Z",
      "side": 1,
      "message": "It is better to put test for new class into own file. Otherwise it would be harder to find them.",
      "range": {
        "startLine": 323,
        "startChar": 5,
        "endLine": 323,
        "endChar": 30
      },
      "revId": "6acb7e3ee88fb782b4b96a8504aeafd5769ed1ef",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "85b5ca5a_9585bc52",
        "filename": "rtc_base/copy_on_write_buffer_unittest.cc",
        "patchSetId": 3
      },
      "lineNbr": 323,
      "author": {
        "id": 5117
      },
      "writtenOn": "2019-09-20T13:49:54Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "66934a81_6d4867ab",
      "range": {
        "startLine": 323,
        "startChar": 5,
        "endLine": 323,
        "endChar": 30
      },
      "revId": "6acb7e3ee88fb782b4b96a8504aeafd5769ed1ef",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "55d97485_470fa1a0",
        "filename": "rtc_base/copy_on_write_buffer_unittest.cc",
        "patchSetId": 3
      },
      "lineNbr": 323,
      "author": {
        "id": 5117
      },
      "writtenOn": "2019-09-20T13:49:54Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b9914227_2d40477b",
      "range": {
        "startLine": 323,
        "startChar": 26,
        "endLine": 323,
        "endChar": 36
      },
      "revId": "6acb7e3ee88fb782b4b96a8504aeafd5769ed1ef",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "184733f4_c7343feb",
        "filename": "rtc_base/copy_on_write_buffer_unittest.cc",
        "patchSetId": 3
      },
      "lineNbr": 344,
      "author": {
        "id": 5019
      },
      "writtenOn": "2019-09-19T16:41:13Z",
      "side": 1,
      "message": "Doesnt",
      "range": {
        "startLine": 344,
        "startChar": 47,
        "endLine": 344,
        "endChar": 50
      },
      "revId": "6acb7e3ee88fb782b4b96a8504aeafd5769ed1ef",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "58f7d855_c4602f99",
        "filename": "rtc_base/copy_on_write_buffer_unittest.cc",
        "patchSetId": 3
      },
      "lineNbr": 344,
      "author": {
        "id": 5117
      },
      "writtenOn": "2019-09-20T13:49:54Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "184733f4_c7343feb",
      "range": {
        "startLine": 344,
        "startChar": 47,
        "endLine": 344,
        "endChar": 50
      },
      "revId": "6acb7e3ee88fb782b4b96a8504aeafd5769ed1ef",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "86bfb4f5_175fd46a",
        "filename": "rtc_base/copy_on_write_buffer_view.cc",
        "patchSetId": 3
      },
      "lineNbr": 12,
      "author": {
        "id": 5019
      },
      "writtenOn": "2019-09-19T16:41:13Z",
      "side": 1,
      "message": "personally prefer to have an empty line before #include section and namespace",
      "range": {
        "startLine": 12,
        "startChar": 0,
        "endLine": 12,
        "endChar": 9
      },
      "revId": "6acb7e3ee88fb782b4b96a8504aeafd5769ed1ef",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "22ee1a51_5ed0db03",
        "filename": "rtc_base/copy_on_write_buffer_view.cc",
        "patchSetId": 3
      },
      "lineNbr": 12,
      "author": {
        "id": 5117
      },
      "writtenOn": "2019-09-20T13:49:54Z",
      "side": 1,
      "message": "Removed this file.",
      "parentUuid": "86bfb4f5_175fd46a",
      "range": {
        "startLine": 12,
        "startChar": 0,
        "endLine": 12,
        "endChar": 9
      },
      "revId": "6acb7e3ee88fb782b4b96a8504aeafd5769ed1ef",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9894f72c_1268f961",
        "filename": "rtc_base/copy_on_write_buffer_view.cc",
        "patchSetId": 3
      },
      "lineNbr": 53,
      "author": {
        "id": 5019
      },
      "writtenOn": "2019-09-19T16:41:13Z",
      "side": 1,
      "message": "may be \noffset_ + new_size \u003e buffer_.size() ?",
      "range": {
        "startLine": 53,
        "startChar": 6,
        "endLine": 53,
        "endChar": 24
      },
      "revId": "6acb7e3ee88fb782b4b96a8504aeafd5769ed1ef",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "443e5304_bf0239a8",
        "filename": "rtc_base/copy_on_write_buffer_view.cc",
        "patchSetId": 3
      },
      "lineNbr": 53,
      "author": {
        "id": 5117
      },
      "writtenOn": "2019-09-20T13:49:54Z",
      "side": 1,
      "message": "Removed this file.",
      "parentUuid": "9894f72c_1268f961",
      "range": {
        "startLine": 53,
        "startChar": 6,
        "endLine": 53,
        "endChar": 24
      },
      "revId": "6acb7e3ee88fb782b4b96a8504aeafd5769ed1ef",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3bacaec4_7d422c78",
        "filename": "rtc_base/copy_on_write_buffer_view.h",
        "patchSetId": 3
      },
      "lineNbr": 20,
      "author": {
        "id": 5019
      },
      "writtenOn": "2019-09-19T16:41:13Z",
      "side": 1,
      "message": "View [like string_view, function_view, ....] suggest it is a reference class that doesn\u0027t own it\u0027s data.\n\nBut this class does. May be call it CopyOnWriteBufferSlice",
      "range": {
        "startLine": 20,
        "startChar": 23,
        "endLine": 20,
        "endChar": 27
      },
      "revId": "6acb7e3ee88fb782b4b96a8504aeafd5769ed1ef",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "386673c8_a8ca28df",
        "filename": "rtc_base/copy_on_write_buffer_view.h",
        "patchSetId": 3
      },
      "lineNbr": 20,
      "author": {
        "id": 5126
      },
      "writtenOn": "2019-09-20T02:30:19Z",
      "side": 1,
      "message": "+1 for the naming suggestion.\n\nHowever, I\u0027d also like to raise the option of baking this facility into CopyOnWriteBuffer instead of layering a separate class on top. It would just need an ArrayView data member to keep track of the selected slice, and all its read-only methods could use the ArrayView directly instead of having to dereference the buffer pointer.",
      "parentUuid": "3bacaec4_7d422c78",
      "range": {
        "startLine": 20,
        "startChar": 23,
        "endLine": 20,
        "endChar": 27
      },
      "revId": "6acb7e3ee88fb782b4b96a8504aeafd5769ed1ef",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0f742a7c_6108c344",
        "filename": "rtc_base/copy_on_write_buffer_view.h",
        "patchSetId": 3
      },
      "lineNbr": 20,
      "author": {
        "id": 5117
      },
      "writtenOn": "2019-09-20T13:49:54Z",
      "side": 1,
      "message": "Merged thid funcitonality into CopyOnWriteBuffer. However, having arrayView is not the best approach, since the underlying buffer_ may change due to some operations. This will make it hard to keep buffer_ and ArrayView synchronised. I\u0027ve instead added offset_ and size_ to CopyOnWriteBuffer.",
      "parentUuid": "386673c8_a8ca28df",
      "range": {
        "startLine": 20,
        "startChar": 23,
        "endLine": 20,
        "endChar": 27
      },
      "revId": "6acb7e3ee88fb782b4b96a8504aeafd5769ed1ef",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7e38f944_e0e8c99c",
        "filename": "rtc_base/copy_on_write_buffer_view.h",
        "patchSetId": 3
      },
      "lineNbr": 26,
      "author": {
        "id": 5019
      },
      "writtenOn": "2019-09-19T16:41:13Z",
      "side": 1,
      "message": "CopyOnWriteBufferView(const CopyOnWriteBufferView\u0026) \u003d default; ?",
      "range": {
        "startLine": 25,
        "startChar": 57,
        "endLine": 26,
        "endChar": 75
      },
      "revId": "6acb7e3ee88fb782b4b96a8504aeafd5769ed1ef",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8c6606b6_c2829c62",
        "filename": "rtc_base/copy_on_write_buffer_view.h",
        "patchSetId": 3
      },
      "lineNbr": 26,
      "author": {
        "id": 5117
      },
      "writtenOn": "2019-09-20T13:49:54Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "7e38f944_e0e8c99c",
      "range": {
        "startLine": 25,
        "startChar": 57,
        "endLine": 26,
        "endChar": 75
      },
      "revId": "6acb7e3ee88fb782b4b96a8504aeafd5769ed1ef",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b6de16a0_6b7b6d5f",
        "filename": "rtc_base/copy_on_write_buffer_view.h",
        "patchSetId": 3
      },
      "lineNbr": 27,
      "author": {
        "id": 5019
      },
      "writtenOn": "2019-09-19T16:41:13Z",
      "side": 1,
      "message": "https://google.github.io/styleguide/cppguide.html#General_Naming_Rules\n\n\"Do not abbreviate by deleting letters within a word\"\n\nprefer to spell full name (buffer)",
      "range": {
        "startLine": 27,
        "startChar": 58,
        "endLine": 27,
        "endChar": 61
      },
      "revId": "6acb7e3ee88fb782b4b96a8504aeafd5769ed1ef",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b611dfa3_6a9a343c",
        "filename": "rtc_base/copy_on_write_buffer_view.h",
        "patchSetId": 3
      },
      "lineNbr": 27,
      "author": {
        "id": 5117
      },
      "writtenOn": "2019-09-20T13:49:54Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "b6de16a0_6b7b6d5f",
      "range": {
        "startLine": 27,
        "startChar": 58,
        "endLine": 27,
        "endChar": 61
      },
      "revId": "6acb7e3ee88fb782b4b96a8504aeafd5769ed1ef",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a878fd40_25ab03f2",
        "filename": "rtc_base/copy_on_write_buffer_view.h",
        "patchSetId": 3
      },
      "lineNbr": 29,
      "author": {
        "id": 5019
      },
      "writtenOn": "2019-09-19T16:41:13Z",
      "side": 1,
      "message": "May be skip move constructor/assign operator.\n\nhttps://google.github.io/styleguide/cppguide.html#Copy_Constructors\n\n\"Move operations for copyable types are strictly a performance optimization and are a potential source of bugs and complexity, so avoid defining them unless they are significantly more efficient than the corresponding copy operations.\"",
      "range": {
        "startLine": 29,
        "startChar": 2,
        "endLine": 29,
        "endChar": 43
      },
      "revId": "6acb7e3ee88fb782b4b96a8504aeafd5769ed1ef",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c486b0d5_c6a67a3a",
        "filename": "rtc_base/copy_on_write_buffer_view.h",
        "patchSetId": 3
      },
      "lineNbr": 37,
      "author": {
        "id": 5019
      },
      "writtenOn": "2019-09-19T16:41:13Z",
      "side": 1,
      "message": "may be do not have this one too.\n\nif you do, since this is not a move constructor, consider pass COWBuffer by value instead of my Rvalue reference.\n\nhttps://google.github.io/styleguide/cppguide.html#Rvalue_references",
      "revId": "6acb7e3ee88fb782b4b96a8504aeafd5769ed1ef",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9b729a80_3be91669",
        "filename": "rtc_base/copy_on_write_buffer_view.h",
        "patchSetId": 3
      },
      "lineNbr": 37,
      "author": {
        "id": 5117
      },
      "writtenOn": "2019-09-20T13:49:54Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "c486b0d5_c6a67a3a",
      "revId": "6acb7e3ee88fb782b4b96a8504aeafd5769ed1ef",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9f174473_352d9397",
        "filename": "rtc_base/copy_on_write_buffer_view.h",
        "patchSetId": 3
      },
      "lineNbr": 40,
      "author": {
        "id": 5019
      },
      "writtenOn": "2019-09-19T16:41:13Z",
      "side": 1,
      "message": "what is the reason for having it as static function instead of [inlined] constructor?",
      "range": {
        "startLine": 40,
        "startChar": 2,
        "endLine": 40,
        "endChar": 39
      },
      "revId": "6acb7e3ee88fb782b4b96a8504aeafd5769ed1ef",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e16e8bcc_40ba3a99",
        "filename": "rtc_base/copy_on_write_buffer_view.h",
        "patchSetId": 3
      },
      "lineNbr": 40,
      "author": {
        "id": 5117
      },
      "writtenOn": "2019-09-20T13:49:54Z",
      "side": 1,
      "message": "Not relevant anymore, as this class is removed now.",
      "parentUuid": "9f174473_352d9397",
      "range": {
        "startLine": 40,
        "startChar": 2,
        "endLine": 40,
        "endChar": 39
      },
      "revId": "6acb7e3ee88fb782b4b96a8504aeafd5769ed1ef",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "19a27b0d_d6547367",
        "filename": "rtc_base/copy_on_write_buffer_view.h",
        "patchSetId": 3
      },
      "lineNbr": 44,
      "author": {
        "id": 5126
      },
      "writtenOn": "2019-09-20T02:30:19Z",
      "side": 1,
      "message": "Isn\u0027t this exactly what the compiler would do anyway?",
      "revId": "6acb7e3ee88fb782b4b96a8504aeafd5769ed1ef",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1691471d_27b0e921",
        "filename": "rtc_base/copy_on_write_buffer_view.h",
        "patchSetId": 3
      },
      "lineNbr": 44,
      "author": {
        "id": 5117
      },
      "writtenOn": "2019-09-20T13:49:54Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "19a27b0d_d6547367",
      "revId": "6acb7e3ee88fb782b4b96a8504aeafd5769ed1ef",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "794c431c_72b9daee",
        "filename": "rtc_base/copy_on_write_buffer_view.h",
        "patchSetId": 3
      },
      "lineNbr": 62,
      "author": {
        "id": 5019
      },
      "writtenOn": "2019-09-19T16:41:13Z",
      "side": 1,
      "message": "may be you do not need to copy it. e.g.\n\nCowBuffer original \u003d \u003csomething\u003e\nCowBufferSlice slice(original, 1, 3);\n// destroy original.\nslice has single reference now. Can modify the data without need for copy.\n\n[but if it is complicated, do not bother. shrinking has it\u0027s value too.]",
      "range": {
        "startLine": 62,
        "startChar": 4,
        "endLine": 62,
        "endChar": 16
      },
      "revId": "6acb7e3ee88fb782b4b96a8504aeafd5769ed1ef",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c132947f_f762a392",
        "filename": "rtc_base/copy_on_write_buffer_view.h",
        "patchSetId": 3
      },
      "lineNbr": 62,
      "author": {
        "id": 5126
      },
      "writtenOn": "2019-09-20T02:30:19Z",
      "side": 1,
      "message": "Also, you do a second check + possible duplication in the data() call on line 65. It would be easier to write this efficiently if you didn\u0027t have two separate classes.",
      "parentUuid": "794c431c_72b9daee",
      "range": {
        "startLine": 62,
        "startChar": 4,
        "endLine": 62,
        "endChar": 16
      },
      "revId": "6acb7e3ee88fb782b4b96a8504aeafd5769ed1ef",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "86adf42f_9c5e2416",
        "filename": "rtc_base/copy_on_write_buffer_view.h",
        "patchSetId": 3
      },
      "lineNbr": 62,
      "author": {
        "id": 5117
      },
      "writtenOn": "2019-09-20T13:49:54Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c132947f_f762a392",
      "range": {
        "startLine": 62,
        "startChar": 4,
        "endLine": 62,
        "endChar": 16
      },
      "revId": "6acb7e3ee88fb782b4b96a8504aeafd5769ed1ef",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6e717b40_8cc3cb6a",
        "filename": "rtc_base/copy_on_write_buffer_view.h",
        "patchSetId": 3
      },
      "lineNbr": 99,
      "author": {
        "id": 5019
      },
      "writtenOn": "2019-09-19T16:41:13Z",
      "side": 1,
      "message": "\u003d default; ?\n\nalso, may be put assign operator between constructors and destructor:\nhttps://google.github.io/styleguide/cppguide.html#Declaration_Order",
      "range": {
        "startLine": 91,
        "startChar": 69,
        "endLine": 99,
        "endChar": 3
      },
      "revId": "6acb7e3ee88fb782b4b96a8504aeafd5769ed1ef",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "439ee7f9_7e803f7b",
        "filename": "rtc_base/copy_on_write_buffer_view.h",
        "patchSetId": 3
      },
      "lineNbr": 99,
      "author": {
        "id": 5117
      },
      "writtenOn": "2019-09-20T13:49:54Z",
      "side": 1,
      "message": "Removed this file.",
      "parentUuid": "6e717b40_8cc3cb6a",
      "range": {
        "startLine": 91,
        "startChar": 69,
        "endLine": 99,
        "endChar": 3
      },
      "revId": "6acb7e3ee88fb782b4b96a8504aeafd5769ed1ef",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "27ffc113_6a8c3294",
        "filename": "rtc_base/copy_on_write_buffer_view.h",
        "patchSetId": 3
      },
      "lineNbr": 101,
      "author": {
        "id": 5019
      },
      "writtenOn": "2019-09-19T16:41:13Z",
      "side": 1,
      "message": "same as with constructor - \nprefer to pass by values rather by rvalue reference",
      "range": {
        "startLine": 101,
        "startChar": 52,
        "endLine": 101,
        "endChar": 54
      },
      "revId": "6acb7e3ee88fb782b4b96a8504aeafd5769ed1ef",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "41eba623_4c63c8b1",
        "filename": "rtc_base/copy_on_write_buffer_view.h",
        "patchSetId": 3
      },
      "lineNbr": 101,
      "author": {
        "id": 5117
      },
      "writtenOn": "2019-09-20T13:49:54Z",
      "side": 1,
      "message": "Removed this file.",
      "parentUuid": "27ffc113_6a8c3294",
      "range": {
        "startLine": 101,
        "startChar": 52,
        "endLine": 101,
        "endChar": 54
      },
      "revId": "6acb7e3ee88fb782b4b96a8504aeafd5769ed1ef",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "035d6f05_f40de51b",
        "filename": "rtc_base/copy_on_write_buffer_view.h",
        "patchSetId": 3
      },
      "lineNbr": 120,
      "author": {
        "id": 5019
      },
      "writtenOn": "2019-09-19T16:41:13Z",
      "side": 1,
      "message": "Is there plan to use the compare operators?\nmay be do not add them until there is use case for those.",
      "range": {
        "startLine": 120,
        "startChar": 7,
        "endLine": 120,
        "endChar": 17
      },
      "revId": "6acb7e3ee88fb782b4b96a8504aeafd5769ed1ef",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2e879111_27defe9d",
        "filename": "rtc_base/copy_on_write_buffer_view.h",
        "patchSetId": 3
      },
      "lineNbr": 120,
      "author": {
        "id": 5117
      },
      "writtenOn": "2019-09-20T13:49:54Z",
      "side": 1,
      "message": "Removed this file.",
      "parentUuid": "035d6f05_f40de51b",
      "range": {
        "startLine": 120,
        "startChar": 7,
        "endLine": 120,
        "endChar": 17
      },
      "revId": "6acb7e3ee88fb782b4b96a8504aeafd5769ed1ef",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "60dbd5ea_4fe9ee7e",
        "filename": "rtc_base/copy_on_write_buffer_view.h",
        "patchSetId": 3
      },
      "lineNbr": 134,
      "author": {
        "id": 5019
      },
      "writtenOn": "2019-09-19T16:41:13Z",
      "side": 1,
      "message": "that would work:\nslice \u003d\u003d cow_buffer.\nthis wouldn\u0027t:\ncow_buffer \u003d\u003d slice.\n\nYou can make it work by making compare operator free functions:\nfriend bool operator\u003d\u003d(const Slice\u0026 lhs, const Slice\u0026 rhs) { ... }\nfriend bool operator\u003d\u003d(const Slice\u0026 lhs, const CowBuffer\u0026 rhs) { ... }\nfriend bool operator\u003d\u003d(const CowBuffer\u0026 lhs, const Slice\u0026 rhs) { ... }\n\n[another option is to add single compare operator here and a single one to CowBuffer:\nbool operator\u003d\u003d(absl::Span\u003cconst uint8_t\u003e buffer) const {\n  return size() \u003d\u003d buffer.size() \u0026\u0026 memcmp(data(), buffer.data(), size()) \u003d\u003d 0;\n}",
      "range": {
        "startLine": 134,
        "startChar": 2,
        "endLine": 134,
        "endChar": 55
      },
      "revId": "6acb7e3ee88fb782b4b96a8504aeafd5769ed1ef",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "598bf8a7_6a269f05",
        "filename": "rtc_base/copy_on_write_buffer_view.h",
        "patchSetId": 3
      },
      "lineNbr": 134,
      "author": {
        "id": 5126
      },
      "writtenOn": "2019-09-20T02:30:19Z",
      "side": 1,
      "message": "+1 for making comparison operators free functions---that\u0027s the prettiest way to do almost all binary operators IMO. But also +1 for not defining them unless we actually need them.",
      "parentUuid": "60dbd5ea_4fe9ee7e",
      "range": {
        "startLine": 134,
        "startChar": 2,
        "endLine": 134,
        "endChar": 55
      },
      "revId": "6acb7e3ee88fb782b4b96a8504aeafd5769ed1ef",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5a8829a0_4589f005",
        "filename": "rtc_base/copy_on_write_buffer_view.h",
        "patchSetId": 3
      },
      "lineNbr": 134,
      "author": {
        "id": 5117
      },
      "writtenOn": "2019-09-20T13:49:54Z",
      "side": 1,
      "message": "Removed this file.",
      "parentUuid": "598bf8a7_6a269f05",
      "range": {
        "startLine": 134,
        "startChar": 2,
        "endLine": 134,
        "endChar": 55
      },
      "revId": "6acb7e3ee88fb782b4b96a8504aeafd5769ed1ef",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d9ceb8ad_43773879",
        "filename": "rtc_base/copy_on_write_buffer_view.h",
        "patchSetId": 3
      },
      "lineNbr": 137,
      "author": {
        "id": 5019
      },
      "writtenOn": "2019-09-19T16:41:13Z",
      "side": 1,
      "message": "for symmetric may be use size() accessor instead of accessing length_ member directly.",
      "range": {
        "startLine": 137,
        "startChar": 4,
        "endLine": 137,
        "endChar": 30
      },
      "revId": "6acb7e3ee88fb782b4b96a8504aeafd5769ed1ef",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0125544d_3f26ebaf",
        "filename": "rtc_base/copy_on_write_buffer_view.h",
        "patchSetId": 3
      },
      "lineNbr": 137,
      "author": {
        "id": 5117
      },
      "writtenOn": "2019-09-20T13:49:54Z",
      "side": 1,
      "message": "Removed this file.",
      "parentUuid": "d9ceb8ad_43773879",
      "range": {
        "startLine": 137,
        "startChar": 4,
        "endLine": 137,
        "endChar": 30
      },
      "revId": "6acb7e3ee88fb782b4b96a8504aeafd5769ed1ef",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e23af72a_e9faf620",
        "filename": "rtc_base/copy_on_write_buffer_view.h",
        "patchSetId": 3
      },
      "lineNbr": 165,
      "author": {
        "id": 5019
      },
      "writtenOn": "2019-09-19T16:41:13Z",
      "side": 1,
      "message": "may be just \u0027Slice\u0027 (this function doesn\u0027t Get what already there, it creates the slice)",
      "range": {
        "startLine": 165,
        "startChar": 24,
        "endLine": 165,
        "endChar": 27
      },
      "revId": "6acb7e3ee88fb782b4b96a8504aeafd5769ed1ef",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "839d4660_d23b5a5e",
        "filename": "rtc_base/copy_on_write_buffer_view.h",
        "patchSetId": 3
      },
      "lineNbr": 165,
      "author": {
        "id": 5117
      },
      "writtenOn": "2019-09-20T13:49:54Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e23af72a_e9faf620",
      "range": {
        "startLine": 165,
        "startChar": 24,
        "endLine": 165,
        "endChar": 27
      },
      "revId": "6acb7e3ee88fb782b4b96a8504aeafd5769ed1ef",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "676f1edb_306aee00",
        "filename": "rtc_base/copy_on_write_buffer_view.h",
        "patchSetId": 3
      },
      "lineNbr": 168,
      "author": {
        "id": 5019
      },
      "writtenOn": "2019-09-19T16:41:13Z",
      "side": 1,
      "message": "const?",
      "range": {
        "startLine": 168,
        "startChar": 30,
        "endLine": 168,
        "endChar": 31
      },
      "revId": "6acb7e3ee88fb782b4b96a8504aeafd5769ed1ef",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6f6a687b_f2ed3d40",
        "filename": "rtc_base/copy_on_write_buffer_view.h",
        "patchSetId": 3
      },
      "lineNbr": 168,
      "author": {
        "id": 5019
      },
      "writtenOn": "2019-09-19T16:41:13Z",
      "side": 1,
      "message": "alternative \u0027more standard\u0027 spelling is to define conversion operator (but make it explicit: https://google.github.io/styleguide/cppguide.html#Implicit_Conversions)\n\nbut I wouldn\u0027t insist.\n\nexplicit operator CopyOnWriteBuffer() const;",
      "range": {
        "startLine": 168,
        "startChar": 20,
        "endLine": 168,
        "endChar": 28
      },
      "revId": "6acb7e3ee88fb782b4b96a8504aeafd5769ed1ef",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "700cc274_ffc12f49",
        "filename": "rtc_base/copy_on_write_buffer_view.h",
        "patchSetId": 3
      },
      "lineNbr": 168,
      "author": {
        "id": 5117
      },
      "writtenOn": "2019-09-20T13:49:54Z",
      "side": 1,
      "message": "Removed this file.",
      "parentUuid": "676f1edb_306aee00",
      "range": {
        "startLine": 168,
        "startChar": 30,
        "endLine": 168,
        "endChar": 31
      },
      "revId": "6acb7e3ee88fb782b4b96a8504aeafd5769ed1ef",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4b07d966_d13d5396",
        "filename": "rtc_base/copy_on_write_buffer_view.h",
        "patchSetId": 3
      },
      "lineNbr": 189,
      "author": {
        "id": 5126
      },
      "writtenOn": "2019-09-20T02:30:19Z",
      "side": 1,
      "message": "Replace with\n\n  offset_ \u003c\u003d buffer_.size() \u0026\u0026 offset_ + length_ \u003c\u003d buffer_.size()\n\nExercise: What bad state would go undetected otherwise?\n\nAlso, do you need special casing for zero length slices? Should buffer_.size() always be 0 if length_ \u003d\u003d 0?",
      "revId": "6acb7e3ee88fb782b4b96a8504aeafd5769ed1ef",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "759c8d28_41b283f1",
        "filename": "rtc_base/copy_on_write_buffer_view.h",
        "patchSetId": 3
      },
      "lineNbr": 189,
      "author": {
        "id": 5117
      },
      "writtenOn": "2019-09-20T13:49:54Z",
      "side": 1,
      "message": "Done in COWBuffer now.\n\nDid you mean overflow as a bad state, since all of values are size_t?\nIt still can happen if size() is close to max value, offset_ is a little less and length_ is also big.",
      "parentUuid": "4b07d966_d13d5396",
      "revId": "6acb7e3ee88fb782b4b96a8504aeafd5769ed1ef",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0c35131b_6052e1c7",
        "filename": "test/fuzzers/ulpfec_header_reader_fuzzer.cc",
        "patchSetId": 3
      },
      "lineNbr": 28,
      "author": {
        "id": 5019
      },
      "writtenOn": "2019-09-19T16:41:13Z",
      "side": 1,
      "message": "may be instead add EnsureCapacity function to the Slice",
      "range": {
        "startLine": 28,
        "startChar": 45,
        "endLine": 28,
        "endChar": 67
      },
      "revId": "6acb7e3ee88fb782b4b96a8504aeafd5769ed1ef",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "876fe5a7_3e7b1d39",
        "filename": "test/fuzzers/ulpfec_header_reader_fuzzer.cc",
        "patchSetId": 3
      },
      "lineNbr": 28,
      "author": {
        "id": 5117
      },
      "writtenOn": "2019-09-20T13:49:54Z",
      "side": 1,
      "message": "Reverted.",
      "parentUuid": "0c35131b_6052e1c7",
      "range": {
        "startLine": 28,
        "startChar": 45,
        "endLine": 28,
        "endChar": 67
      },
      "revId": "6acb7e3ee88fb782b4b96a8504aeafd5769ed1ef",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    }
  ]
}