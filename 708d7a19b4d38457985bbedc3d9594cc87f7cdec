{
  "comments": [
    {
      "key": {
        "uuid": "26941f3d_0cf663f5",
        "filename": "modules/rtp_rtcp/include/rtp_rtcp_defines.h",
        "patchSetId": 7
      },
      "lineNbr": 222,
      "author": {
        "id": 5019
      },
      "writtenOn": "2020-05-11T15:03:58Z",
      "side": 1,
      "message": "would you find it safer to do other way around?\nenum class { ... }\nconstexpr size_t kNumMediaTypes \u003d static_cast\u003csize_t\u003e(kPadding) + 1;",
      "range": {
        "startLine": 222,
        "startChar": 2,
        "endLine": 222,
        "endChar": 31
      },
      "revId": "708d7a19b4d38457985bbedc3d9594cc87f7cdec",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bf6a5918_b7161bd5",
        "filename": "modules/rtp_rtcp/include/rtp_rtcp_defines.h",
        "patchSetId": 7
      },
      "lineNbr": 394,
      "author": {
        "id": 5019
      },
      "writtenOn": "2020-05-11T15:03:58Z",
      "side": 1,
      "message": "dark magic... but I do not see cleaner solution.\n\nAlternative I see (doubt it is better) is to privately use inheritance:\n\npublic:\n // public section can be exactly same as it is now:\n DataRate\u0026 operator[](RtpPacketMediaType type) { return send_rates_[size_t{type}]; }\n\nprivate:\n class DefaultConstructableDataRate : public DataRate {\n  public:\n   DefuaultConstructableDataRate() : DataRate(DataRate::Zero()) {}\n   using DataRate::DataRate;\n };\n std::array\u003cDefaultConstructableDataRate, kNumMediaTypes\u003e send_rates_;",
      "range": {
        "startLine": 390,
        "startChar": 0,
        "endLine": 394,
        "endChar": 3
      },
      "revId": "708d7a19b4d38457985bbedc3d9594cc87f7cdec",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b160a7f6_5aa7137a",
        "filename": "modules/rtp_rtcp/include/rtp_rtcp_defines.h",
        "patchSetId": 7
      },
      "lineNbr": 401,
      "author": {
        "id": 5019
      },
      "writtenOn": "2020-05-11T15:03:58Z",
      "side": 1,
      "message": "Why do you need this constructor?",
      "range": {
        "startLine": 400,
        "startChar": 2,
        "endLine": 401,
        "endChar": 29
      },
      "revId": "708d7a19b4d38457985bbedc3d9594cc87f7cdec",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2ba8e19c_1430e07c",
        "filename": "modules/rtp_rtcp/include/rtp_rtcp_defines.h",
        "patchSetId": 7
      },
      "lineNbr": 402,
      "author": {
        "id": 5019
      },
      "writtenOn": "2020-05-11T15:03:58Z",
      "side": 1,
      "message": "it is nice to also mention assignment operator:\nRtpSendRates\u0026 operator\u003d(const RtpSendRates\u0026) \u003d default;",
      "range": {
        "startLine": 402,
        "startChar": 2,
        "endLine": 402,
        "endChar": 50
      },
      "revId": "708d7a19b4d38457985bbedc3d9594cc87f7cdec",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4d78cba0_0cf4d2e5",
        "filename": "modules/rtp_rtcp/include/rtp_rtcp_defines.h",
        "patchSetId": 7
      },
      "lineNbr": 403,
      "author": {
        "id": 5019
      },
      "writtenOn": "2020-05-11T15:03:58Z",
      "side": 1,
      "message": "no need in move constructor since it is not more efficient than the copy.",
      "range": {
        "startLine": 403,
        "startChar": 2,
        "endLine": 403,
        "endChar": 45
      },
      "revId": "708d7a19b4d38457985bbedc3d9594cc87f7cdec",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2d89e993_8f8fd4e7",
        "filename": "modules/rtp_rtcp/include/rtp_rtcp_defines.h",
        "patchSetId": 7
      },
      "lineNbr": 406,
      "author": {
        "id": 5019
      },
      "writtenOn": "2020-05-11T15:03:58Z",
      "side": 1,
      "message": "Does it work to write \"size_t{type}\" here?\n\nhttps://google.github.io/styleguide/cppguide.html#Casting\n\"Use brace initialization to convert arithmetic types (e.g. int64_t{x}). This is the safest approach because code will not compile if conversion can result in information loss.\"",
      "range": {
        "startLine": 406,
        "startChar": 23,
        "endLine": 406,
        "endChar": 48
      },
      "revId": "708d7a19b4d38457985bbedc3d9594cc87f7cdec",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "277a53f4_6f314937",
        "filename": "modules/rtp_rtcp/source/rtp_sender_egress.cc",
        "patchSetId": 7
      },
      "lineNbr": 453,
      "author": {
        "id": 5019
      },
      "writtenOn": "2020-05-11T15:03:58Z",
      "side": 1,
      "message": "if you do not expose the type, might as well remove the variable that is used once:\nsend_rates_[*packet.packet_type()].Update(packet.size(), now_ms);",
      "range": {
        "startLine": 453,
        "startChar": 2,
        "endLine": 453,
        "endChar": 7
      },
      "revId": "708d7a19b4d38457985bbedc3d9594cc87f7cdec",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    }
  ]
}