{
  "comments": [
    {
      "key": {
        "uuid": "f7aaba6a_1677ea39",
        "filename": "api/test/video_quality_test_fixture.h",
        "patchSetId": 2
      },
      "lineNbr": 88,
      "author": {
        "id": 5126
      },
      "writtenOn": "2018-08-23T09:02:06Z",
      "side": 1,
      "message": "Maybe replace the second sentence with \"Must be nullopt if `sender_network` and `receiver_network` are non-null.\"\n\nThird sentence: \"May be nullopt even if `sender_network` and `receiver_network` are null; in that case, a default config will be used.\" Or did I misunderstand?",
      "revId": "149232776e9ac5c8ddab5fe7f2f37ed7759b24a4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "77e17334_dee0f134",
        "filename": "api/test/video_quality_test_fixture.h",
        "patchSetId": 2
      },
      "lineNbr": 88,
      "author": {
        "id": 6337
      },
      "writtenOn": "2018-08-23T11:09:19Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f7aaba6a_1677ea39",
      "revId": "149232776e9ac5c8ddab5fe7f2f37ed7759b24a4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e188f9e8_b0f4a39e",
        "filename": "api/test/video_quality_test_fixture.h",
        "patchSetId": 2
      },
      "lineNbr": 95,
      "author": {
        "id": 5126
      },
      "writtenOn": "2018-08-23T09:02:06Z",
      "side": 1,
      "message": "Suggested shared comment for both line 92 and 95: \"Simulations of sender and receiver networks. They must either both be null (in which case `config` is used), or both be non-null (in which case `config` must be nullopt).\"",
      "revId": "149232776e9ac5c8ddab5fe7f2f37ed7759b24a4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7ffbf306_ea97b0ce",
        "filename": "api/test/video_quality_test_fixture.h",
        "patchSetId": 2
      },
      "lineNbr": 95,
      "author": {
        "id": 6337
      },
      "writtenOn": "2018-08-23T11:09:19Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e188f9e8_b0f4a39e",
      "revId": "149232776e9ac5c8ddab5fe7f2f37ed7759b24a4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c33aedfc_568adec0",
        "filename": "video/video_quality_test.cc",
        "patchSetId": 2
      },
      "lineNbr": 76,
      "author": {
        "id": 5531
      },
      "writtenOn": "2018-08-23T09:05:04Z",
      "side": 1,
      "message": "This seems questionable. The underlying code will rightly assume that it has ownership of the underlying implementation (meaning that it safely can assume that is not destroyed and that it can destroy the underlying object at any time), but this will be a false assumption.\n\nI think it\u0027s better to reconsider if the interfaces are correct. There are some options that we could consider.\n\nMaybe the interface should not transfer ownership and we should instead provide a raw pointer to the underlying layers? That way ownership is moved to where it seems to belong. This is more or less equivalent to the wrapper solution, but makes it more apparent and removes one level of indirection (making it easier to debug and understand).\n\nIf we want to support both having ownership only in FakeNetworkPipe and having it outside we can use a shared pointer (I\u0027d prefer the std version, but others might argue for the rtc version).",
      "range": {
        "startLine": 72,
        "startChar": 0,
        "endLine": 76,
        "endChar": 31
      },
      "revId": "149232776e9ac5c8ddab5fe7f2f37ed7759b24a4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a17ab7e3_bb871696",
        "filename": "video/video_quality_test.cc",
        "patchSetId": 2
      },
      "lineNbr": 76,
      "author": {
        "id": 6337
      },
      "writtenOn": "2018-08-23T11:09:19Z",
      "side": 1,
      "message": "As I understand shared pointers currently forbidden by style guide and using scoped pointer requires additional actions from implementor. \n\nAs I understand FakeNetworkPipe is used not only in video quality test pipeline, but also in other parts, so it is why I was aware of changing ownership there and wanted to keep it as before if possible. \n\nAssumption, that object will be alive during pipeline execution because of ownership holding is not absolutely wrong, because fake pipeline usually created on per test basis and it is test writer responsibility to keep configuration and implementation objects alive, during test run, otherwise it will look weird, that test writer want to run test, but want to destroy simulation, that is part of test. So underlying layers can still believe that object will be alive during whole life cycle.",
      "parentUuid": "c33aedfc_568adec0",
      "range": {
        "startLine": 72,
        "startChar": 0,
        "endLine": 76,
        "endChar": 31
      },
      "revId": "149232776e9ac5c8ddab5fe7f2f37ed7759b24a4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "07af8705_1d130fca",
        "filename": "video/video_quality_test.cc",
        "patchSetId": 2
      },
      "lineNbr": 76,
      "author": {
        "id": 5531
      },
      "writtenOn": "2018-08-23T12:00:17Z",
      "side": 1,
      "message": "Shared pointers aren\u0027t forbidden, but shared ownership is discouraged since it\u0027s often easier to reason about code with clear ownership. I agree that we shouldn\u0027t need it here though.\n\nI don\u0027t think we need to try to preserve the FakeNetworkPipe interface, it seems reasonable to keep ownership of the NetworkSimulation outside. It is already a common pattern to keep a raw pointer to the simulation to allow changing the config or retrieve simulation specific stats. Those cases would just keep a unique pointer and share a raw pointer instead and would be clearer by such a change.\n\nIn the other cases we can either add an extra member or create a version/subclass of FakeNetworkPipe that also holds ownership and we can choose which one to use depending on where we want the ownership.",
      "parentUuid": "a17ab7e3_bb871696",
      "range": {
        "startLine": 72,
        "startChar": 0,
        "endLine": 76,
        "endChar": 31
      },
      "revId": "149232776e9ac5c8ddab5fe7f2f37ed7759b24a4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5035a8ec_27e83f06",
        "filename": "video/video_quality_test.cc",
        "patchSetId": 2
      },
      "lineNbr": 76,
      "author": {
        "id": 6337
      },
      "writtenOn": "2018-08-23T12:05:57Z",
      "side": 1,
      "message": "I can check, how it will be to remove ownership from FakeNetworkPipe. But it won\u0027t affect any public API and I think it is better to make it as separate step, that looks independent to this CL. If it will work, it will remove this wrapper and user-provided simulations will be passed directly into underlying pipeline.",
      "parentUuid": "07af8705_1d130fca",
      "range": {
        "startLine": 72,
        "startChar": 0,
        "endLine": 76,
        "endChar": 31
      },
      "revId": "149232776e9ac5c8ddab5fe7f2f37ed7759b24a4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4db14712_f2381853",
        "filename": "video/video_quality_test.cc",
        "patchSetId": 2
      },
      "lineNbr": 76,
      "author": {
        "id": 5126
      },
      "writtenOn": "2018-08-23T12:16:09Z",
      "side": 1,
      "message": "std::shared_ptr is forbidden here: https://chromium-cpp.appspot.com/#library-blacklist\n\nIn my opinion, accepting interfaces by unique_ptr and working around that by a wrapper like this is not a bad idea, provided the wrapper is only needed for testing. It\u0027s nice if test code is clean and simple, but not at the expense of making production code less robust.",
      "parentUuid": "5035a8ec_27e83f06",
      "range": {
        "startLine": 72,
        "startChar": 0,
        "endLine": 76,
        "endChar": 31
      },
      "revId": "149232776e9ac5c8ddab5fe7f2f37ed7759b24a4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6b0413e3_00a18ad7",
        "filename": "video/video_quality_test.cc",
        "patchSetId": 2
      },
      "lineNbr": 77,
      "author": {
        "id": 5126
      },
      "writtenOn": "2018-08-23T09:02:06Z",
      "side": 1,
      "message": "This class can be final, right?",
      "revId": "149232776e9ac5c8ddab5fe7f2f37ed7759b24a4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "544225b7_503b4900",
        "filename": "video/video_quality_test.cc",
        "patchSetId": 2
      },
      "lineNbr": 77,
      "author": {
        "id": 6337
      },
      "writtenOn": "2018-08-23T11:10:48Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6b0413e3_00a18ad7",
      "revId": "149232776e9ac5c8ddab5fe7f2f37ed7759b24a4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d65668d0_090dbfac",
        "filename": "video/video_quality_test.cc",
        "patchSetId": 2
      },
      "lineNbr": 84,
      "author": {
        "id": 5126
      },
      "writtenOn": "2018-08-23T09:02:06Z",
      "side": 1,
      "message": "This formatting looks off. Did you run `git cl format`?",
      "range": {
        "startLine": 84,
        "startChar": 55,
        "endLine": 84,
        "endChar": 65
      },
      "revId": "149232776e9ac5c8ddab5fe7f2f37ed7759b24a4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9b7c3f24_60a7ae17",
        "filename": "video/video_quality_test.cc",
        "patchSetId": 2
      },
      "lineNbr": 84,
      "author": {
        "id": 6337
      },
      "writtenOn": "2018-08-23T11:09:19Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d65668d0_090dbfac",
      "range": {
        "startLine": 84,
        "startChar": 55,
        "endLine": 84,
        "endChar": 65
      },
      "revId": "149232776e9ac5c8ddab5fe7f2f37ed7759b24a4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    }
  ]
}