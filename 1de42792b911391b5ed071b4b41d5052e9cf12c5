{
  "comments": [
    {
      "key": {
        "uuid": "c6b4a01d_e8f3d76b",
        "filename": "api/media_transport_interface.h",
        "patchSetId": 9
      },
      "lineNbr": 63,
      "author": {
        "id": 5234
      },
      "writtenOn": "2019-03-15T07:24:09Z",
      "side": 1,
      "message": "Consider not using optional for these, but use default values \n\nmin_bitrate \u003d 0;\nmax_bitrate \u003d appropriate huge or infinite value",
      "range": {
        "startLine": 62,
        "startChar": 0,
        "endLine": 63,
        "endChar": 39
      },
      "revId": "1de42792b911391b5ed071b4b41d5052e9cf12c5",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a0dd1c87_c5016e96",
        "filename": "api/media_transport_interface.h",
        "patchSetId": 9
      },
      "lineNbr": 63,
      "author": {
        "id": 7704
      },
      "writtenOn": "2019-03-15T14:02:27Z",
      "side": 1,
      "message": "Cannot, because sometimes you want to update \"starting bitrate\" but not the other two, or vice versa (that\u0027s the assumption in existing code). Added a comment.\n\nOther places assume \"-1\" as \"do not update\", I prefer it to be clearly optional - if provided, it\u0027s an update; if not provided, it\u0027s not updated.\n\n\nAdded comment: \n// If the value is provided, the constraint is updated.\n// If the value is omitted, the value is left unchanged.",
      "parentUuid": "c6b4a01d_e8f3d76b",
      "range": {
        "startLine": 62,
        "startChar": 0,
        "endLine": 63,
        "endChar": 39
      },
      "revId": "1de42792b911391b5ed071b4b41d5052e9cf12c5",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1ca39cc7_8d095aa1",
        "filename": "media/engine/webrtc_video_engine.cc",
        "patchSetId": 9
      },
      "lineNbr": 730,
      "author": {
        "id": 5531
      },
      "writtenOn": "2019-03-15T08:42:17Z",
      "side": 1,
      "message": "As I understand it, the reason we call SetSdpBitrateParameters below is to be backwards compatible with the old way of configuring global bitrate limits via SDP. This isn\u0027t really something we\u0027d want to continue doing as they don\u0027t make that much sense given the other options. Is this something we really need to have for media transport? It would simplify the code a lot to avoid this (since the SDP config needs to be synchronized with the application config, and in turn, this has to be merged with the bitrate allocator config for the final limits.",
      "range": {
        "startLine": 730,
        "startChar": 25,
        "endLine": 730,
        "endChar": 47
      },
      "revId": "1de42792b911391b5ed071b4b41d5052e9cf12c5",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0211a2f7_9d7d54f9",
        "filename": "media/engine/webrtc_video_engine.cc",
        "patchSetId": 9
      },
      "lineNbr": 730,
      "author": {
        "id": 7704
      },
      "writtenOn": "2019-03-15T14:02:27Z",
      "side": 1,
      "message": "My take is: RTP Transport will need it, so yes, media transport needs it for backwards compatibility. We don\u0027t need it at this point, as I don\u0027t believe the application that we care about uses it (at this point) (though i didn\u0027t check how is the x-google-max-bitrate propagated down).\n\nAre you saying that we should still call the call_-\u003eGetTransportControllerSend()-\u003eSetSdpBitrateParameters() to synchornize it with the application config?\n\nAnyway, if RTP doesn\u0027t need it, we should remove it. If RTP needs it for backwards compatibility, we should add it to media transport -- because we would like to, eventually, move RTP to the media transport interface (though it\u0027s under discussion whether that will happen soon).",
      "parentUuid": "1ca39cc7_8d095aa1",
      "range": {
        "startLine": 730,
        "startChar": 25,
        "endLine": 730,
        "endChar": 47
      },
      "revId": "1de42792b911391b5ed071b4b41d5052e9cf12c5",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "64ccf7d6_e9254108",
        "filename": "media/engine/webrtc_video_engine_unittest.cc",
        "patchSetId": 9
      },
      "lineNbr": 3904,
      "author": {
        "id": 5531
      },
      "writtenOn": "2019-03-15T08:44:38Z",
      "side": 1,
      "message": "Why can\u0027t we use a mock here?",
      "revId": "1de42792b911391b5ed071b4b41d5052e9cf12c5",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4d973ed9_abca448b",
        "filename": "media/engine/webrtc_video_engine_unittest.cc",
        "patchSetId": 9
      },
      "lineNbr": 3904,
      "author": {
        "id": 7704
      },
      "writtenOn": "2019-03-15T14:02:27Z",
      "side": 1,
      "message": "Why is using a mock better? If you don\u0027t have a class already, yes, mock is typically better. But if you have a class, is it really better?\n\nI like the readability of the current approach more, than the mock in the other one.\n\nFor example, mock makes it a bit weird because you assert first, and then execute. In here, you setup, act, assert -- which is a more common pattern in tests :)",
      "parentUuid": "64ccf7d6_e9254108",
      "revId": "1de42792b911391b5ed071b4b41d5052e9cf12c5",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    }
  ]
}