{
  "comments": [
    {
      "key": {
        "uuid": "b194262f_e60e8968",
        "filename": "common_video/video_frame_buffer.cc",
        "patchSetId": 1
      },
      "lineNbr": 219,
      "author": {
        "id": 5234
      },
      "writtenOn": "2018-12-20T14:17:37Z",
      "side": 1,
      "message": "Please don\u0027t; the MutableDataV() accessor should be available on the types intended to be mutable.",
      "range": {
        "startLine": 219,
        "startChar": 25,
        "endLine": 219,
        "endChar": 63
      },
      "revId": "bce0c8529687b245e905cfda1fa39733eeb76d0e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "004e7be5_62388899",
        "filename": "common_video/video_frame_buffer.cc",
        "patchSetId": 1
      },
      "lineNbr": 219,
      "author": {
        "id": 5117
      },
      "writtenOn": "2018-12-20T14:48:09Z",
      "side": 1,
      "message": "Sadly, there\u0027s no MutableData for PlanarBuffers. I can add it, will it suffice?",
      "parentUuid": "b194262f_e60e8968",
      "range": {
        "startLine": 219,
        "startChar": 25,
        "endLine": 219,
        "endChar": 63
      },
      "revId": "bce0c8529687b245e905cfda1fa39733eeb76d0e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "70ea08ca_2a75b007",
        "filename": "common_video/video_frame_buffer.cc",
        "patchSetId": 1
      },
      "lineNbr": 219,
      "author": {
        "id": 5234
      },
      "writtenOn": "2018-12-20T15:08:56Z",
      "side": 1,
      "message": "I really don\u0027t think it\u0027s appropriate. The same VideoFrameBuffer may be passed to several users (that\u0027s why it\u0027s reference counted). You must know you\u0027re the exclusive owner of the frame buffer before you modify it, and the easy way to be sure of that is to create a fresh I420Buffer.\n\nSo the component that wants to do this copying must own the canvas it is drawing to, and if it uses a I420Buffer to represent the canvas, the MutableData* methods are available.\n\nI can see some possible optimizations, but for a start, I would recommend to keep an I420Buffer as a canvas that is exclusively owned and drawn into. And to minimize surprises downstream the pipeline, make a copy (I420Buffer::Copy) when passing it downstream as an immutable frame buffer.",
      "parentUuid": "004e7be5_62388899",
      "range": {
        "startLine": 219,
        "startChar": 25,
        "endLine": 219,
        "endChar": 63
      },
      "revId": "bce0c8529687b245e905cfda1fa39733eeb76d0e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2a343f91_96ab0a6b",
        "filename": "common_video/video_frame_buffer.cc",
        "patchSetId": 1
      },
      "lineNbr": 219,
      "author": {
        "id": 5117
      },
      "writtenOn": "2018-12-20T15:14:24Z",
      "side": 1,
      "message": "That changed buffer would be owned by webrtc videoframe sink, that\u0027s was an idea from the beginning. I\u0027ll do as you recommend.",
      "parentUuid": "70ea08ca_2a75b007",
      "range": {
        "startLine": 219,
        "startChar": 25,
        "endLine": 219,
        "endChar": 63
      },
      "revId": "bce0c8529687b245e905cfda1fa39733eeb76d0e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "390d5108_c906f89c",
        "filename": "common_video/video_frame_buffer.cc",
        "patchSetId": 1
      },
      "lineNbr": 225,
      "author": {
        "id": 5234
      },
      "writtenOn": "2018-12-20T14:17:37Z",
      "side": 1,
      "message": "Prefer libyuv copying functions, and destination frame buffers with plain layout. E.g., the clever uv interleaving layout produced when converting android textures to I420 works fine to read from, but will likely break when written to.",
      "range": {
        "startLine": 225,
        "startChar": 4,
        "endLine": 225,
        "endChar": 10
      },
      "revId": "bce0c8529687b245e905cfda1fa39733eeb76d0e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c7b220af_a67cc8f2",
        "filename": "common_video/video_frame_buffer.cc",
        "patchSetId": 1
      },
      "lineNbr": 225,
      "author": {
        "id": 5117
      },
      "writtenOn": "2018-12-20T14:48:09Z",
      "side": 1,
      "message": "As per offline discussion, the memcpy is done per each row of the image separately, so it will work in any layout. Also, I didn\u0027t find any libyuv functions for this copying in the middle of the image.",
      "parentUuid": "390d5108_c906f89c",
      "range": {
        "startLine": 225,
        "startChar": 4,
        "endLine": 225,
        "endChar": 10
      },
      "revId": "bce0c8529687b245e905cfda1fa39733eeb76d0e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    }
  ]
}