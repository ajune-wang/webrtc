{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "8ef02387_95603c91",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 5634
      },
      "writtenOn": "2024-12-04T20:32:55Z",
      "side": 1,
      "message": "Not much commentary on the code, but given that I like to nit, I\u0027ll just do it...",
      "revId": "46bdcec4978f741db31d32ce148a009c63529cc7",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5546ec69_5efa86bd",
        "filename": "p2p/dtls/dtls_utils.cc",
        "patchSetId": 4
      },
      "lineNbr": 46,
      "author": {
        "id": 5634
      },
      "writtenOn": "2024-12-04T20:32:55Z",
      "side": 1,
      "message": "rtc::ArrayView\u003cuint8_t\u003e u? Or just use payload directly? It has an [] operator with appropriate RTC_DCHECK.\nAny time I see a naked pointer, I see a potential OOB access....",
      "revId": "46bdcec4978f741db31d32ce148a009c63529cc7",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e198c496_74fd6eba",
        "filename": "p2p/dtls/dtls_utils.cc",
        "patchSetId": 4
      },
      "lineNbr": 46,
      "author": {
        "id": 3350241
      },
      "writtenOn": "2024-12-04T23:26:20Z",
      "side": 1,
      "message": "copy-paste from existing code but done because that is better!",
      "parentUuid": "5546ec69_5efa86bd",
      "revId": "46bdcec4978f741db31d32ce148a009c63529cc7",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0da8565c_cc5183cc",
        "filename": "p2p/dtls/dtls_utils.h",
        "patchSetId": 4
      },
      "lineNbr": 30,
      "author": {
        "id": 5634
      },
      "writtenOn": "2024-12-04T20:32:55Z",
      "side": 1,
      "message": "Is this the right return? Should it instead be RTCErrorOr\u003cstd::vector\u003cuint16_t\u003e\u003e, giving you a better path to reporting why it failed?\nOr is diagnosing failures never interesting?",
      "revId": "46bdcec4978f741db31d32ce148a009c63529cc7",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e2e00f16_165fecd7",
        "filename": "p2p/dtls/dtls_utils.h",
        "patchSetId": 4
      },
      "lineNbr": 30,
      "author": {
        "id": 3350241
      },
      "writtenOn": "2024-12-04T23:26:20Z",
      "side": 1,
      "message": "I only use RTCError when we communicate something up to an API call (from its description: \"Roughly corresponds to RTCError in the web api\"). Since we do not get that the only way to discover what went wrong is native logging anyway.",
      "parentUuid": "0da8565c_cc5183cc",
      "revId": "46bdcec4978f741db31d32ce148a009c63529cc7",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4588fdd2_5105d466",
        "filename": "p2p/dtls/dtls_utils.h",
        "patchSetId": 4
      },
      "lineNbr": 30,
      "author": {
        "id": 5634
      },
      "writtenOn": "2024-12-04T23:39:12Z",
      "side": 1,
      "message": "I think C++23 is expecting us to use std::expected in this kind of case. There are other such constructs in other places, but I tend to go for RTCError, since it\u0027s a common paradigm in the code. But won\u0027t insist.",
      "parentUuid": "e2e00f16_165fecd7",
      "revId": "46bdcec4978f741db31d32ce148a009c63529cc7",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9289faf5_d764bf50",
        "filename": "p2p/dtls/dtls_utils_unittest.cc",
        "patchSetId": 4
      },
      "lineNbr": 142,
      "author": {
        "id": 5634
      },
      "writtenOn": "2024-12-04T20:32:55Z",
      "side": 1,
      "message": "Can you add some tests on invalid data?",
      "revId": "46bdcec4978f741db31d32ce148a009c63529cc7",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b8c7ceb0_c6285bda",
        "filename": "p2p/dtls/dtls_utils_unittest.cc",
        "patchSetId": 4
      },
      "lineNbr": 142,
      "author": {
        "id": 3350241
      },
      "writtenOn": "2024-12-04T23:26:20Z",
      "side": 1,
      "message": "Can I resist a chance to use 0xde, 0xad, 0xbe, 0xef? No!\nI\u0027ll take a stab at a fuzzer once the related linux build woes (the issue disappeared?!) are resolved.",
      "parentUuid": "9289faf5_d764bf50",
      "revId": "46bdcec4978f741db31d32ce148a009c63529cc7",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ed67eed3_8d7a2a97",
        "filename": "p2p/dtls/dtls_utils_unittest.cc",
        "patchSetId": 4
      },
      "lineNbr": 142,
      "author": {
        "id": 5634
      },
      "writtenOn": "2024-12-04T23:39:12Z",
      "side": 1,
      "message": ":-)",
      "parentUuid": "b8c7ceb0_c6285bda",
      "revId": "46bdcec4978f741db31d32ce148a009c63529cc7",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    }
  ]
}