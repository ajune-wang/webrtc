{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "68c92648_700460f8",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5234
      },
      "writtenOn": "2021-08-20T12:59:01Z",
      "side": 1,
      "message": "Adding Taylor, I think you\u0027re more familiar with the conventions and assumptions around the signals from the socket servers.\n\nLonger term, I *really* want to see the fake ssl code deleted.",
      "revId": "1e3547c01d3d3fd5f808ee97decaea47dd826a24",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "17f46ff0_03483b8d",
        "filename": "rtc_base/socket_adapters.cc",
        "patchSetId": 1
      },
      "lineNbr": 187,
      "author": {
        "id": 5508
      },
      "writtenOn": "2021-08-20T09:23:09Z",
      "side": 1,
      "message": "I\u0027m worried that this could introduce unwanted side effects. Consider code like this:\n\n  void MyOnConnectedHandler() {\n    SignalConnectEvent();  // triggers a call to OnConnectEvent.\n    connected_ \u003d true;\n  }\n  \nIf inside SignalConnectEvent() we call Close, signal the \u0027close event\u0027 etc, then when we get back to MyOnConnectedHandler, we would end up setting connected_ to true, which would be incorrect.\n\nI can\u0027t find an example of this though, but recursive state notifications feel potentially problematic.",
      "revId": "1e3547c01d3d3fd5f808ee97decaea47dd826a24",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b03ee4a8_cf4b7c8e",
        "filename": "rtc_base/socket_adapters.cc",
        "patchSetId": 1
      },
      "lineNbr": 187,
      "author": {
        "id": 5234
      },
      "writtenOn": "2021-08-20T09:32:36Z",
      "side": 1,
      "message": "Is it different from the Close+Signal code below, in ProcessInput, which is called from OnReadEvent, which is connected to SignalReadEvent?\n\nAs far as I understand, these signals are sent from one of the socket servers, but I don\u0027t know their exact requirements and expectations.\n\nI would also expect that the SignalCloseEvent is wired upwards in the (networking) stack, reaching different code than the source of the SignalConnectEvent which is below in the stack.",
      "parentUuid": "17f46ff0_03483b8d",
      "revId": "1e3547c01d3d3fd5f808ee97decaea47dd826a24",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6b4201a2_50690677",
        "filename": "rtc_base/socket_adapters.cc",
        "patchSetId": 1
      },
      "lineNbr": 187,
      "author": {
        "id": 5508
      },
      "writtenOn": "2021-08-20T12:39:02Z",
      "side": 1,
      "message": "doesn\u0027t look different. Interesting to see that if len is smaller than sizeof(kSslClientHello) there, then the call is silently ignored.\n\nBut even if there\u0027s an example of doing this below, there\u0027s also an example of where such patterns could be problematic (and that we should perhaps not repeat that pattern). Consider the \"FIX\" comment following the SignalConnectEvent() call.",
      "parentUuid": "b03ee4a8_cf4b7c8e",
      "revId": "1e3547c01d3d3fd5f808ee97decaea47dd826a24",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1474b5af_70a8ae8e",
        "filename": "rtc_base/socket_adapters.cc",
        "patchSetId": 1
      },
      "lineNbr": 187,
      "author": {
        "id": 5234
      },
      "writtenOn": "2021-08-20T12:59:01Z",
      "side": 1,
      "message": "\u003e Interesting to see that if len is smaller than sizeof(kSslClientHello) there, then the call is silently ignored.\n\nIf this comment is about below ProcessInput, my guess is that it will be called again after more data has been read into the buffer.\n\n\u003e But even if there\u0027s an example of doing this below, there\u0027s also an example of where such patterns could be problematic (and that we should perhaps not repeat that pattern). \n\nSo what do you suggest? I see to alternatives that are reasonable to me:\n\n1. Completely ignore return value of DirectSend. In case there\u0027s a network error, that will be detected on next use anyway.\n\n2. Keep the Close+Signal error handling in the current cl. Since these are all internal interfaces, related to the socket servers, maybe we can trust our tests to tell if it works, and detect if later refactoring would violate current assumptions?\n\n\u003e Consider the \"FIX\" comment following the SignalConnectEvent() call.\n\nThat makes me uneasy too.",
      "parentUuid": "6b4201a2_50690677",
      "revId": "1e3547c01d3d3fd5f808ee97decaea47dd826a24",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "43ee340c_910eb8a1",
        "filename": "rtc_base/socket_adapters.cc",
        "patchSetId": 1
      },
      "lineNbr": 187,
      "author": {
        "id": 5508
      },
      "writtenOn": "2021-08-20T13:01:45Z",
      "side": 1,
      "message": "I\u0027d say I\u0027m 60/40 for option number #1 ðŸ˜Š\nThat is, ignore the return value of DirectSend.",
      "parentUuid": "1474b5af_70a8ae8e",
      "revId": "1e3547c01d3d3fd5f808ee97decaea47dd826a24",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7574a56d_eceaa976",
        "filename": "rtc_base/socket_adapters.cc",
        "patchSetId": 1
      },
      "lineNbr": 187,
      "author": {
        "id": 5053
      },
      "writtenOn": "2021-08-20T21:00:32Z",
      "side": 1,
      "message": "I don\u0027t think Tommi\u0027s original concern is an issue. PhysicalSocketServer sets its \"connected\" state before calling SignalConnectEvent: https://source.chromium.org/chromium/chromium/src/+/main:third_party/webrtc/rtc_base/physical_socket_server.cc;l\u003d767;drc\u003dd0b88797705cfc6c1d60ad325d1923f326f10de1\n\nAnd in general is written in such a way that callbacks can modify the socket without issue.\n\nThis could be a theoretical issue for non-PhysicalSocket implementations, but I don\u0027t expect there will be any.",
      "parentUuid": "43ee340c_910eb8a1",
      "revId": "1e3547c01d3d3fd5f808ee97decaea47dd826a24",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "82f353f0_08342947",
        "filename": "rtc_base/socket_adapters.cc",
        "patchSetId": 1
      },
      "lineNbr": 187,
      "author": {
        "id": 5508
      },
      "writtenOn": "2021-08-20T21:06:11Z",
      "side": 1,
      "message": "I didn\u0027t think that it was an issue, but I do think that it\u0027s the kind of thing that could easily regress. And if it does, it\u0027s not exactly obvious from the code what\u0027s going on. Basically I\u0027d prefer to avoid this sort of a pattern.\n\nHowever, if you\u0027re both fine with this as is, I\u0027m good too.",
      "parentUuid": "7574a56d_eceaa976",
      "revId": "1e3547c01d3d3fd5f808ee97decaea47dd826a24",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    }
  ]
}