{
  "comments": [
    {
      "key": {
        "uuid": "fdc645ba_02be9dd7",
        "filename": "PRESUBMIT.py",
        "patchSetId": 3
      },
      "lineNbr": 415,
      "author": {
        "id": 5531
      },
      "writtenOn": "2018-03-15T10:45:32Z",
      "side": 1,
      "message": "Does DefaultGnProject really belong to gn_refs? Maybe gn_refs should be something more generic, like gn_api?",
      "range": {
        "startLine": 415,
        "startChar": 24,
        "endLine": 415,
        "endChar": 40
      },
      "revId": "24b44ba77cee35c4a214eda354cffd57d0f89925",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d4d5464d_c213e345",
        "filename": "PRESUBMIT.py",
        "patchSetId": 3
      },
      "lineNbr": 415,
      "author": {
        "id": 5087
      },
      "writtenOn": "2018-03-15T14:06:07Z",
      "side": 1,
      "message": "Yes, you are right. I was tempted to unify gn_refs together with gn_check (https://webrtc.googlesource.com/src/+/master/tools_webrtc/presubmit_checks_lib/gn_check.py) in  gn_api but I decided to refactor it in a follow up CL because it will pollute this CL too much. :)",
      "parentUuid": "fdc645ba_02be9dd7",
      "range": {
        "startLine": 415,
        "startChar": 24,
        "endLine": 415,
        "endChar": 40
      },
      "revId": "24b44ba77cee35c4a214eda354cffd57d0f89925",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c32d89f8_52e6416c",
        "filename": "PRESUBMIT.py",
        "patchSetId": 3
      },
      "lineNbr": 439,
      "author": {
        "id": 5531
      },
      "writtenOn": "2018-03-15T10:45:32Z",
      "side": 1,
      "message": "is_cpp_file?",
      "range": {
        "startLine": 439,
        "startChar": 2,
        "endLine": 439,
        "endChar": 13
      },
      "revId": "24b44ba77cee35c4a214eda354cffd57d0f89925",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "714bc353_f12c18a9",
        "filename": "PRESUBMIT.py",
        "patchSetId": 3
      },
      "lineNbr": 439,
      "author": {
        "id": 5087
      },
      "writtenOn": "2018-03-15T14:06:07Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c32d89f8_52e6416c",
      "range": {
        "startLine": 439,
        "startChar": 2,
        "endLine": 439,
        "endChar": 13
      },
      "revId": "24b44ba77cee35c4a214eda354cffd57d0f89925",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0dec8ace_cdc7b33d",
        "filename": "PRESUBMIT.py",
        "patchSetId": 3
      },
      "lineNbr": 440,
      "author": {
        "id": 5027
      },
      "writtenOn": "2018-03-15T13:24:43Z",
      "side": 1,
      "message": "Hmm. I doubt it\u0027s worth running a gn gen just to be a bit more granular. That\u0027s probably quite a few seconds of execution time on every presubmit.\n\nIsn\u0027t it enough to just look for *test* in affected filenames? That will not catch every issue but most of them.",
      "range": {
        "startLine": 440,
        "startChar": 7,
        "endLine": 440,
        "endChar": 25
      },
      "revId": "24b44ba77cee35c4a214eda354cffd57d0f89925",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e53c21cf_7d42e825",
        "filename": "PRESUBMIT.py",
        "patchSetId": 3
      },
      "lineNbr": 440,
      "author": {
        "id": 5531
      },
      "writtenOn": "2018-03-15T13:31:09Z",
      "side": 1,
      "message": "Typically you would not want to have these kinds of defines in the unittests themselves but in some shared helper file, or you\u0027d get name collisions. Currently we don\u0027t always have \"test\" in the filename for all files only used in test targets. So we should probably add that as a naming rule in our style guidelines if we want the check to be conditioned on this.",
      "parentUuid": "0dec8ace_cdc7b33d",
      "range": {
        "startLine": 440,
        "startChar": 7,
        "endLine": 440,
        "endChar": 25
      },
      "revId": "24b44ba77cee35c4a214eda354cffd57d0f89925",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a49df27a_f3ba6a2f",
        "filename": "PRESUBMIT.py",
        "patchSetId": 3
      },
      "lineNbr": 440,
      "author": {
        "id": 5087
      },
      "writtenOn": "2018-03-15T14:06:07Z",
      "side": 1,
      "message": "Yes, I asked Sebastian about checking the name but as he explained, that is not enough. I prefer to rely on GN and avoid to introduce a new naming rule (which can be sidestepped).\n\nOn my machine \"gn gen out/Default\" takes only 283ms. Please also consider that https://webrtc.googlesource.com/src/+/master/PRESUBMIT.py#496 is already running an identical \u0027gn gen\u0027.\n\nI can refactor PRESUBMIT.py to share the generated GN project among presubmit checks, but I would like to do it in another CL.",
      "parentUuid": "e53c21cf_7d42e825",
      "range": {
        "startLine": 440,
        "startChar": 7,
        "endLine": 440,
        "endChar": 25
      },
      "revId": "24b44ba77cee35c4a214eda354cffd57d0f89925",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a99b9e50_6f66fb11",
        "filename": "PRESUBMIT.py",
        "patchSetId": 3
      },
      "lineNbr": 440,
      "author": {
        "id": 5025
      },
      "writtenOn": "2018-03-15T14:16:46Z",
      "side": 1,
      "message": "No, but presubmits don\u0027t have to be perfect. A false positive is just annoying, it\u0027s hardly a showstopper. When you say \"these kinds of defines\", what do you mean?\n\nAll right, if it\u0027s that fast it\u0027s fine to do it (and you don\u0027t have to share the generated project). Will it be this fast in the future, though? I question if this kind of complexity is warranted for the problem we\u0027re solving. That depends on how common it is with stringstream usage in test library code, I guess.",
      "parentUuid": "a49df27a_f3ba6a2f",
      "range": {
        "startLine": 440,
        "startChar": 7,
        "endLine": 440,
        "endChar": 25
      },
      "revId": "24b44ba77cee35c4a214eda354cffd57d0f89925",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1d81023b_e42f21cf",
        "filename": "PRESUBMIT.py",
        "patchSetId": 3
      },
      "lineNbr": 440,
      "author": {
        "id": 5087
      },
      "writtenOn": "2018-03-15T14:34:54Z",
      "side": 1,
      "message": "\u003e All right, if it\u0027s that fast it\u0027s fine to do it (and you don\u0027t have to share the generated project). Will it be this fast in the future, though? I question if this kind of complexity is warranted for the problem we\u0027re solving. That depends on how common it is with stringstream usage in test library code, I guess.\n\nYes, I think it will remain fast also in the future (consider that on Chromium it takes ~2.5 seconds but Chromium is really big compared to WebRTC). I think it is safe to assume this will stay under 500ms for a lot of time. :)\n\nIn this case it is a good investment because we don\u0027t want to add any new stream to production code but we want to allow them in test code and we want to do it reliably.",
      "parentUuid": "a99b9e50_6f66fb11",
      "range": {
        "startLine": 440,
        "startChar": 7,
        "endLine": 440,
        "endChar": 25
      },
      "revId": "24b44ba77cee35c4a214eda354cffd57d0f89925",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d2013893_41137ee8",
        "filename": "tools_webrtc/presubmit_checks_lib/gn_refs.py",
        "patchSetId": 3
      },
      "lineNbr": 25,
      "author": {
        "id": 5531
      },
      "writtenOn": "2018-03-15T10:45:32Z",
      "side": 1,
      "message": "An OO design of this could be:\nclass DefaultGnProject:\n  ...\n  def BelongsToTestTarget(file_path):\n    ...",
      "range": {
        "startLine": 25,
        "startChar": 4,
        "endLine": 25,
        "endChar": 20
      },
      "revId": "24b44ba77cee35c4a214eda354cffd57d0f89925",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "44fd9b22_3187a5a0",
        "filename": "tools_webrtc/presubmit_checks_lib/gn_refs.py",
        "patchSetId": 3
      },
      "lineNbr": 25,
      "author": {
        "id": 5087
      },
      "writtenOn": "2018-03-15T14:06:07Z",
      "side": 1,
      "message": "Yes, in the future gn_api I plan to make this a context manager class which owns the resource (the temp folder) and I will add BelongsToTestTarget and probably IsGnCheckCorrect.\n\nFor now I would like to keep is slim with this version of the context manager, but sure, this will be refactored soon.",
      "parentUuid": "d2013893_41137ee8",
      "range": {
        "startLine": 25,
        "startChar": 4,
        "endLine": 25,
        "endChar": 20
      },
      "revId": "24b44ba77cee35c4a214eda354cffd57d0f89925",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e43b4536_7b99ff2d",
        "filename": "tools_webrtc/presubmit_checks_lib/gn_refs.py",
        "patchSetId": 3
      },
      "lineNbr": 25,
      "author": {
        "id": 5025
      },
      "writtenOn": "2018-03-15T14:16:46Z",
      "side": 1,
      "message": "Just having functions is entirely fine in python. A class doesn\u0027t make sense IMO because it has no state to encapsulate anyway.",
      "parentUuid": "44fd9b22_3187a5a0",
      "range": {
        "startLine": 25,
        "startChar": 4,
        "endLine": 25,
        "endChar": 20
      },
      "revId": "24b44ba77cee35c4a214eda354cffd57d0f89925",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a804e1c1_d15e1d7b",
        "filename": "tools_webrtc/presubmit_checks_lib/gn_refs.py",
        "patchSetId": 3
      },
      "lineNbr": 25,
      "author": {
        "id": 5531
      },
      "writtenOn": "2018-03-15T14:43:15Z",
      "side": 1,
      "message": "Well, it does encapsulate the state of having an output directory, right? Currently captured by the contextmanager decorator.",
      "parentUuid": "e43b4536_7b99ff2d",
      "range": {
        "startLine": 25,
        "startChar": 4,
        "endLine": 25,
        "endChar": 20
      },
      "revId": "24b44ba77cee35c4a214eda354cffd57d0f89925",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ef2414fc_42f5b638",
        "filename": "tools_webrtc/presubmit_checks_lib/gn_refs.py",
        "patchSetId": 3
      },
      "lineNbr": 25,
      "author": {
        "id": 5087
      },
      "writtenOn": "2018-03-15T14:54:59Z",
      "side": 1,
      "message": "In Python it is fine to have contextmanagers like this one (actually it is the best way to manage resources). They automate everything without having to write the class code.\n\nI was thinking to make it a real class implementing the contextmanager interface (__enter__, __exit__) in order to unify all the presubmit code that uses GN under a unique class.",
      "parentUuid": "a804e1c1_d15e1d7b",
      "range": {
        "startLine": 25,
        "startChar": 4,
        "endLine": 25,
        "endChar": 20
      },
      "revId": "24b44ba77cee35c4a214eda354cffd57d0f89925",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "89aecd00_f22eaa5b",
        "filename": "tools_webrtc/presubmit_checks_lib/gn_refs.py",
        "patchSetId": 3
      },
      "lineNbr": 69,
      "author": {
        "id": 5531
      },
      "writtenOn": "2018-03-15T10:45:32Z",
      "side": 1,
      "message": "This could be made more obvious by doing an actual check for what the expected non-true value would be. (An empty string?)",
      "range": {
        "startLine": 69,
        "startChar": 14,
        "endLine": 69,
        "endChar": 20
      },
      "revId": "24b44ba77cee35c4a214eda354cffd57d0f89925",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9765942b_171140eb",
        "filename": "tools_webrtc/presubmit_checks_lib/gn_refs.py",
        "patchSetId": 3
      },
      "lineNbr": 69,
      "author": {
        "id": 5087
      },
      "writtenOn": "2018-03-15T14:06:07Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "89aecd00_f22eaa5b",
      "range": {
        "startLine": 69,
        "startChar": 14,
        "endLine": 69,
        "endChar": 20
      },
      "revId": "24b44ba77cee35c4a214eda354cffd57d0f89925",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    }
  ]
}