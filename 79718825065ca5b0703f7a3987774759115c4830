{
  "comments": [
    {
      "key": {
        "uuid": "18fe65ad_6ec476f5",
        "filename": "call/call.cc",
        "patchSetId": 3
      },
      "lineNbr": 242,
      "author": {
        "id": 7565
      },
      "writtenOn": "2018-12-05T20:23:53Z",
      "side": 1,
      "message": "Do you need a wrapper only because you use the same TargetTransferRateObserver interface for media transport and internal WebRTC? Maybe it\u0027s time to separate them and fold this code into call.cc?",
      "revId": "79718825065ca5b0703f7a3987774759115c4830",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5d334241_dff917c9",
        "filename": "call/call.cc",
        "patchSetId": 3
      },
      "lineNbr": 242,
      "author": {
        "id": 7704
      },
      "writtenOn": "2018-12-05T20:32:48Z",
      "side": 1,
      "message": "There are 4 designs to address existing problem that I can think of\n1) Add \u0027RemoveTargetRateObserver\u0027 on the RtpTransportControllerSendInterface. This approach was disliked before, and in general we don\u0027t want to give a way to unregister the observer from transport.\n2) create a wrapper that allows you to stop listening, and hook up it to the RtpTransportControllerSendInterface, and disable when needed. This is the current approach.\n3) create new callback interface to identify the source, and ignore the rate callbacks from RtpTransportControllerSendInterface when media transport is used (but still subscribe to it)\n4) Instead of creating a new callback, add a \u0027caller\u0027 parameter to the callback (void OnTargetTransferRate(void* sender, TargetTransferRate msg) and use that to disambiguate caller.\n\nI think 3 and 4 are almost equivalent. I am not a huge fan of 3, because we would introduce a new interface just for the sake of identifying the caller. It sounds like a wrong abstraction. (4) may look a bit weird in c++ (but is a frequently used pattern in other languages).\n\nI decided to go with (2) because it\u0027s\n1) simple\n2) safe\n3) doesn\u0027t modify existing RtpTransportControllerSendInterface \n4) it can be done in one commit :-)",
      "parentUuid": "18fe65ad_6ec476f5",
      "revId": "79718825065ca5b0703f7a3987774759115c4830",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "619d2990_5b59c004",
        "filename": "call/call.cc",
        "patchSetId": 3
      },
      "lineNbr": 242,
      "author": {
        "id": 7565
      },
      "writtenOn": "2018-12-05T20:53:22Z",
      "side": 1,
      "message": "Remember that we also reschedule Call::OnTargetTransferRate from media transport because media transport does not call OnTargetTransferRate on required thread.\n\nSo we have 2 major differences in how OnTargetTransferRate handled from RTP and media transport:\n\n- When we start listening.\n- Threading model\n\nAnd we solve them in completely difference places. It works, but I think this code maybe be harder to understand / refactor later compared to options (3) and (4) that you mentioned above.\n\nYes, adding new interface may not be optimal, but as we see these two callbacks have somewhat different protocols. In this case I think separate name is not as bad.",
      "parentUuid": "5d334241_dff917c9",
      "revId": "79718825065ca5b0703f7a3987774759115c4830",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "35269577_cf620dca",
        "filename": "call/call.cc",
        "patchSetId": 3
      },
      "lineNbr": 257,
      "author": {
        "id": 5599
      },
      "writtenOn": "2018-12-05T19:22:17Z",
      "side": 1,
      "message": "Do we think it\u0027s actually performance-sensitive enough to warrant double-checked locking?\n\nMy bias is toward keeping things simple unless a benchmark or profile demonstrates an issue.",
      "revId": "79718825065ca5b0703f7a3987774759115c4830",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "213c6c57_70f91ffe",
        "filename": "call/call.cc",
        "patchSetId": 3
      },
      "lineNbr": 257,
      "author": {
        "id": 7565
      },
      "writtenOn": "2018-12-05T20:23:53Z",
      "side": 1,
      "message": "+1",
      "parentUuid": "35269577_cf620dca",
      "revId": "79718825065ca5b0703f7a3987774759115c4830",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e4119ea6_1e5c5d15",
        "filename": "call/call.cc",
        "patchSetId": 3
      },
      "lineNbr": 257,
      "author": {
        "id": 7704
      },
      "writtenOn": "2018-12-05T20:26:59Z",
      "side": 1,
      "message": "No, it\u0027s just a habit -- why locking when you don\u0027t need to. Removed double-checked locking then.",
      "parentUuid": "35269577_cf620dca",
      "revId": "79718825065ca5b0703f7a3987774759115c4830",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5af7b509_41e5d42c",
        "filename": "call/call.cc",
        "patchSetId": 3
      },
      "lineNbr": 257,
      "author": {
        "id": 7565
      },
      "writtenOn": "2018-12-05T20:43:16Z",
      "side": 1,
      "message": "Now it\u0027s a race, because you do not take lock. Please annotate is_enabled_ as protected by is_enabled_crit_ if you are not using atomics.",
      "parentUuid": "e4119ea6_1e5c5d15",
      "revId": "79718825065ca5b0703f7a3987774759115c4830",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "38625009_568b1558",
        "filename": "call/call.cc",
        "patchSetId": 3
      },
      "lineNbr": 257,
      "author": {
        "id": 7704
      },
      "writtenOn": "2018-12-05T20:53:23Z",
      "side": 1,
      "message": "It is annotated, isn\u0027t it? Are you looking at the patchset 4?\n\n    bool is_enabled_ RTC_GUARDED_BY(is_enabled_crit_) \u003d true;",
      "parentUuid": "5af7b509_41e5d42c",
      "revId": "79718825065ca5b0703f7a3987774759115c4830",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b446ba51_9b7717cf",
        "filename": "call/call.cc",
        "patchSetId": 3
      },
      "lineNbr": 271,
      "author": {
        "id": 5599
      },
      "writtenOn": "2018-12-05T19:22:17Z",
      "side": 1,
      "message": "Please note that this must only transition from true to false, and if it ever does the opposite, OnTargetTransferRate needs to be rewritten to avoid dropping notifications.",
      "range": {
        "startLine": 270,
        "startChar": 4,
        "endLine": 271,
        "endChar": 40
      },
      "revId": "79718825065ca5b0703f7a3987774759115c4830",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "18682e33_175ef189",
        "filename": "call/call.cc",
        "patchSetId": 3
      },
      "lineNbr": 271,
      "author": {
        "id": 7704
      },
      "writtenOn": "2018-12-05T20:26:59Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b446ba51_9b7717cf",
      "range": {
        "startLine": 270,
        "startChar": 4,
        "endLine": 271,
        "endChar": 40
      },
      "revId": "79718825065ca5b0703f7a3987774759115c4830",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "34e02a76_08f78224",
        "filename": "call/call.cc",
        "patchSetId": 3
      },
      "lineNbr": 272,
      "author": {
        "id": 5599
      },
      "writtenOn": "2018-12-05T19:22:17Z",
      "side": 1,
      "message": "Since it\u0027s only a bool and we don\u0027t need to check anything else, would an atomic\u003cbool\u003e make sense?  It can be used with memory_order_relaxed to check without synchronization, then memory_order_acquire to check with synchronization, and use memory_order_release to store the value.",
      "revId": "79718825065ca5b0703f7a3987774759115c4830",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ab56cf41_f04e2885",
        "filename": "call/call.cc",
        "patchSetId": 3
      },
      "lineNbr": 272,
      "author": {
        "id": 7704
      },
      "writtenOn": "2018-12-05T20:26:59Z",
      "side": 1,
      "message": "I thought of using atomic initially, but atomic bool would mean that \"Disable()\" can finish before callback finishes, and I wanted to guarantee that if there is a callback ongoing, it completes before \"Disable\" completes.",
      "parentUuid": "34e02a76_08f78224",
      "revId": "79718825065ca5b0703f7a3987774759115c4830",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "65accef1_0a703613",
        "filename": "call/call.cc",
        "patchSetId": 3
      },
      "lineNbr": 559,
      "author": {
        "id": 5599
      },
      "writtenOn": "2018-12-05T19:22:17Z",
      "side": 1,
      "message": "Should the else branch simply be deleted?  Is it worth keeping it just for a comment?  (The comment could stay, maybe just after the \"if\".)",
      "range": {
        "startLine": 557,
        "startChar": 3,
        "endLine": 559,
        "endChar": 3
      },
      "revId": "79718825065ca5b0703f7a3987774759115c4830",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "22d507bc_2ca9e10e",
        "filename": "call/call.cc",
        "patchSetId": 3
      },
      "lineNbr": 559,
      "author": {
        "id": 7704
      },
      "writtenOn": "2018-12-05T20:26:59Z",
      "side": 1,
      "message": "I liked else, because it removed the cognitive burden of understanding that \u0027rtp\u0027 is an \u0027else not media transport\u0027. But followed the suggestion.",
      "parentUuid": "65accef1_0a703613",
      "range": {
        "startLine": 557,
        "startChar": 3,
        "endLine": 559,
        "endChar": 3
      },
      "revId": "79718825065ca5b0703f7a3987774759115c4830",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    }
  ]
}