{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "dc0645b1_f0875729",
        "filename": "test/network/network_emulation.cc",
        "patchSetId": 1
      },
      "lineNbr": 558,
      "author": {
        "id": 5234
      },
      "writtenOn": "2021-02-22T09:21:05Z",
      "side": 0,
      "message": "This is a problem, when the call goes to ActionReceiver::OnPacketReceived, which calls back to UnbindReceiver. And deadlocks with a non-reentrant mutex.\n\nOne way to fix this usecase might be to add a return value to OnPacketReceived, and do the unbinding here (without taking the lock again).",
      "range": {
        "startLine": 555,
        "startChar": 0,
        "endLine": 558,
        "endChar": 50
      },
      "revId": "a21ea29ff0e3f7c655aa2c27abf107c6840d2914",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fd4503df_cc95bdbe",
        "filename": "test/network/network_emulation.cc",
        "patchSetId": 1
      },
      "lineNbr": 558,
      "author": {
        "id": 5234
      },
      "writtenOn": "2021-02-22T16:11:11Z",
      "side": 0,
      "message": "Adding return value has the drawback that its an api change, and not really fitting well in EmulatedNetworkReceiverInterface.\n\nSince only use is in CrossTrafficRouteImpl::NetworkDelayedAction, a more local change would be to update the EmulatedEndpointImpl::port_to_receiver_ mapping to include a \"one-shot\" flag, which implies that the binding is removed after first received packet. (Or reimplement the NetworkDelayedAction in some completely different way, without binding any port, but that sounds harder).",
      "parentUuid": "dc0645b1_f0875729",
      "range": {
        "startLine": 555,
        "startChar": 0,
        "endLine": 558,
        "endChar": 50
      },
      "revId": "a21ea29ff0e3f7c655aa2c27abf107c6840d2914",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "18f96c3c_e768d00f",
        "filename": "test/network/network_emulation.cc",
        "patchSetId": 1
      },
      "lineNbr": 558,
      "author": {
        "id": 6337
      },
      "writtenOn": "2021-02-23T09:22:40Z",
      "side": 0,
      "message": "I\u0027ll say the issue arise from the fact that we call receiver holding a lock. Maybe we can relax that and actually free the lock before call to the receiver-\u003eOnPacketReceived(...). The idea was to protect against removing receiver before processing of packet. We can partly put this burden on the client, so client should ensure that receiver isn\u0027t destroyed before all packets it could receive are processed. But it might be complicated for client.",
      "parentUuid": "fd4503df_cc95bdbe",
      "range": {
        "startLine": 555,
        "startChar": 0,
        "endLine": 558,
        "endChar": 50
      },
      "revId": "a21ea29ff0e3f7c655aa2c27abf107c6840d2914",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2ac32260_7ce87a2b",
        "filename": "test/network/network_emulation.cc",
        "patchSetId": 1
      },
      "lineNbr": 558,
      "author": {
        "id": 5234
      },
      "writtenOn": "2021-02-23T09:32:22Z",
      "side": 0,
      "message": "I think calls to OnPacketReceived must be synchronized with UnbindReceiver in one way or the other. Not holding the lock will get quite complex.\n\nI think I\u0027ll try adding a method EmulatedEndpointImpl::BindOnePacketReceiver, and use that for the special case of NetworkDelayedAction. I think that should be a reasonable and local change, with small api implications. Are you aware of any other implementation of the OnPacketReceived that could be a problem?",
      "parentUuid": "18f96c3c_e768d00f",
      "range": {
        "startLine": 555,
        "startChar": 0,
        "endLine": 558,
        "endChar": 50
      },
      "revId": "a21ea29ff0e3f7c655aa2c27abf107c6840d2914",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2a47dcc8_74732d6a",
        "filename": "test/network/network_emulation.cc",
        "patchSetId": 1
      },
      "lineNbr": 558,
      "author": {
        "id": 6337
      },
      "writtenOn": "2021-02-23T09:36:14Z",
      "side": 0,
      "message": "Theoretically nothing forbid user from unbinding receiver after receiving i_th packet. So maybe it will be better to have a way to tell at any time that this receiver should be removed after next packet, which will turn on some internal flag? The same for the default receivers. \n\nAlso because there is no constraints the client can try to bind something new during handling received packet in theory",
      "parentUuid": "2ac32260_7ce87a2b",
      "range": {
        "startLine": 555,
        "startChar": 0,
        "endLine": 558,
        "endChar": 50
      },
      "revId": "a21ea29ff0e3f7c655aa2c27abf107c6840d2914",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "64391cff_1221f79b",
        "filename": "test/network/network_emulation.cc",
        "patchSetId": 1
      },
      "lineNbr": 558,
      "author": {
        "id": 5234
      },
      "writtenOn": "2021-02-23T09:44:02Z",
      "side": 0,
      "message": "The potential use after free race is:\n\nThread A: Packet arrives, lock taken, a receiver is looked up in the mapping, lock released.\n\n   Thread B: Calls UnbindReceiver, and destroys receiver as soon as UnbindReceiver returns.\n\nThread A: Calls OnPacketReceived on a destroyed object.\n\nThere are some alternatives to holding the lock over the call to OnPacketReceived, but we will easily get into a rabbit hole. The same pattern has been discussed at length in the context of VideoSourceInterface, RemoveSink and OnFrame.\n\nI\u0027d prefer a local change without reworking the api contracts.",
      "parentUuid": "2a47dcc8_74732d6a",
      "range": {
        "startLine": 555,
        "startChar": 0,
        "endLine": 558,
        "endChar": 50
      },
      "revId": "a21ea29ff0e3f7c655aa2c27abf107c6840d2914",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    }
  ]
}