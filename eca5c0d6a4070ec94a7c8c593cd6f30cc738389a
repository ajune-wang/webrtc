{
  "comments": [
    {
      "key": {
        "uuid": "5c9e2bd5_b52c1e83",
        "filename": "modules/rtp_rtcp/source/rtp_sender_video.cc",
        "patchSetId": 8
      },
      "lineNbr": 129,
      "author": {
        "id": 5019
      },
      "writtenOn": "2018-12-03T12:28:26Z",
      "side": 1,
      "message": "it is generally better to avoid negation in function name:\nmake it IsBaseLayer()\nthen when using write if (!IsBaseLayer(...))\n\nIn this case it doesn\u0027t matter much since you always negate. But if someone would need opposite, then if (!IsNonBaseLayer()) whould be noticable harder to read than if (IsBaseLayer())",
      "range": {
        "startLine": 129,
        "startChar": 5,
        "endLine": 129,
        "endChar": 19
      },
      "revId": "eca5c0d6a4070ec94a7c8c593cd6f30cc738389a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d4c87da1_49b2770a",
        "filename": "modules/rtp_rtcp/source/rtp_sender_video.cc",
        "patchSetId": 8
      },
      "lineNbr": 129,
      "author": {
        "id": 7641
      },
      "writtenOn": "2018-12-03T13:21:06Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5c9e2bd5_b52c1e83",
      "range": {
        "startLine": 129,
        "startChar": 5,
        "endLine": 129,
        "endChar": 19
      },
      "revId": "eca5c0d6a4070ec94a7c8c593cd6f30cc738389a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2e0e0704_5ee276cc",
        "filename": "modules/rtp_rtcp/source/rtp_sender_video.cc",
        "patchSetId": 8
      },
      "lineNbr": 130,
      "author": {
        "id": 5019
      },
      "writtenOn": "2018-12-03T12:28:26Z",
      "side": 1,
      "message": "not sure how this variable is helpful: may be just return where you set it",
      "range": {
        "startLine": 130,
        "startChar": 2,
        "endLine": 130,
        "endChar": 30
      },
      "revId": "eca5c0d6a4070ec94a7c8c593cd6f30cc738389a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2aa75320_cdb89170",
        "filename": "modules/rtp_rtcp/source/rtp_sender_video.cc",
        "patchSetId": 8
      },
      "lineNbr": 130,
      "author": {
        "id": 7641
      },
      "writtenOn": "2018-12-03T13:21:06Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "2e0e0704_5ee276cc",
      "range": {
        "startLine": 130,
        "startChar": 2,
        "endLine": 130,
        "endChar": 30
      },
      "revId": "eca5c0d6a4070ec94a7c8c593cd6f30cc738389a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a40ef846_9c1e1011",
        "filename": "modules/rtp_rtcp/source/rtp_sender_video.cc",
        "patchSetId": 8
      },
      "lineNbr": 131,
      "author": {
        "id": 5019
      },
      "writtenOn": "2018-12-03T12:28:26Z",
      "side": 1,
      "message": "you assume video_header is never nullptr,\nmay be pass it by const reference then (const RTPVideoHeader\u0026)",
      "range": {
        "startLine": 131,
        "startChar": 22,
        "endLine": 131,
        "endChar": 24
      },
      "revId": "eca5c0d6a4070ec94a7c8c593cd6f30cc738389a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0b62c133_50a6dbde",
        "filename": "modules/rtp_rtcp/source/rtp_sender_video.cc",
        "patchSetId": 8
      },
      "lineNbr": 131,
      "author": {
        "id": 7641
      },
      "writtenOn": "2018-12-03T13:21:06Z",
      "side": 1,
      "message": "That\u0027s better. Done.",
      "parentUuid": "a40ef846_9c1e1011",
      "range": {
        "startLine": 131,
        "startChar": 22,
        "endLine": 131,
        "endChar": 24
      },
      "revId": "eca5c0d6a4070ec94a7c8c593cd6f30cc738389a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2b63dd82_8e155912",
        "filename": "modules/rtp_rtcp/source/rtp_sender_video.cc",
        "patchSetId": 8
      },
      "lineNbr": 419,
      "author": {
        "id": 5019
      },
      "writtenOn": "2018-12-03T12:28:26Z",
      "side": 1,
      "message": "it can be good idea to explain why.\n\nbtw, what defintion of \u0027base layer\u0027 do you use?\nwould that work for simulcast over same ssrc (i.e. vp9 with multiple spatial layers but without inter-layer dependencies).\nDoes it matter for your use case?",
      "range": {
        "startLine": 418,
        "startChar": 69,
        "endLine": 419,
        "endChar": 72
      },
      "revId": "eca5c0d6a4070ec94a7c8c593cd6f30cc738389a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3f1b36fb_354c5a60",
        "filename": "modules/rtp_rtcp/source/rtp_sender_video.cc",
        "patchSetId": 8
      },
      "lineNbr": 419,
      "author": {
        "id": 7641
      },
      "writtenOn": "2018-12-03T13:21:06Z",
      "side": 1,
      "message": "I have added an explanation.\n\nThe definition here is that the temporal index is either 0 or kNoTemporalIdx.\n\nI don\u0027t know how that relates to simulast over same ssrc. sprang@ can you answer?",
      "parentUuid": "2b63dd82_8e155912",
      "range": {
        "startLine": 418,
        "startChar": 69,
        "endLine": 419,
        "endChar": 72
      },
      "revId": "eca5c0d6a4070ec94a7c8c593cd6f30cc738389a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ceb26050_2341b725",
        "filename": "modules/rtp_rtcp/source/rtp_sender_video.cc",
        "patchSetId": 8
      },
      "lineNbr": 419,
      "author": {
        "id": 5524
      },
      "writtenOn": "2018-12-03T13:53:56Z",
      "side": 1,
      "message": "This should work for svc as well. What we need is to append this data until we we have a frame with guaranteed delivery, as the color space is a sticky state. TL0 frames should have guaranteed delivery regardless of single stream, pure simulcast, k-svc or svc, right?",
      "parentUuid": "3f1b36fb_354c5a60",
      "range": {
        "startLine": 418,
        "startChar": 69,
        "endLine": 419,
        "endChar": 72
      },
      "revId": "eca5c0d6a4070ec94a7c8c593cd6f30cc738389a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bc6b3bf5_829c22cb",
        "filename": "modules/rtp_rtcp/source/rtp_sender_video.cc",
        "patchSetId": 8
      },
      "lineNbr": 426,
      "author": {
        "id": 5019
      },
      "writtenOn": "2018-12-03T12:28:26Z",
      "side": 1,
      "message": "probably remove (): condition looks simple enough",
      "range": {
        "startLine": 426,
        "startChar": 10,
        "endLine": 426,
        "endChar": 40
      },
      "revId": "eca5c0d6a4070ec94a7c8c593cd6f30cc738389a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0dd3a581_1e1790bc",
        "filename": "modules/rtp_rtcp/source/rtp_sender_video.cc",
        "patchSetId": 8
      },
      "lineNbr": 426,
      "author": {
        "id": 7641
      },
      "writtenOn": "2018-12-03T13:21:06Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "bc6b3bf5_829c22cb",
      "range": {
        "startLine": 426,
        "startChar": 10,
        "endLine": 426,
        "endChar": 40
      },
      "revId": "eca5c0d6a4070ec94a7c8c593cd6f30cc738389a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5d0d8009_e86fe21b",
        "filename": "modules/rtp_rtcp/source/rtp_video_header.h",
        "patchSetId": 8
      },
      "lineNbr": 69,
      "author": {
        "id": 5019
      },
      "writtenOn": "2018-12-03T12:28:26Z",
      "side": 1,
      "message": "may be move one line up to keep fields based on extensions together, while video_type_header a bit separate.",
      "range": {
        "startLine": 68,
        "startChar": 41,
        "endLine": 69,
        "endChar": 0
      },
      "revId": "eca5c0d6a4070ec94a7c8c593cd6f30cc738389a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3d9a90cd_70ed1e10",
        "filename": "modules/rtp_rtcp/source/rtp_video_header.h",
        "patchSetId": 8
      },
      "lineNbr": 69,
      "author": {
        "id": 7641
      },
      "writtenOn": "2018-12-03T13:21:06Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5d0d8009_e86fe21b",
      "range": {
        "startLine": 68,
        "startChar": 41,
        "endLine": 69,
        "endChar": 0
      },
      "revId": "eca5c0d6a4070ec94a7c8c593cd6f30cc738389a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "19a874e5_32451641",
        "filename": "modules/video_coding/frame_object.cc",
        "patchSetId": 8
      },
      "lineNbr": 77,
      "author": {
        "id": 5019
      },
      "writtenOn": "2018-12-03T12:28:26Z",
      "side": 1,
      "message": "this code makes me unsure it is good idea to forbid passing \"const optional\u003cT\u003e\u0026\":\nhere you need to convert optional\u003cT\u003e to T* and then inside Setter it is converted back from T* to optional\u003cT\u003e\n\nanyway, just side node unrelated to main subject of this CL.",
      "range": {
        "startLine": 75,
        "startChar": 0,
        "endLine": 77,
        "endChar": 31
      },
      "revId": "eca5c0d6a4070ec94a7c8c593cd6f30cc738389a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d64b1e19_17ea469a",
        "filename": "modules/video_coding/frame_object.cc",
        "patchSetId": 8
      },
      "lineNbr": 77,
      "author": {
        "id": 7641
      },
      "writtenOn": "2018-12-03T13:21:06Z",
      "side": 1,
      "message": "Yes, it gets a bit complicated here.\nOne of the arguments to use a pointer at api level was to be able to change the storage later to some kind of smart pointer instead of absl::optional.",
      "parentUuid": "19a874e5_32451641",
      "range": {
        "startLine": 75,
        "startChar": 0,
        "endLine": 77,
        "endChar": 31
      },
      "revId": "eca5c0d6a4070ec94a7c8c593cd6f30cc738389a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "327cf0a8_b0e9429d",
        "filename": "modules/video_coding/frame_object.cc",
        "patchSetId": 8
      },
      "lineNbr": 77,
      "author": {
        "id": 5234
      },
      "writtenOn": "2018-12-03T13:38:21Z",
      "side": 1,
      "message": "For conversion in this direction, what one would really want is a method optional::get(), but we\u0027re not going to get that anytime soon. Is there any other way to make this more convenient? Is it possible to define some out-of-class conversion operator optional\u003cT\u003e --\u003e T* ? Or a convenience function, if one could only come up with a usable name for it.",
      "parentUuid": "d64b1e19_17ea469a",
      "range": {
        "startLine": 75,
        "startChar": 0,
        "endLine": 77,
        "endChar": 31
      },
      "revId": "eca5c0d6a4070ec94a7c8c593cd6f30cc738389a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    }
  ]
}