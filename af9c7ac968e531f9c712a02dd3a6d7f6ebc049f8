{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "69e076fb_94fecde6",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5634
      },
      "writtenOn": "2022-06-11T08:58:59Z",
      "side": 1,
      "message": "This logic seems wrong to me, but I may just not get it.\nHow long is T3 compared to RTT?\n\nIf T3 is 3x RTT, what will happen in a burst loss is:\n\n- We send A and start T3\n- We send B, C, D, E (T3 is running, so no restart)\n- All 4 are lost\n- T3 expires\n- We resend A\n- A is acked, B/C/D/E are resent (?)\n\nThis will delay the retransmission of B, C, D, E by one RTT compared to current code.\n\nIs the RFC saying that this is how one should do it?\n\n",
      "revId": "af9c7ac968e531f9c712a02dd3a6d7f6ebc049f8",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b148ed49_bd21a7b7",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 12215
      },
      "writtenOn": "2022-06-11T21:56:40Z",
      "side": 1,
      "message": "T3 is set to the retransmission timeout (RTO), which is ~RTT+a bit more.\n\nThe standard is very vague: https://datatracker.ietf.org/doc/html/rfc4960#section-6.3.3:\n\n   Note: Any DATA chunks that were sent to the address for which the\n   T3-rtx timer expired but did not fit in one MTU (rule E3 above)\n   should be marked for retransmission and sent as soon as cwnd allows\n   (normally, when a SACK arrives).\n   \nWhat are the \"DATA chunks ... _for which the T3-rtx timer expired_\"? I\u0027m (now in this CL) arguing that it\u0027s the ones that were inflight when T3-RTX was started, and not any newer chunks, as T3-RTX wasn\u0027t running \"for them\" - just for the prior chunks.\n\nWhat does pion do? The logic is at https://github.com/pion/sctp/blob/17090a459a9c7f70d4972a95924cb01498610d42/association.go#L2474 and they just send everything. That\u0027s what we do before this CL.\n\nWhat does usrsctp do? The logic is at https://github.com/sctplab/usrsctp/blob/3e1c5ae9560154d86f5636d6abfb8101dc2e0c47/usrsctplib/netinet/sctp_timer.c#L487. When T3 expires, it will actually compare the send timestamps of all outstanding unacked chunks, and if they were sent more than RTO ago, they will be resent. When was RTO ago? That was when T3 was started (as it expires after RTO), so this is the same as acking all outstanding when T3 was started, which is exactly what this CL does as well.\n\nI actually found this issue when analyzing https://drive.google.com/file/d/1ZWDYQ5tQY-AQqGQEWwdbfmCHibtWPWto/view?usp\u003dsharing (shared with your google account). If you open it, you\u0027ll see that DATA with TSN\u003d793796649 was sent at 08:11:53.614660 (packet 37), and then when T3-RTX expires, it re-sends that chunk at 08:11:53.758259 (packet 41), which isn\u0027t nice, as only 150ms has passed, and the RTT was higher than that (RTO.min is 400ms BTW). So that chunk didn\u0027t have time to be acked (that takes at least an RTT), but was retransmitted anyway.",
      "parentUuid": "69e076fb_94fecde6",
      "revId": "af9c7ac968e531f9c712a02dd3a6d7f6ebc049f8",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6959031a_9099493f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5634
      },
      "writtenOn": "2022-06-12T07:39:38Z",
      "side": 1,
      "message": "Needs a bug report against the standard :-)\n\nStill worried.\n\nIs RTO.min the value of T3 when RTT is shorter than this? A minimum value of T3 of 0.4 seconds (OUCH!) means that this patch will severely degrade performance in short-RTT situations with bursty loss, since there will then be many chunks that are sent before T3 expires that should have been acked, but are lost by the burst loss.\n\n0.4 seconds (400 ms) is an awfully long time; RTT from Stockholm to California is 70 ms on a clear day.",
      "parentUuid": "b148ed49_bd21a7b7",
      "revId": "af9c7ac968e531f9c712a02dd3a6d7f6ebc049f8",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "134dfc12_a9c4ca32",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5634
      },
      "writtenOn": "2022-06-12T07:39:38Z",
      "side": 1,
      "message": "400 ms????",
      "revId": "af9c7ac968e531f9c712a02dd3a6d7f6ebc049f8",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f1ad70e6_f150570e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 12215
      },
      "writtenOn": "2022-06-14T11:45:28Z",
      "side": 1,
      "message": "An update just so that you didn\u0027t think I\u0027m not working on this ðŸ˜Š\n\nFirst of all: 400ms. That can likely be lowered more. It\u0027s 1 second by default in usrsctp, and I went with 400ms at the time because of issues that arose due to the 200ms delayed ack timeout that usrsctp has. Since then, I have added the \"rto_min_variance\" option that makes it possible to reduce rto.min to anything really. But it will never be smaller than 200ms due to the delayed ack timeout.\n\ndcSCTP has a delayed ack (ato) set to rto/2, or 200ms (whatever is smallest). I am thinking about reducing this to 40ms (as is default in Linux TCP, but not disable it, as having a non-zero delay allows it to be bundled without DATA chunks). That should bring the actual RTO to be smaller - way below 400ms.\n\nBut it\u0027s not always a good idea to have a lower retransmission timeout. When it expires, it resets the congestion window to 1 MTU, and it will take time to ramp up again. In many cases, packets can be retransmitted by fast retransmit by a number of gap-ack reports, and that will not reduce the congestion window too much.\n\nGoing back to this CL: I have three issues to resolve:\n1. When t3-rtx is doing exponential backoff, it should still retransmit chunks that were sent up to 1 RTO ago - not the TSN that was send when t3 was started (in other words: Do what usrsctp does). \n2. When not retransmitting everything and setting the congestion window to 1 MTU, there is outstanding data still (in-flight), which the congestion window must be adjusted for so that t3-rtx expiring can still send packets (and not be considered full already because of the inflight packets)\n3. Convince Harald. I\u0027ll invite you to a VC.",
      "parentUuid": "6959031a_9099493f",
      "revId": "af9c7ac968e531f9c712a02dd3a6d7f6ebc049f8",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "At least one maximum vote for label \u0027Code-Review\u0027 is required"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader AND -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader AND -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Code-Review=MAX,user=non_uploader","label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1"]}
      },
      "patchSetCommitId": "af9c7ac968e531f9c712a02dd3a6d7f6ebc049f8",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforced_gerrit"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforcement-satisfied_gerrit"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "af9c7ac968e531f9c712a02dd3a6d7f6ebc049f8",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}