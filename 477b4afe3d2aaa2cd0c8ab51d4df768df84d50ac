{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "0bffef49_10d2b223",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 5019
      },
      "writtenOn": "2024-05-20T13:11:26Z",
      "side": 1,
      "message": "conceptually lgtm\n\nnaming shortcuts.... looks like better be polished before this interface is released, and samples are suggested as an example how it should be used.",
      "revId": "477b4afe3d2aaa2cd0c8ab51d4df768df84d50ac",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7b9dae31_2f4baaa8",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 5524
      },
      "writtenOn": "2024-05-20T13:58:21Z",
      "side": 1,
      "message": "overall lgtm",
      "revId": "477b4afe3d2aaa2cd0c8ab51d4df768df84d50ac",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6fcb4f0e_657dc7fc",
        "filename": "api/video_codecs/libaom_av1_encoder_factory.cc",
        "patchSetId": 5
      },
      "lineNbr": 783,
      "author": {
        "id": 5019
      },
      "writtenOn": "2024-05-20T13:11:26Z",
      "side": 1,
      "message": "may be `!\u003d`\n(if output_buffer.size() \u003e .sz, then bytes after .sz would remain uninitialized, which might be confusing)",
      "range": {
        "startLine": 783,
        "startChar": 33,
        "endLine": 783,
        "endChar": 34
      },
      "revId": "477b4afe3d2aaa2cd0c8ab51d4df768df84d50ac",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7ca358d8_36032f20",
        "filename": "api/video_codecs/libaom_av1_encoder_factory.cc",
        "patchSetId": 5
      },
      "lineNbr": 783,
      "author": {
        "id": 5527
      },
      "writtenOn": "2024-05-20T14:08:45Z",
      "side": 1,
      "message": "That was the idea, but I guess an `rtc::ArrayView` can trivially represent any size so we might as well use `!\u003d`. Updated",
      "parentUuid": "6fcb4f0e_657dc7fc",
      "range": {
        "startLine": 783,
        "startChar": 33,
        "endLine": 783,
        "endChar": 34
      },
      "revId": "477b4afe3d2aaa2cd0c8ab51d4df768df84d50ac",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e77f55ea_c7d9e8d0",
        "filename": "api/video_codecs/libaom_av1_encoder_factory.cc",
        "patchSetId": 5
      },
      "lineNbr": 792,
      "author": {
        "id": 5019
      },
      "writtenOn": "2024-05-20T13:11:26Z",
      "side": 1,
      "message": "this looks a bit confusing way to check there was no frame.\n\nmay be use more explicit variable:\n```\nbool produced_frame \u003d false;\nwhile (const ...) \n  if (...) {\n    rtc::ArrayView\u003cuint8_t\u003e output_buffer \u003d ...GetBitstream(...);\n    ...\n    memcpy(...);\n    ....EncodedComplete(result);\n    ...output_functions \u003d nullptr;\n    produced_frame \u003d true;\n    break;\n  }\n}\n\nif (!produced_frame) {\n  DoErrorCallback(...);\n  return;\n}\n```",
      "revId": "477b4afe3d2aaa2cd0c8ab51d4df768df84d50ac",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b60252c4_adbd15f7",
        "filename": "api/video_codecs/libaom_av1_encoder_factory.cc",
        "patchSetId": 5
      },
      "lineNbr": 792,
      "author": {
        "id": 5527
      },
      "writtenOn": "2024-05-20T14:08:45Z",
      "side": 1,
      "message": "Updated.",
      "parentUuid": "e77f55ea_c7d9e8d0",
      "revId": "477b4afe3d2aaa2cd0c8ab51d4df768df84d50ac",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7412e8d7_ce505e24",
        "filename": "api/video_codecs/simple_encoder_wrapper.cc",
        "patchSetId": 5
      },
      "lineNbr": 184,
      "author": {
        "id": 5019
      },
      "writtenOn": "2024-05-20T13:11:26Z",
      "side": 1,
      "message": "`return bitstream` should likely work",
      "revId": "477b4afe3d2aaa2cd0c8ab51d4df768df84d50ac",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "789ccbe5_e2ccc774",
        "filename": "api/video_codecs/video_encoder_interface.h",
        "patchSetId": 5
      },
      "lineNbr": 48,
      "author": {
        "id": 5019
      },
      "writtenOn": "2024-05-20T13:11:26Z",
      "side": 1,
      "message": "This names smells like a placeholder (i.e., look uninformative)\nAre you planning to settle on the name later?\n\n(e.g. `FrameEncodeResult` might look better because it resemble `FrameEncodeSettings` name, and there is 1:1 between these two)",
      "range": {
        "startLine": 48,
        "startChar": 9,
        "endLine": 48,
        "endChar": 24
      },
      "revId": "477b4afe3d2aaa2cd0c8ab51d4df768df84d50ac",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ab8a3263_9b82ab36",
        "filename": "api/video_codecs/video_encoder_interface.h",
        "patchSetId": 5
      },
      "lineNbr": 48,
      "author": {
        "id": 5527
      },
      "writtenOn": "2024-05-20T14:08:45Z",
      "side": 1,
      "message": "`OutputFunctions` was the least bad name I could come up with, not good, just the least bad.\n\nI think `FrameEncodeResult::GetBitstreamOutputBuffer` is a bit weird. Will think a bit more about some alternative name.",
      "parentUuid": "789ccbe5_e2ccc774",
      "range": {
        "startLine": 48,
        "startChar": 9,
        "endLine": 48,
        "endChar": 24
      },
      "revId": "477b4afe3d2aaa2cd0c8ab51d4df768df84d50ac",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f08256d8_d64f7f43",
        "filename": "api/video_codecs/video_encoder_interface.h",
        "patchSetId": 5
      },
      "lineNbr": 48,
      "author": {
        "id": 5019
      },
      "writtenOn": "2024-05-20T14:26:45Z",
      "side": 1,
      "message": "BitstreamOutputBuffer is part of the EncodeResult, so it doesn\u0027t look that weird to me.",
      "parentUuid": "ab8a3263_9b82ab36",
      "range": {
        "startLine": 48,
        "startChar": 9,
        "endLine": 48,
        "endChar": 24
      },
      "revId": "477b4afe3d2aaa2cd0c8ab51d4df768df84d50ac",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c9dd4545_fe221fcd",
        "filename": "api/video_codecs/video_encoder_interface.h",
        "patchSetId": 5
      },
      "lineNbr": 48,
      "author": {
        "id": 5527
      },
      "writtenOn": "2024-05-20T14:26:49Z",
      "side": 1,
      "message": "WDYT about `FrameOutputFunctions`?",
      "parentUuid": "ab8a3263_9b82ab36",
      "range": {
        "startLine": 48,
        "startChar": 9,
        "endLine": 48,
        "endChar": 24
      },
      "revId": "477b4afe3d2aaa2cd0c8ab51d4df768df84d50ac",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d3a1e5dd_929859f7",
        "filename": "api/video_codecs/video_encoder_interface.h",
        "patchSetId": 5
      },
      "lineNbr": 48,
      "author": {
        "id": 5019
      },
      "writtenOn": "2024-05-20T14:32:50Z",
      "side": 1,
      "message": "I think that instead of suffix \u0027Functions\u0027 it is better to use more common suffix \u0027Interface\u0027 or no suffix at all.\n(Interface is de-facto a set of functions)\n\n`FrameOutput` sgtm\n(it does describe it is about single (layer) frame, not a temporal unit,\nand it does describe it is output/result of the encoding.\nI do not think it needs to capture anything else)",
      "parentUuid": "c9dd4545_fe221fcd",
      "range": {
        "startLine": 48,
        "startChar": 9,
        "endLine": 48,
        "endChar": 24
      },
      "revId": "477b4afe3d2aaa2cd0c8ab51d4df768df84d50ac",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8769cc84_3832f9ca",
        "filename": "api/video_codecs/video_encoder_interface.h",
        "patchSetId": 5
      },
      "lineNbr": 48,
      "author": {
        "id": 5527
      },
      "writtenOn": "2024-05-20T14:52:42Z",
      "side": 1,
      "message": "`FrameOutput` SGTM, updated.",
      "parentUuid": "d3a1e5dd_929859f7",
      "range": {
        "startLine": 48,
        "startChar": 9,
        "endLine": 48,
        "endChar": 24
      },
      "revId": "477b4afe3d2aaa2cd0c8ab51d4df768df84d50ac",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "877d0c91_c2cb3981",
        "filename": "api/video_codecs/video_encoder_interface.h",
        "patchSetId": 5
      },
      "lineNbr": 51,
      "author": {
        "id": 5019
      },
      "writtenOn": "2024-05-20T13:11:26Z",
      "side": 1,
      "message": "Personally I think that for this function using type DataSize instead of size_t or int would add unnecessary overhead.",
      "range": {
        "startLine": 51,
        "startChar": 8,
        "endLine": 51,
        "endChar": 16
      },
      "revId": "477b4afe3d2aaa2cd0c8ab51d4df768df84d50ac",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "102291ec_d9af5ff6",
        "filename": "api/video_codecs/video_encoder_interface.h",
        "patchSetId": 5
      },
      "lineNbr": 51,
      "author": {
        "id": 5019
      },
      "writtenOn": "2024-05-20T13:11:26Z",
      "side": 1,
      "message": "why `min_size` instead of just `size`?\nHow the actual size of the encoded frame will be communicated then?",
      "range": {
        "startLine": 51,
        "startChar": 17,
        "endLine": 51,
        "endChar": 25
      },
      "revId": "477b4afe3d2aaa2cd0c8ab51d4df768df84d50ac",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7a8929b9_769af383",
        "filename": "api/video_codecs/video_encoder_interface.h",
        "patchSetId": 5
      },
      "lineNbr": 51,
      "author": {
        "id": 5524
      },
      "writtenOn": "2024-05-20T13:58:21Z",
      "side": 1,
      "message": "This was based on discussion of how mojo buffer management works today, where we want a preallocated buffer with at least the size we want. But agree it\u0027s easier to reason about here if what we ask for is the exact size.",
      "parentUuid": "102291ec_d9af5ff6",
      "range": {
        "startLine": 51,
        "startChar": 17,
        "endLine": 51,
        "endChar": 25
      },
      "revId": "477b4afe3d2aaa2cd0c8ab51d4df768df84d50ac",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0880a3ce_9bbce9b7",
        "filename": "api/video_codecs/video_encoder_interface.h",
        "patchSetId": 5
      },
      "lineNbr": 51,
      "author": {
        "id": 5527
      },
      "writtenOn": "2024-05-20T14:08:45Z",
      "side": 1,
      "message": "Compile time overhead? I think having quantities is just plain better, especially when it comes to APIs.",
      "parentUuid": "877d0c91_c2cb3981",
      "range": {
        "startLine": 51,
        "startChar": 8,
        "endLine": 51,
        "endChar": 16
      },
      "revId": "477b4afe3d2aaa2cd0c8ab51d4df768df84d50ac",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e1e745d9_4e2cf133",
        "filename": "api/video_codecs/video_encoder_interface.h",
        "patchSetId": 5
      },
      "lineNbr": 51,
      "author": {
        "id": 5527
      },
      "writtenOn": "2024-05-20T14:08:45Z",
      "side": 1,
      "message": "`min_size` is the size of the frame, it\u0027s just there to indicate that the buffer is allowed to be larger. Anyhow, now we changed it to the exact buffer size.",
      "parentUuid": "102291ec_d9af5ff6",
      "range": {
        "startLine": 51,
        "startChar": 17,
        "endLine": 51,
        "endChar": 25
      },
      "revId": "477b4afe3d2aaa2cd0c8ab51d4df768df84d50ac",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c06c1cc2_9a9e4d0b",
        "filename": "api/video_codecs/video_encoder_interface.h",
        "patchSetId": 5
      },
      "lineNbr": 51,
      "author": {
        "id": 5019
      },
      "writtenOn": "2024-05-20T14:26:45Z",
      "side": 1,
      "message": "ofc not compile time overhead, I meant readability overhead.\nI find DataSize helpful when you need to compute DataRate - then it automatically converts Bytes into BitsPerSecond.\n\nBut otherwise I find more appropriate to \"Be consistent with the broader C++ community\" (https://google.github.io/styleguide/cppguide.html#Goals)\nand use `size_t` type.",
      "parentUuid": "0880a3ce_9bbce9b7",
      "range": {
        "startLine": 51,
        "startChar": 8,
        "endLine": 51,
        "endChar": 16
      },
      "revId": "477b4afe3d2aaa2cd0c8ab51d4df768df84d50ac",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "da8c23df_0b6b8b0e",
        "filename": "api/video_codecs/video_encoder_interface.h",
        "patchSetId": 5
      },
      "lineNbr": 52,
      "author": {
        "id": 5019
      },
      "writtenOn": "2024-05-20T13:11:26Z",
      "side": 1,
      "message": "because it is a function in the interfac, now there is no need to collapse EncodeResult into variant, instead you may have two functions:\n\n```\nvoid OnEncoded(const EncodedData\u0026) \u003d 0;\nvoid OnError() \u003d 0;\n```",
      "revId": "477b4afe3d2aaa2cd0c8ab51d4df768df84d50ac",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5600d2a5_86dd84d2",
        "filename": "api/video_codecs/video_encoder_interface.h",
        "patchSetId": 5
      },
      "lineNbr": 52,
      "author": {
        "id": 5524
      },
      "writtenOn": "2024-05-20T13:58:21Z",
      "side": 1,
      "message": "maybe... but part of what I like with a single method is that we know the guarantee that `EncodeComplete` is always called exactly once - rather than \"exactly one of `OnEncoded` OR `OnError` is called exactly once\"",
      "parentUuid": "da8c23df_0b6b8b0e",
      "revId": "477b4afe3d2aaa2cd0c8ab51d4df768df84d50ac",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f4d069f4_68a1835b",
        "filename": "api/video_codecs/video_encoder_interface.h",
        "patchSetId": 5
      },
      "lineNbr": 80,
      "author": {
        "id": 5019
      },
      "writtenOn": "2024-05-20T13:11:26Z",
      "side": 1,
      "message": "follow-up idea:\nmerge FrameEncodeSettings and OutputFunctions:\n\n```\nclass FrameEncodeSettings {\n public:\n  virtual void OnEncodeComplete() \u0026\u0026 \u003d 0;\n  virtual void OnEncodeFailure() \u0026\u0026 \u003d 0;\n  \n  virtual rtc::ArrayView\u003cuint8_t\u003e GetBitstreamOutputBuffer(size_t size) \u003d 0;\n  virtual void SetEncodedQp(int qp);\n  \n    \n  void SetFrameType(FrameType);\n  FrameType GetFrameType() const;\n  \n};\n\nvoid Encode(..., tu_settings, std::vector\u003cstd::unique_ptr\u003cFrameEncodeSettings\u003e\u003e frame_settings) \u003d 0;\n```",
      "revId": "477b4afe3d2aaa2cd0c8ab51d4df768df84d50ac",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "dc19111b_1f880039",
        "filename": "api/video_codecs/video_encoder_interface.h",
        "patchSetId": 5
      },
      "lineNbr": 80,
      "author": {
        "id": 5524
      },
      "writtenOn": "2024-05-20T13:58:21Z",
      "side": 1,
      "message": "I think I prefer input settings and output settings to be separate.",
      "parentUuid": "f4d069f4_68a1835b",
      "revId": "477b4afe3d2aaa2cd0c8ab51d4df768df84d50ac",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    }
  ]
}