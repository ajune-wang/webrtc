{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "9a5891c0_1f6092f9",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 5087
      },
      "writtenOn": "2022-03-14T17:09:53Z",
      "side": 1,
      "message": "I am OK keeping this one CL but it will take a bit longer. I want to take another look at all the changed lines.",
      "revId": "ec9e140009fc17de767e53cd96b1b146e75177d9",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b6916e94_dafd53cb",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 5087
      },
      "writtenOn": "2022-03-15T08:24:51Z",
      "side": 1,
      "message": "LGTM % make a decision about how to handle extra copies:\n\n1- Just make them as long as they are not in a hot path.\n2- Try to avoid and be smart about which API the function calls (e.g. if it calls an API with const string\u0026 maybe let\u0027s avoid the string_view param).\n3- Something else",
      "revId": "ec9e140009fc17de767e53cd96b1b146e75177d9",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8ae608f6_f936ce71",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 5234
      },
      "writtenOn": "2022-03-15T08:41:43Z",
      "side": 1,
      "message": "I\u0027ve looked through the rest of the cl, a couple of more comments, but lgtm.\n\nIn the future, I think it will make review easier if cls of this size contains only trivial and very similar changes.",
      "revId": "ec9e140009fc17de767e53cd96b1b146e75177d9",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6c0d6e8e_a440c875",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 5634
      },
      "writtenOn": "2022-03-15T08:46:27Z",
      "side": 1,
      "message": "Drive-by note: be careful with number parsing. Multiple number parsers permit spaces around the numbers they parse, and we have multiple places where we parse strings containing numbers where surrounding spaces are a syntax error.",
      "revId": "ec9e140009fc17de767e53cd96b1b146e75177d9",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2c381440_8517d184",
        "filename": "rtc_base/boringssl_identity.cc",
        "patchSetId": 8
      },
      "lineNbr": 76,
      "author": {
        "id": 5234
      },
      "writtenOn": "2022-03-14T15:51:58Z",
      "side": 1,
      "message": "Another case of a copy.\n\nTo ease review, I think it would help to split this up into one large cl with *only* the trivial changes, without additional copies. And one or more smaller cls for the other changes, so they can be reviewed more on a case-by-case basis.",
      "range": {
        "startLine": 76,
        "startChar": 0,
        "endLine": 76,
        "endChar": 48
      },
      "revId": "ec9e140009fc17de767e53cd96b1b146e75177d9",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a51a8238_274e7329",
        "filename": "rtc_base/boringssl_identity.cc",
        "patchSetId": 8
      },
      "lineNbr": 76,
      "author": {
        "id": 10107
      },
      "writtenOn": "2022-03-14T15:53:57Z",
      "side": 1,
      "message": "But this copy is necessary, even if a std::string\u0026 is passed.",
      "parentUuid": "2c381440_8517d184",
      "range": {
        "startLine": 76,
        "startChar": 0,
        "endLine": 76,
        "endChar": 48
      },
      "revId": "ec9e140009fc17de767e53cd96b1b146e75177d9",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "36804b3f_5611cedd",
        "filename": "rtc_base/boringssl_identity.cc",
        "patchSetId": 8
      },
      "lineNbr": 76,
      "author": {
        "id": 10107
      },
      "writtenOn": "2022-03-14T16:18:49Z",
      "side": 1,
      "message": "Also, splitting the CL based on trivial changes is not so easy as code in rtc_base tends to use other code in rtc_base... But if you really think that helps, I can give it a try.",
      "parentUuid": "a51a8238_274e7329",
      "range": {
        "startLine": 76,
        "startChar": 0,
        "endLine": 76,
        "endChar": 48
      },
      "revId": "ec9e140009fc17de767e53cd96b1b146e75177d9",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4041f356_816bb895",
        "filename": "rtc_base/boringssl_identity.cc",
        "patchSetId": 8
      },
      "lineNbr": 76,
      "author": {
        "id": 5087
      },
      "writtenOn": "2022-03-15T08:24:51Z",
      "side": 1,
      "message": "Yes, agreed this was already a copy.",
      "parentUuid": "36804b3f_5611cedd",
      "range": {
        "startLine": 76,
        "startChar": 0,
        "endLine": 76,
        "endChar": 48
      },
      "revId": "ec9e140009fc17de767e53cd96b1b146e75177d9",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "48500e18_d2bb5da6",
        "filename": "rtc_base/boringssl_identity.cc",
        "patchSetId": 8
      },
      "lineNbr": 76,
      "author": {
        "id": 5234
      },
      "writtenOn": "2022-03-15T08:41:43Z",
      "side": 1,
      "message": "You\u0027re right, this isn\u0027t a new copy in this cl.",
      "parentUuid": "36804b3f_5611cedd",
      "range": {
        "startLine": 76,
        "startChar": 0,
        "endLine": 76,
        "endChar": 48
      },
      "revId": "ec9e140009fc17de767e53cd96b1b146e75177d9",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "620ba80d_3a66a0f0",
        "filename": "rtc_base/experiments/encoder_info_settings.cc",
        "patchSetId": 8
      },
      "lineNbr": 179,
      "author": {
        "id": 5087
      },
      "writtenOn": "2022-03-15T08:24:51Z",
      "side": 1,
      "message": "Can we add a FindFullName(absl::string_view) API (I think we might be able to do that if we add it here https://source.chromium.org/chromium/chromium/src/+/main:third_party/webrtc/system_wrappers/include/field_trial.h;l\u003d64;drc\u003dee1e01565570b2e0a20a7f0c07e879d63aa09293 with a definition https://source.chromium.org/chromium/chromium/src/+/main:third_party/webrtc/system_wrappers/source/field_trial.cc;l\u003d105;drc\u003dd3251968d1b3dbe7e1353a3f15970b47173103e9 and  https://source.chromium.org/chromium/chromium/src/+/main:third_party/webrtc_overrides/field_trial.cc)?\n\nThat way, we avoid the copy here (and in other places I guess).",
      "range": {
        "startLine": 179,
        "startChar": 6,
        "endLine": 179,
        "endChar": 41
      },
      "revId": "ec9e140009fc17de767e53cd96b1b146e75177d9",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f6b2ede5_12960ff3",
        "filename": "rtc_base/file_rotating_stream.cc",
        "patchSetId": 8
      },
      "lineNbr": 72,
      "author": {
        "id": 5234
      },
      "writtenOn": "2022-03-15T08:41:43Z",
      "side": 1,
      "message": "Could use StringBuilder, but probably not worth optimizing.",
      "range": {
        "startLine": 70,
        "startChar": 0,
        "endLine": 72,
        "endChar": 73
      },
      "revId": "ec9e140009fc17de767e53cd96b1b146e75177d9",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "29ceb7e6_edf10e1d",
        "filename": "rtc_base/file_rotating_stream_unittest.cc",
        "patchSetId": 8
      },
      "lineNbr": 99,
      "author": {
        "id": 5234
      },
      "writtenOn": "2022-03-15T08:41:43Z",
      "side": 1,
      "message": "This method is a candidate for conversion to string_view, later on?",
      "range": {
        "startLine": 99,
        "startChar": 8,
        "endLine": 99,
        "endChar": 41
      },
      "revId": "ec9e140009fc17de767e53cd96b1b146e75177d9",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c66d4df6_471bab1e",
        "filename": "rtc_base/ip_address.cc",
        "patchSetId": 8
      },
      "lineNbr": 286,
      "author": {
        "id": 5087
      },
      "writtenOn": "2022-03-15T08:24:51Z",
      "side": 1,
      "message": "This is one of the examples to discuss with the team and get a consistent rule.",
      "range": {
        "startLine": 286,
        "startChar": 2,
        "endLine": 286,
        "endChar": 48
      },
      "revId": "ec9e140009fc17de767e53cd96b1b146e75177d9",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "026c63df_f39c4f81",
        "filename": "rtc_base/socket_address.cc",
        "patchSetId": 8
      },
      "lineNbr": 199,
      "author": {
        "id": 5234
      },
      "writtenOn": "2022-03-15T08:41:43Z",
      "side": 1,
      "message": "Another case for absl::SimpleAtoI. (For later).",
      "range": {
        "startLine": 199,
        "startChar": 12,
        "endLine": 199,
        "endChar": 19
      },
      "revId": "ec9e140009fc17de767e53cd96b1b146e75177d9",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1dc29d76_c7ed1a9c",
        "filename": "rtc_base/string_encode.cc",
        "patchSetId": 8
      },
      "lineNbr": 252,
      "author": {
        "id": 5234
      },
      "writtenOn": "2022-03-15T08:41:43Z",
      "side": 1,
      "message": "I wonder if this overload is really used?",
      "range": {
        "startLine": 249,
        "startChar": 0,
        "endLine": 252,
        "endChar": 1
      },
      "revId": "ec9e140009fc17de767e53cd96b1b146e75177d9",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "07a04657_be81796b",
        "filename": "rtc_base/string_utils.h",
        "patchSetId": 8
      },
      "lineNbr": 46,
      "author": {
        "id": 5234
      },
      "writtenOn": "2022-03-15T08:41:43Z",
      "side": 1,
      "message": "There\u0027s nothing like this included in abseil?",
      "range": {
        "startLine": 46,
        "startChar": 7,
        "endLine": 46,
        "endChar": 25
      },
      "revId": "ec9e140009fc17de767e53cd96b1b146e75177d9",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4d0ae1bb_13937acc",
        "filename": "rtc_base/strings/json.cc",
        "patchSetId": 8
      },
      "lineNbr": 246,
      "author": {
        "id": 5087
      },
      "writtenOn": "2022-03-14T16:30:24Z",
      "side": 1,
      "message": "not hot path, but this is one of the places I think the ref is better.",
      "range": {
        "startLine": 246,
        "startChar": 2,
        "endLine": 246,
        "endChar": 37
      },
      "revId": "ec9e140009fc17de767e53cd96b1b146e75177d9",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "013531d6_9e1a930c",
        "filename": "rtc_base/strings/json.cc",
        "patchSetId": 8
      },
      "lineNbr": 246,
      "author": {
        "id": 10107
      },
      "writtenOn": "2022-03-14T16:44:13Z",
      "side": 1,
      "message": "Do you mind if I ask why? This seems like the same kind of temporary conversion to std::string as when we call OS APIs (since the json library is external).",
      "parentUuid": "4d0ae1bb_13937acc",
      "range": {
        "startLine": 246,
        "startChar": 2,
        "endLine": 246,
        "endChar": 37
      },
      "revId": "ec9e140009fc17de767e53cd96b1b146e75177d9",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3c6ee5f1_2e82167c",
        "filename": "rtc_base/strings/json.cc",
        "patchSetId": 8
      },
      "lineNbr": 246,
      "author": {
        "id": 5087
      },
      "writtenOn": "2022-03-14T16:51:38Z",
      "side": 1,
      "message": "IIUC this is not a copy (e.g. https://source.chromium.org/chromium/chromium/src/+/main:third_party/jsoncpp/source/include/json/value.h;l\u003d553;drc\u003dc8453d39d1d98ddafd15267d9d55223cdc48f2b1) because jsoncpp has APIs receiving const string\u0026.\n\nThe thing I am not happy about (but I am fine with it in the goal of uniforming the codebase, I just need to get used to it) is the temporary just because string_view introduces a problem (no jsoncpp API takes a string_view, so we are forced to workaround with an extra variable).",
      "parentUuid": "013531d6_9e1a930c",
      "range": {
        "startLine": 246,
        "startChar": 2,
        "endLine": 246,
        "endChar": 37
      },
      "revId": "ec9e140009fc17de767e53cd96b1b146e75177d9",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "683d552b_7c34a093",
        "filename": "rtc_base/strings/json.cc",
        "patchSetId": 8
      },
      "lineNbr": 246,
      "author": {
        "id": 10107
      },
      "writtenOn": "2022-03-14T17:28:43Z",
      "side": 1,
      "message": "Yup, I know what you mean. This specific example is not a hill I\u0027m willing to die on :) but I think we will encounter these types of cases again and again and it would be nice to have an agreement on a guiding principle on how to deal with these.\n\nthe principle I\u0027m going by right now is that we should use string_view internally as much as possible and push conversions to std::string to call sites that call external code (that don\u0027t support string_view or don\u0027t take string length as an argument). The exception would be performance critical parts of webrtc where we would retain std::string all the way. This is in line with internal recommendations. wdyt?\n\nAlso keep in mind that I\u0027m going to adopt string_view outside of rtc_base as well. So eventually code outside of rtc_base that is currently using std::string may very well be converted to string_view. So cases where we can conveniently retain std::string right now may end up being inconvenient later.",
      "parentUuid": "3c6ee5f1_2e82167c",
      "range": {
        "startLine": 246,
        "startChar": 2,
        "endLine": 246,
        "endChar": 37
      },
      "revId": "ec9e140009fc17de767e53cd96b1b146e75177d9",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "544f9cf7_92cabe06",
        "filename": "rtc_base/strings/json.cc",
        "patchSetId": 8
      },
      "lineNbr": 246,
      "author": {
        "id": 5087
      },
      "writtenOn": "2022-03-15T08:24:51Z",
      "side": 1,
      "message": "\u003e Yup, I know what you mean. This specific example is not a hill I\u0027m willing to die on :) but I think we will encounter these types of cases again and again and it would be nice to have an agreement on a guiding principle on how to deal with these.\n\nYes, I agree.\nI suggest a discussion with the WebRTC Core team (e.g. via email) so we get wide agreement on this.\n\n\u003e the principle I\u0027m going by right now is that we should use string_view internally as much as possible and push conversions to std::string to call sites that call external code (that don\u0027t support string_view or don\u0027t take string length as an argument). The exception would be performance critical parts of webrtc where we would retain std::string all the way. This is in line with internal recommendations. wdyt?\n\nSGTM, I am not the best person to detect hot paths, maybe we should loop in other reviewers as well or did you check already?\n\n\u003e Also keep in mind that I\u0027m going to adopt string_view outside of rtc_base as well. So eventually code outside of rtc_base that is currently using std::string may very well be converted to string_view. So cases where we can conveniently retain std::string right now may end up being inconvenient later.",
      "parentUuid": "683d552b_7c34a093",
      "range": {
        "startLine": 246,
        "startChar": 2,
        "endLine": 246,
        "endChar": 37
      },
      "revId": "ec9e140009fc17de767e53cd96b1b146e75177d9",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "82bf51fb_9f80d434",
        "filename": "rtc_base/unique_id_generator.cc",
        "patchSetId": 8
      },
      "lineNbr": 61,
      "author": {
        "id": 5087
      },
      "writtenOn": "2022-03-14T16:30:24Z",
      "side": 1,
      "message": "Should we update https://source.chromium.org/chromium/chromium/src/+/main:third_party/webrtc/rtc_base/string_to_number.h;l\u003d60;drc\u003d988cc0870bb49c855b4547f929462eeb38186d12 and pass the string_view here?",
      "range": {
        "startLine": 61,
        "startChar": 31,
        "endLine": 61,
        "endChar": 49
      },
      "revId": "ec9e140009fc17de767e53cd96b1b146e75177d9",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "836fc08c_104f1412",
        "filename": "rtc_base/unique_id_generator.cc",
        "patchSetId": 8
      },
      "lineNbr": 61,
      "author": {
        "id": 10107
      },
      "writtenOn": "2022-03-14T16:44:13Z",
      "side": 1,
      "message": "I wanted to do the conversion from const char *s separately from const std::string\u0026. I realize now that I could have probably done both at the same time. Could we wait until I get to convert const char* as a follow-up?",
      "parentUuid": "82bf51fb_9f80d434",
      "range": {
        "startLine": 61,
        "startChar": 31,
        "endLine": 61,
        "endChar": 49
      },
      "revId": "ec9e140009fc17de767e53cd96b1b146e75177d9",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b113f5de_48bb8297",
        "filename": "rtc_base/unique_id_generator.cc",
        "patchSetId": 8
      },
      "lineNbr": 61,
      "author": {
        "id": 5087
      },
      "writtenOn": "2022-03-14T16:51:38Z",
      "side": 1,
      "message": "Yes, sounds good to me.\n\nShould we add a TODO here so we don\u0027t forget?",
      "parentUuid": "836fc08c_104f1412",
      "range": {
        "startLine": 61,
        "startChar": 31,
        "endLine": 61,
        "endChar": 49
      },
      "revId": "ec9e140009fc17de767e53cd96b1b146e75177d9",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    }
  ]
}