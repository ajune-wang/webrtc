{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "daee2d1d_a97d953d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 5634
      },
      "writtenOn": "2021-12-06T11:57:27Z",
      "side": 1,
      "message": "WDYT?",
      "revId": "13e1729bcd87f07a2e82693ace495e3230e95d42",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "516a49c7_ee10933c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 5234
      },
      "writtenOn": "2021-12-06T12:04:09Z",
      "side": 1,
      "message": "You could consider to go one step further, and add a constructor/static method with signature\n\n(size_t size, rtc::FunctionView\u003cvoid(rtc::ArrayView\u003cuint8_t\u003e)\u003e initializer)\n\nwhere the given initializer function is supposed to initialize the data. (If useful, could also return a size_t, in case it turns out the buffer should be shrunk before use).",
      "revId": "13e1729bcd87f07a2e82693ace495e3230e95d42",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "902ee13f_a5646cae",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 5634
      },
      "writtenOn": "2021-12-06T13:22:43Z",
      "side": 1,
      "message": "That would be a Good Tool to have, but I think it is a later optimization.",
      "parentUuid": "516a49c7_ee10933c",
      "revId": "13e1729bcd87f07a2e82693ace495e3230e95d42",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6584607d_dd1c9aff",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 5634
      },
      "writtenOn": "2021-12-06T13:22:43Z",
      "side": 1,
      "message": "Hm. I seem to be disagreeing with Danil here.",
      "revId": "13e1729bcd87f07a2e82693ace495e3230e95d42",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "631aaf96_0176c192",
        "filename": "pc/dtls_srtp_transport.cc",
        "patchSetId": 5
      },
      "lineNbr": 231,
      "author": {
        "id": 5852
      },
      "writtenOn": "2021-12-06T15:38:52Z",
      "side": 1,
      "message": "Very minor drive-by nit: I\u0027d use auto here, because the repeated long type name takes more mental effort for me to parse. (Assuming webrtc has the same coding style rules around auto as Chrome does, that is.)",
      "range": {
        "startLine": 231,
        "startChar": 2,
        "endLine": 231,
        "endChar": 38
      },
      "revId": "13e1729bcd87f07a2e82693ace495e3230e95d42",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f83e5d45_5b8d830e",
        "filename": "rtc_base/buffer.h",
        "patchSetId": 5
      },
      "lineNbr": 49,
      "author": {
        "id": 5019
      },
      "writtenOn": "2021-12-06T13:10:07Z",
      "side": 1,
      "message": "The main point of rtc::Buffer is to work with uninitialized data.\nMay be it would be more helpful to rename rtc::Buffer to something that communicates that (instead of just renaming the constructor).\nAnd change rtc::Buffer to std::vector in the code where safety is more important than this optimization.\n\nOn the other hand, the main point of rtc::CopyOnWriteBuffer is different, so there dedicated constructor to note it works with uninitialized bytes might be more helpful.",
      "range": {
        "startLine": 49,
        "startChar": 0,
        "endLine": 49,
        "endChar": 76
      },
      "revId": "13e1729bcd87f07a2e82693ace495e3230e95d42",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e3d0dfeb_b43db19b",
        "filename": "rtc_base/buffer.h",
        "patchSetId": 5
      },
      "lineNbr": 49,
      "author": {
        "id": 5634
      },
      "writtenOn": "2021-12-06T13:22:43Z",
      "side": 1,
      "message": "I kind of expected that rtc::CopyOnWriteBuffer would call this constructor, but it doesn\u0027t. This CL doesn\u0027t touch CopyOnWriteBuffer.\n\nTo my mind, the normal usage of Buffer is that you append to it until you have everything you need - you can set an initial guess at the size, but there\u0027s only a small performance hit if you overrun - no logic function change - and you\u0027re still guaranteed that all the data is available in one contiguous memory area.\n\nFrom CS, it seems that each of the various setter-functions is called ~15 times in the whole codebase - the constructor I\u0027m disliking is not very prominently represented. (Most of the code changes above are in tests)",
      "parentUuid": "f83e5d45_5b8d830e",
      "range": {
        "startLine": 49,
        "startChar": 0,
        "endLine": 49,
        "endChar": 76
      },
      "revId": "13e1729bcd87f07a2e82693ace495e3230e95d42",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5154237c_55092913",
        "filename": "rtc_base/buffer.h",
        "patchSetId": 5
      },
      "lineNbr": 49,
      "author": {
        "id": 5019
      },
      "writtenOn": "2021-12-06T13:31:14Z",
      "side": 1,
      "message": "how rtc::Buffer is better than std::vector for that usage?\n\nstd::vector\u003cuint8_t\u003e buffer;\nbuffer.reserve(expected_capacity);\nbuffer.insert(buffer.end(), data_to_append.begin(), data_to_append.end());",
      "parentUuid": "e3d0dfeb_b43db19b",
      "range": {
        "startLine": 49,
        "startChar": 0,
        "endLine": 49,
        "endChar": 76
      },
      "revId": "13e1729bcd87f07a2e82693ace495e3230e95d42",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a799f74a_a84099b0",
        "filename": "rtc_base/buffer.h",
        "patchSetId": 5
      },
      "lineNbr": 49,
      "author": {
        "id": 5634
      },
      "writtenOn": "2021-12-06T14:40:25Z",
      "side": 1,
      "message": "I think rtc::Buffer may actually be older than the general acceptance of std::vector ... we could think about whether we should limit the use of rtc::Buffer to \"special usages\" and switch all APIs that don\u0027t need the \"special stuff\" to std::vector....",
      "parentUuid": "5154237c_55092913",
      "range": {
        "startLine": 49,
        "startChar": 0,
        "endLine": 49,
        "endChar": 76
      },
      "revId": "13e1729bcd87f07a2e82693ace495e3230e95d42",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    }
  ]
}