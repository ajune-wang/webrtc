{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "b821f46c_9fa6507e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 9405
      },
      "writtenOn": "2022-11-07T16:20:37Z",
      "side": 1,
      "message": "Hi, @hbos@webrtc.org. I made this CL based on your comment. Please take a look. Thanks.",
      "revId": "343af0f7c2ec51e9bdc6235a7d06397804ab77e6",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "53e51340_f1acb17a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 9405
      },
      "writtenOn": "2022-11-08T13:10:05Z",
      "side": 1,
      "message": "Thanks for the review!\nRewriting takes some time, so I\u0027ll share the design of what I\u0027m going to rewrite in advance.\nIt seems like better design not to consider inheritance in enums. Right?\nI plan to declare an enum as below and replace `const char this_class::kType[]` whenever possible. WDTY?\n\n```\n// RTCStatsType enum. See\n// https://w3c.github.io/webrtc-stats/#rtcstatstype-str*\nenum class RTCStatsType {\n  kCodec,\n  kInboundRtp,\n  kOutboundRtp,\n  kRemoteInboundRtp,\n  kRemoteOutboundRtp,\n  // media-source type with kind() is \"audio\"\n  kAudioSource,\n  // media-source type with kind() is \"video\"\n  kVideoSource,\n  // TODO(bugs.webrtc.org/xxxx): Not implemented\n  kMediaPlayout,\n  kPeerConnection,\n  kDataChannel,\n  // TODO(https://crbug.com/webrtc/14419): \"stream\" is deprecated, delete when\n  // upstream no longer depends on it.\n  kDEPRECATED_Stream,\n  // TODO(https://crbug.com/webrtc/14175): \"track\" is deprecated, delete when\n  // upstream no longer depends on it.\n  kDEPRECATED_Track,\n  kTransport,\n  kCandidatePair,\n  kLocalCandidate,\n  kRemoteCandidate,\n  kCertificate\n};\n```",
      "revId": "343af0f7c2ec51e9bdc6235a7d06397804ab77e6",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d4c17e05_b91012d2",
        "filename": "api/stats/rtc_stats.h",
        "patchSetId": 1
      },
      "lineNbr": 60,
      "author": {
        "id": 5142
      },
      "writtenOn": "2022-11-08T10:04:24Z",
      "side": 1,
      "message": "Call it RTCStatsType, that\u0027s what it\u0027s called in the spec:\nhttps://w3c.github.io/webrtc-stats/#rtctatstype-*\n\nAlso with such an explicit name as RTCStatsType, I think I prefer this to be moved out of the class (put it above in the webrtc namespace)",
      "revId": "343af0f7c2ec51e9bdc6235a7d06397804ab77e6",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "35af630b_14109472",
        "filename": "api/stats/rtc_stats.h",
        "patchSetId": 1
      },
      "lineNbr": 61,
      "author": {
        "id": 5142
      },
      "writtenOn": "2022-11-08T10:04:24Z",
      "side": 1,
      "message": "Use \"enum class\" rather than enum, amongst other benefits it also forced you to prefix all the enum references as \"RTCStatsType::kCodec\". This means you don\u0027t have to add a postfix to clarify what type of enum it is.\n\nSo you can remove all the \"Stats\" endings in the names. Make the names the same as the spec.",
      "revId": "343af0f7c2ec51e9bdc6235a7d06397804ab77e6",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "922f00e0_9d70342e",
        "filename": "api/stats/rtc_stats.h",
        "patchSetId": 1
      },
      "lineNbr": 65,
      "author": {
        "id": 5142
      },
      "writtenOn": "2022-11-08T10:04:24Z",
      "side": 1,
      "message": "The comma belongs before the comment, e.g.\n\nkIceCandidateStats,  // Comment",
      "revId": "343af0f7c2ec51e9bdc6235a7d06397804ab77e6",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0b7bc81b_8468d9af",
        "filename": "api/stats/rtc_stats.h",
        "patchSetId": 1
      },
      "lineNbr": 72,
      "author": {
        "id": 5142
      },
      "writtenOn": "2022-11-08T10:04:24Z",
      "side": 1,
      "message": "\"stream\" and \"track\" are on track for being deprecated. Can you replace these two with:\n\n```\n  // TODO(https://crbug.com/webrtc/14419): \"stream\" is deprecated, delete when upstream no longer depends on it.\n  kDEPRECATED_Stream,\n  // TODO(https://crbug.com/webrtc/14175): \"track\" is deprecated, delete when upstream no longer depends on it.\n  kDEPRECATED_Track,\n```\nYou might want to put them at the bottom of the list as well, but that\u0027s optional",
      "revId": "343af0f7c2ec51e9bdc6235a7d06397804ab77e6",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f5513169_62852aa3",
        "filename": "api/stats/rtc_stats.h",
        "patchSetId": 1
      },
      "lineNbr": 79,
      "author": {
        "id": 5142
      },
      "writtenOn": "2022-11-08T10:04:24Z",
      "side": 1,
      "message": "After thinking about this some more, I must say I\u0027ve changed my mind about supporting DCHECK-safe upcasting or using cast_to\u003c\u003e for parent classes. Let me elaborate.\n\nI don\u0027t think we want to have types for the parent classes, only for the classes that stats object are instantiated as. E.g. a stats object can have type inbound-rtp or remote-inbound-rtp, but it would never have the type \"received-rtp-stream-stats\". This type is just editorial in the spec and not actually a stats object, and the parent class in C++ likewise is just to avoid repeating the same stats members in multiple places.\n\nThe problem with mixing both child types and parent types in the same type enum is that even if you handle all RTCStatsTypes defined in the spec, you\u0027ve not exhausted all the enum types in C++.\n  You also have a lot more complexity such as needing a virtual classof\u003c\u003e that you must remember to override everywhere, when in reality you can quite easily avoid the edge cases where being able to cast to a parent is needed.\n\nA stats parser *should* handle all stats types and then do a down-cast to the relevant RTCStatsType. It is only when we do this down-cast that we need to have DCHECKs. If we later up-cast, you don\u0027t need cast_to\u003c\u003e(), you already have compile-time safety in place when you up-cast.\n\nFor example `RTCMediaSourceStats* media_source \u003d video_source;` has compile-time safety. You should never prefer to `video_source-\u003ecast_to\u003cRTCMediaSourceStats\u003e()` anyway. Runtime safety is not as nice as compile time safety. There is also static_cast\u003c\u003e if there is some edge case I\u0027m not thinking about.\n\nI still think we should have an `enum class RTCStatsType`, but I think we should keep the casting as simple as possible and only support \"type \u003d\u003d kType\" like before.",
      "revId": "343af0f7c2ec51e9bdc6235a7d06397804ab77e6",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "463c5c45_81dc3af6",
        "filename": "api/stats/rtc_stats.h",
        "patchSetId": 1
      },
      "lineNbr": 96,
      "author": {
        "id": 5142
      },
      "writtenOn": "2022-11-08T10:04:24Z",
      "side": 1,
      "message": "Could the tests be updated to use real RTCStatsTypes even if they are used in a test-only way? Would be nice not to have to expose test types in the API",
      "revId": "343af0f7c2ec51e9bdc6235a7d06397804ab77e6",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f50f4c61_3f92eca6",
        "filename": "api/stats/rtc_stats.h",
        "patchSetId": 1
      },
      "lineNbr": 96,
      "author": {
        "id": 8683
      },
      "writtenOn": "2022-11-08T12:05:07Z",
      "side": 1,
      "message": "I agree, I would prefer to not have these exposed here.",
      "parentUuid": "463c5c45_81dc3af6",
      "revId": "343af0f7c2ec51e9bdc6235a7d06397804ab77e6",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9af26ff7_d3df7398",
        "filename": "api/stats/rtc_stats.h",
        "patchSetId": 1
      },
      "lineNbr": 132,
      "author": {
        "id": 8683
      },
      "writtenOn": "2022-11-08T12:05:07Z",
      "side": 1,
      "message": "If StatsKind() was instead static, this could be replaced with something like \n  \n  RTC_DCHECK_EQ(T::kStatsKind, this-\u003ekStatsKind);\n  \nThis would avoid having to have two methods implemented for the stats kind, as well as having to implement two methods.",
      "range": {
        "startLine": 132,
        "startChar": 15,
        "endLine": 132,
        "endChar": 32
      },
      "revId": "343af0f7c2ec51e9bdc6235a7d06397804ab77e6",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bf19048c_23378d9c",
        "filename": "api/stats/rtc_stats.h",
        "patchSetId": 1
      },
      "lineNbr": 203,
      "author": {
        "id": 8683
      },
      "writtenOn": "2022-11-08T12:05:07Z",
      "side": 1,
      "message": "It would be nice to have type_str and kind unified. For example, you could use an std::array here for the enum type,\n\n  constexpr size_t kNumStatsKindType \u003d StatsKindType::kTransportStats + 1;\n  constexpr std::array\u003cconst char [], kNumStatsKindType\u003e kStatTypeNames \u003d {\n    \"certificate\",\n    ...  \n  };\n\n  ...\n  constexpr char this_class:kType[] \u003d std::get\u003ckind\u003e(kStatTypeNames);\n  \n  \nThis could however be done in a follow-up CL.",
      "range": {
        "startLine": 203,
        "startChar": 35,
        "endLine": 203,
        "endChar": 43
      },
      "revId": "343af0f7c2ec51e9bdc6235a7d06397804ab77e6",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    }
  ]
}