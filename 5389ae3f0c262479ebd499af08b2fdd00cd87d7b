{
  "comments": [
    {
      "key": {
        "uuid": "ad61ab89_309aeef0",
        "filename": "p2p/base/basic_ice_controller.cc",
        "patchSetId": 2
      },
      "lineNbr": 13,
      "author": {
        "id": 6646
      },
      "writtenOn": "2019-11-05T00:10:14Z",
      "side": 1,
      "message": "please remove",
      "range": {
        "startLine": 13,
        "startChar": 0,
        "endLine": 13,
        "endChar": 1
      },
      "revId": "5389ae3f0c262479ebd499af08b2fdd00cd87d7b",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3854cec2_8169641e",
        "filename": "p2p/base/basic_ice_controller.h",
        "patchSetId": 2
      },
      "lineNbr": 23,
      "author": {
        "id": 6646
      },
      "writtenOn": "2019-11-05T00:10:14Z",
      "side": 1,
      "message": "nit: the newer code is generally scoped to the webrtc namespace.",
      "range": {
        "startLine": 23,
        "startChar": 10,
        "endLine": 23,
        "endChar": 17
      },
      "revId": "5389ae3f0c262479ebd499af08b2fdd00cd87d7b",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "30d65beb_375ac9d5",
        "filename": "p2p/base/basic_ice_controller.h",
        "patchSetId": 2
      },
      "lineNbr": 30,
      "author": {
        "id": 6646
      },
      "writtenOn": "2019-11-05T00:10:14Z",
      "side": 1,
      "message": "If we rely on utilities provided by the transport, injecting a back-pointer to the transport may be a scalable solution. GetStats() is already part of the public APIs and connections() can be refactored to a formal public API (say GetConnections or GetCandidatePairs). The back-pointer should be safe since presumably the transport would own the controller.",
      "range": {
        "startLine": 28,
        "startChar": 0,
        "endLine": 30,
        "endChar": 38
      },
      "revId": "5389ae3f0c262479ebd499af08b2fdd00cd87d7b",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8269fd5d_a3b10122",
        "filename": "p2p/base/basic_ice_controller.h",
        "patchSetId": 2
      },
      "lineNbr": 30,
      "author": {
        "id": 6252
      },
      "writtenOn": "2019-11-05T17:47:28Z",
      "side": 1,
      "message": "If I understand correctly, the logic of sorting will be moved to this file in a subsequent cl.",
      "parentUuid": "30d65beb_375ac9d5",
      "range": {
        "startLine": 28,
        "startChar": 0,
        "endLine": 30,
        "endChar": 38
      },
      "revId": "5389ae3f0c262479ebd499af08b2fdd00cd87d7b",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f3c749a8_be52e2db",
        "filename": "p2p/base/ice_controller_interface.h",
        "patchSetId": 2
      },
      "lineNbr": 26,
      "author": {
        "id": 6646
      },
      "writtenOn": "2019-11-05T00:10:14Z",
      "side": 1,
      "message": "nit: \u003d default",
      "range": {
        "startLine": 26,
        "startChar": 36,
        "endLine": 26,
        "endChar": 38
      },
      "revId": "5389ae3f0c262479ebd499af08b2fdd00cd87d7b",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cb2a63f2_bc02248c",
        "filename": "p2p/base/ice_controller_interface.h",
        "patchSetId": 2
      },
      "lineNbr": 28,
      "author": {
        "id": 6646
      },
      "writtenOn": "2019-11-05T00:10:14Z",
      "side": 1,
      "message": "nit: could use a consistent style of comments",
      "range": {
        "startLine": 28,
        "startChar": 2,
        "endLine": 28,
        "endChar": 5
      },
      "revId": "5389ae3f0c262479ebd499af08b2fdd00cd87d7b",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6a378c14_6ab6fd39",
        "filename": "p2p/base/ice_controller_interface.h",
        "patchSetId": 2
      },
      "lineNbr": 29,
      "author": {
        "id": 6646
      },
      "writtenOn": "2019-11-05T00:10:14Z",
      "side": 1,
      "message": "typo",
      "range": {
        "startLine": 29,
        "startChar": 71,
        "endLine": 29,
        "endChar": 77
      },
      "revId": "5389ae3f0c262479ebd499af08b2fdd00cd87d7b",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5a60e371_8c6d1646",
        "filename": "p2p/base/ice_controller_interface.h",
        "patchSetId": 2
      },
      "lineNbr": 34,
      "author": {
        "id": 6646
      },
      "writtenOn": "2019-11-05T00:10:14Z",
      "side": 1,
      "message": "I feel we may need to pin down the API design for the controller interface, specifically what belongs here and what should be left in the transport. For example, if AddConnection is part of the controller, how about CreateConnection? SetIceConfig vs SetIceRole? We have a broad range of methods that can mutate the transport state, and the current selection feels a bit unclear in the rationale. If SelectConnectionToPing and FindNextPingableConnection are main targets we are trying to factor out, the scope of this could be a bit smaller to focus that.",
      "range": {
        "startLine": 31,
        "startChar": 0,
        "endLine": 34,
        "endChar": 71
      },
      "revId": "5389ae3f0c262479ebd499af08b2fdd00cd87d7b",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ad9ccd2b_fa5d42c9",
        "filename": "p2p/base/ice_controller_interface.h",
        "patchSetId": 2
      },
      "lineNbr": 34,
      "author": {
        "id": 6252
      },
      "writtenOn": "2019-11-05T17:47:28Z",
      "side": 1,
      "message": "Agree on this. \nI understand this is a kind of intermediate CL and the final api could change.\nSo I suggest we put a list of apis as the \"final api\" and the rest as \"temporary api\" for current implementation. \nFor example, I think eventually we won\u0027t need SetSelectedConnection here. We should choose the selected connection in this class and signal the result to the p2ptransportchannel. \nWDYT?",
      "parentUuid": "5a60e371_8c6d1646",
      "range": {
        "startLine": 31,
        "startChar": 0,
        "endLine": 34,
        "endChar": 71
      },
      "revId": "5389ae3f0c262479ebd499af08b2fdd00cd87d7b",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fd38857c_15614318",
        "filename": "p2p/base/p2p_transport_channel.cc",
        "patchSetId": 2
      },
      "lineNbr": 2246,
      "author": {
        "id": 6252
      },
      "writtenOn": "2019-11-04T23:51:19Z",
      "side": 1,
      "message": "Remove this comment.",
      "range": {
        "startLine": 2246,
        "startChar": 19,
        "endLine": 2246,
        "endChar": 29
      },
      "revId": "5389ae3f0c262479ebd499af08b2fdd00cd87d7b",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    }
  ]
}