{
  "comments": [
    {
      "key": {
        "uuid": "b73835ce_f60b0057",
        "filename": "pc/peerconnection.cc",
        "patchSetId": 15
      },
      "lineNbr": 6037,
      "author": {
        "id": 5887
      },
      "writtenOn": "2018-06-22T18:21:53Z",
      "side": 1,
      "message": "Like I mentioned in the email, I think we can just call this macro in the two branches above to work around the macro problem.",
      "range": {
        "startLine": 6037,
        "startChar": 6,
        "endLine": 6037,
        "endChar": 31
      },
      "revId": "149929cfee0577f49d9e1c9fc9ac89ee1badb062",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5d55656b_fa5c4e98",
        "filename": "pc/peerconnection.cc",
        "patchSetId": 15
      },
      "lineNbr": 6037,
      "author": {
        "id": 5053
      },
      "writtenOn": "2018-06-22T20:10:16Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "b73835ce_f60b0057",
      "range": {
        "startLine": 6037,
        "startChar": 6,
        "endLine": 6037,
        "endChar": 31
      },
      "revId": "149929cfee0577f49d9e1c9fc9ac89ee1badb062",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "39998819_f7b89e5f",
        "filename": "pc/peerconnection_integrationtest.cc",
        "patchSetId": 15
      },
      "lineNbr": 1534,
      "author": {
        "id": 5053
      },
      "writtenOn": "2018-06-22T20:10:16Z",
      "side": 1,
      "message": "This seems racy; how about just doing \"ASSERT_TRUE_WAIT(DtlsConnected(), kDefaultTimeout);\" above instead of \"SignalingStateStable()\"? Or does the callee *never* call ReportNegotiatedCiphers? If so that sounds like a bug, which would end up skewing our numbers. If so, can you file a bug and link it in \"TODO(bugs.webrtc.org/####)\"?",
      "revId": "149929cfee0577f49d9e1c9fc9ac89ee1badb062",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b2273d75_3273b948",
        "filename": "pc/peerconnection_integrationtest.cc",
        "patchSetId": 15
      },
      "lineNbr": 1534,
      "author": {
        "id": 5887
      },
      "writtenOn": "2018-06-26T21:21:31Z",
      "side": 1,
      "message": "If I understand it correctly, the callee *never* calls ReportNegotiatedCiphers or ReportTransportStats (which calls ReportNegotiatedCiphers). ReportTransportStats is invoked when cricket::kIceConnectionCompleted, which only happens for the ICE-controlling role. I have filed a bug and linked this snippet to it.\n\nCan you also elaborate a bit why you think this could be racy? I am not sure if I understand the race condition, but do you mean both the caller and the callee may add to the counter and SignalingStateStable() may race with either addition so that the expectation below can be nondeterministic, if we fix the current buggy behavior?",
      "parentUuid": "39998819_f7b89e5f",
      "revId": "149929cfee0577f49d9e1c9fc9ac89ee1badb062",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "61f0fb8b_90b3026f",
        "filename": "pc/peerconnection_integrationtest.cc",
        "patchSetId": 15
      },
      "lineNbr": 1534,
      "author": {
        "id": 5053
      },
      "writtenOn": "2018-06-27T23:37:03Z",
      "side": 1,
      "message": "I was assuming this was happening because the caller simply became connected first, and thus it would be racy because the caller *and* callee could become connected within the above EXPECT_EQ_WAIT, resulting in a count of 2. I didn\u0027t realize the callee just never reports cipher stats.",
      "parentUuid": "b2273d75_3273b948",
      "revId": "149929cfee0577f49d9e1c9fc9ac89ee1badb062",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3bc37cd3_14da9505",
        "filename": "pc/peerconnection_integrationtest.cc",
        "patchSetId": 15
      },
      "lineNbr": 1534,
      "author": {
        "id": 5887
      },
      "writtenOn": "2018-06-28T01:21:37Z",
      "side": 1,
      "message": "I see, and if I understand it correctly it can be racy if we fix the bug so that it is possible both caller and the callee become connected and we have a problem in counting. I have changed SignalingStateStable() to DtlsConnected() to be future-proof.",
      "parentUuid": "61f0fb8b_90b3026f",
      "revId": "149929cfee0577f49d9e1c9fc9ac89ee1badb062",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    }
  ]
}