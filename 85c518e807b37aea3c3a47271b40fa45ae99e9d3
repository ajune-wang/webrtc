{
  "comments": [
    {
      "key": {
        "uuid": "67e39f28_2d24832c",
        "filename": "sdk/android/BUILD.gn",
        "patchSetId": 2
      },
      "lineNbr": 993,
      "author": {
        "id": 5126
      },
      "writtenOn": "2019-01-17T21:11:01Z",
      "side": 1,
      "message": "Redundant. (In GN, path/to/foo:foo and path/to/foo are the same target.)",
      "range": {
        "startLine": 993,
        "startChar": 21,
        "endLine": 993,
        "endChar": 30
      },
      "revId": "85c518e807b37aea3c3a47271b40fa45ae99e9d3",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9d21bd6c_f581872d",
        "filename": "sdk/android/native_api/stacktrace/stacktrace.cc",
        "patchSetId": 2
      },
      "lineNbr": 38,
      "author": {
        "id": 5126
      },
      "writtenOn": "2019-01-17T21:11:01Z",
      "side": 1,
      "message": "You don\u0027t need `static` inside an unnamed namespace. And use constexpr?",
      "range": {
        "startLine": 38,
        "startChar": 0,
        "endLine": 38,
        "endChar": 12
      },
      "revId": "85c518e807b37aea3c3a47271b40fa45ae99e9d3",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "095505a9_465be234",
        "filename": "sdk/android/native_api/stacktrace/stacktrace.cc",
        "patchSetId": 2
      },
      "lineNbr": 42,
      "author": {
        "id": 5126
      },
      "writtenOn": "2019-01-17T21:11:01Z",
      "side": 1,
      "message": "Here too.",
      "revId": "85c518e807b37aea3c3a47271b40fa45ae99e9d3",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "080b4363_627c0e9f",
        "filename": "sdk/android/native_api/stacktrace/stacktrace.cc",
        "patchSetId": 2
      },
      "lineNbr": 49,
      "author": {
        "id": 5087
      },
      "writtenOn": "2019-01-18T08:07:44Z",
      "side": 1,
      "message": "Can we use std::atomic? We are (really really slowly) trying to remove rtc::AtomicOps. :)\n\nThis one can become:\n\n  std::atomic_store_explicit(\u0026futex_, 0, std::memory_order_release)\n\n(same on line 66).",
      "range": {
        "startLine": 49,
        "startChar": 29,
        "endLine": 49,
        "endChar": 70
      },
      "revId": "85c518e807b37aea3c3a47271b40fa45ae99e9d3",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9975810c_ac4f5327",
        "filename": "sdk/android/native_api/stacktrace/stacktrace.cc",
        "patchSetId": 2
      },
      "lineNbr": 52,
      "author": {
        "id": 5126
      },
      "writtenOn": "2019-01-17T21:11:01Z",
      "side": 1,
      "message": "Spend a sentence documenting this function and its return value?",
      "revId": "85c518e807b37aea3c3a47271b40fa45ae99e9d3",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e6de4b8d_38fa4665",
        "filename": "sdk/android/native_api/stacktrace/stacktrace.cc",
        "patchSetId": 2
      },
      "lineNbr": 58,
      "author": {
        "id": 5087
      },
      "writtenOn": "2019-01-18T08:07:44Z",
      "side": 1,
      "message": "This will become:\n\n  std::atomic_load_explicit(\u0026futex_, std::memory_order_acquire)",
      "range": {
        "startLine": 58,
        "startChar": 10,
        "endLine": 58,
        "endChar": 46
      },
      "revId": "85c518e807b37aea3c3a47271b40fa45ae99e9d3",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7830fffd_356ba51a",
        "filename": "sdk/android/native_api/stacktrace/stacktrace.cc",
        "patchSetId": 2
      },
      "lineNbr": 58,
      "author": {
        "id": 5508
      },
      "writtenOn": "2019-01-18T08:49:36Z",
      "side": 1,
      "message": "note also that this doesn\u0027t reset the value, so the event seems to now be indefinitely signaled and no guarantee that if Wait() is called again that it won\u0027t be immediately satisfied.\nCould use CompareAndSwap here instead to avoid more than one wait to be satisfied.\nAnother thing you could do is to conditionally decrement for every wait, and increment for every signal.\nI also don\u0027t see thread checks, so if considerations for what happens if Wait() is called from multiple threads either need to be taken into account or document the fact that we don\u0027t expect Wait() to be called on multiple threads (i.e. single \"waiter\").",
      "parentUuid": "e6de4b8d_38fa4665",
      "range": {
        "startLine": 58,
        "startChar": 10,
        "endLine": 58,
        "endChar": 46
      },
      "revId": "85c518e807b37aea3c3a47271b40fa45ae99e9d3",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "eed952a1_507d090e",
        "filename": "sdk/android/native_api/stacktrace/stacktrace.cc",
        "patchSetId": 2
      },
      "lineNbr": 66,
      "author": {
        "id": 5508
      },
      "writtenOn": "2019-01-18T08:49:36Z",
      "side": 1,
      "message": "in case two threads were to call Signal back to back, without a wait being satisfied, two signals could result in a single wait being satisfied.\n\nIs that OK and am I understanding it correctly that the AsyncSafeWaitableEvent class is meant to be used only for a single Wait() and then discarded (never reused)?\n\nIf so, that\u0027s probably good to document.",
      "revId": "85c518e807b37aea3c3a47271b40fa45ae99e9d3",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a30f7f90_f800dd50",
        "filename": "sdk/android/native_api/stacktrace/stacktrace.cc",
        "patchSetId": 2
      },
      "lineNbr": 72,
      "author": {
        "id": 5087
      },
      "writtenOn": "2019-01-18T08:07:44Z",
      "side": 1,
      "message": "And this:\n\n  std::atomic\u003cint\u003e futex_;",
      "range": {
        "startLine": 72,
        "startChar": 2,
        "endLine": 72,
        "endChar": 13
      },
      "revId": "85c518e807b37aea3c3a47271b40fa45ae99e9d3",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "edb54bee_6e330051",
        "filename": "sdk/android/native_api/stacktrace/stacktrace.cc",
        "patchSetId": 2
      },
      "lineNbr": 80,
      "author": {
        "id": 5508
      },
      "writtenOn": "2019-01-18T08:49:36Z",
      "side": 1,
      "message": "nit: stack_size_counter",
      "revId": "85c518e807b37aea3c3a47271b40fa45ae99e9d3",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c383d82e_1ff35777",
        "filename": "sdk/android/native_api/stacktrace/stacktrace.cc",
        "patchSetId": 2
      },
      "lineNbr": 90,
      "author": {
        "id": 5126
      },
      "writtenOn": "2019-01-17T21:11:01Z",
      "side": 1,
      "message": "Not needed.",
      "range": {
        "startLine": 90,
        "startChar": 0,
        "endLine": 90,
        "endChar": 6
      },
      "revId": "85c518e807b37aea3c3a47271b40fa45ae99e9d3",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fc0c1104_8195a5d1",
        "filename": "sdk/android/native_api/stacktrace/stacktrace.cc",
        "patchSetId": 2
      },
      "lineNbr": 142,
      "author": {
        "id": 5508
      },
      "writtenOn": "2019-01-18T08:49:36Z",
      "side": 1,
      "message": "FYI - RTC_LOG on android might do blocking IO operations. I don\u0027t know how relevant that is in this case, but holding a lock while logging doesn\u0027t feel good knowing that, just fyi. Sprinkling that pattern around the code base is bound to have a trickling effect on pretty much everything.",
      "revId": "85c518e807b37aea3c3a47271b40fa45ae99e9d3",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bc7af465_04e0ef18",
        "filename": "sdk/android/native_api/stacktrace/stacktrace.cc",
        "patchSetId": 2
      },
      "lineNbr": 143,
      "author": {
        "id": 5126
      },
      "writtenOn": "2019-01-17T21:11:01Z",
      "side": 1,
      "message": "Just {} will work too.",
      "range": {
        "startLine": 143,
        "startChar": 13,
        "endLine": 143,
        "endChar": 45
      },
      "revId": "85c518e807b37aea3c3a47271b40fa45ae99e9d3",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "119c1ac1_3530545f",
        "filename": "sdk/android/native_api/stacktrace/stacktrace.cc",
        "patchSetId": 2
      },
      "lineNbr": 157,
      "author": {
        "id": 5126
      },
      "writtenOn": "2019-01-17T21:11:01Z",
      "side": 1,
      "message": "\u003c\u003c \"for thread \" \u003c\u003c tid;",
      "range": {
        "startLine": 157,
        "startChar": 24,
        "endLine": 157,
        "endChar": 31
      },
      "revId": "85c518e807b37aea3c3a47271b40fa45ae99e9d3",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "734242e8_ba2aa6a7",
        "filename": "sdk/android/native_api/stacktrace/stacktrace.cc",
        "patchSetId": 2
      },
      "lineNbr": 157,
      "author": {
        "id": 5508
      },
      "writtenOn": "2019-01-18T08:49:36Z",
      "side": 1,
      "message": "does that not generate more code + more and longer strings?",
      "parentUuid": "119c1ac1_3530545f",
      "range": {
        "startLine": 157,
        "startChar": 24,
        "endLine": 157,
        "endChar": 31
      },
      "revId": "85c518e807b37aea3c3a47271b40fa45ae99e9d3",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4241422f_5ab0e856",
        "filename": "sdk/android/native_api/stacktrace/stacktrace.cc",
        "patchSetId": 2
      },
      "lineNbr": 210,
      "author": {
        "id": 5126
      },
      "writtenOn": "2019-01-17T21:11:01Z",
      "side": 1,
      "message": "Use Release() instead, to avoid making a copy of the string.",
      "range": {
        "startLine": 210,
        "startChar": 24,
        "endLine": 210,
        "endChar": 27
      },
      "revId": "85c518e807b37aea3c3a47271b40fa45ae99e9d3",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fc728f67_8d2fc309",
        "filename": "sdk/android/native_api/stacktrace/stacktrace.h",
        "patchSetId": 2
      },
      "lineNbr": 23,
      "author": {
        "id": 5126
      },
      "writtenOn": "2019-01-17T21:11:01Z",
      "side": 1,
      "message": "Is the pc always 32 bits?",
      "revId": "85c518e807b37aea3c3a47271b40fa45ae99e9d3",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9176989d_e71272b5",
        "filename": "sdk/android/native_api/stacktrace/stacktrace.h",
        "patchSetId": 2
      },
      "lineNbr": 23,
      "author": {
        "id": 5508
      },
      "writtenOn": "2019-01-18T08:49:36Z",
      "side": 1,
      "message": "looks like this is an address offset rather than representing the instruction pointer. rename variable? for an offset, I think 32bits is OK for now :)",
      "parentUuid": "fc728f67_8d2fc309",
      "revId": "85c518e807b37aea3c3a47271b40fa45ae99e9d3",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "50e97430_6f51993e",
        "filename": "sdk/android/native_unittests/stacktrace/stacktrace_unittest.cc",
        "patchSetId": 2
      },
      "lineNbr": 26,
      "author": {
        "id": 5508
      },
      "writtenOn": "2019-01-18T08:49:36Z",
      "side": 1,
      "message": "nit: \"GetAddress()\" is a little ambiguous as a function name. Could call this GetCurrentModuleRelativeExecutionAddress() :D",
      "revId": "85c518e807b37aea3c3a47271b40fa45ae99e9d3",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "17efbdb5_6d975304",
        "filename": "sdk/android/native_unittests/stacktrace/stacktrace_unittest.cc",
        "patchSetId": 2
      },
      "lineNbr": 103,
      "author": {
        "id": 5126
      },
      "writtenOn": "2019-01-17T21:11:01Z",
      "side": 1,
      "message": "Use std::atomic\u003cbool\u003e instead; volatile doesn\u0027t give you atomic instructions.",
      "revId": "85c518e807b37aea3c3a47271b40fa45ae99e9d3",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    }
  ]
}