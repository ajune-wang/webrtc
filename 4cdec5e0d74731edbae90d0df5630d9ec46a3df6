{
  "comments": [
    {
      "key": {
        "uuid": "16d53f3b_b38db23b",
        "filename": "test/scenario/call_client.cc",
        "patchSetId": 6
      },
      "lineNbr": 179,
      "author": {
        "id": 7332
      },
      "writtenOn": "2019-03-29T18:56:53Z",
      "side": 1,
      "message": "To avoid repeating yourself, what about naming the computation?\nint size \u003d packet.data.size() - route_overhead_.at(packet.to.ipaddr()).bytes());",
      "revId": "4cdec5e0d74731edbae90d0df5630d9ec46a3df6",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fb5ec06f_98305894",
        "filename": "test/scenario/call_client.cc",
        "patchSetId": 6
      },
      "lineNbr": 179,
      "author": {
        "id": 6337
      },
      "writtenOn": "2019-04-01T09:01:51Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "16d53f3b_b38db23b",
      "revId": "4cdec5e0d74731edbae90d0df5630d9ec46a3df6",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "20a9d768_2f11a1a6",
        "filename": "test/scenario/call_client.h",
        "patchSetId": 6
      },
      "lineNbr": 109,
      "author": {
        "id": 7332
      },
      "writtenOn": "2019-03-29T18:56:53Z",
      "side": 1,
      "message": "This makes me nervous!\n* IPAddress::operator\u003c isn\u0027t completely trivial. Any failure to comply to `compare` requirement would cause tricky bugs.\n* std::map is pretty slow (no cache friendly).\n\nYou don\u0027t need ordering, as far as I can tell. Why not using absl::flat_hash_map?",
      "revId": "4cdec5e0d74731edbae90d0df5630d9ec46a3df6",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ea0fade0_bd1b269d",
        "filename": "test/scenario/call_client.h",
        "patchSetId": 6
      },
      "lineNbr": 109,
      "author": {
        "id": 6337
      },
      "writtenOn": "2019-04-01T09:01:51Z",
      "side": 1,
      "message": "I\u0027m not sure, that we can use this type in webrtc... At least it failed to compile.\nrtc::IPAddress compare looks correct. Especially we are using quite simple IPs here.",
      "parentUuid": "20a9d768_2f11a1a6",
      "revId": "4cdec5e0d74731edbae90d0df5630d9ec46a3df6",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7abe4195_44f2d5d3",
        "filename": "test/scenario/call_client.h",
        "patchSetId": 6
      },
      "lineNbr": 109,
      "author": {
        "id": 7332
      },
      "writtenOn": "2019-04-01T09:34:04Z",
      "side": 1,
      "message": "Yes you must provide the hash function for compilation.\nI still think we should default to flat_hash when no ordering is needed, but that\u0027s good enough as is!",
      "parentUuid": "ea0fade0_bd1b269d",
      "revId": "4cdec5e0d74731edbae90d0df5630d9ec46a3df6",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dfdde04f_2ba6d7c2",
        "filename": "test/scenario/network/network_emulation.cc",
        "patchSetId": 6
      },
      "lineNbr": 268,
      "author": {
        "id": 7332
      },
      "writtenOn": "2019-03-29T18:56:53Z",
      "side": 1,
      "message": "\"Pass by value and use std::move\"",
      "revId": "4cdec5e0d74731edbae90d0df5630d9ec46a3df6",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "161f4529_3aa50d1b",
        "filename": "test/scenario/network/network_emulation.h",
        "patchSetId": 6
      },
      "lineNbr": 54,
      "author": {
        "id": 7332
      },
      "writtenOn": "2019-03-29T18:56:53Z",
      "side": 1,
      "message": "From our friend clang-tidy: move constructors should be marked noexcept [hicpp-noexcept-move]",
      "range": {
        "startLine": 53,
        "startChar": 2,
        "endLine": 54,
        "endChar": 50
      },
      "revId": "4cdec5e0d74731edbae90d0df5630d9ec46a3df6",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "629eabf6_d422a1fa",
        "filename": "test/scenario/network/network_emulation.h",
        "patchSetId": 6
      },
      "lineNbr": 54,
      "author": {
        "id": 7332
      },
      "writtenOn": "2019-04-01T12:17:30Z",
      "side": 1,
      "message": "The default move doesn\u0027t throw here, so cland-tidy suggestion is to add the noexcept qualifier.\nOtherwise, some std library containers won\u0027t be able to use the move methods at all.\n\nBy the way, if \u0027\u003d default\u0027 is used in the header, there is no such diagnostic. I guess it\u0027s because the compiler can then infer the noexcept behavior.\nSo, either add \u0027noexcept\u0027 or \u0027\u003d default\u0027. I think the second option is neater and more descriptive anyway.\n\nRef: Rule 12.5.4 https://www.perforce.com/resources/qac/high-integrity-cpp-coding-standard",
      "parentUuid": "161f4529_3aa50d1b",
      "range": {
        "startLine": 53,
        "startChar": 2,
        "endLine": 54,
        "endChar": 50
      },
      "revId": "4cdec5e0d74731edbae90d0df5630d9ec46a3df6",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "78a426c5_c3e82024",
        "filename": "test/scenario/network/network_emulation.h",
        "patchSetId": 6
      },
      "lineNbr": 124,
      "author": {
        "id": 7332
      },
      "writtenOn": "2019-03-29T18:56:53Z",
      "side": 1,
      "message": "Consider using const reference!",
      "revId": "4cdec5e0d74731edbae90d0df5630d9ec46a3df6",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ed8a1219_2087f1b8",
        "filename": "test/scenario/network_node.cc",
        "patchSetId": 6
      },
      "lineNbr": 122,
      "author": {
        "id": 7332
      },
      "writtenOn": "2019-03-29T18:56:53Z",
      "side": 1,
      "message": "Why is local_address_ used here and not on line 110 and 182?",
      "revId": "4cdec5e0d74731edbae90d0df5630d9ec46a3df6",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0dd74bab_2182df25",
        "filename": "test/scenario/network_node.cc",
        "patchSetId": 6
      },
      "lineNbr": 122,
      "author": {
        "id": 6337
      },
      "writtenOn": "2019-04-01T09:01:51Z",
      "side": 1,
      "message": "110 - Done\n182 - is another class",
      "parentUuid": "ed8a1219_2087f1b8",
      "revId": "4cdec5e0d74731edbae90d0df5630d9ec46a3df6",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "51cf13ad_b5773e5a",
        "filename": "test/scenario/network_node.cc",
        "patchSetId": 6
      },
      "lineNbr": 129,
      "author": {
        "id": 7332
      },
      "writtenOn": "2019-03-29T18:56:53Z",
      "side": 1,
      "message": "You might indicate which component prevents to use version-agnostic IPAddress. Is it NetworkRoute?",
      "revId": "4cdec5e0d74731edbae90d0df5630d9ec46a3df6",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8d146542_0cf4fbec",
        "filename": "test/scenario/network_node.cc",
        "patchSetId": 6
      },
      "lineNbr": 129,
      "author": {
        "id": 6337
      },
      "writtenOn": "2019-04-01T09:01:51Z",
      "side": 1,
      "message": "Yep. We needn\u0027t full range of IP addresses and also we need simple way to convert IP into network id to signal.",
      "parentUuid": "51cf13ad_b5773e5a",
      "revId": "4cdec5e0d74731edbae90d0df5630d9ec46a3df6",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "59e25629_fc2a2634",
        "filename": "test/scenario/network_node.cc",
        "patchSetId": 6
      },
      "lineNbr": 138,
      "author": {
        "id": 7332
      },
      "writtenOn": "2019-03-29T18:56:53Z",
      "side": 1,
      "message": "He? uint32 truncated to uint16? Why does this even compile?",
      "revId": "4cdec5e0d74731edbae90d0df5630d9ec46a3df6",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5d31c3f5_9b8ab3b0",
        "filename": "test/scenario/network_node.cc",
        "patchSetId": 6
      },
      "lineNbr": 138,
      "author": {
        "id": 6337
      },
      "writtenOn": "2019-04-01T09:01:51Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "59e25629_fc2a2634",
      "revId": "4cdec5e0d74731edbae90d0df5630d9ec46a3df6",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5f776739_d4835042",
        "filename": "test/scenario/network_node.h",
        "patchSetId": 6
      },
      "lineNbr": 90,
      "author": {
        "id": 7332
      },
      "writtenOn": "2019-03-29T18:56:53Z",
      "side": 1,
      "message": "Can you please explain here and/or the CL description why this field was added?",
      "revId": "4cdec5e0d74731edbae90d0df5630d9ec46a3df6",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e055c899_ad1fbddb",
        "filename": "test/scenario/network_node.h",
        "patchSetId": 6
      },
      "lineNbr": 90,
      "author": {
        "id": 6337
      },
      "writtenOn": "2019-04-01T09:01:51Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5f776739_d4835042",
      "revId": "4cdec5e0d74731edbae90d0df5630d9ec46a3df6",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    }
  ]
}