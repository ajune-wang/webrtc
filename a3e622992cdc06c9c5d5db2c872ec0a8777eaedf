{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "314ff03f_3d3131b5",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 9
      },
      "lineNbr": 0,
      "author": {
        "id": 8046
      },
      "writtenOn": "2022-02-12T13:01:49Z",
      "side": 1,
      "message": "Hi, I would like to have this in Chromium 100, would it be possible to review this before we are past the deadline? ",
      "revId": "a3e622992cdc06c9c5d5db2c872ec0a8777eaedf",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9f477777_440cb681",
        "filename": "modules/desktop_capture/linux/wayland/mouse_cursor_monitor_pipewire.cc",
        "patchSetId": 9
      },
      "lineNbr": 28,
      "author": {
        "id": 5508
      },
      "writtenOn": "2022-02-12T14:25:08Z",
      "side": 1,
      "message": "is it possible to remove the Init call, supply these via the ctor and make callback_ + mode_ const?",
      "revId": "a3e622992cdc06c9c5d5db2c872ec0a8777eaedf",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f6809223_33ec9c09",
        "filename": "modules/desktop_capture/linux/wayland/mouse_cursor_monitor_pipewire.cc",
        "patchSetId": 9
      },
      "lineNbr": 28,
      "author": {
        "id": 8046
      },
      "writtenOn": "2022-02-12T15:57:06Z",
      "side": 1,
      "message": "The Init() method is part of MouseCursorMonitor implementation and I just overloaded it.",
      "parentUuid": "9f477777_440cb681",
      "revId": "a3e622992cdc06c9c5d5db2c872ec0a8777eaedf",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "100e702e_dfd10780",
        "filename": "modules/desktop_capture/linux/wayland/mouse_cursor_monitor_pipewire.h",
        "patchSetId": 9
      },
      "lineNbr": 37,
      "author": {
        "id": 5508
      },
      "writtenOn": "2022-02-12T14:25:08Z",
      "side": 1,
      "message": "can you add RTC_GUARDED_BY and sequence checkers for the member variables?",
      "revId": "a3e622992cdc06c9c5d5db2c872ec0a8777eaedf",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "586cc29e_55ac4879",
        "filename": "modules/desktop_capture/linux/wayland/mouse_cursor_monitor_pipewire.h",
        "patchSetId": 9
      },
      "lineNbr": 37,
      "author": {
        "id": 8046
      },
      "writtenOn": "2022-02-12T15:57:06Z",
      "side": 1,
      "message": "I know what is RTC_GUARDED_BY, I used it once to make sure we don\u0027t have concurrent access to a variable. This is not a problem in this case as we access only to options.screencast_stream() and both calls on ScreenCastTream we make (CaptureCursor() and CaptureCursorPosition()) just return latest cursor or its position, but I can add it if you want me to. And I also don\u0027t think that the MouseCursorMonitor::Capture() method is called from multiple places and the X11::MouseCursorMonitor also doesn\u0027t do such protections.\n\nI don\u0027t know what you mean by sequence checkers? Can you please explain?",
      "parentUuid": "100e702e_dfd10780",
      "revId": "a3e622992cdc06c9c5d5db2c872ec0a8777eaedf",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "087ef099_b7929688",
        "filename": "modules/desktop_capture/linux/wayland/mouse_cursor_monitor_pipewire.h",
        "patchSetId": 9
      },
      "lineNbr": 37,
      "author": {
        "id": 5508
      },
      "writtenOn": "2022-02-12T21:32:05Z",
      "side": 1,
      "message": "webrtc::SequenceChecker acts as a lock to the compiler when used in combination with RTC_GUARDED_BY. It makes sure that a variable is always guarded by the checker.\n\nIn dcheck enabled builds, a RTC_DCHECK_RUNS_ON check at the beginning of a function will check if the call is being made on the thread (or task queue as appropriate) that the developer expected.\n\nIn non-dcheck release builds, the sequence checker does nothing. When you add it as a member variable of a class with RTC_NO_UNIQUE_ADDRESS, it also doesn\u0027t occupy allocation space.\n\nThere are several examples of how it\u0027s used across the code. An important benefit of using it, is that it also makes it clear to other developers how the code behaves, on what threads callbacks happen etc, and help avoid forgetting to grab the \"lock\" appropriately - or call out when accessing a variable wouldn\u0027t be safe.",
      "parentUuid": "586cc29e_55ac4879",
      "revId": "a3e622992cdc06c9c5d5db2c872ec0a8777eaedf",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    }
  ]
}