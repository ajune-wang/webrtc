{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "daca0fdc_ec3abd3d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 19549
      },
      "writtenOn": "2023-03-17T15:04:22Z",
      "side": 1,
      "message": "I don\u0027t think this behavior makes sense but then WebRTC is a terrible API anyway ;-)",
      "revId": "b307abe9fdda8622b4ff76b75414bae5142f5d33",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "34794f44_ea06ecb2",
        "filename": "pc/peer_connection_header_extension_unittest.cc",
        "patchSetId": 4
      },
      "lineNbr": 301,
      "author": {
        "id": 5142
      },
      "writtenOn": "2023-03-18T10:09:44Z",
      "side": 1,
      "message": "nit: suggest renaming the test:\n\"StoppedByDefaultExtensionCanBeActivatedByRemoteSdp\"",
      "revId": "b307abe9fdda8622b4ff76b75414bae5142f5d33",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8c02a6c6_77af7fe2",
        "filename": "pc/peer_connection_header_extension_unittest.cc",
        "patchSetId": 4
      },
      "lineNbr": 301,
      "author": {
        "id": 19549
      },
      "writtenOn": "2023-03-20T10:01:05Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "34794f44_ea06ecb2",
      "revId": "b307abe9fdda8622b4ff76b75414bae5142f5d33",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "72b52641_e09cb0ac",
        "filename": "pc/peer_connection_header_extension_unittest.cc",
        "patchSetId": 4
      },
      "lineNbr": 321,
      "author": {
        "id": 5142
      },
      "writtenOn": "2023-03-18T10:09:44Z",
      "side": 1,
      "message": "Side discussion (not a critique of the CL - we need this):\n\nI\u0027ve noticed that we allow turning on extensions in remote SDP despite them not being offered, a behavior many apps (including Meet) depends on.\n\nBut I find it kind of surprising, most things in SDP is something that you offer and then the remote either accepts it (keeps it) or rejects it (removes it). For example the remote can\u0027t add m\u003d sections (though it can add ssrcs on offer-to-receive m\u003d sections, but that\u0027s in the spirit of accepting). In this case you can *add* extensions *not on offer* (or expand the direction beyond what was offered). It seems to go against the idea that the remote accepts/rejects, since this means the remote is in control of what header extensions ends up being used.\n\nI\u0027m curious what JSEP says, if anything goes with header extensions?\nThe remote has no SDP-guarantees that the local pc knows how to interpret the extensions that remote added.",
      "revId": "b307abe9fdda8622b4ff76b75414bae5142f5d33",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7c03dad0_efc7bbe6",
        "filename": "pc/peer_connection_header_extension_unittest.cc",
        "patchSetId": 4
      },
      "lineNbr": 321,
      "author": {
        "id": 19549
      },
      "writtenOn": "2023-03-20T10:01:05Z",
      "side": 1,
      "message": "Correct. this test is asserting that behavior which is important.\nSDP is not strictly limited to offer-answer, examples of that are opus dtx which is only in the answer but may not be present in the offer. I refer to this as \"declarative usage\" but can\u0027t find a good reference.\n\nThe corresponding rules in JSEP are in https://www.rfc-editor.org/rfc/rfc8829.html#section-5.3.1 and it says:\n  For each supported RTP header extension that is present in the offer...\nIt does not allow a similar thing as for codecs:\n  Any currently available media formats that are not present in the current remote description MUST be added after all existing formats.\n\nThat is a spec bug, just like not allowing to \"grow\" the set again.",
      "parentUuid": "72b52641_e09cb0ac",
      "revId": "b307abe9fdda8622b4ff76b75414bae5142f5d33",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f268e45c_ad51d8ae",
        "filename": "pc/peer_connection_header_extension_unittest.cc",
        "patchSetId": 4
      },
      "lineNbr": 321,
      "author": {
        "id": 5142
      },
      "writtenOn": "2023-03-20T11:46:57Z",
      "side": 1,
      "message": "If the spec only talks about \"each supported RTP header extension that is present in the offer\" then it would appear to be illegal to add new header extensions to the answer that was not already in the offer?\n\nWhat does +Harald think?\n\nAnyway, other than backwards compat (which is valid reason for the time being), is there any reason that we in the future allow adding header extensions not in the offer? When this API ships it is possible to have all the header extensions you want at offer time without SDP munging, so why would anyone ever need to add stuff to the answer that wasn\u0027t already in the offer?",
      "parentUuid": "7c03dad0_efc7bbe6",
      "revId": "b307abe9fdda8622b4ff76b75414bae5142f5d33",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6d9d5a82_4e2af586",
        "filename": "pc/peer_connection_header_extension_unittest.cc",
        "patchSetId": 4
      },
      "lineNbr": 321,
      "author": {
        "id": 19549
      },
      "writtenOn": "2023-03-20T12:10:27Z",
      "side": 1,
      "message": "This is not allowed by the specification, however it is\n1/ how existing implementations behave\n2/ relied upon in the field\n3/ useful\nThe counterargument to this behavior is that the answerer can\u0027t really know if the offerer supports the extension if it did not offer it until you receive a packet with it.\n\nThis API actually allows changing this but until we complete the migration (if ever) we need this test as a regression test.\n\nI can file a bug against JSEP to see if we can get the authors to agree our interpretation is more flexible but IETF document updates are ... hard.",
      "parentUuid": "f268e45c_ad51d8ae",
      "revId": "b307abe9fdda8622b4ff76b75414bae5142f5d33",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f7491fa9_b9a87060",
        "filename": "pc/peer_connection_header_extension_unittest.cc",
        "patchSetId": 4
      },
      "lineNbr": 321,
      "author": {
        "id": 5142
      },
      "writtenOn": "2023-03-20T12:27:37Z",
      "side": 1,
      "message": "Probably modifying the answer was chosen rather than the offer primarily because SDP munging is discouraged, rather than any inherent reason not to do it at offer time (if the API would have existed back then). But I don\u0027t know, maybe there are valid use cases to control this at answer side that I\u0027m not thinking of.\n\nIf we want to have our cake and eat it to, one could offer the extension as inactive to signal support but still allow the answerer to modify the direction?\n\nBut then again maybe updating the spec would be easier than updating the implementation if \"turning things on from the answerer\" isn\u0027t doing any harm",
      "parentUuid": "6d9d5a82_4e2af586",
      "revId": "b307abe9fdda8622b4ff76b75414bae5142f5d33",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5ba06a7b_b099e898",
        "filename": "pc/peer_connection_header_extension_unittest.cc",
        "patchSetId": 4
      },
      "lineNbr": 321,
      "author": {
        "id": 5634
      },
      "writtenOn": "2023-03-20T13:02:17Z",
      "side": 1,
      "message": "The header extension signaling is in https://www.rfc-editor.org/rfc/rfc8285.html#section-5\n\nIt\u0027s not an offer/answer mechanism, it\u0027s an \"I support reception of\" mechanism. The only part that is offer/answer is the extended mechanism for saying \"I want one of these extensions, but you have to pick this one\", and the restriction saying that extensions cannot collide.",
      "parentUuid": "f268e45c_ad51d8ae",
      "revId": "b307abe9fdda8622b4ff76b75414bae5142f5d33",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "041328d1_e42ebe8d",
        "filename": "pc/peer_connection_header_extension_unittest.cc",
        "patchSetId": 4
      },
      "lineNbr": 321,
      "author": {
        "id": 5142
      },
      "writtenOn": "2023-03-20T13:32:04Z",
      "side": 1,
      "message": "OK. Our webrtc-extensions API seems to limit the answerer: \"For each supported RTP header extension that is present in the offer and is also present in [[HeaderExtensionsToNegotiate]]...\" but sounds like the RFC wouldn\u0027t mind if we added additional stuff not present in the offer.\n\nThe test in this CL modifies the SDP answer, and that would still be OK because the answer was not generated by our API.",
      "parentUuid": "5ba06a7b_b099e898",
      "revId": "b307abe9fdda8622b4ff76b75414bae5142f5d33",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f1170041_30db98d1",
        "filename": "pc/peer_connection_header_extension_unittest.cc",
        "patchSetId": 4
      },
      "lineNbr": 321,
      "author": {
        "id": 19549
      },
      "writtenOn": "2023-03-20T14:05:55Z",
      "side": 1,
      "message": "https://www.rfc-editor.org/rfc/rfc8285#section-7\n\"Either party MAY include\" so we\u0027re good (within our webrtc-extensions restrictions)",
      "parentUuid": "041328d1_e42ebe8d",
      "revId": "b307abe9fdda8622b4ff76b75414bae5142f5d33",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "18ed9b0f_ff3fd3b2",
        "filename": "pc/peer_connection_header_extension_unittest.cc",
        "patchSetId": 4
      },
      "lineNbr": 321,
      "author": {
        "id": 5634
      },
      "writtenOn": "2023-03-20T14:21:44Z",
      "side": 1,
      "message": "It\u0027s typical that WebRTC and JSEP specs describe restrictions that are more restrictive than the base specs - it would be wrong if it was the other way around!\n\nStill, we have no way of restricting the behavior of our comms partners (they may not be webrtc), so we need to handle any answer that conforms to the base specs (which doesn\u0027t mean that we accept the answer always, just that if we reject it, we reject it by the book).",
      "parentUuid": "f1170041_30db98d1",
      "revId": "b307abe9fdda8622b4ff76b75414bae5142f5d33",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "11b51888_af4010aa",
        "filename": "pc/peer_connection_header_extension_unittest.cc",
        "patchSetId": 4
      },
      "lineNbr": 374,
      "author": {
        "id": 5142
      },
      "writtenOn": "2023-03-18T10:09:44Z",
      "side": 1,
      "message": "nit: EXPECT_NE(extension.uri, \"bogus\")",
      "revId": "b307abe9fdda8622b4ff76b75414bae5142f5d33",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "df3d6c02_58486b9e",
        "filename": "pc/peer_connection_header_extension_unittest.cc",
        "patchSetId": 4
      },
      "lineNbr": 374,
      "author": {
        "id": 19549
      },
      "writtenOn": "2023-03-20T10:01:05Z",
      "side": 1,
      "message": "this is a corollary of \"arrays are the same size and all uris are stopped\" but doesn\u0027t hurt to check in addition.",
      "parentUuid": "11b51888_af4010aa",
      "revId": "b307abe9fdda8622b4ff76b75414bae5142f5d33",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "96de9eaf_59e2d518",
        "filename": "pc/rtp_transceiver.cc",
        "patchSetId": 4
      },
      "lineNbr": 738,
      "author": {
        "id": 5142
      },
      "writtenOn": "2023-03-18T10:09:44Z",
      "side": 1,
      "message": "Are all currently supported header extensions kSendRecv when enabled?\nIf so not a blocking TODO, but I think we should have a TODO referencing a bug that documents that we should be able to handle other directions attributes when that becomes necessary.",
      "revId": "b307abe9fdda8622b4ff76b75414bae5142f5d33",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8c83154b_960314a1",
        "filename": "pc/rtp_transceiver.cc",
        "patchSetId": 4
      },
      "lineNbr": 738,
      "author": {
        "id": 19549
      },
      "writtenOn": "2023-03-20T10:01:05Z",
      "side": 1,
      "message": "i think they are. Even though some, like VLA, are not used for receiving but there are certainly downstream projects...\n\nWe have an existing bug about not taking into account directionality of header extensions, open for 5+ years I think.",
      "parentUuid": "96de9eaf_59e2d518",
      "revId": "b307abe9fdda8622b4ff76b75414bae5142f5d33",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f81535a4_056cdcde",
        "filename": "pc/rtp_transceiver.cc",
        "patchSetId": 4
      },
      "lineNbr": 738,
      "author": {
        "id": 5142
      },
      "writtenOn": "2023-03-20T11:48:10Z",
      "side": 1,
      "message": "I\u0027d like to see a TODO comment here, if you can\u0027t find the old bug, can you file a new one just to have something to point to?",
      "parentUuid": "8c83154b_960314a1",
      "revId": "b307abe9fdda8622b4ff76b75414bae5142f5d33",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8501b1b6_ec03a080",
        "filename": "pc/rtp_transceiver.cc",
        "patchSetId": 4
      },
      "lineNbr": 738,
      "author": {
        "id": 19549
      },
      "writtenOn": "2023-03-20T12:10:27Z",
      "side": 1,
      "message": "Added. 5 years, 11 months!",
      "parentUuid": "f81535a4_056cdcde",
      "revId": "b307abe9fdda8622b4ff76b75414bae5142f5d33",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    }
  ]
}