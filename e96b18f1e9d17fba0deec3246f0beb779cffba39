{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "151c1a55_cdc5d00a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 5634
      },
      "writtenOn": "2022-05-11T21:36:56Z",
      "side": 1,
      "message": "Lots of typing - looks good!\n",
      "revId": "e96b18f1e9d17fba0deec3246f0beb779cffba39",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9de8d682_11eca38f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 5634
      },
      "writtenOn": "2022-05-12T07:27:51Z",
      "side": 1,
      "message": "LGTM stands!\n",
      "revId": "e96b18f1e9d17fba0deec3246f0beb779cffba39",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e47421b5_72b1f5cd",
        "filename": "pc/webrtc_sdp.cc",
        "patchSetId": 3
      },
      "lineNbr": 1039,
      "author": {
        "id": 5234
      },
      "writtenOn": "2022-05-11T12:12:44Z",
      "side": 1,
      "message": "It\u0027s somewhat confusing that this is called on lines with and without terminating new line. Can we make this non-public, and expose only SdpDeserializeCandidate?",
      "range": {
        "startLine": 1039,
        "startChar": 2,
        "endLine": 1039,
        "endChar": 49
      },
      "revId": "e96b18f1e9d17fba0deec3246f0beb779cffba39",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ba5a7206_304e917d",
        "filename": "pc/webrtc_sdp.cc",
        "patchSetId": 3
      },
      "lineNbr": 1039,
      "author": {
        "id": 5634
      },
      "writtenOn": "2022-05-11T21:36:56Z",
      "side": 1,
      "message": "I think this is called both on candidates in SDP and candidates passed in by AddCandidate, so I suspect this is the \"be liberal in what you receive\" rule.\nCheck up the stack - we shouldn\u0027t expect users to crlf-terminate candidates for AddCandidate.",
      "parentUuid": "e47421b5_72b1f5cd",
      "range": {
        "startLine": 1039,
        "startChar": 2,
        "endLine": 1039,
        "endChar": 49
      },
      "revId": "e96b18f1e9d17fba0deec3246f0beb779cffba39",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f8340a00_e2569fcd",
        "filename": "pc/webrtc_sdp.cc",
        "patchSetId": 3
      },
      "lineNbr": 2156,
      "author": {
        "id": 5634
      },
      "writtenOn": "2022-05-11T21:36:56Z",
      "side": 1,
      "message": "would auto be inappropriate for some reason?",
      "revId": "e96b18f1e9d17fba0deec3246f0beb779cffba39",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a0045f00_73f121c5",
        "filename": "pc/webrtc_sdp.cc",
        "patchSetId": 3
      },
      "lineNbr": 2156,
      "author": {
        "id": 5234
      },
      "writtenOn": "2022-05-12T07:15:18Z",
      "side": 1,
      "message": "It\u0027s somewhat inappropriate because type isn\u0027t obvious from local context.",
      "parentUuid": "f8340a00_e2569fcd",
      "revId": "e96b18f1e9d17fba0deec3246f0beb779cffba39",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6320d600_c00ec490",
        "filename": "pc/webrtc_sdp.cc",
        "patchSetId": 3
      },
      "lineNbr": 2156,
      "author": {
        "id": 5634
      },
      "writtenOn": "2022-05-12T07:27:51Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "a0045f00_73f121c5",
      "revId": "e96b18f1e9d17fba0deec3246f0beb779cffba39",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d2a5837d_47a04f08",
        "filename": "pc/webrtc_sdp.cc",
        "patchSetId": 3
      },
      "lineNbr": 2157,
      "author": {
        "id": 5634
      },
      "writtenOn": "2022-05-11T21:36:56Z",
      "side": 1,
      "message": "First time I\u0027ve seen a semicolon in an if statement. Is it simply \"do these two things and return the value of the last one\"?",
      "revId": "e96b18f1e9d17fba0deec3246f0beb779cffba39",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d3facea7_03b50e3d",
        "filename": "pc/webrtc_sdp.cc",
        "patchSetId": 3
      },
      "lineNbr": 2157,
      "author": {
        "id": 5234
      },
      "writtenOn": "2022-05-12T07:15:18Z",
      "side": 1,
      "message": "https://abseil.io/tips/165\n\nFor some reason, the same syntax seems to *not* work for the condition in a while (...) {... } loop.\n\nNot sure where I picked up the recommendation on being explicit about the .has_value() condition, rather than just relying on conversion from optional to bool.\n\nIt would have the same effect without that,\n\n  if (...optional... cline \u003d Getline(...)) {...}",
      "parentUuid": "d2a5837d_47a04f08",
      "revId": "e96b18f1e9d17fba0deec3246f0beb779cffba39",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a8226c92_91d6506d",
        "filename": "pc/webrtc_sdp.cc",
        "patchSetId": 3
      },
      "lineNbr": 2157,
      "author": {
        "id": 5634
      },
      "writtenOn": "2022-05-12T07:27:51Z",
      "side": 1,
      "message": "If: Ah, new in C++ 17! Will certainly use.\nI\u0027ve also seen a recommendation to use x.value() rather than *x, but I haven\u0027t found where I got that one from either.",
      "parentUuid": "d3facea7_03b50e3d",
      "revId": "e96b18f1e9d17fba0deec3246f0beb779cffba39",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    }
  ]
}