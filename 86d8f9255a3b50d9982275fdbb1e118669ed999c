{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "c6c98a65_454b9ad1",
        "filename": "call/rtp_video_sender.cc",
        "patchSetId": 1
      },
      "lineNbr": 348,
      "author": {
        "id": 5527
      },
      "writtenOn": "2021-04-28T09:51:38Z",
      "side": 1,
      "message": "Mabye something like:\n\n  // May produce more templates than necessary, causing slightly more overhead\n  // on keyframes.",
      "range": {
        "startLine": 347,
        "startChar": 0,
        "endLine": 348,
        "endChar": 79
      },
      "revId": "86d8f9255a3b50d9982275fdbb1e118669ed999c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0887daa3_dc50cd06",
        "filename": "call/rtp_video_sender.cc",
        "patchSetId": 1
      },
      "lineNbr": 348,
      "author": {
        "id": 5019
      },
      "writtenOn": "2021-04-28T10:57:54Z",
      "side": 1,
      "message": "that\u0027s only part of the issue. templates are also inaccurate causing custom fdiffs/dtis/chains and thus more overhead on delta frames too.",
      "parentUuid": "c6c98a65_454b9ad1",
      "range": {
        "startLine": 347,
        "startChar": 0,
        "endLine": 348,
        "endChar": 79
      },
      "revId": "86d8f9255a3b50d9982275fdbb1e118669ed999c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "64b21395_bda68b55",
        "filename": "call/rtp_video_sender.cc",
        "patchSetId": 1
      },
      "lineNbr": 348,
      "author": {
        "id": 5527
      },
      "writtenOn": "2021-04-28T12:56:39Z",
      "side": 1,
      "message": "True, what about:\n\n  // Assumes a SXTY (S3T3 for example) type of stream, so templates produced\n  // might not perfectly match the actual structure of the stream. In such\n  // case slightly more overhead will be incurred.\n\nI don\u0027t think the current wording is particular clear...",
      "parentUuid": "0887daa3_dc50cd06",
      "range": {
        "startLine": 347,
        "startChar": 0,
        "endLine": 348,
        "endChar": 79
      },
      "revId": "86d8f9255a3b50d9982275fdbb1e118669ed999c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4b40b2ec_7fc19e27",
        "filename": "call/rtp_video_sender.cc",
        "patchSetId": 1
      },
      "lineNbr": 348,
      "author": {
        "id": 5019
      },
      "writtenOn": "2021-04-28T14:47:06Z",
      "side": 1,
      "message": "It is not about simulcast, no structure is assumed.\nI reformulated the comment. Better?",
      "parentUuid": "64b21395_bda68b55",
      "range": {
        "startLine": 347,
        "startChar": 0,
        "endLine": 348,
        "endChar": 79
      },
      "revId": "86d8f9255a3b50d9982275fdbb1e118669ed999c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2959c200_746eea23",
        "filename": "call/rtp_video_sender.cc",
        "patchSetId": 1
      },
      "lineNbr": 349,
      "author": {
        "id": 5527
      },
      "writtenOn": "2021-04-28T09:51:38Z",
      "side": 1,
      "message": "I don\u0027t see why this shouldn\u0027t be implemented in the RtpPayloadParams class?",
      "range": {
        "startLine": 349,
        "startChar": 42,
        "endLine": 349,
        "endChar": 66
      },
      "revId": "86d8f9255a3b50d9982275fdbb1e118669ed999c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a900cc6d_db535139",
        "filename": "call/rtp_video_sender.cc",
        "patchSetId": 1
      },
      "lineNbr": 349,
      "author": {
        "id": 5019
      },
      "writtenOn": "2021-04-28T10:57:54Z",
      "side": 1,
      "message": "That what I tried initially, but didn\u0027t found where to write FrameDependencyStructure to:\n\nRtpPayloadParams struct fills \"struct RTPVideoHeader\" that doesn\u0027t have a place for the structure.\nCodecSpecificInfo carries the structure, but it is passed through RtpPayloadParams by const pointer and thus can\u0027t be updated with the structure.",
      "parentUuid": "2959c200_746eea23",
      "range": {
        "startLine": 349,
        "startChar": 42,
        "endLine": 349,
        "endChar": 66
      },
      "revId": "86d8f9255a3b50d9982275fdbb1e118669ed999c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4e12a0e6_29ce4a44",
        "filename": "call/rtp_video_sender.cc",
        "patchSetId": 1
      },
      "lineNbr": 349,
      "author": {
        "id": 5527
      },
      "writtenOn": "2021-04-28T12:56:39Z",
      "side": 1,
      "message": "I see... What about adding a `absl::optional\u003cFrameDependencyStructure\u003e template_structure` to RTPVideoHeader and then copy the template dependency structures instead? Not as performant I know, but cleaner...",
      "parentUuid": "a900cc6d_db535139",
      "range": {
        "startLine": 349,
        "startChar": 42,
        "endLine": 349,
        "endChar": 66
      },
      "revId": "86d8f9255a3b50d9982275fdbb1e118669ed999c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "db824e65_d8633e89",
        "filename": "call/rtp_video_sender.cc",
        "patchSetId": 1
      },
      "lineNbr": 349,
      "author": {
        "id": 5019
      },
      "writtenOn": "2021-04-28T14:47:06Z",
      "side": 1,
      "message": "I\u0027m not sure it will be conceptually cleaner (may be it would).\nRTPVideoHeader describes a frame (sometimes a packet).\nFrameDependencyStructure describes a coded video sequence.\nkeeping place for that description in metadata for every frame might not considered to be clean.\n\nwdyt about middle solution: move MinimalisticVp9Structure into RtpPayloadParams as static method, but keep using it here as it is now?",
      "parentUuid": "4e12a0e6_29ce4a44",
      "range": {
        "startLine": 349,
        "startChar": 42,
        "endLine": 349,
        "endChar": 66
      },
      "revId": "86d8f9255a3b50d9982275fdbb1e118669ed999c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0b6fb25d_352550fc",
        "filename": "call/rtp_video_sender.cc",
        "patchSetId": 1
      },
      "lineNbr": 366,
      "author": {
        "id": 5527
      },
      "writtenOn": "2021-04-28T09:51:38Z",
      "side": 1,
      "message": "Wan\u0027t to include discardable?\n\n  sid \u003e s ? DecodeTargetIndication::kNotPresent :\n  tid \u003e t ? DecodeTargetIndication::kNotPresent :\n  tid \u003e 0 \u0026\u0026 tid \u003d\u003d t ? DecodeTargetIndication::kDiscardable :\n                        DecodeTargetIndication::kSwitch",
      "range": {
        "startLine": 365,
        "startChar": 14,
        "endLine": 366,
        "endChar": 74
      },
      "revId": "86d8f9255a3b50d9982275fdbb1e118669ed999c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d3ef2f12_90faac4f",
        "filename": "call/rtp_video_sender.cc",
        "patchSetId": 1
      },
      "lineNbr": 366,
      "author": {
        "id": 5019
      },
      "writtenOn": "2021-04-28T10:57:54Z",
      "side": 1,
      "message": "no, not Discardable: RtpPayloadParam::Vp9ToGeneric never uses Discardable indication, so using Discardable would always trigger custom dti.\nlooking at RtpPayloadParam::Vp9ToGeneric, it seems Switch is the most popular indication. [It is possible to do something smarter and create templates that better align with RtpPayloadParam::Vp9ToGeneric, but I haven\u0027t come up with a neat way to do it]\n\n(RtpPayloadParams doesn\u0027t use Discardable because there is no way to be sure frame is discardable looking just at the vp9 codec specific info: 8-frame pattern commonly refer to the previous frame of the same temporal layer)",
      "parentUuid": "0b6fb25d_352550fc",
      "range": {
        "startLine": 365,
        "startChar": 14,
        "endLine": 366,
        "endChar": 74
      },
      "revId": "86d8f9255a3b50d9982275fdbb1e118669ed999c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f59640c8_7b9661b9",
        "filename": "call/rtp_video_sender.cc",
        "patchSetId": 1
      },
      "lineNbr": 366,
      "author": {
        "id": 5527
      },
      "writtenOn": "2021-04-28T12:56:39Z",
      "side": 1,
      "message": "Makes sense.",
      "parentUuid": "d3ef2f12_90faac4f",
      "range": {
        "startLine": 365,
        "startChar": 14,
        "endLine": 366,
        "endChar": 74
      },
      "revId": "86d8f9255a3b50d9982275fdbb1e118669ed999c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "37c21d09_bc66804b",
        "filename": "call/rtp_video_sender.cc",
        "patchSetId": 1
      },
      "lineNbr": 370,
      "author": {
        "id": 5527
      },
      "writtenOn": "2021-04-28T09:51:38Z",
      "side": 1,
      "message": "Shouldn\u0027t this be:\n\n  tid \u003d\u003d 0 ? num_spatial_layers * num_temporal_layers + 1 :\n             num_spatial_layers + 1;",
      "range": {
        "startLine": 370,
        "startChar": 39,
        "endLine": 370,
        "endChar": 40
      },
      "revId": "86d8f9255a3b50d9982275fdbb1e118669ed999c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a2b2e055_956b93f1",
        "filename": "call/rtp_video_sender.cc",
        "patchSetId": 1
      },
      "lineNbr": 370,
      "author": {
        "id": 5019
      },
      "writtenOn": "2021-04-28T10:57:54Z",
      "side": 1,
      "message": "that frame_diff would be correct more often than plain \u00271\u0027. Updated.\n(except for the `+1` part)",
      "parentUuid": "37c21d09_bc66804b",
      "range": {
        "startLine": 370,
        "startChar": 39,
        "endLine": 370,
        "endChar": 40
      },
      "revId": "86d8f9255a3b50d9982275fdbb1e118669ed999c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7e37ba35_ad1853d4",
        "filename": "call/rtp_video_sender.cc",
        "patchSetId": 1
      },
      "lineNbr": 370,
      "author": {
        "id": 5527
      },
      "writtenOn": "2021-04-28T12:56:39Z",
      "side": 1,
      "message": "Oops :)",
      "parentUuid": "a2b2e055_956b93f1",
      "range": {
        "startLine": 370,
        "startChar": 39,
        "endLine": 370,
        "endChar": 40
      },
      "revId": "86d8f9255a3b50d9982275fdbb1e118669ed999c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    }
  ]
}