{
  "comments": [
    {
      "key": {
        "uuid": "e58c6d44_729b5bc9",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 5053
      },
      "writtenOn": "2020-08-11T02:00:31Z",
      "side": 1,
      "message": "Hi Andrey,\n\nSorry it\u0027s taken so long, but I\u0027m finally getting around to this. First of all, thanks for the very high quality patch, the use of the key as both a unique identifier and an index into the list is pretty clever.\n\nA couple questions:\n\nWhy did you change DispatcherSet from a set to a vector? Is the idea that it should be rare for a lot of dispatchers to be added at once, and vector is more efficient for a small number of entries?\n\nAlso, I noticed an existing problem when looking at the \"processing_dispatchers_\" logic; if the dispatcher is actually deleted, it\u0027s not safe to add it to a \"pending removal\" list, because that doesn\u0027t affect it from being dereferenced. Using DispatcherInfoSet it was pretty trivial to deal with this",
      "revId": "748628b599163d93f86bc7612a4d573d1c5cb720",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3c293a65_813f3697",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 5053
      },
      "writtenOn": "2020-08-13T00:53:56Z",
      "side": 1,
      "message": "Oh, another question about DispatcherSet: why are the entries still kept sorted? I thought that was just a consequence of the choice to use std::set and wasn\u0027t actually required.",
      "parentUuid": "e58c6d44_729b5bc9",
      "revId": "748628b599163d93f86bc7612a4d573d1c5cb720",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "783b8394_41a7b5c7",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 13594
      },
      "writtenOn": "2020-08-13T09:33:37Z",
      "side": 1,
      "message": "\u003e Why did you change DispatcherSet from a set to a vector? Is the idea that it should be rare for a lot of dispatchers to be added at once, and vector is more efficient for a small number of entries?\n\nYes, mostly. Basically, it\u0027s a reimplemented flat_set. I expect \"small\" to be in the order of hundreds of elements on most systems, especially given that the element type is a small POD. It has faster clear(), it is much more efficient for iteration. The vector is also more efficient in terms of storage and has memory caching property, so in the long term it should perform even better.\n\n\u003e Oh, another question about DispatcherSet: why are the entries still kept sorted?\n\nI used the flat_set as a drop in replacement for std::set. There are places where elements are searched and removed by value from that set, and I also was not sure if an element could be added more than once into that set, so flat_set instead of a plain unordered list seemed more appropriate.",
      "parentUuid": "3c293a65_813f3697",
      "revId": "748628b599163d93f86bc7612a4d573d1c5cb720",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1a627fdd_840203e4",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 5053
      },
      "writtenOn": "2020-08-13T20:38:08Z",
      "side": 1,
      "message": "\u003e There are places where elements are searched and removed by value from that set, and I also was not sure if an element could be added more than once into that set, so flat_set instead of a plain unordered list seemed more appropriate.\n\nI guess I would assume it\u0027s possible, since a set was being used before.",
      "parentUuid": "783b8394_41a7b5c7",
      "revId": "748628b599163d93f86bc7612a4d573d1c5cb720",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    }
  ]
}