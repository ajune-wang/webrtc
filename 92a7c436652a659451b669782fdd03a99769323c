{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "32faf8b5_0ed6ded6",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 5122
      },
      "writtenOn": "2022-11-01T12:35:18Z",
      "side": 1,
      "message": "+ Sam",
      "revId": "92a7c436652a659451b669782fdd03a99769323c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "096f6aa0_f82b61fe",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 5125
      },
      "writtenOn": "2022-11-03T07:47:52Z",
      "side": 1,
      "message": "Thanks for the CL.\n\nI added some initial comments.",
      "revId": "92a7c436652a659451b669782fdd03a99769323c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "66c946d5_156b0d09",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 5122
      },
      "writtenOn": "2022-11-03T16:52:16Z",
      "side": 1,
      "message": "Thanks for your comments! I decided to rearrange the CLs chain a little bit based on your comments. However, I replied to some of them and it\u0027d be good if you can reply so that I can incorporate any additional high-level feedback in the upcoming patch sets.",
      "revId": "92a7c436652a659451b669782fdd03a99769323c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "31dfdb91_e99ff1ae",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 5122
      },
      "writtenOn": "2022-11-03T16:52:16Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "096f6aa0_f82b61fe",
      "revId": "92a7c436652a659451b669782fdd03a99769323c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "01c5becd_82823a75",
        "filename": "modules/audio_processing/audio_processing_impl.cc",
        "patchSetId": 4
      },
      "lineNbr": 563,
      "author": {
        "id": 5125
      },
      "writtenOn": "2022-11-03T07:47:52Z",
      "side": 1,
      "message": "IMO it would be better to have one single source-of-truth.\nWith using emulate_input_volume_, there is now two separate pieces of code/data that keeps track whether the input volume should be emulated: emulate_input_volume_ and config_.\n\nI think introduces unneccessary risk in that they could differ, adds uncertainty for the reader and makes things more complicated.\n\nMy suggestion is to therefore remove emulate_input_volume_ and instead each time check config_.",
      "range": {
        "startLine": 563,
        "startChar": 2,
        "endLine": 563,
        "endChar": 23
      },
      "revId": "92a7c436652a659451b669782fdd03a99769323c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "24191c9d_0f375927",
        "filename": "modules/audio_processing/audio_processing_impl.cc",
        "patchSetId": 4
      },
      "lineNbr": 563,
      "author": {
        "id": 5122
      },
      "writtenOn": "2022-11-03T16:52:16Z",
      "side": 1,
      "message": "Good point. I will leave `EmulateInputVolume()` to avoid repeating the same expression again and again.",
      "parentUuid": "01c5becd_82823a75",
      "range": {
        "startLine": 563,
        "startChar": 2,
        "endLine": 563,
        "endChar": 23
      },
      "revId": "92a7c436652a659451b669782fdd03a99769323c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d5b6c8be_56eaf3ae",
        "filename": "modules/audio_processing/audio_processing_impl.cc",
        "patchSetId": 4
      },
      "lineNbr": 563,
      "author": {
        "id": 5119
      },
      "writtenOn": "2022-11-07T13:41:07Z",
      "side": 1,
      "message": "(+1 to keeping `EmulateInputVolume()` around as a single source of \"should we emulate input\" logic)",
      "parentUuid": "24191c9d_0f375927",
      "range": {
        "startLine": 563,
        "startChar": 2,
        "endLine": 563,
        "endChar": 23
      },
      "revId": "92a7c436652a659451b669782fdd03a99769323c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "92c00974_f76048f0",
        "filename": "modules/audio_processing/audio_processing_impl.cc",
        "patchSetId": 4
      },
      "lineNbr": 1110,
      "author": {
        "id": 5125
      },
      "writtenOn": "2022-11-03T07:47:52Z",
      "side": 1,
      "message": "How important is it to keep track of whether the input volume has been set since the last call?\nWhat this code is adding is to provide support for a case where the input volume can be applied sometimes, but not all the time.\n\n-That is not something that we want should happen (either it should be always applied or never applied)\n-That is not something that we have in any current platform.\n\nTherefore I\u0027d suggest that the support for having the input volume sometimes applied is dropped since it does not make any of the code behavior safer, and it complicates the code.",
      "range": {
        "startLine": 1110,
        "startChar": 16,
        "endLine": 1110,
        "endChar": 44
      },
      "revId": "92a7c436652a659451b669782fdd03a99769323c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2fa7b1b5_6de38e3d",
        "filename": "modules/audio_processing/audio_processing_impl.cc",
        "patchSetId": 4
      },
      "lineNbr": 1110,
      "author": {
        "id": 5122
      },
      "writtenOn": "2022-11-03T16:52:16Z",
      "side": 1,
      "message": "TL;DR: this will go away once `set_stream_analog_level()` is removed, it must be here (price to pay for a fragile API).\n\nI had to add this when I found that the `ApmTest.StreamParameters*` tests were failing. My recommendation is to leave it until the migration to the new simplified `ProcessStream()` API is completed.\n\n\u003e -That is not something that we want should happen (either it should be always applied or never applied)\n\ntrue\n\n\u003e -That is not something that we have in any current platform.\n\ntrue\n\n\u003e \n\u003e Therefore I\u0027d suggest that the support for having the input volume sometimes applied is dropped since it does not make any of the code behavior safer, and it complicates the code.\n\nit\u0027s just 3 lines with a clear TODO indicating when they should be removed; I wouldn\u0027t say it complicates the code much - it\u0027s the lines below which are not immediate and that should be moved into the gain controller (unfortunately, not doable at this stage since we don\u0027t have a single class/wrapper for all the controllers)\n\none alternative I can think of is removing/changing the existing unit tests, but I\u0027d prefer to keep them since they provide a safe net as we land refactoring CLs\n\nWDYT?",
      "parentUuid": "92c00974_f76048f0",
      "range": {
        "startLine": 1110,
        "startChar": 16,
        "endLine": 1110,
        "endChar": 44
      },
      "revId": "92a7c436652a659451b669782fdd03a99769323c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "eef70a56_8cc62d45",
        "filename": "modules/audio_processing/audio_processing_impl.cc",
        "patchSetId": 4
      },
      "lineNbr": 1178,
      "author": {
        "id": 5125
      },
      "writtenOn": "2022-11-03T07:47:52Z",
      "side": 1,
      "message": "This does not look right.\nWhy should we flag an echo path change when we set a new recommended input volume?\nWe don\u0027t yet know whether the applied input volume will change due to that recommended input volume so there may in practice be no echo path change.",
      "range": {
        "startLine": 1178,
        "startChar": 10,
        "endLine": 1178,
        "endChar": 52
      },
      "revId": "92a7c436652a659451b669782fdd03a99769323c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "84d0e758_8d8ad567",
        "filename": "modules/audio_processing/audio_processing_impl.cc",
        "patchSetId": 4
      },
      "lineNbr": 1178,
      "author": {
        "id": 5122
      },
      "writtenOn": "2022-11-03T16:52:16Z",
      "side": 1,
      "message": "this change is probably misunderstood because readability is poor, but it doesn\u0027t change the behavior\n\nrecommended input volume changes are taken into account only when the input volume is emulated (see line 1175) - i.e., capture level adjuster + emulation\n\nin that case, the recommended input volume is the volume applied to the emulator (see lines 1126-1127)\n\nin a previous patchset I made this explicit by adding `capture_.emulated_input_volume(_changed)`, see https://webrtc-review.googlesource.com/c/src/+/281185/1/modules/audio_processing/audio_processing_impl.cc\n\nif this is removed, then an emulated input volume change won\u0027t trigger any echo path gain change - and the existing test that checks that such a change is detected would fail",
      "parentUuid": "eef70a56_8cc62d45",
      "range": {
        "startLine": 1178,
        "startChar": 10,
        "endLine": 1178,
        "endChar": 52
      },
      "revId": "92a7c436652a659451b669782fdd03a99769323c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1722b420_9d628f63",
        "filename": "modules/audio_processing/audio_processing_impl.cc",
        "patchSetId": 4
      },
      "lineNbr": 1178,
      "author": {
        "id": 5119
      },
      "writtenOn": "2022-11-07T13:41:07Z",
      "side": 1,
      "message": "I prefer the version with `emulated_input_volume` separate from the external, client-facing volumes (see my long comment for reasons).",
      "parentUuid": "84d0e758_8d8ad567",
      "range": {
        "startLine": 1178,
        "startChar": 10,
        "endLine": 1178,
        "endChar": 52
      },
      "revId": "92a7c436652a659451b669782fdd03a99769323c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f27777fa_0e67c4e2",
        "filename": "modules/audio_processing/audio_processing_impl.cc",
        "patchSetId": 4
      },
      "lineNbr": 1233,
      "author": {
        "id": 5125
      },
      "writtenOn": "2022-11-03T07:47:52Z",
      "side": 1,
      "message": "If this fails, it\u0027ll bypass all the rest of the processing (due to RETURN_ON_ERR), which is quite a change from past behavior. Is this safe, and is it what we want?",
      "range": {
        "startLine": 1232,
        "startChar": 5,
        "endLine": 1233,
        "endChar": 36
      },
      "revId": "92a7c436652a659451b669782fdd03a99769323c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f1bf42f9_02abbd8c",
        "filename": "modules/audio_processing/audio_processing_impl.cc",
        "patchSetId": 4
      },
      "lineNbr": 1233,
      "author": {
        "id": 5122
      },
      "writtenOn": "2022-11-03T16:52:16Z",
      "side": 1,
      "message": "good catch; better fail silently\nit doesn\u0027t really matter what we do here because, `submodules_.gain_control` is only used together with `submodules_.agc_manager` - so this code never runs in practice",
      "parentUuid": "f27777fa_0e67c4e2",
      "range": {
        "startLine": 1232,
        "startChar": 5,
        "endLine": 1233,
        "endChar": 36
      },
      "revId": "92a7c436652a659451b669782fdd03a99769323c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5658e7da_20c61c0a",
        "filename": "modules/audio_processing/audio_processing_impl.cc",
        "patchSetId": 4
      },
      "lineNbr": 1233,
      "author": {
        "id": 5125
      },
      "writtenOn": "2022-11-08T09:50:49Z",
      "side": 1,
      "message": "I see, In that case, should we just remove RETURN_ON_ERR( ? \n\nOr if the code is never run, why not just put a DCHECK and remove the code?",
      "parentUuid": "f1bf42f9_02abbd8c",
      "range": {
        "startLine": 1232,
        "startChar": 5,
        "endLine": 1233,
        "endChar": 36
      },
      "revId": "92a7c436652a659451b669782fdd03a99769323c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "93a16988_4cac9fe4",
        "filename": "modules/audio_processing/audio_processing_impl.cc",
        "patchSetId": 4
      },
      "lineNbr": 1661,
      "author": {
        "id": 5119
      },
      "writtenOn": "2022-11-02T10:49:29Z",
      "side": 1,
      "message": "It looks like there is now only one caller of `set_stream_analog_level_locked`, and the hop `set_...`\u003d\u003e`set_..._locked` is unnecessary. The functions can be merged.",
      "range": {
        "startLine": 1656,
        "startChar": 0,
        "endLine": 1661,
        "endChar": 69
      },
      "revId": "92a7c436652a659451b669782fdd03a99769323c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1ed63966_5877ea34",
        "filename": "modules/audio_processing/audio_processing_impl.cc",
        "patchSetId": 4
      },
      "lineNbr": 1661,
      "author": {
        "id": 5122
      },
      "writtenOn": "2022-11-03T16:52:16Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "93a16988_4cac9fe4",
      "range": {
        "startLine": 1656,
        "startChar": 0,
        "endLine": 1661,
        "endChar": 69
      },
      "revId": "92a7c436652a659451b669782fdd03a99769323c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a48bb00b_79902859",
        "filename": "modules/audio_processing/audio_processing_impl.cc",
        "patchSetId": 4
      },
      "lineNbr": 1661,
      "author": {
        "id": 5119
      },
      "writtenOn": "2022-11-07T13:41:07Z",
      "side": 1,
      "message": "Just making sure this is not lost - \"Done\" as in \"will be done in a future patchset\"?",
      "parentUuid": "1ed63966_5877ea34",
      "range": {
        "startLine": 1656,
        "startChar": 0,
        "endLine": 1661,
        "endChar": 69
      },
      "revId": "92a7c436652a659451b669782fdd03a99769323c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a1e59321_ceb8eb99",
        "filename": "modules/audio_processing/audio_processing_impl.cc",
        "patchSetId": 4
      },
      "lineNbr": 1666,
      "author": {
        "id": 5119
      },
      "writtenOn": "2022-11-02T10:49:29Z",
      "side": 1,
      "message": "Do we support calling set_stream_analog_level multiple times in succession? Asking since that will overwrite applied_input_volume_changed.",
      "range": {
        "startLine": 1664,
        "startChar": 0,
        "endLine": 1666,
        "endChar": 46
      },
      "revId": "92a7c436652a659451b669782fdd03a99769323c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "42b99f1b_dc01eb2e",
        "filename": "modules/audio_processing/audio_processing_impl.cc",
        "patchSetId": 4
      },
      "lineNbr": 1666,
      "author": {
        "id": 5125
      },
      "writtenOn": "2022-11-03T07:47:52Z",
      "side": 1,
      "message": "Good point!\nI don\u0027t think we do. However, there is no real risk involved for the code behavior, so I\u0027d say that we should allow it, since it simplifies the rest of the code.",
      "parentUuid": "a1e59321_ceb8eb99",
      "range": {
        "startLine": 1664,
        "startChar": 0,
        "endLine": 1666,
        "endChar": 46
      },
      "revId": "92a7c436652a659451b669782fdd03a99769323c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8a9263b6_de82817b",
        "filename": "modules/audio_processing/audio_processing_impl.cc",
        "patchSetId": 4
      },
      "lineNbr": 1666,
      "author": {
        "id": 5122
      },
      "writtenOn": "2022-11-03T16:52:16Z",
      "side": 1,
      "message": "Good catch Sam! One more case of incorrectly API use that is allowed because of the set-Process-recommended scheme.\n\nLet\u0027s do this:\n- I will create a parent CL with a unit test that checks that multiple `set_stream_analog_level()` adjacent calls can still trigger an echo path gain change.\n- In this CL, I will move the input volume change detection in `ProcessCaptureStreamLocked()`.",
      "parentUuid": "a1e59321_ceb8eb99",
      "range": {
        "startLine": 1664,
        "startChar": 0,
        "endLine": 1666,
        "endChar": 46
      },
      "revId": "92a7c436652a659451b669782fdd03a99769323c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4b9161a6_56fd50cf",
        "filename": "modules/audio_processing/audio_processing_impl.cc",
        "patchSetId": 4
      },
      "lineNbr": 1676,
      "author": {
        "id": 5125
      },
      "writtenOn": "2022-11-03T07:47:52Z",
      "side": 1,
      "message": "The logic in this function is fairly intricate and one question I have is whether we really need it.\n\nWouldn\u0027t it be sufficient to just store the received input volume in a state variable, let the AGCs operate on that directly to store their recommended volumes, and then have this function simply return it?\n\nI agree that that approach will give incorrect behavior if the methods are not properly called, but so will the new approach applied here.",
      "range": {
        "startLine": 1672,
        "startChar": 0,
        "endLine": 1676,
        "endChar": 3
      },
      "revId": "92a7c436652a659451b669782fdd03a99769323c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "832207f1_e096262f",
        "filename": "modules/audio_processing/audio_processing_impl.cc",
        "patchSetId": 4
      },
      "lineNbr": 1676,
      "author": {
        "id": 5122
      },
      "writtenOn": "2022-11-03T16:52:16Z",
      "side": 1,
      "message": "on one hand, it\u0027d be good to fix the APM behavior so that the disabled tests added in https://webrtc-review.googlesource.com/c/src/+/281184 pass; but on the other hand, it\u0027s safer to leave the deprecate code unchanged\n\nprobably better to leave unchanged and add the tests only for the new API: as you can see from the child CL https://webrtc-review.googlesource.com/c/src/+/279780/3/modules/audio_processing/audio_processing_impl.cc lines 839-841, all the complexity of this getter goes away when we switch to the new API\n\nI will rearrange the chain of CLs to reduce (or even remove) any changes to the deprecated code",
      "parentUuid": "4b9161a6_56fd50cf",
      "range": {
        "startLine": 1672,
        "startChar": 0,
        "endLine": 1676,
        "endChar": 3
      },
      "revId": "92a7c436652a659451b669782fdd03a99769323c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "eb96c285_b5b6dc93",
        "filename": "modules/audio_processing/audio_processing_impl.cc",
        "patchSetId": 4
      },
      "lineNbr": 1676,
      "author": {
        "id": 5125
      },
      "writtenOn": "2022-11-08T09:50:49Z",
      "side": 1,
      "message": "\", it\u0027s safer to leave the deprecate code unchanged\"\nWhat I rather meant was that the function becomes quite complicated with the extra logic that is added in this CL",
      "parentUuid": "832207f1_e096262f",
      "range": {
        "startLine": 1672,
        "startChar": 0,
        "endLine": 1676,
        "endChar": 3
      },
      "revId": "92a7c436652a659451b669782fdd03a99769323c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6d196399_ce458e66",
        "filename": "modules/audio_processing/audio_processing_impl.cc",
        "patchSetId": 4
      },
      "lineNbr": 1680,
      "author": {
        "id": 5125
      },
      "writtenOn": "2022-11-03T07:47:52Z",
      "side": 1,
      "message": "If we intend to keep this, why not just set kFallBackInputVolume\u003dkMaxInputVolume (which is 255).\n\nThe extra 2 lines verifying that can then be removed.",
      "range": {
        "startLine": 1678,
        "startChar": 1,
        "endLine": 1680,
        "endChar": 61
      },
      "revId": "92a7c436652a659451b669782fdd03a99769323c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "963e4974_a68701e2",
        "filename": "modules/audio_processing/audio_processing_impl.cc",
        "patchSetId": 4
      },
      "lineNbr": 1683,
      "author": {
        "id": 5125
      },
      "writtenOn": "2022-11-03T07:47:52Z",
      "side": 1,
      "message": "This change also means that if no AGC is present and no emulation is used, kFallBackInputVolume will be returned. Please update the comment with that.",
      "range": {
        "startLine": 1683,
        "startChar": 5,
        "endLine": 1683,
        "endChar": 39
      },
      "revId": "92a7c436652a659451b669782fdd03a99769323c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bb688c3a_958e48f8",
        "filename": "modules/audio_processing/audio_processing_impl.cc",
        "patchSetId": 4
      },
      "lineNbr": 1692,
      "author": {
        "id": 5125
      },
      "writtenOn": "2022-11-03T07:47:52Z",
      "side": 1,
      "message": "This is a fairly complicated one-line statement with two value_or nested.\nFor readability/understanding of the code I think it is better to split this into a standard if-statement so that the different alternatives instead are explicitly spelled out.",
      "range": {
        "startLine": 1691,
        "startChar": 2,
        "endLine": 1692,
        "endChar": 40
      },
      "revId": "92a7c436652a659451b669782fdd03a99769323c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "22b48f53_12cfaff5",
        "filename": "modules/audio_processing/audio_processing_impl.h",
        "patchSetId": 4
      },
      "lineNbr": 384,
      "author": {
        "id": 5119
      },
      "writtenOn": "2022-11-02T10:49:29Z",
      "side": 1,
      "message": "I suggest grouping this with the similar variables in `ApmCaptureState`.\n - fewer \"loose\" member variables is better since APM state is so complex\n - it should be guarded by the capture lock",
      "range": {
        "startLine": 380,
        "startChar": 0,
        "endLine": 384,
        "endChar": 0
      },
      "revId": "92a7c436652a659451b669782fdd03a99769323c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6210242d_7eb766f5",
        "filename": "modules/audio_processing/audio_processing_impl.h",
        "patchSetId": 4
      },
      "lineNbr": 384,
      "author": {
        "id": 5125
      },
      "writtenOn": "2022-11-03T07:47:52Z",
      "side": 1,
      "message": "+1",
      "parentUuid": "22b48f53_12cfaff5",
      "range": {
        "startLine": 380,
        "startChar": 0,
        "endLine": 384,
        "endChar": 0
      },
      "revId": "92a7c436652a659451b669782fdd03a99769323c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7f6e398a_1d133261",
        "filename": "modules/audio_processing/audio_processing_impl.h",
        "patchSetId": 4
      },
      "lineNbr": 384,
      "author": {
        "id": 5122
      },
      "writtenOn": "2022-11-03T16:52:16Z",
      "side": 1,
      "message": "I will remove this as Per recommended in another comment",
      "parentUuid": "6210242d_7eb766f5",
      "range": {
        "startLine": 380,
        "startChar": 0,
        "endLine": 384,
        "endChar": 0
      },
      "revId": "92a7c436652a659451b669782fdd03a99769323c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a06a9af7_2cd16f0a",
        "filename": "modules/audio_processing/audio_processing_impl.h",
        "patchSetId": 4
      },
      "lineNbr": 488,
      "author": {
        "id": 5119
      },
      "writtenOn": "2022-11-02T10:49:29Z",
      "side": 1,
      "message": "As discussed, I found the name of this field confusing since we also have `applied_input_volume_changed`. `applied_input_volume_changed` also needs a comment so it is clear how it is different from this one.\n\n(you suggested renaming this one - that would also help. something like `applied_input_volume_reported` or `set_stream_analog_level_called`)",
      "range": {
        "startLine": 486,
        "startChar": 0,
        "endLine": 488,
        "endChar": 38
      },
      "revId": "92a7c436652a659451b669782fdd03a99769323c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "41fe651a_dccb98ee",
        "filename": "modules/audio_processing/audio_processing_impl.h",
        "patchSetId": 4
      },
      "lineNbr": 488,
      "author": {
        "id": 5119
      },
      "writtenOn": "2022-11-02T10:49:29Z",
      "side": 1,
      "message": "These variables are used for both 1) emulation and 2) API input volume communication. For example, tThe recommended input volume `recommended_input_volume` is not recommended by `recommended_stream_analog_level()` when emulation is enabled. Some of my confusion is probably down to naming: `applied_input_volume` is (now) always an external volume while recommended_input_volume is different things, but there\u0027s nothing about the names that indicate this. `input_volume_to_adjust` doesn\u0027t give any hint if it is the current volume that the AGC should adjust (produce a new recommendation for) or if it is the new volume that the level adjuster should apply, or something else.\n\nIt would be easier for me to follow if the external communication logic / variables were decoupled from the actual volume work within ProcessStream. Something like:\n\n1) rename these variables to something that excludes the emulation, like  `reported_external_input_volume` and `recommended_external_input_volume`\n\n2) do not use APM state to carry the new recommended volume. Instead (if possible) feed it directly from AGC to capture level adjuster in the current frame:\n\n```\nProcessCaptureStreamLocked() {\nif (emulate_volume_)\n  capture_level_adjuster.SetGain(agc.GetRecommendedVolume());\n\napplied_input_volume \u003d emulate_volume_\n        ? capture_level_adjuster.GetAnalogMicGainLevel()\n        : reported_external_input_volume;\n\nagc.SetAnalogGain(applied_input_volume);\n\ncapture_.recommended_external_input_volume \u003d emulate_volume_\n        ? reported_external_input_volume\n        : agc.GetRecommendedVolume();\n}\n```\n\nOr, if we do have to cache the recommended-for-emulation volume between calls, can we use a separate variable?\n```\nProcessCaptureStreamLocked() {\nif (emulate_volume_)\n  capture_level_adjuster.SetGain(recommended_emulation_volume);\n\n// \"applied input volume\" now really means the volume that was applied\n// most recently.\napplied_input_volume \u003d emulate_volume_\n        ? capture_level_adjuster.GetAnalogMicGainLevel()\n        : reported_external_input_volume;\nagc.SetAnalogGain(applied_input_volume);\n\n// Set volumes to report in API / carry to next frame\nif (emulate_volume_) {\n    capture_.recommended_emulation_volume \u003d agc.GetRecommendedVolume();\n    capture_.recommended_external_input_volume \u003d\n            capture_.reported_external_input_volume;\n} else {\n    capture_.recommended_emulation_volume \u003d absl::nullopt;\n    capture_.recommended_external_input_volume \u003d\n    agc.GetRecommendedVolume();\n}\n```",
      "range": {
        "startLine": 476,
        "startChar": 0,
        "endLine": 488,
        "endChar": 38
      },
      "revId": "92a7c436652a659451b669782fdd03a99769323c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c6ae54c9_64e8cf8d",
        "filename": "modules/audio_processing/audio_processing_impl_unittest.cc",
        "patchSetId": 4
      },
      "lineNbr": 1058,
      "author": {
        "id": 5119
      },
      "writtenOn": "2022-11-02T10:49:29Z",
      "side": 1,
      "message": "Can this TODO be removed now?",
      "range": {
        "startLine": 1058,
        "startChar": 0,
        "endLine": 1058,
        "endChar": 76
      },
      "revId": "92a7c436652a659451b669782fdd03a99769323c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "caf4eb93_f99a994d",
        "filename": "modules/audio_processing/audio_processing_impl_unittest.cc",
        "patchSetId": 4
      },
      "lineNbr": 1080,
      "author": {
        "id": 5119
      },
      "writtenOn": "2022-11-02T10:49:29Z",
      "side": 1,
      "message": "Can this TODO be removed now?",
      "range": {
        "startLine": 1080,
        "startChar": 0,
        "endLine": 1080,
        "endChar": 76
      },
      "revId": "92a7c436652a659451b669782fdd03a99769323c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    }
  ]
}