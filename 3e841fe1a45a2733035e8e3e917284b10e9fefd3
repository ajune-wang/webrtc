{
  "comments": [
    {
      "key": {
        "uuid": "03e453b7_fd9b2d6e",
        "filename": "audio/audio_send_stream.h",
        "patchSetId": 18
      },
      "lineNbr": 94,
      "author": {
        "id": 5399
      },
      "writtenOn": "2017-12-07T13:57:23Z",
      "side": 1,
      "message": "Does this really need a separate function, seeing as it\u0027s only a couple of lines, only called from one site but - since it may be called from elsewhere - requires another thread check?",
      "revId": "3e841fe1a45a2733035e8e3e917284b10e9fefd3",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "72b4a398_aa0f6482",
        "filename": "audio/audio_send_stream.h",
        "patchSetId": 18
      },
      "lineNbr": 94,
      "author": {
        "id": 5077
      },
      "writtenOn": "2017-12-07T14:29:28Z",
      "side": 1,
      "message": "Well, it is called from a *static* function, so I thought this clearer than accessing the fields directly.",
      "parentUuid": "03e453b7_fd9b2d6e",
      "revId": "3e841fe1a45a2733035e8e3e917284b10e9fefd3",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b173b5cc_fa714531",
        "filename": "audio/audio_send_stream.h",
        "patchSetId": 18
      },
      "lineNbr": 94,
      "author": {
        "id": 5399
      },
      "writtenOn": "2017-12-07T15:51:26Z",
      "side": 1,
      "message": "Hmm... fair enough!",
      "parentUuid": "72b4a398_aa0f6482",
      "revId": "3e841fe1a45a2733035e8e3e917284b10e9fefd3",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8c970d5b_f322f7a0",
        "filename": "audio/audio_send_stream_unittest.cc",
        "patchSetId": 18
      },
      "lineNbr": 61,
      "author": {
        "id": 5399
      },
      "writtenOn": "2017-12-07T13:57:23Z",
      "side": 1,
      "message": "These constants need no longer be at file scope. I\u0027d probably remove them altogether and just check against zeroes in AudioSendStreamTest::GetStats.",
      "revId": "3e841fe1a45a2733035e8e3e917284b10e9fefd3",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "77d5ca5b_5745def4",
        "filename": "audio/audio_send_stream_unittest.cc",
        "patchSetId": 18
      },
      "lineNbr": 61,
      "author": {
        "id": 5077
      },
      "writtenOn": "2017-12-15T00:38:15Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "8c970d5b_f322f7a0",
      "revId": "3e841fe1a45a2733035e8e3e917284b10e9fefd3",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1ecfb924_e692fa83",
        "filename": "audio/audio_state.cc",
        "patchSetId": 18
      },
      "lineNbr": 68,
      "author": {
        "id": 5399
      },
      "writtenOn": "2017-12-07T13:57:23Z",
      "side": 1,
      "message": "I think Add/Remove should ensure they\u0027re only called once per stream:\n- (D)CHECK that erase removes exactly one item.\n- (D)CHECK that sending_streams_ doesn\u0027t contain stream already in AddSendingStream.",
      "revId": "3e841fe1a45a2733035e8e3e917284b10e9fefd3",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a6b8b37d_4fb4400b",
        "filename": "audio/audio_state.cc",
        "patchSetId": 18
      },
      "lineNbr": 68,
      "author": {
        "id": 5077
      },
      "writtenOn": "2017-12-15T00:38:15Z",
      "side": 1,
      "message": "Note that AddSendingStream() is used not only to add a stream but also to update its rate and channel count, in the case of codec changes (see AudioSendStream). Perhaps the name should be changed to AddOrUpdateSendingStream() but that\u0027s ugly and I\u0027d rather not have two separate functions. \"SetSendingStream()\" perhaps?\n\nI\u0027ve added an assert in RemoveSendingStream() and appropriate conditions in AudioSendStream. Also, I added an assert in the dtor.",
      "parentUuid": "1ecfb924_e692fa83",
      "revId": "3e841fe1a45a2733035e8e3e917284b10e9fefd3",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f5268a82_8b10834c",
        "filename": "audio/audio_state.cc",
        "patchSetId": 18
      },
      "lineNbr": 68,
      "author": {
        "id": 5077
      },
      "writtenOn": "2017-12-15T10:00:55Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a6b8b37d_4fb4400b",
      "revId": "3e841fe1a45a2733035e8e3e917284b10e9fefd3",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "744407b3_dccd316a",
        "filename": "audio/audio_state_unittest.cc",
        "patchSetId": 18
      },
      "lineNbr": 92,
      "author": {
        "id": 5399
      },
      "writtenOn": "2017-12-06T17:22:52Z",
      "side": 1,
      "message": "What\u0027s this all about?",
      "revId": "3e841fe1a45a2733035e8e3e917284b10e9fefd3",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8335aecd_67ba153e",
        "filename": "audio/audio_state_unittest.cc",
        "patchSetId": 18
      },
      "lineNbr": 92,
      "author": {
        "id": 5077
      },
      "writtenOn": "2017-12-15T00:38:15Z",
      "side": 1,
      "message": "Fixed.",
      "parentUuid": "744407b3_dccd316a",
      "revId": "3e841fe1a45a2733035e8e3e917284b10e9fefd3",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "64cb8733_869ce28c",
        "filename": "audio/audio_transport_impl.cc",
        "patchSetId": 18
      },
      "lineNbr": 55,
      "author": {
        "id": 5399
      },
      "writtenOn": "2017-12-06T17:22:52Z",
      "side": 1,
      "message": "I\u0027d say either:\n1. Retain old behavior WRT to drift compensation in this CL - although we are disabling it, maybe someone else isn\u0027t. Remove it as a separate CL after checking with the signal processing team / PSA:ing etc.\n2. Check with the signal processing team right now and if they consider the feature dead, keep your code as-is.",
      "revId": "3e841fe1a45a2733035e8e3e917284b10e9fefd3",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1b3147aa_fb332695",
        "filename": "audio/audio_transport_impl.cc",
        "patchSetId": 18
      },
      "lineNbr": 55,
      "author": {
        "id": 5077
      },
      "writtenOn": "2017-12-07T13:43:24Z",
      "side": 1,
      "message": "Henrik, Per - is it safe to assume that no APM user will enable drift compensation?",
      "parentUuid": "64cb8733_869ce28c",
      "revId": "3e841fe1a45a2733035e8e3e917284b10e9fefd3",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0733f440_c3661cdc",
        "filename": "audio/audio_transport_impl.cc",
        "patchSetId": 18
      },
      "lineNbr": 55,
      "author": {
        "id": 5100
      },
      "writtenOn": "2017-12-15T10:25:24Z",
      "side": 1,
      "message": "That should be a safe assumption.",
      "parentUuid": "1b3147aa_fb332695",
      "revId": "3e841fe1a45a2733035e8e3e917284b10e9fefd3",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a7a03be9_360e67a8",
        "filename": "audio/audio_transport_impl.cc",
        "patchSetId": 18
      },
      "lineNbr": 59,
      "author": {
        "id": 5399
      },
      "writtenOn": "2017-12-06T17:22:52Z",
      "side": 1,
      "message": "current_mic_level -\u003e analog_level in log message?",
      "revId": "3e841fe1a45a2733035e8e3e917284b10e9fefd3",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "adf3b083_f2a55ebd",
        "filename": "audio/audio_transport_impl.cc",
        "patchSetId": 18
      },
      "lineNbr": 59,
      "author": {
        "id": 5077
      },
      "writtenOn": "2017-12-07T13:43:24Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a7a03be9_360e67a8",
      "revId": "3e841fe1a45a2733035e8e3e917284b10e9fefd3",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5cbec68e_b1da2eca",
        "filename": "audio/audio_transport_impl.cc",
        "patchSetId": 18
      },
      "lineNbr": 60,
      "author": {
        "id": 5399
      },
      "writtenOn": "2017-12-06T17:22:52Z",
      "side": 1,
      "message": "Is there a reason why this was the first parameter set in TransmitMixer::ProcessAudio? My guess is: probably not, but maybe check? Just in case an updated delay alters the interpretation of the following parameters being set.",
      "revId": "3e841fe1a45a2733035e8e3e917284b10e9fefd3",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f1e9b676_d2e13502",
        "filename": "audio/audio_transport_impl.cc",
        "patchSetId": 18
      },
      "lineNbr": 60,
      "author": {
        "id": 5077
      },
      "writtenOn": "2017-12-07T13:43:24Z",
      "side": 1,
      "message": "AFAICT APM only uses this value from inside the ProcessNnn... methods, so parameter setting order shouldn\u0027t matter.",
      "parentUuid": "5cbec68e_b1da2eca",
      "revId": "3e841fe1a45a2733035e8e3e917284b10e9fefd3",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "66961af8_3f66c25c",
        "filename": "audio/audio_transport_impl.cc",
        "patchSetId": 18
      },
      "lineNbr": 114,
      "author": {
        "id": 5399
      },
      "writtenOn": "2017-12-06T17:22:52Z",
      "side": 1,
      "message": "Was going to ask you to create a bug about this missing functionality, bug I see you\u0027ve already done so. Great!\n\nhttp://crbug.com/webrtc/8598",
      "revId": "3e841fe1a45a2733035e8e3e917284b10e9fefd3",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "13d34fd3_1bba8e6b",
        "filename": "audio/audio_transport_impl.cc",
        "patchSetId": 18
      },
      "lineNbr": 114,
      "author": {
        "id": 5077
      },
      "writtenOn": "2017-12-07T13:43:24Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "66961af8_3f66c25c",
      "revId": "3e841fe1a45a2733035e8e3e917284b10e9fefd3",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "45adfaf8_1e9be4bb",
        "filename": "audio/audio_transport_impl.cc",
        "patchSetId": 18
      },
      "lineNbr": 157,
      "author": {
        "id": 5399
      },
      "writtenOn": "2017-12-06T17:22:52Z",
      "side": 1,
      "message": "Not having to go through each and every Channel and collect these each time is just ... just grand! :D\n\nI think it should be possible to fold picking the best native sample rate (now done in InitializeCaptureFrame) into UpdateSendingStreams, though that\u0027s just a constant overhead of a few iterations, so it\u0027s not a big deal.\n\nGoing forward, AudioState\u0027s Add- and RemoveSendingStream could probably be updated be linear in the number of streams (i.e. O(n^2) when adding n streams), but that\u0027s definitely nothing I\u0027ll press for in this CL.",
      "revId": "3e841fe1a45a2733035e8e3e917284b10e9fefd3",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "02041c06_51dae93a",
        "filename": "audio/audio_transport_impl.cc",
        "patchSetId": 18
      },
      "lineNbr": 157,
      "author": {
        "id": 5077
      },
      "writtenOn": "2017-12-07T13:43:24Z",
      "side": 1,
      "message": "Yes, we could eliminate the iteration across available rates by caching the max(sample_rate, send_sample_rate_hz_). We can\u0027t fold it into UpdateSendingStreams though, since we don\u0027t have a separate reset signal from the ADM but must assume rate and channel config can change from one call here to another.\n\nNot sure what you mean re: AudioState - I don\u0027t see any n^2 behavior there right now. Map insert/lookup/erase should be log-ish, then there\u0027s a linear transform into a vector. Where\u0027s my blind spot?",
      "parentUuid": "45adfaf8_1e9be4bb",
      "revId": "3e841fe1a45a2733035e8e3e917284b10e9fefd3",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "13f1ddb4_5e7c8ef4",
        "filename": "audio/audio_transport_impl.cc",
        "patchSetId": 18
      },
      "lineNbr": 157,
      "author": {
        "id": 5399
      },
      "writtenOn": "2017-12-07T15:51:26Z",
      "side": 1,
      "message": "Since streams are added one-by-one, each time doing this linear transform, adding n streams will take n^2 time. Since these are send streams, though, chances are you won\u0027t have that many, so that\u0027s probably fine. Altogether, this is much better than before!",
      "parentUuid": "02041c06_51dae93a",
      "revId": "3e841fe1a45a2733035e8e3e917284b10e9fefd3",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "eb1b7ecc_e1e73804",
        "filename": "audio/audio_transport_impl.cc",
        "patchSetId": 18
      },
      "lineNbr": 157,
      "author": {
        "id": 5077
      },
      "writtenOn": "2017-12-15T00:38:15Z",
      "side": 1,
      "message": "Ah, I see. :) I also made the assumption that there will be relatively few outgoing streams so there\u0027d be no need to optimize Add/Remove of streams. The n^2 behavior is for an entire call, and it isn\u0027t *strictly* n^2, since we\u0027re adding a stream at a time; it\u0027s a geometric series.\n\nKeeping the map sorted isn\u0027t an option either, since we want the max of both sample rate and channel count.",
      "parentUuid": "13f1ddb4_5e7c8ef4",
      "revId": "3e841fe1a45a2733035e8e3e917284b10e9fefd3",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8a406341_8812b9fb",
        "filename": "audio/audio_transport_impl.cc",
        "patchSetId": 18
      },
      "lineNbr": 191,
      "author": {
        "id": 5399
      },
      "writtenOn": "2017-12-06T17:22:52Z",
      "side": 1,
      "message": "Is capture_lock_ a new lock? Are we now locking more than before?\nAlso, with it unlocked during processing, the set of sending streams might not match the ones we got send_sample_rate_hz etc. for. That\u0027s probably ok, right?",
      "revId": "3e841fe1a45a2733035e8e3e917284b10e9fefd3",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a9b29f55_d83e6bfa",
        "filename": "audio/audio_transport_impl.cc",
        "patchSetId": 18
      },
      "lineNbr": 191,
      "author": {
        "id": 5077
      },
      "writtenOn": "2017-12-07T13:43:24Z",
      "side": 1,
      "message": "capture_lock_ is a new lock, and we grab it twice in this function to not hog it while processing.\n\nGone though, is lock_ in TransmitMixer, as well as the lock which is grabbed when iterating over Channels with ChannelManager::Iterator (https://cs.chromium.org/chromium/src/third_party/webrtc/voice_engine/channel_manager.cc?l\u003d116). Note also that ChannelManager::Iterator does not hold the lock while iterating over channels so AFAICT it is broken and there is a potential race each time ChannelManager::Iterator is used.\n\nSo we\u0027re taking one less lock.",
      "parentUuid": "8a406341_8812b9fb",
      "revId": "3e841fe1a45a2733035e8e3e917284b10e9fefd3",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "175e1def_7f82f4ea",
        "filename": "audio/audio_transport_impl.cc",
        "patchSetId": 18
      },
      "lineNbr": 191,
      "author": {
        "id": 5399
      },
      "writtenOn": "2017-12-07T15:51:26Z",
      "side": 1,
      "message": "Sweet!",
      "parentUuid": "a9b29f55_d83e6bfa",
      "revId": "3e841fe1a45a2733035e8e3e917284b10e9fefd3",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "80c4cc0b_a706cfcb",
        "filename": "audio/audio_transport_impl.cc",
        "patchSetId": 18
      },
      "lineNbr": 197,
      "author": {
        "id": 5399
      },
      "writtenOn": "2017-12-06T17:22:52Z",
      "side": 1,
      "message": "Oh, no! I just found myself wishing we had cdr but for arbitrary iterable containers in C++.\nSo you could do for (auto\u0026 stream : cdr(sending_streams)) or something. Maybe in C++36. :)",
      "revId": "3e841fe1a45a2733035e8e3e917284b10e9fefd3",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3fd08505_3102c398",
        "filename": "audio/audio_transport_impl.cc",
        "patchSetId": 18
      },
      "lineNbr": 197,
      "author": {
        "id": 5077
      },
      "writtenOn": "2017-12-07T13:43:24Z",
      "side": 1,
      "message": "Totally - if you wish to spend the next 19 years trying to push it into the standard. ;)",
      "parentUuid": "80c4cc0b_a706cfcb",
      "revId": "3e841fe1a45a2733035e8e3e917284b10e9fefd3",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b83c97ac_20bbf5f8",
        "filename": "audio/audio_transport_impl.cc",
        "patchSetId": 18
      },
      "lineNbr": 202,
      "author": {
        "id": 5399
      },
      "writtenOn": "2017-12-06T17:22:52Z",
      "side": 1,
      "message": "It took a little bit, but I see what you\u0027re doing. Perhaps add a comment here to help guide other readers. Something like:\n// Send the original frame to the first stream w/o copying.\nTogether with the initial explanation at the beginning of the block might help.",
      "revId": "3e841fe1a45a2733035e8e3e917284b10e9fefd3",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "710126c4_62c83953",
        "filename": "audio/audio_transport_impl.cc",
        "patchSetId": 18
      },
      "lineNbr": 202,
      "author": {
        "id": 5077
      },
      "writtenOn": "2017-12-07T13:43:24Z",
      "side": 1,
      "message": "Good idea.",
      "parentUuid": "b83c97ac_20bbf5f8",
      "revId": "3e841fe1a45a2733035e8e3e917284b10e9fefd3",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c29530f1_109143a7",
        "filename": "call/audio_send_stream.h",
        "patchSetId": 18
      },
      "lineNbr": 152,
      "author": {
        "id": 5399
      },
      "writtenOn": "2017-12-06T17:22:52Z",
      "side": 1,
      "message": "Why not SendAudioData? Maps better against SendTelephoneEvent below.\nNot sure the interface should prescribe that this call would encode and send the data (as in the comment). A diffuse Send (as this is a SendStream) seems more correct.",
      "revId": "3e841fe1a45a2733035e8e3e917284b10e9fefd3",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "08eab727_d1830772",
        "filename": "call/audio_send_stream.h",
        "patchSetId": 18
      },
      "lineNbr": 152,
      "author": {
        "id": 5077
      },
      "writtenOn": "2017-12-07T13:43:24Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c29530f1_109143a7",
      "revId": "3e841fe1a45a2733035e8e3e917284b10e9fefd3",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0b7afa28_7b325b56",
        "filename": "media/engine/webrtcvoe.h",
        "patchSetId": 18
      },
      "lineNbr": 78,
      "author": {
        "id": 5399
      },
      "writtenOn": "2017-12-06T17:22:52Z",
      "side": 1,
      "message": "If this is to replace what FakeVoEWrapper did before, shouldn\u0027t it at least take a webrtc::VoiceEngine* and set base_ to that one? Now base and engine are two different things... seems wrong.",
      "revId": "3e841fe1a45a2733035e8e3e917284b10e9fefd3",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "70dc2d09_a7278dcb",
        "filename": "media/engine/webrtcvoe.h",
        "patchSetId": 18
      },
      "lineNbr": 78,
      "author": {
        "id": 5077
      },
      "writtenOn": "2017-12-07T13:43:24Z",
      "side": 1,
      "message": "Yes, it is wrong, but it is temporary.",
      "parentUuid": "0b7afa28_7b325b56",
      "revId": "3e841fe1a45a2733035e8e3e917284b10e9fefd3",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7bb6a0ac_b899f433",
        "filename": "media/engine/webrtcvoe.h",
        "patchSetId": 18
      },
      "lineNbr": 78,
      "author": {
        "id": 5399
      },
      "writtenOn": "2017-12-15T12:29:37Z",
      "side": 1,
      "message": "That\u0027s a weak excuse. :)\nWhy won\u0027t this blow up, when base_ and  engine_ refer to different Voice Engines?",
      "parentUuid": "70dc2d09_a7278dcb",
      "revId": "3e841fe1a45a2733035e8e3e917284b10e9fefd3",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8fb73494_c1fa97c7",
        "filename": "media/engine/webrtcvoiceengine.cc",
        "patchSetId": 18
      },
      "lineNbr": 342,
      "author": {
        "id": 5399
      },
      "writtenOn": "2017-12-06T17:22:52Z",
      "side": 1,
      "message": "Can this one go now that we have audio_state() below?\nIt doesn\u0027t seem to be used, and is returning shared ownership. :(\nPerhaps in a follow-up CL?",
      "revId": "3e841fe1a45a2733035e8e3e917284b10e9fefd3",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a2ef2ddf_1dbc27da",
        "filename": "media/engine/webrtcvoiceengine.cc",
        "patchSetId": 18
      },
      "lineNbr": 342,
      "author": {
        "id": 5077
      },
      "writtenOn": "2017-12-07T13:43:24Z",
      "side": 1,
      "message": "But it is used, see e.g.: https://cs.chromium.org/chromium/src/third_party/webrtc/pc/peerconnectionfactory.cc?l\u003d352\n\nI thought it best to keep the public method separate from the internal ones for the reason you mention - this one returns explicitly shared ownership.",
      "parentUuid": "8fb73494_c1fa97c7",
      "revId": "3e841fe1a45a2733035e8e3e917284b10e9fefd3",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "749559ed_4429fb3a",
        "filename": "media/engine/webrtcvoiceengine_unittest.cc",
        "patchSetId": 18
      },
      "lineNbr": 84,
      "author": {
        "id": 5399
      },
      "writtenOn": "2017-12-06T17:22:52Z",
      "side": 1,
      "message": "Why is the ADM now AddRef/Released four times instead of only once?",
      "revId": "3e841fe1a45a2733035e8e3e917284b10e9fefd3",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "89de2586_ec64e99d",
        "filename": "media/engine/webrtcvoiceengine_unittest.cc",
        "patchSetId": 18
      },
      "lineNbr": 84,
      "author": {
        "id": 5077
      },
      "writtenOn": "2017-12-07T13:43:24Z",
      "side": 1,
      "message": "Because it is now also owned by AudioState.",
      "parentUuid": "749559ed_4429fb3a",
      "revId": "3e841fe1a45a2733035e8e3e917284b10e9fefd3",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "43fbc3dc_4d105a88",
        "filename": "media/engine/webrtcvoiceengine_unittest.cc",
        "patchSetId": 18
      },
      "lineNbr": 2790,
      "author": {
        "id": 5399
      },
      "writtenOn": "2017-12-06T17:22:52Z",
      "side": 1,
      "message": "Make TODO message better! (or just do it!)",
      "revId": "3e841fe1a45a2733035e8e3e917284b10e9fefd3",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0438b1dd_337638d9",
        "filename": "media/engine/webrtcvoiceengine_unittest.cc",
        "patchSetId": 18
      },
      "lineNbr": 2790,
      "author": {
        "id": 5077
      },
      "writtenOn": "2017-12-15T00:38:15Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "43fbc3dc_4d105a88",
      "revId": "3e841fe1a45a2733035e8e3e917284b10e9fefd3",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "efffcbc7_735ae591",
        "filename": "media/engine/webrtcvoiceengine_unittest.cc",
        "patchSetId": 18
      },
      "lineNbr": 3339,
      "author": {
        "id": 5399
      },
      "writtenOn": "2017-12-06T17:22:52Z",
      "side": 1,
      "message": "Same question. Is the ownership now more spread out, or is the ADM just handed around more?",
      "revId": "3e841fe1a45a2733035e8e3e917284b10e9fefd3",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7022f28d_26e93d18",
        "filename": "media/engine/webrtcvoiceengine_unittest.cc",
        "patchSetId": 18
      },
      "lineNbr": 3339,
      "author": {
        "id": 5077
      },
      "writtenOn": "2017-12-07T13:43:24Z",
      "side": 1,
      "message": "Same answer.",
      "parentUuid": "efffcbc7_735ae591",
      "revId": "3e841fe1a45a2733035e8e3e917284b10e9fefd3",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "73306091_e3ecc50d",
        "filename": "media/engine/webrtcvoiceengine_unittest.cc",
        "patchSetId": 18
      },
      "lineNbr": 3339,
      "author": {
        "id": 5077
      },
      "writtenOn": "2017-12-15T00:38:15Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7022f28d_26e93d18",
      "revId": "3e841fe1a45a2733035e8e3e917284b10e9fefd3",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e27845bd_6ca9117d",
        "filename": "modules/audio_device/include/audio_device_defines.h",
        "patchSetId": 18
      },
      "lineNbr": 59,
      "author": {
        "id": 5399
      },
      "writtenOn": "2017-12-06T17:22:52Z",
      "side": 1,
      "message": "RTC_DEPRECATED has caused problems downstream before. (Creates a warning and warnings are treated as errors). Although, if the bots are happy with this, so am I.",
      "revId": "3e841fe1a45a2733035e8e3e917284b10e9fefd3",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4112bbc3_0f1fa256",
        "filename": "modules/audio_device/include/audio_device_defines.h",
        "patchSetId": 18
      },
      "lineNbr": 59,
      "author": {
        "id": 5077
      },
      "writtenOn": "2017-12-07T13:43:24Z",
      "side": 1,
      "message": "They were happy last time I looked.",
      "parentUuid": "e27845bd_6ca9117d",
      "revId": "3e841fe1a45a2733035e8e3e917284b10e9fefd3",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "50631930_3efb7716",
        "filename": "test/mock_voe_channel_proxy.h",
        "patchSetId": 18
      },
      "lineNbr": 81,
      "author": {
        "id": 5399
      },
      "writtenOn": "2017-12-06T17:22:52Z",
      "side": 1,
      "message": "gmock doesn\u0027t deal with move-only types. :(\nThere are some examples of this being worked around in other areas of WebRTC you could have a gander at.",
      "revId": "3e841fe1a45a2733035e8e3e917284b10e9fefd3",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "10296445_af305721",
        "filename": "test/mock_voe_channel_proxy.h",
        "patchSetId": 18
      },
      "lineNbr": 81,
      "author": {
        "id": 5077
      },
      "writtenOn": "2017-12-15T00:38:15Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "50631930_3efb7716",
      "revId": "3e841fe1a45a2733035e8e3e917284b10e9fefd3",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    }
  ]
}