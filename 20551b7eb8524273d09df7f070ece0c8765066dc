{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "1dc503d2_163d4e7a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 14634
      },
      "writtenOn": "2023-04-20T01:02:49Z",
      "side": 1,
      "message": "All the macro changes make me a bit uneasy - not sure how strong the guarantees from clang format are. But, seems non destructive to me.. also happy to exclude these from formatting instead",
      "revId": "20551b7eb8524273d09df7f070ece0c8765066dc",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2ffaa56f_3ca0bff8",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5087
      },
      "writtenOn": "2023-04-20T06:56:31Z",
      "side": 1,
      "message": "Adding orphis@ to check why SvcTestAV1/SvcTest.ScalabilityModeSupported is failing on iOS-sim.",
      "revId": "20551b7eb8524273d09df7f070ece0c8765066dc",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "353d32a2_4d9a3377",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 7036
      },
      "writtenOn": "2023-04-20T13:00:22Z",
      "side": 1,
      "message": "That must be a recent regression, it shouldn\u0027t be failing.",
      "parentUuid": "2ffaa56f_3ca0bff8",
      "revId": "20551b7eb8524273d09df7f070ece0c8765066dc",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3fa28c24_996d02af",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5087
      },
      "writtenOn": "2023-04-20T13:15:02Z",
      "side": 1,
      "message": "I saw a rollback earlier today. I think running again will go green.",
      "parentUuid": "353d32a2_4d9a3377",
      "revId": "20551b7eb8524273d09df7f070ece0c8765066dc",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "30c41ead_cbde072a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 14634
      },
      "writtenOn": "2023-04-20T21:18:36Z",
      "side": 1,
      "message": "agreed - could you schedule a dry run for me?",
      "parentUuid": "3fa28c24_996d02af",
      "revId": "20551b7eb8524273d09df7f070ece0c8765066dc",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0639b538_ba33c261",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 14634
      },
      "writtenOn": "2023-04-20T21:53:54Z",
      "side": 1,
      "message": "I also wonder if we should add allow_owner_if_submittable DRY_RUN [1][2] to the webrtc gerrit_cq_ability [3] - seems safe due to the Code-Review+1 copy condition? (\"changekind:NO_CODE_CHANGE OR changekind:TRIVIAL_REBASE OR has:unchanged-files OR is:MIN\")\n\nJust to allow the cl owner to start a dry run on already approved CLs, instead of taking time from a committer\n\n\n[1] https://source.chromium.org/chromium/infra/infra/+/main:go/src/go.chromium.org/luci/cv/api/config/v2/config.pb.go;l\u003d1374\n\n[2] https://source.chromium.org/chromium/infra/infra/+/main:go/src/go.chromium.org/luci/cv/internal/acls/run_create.go;l\u003d238\n\n[3]\nhttps://source.chromium.org/chromium/chromium/src/+/main:third_party/webrtc/infra/config/commit-queue.cfg;l\u003d25",
      "parentUuid": "30c41ead_cbde072a",
      "revId": "20551b7eb8524273d09df7f070ece0c8765066dc",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    }
  ]
}