{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "afefa403_6a5cf286",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5234
      },
      "writtenOn": "2021-07-22T08:11:52Z",
      "side": 1,
      "message": "Ivo, PTAL at change to the audio processing. Deletes one use of RTC_NO_THREAD_SAFETY_ANALYSIS, and adds a method AudioProcessingImpl::AssertLockedForTest.",
      "revId": "c3e2336e39159e919f7fcfedd148e02326dc4bcf",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1f079a48_58466081",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5607
      },
      "writtenOn": "2021-07-22T08:46:22Z",
      "side": 1,
      "message": "audio_processing/ lgtm",
      "revId": "c3e2336e39159e919f7fcfedd148e02326dc4bcf",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9da132f3_3dc7b79b",
        "filename": "rtc_base/synchronization/mutex.h",
        "patchSetId": 2
      },
      "lineNbr": 53,
      "author": {
        "id": 5087
      },
      "writtenOn": "2021-07-23T08:14:34Z",
      "side": 1,
      "message": "Ok, after talking with some thread annotations expert I am a bit concerned about this annotation being added by default while the function doesn\u0027t actually always assert.\n\nWhile this should not result in any UB, I am concerned this will become a way to silence the compiler warning without getting a crash.\n\nSo before landing this one we should set up a bot to always run tests with absl::Mutex, but even in that case I am still not sure this is a good thing to do since we open a possibility to lie to the compiler which brings us to the second option of implementing AssertHeld on all the Mutex classes and let the assert happen in all build modes.",
      "range": {
        "startLine": 53,
        "startChar": 0,
        "endLine": 53,
        "endChar": 55
      },
      "revId": "c3e2336e39159e919f7fcfedd148e02326dc4bcf",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "22f5818b_058022a4",
        "filename": "rtc_base/synchronization/mutex.h",
        "patchSetId": 2
      },
      "lineNbr": 53,
      "author": {
        "id": 5234
      },
      "writtenOn": "2021-07-23T08:28:57Z",
      "side": 1,
      "message": "My intended use cases are (i) replacing RTC_NO_THREAD_SAFETY_ANALYSIS (not sure we currently have other easily replacable uses than the one in this cl), and (ii) untangle locking on call chains that currently depend on recursive locking.\n\nIn most cases RTC_EXCLUSIVE_LOCKS_REQUIRED (strict compile-only check) is a better tool, but we have a few cases where locking assumptions on call chains involving several classes. E.g., a method A::Foo that is always called from class B, with some lock held, which calls back into class B, method B::bar. We can\u0027t easily tell the compiler that calling A::Foo requires that some lock belonging to another class B is held, and therefore B::Foo can\u0027t be annotated with RTC_EXCLUSIVE_LOCKS_REQUIRED. But B::bar can use AssertHeld.\n\nBut I agree it would be great to have a test bot running with absl::Mutex up first.",
      "parentUuid": "9da132f3_3dc7b79b",
      "range": {
        "startLine": 53,
        "startChar": 0,
        "endLine": 53,
        "endChar": 55
      },
      "revId": "c3e2336e39159e919f7fcfedd148e02326dc4bcf",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    }
  ]
}