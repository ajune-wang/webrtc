{
  "comments": [
    {
      "key": {
        "uuid": "19a68104_25c503c4",
        "filename": "media/engine/simulcast_encoder_adapter.cc",
        "patchSetId": 4
      },
      "lineNbr": 216,
      "author": {
        "id": 5098
      },
      "writtenOn": "2017-10-20T11:23:46Z",
      "side": 1,
      "message": "It\u0027s unfortunate that we need to add a new method in the interface for this as it seems to be a codec specific implementation detail. Would it be possible to check the return value of InitEncode() to determine if the encoder supports multiple numberOfSimulcastStreams instead?",
      "range": {
        "startLine": 216,
        "startChar": 30,
        "endLine": 216,
        "endChar": 47
      },
      "revId": "bef9994b1e8525c41f879a47b7c0527955ef2ab6",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4e0aa32a_5431771e",
        "filename": "media/engine/simulcast_encoder_adapter.h",
        "patchSetId": 4
      },
      "lineNbr": 116,
      "author": {
        "id": 5098
      },
      "writtenOn": "2017-10-20T11:23:46Z",
      "side": 1,
      "message": "The bool here is redundant because it should be true only if |passthrough_encoder_| is non-null.\n\nAll methods now basically do this:\nVP8EncoderImpl::Foo(args) {\n  if (passthrough_encoder_)\n    return passthrough_encoder_-\u003eFoo(args);\n  ...simulcast stuff...\n}\n\nIt feels more natural to do this dispatching with polymorphism instead. Then we would have one SimulcastEncoder that unconditionally creates multiple encoders, and one top-level encoder that decides in InitEncode() if it should just create a passthrough encoder or an actual SimulcastEncoder. The rest of the methods in the top-level encoder would just delegate to this encoder.",
      "range": {
        "startLine": 115,
        "startChar": 0,
        "endLine": 116,
        "endChar": 53
      },
      "revId": "bef9994b1e8525c41f879a47b7c0527955ef2ab6",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    }
  ]
}