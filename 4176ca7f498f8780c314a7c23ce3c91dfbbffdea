{
  "comments": [
    {
      "key": {
        "uuid": "1bb51857_0521b5d0",
        "filename": "api/rtpreceiverinterface.h",
        "patchSetId": 2
      },
      "lineNbr": 102,
      "author": {
        "id": 5142
      },
      "writtenOn": "2018-07-03T10:02:09Z",
      "side": 1,
      "message": "I noticed we have an RTC_DEPRECATED macro, but it\u0027s too early to add that without breakages.",
      "revId": "4176ca7f498f8780c314a7c23ce3c91dfbbffdea",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5d67d1d4_a7397d4d",
        "filename": "api/rtpreceiverinterface.h",
        "patchSetId": 2
      },
      "lineNbr": 102,
      "author": {
        "id": 5800
      },
      "writtenOn": "2018-07-03T18:42:12Z",
      "side": 1,
      "message": "Would you rather do this as opposed to just removing the API? It generates errors when compiling either way so I don\u0027t see much of a diffference, although it does have a better error message. WDYT?",
      "parentUuid": "1bb51857_0521b5d0",
      "revId": "4176ca7f498f8780c314a7c23ce3c91dfbbffdea",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ce946911_9c03af03",
        "filename": "api/rtpreceiverinterface.h",
        "patchSetId": 2
      },
      "lineNbr": 102,
      "author": {
        "id": 5142
      },
      "writtenOn": "2018-07-04T18:53:48Z",
      "side": 1,
      "message": "Oh lol, no you\u0027re right that seems kind of pointless. Let\u0027s nuke it when we can.",
      "parentUuid": "5d67d1d4_a7397d4d",
      "revId": "4176ca7f498f8780c314a7c23ce3c91dfbbffdea",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a0648042_77ca87a3",
        "filename": "pc/peerconnection.cc",
        "patchSetId": 2
      },
      "lineNbr": 2462,
      "author": {
        "id": 5800
      },
      "writtenOn": "2018-07-03T18:42:12Z",
      "side": 1,
      "message": "Add a TODO(webrtc.bugs/9480) here? \n\nIt will be a little trickier here keeping support for OnRemovedStream, but removing support for streams(). When you remove support for remote_streams(), you\u0027ll be looping through stream_ids() instead of streams(). The problem is that the MediaStream object keeps track of how many references it has to it when SetStreams() is called. I think you\u0027ll have to make sure none of the other receivers reference the stream id.",
      "range": {
        "startLine": 2462,
        "startChar": 27,
        "endLine": 2462,
        "endChar": 40
      },
      "revId": "4176ca7f498f8780c314a7c23ce3c91dfbbffdea",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6b080c2b_98c8e9d0",
        "filename": "pc/peerconnection.cc",
        "patchSetId": 2
      },
      "lineNbr": 2462,
      "author": {
        "id": 5142
      },
      "writtenOn": "2018-07-04T18:53:48Z",
      "side": 1,
      "message": "Done. Yeah, in Chrome we loop through receivers to check if they contain the stream(/stream ID) to see if it was the first or last occurrence.",
      "parentUuid": "a0648042_77ca87a3",
      "range": {
        "startLine": 2462,
        "startChar": 27,
        "endLine": 2462,
        "endChar": 40
      },
      "revId": "4176ca7f498f8780c314a7c23ce3c91dfbbffdea",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d514e027_5e169928",
        "filename": "pc/peerconnection.cc",
        "patchSetId": 2
      },
      "lineNbr": 2494,
      "author": {
        "id": 5800
      },
      "writtenOn": "2018-07-03T18:42:12Z",
      "side": 1,
      "message": "How do you think we should remove this? Seems like we have two options.\n1. Change API to give stream ids\n2. Get stream_ids from receiver. For each stream_id, make the appropriate MediaStream object, by looping through all the receivers that reference that MediaStream \u0026 adding their tracks.\n\nAs long as the Plan B callbacks stick around we\u0027re going to have to keep the MediaStream object.",
      "range": {
        "startLine": 2494,
        "startChar": 53,
        "endLine": 2494,
        "endChar": 60
      },
      "revId": "4176ca7f498f8780c314a7c23ce3c91dfbbffdea",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e2b0da8e_da980d04",
        "filename": "pc/peerconnection.cc",
        "patchSetId": 2
      },
      "lineNbr": 2494,
      "author": {
        "id": 5142
      },
      "writtenOn": "2018-07-04T18:53:48Z",
      "side": 1,
      "message": "When we only care about stream_ids() we can remove the second argument because the receiver already says which stream_ids() it has. remote_streams() can either be deleted or changed to a helper function remote_stream_ids() that loops through receiver stream_ids() and takes care of removing duplicate IDs from the resulting list.\n\nUntil then, remote_streams_ contains the streams. When we create/update a receiver we see if we need to create any new stream objects and if so add them to remote_streams_.\n\nTo fire OnAddTrack() correctly we can easily look up the stream objects by their IDs. That way multiple receivers/multiple OnAddTracks() with the same streams fire with the same stream objects. Native apps can lookup stream objects from remote_streams() the same way given a receiver.",
      "parentUuid": "d514e027_5e169928",
      "range": {
        "startLine": 2494,
        "startChar": 53,
        "endLine": 2494,
        "endChar": 60
      },
      "revId": "4176ca7f498f8780c314a7c23ce3c91dfbbffdea",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "48e68a9d_6fbcefc8",
        "filename": "pc/peerconnection.cc",
        "patchSetId": 2
      },
      "lineNbr": 2494,
      "author": {
        "id": 5800
      },
      "writtenOn": "2018-07-06T17:47:23Z",
      "side": 1,
      "message": "I see. You\u0027re right, it\u0027s probably best to keep remote_streams_ around to fire the callbacks correctly.",
      "parentUuid": "e2b0da8e_da980d04",
      "range": {
        "startLine": 2494,
        "startChar": 53,
        "endLine": 2494,
        "endChar": 60
      },
      "revId": "4176ca7f498f8780c314a7c23ce3c91dfbbffdea",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a35b2b42_78ccc8fb",
        "filename": "pc/rtpreceiver.cc",
        "patchSetId": 2
      },
      "lineNbr": 48,
      "author": {
        "id": 5800
      },
      "writtenOn": "2018-07-03T18:42:12Z",
      "side": 1,
      "message": "There is a problem I see here switching to this. When we apply a remote description with Plan B (PeerConnection::OnRemoteSenderAdded), we lookup the remote stream and create the receiver with it. This way, multiple receivers can reference the same remote stream. This is necessary for both OnAddStream for the stream to have multiple track, and OnRemoveStream (PeerConnection::UpdateEndedRemoteMediaStreams) in order to remove the stream when receivers are no longer referencing the stream.\n\nI think the summary is if we want to continue to support OnRemoveStream/OnAddStream, then we need to keep track of the mapping of stream_id--\u003etrack/receiver. We can do this by calling MediaStream::AddTrack, when we create a receiver \u0026 set its stream IDs.",
      "range": {
        "startLine": 48,
        "startChar": 18,
        "endLine": 48,
        "endChar": 34
      },
      "revId": "4176ca7f498f8780c314a7c23ce3c91dfbbffdea",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b76fd7eb_41a0476a",
        "filename": "pc/rtpreceiver.cc",
        "patchSetId": 2
      },
      "lineNbr": 48,
      "author": {
        "id": 5142
      },
      "writtenOn": "2018-07-04T18:53:48Z",
      "side": 1,
      "message": "I think we just need to update a few lines in peerconnection.cc where we use lookup by stream ID.\n\n// When adding a receiver\nreceivers_.push_back(receiver);\nfor (const auto\u0026 stream_id : receiver-\u003estream_ids()) {\n  auto* stream \u003d remote_streams_.find(stream_id);\n  if (!stream) {\n    stream \u003d MediaStream::Create(stream_id);\n    remote_streams_.push_back(stream);\n    added_streams_.push_back(stream);\n  }\n  stream-\u003eAddTrack(receiver-\u003etrack());\n  // \u003c\"stream.onaddtrack\" if stream wasn\u0027t just added?\u003e\n}\n\nYou can do the same for removing receivers. Either\n1. When you remove the track from the stream, check if the stream was empty, if so end it and remove it.\n2. After removing the receiver, see if any other receiver contains the stream IDs, if not end the streams and remove them.\n\n1 or 2 depending on if you care what will happen if the native app modifies the streams independently of peerconnection.cc.",
      "parentUuid": "a35b2b42_78ccc8fb",
      "range": {
        "startLine": 48,
        "startChar": 18,
        "endLine": 48,
        "endChar": 34
      },
      "revId": "4176ca7f498f8780c314a7c23ce3c91dfbbffdea",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cff4b214_daeb5c51",
        "filename": "pc/rtpreceiver.cc",
        "patchSetId": 2
      },
      "lineNbr": 48,
      "author": {
        "id": 5800
      },
      "writtenOn": "2018-07-06T17:47:23Z",
      "side": 1,
      "message": "Sounds good to me for the changes in PeerConnection to make this work. Although there is one weird thing still. The receiver constructed with stream_ids now has streams(), that aren\u0027t the same streams being used for OnAddTrack/OnAddStream/OnRemoveStream. Supporting streams() and this constructor at the same time doesn\u0027t really make sense. Since your plan is to remove streams() in the next iteration this is fine, but it\u0027s a little dangerous having both of these around at the same time.\n\n1. vs. 2.: I think the current implementation checks if the stream doesn\u0027t have any other references to tracks (so it respects the native app modifying the stream), so we would probably want to continue this.",
      "parentUuid": "b76fd7eb_41a0476a",
      "range": {
        "startLine": 48,
        "startChar": 18,
        "endLine": 48,
        "endChar": 34
      },
      "revId": "4176ca7f498f8780c314a7c23ce3c91dfbbffdea",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c9d3c634_e921c873",
        "filename": "pc/rtpreceiver.cc",
        "patchSetId": 2
      },
      "lineNbr": 53,
      "author": {
        "id": 5142
      },
      "writtenOn": "2018-07-03T10:02:09Z",
      "side": 1,
      "message": "Bikeshedding:\n\nPass setter-like arguments by value to allow std::move()? Or \"don\u0027t care for small objects like IDs\"?\n\n(In this case we can end up with an unnecessary copy because the other constructor takes it by const\u0026 but it shouldn\u0027t and I don\u0027t want to touch signatures now or later, the old constructor will go away in the future.)",
      "revId": "4176ca7f498f8780c314a7c23ce3c91dfbbffdea",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fce4a6f5_959cec13",
        "filename": "pc/rtpreceiver.cc",
        "patchSetId": 2
      },
      "lineNbr": 53,
      "author": {
        "id": 5800
      },
      "writtenOn": "2018-07-03T18:42:12Z",
      "side": 1,
      "message": "Are you asking about passing by value to the constructor \u0026 CreateSTreamsFromIds? I don\u0027t care either way there.\n\nIt\u0027s probably isn\u0027t worth optimizing anything for the old constructor since it\u0027s just going to be removed.",
      "parentUuid": "c9d3c634_e921c873",
      "revId": "4176ca7f498f8780c314a7c23ce3c91dfbbffdea",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0b85131c_1a78d742",
        "filename": "pc/rtpreceiver.h",
        "patchSetId": 2
      },
      "lineNbr": 64,
      "author": {
        "id": 5800
      },
      "writtenOn": "2018-07-03T18:42:12Z",
      "side": 1,
      "message": "nit: TODO(bugs.webrtc/9480), as opposed to TODO(hbos). Same in other places as well.",
      "range": {
        "startLine": 64,
        "startChar": 5,
        "endLine": 64,
        "endChar": 10
      },
      "revId": "4176ca7f498f8780c314a7c23ce3c91dfbbffdea",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c052f638_e9c2a027",
        "filename": "pc/rtpreceiver.h",
        "patchSetId": 2
      },
      "lineNbr": 64,
      "author": {
        "id": 5142
      },
      "writtenOn": "2018-07-04T18:53:48Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0b85131c_1a78d742",
      "range": {
        "startLine": 64,
        "startChar": 5,
        "endLine": 64,
        "endChar": 10
      },
      "revId": "4176ca7f498f8780c314a7c23ce3c91dfbbffdea",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    }
  ]
}