{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "add96a94_4b4ace4f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5019
      },
      "writtenOn": "2021-08-26T11:54:59Z",
      "side": 1,
      "message": "I\u0027m not happy with current usages of BitBuffer. They\u0027re using macros that are discouraged by style guide, or generally hard to read.\n\nI would like to propose to spread pattern I\u0027m using while parsing DD for the other  bitstream parsers. \n\nI\u0027ve sketched https://webrtc-review.googlesource.com/c/src/+/229383 to demonstrate how that new reader can be used. In particular it shows ~10k binary size reduction.\n\nWould like to get your opinion about such idea.",
      "revId": "dfe9d228a56ebb203182404258e1fce755e8a460",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fd305b11_9ba3fea7",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5524
      },
      "writtenOn": "2021-08-30T09:51:55Z",
      "side": 1,
      "message": "This is a great initiative! Makes especially the vp9 uncompressed header parser a lot more manageable.\nIt does put some more burden on the caller though to really think about what happens if reading fails, e.g. to not get stuck in a loop or whatnot.\n\nLooks good overall. Note I haven\u0027t had time to really dig deep so far, will make a second pass soon.",
      "revId": "dfe9d228a56ebb203182404258e1fce755e8a460",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "440bbf60_2b5fca28",
        "filename": "rtc_base/bitstream_reader.cc",
        "patchSetId": 2
      },
      "lineNbr": 32,
      "author": {
        "id": 5524
      },
      "writtenOn": "2021-08-30T09:51:55Z",
      "side": 1,
      "message": "nit: bits \u003c remaining_bits_in_first_byte would be more clear to me, and consistent with the comment",
      "range": {
        "startLine": 32,
        "startChar": 6,
        "endLine": 32,
        "endChar": 41
      },
      "revId": "dfe9d228a56ebb203182404258e1fce755e8a460",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "860960d1_9c169d9a",
        "filename": "rtc_base/bitstream_reader.cc",
        "patchSetId": 2
      },
      "lineNbr": 44,
      "author": {
        "id": 5524
      },
      "writtenOn": "2021-08-30T09:51:55Z",
      "side": 1,
      "message": "nit: maybe increment on next line instead to make it easier to read?\nbelow too in that case",
      "range": {
        "startLine": 44,
        "startChar": 42,
        "endLine": 44,
        "endChar": 44
      },
      "revId": "dfe9d228a56ebb203182404258e1fce755e8a460",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f0fa3899_76ca7c3b",
        "filename": "rtc_base/bitstream_reader.cc",
        "patchSetId": 2
      },
      "lineNbr": 85,
      "author": {
        "id": 5524
      },
      "writtenOn": "2021-08-30T09:51:55Z",
      "side": 1,
      "message": "That behavior makes me uncomfortable. Is it just to avoid an extra branch?",
      "range": {
        "startLine": 83,
        "startChar": 2,
        "endLine": 85,
        "endChar": 61
      },
      "revId": "dfe9d228a56ebb203182404258e1fce755e8a460",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b7bcc54d_0eeb8f59",
        "filename": "rtc_base/bitstream_reader.h",
        "patchSetId": 2
      },
      "lineNbr": 56,
      "author": {
        "id": 5524
      },
      "writtenOn": "2021-08-30T09:51:55Z",
      "side": 1,
      "message": "nit: should we really allow 0?",
      "range": {
        "startLine": 56,
        "startChar": 53,
        "endLine": 56,
        "endChar": 54
      },
      "revId": "dfe9d228a56ebb203182404258e1fce755e8a460",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ff35136c_6d4bcf0a",
        "filename": "rtc_base/bitstream_reader.h",
        "patchSetId": 2
      },
      "lineNbr": 57,
      "author": {
        "id": 5524
      },
      "writtenOn": "2021-08-30T09:51:55Z",
      "side": 1,
      "message": "Add a comment to explain behavior if read fails (e.g. always returns 0 in that case afaict?)",
      "range": {
        "startLine": 57,
        "startChar": 32,
        "endLine": 57,
        "endChar": 40
      },
      "revId": "dfe9d228a56ebb203182404258e1fce755e8a460",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "15593a2f_625261e2",
        "filename": "rtc_base/bitstream_reader.h",
        "patchSetId": 2
      },
      "lineNbr": 84,
      "author": {
        "id": 5524
      },
      "writtenOn": "2021-08-30T09:51:55Z",
      "side": 1,
      "message": "nit: an?\nor remove",
      "range": {
        "startLine": 84,
        "startChar": 11,
        "endLine": 84,
        "endChar": 14
      },
      "revId": "dfe9d228a56ebb203182404258e1fce755e8a460",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "418fb9a1_49bca0fe",
        "filename": "rtc_base/bitstream_reader.h",
        "patchSetId": 2
      },
      "lineNbr": 106,
      "author": {
        "id": 5524
      },
      "writtenOn": "2021-08-30T09:51:55Z",
      "side": 1,
      "message": "Is it really worth not declaring it if dchecks aren\u0027t on? the ifdef adds a bit of clutter and I\u0027m scared of this type of thing after being burned in the past. In that case it wasn\u0027t the RTC_DCHECK_IS_ON flag but something else (can\u0027t remember what). Anyway, the problem arose when two different call sites had different values for the flag I guarded on, which caused them to have misaligned views of the class structure and a high degree of weirdness ensued. Not sure if that can happen with this flag?",
      "range": {
        "startLine": 106,
        "startChar": 0,
        "endLine": 106,
        "endChar": 23
      },
      "revId": "dfe9d228a56ebb203182404258e1fce755e8a460",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    }
  ]
}