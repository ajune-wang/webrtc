{
  "comments": [
    {
      "key": {
        "uuid": "88eda1eb_335f5944",
        "filename": "modules/desktop_capture/cropping_window_capturer_win.cc",
        "patchSetId": 8
      },
      "lineNbr": 256,
      "author": {
        "id": 5166
      },
      "writtenOn": "2019-10-22T00:36:39Z",
      "side": 1,
      "message": "Is this guaranteed to be fast? You\u0027re calling it twice every time a frame is captured; once directly in CroppingWindowCapturerWin::CaptureFrame, and once indirectly via CroppingWindowCapturer::CaptureFrame -\u003e ShouldUseScreenCapturer.\n\nIt looks like the current implementations are all O(#windows), which is probably OK, but some of them also make API calls the cost of which I\u0027m unsure of. It might be better to cache the fullscreen window every time you update the window list. You\u0027d probably want to implement my other suggestion about splitting UpdateWindowListIfNeeded into two methods to do that.",
      "range": {
        "startLine": 256,
        "startChar": 42,
        "endLine": 256,
        "endChar": 62
      },
      "revId": "66e7355535fd9112dd1497194d54e51debac7bb1",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2ada88d3_686647e2",
        "filename": "modules/desktop_capture/cropping_window_capturer_win.cc",
        "patchSetId": 8
      },
      "lineNbr": 256,
      "author": {
        "id": 10010
      },
      "writtenOn": "2019-10-22T06:17:45Z",
      "side": 1,
      "message": "Going to get back with some numbers...",
      "parentUuid": "88eda1eb_335f5944",
      "range": {
        "startLine": 256,
        "startChar": 42,
        "endLine": 256,
        "endChar": 62
      },
      "revId": "66e7355535fd9112dd1497194d54e51debac7bb1",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "06a663f6_d6d41717",
        "filename": "modules/desktop_capture/desktop_capture_options.cc",
        "patchSetId": 8
      },
      "lineNbr": 36,
      "author": {
        "id": 5166
      },
      "writtenOn": "2019-10-22T00:36:39Z",
      "side": 1,
      "message": "I\u0027m not a big fan of static factory methods defined in per-platform object files, although I appreciate they\u0027re used elsewhere. In this case, I think this would be cleaner:\n\n#if defined(WEBRTC_MAC) \u0026\u0026 !defined(WEBRTC_IOS)\n  ...\n  result.set_full_screen_window_detector(\n      new FullscreenWindowDetectorMac());\n  ...\n#endif\n\nOr in combination with my other recommendation of replacing subclassing with a factory delegate, something like:\n\n#if defined(WEBRTC_MAC) \u0026\u0026 !defined(WEBRTC_IOS)\n  ...\n  result.set_full_screen_window_detector(\n      new FullscreenWindowDetector(new FullscreenApplicationHandlerFactoryMac()));\n  ...\n#endif\n\n\nAnd similarly for Windows. Then you can get rid of FullScreenWindowDetector::CreateFullScreenWindowDetector entirely.",
      "range": {
        "startLine": 36,
        "startChar": 32,
        "endLine": 36,
        "endChar": 62
      },
      "revId": "66e7355535fd9112dd1497194d54e51debac7bb1",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6ed2b506_4e4359d0",
        "filename": "modules/desktop_capture/desktop_capture_options.cc",
        "patchSetId": 8
      },
      "lineNbr": 36,
      "author": {
        "id": 10010
      },
      "writtenOn": "2019-10-22T06:17:45Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "06a663f6_d6d41717",
      "range": {
        "startLine": 36,
        "startChar": 32,
        "endLine": 36,
        "endChar": 62
      },
      "revId": "66e7355535fd9112dd1497194d54e51debac7bb1",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d18d8e20_95662024",
        "filename": "modules/desktop_capture/full_screen_application_handler.h",
        "patchSetId": 8
      },
      "lineNbr": 41,
      "author": {
        "id": 5166
      },
      "writtenOn": "2019-10-22T00:36:39Z",
      "side": 1,
      "message": "This is only ever called by the platform-specific CreateFullScreen*ApplicationHandler methods, so AFAICT it never changes during the lifetime of the object. If that\u0027s true then it should be a ctor parameter to eliminate that possibility.",
      "revId": "66e7355535fd9112dd1497194d54e51debac7bb1",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "342d8041_df7dbe62",
        "filename": "modules/desktop_capture/full_screen_application_handler.h",
        "patchSetId": 8
      },
      "lineNbr": 41,
      "author": {
        "id": 10010
      },
      "writtenOn": "2019-10-22T06:17:45Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d18d8e20_95662024",
      "revId": "66e7355535fd9112dd1497194d54e51debac7bb1",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a43bdd16_94ad7120",
        "filename": "modules/desktop_capture/full_screen_window_detector.cc",
        "patchSetId": 8
      },
      "lineNbr": 25,
      "author": {
        "id": 5166
      },
      "writtenOn": "2019-10-22T00:36:39Z",
      "side": 1,
      "message": "How can this condition arise, and would it be better to guard against it rather than returning 0 if it happens? One scenario I can imagine is if this is called within 500ms of the selected window changing, before UpdateWindowList has been called. However, I think that would be better handled by calling UpdateWindowList immediately in that situation. If that\u0027s the only possibility, and it can be worked around, then a DCHECK would be more appropriate here.\n\nIf that\u0027s hard to do with the current architecture, then I you can leave this as-is, but please add a comment explaining what\u0027s going on.",
      "revId": "66e7355535fd9112dd1497194d54e51debac7bb1",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "57fe5ce2_66143330",
        "filename": "modules/desktop_capture/full_screen_window_detector.cc",
        "patchSetId": 8
      },
      "lineNbr": 25,
      "author": {
        "id": 10010
      },
      "writtenOn": "2019-10-22T06:17:45Z",
      "side": 1,
      "message": "The idea behind UpdateWindowListIfNeeded and FindFullScreenWindow was a little bit different:\n- UpdateWindowListIfNeeded could be called from time to time with throttling but without obligation to call it before or after FindFullScreenWindow, it could be called by special timer or within CaptureFrame, it could be called with different source identifiers (skip in thumbnail generation scenario is fully optional).\n- FindFullScreenWindow could be also called with different source id in such scheme.\n\nHaving DCHECK here means that application handler could be created only once, it could make this approach more fragile, to maintain this invariant we need to change capturer interface (to make sure that we\u0027re not generating thumbnails) and benefits from getting this done are not obvious for me.",
      "parentUuid": "a43bdd16_94ad7120",
      "revId": "66e7355535fd9112dd1497194d54e51debac7bb1",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b9212dae_3bc157d7",
        "filename": "modules/desktop_capture/full_screen_window_detector.cc",
        "patchSetId": 8
      },
      "lineNbr": 40,
      "author": {
        "id": 5166
      },
      "writtenOn": "2019-10-22T00:36:39Z",
      "side": 1,
      "message": "I understand the rationale behind this, and I think it\u0027s okay for this CL, but I think the underlying problem is that the thumbnail generator should not be using this code. If I\u0027m understanding the code correctly, having this check in place means adding ~500ms latency to the full-screen detection logic, which is not ideal.\n\nI think it\u0027s at least worth considering whether the cost of creating a application handler for each thumbnail is actually worse than this added latency.",
      "revId": "66e7355535fd9112dd1497194d54e51debac7bb1",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d977290c_90b9b73c",
        "filename": "modules/desktop_capture/full_screen_window_detector.cc",
        "patchSetId": 8
      },
      "lineNbr": 40,
      "author": {
        "id": 10010
      },
      "writtenOn": "2019-10-22T06:17:45Z",
      "side": 1,
      "message": "There is no 500ms latency here:\n\nThumbnails generation phase:\n1 UpdateWindowListIfNeeded(source1) -\u003e skip\n2 UpdateWindowListIfNeeded(source2) -\u003e skip\n3 UpdateWindowListIfNeeded(power_point) -\u003e skip\n4 UpdateWindowListIfNeeded(source3) -\u003e skip\nCapturing source phase:\n5 UpdateWindowListIfNeeded(power_point) -\u003e skip (1st frame captured)\n6 UpdateWindowListIfNeeded(power_point) -\u003e get_sources is called (2nd frame captured)\n\nSo the delay must be not longer then interval between capturing frames or 33 ms in case of 30fps.\n\nIt would be great to avoid using this code by thumbnails generator but capturer interface doesn\u0027t allow us to check current phase (thumbnails/capturing) and it doesn\u0027t seem reasonable to change that.",
      "parentUuid": "b9212dae_3bc157d7",
      "revId": "66e7355535fd9112dd1497194d54e51debac7bb1",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bbc29897_e465cbc3",
        "filename": "modules/desktop_capture/full_screen_window_detector.h",
        "patchSetId": 8
      },
      "lineNbr": 42,
      "author": {
        "id": 5166
      },
      "writtenOn": "2019-10-22T00:36:39Z",
      "side": 1,
      "message": "I don\u0027t think this is overridden any more, so it shouldn\u0027t be virtual.",
      "range": {
        "startLine": 42,
        "startChar": 2,
        "endLine": 42,
        "endChar": 9
      },
      "revId": "66e7355535fd9112dd1497194d54e51debac7bb1",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bfea8d3d_ac4af8f1",
        "filename": "modules/desktop_capture/full_screen_window_detector.h",
        "patchSetId": 8
      },
      "lineNbr": 42,
      "author": {
        "id": 10010
      },
      "writtenOn": "2019-10-22T06:17:45Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "bbc29897_e465cbc3",
      "range": {
        "startLine": 42,
        "startChar": 2,
        "endLine": 42,
        "endChar": 9
      },
      "revId": "66e7355535fd9112dd1497194d54e51debac7bb1",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cfde6511_20cc48f1",
        "filename": "modules/desktop_capture/full_screen_window_detector.h",
        "patchSetId": 8
      },
      "lineNbr": 49,
      "author": {
        "id": 5166
      },
      "writtenOn": "2019-10-22T00:36:39Z",
      "side": 1,
      "message": "Passing in a function here seems a bit over-engineered. You could do the same thing with a pair of NeedsNewWindowList() and UpdateWindowList() methods, which would eliminate any questions about when get_sources is called (synchronously vs. asynchronously, etc).\n\nThat said, if you feel strongly that this design is better then I\u0027m not going to insist, so feel free to ignore if you don\u0027t like my suggestion.",
      "revId": "66e7355535fd9112dd1497194d54e51debac7bb1",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "38b183b4_b604ad19",
        "filename": "modules/desktop_capture/full_screen_window_detector.h",
        "patchSetId": 8
      },
      "lineNbr": 49,
      "author": {
        "id": 10010
      },
      "writtenOn": "2019-10-22T06:17:45Z",
      "side": 1,
      "message": "We can split it in many ways but as long as we want to delegate getting the list of sources (and we want to do it because this function is not straightforward all the time, check WindowCapturerWin::GetSourceList and using window_capture_helper_ which should be reused somehow) we will end up with either adding callback or delegate object.\nI can add more comments with details about synchronously / asynchronously but it\u0027d be better to keep this part as it is.",
      "parentUuid": "cfde6511_20cc48f1",
      "revId": "66e7355535fd9112dd1497194d54e51debac7bb1",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ae1cb35f_f2671b55",
        "filename": "modules/desktop_capture/full_screen_window_detector.h",
        "patchSetId": 8
      },
      "lineNbr": 49,
      "author": {
        "id": 5166
      },
      "writtenOn": "2019-10-22T17:22:35Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "38b183b4_b604ad19",
      "revId": "66e7355535fd9112dd1497194d54e51debac7bb1",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "139822aa_b03f7a55",
        "filename": "modules/desktop_capture/full_screen_window_detector.h",
        "patchSetId": 8
      },
      "lineNbr": 56,
      "author": {
        "id": 5166
      },
      "writtenOn": "2019-10-22T00:36:39Z",
      "side": 1,
      "message": "s/istance/instance/",
      "range": {
        "startLine": 56,
        "startChar": 15,
        "endLine": 56,
        "endChar": 22
      },
      "revId": "66e7355535fd9112dd1497194d54e51debac7bb1",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e08fc9c5_34aa74fc",
        "filename": "modules/desktop_capture/full_screen_window_detector.h",
        "patchSetId": 8
      },
      "lineNbr": 56,
      "author": {
        "id": 10010
      },
      "writtenOn": "2019-10-22T06:17:45Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "139822aa_b03f7a55",
      "range": {
        "startLine": 56,
        "startChar": 15,
        "endLine": 56,
        "endChar": 22
      },
      "revId": "66e7355535fd9112dd1497194d54e51debac7bb1",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5ab29198_7a0a5ddd",
        "filename": "modules/desktop_capture/full_screen_window_detector.h",
        "patchSetId": 8
      },
      "lineNbr": 59,
      "author": {
        "id": 5166
      },
      "writtenOn": "2019-10-22T00:36:39Z",
      "side": 1,
      "message": "Optional: The only reason for subclassing this class now is to override this method, which I don\u0027t think ever needs access to any of the protected members of this class. I think a factory delegate interface would be a cleaner design in that case.\n\nSee also my comment in desktop_capture_options.cc.",
      "revId": "66e7355535fd9112dd1497194d54e51debac7bb1",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "feaf6954_2356c443",
        "filename": "modules/desktop_capture/full_screen_window_detector.h",
        "patchSetId": 8
      },
      "lineNbr": 59,
      "author": {
        "id": 10010
      },
      "writtenOn": "2019-10-22T06:17:45Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5ab29198_7a0a5ddd",
      "revId": "66e7355535fd9112dd1497194d54e51debac7bb1",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0b726185_9a160d45",
        "filename": "modules/desktop_capture/mac/full_screen_mac_application_handler.mm",
        "patchSetId": 8
      },
      "lineNbr": 1,
      "author": {
        "id": 5166
      },
      "writtenOn": "2019-10-22T00:36:39Z",
      "side": 1,
      "message": "There\u0027s no Objective-C++ in this file, so it can just be .cc, I think.",
      "revId": "66e7355535fd9112dd1497194d54e51debac7bb1",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dcb1c716_dfaab0cf",
        "filename": "modules/desktop_capture/mac/full_screen_mac_application_handler.mm",
        "patchSetId": 8
      },
      "lineNbr": 1,
      "author": {
        "id": 10010
      },
      "writtenOn": "2019-10-22T06:17:45Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0b726185_9a160d45",
      "revId": "66e7355535fd9112dd1497194d54e51debac7bb1",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "20ff5dd8_fb4d9847",
        "filename": "modules/desktop_capture/mac/full_screen_mac_application_handler.mm",
        "patchSetId": 8
      },
      "lineNbr": 29,
      "author": {
        "id": 5166
      },
      "writtenOn": "2019-10-22T00:36:39Z",
      "side": 1,
      "message": "Why do you need this method?",
      "revId": "66e7355535fd9112dd1497194d54e51debac7bb1",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "35dd93e4_a8f977ad",
        "filename": "modules/desktop_capture/mac/full_screen_mac_application_handler.mm",
        "patchSetId": 8
      },
      "lineNbr": 29,
      "author": {
        "id": 10010
      },
      "writtenOn": "2019-10-22T06:17:45Z",
      "side": 1,
      "message": "Done: removed",
      "parentUuid": "20ff5dd8_fb4d9847",
      "revId": "66e7355535fd9112dd1497194d54e51debac7bb1",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0274be69_a0fed04b",
        "filename": "modules/desktop_capture/mac/full_screen_mac_application_handler.mm",
        "patchSetId": 8
      },
      "lineNbr": 36,
      "author": {
        "id": 5166
      },
      "writtenOn": "2019-10-22T00:36:39Z",
      "side": 1,
      "message": "It\u0027s not obvious to me why windows without a title should be excluded from this. Shouldn\u0027t |title_predicate| is responsible for enforcing that? If you do want to keep this check (perhaps as an optimization?) please add a comment explaining why title-less windows are ineligible.",
      "revId": "66e7355535fd9112dd1497194d54e51debac7bb1",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a15d101d_ca8f7ffb",
        "filename": "modules/desktop_capture/mac/full_screen_mac_application_handler.mm",
        "patchSetId": 8
      },
      "lineNbr": 36,
      "author": {
        "id": 10010
      },
      "writtenOn": "2019-10-22T06:17:45Z",
      "side": 1,
      "message": "Done: added comments",
      "parentUuid": "0274be69_a0fed04b",
      "revId": "66e7355535fd9112dd1497194d54e51debac7bb1",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "30c5c6d8_484cbf43",
        "filename": "modules/desktop_capture/win/full_screen_win_application_handler.cc",
        "patchSetId": 8
      },
      "lineNbr": 49,
      "author": {
        "id": 5166
      },
      "writtenOn": "2019-10-22T00:36:39Z",
      "side": 1,
      "message": "This seems to be checking for UNIX-style path separators in a Windows-specific file. Can you add a comment explaining why that\u0027s necessary?",
      "range": {
        "startLine": 49,
        "startChar": 28,
        "endLine": 49,
        "endChar": 29
      },
      "revId": "66e7355535fd9112dd1497194d54e51debac7bb1",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cb76cd26_a927a80a",
        "filename": "modules/desktop_capture/win/full_screen_win_application_handler.cc",
        "patchSetId": 8
      },
      "lineNbr": 49,
      "author": {
        "id": 10010
      },
      "writtenOn": "2019-10-22T06:17:45Z",
      "side": 1,
      "message": "Done: removed (not necessary but more universal, though don\u0027t see how it could be used here)",
      "parentUuid": "30c5c6d8_484cbf43",
      "range": {
        "startLine": 49,
        "startChar": 28,
        "endLine": 49,
        "endChar": 29
      },
      "revId": "66e7355535fd9112dd1497194d54e51debac7bb1",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a8a62758_497529d8",
        "filename": "modules/desktop_capture/win/full_screen_win_application_handler.cc",
        "patchSetId": 8
      },
      "lineNbr": 57,
      "author": {
        "id": 5064
      },
      "writtenOn": "2019-10-22T20:58:57Z",
      "side": 1,
      "message": "Why are you wrapping towupper() in a lambda? It already has the signature you want.",
      "range": {
        "startLine": 57,
        "startChar": 17,
        "endLine": 57,
        "endChar": 63
      },
      "revId": "66e7355535fd9112dd1497194d54e51debac7bb1",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "31ae3a4e_848f4752",
        "filename": "modules/desktop_capture/win/full_screen_win_application_handler.cc",
        "patchSetId": 8
      },
      "lineNbr": 57,
      "author": {
        "id": 10010
      },
      "writtenOn": "2019-10-22T22:56:45Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a8a62758_497529d8",
      "range": {
        "startLine": 57,
        "startChar": 17,
        "endLine": 57,
        "endChar": 63
      },
      "revId": "66e7355535fd9112dd1497194d54e51debac7bb1",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c78d5b99_144c0315",
        "filename": "modules/desktop_capture/win/full_screen_win_application_handler.cc",
        "patchSetId": 8
      },
      "lineNbr": 69,
      "author": {
        "id": 5166
      },
      "writtenOn": "2019-10-22T00:36:39Z",
      "side": 1,
      "message": "Line break after \u0026\u0026, please (it\u0027s more readable than breaking in the middle of the second half of the conditional.",
      "range": {
        "startLine": 69,
        "startChar": 60,
        "endLine": 69,
        "endChar": 73
      },
      "revId": "66e7355535fd9112dd1497194d54e51debac7bb1",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7c959185_188e5e3e",
        "filename": "modules/desktop_capture/win/full_screen_win_application_handler.cc",
        "patchSetId": 8
      },
      "lineNbr": 69,
      "author": {
        "id": 10010
      },
      "writtenOn": "2019-10-22T06:17:45Z",
      "side": 1,
      "message": "Done: changed but \u003cgit cl format\u003e doesn\u0027t agree with that...",
      "parentUuid": "c78d5b99_144c0315",
      "range": {
        "startLine": 69,
        "startChar": 60,
        "endLine": 69,
        "endChar": 73
      },
      "revId": "66e7355535fd9112dd1497194d54e51debac7bb1",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d3f37c55_39015682",
        "filename": "modules/desktop_capture/win/full_screen_win_application_handler.cc",
        "patchSetId": 8
      },
      "lineNbr": 69,
      "author": {
        "id": 5166
      },
      "writtenOn": "2019-10-22T17:22:35Z",
      "side": 1,
      "message": "Fair enough, I didn\u0027t realize this was the work of an auto-formatter. Feel free to revert if you prefer.",
      "parentUuid": "7c959185_188e5e3e",
      "range": {
        "startLine": 69,
        "startChar": 60,
        "endLine": 69,
        "endChar": 73
      },
      "revId": "66e7355535fd9112dd1497194d54e51debac7bb1",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "771a0b06_711c4e97",
        "filename": "modules/desktop_capture/win/full_screen_win_application_handler.cc",
        "patchSetId": 8
      },
      "lineNbr": 169,
      "author": {
        "id": 5166
      },
      "writtenOn": "2019-10-22T00:36:39Z",
      "side": 1,
      "message": "I don\u0027t know enough about Win32 APIs to say whether or not this is the best way of finding a process\u0027s path. Even if it is, I\u0027m not sure if reading another process\u0027s memory is standard practise on Windows, or if it\u0027s something worthy of special attention. I think it\u0027s at least worth asking whether or not it would be better to simply run this algorithm regardless of whether or not we think it\u0027s Powerpoint; do you expect false positives to be a big problem if you did that?\n\n+wez@, can you take a look at this file?",
      "range": {
        "startLine": 169,
        "startChar": 27,
        "endLine": 169,
        "endChar": 28
      },
      "revId": "66e7355535fd9112dd1497194d54e51debac7bb1",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "978d6f1f_b7da0ae7",
        "filename": "modules/desktop_capture/win/full_screen_win_application_handler.cc",
        "patchSetId": 8
      },
      "lineNbr": 169,
      "author": {
        "id": 10010
      },
      "writtenOn": "2019-10-22T19:44:08Z",
      "side": 1,
      "message": "wez@google.com could you please help us to check if it\u0027s ok to use this approach",
      "parentUuid": "771a0b06_711c4e97",
      "range": {
        "startLine": 169,
        "startChar": 27,
        "endLine": 169,
        "endChar": 28
      },
      "revId": "66e7355535fd9112dd1497194d54e51debac7bb1",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "432c59a6_908fcd53",
        "filename": "modules/desktop_capture/win/full_screen_win_application_handler.cc",
        "patchSetId": 8
      },
      "lineNbr": 169,
      "author": {
        "id": 5064
      },
      "writtenOn": "2019-10-22T20:58:57Z",
      "side": 1,
      "message": "You\u0027re relying both on having access to the address-space of the target process, and on it being laid out in a particular way, both of which are fragile assumptions.\n\nYou can query for the \"class\" name for a window handle without any special permissions - I\u0027d recommend checking whether the Powerpoint full-screen window has a particular class name that you can look for.\n\nHowever, I\u0027d also recommend establishing whether this can be made both simpler and more general-purpose, by watching for transitions where the window being remoted becomes minimized, and there is around the same time a full-screen window shown by the same process.",
      "parentUuid": "978d6f1f_b7da0ae7",
      "range": {
        "startLine": 169,
        "startChar": 27,
        "endLine": 169,
        "endChar": 28
      },
      "revId": "66e7355535fd9112dd1497194d54e51debac7bb1",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e52a4cf3_51ccb1c2",
        "filename": "modules/desktop_capture/win/full_screen_win_application_handler.cc",
        "patchSetId": 8
      },
      "lineNbr": 169,
      "author": {
        "id": 8393
      },
      "writtenOn": "2019-10-25T21:11:00Z",
      "side": 1,
      "message": "Yeah, I tend to agree reading process memory is kind of dodgy. Is there no other mechanism that we can use here?\n\nAt a minimum the strategy here needs to be clearly explained in a detailed comment,",
      "parentUuid": "432c59a6_908fcd53",
      "range": {
        "startLine": 169,
        "startChar": 27,
        "endLine": 169,
        "endChar": 28
      },
      "revId": "66e7355535fd9112dd1497194d54e51debac7bb1",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ca766fb9_6b4f0f56",
        "filename": "modules/desktop_capture/win/full_screen_win_application_handler.cc",
        "patchSetId": 8
      },
      "lineNbr": 169,
      "author": {
        "id": 10010
      },
      "writtenOn": "2019-10-29T17:42:50Z",
      "side": 1,
      "message": "Done: got rid of reading process memory",
      "parentUuid": "e52a4cf3_51ccb1c2",
      "range": {
        "startLine": 169,
        "startChar": 27,
        "endLine": 169,
        "endChar": 28
      },
      "revId": "66e7355535fd9112dd1497194d54e51debac7bb1",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7354d0e5_f0719e13",
        "filename": "modules/desktop_capture/win/full_screen_win_application_handler.cc",
        "patchSetId": 8
      },
      "lineNbr": 191,
      "author": {
        "id": 5166
      },
      "writtenOn": "2019-10-22T00:36:39Z",
      "side": 1,
      "message": "s/WindowsId/WindowId/\n\nor\n\ns/WindowsId/HWND/",
      "range": {
        "startLine": 191,
        "startChar": 13,
        "endLine": 191,
        "endChar": 31
      },
      "revId": "66e7355535fd9112dd1497194d54e51debac7bb1",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0faebc8f_b4f53e23",
        "filename": "modules/desktop_capture/win/full_screen_win_application_handler.cc",
        "patchSetId": 8
      },
      "lineNbr": 191,
      "author": {
        "id": 10010
      },
      "writtenOn": "2019-10-22T06:17:45Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7354d0e5_f0719e13",
      "range": {
        "startLine": 191,
        "startChar": 13,
        "endLine": 191,
        "endChar": 31
      },
      "revId": "66e7355535fd9112dd1497194d54e51debac7bb1",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8b812062_245cad37",
        "filename": "modules/desktop_capture/win/full_screen_win_application_handler.cc",
        "patchSetId": 8
      },
      "lineNbr": 225,
      "author": {
        "id": 5064
      },
      "writtenOn": "2019-10-22T20:58:57Z",
      "side": 1,
      "message": "Why are you using a unique_ptr\u003cwchar_t[]\u003e rather than a std::wstring here?",
      "range": {
        "startLine": 224,
        "startChar": 0,
        "endLine": 225,
        "endChar": 55
      },
      "revId": "66e7355535fd9112dd1497194d54e51debac7bb1",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f102c46d_27b96712",
        "filename": "modules/desktop_capture/win/full_screen_win_application_handler.cc",
        "patchSetId": 8
      },
      "lineNbr": 225,
      "author": {
        "id": 10010
      },
      "writtenOn": "2019-10-22T22:56:45Z",
      "side": 1,
      "message": "As we\u0027re using it as a buffer i changed it to vector\u003cwchar_t\u003e, let me know if you insist on using wstring.",
      "parentUuid": "8b812062_245cad37",
      "range": {
        "startLine": 224,
        "startChar": 0,
        "endLine": 225,
        "endChar": 55
      },
      "revId": "66e7355535fd9112dd1497194d54e51debac7bb1",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "30afd78c_617a2a55",
        "filename": "modules/desktop_capture/win/full_screen_win_application_handler.cc",
        "patchSetId": 8
      },
      "lineNbr": 254,
      "author": {
        "id": 5064
      },
      "writtenOn": "2019-10-22T20:58:57Z",
      "side": 1,
      "message": "Relying on the filename matching this seems a fragile approach - you actually only care whether the full-screen window belongs to the same process as the window that just got minimized, I think?",
      "range": {
        "startLine": 251,
        "startChar": 0,
        "endLine": 254,
        "endChar": 37
      },
      "revId": "66e7355535fd9112dd1497194d54e51debac7bb1",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c2c019a9_2ec8e84f",
        "filename": "modules/desktop_capture/win/full_screen_win_application_handler.cc",
        "patchSetId": 8
      },
      "lineNbr": 254,
      "author": {
        "id": 10010
      },
      "writtenOn": "2019-10-22T22:57:19Z",
      "side": 1,
      "message": "In order to detect a type of application we can check not only path but some properties as well (if it\u0027s really required).\n\nSwitch window to share based on windows behaviour only regardless type of application seems  dangerous to me.",
      "parentUuid": "30afd78c_617a2a55",
      "range": {
        "startLine": 251,
        "startChar": 0,
        "endLine": 254,
        "endChar": 37
      },
      "revId": "66e7355535fd9112dd1497194d54e51debac7bb1",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d9eaa2e4_874a82f8",
        "filename": "modules/desktop_capture/win/full_screen_win_application_handler.cc",
        "patchSetId": 8
      },
      "lineNbr": 254,
      "author": {
        "id": 8393
      },
      "writtenOn": "2019-10-25T21:11:00Z",
      "side": 1,
      "message": "I think it\u0027s reasonable to take a safe, low-tech approach initially (i.e., whitelist of apps), and we can generalize if we find this approach doesn\u0027t scale.",
      "parentUuid": "c2c019a9_2ec8e84f",
      "range": {
        "startLine": 251,
        "startChar": 0,
        "endLine": 254,
        "endChar": 37
      },
      "revId": "66e7355535fd9112dd1497194d54e51debac7bb1",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ac2cdfd5_46d75530",
        "filename": "modules/desktop_capture/win/full_screen_win_application_handler.cc",
        "patchSetId": 8
      },
      "lineNbr": 255,
      "author": {
        "id": 5064
      },
      "writtenOn": "2019-10-22T20:58:57Z",
      "side": 1,
      "message": "result \u003d std::make_unique\u003c...\u003e()",
      "range": {
        "startLine": 255,
        "startChar": 4,
        "endLine": 255,
        "endChar": 51
      },
      "revId": "66e7355535fd9112dd1497194d54e51debac7bb1",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b8141aa4_f07ae255",
        "filename": "modules/desktop_capture/win/full_screen_win_application_handler.cc",
        "patchSetId": 8
      },
      "lineNbr": 255,
      "author": {
        "id": 10010
      },
      "writtenOn": "2019-10-22T22:56:45Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ac2cdfd5_46d75530",
      "range": {
        "startLine": 255,
        "startChar": 4,
        "endLine": 255,
        "endChar": 51
      },
      "revId": "66e7355535fd9112dd1497194d54e51debac7bb1",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    }
  ]
}