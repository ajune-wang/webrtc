{
  "comments": [
    {
      "key": {
        "uuid": "4f20d8e1_50a4021f",
        "filename": "call/adaptation/resource_adaptation_processor.cc",
        "patchSetId": 6
      },
      "lineNbr": 517,
      "author": {
        "id": 5142
      },
      "writtenOn": "2020-06-29T13:38:10Z",
      "side": 1,
      "message": "Add {} for the if",
      "revId": "6c37b7f11a244c534c88e845cfeb0502bd6777ec",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6ef70d73_7a7d2fd7",
        "filename": "call/adaptation/video_stream_adapter.cc",
        "patchSetId": 6
      },
      "lineNbr": 504,
      "author": {
        "id": 5142
      },
      "writtenOn": "2020-06-29T13:38:10Z",
      "side": 1,
      "message": "If an Adaptation is now expressed as the actual target, and we do want to allow jumping to it, perhaps we should return the resulting target instead of expressing the result as a \"Step\"?\n\nI.e. we verify that the target is valid with CanIncreaseResolutionTo, but then we return the Adaptation of the resulting restrictions, and ApplyAdaptation is as simple as restrictor.restrictions_ \u003d adaptation_.restrictions;",
      "revId": "6c37b7f11a244c534c88e845cfeb0502bd6777ec",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f1c4db08_70ecd976",
        "filename": "call/adaptation/video_stream_adapter.h",
        "patchSetId": 6
      },
      "lineNbr": 59,
      "author": {
        "id": 5142
      },
      "writtenOn": "2020-06-29T13:38:10Z",
      "side": 1,
      "message": "Update the comment to reflect that the adaptation now reflects jumping to a particular restriction rather than an up/down step",
      "revId": "6c37b7f11a244c534c88e845cfeb0502bd6777ec",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c17ab1c2_152e0047",
        "filename": "call/adaptation/video_stream_adapter.h",
        "patchSetId": 6
      },
      "lineNbr": 81,
      "author": {
        "id": 5142
      },
      "writtenOn": "2020-06-29T13:38:10Z",
      "side": 1,
      "message": "Now that PeekNextRestrictions no longer exists this comment is not up-to-date. What would be the equivalent? Looking at restrictions() and counters() directly?",
      "revId": "6c37b7f11a244c534c88e845cfeb0502bd6777ec",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fde9f48c_8eb377e3",
        "filename": "call/adaptation/video_stream_adapter.h",
        "patchSetId": 6
      },
      "lineNbr": 108,
      "author": {
        "id": 5142
      },
      "writtenOn": "2020-06-29T13:38:10Z",
      "side": 1,
      "message": "Sounds like we can delete it in a follow-up. The only purpose of validation_id_ was CHECK-crashing if you did something nonsense, but if you can jump from any restriction to any other restriction, it would be valid to apply any restriction, and the ID doesn\u0027t make any sense.",
      "revId": "6c37b7f11a244c534c88e845cfeb0502bd6777ec",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "65068d95_8cd35d08",
        "filename": "call/adaptation/video_stream_adapter.h",
        "patchSetId": 6
      },
      "lineNbr": 153,
      "author": {
        "id": 5142
      },
      "writtenOn": "2020-06-29T13:38:10Z",
      "side": 1,
      "message": "You\u0027ve removed PeekNextRestrictions, but not its comment - remove comment?",
      "revId": "6c37b7f11a244c534c88e845cfeb0502bd6777ec",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "048aecf8_df6826c2",
        "filename": "call/adaptation/video_stream_adapter.h",
        "patchSetId": 6
      },
      "lineNbr": 212,
      "author": {
        "id": 5142
      },
      "writtenOn": "2020-06-29T13:38:10Z",
      "side": 1,
      "message": "Maybe tangental to this CL, so feel free to ignore this comment or address in a separate CL, but \"AdaptationRequest\" is such a confusing name for something representing where we were at when the previous adaptation happened.\n\nWondering if we could just store the last Adaptation instead (which includes a VideoStreamInputState), or the relevant VideoStreamInputState, instead of a separate struct. Though if the StepType has moved we would have to store that as well. But from StepType you can deduce ResolutionChange, so it may become superflous to introduce this new enum.\n\nAlso wondering if we want to continue supporting anti double-adapt logic like this if we allow jumping from any adaptation to any other one or if we can prevent double-adapt in the processor instead, but that is definitely not for this CL.",
      "revId": "6c37b7f11a244c534c88e845cfeb0502bd6777ec",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    }
  ]
}