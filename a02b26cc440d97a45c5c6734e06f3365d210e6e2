{
  "comments": [
    {
      "key": {
        "uuid": "34b80135_305efbb6",
        "filename": "api/video/i420_buffer.cc",
        "patchSetId": 1
      },
      "lineNbr": 52,
      "author": {
        "id": 5234
      },
      "writtenOn": "2019-01-30T09:04:29Z",
      "side": 1,
      "message": "Why do you need zero width and/or height? There may be better ways to deal with an empty picture.\n\nWill encoders accept empty input frames?",
      "range": {
        "startLine": 51,
        "startChar": 0,
        "endLine": 52,
        "endChar": 27
      },
      "revId": "a02b26cc440d97a45c5c6734e06f3365d210e6e2",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c1e3df34_b3ac0554",
        "filename": "api/video/i420_buffer.cc",
        "patchSetId": 1
      },
      "lineNbr": 52,
      "author": {
        "id": 5117
      },
      "writtenOn": "2019-01-30T10:03:49Z",
      "side": 1,
      "message": "WebRTC will accept empty frames in partial screen capture if there were no change at the screen.\nIt will be replaced by the previous full picture before it ends at the encoder.",
      "parentUuid": "34b80135_305efbb6",
      "range": {
        "startLine": 51,
        "startChar": 0,
        "endLine": 52,
        "endChar": 27
      },
      "revId": "a02b26cc440d97a45c5c6734e06f3365d210e6e2",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9a1b8fa1_3c8853ae",
        "filename": "api/video/i420_buffer.cc",
        "patchSetId": 1
      },
      "lineNbr": 52,
      "author": {
        "id": 5234
      },
      "writtenOn": "2019-01-30T11:03:55Z",
      "side": 1,
      "message": "If it\u0027s a special case only handled with partial screen capture, can\u0027t you just as well leave video_frame_buffer as nullptr? Or use some special subclass of VideoFrameBuffer?",
      "parentUuid": "c1e3df34_b3ac0554",
      "range": {
        "startLine": 51,
        "startChar": 0,
        "endLine": 52,
        "endChar": 27
      },
      "revId": "a02b26cc440d97a45c5c6734e06f3365d210e6e2",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0e8f64fd_1204260e",
        "filename": "api/video/i420_buffer.cc",
        "patchSetId": 1
      },
      "lineNbr": 52,
      "author": {
        "id": 5117
      },
      "writtenOn": "2019-01-30T11:50:55Z",
      "side": 1,
      "message": "Idea of a nullptr frameBuffer is very nice. I will go with that.",
      "parentUuid": "9a1b8fa1_3c8853ae",
      "range": {
        "startLine": 51,
        "startChar": 0,
        "endLine": 52,
        "endChar": 27
      },
      "revId": "a02b26cc440d97a45c5c6734e06f3365d210e6e2",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "118de922_41ffdd28",
        "filename": "api/video/i420_buffer.cc",
        "patchSetId": 1
      },
      "lineNbr": 52,
      "author": {
        "id": 5117
      },
      "writtenOn": "2019-01-30T14:30:13Z",
      "side": 1,
      "message": "Done.",
      "parentUuid": "0e8f64fd_1204260e",
      "range": {
        "startLine": 51,
        "startChar": 0,
        "endLine": 52,
        "endChar": 27
      },
      "revId": "a02b26cc440d97a45c5c6734e06f3365d210e6e2",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ede6b7b6_77992a5a",
        "filename": "api/video/video_frame.h",
        "patchSetId": 1
      },
      "lineNbr": 33,
      "author": {
        "id": 5234
      },
      "writtenOn": "2019-01-30T09:04:29Z",
      "side": 1,
      "message": "This needs documentation. In particular, it\u0027s unclear what full_width and full_height are used for. VideoFrame was intended to be small and cheap to copy...",
      "range": {
        "startLine": 28,
        "startChar": 0,
        "endLine": 33,
        "endChar": 4
      },
      "revId": "a02b26cc440d97a45c5c6734e06f3365d210e6e2",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2af2ed56_ee1e1e3d",
        "filename": "api/video/video_frame.h",
        "patchSetId": 1
      },
      "lineNbr": 33,
      "author": {
        "id": 5117
      },
      "writtenOn": "2019-01-30T10:03:49Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ede6b7b6_77992a5a",
      "range": {
        "startLine": 28,
        "startChar": 0,
        "endLine": 33,
        "endChar": 4
      },
      "revId": "a02b26cc440d97a45c5c6734e06f3365d210e6e2",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1eccf30c_c0053945",
        "filename": "api/video/video_frame.h",
        "patchSetId": 1
      },
      "lineNbr": 156,
      "author": {
        "id": 5234
      },
      "writtenOn": "2019-01-30T09:04:29Z",
      "side": 1,
      "message": "What\u0027s the purpose of passing an unchanged frame into the pipeline?\n\nIf it\u0027s really needed, I\u0027d prefer to avoid the negative and call it changed(), with a default value of true.",
      "range": {
        "startLine": 155,
        "startChar": 0,
        "endLine": 156,
        "endChar": 64
      },
      "revId": "a02b26cc440d97a45c5c6734e06f3365d210e6e2",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ba670516_0a5b4f02",
        "filename": "api/video/video_frame.h",
        "patchSetId": 1
      },
      "lineNbr": 156,
      "author": {
        "id": 5117
      },
      "writtenOn": "2019-01-30T10:05:22Z",
      "side": 1,
      "message": "This will be used by encoder to skip encoding unchanged picture if it has already achieved steady state. This will help to reduce used bandwidth and CPU in high fps mode and achieve variable frame rate.\n\nRemoved the negation here.",
      "parentUuid": "1eccf30c_c0053945",
      "range": {
        "startLine": 155,
        "startChar": 0,
        "endLine": 156,
        "endChar": 64
      },
      "revId": "a02b26cc440d97a45c5c6734e06f3365d210e6e2",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8a7224f1_2bb56b09",
        "filename": "api/video/video_frame.h",
        "patchSetId": 1
      },
      "lineNbr": 156,
      "author": {
        "id": 5234
      },
      "writtenOn": "2019-01-30T11:03:55Z",
      "side": 1,
      "message": "If it\u0027s used together with partial frame info, it seems equivalent to passing a partial frame that is empty.\n\nAnd for the general case, it sounds like a useful feature, but I\u0027d much prefer if we can do it without passing fake frames down the pipeline. E.g., let VideoStreamEncoder pass additional copies of the latest frame to the encoder if (i) qp values are low, and (ii) no new frame arrives within some configured time limit.\n\nI think it will ease review to implement this feature separately from the support for partial frames. (Splitting by feature is more useful than splitting by file, in  my experience).",
      "parentUuid": "ba670516_0a5b4f02",
      "range": {
        "startLine": 155,
        "startChar": 0,
        "endLine": 156,
        "endChar": 64
      },
      "revId": "a02b26cc440d97a45c5c6734e06f3365d210e6e2",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bd062f6c_ce33d401",
        "filename": "api/video/video_frame.h",
        "patchSetId": 1
      },
      "lineNbr": 156,
      "author": {
        "id": 5117
      },
      "writtenOn": "2019-01-30T11:50:55Z",
      "side": 1,
      "message": "IT will be much easier to implement the logic closer to the actual encoder. The VideoStreamEncoder will receive a partial frame, \"unpack\" it using a previous known frame to a full resolution, but will mark it as \"unchanged\" if there was a zero-update, and always pass down. \n\nSo, the PartialDescription is consumed right after it\u0027s received by WebRTC and only the |changed| flag lives from that time.",
      "parentUuid": "8a7224f1_2bb56b09",
      "range": {
        "startLine": 155,
        "startChar": 0,
        "endLine": 156,
        "endChar": 64
      },
      "revId": "a02b26cc440d97a45c5c6734e06f3365d210e6e2",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "311c2904_53f78a59",
        "filename": "api/video/video_frame.h",
        "patchSetId": 1
      },
      "lineNbr": 156,
      "author": {
        "id": 5234
      },
      "writtenOn": "2019-01-30T12:26:20Z",
      "side": 1,
      "message": "Please drop this part of the change for now. We\u0027ll get back to it with the cl that adds that optimization, and them we can discuss the options. My feeling is that the feature belongs close to the encoder, instead of having one half close to the capturer and the other at the encoder, and having them coordinate with metadata passed throughout the pipeline.",
      "parentUuid": "bd062f6c_ce33d401",
      "range": {
        "startLine": 155,
        "startChar": 0,
        "endLine": 156,
        "endChar": 64
      },
      "revId": "a02b26cc440d97a45c5c6734e06f3365d210e6e2",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "756da11e_74f7ab9d",
        "filename": "api/video/video_frame.h",
        "patchSetId": 1
      },
      "lineNbr": 156,
      "author": {
        "id": 5117
      },
      "writtenOn": "2019-01-30T12:45:23Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "311c2904_53f78a59",
      "range": {
        "startLine": 155,
        "startChar": 0,
        "endLine": 156,
        "endChar": 64
      },
      "revId": "a02b26cc440d97a45c5c6734e06f3365d210e6e2",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0d7d35ce_aabfc34f",
        "filename": "api/video/video_frame.h",
        "patchSetId": 1
      },
      "lineNbr": 165,
      "author": {
        "id": 5234
      },
      "writtenOn": "2019-01-30T09:04:29Z",
      "side": 1,
      "message": "Looks like an unrelated change. I\u0027m not strongly opposed to this setter, but I\u0027d prefer you leave this out until you have a usecase for it, so that can be reviewed. The main way of getting a VideoFrame with the right data should be to use the Builder thing.",
      "range": {
        "startLine": 165,
        "startChar": 0,
        "endLine": 165,
        "endChar": 75
      },
      "revId": "a02b26cc440d97a45c5c6734e06f3365d210e6e2",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "75f94a74_2d073853",
        "filename": "api/video/video_frame.h",
        "patchSetId": 1
      },
      "lineNbr": 165,
      "author": {
        "id": 5117
      },
      "writtenOn": "2019-01-30T10:03:49Z",
      "side": 1,
      "message": "Use case is in https://webrtc-review.googlesource.com/c/src/+/120408.\n\nThis CL is the part of a large CL, split by files. I\u0027ve added you as a CC for all 5 of them. Feel free to review them also.\n\nI\u0027ve updated the commit description to include this change.",
      "parentUuid": "0d7d35ce_aabfc34f",
      "range": {
        "startLine": 165,
        "startChar": 0,
        "endLine": 165,
        "endChar": 75
      },
      "revId": "a02b26cc440d97a45c5c6734e06f3365d210e6e2",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "62d58386_fcf9afee",
        "filename": "api/video/video_frame.h",
        "patchSetId": 1
      },
      "lineNbr": 165,
      "author": {
        "id": 5117
      },
      "writtenOn": "2019-01-30T11:50:55Z",
      "side": 1,
      "message": "Ack? Or do i need to do something else here?",
      "parentUuid": "75f94a74_2d073853",
      "range": {
        "startLine": 165,
        "startChar": 0,
        "endLine": 165,
        "endChar": 75
      },
      "revId": "a02b26cc440d97a45c5c6734e06f3365d210e6e2",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7cdee743_056385e9",
        "filename": "api/video/video_frame.h",
        "patchSetId": 1
      },
      "lineNbr": 165,
      "author": {
        "id": 5234
      },
      "writtenOn": "2019-01-30T12:26:20Z",
      "side": 1,
      "message": "For PartialFrameDecompressor::ApplyPartialUpdate on the other cl, there are a couple of options, e.g., returning the new buffer. But I don\u0027t think we should go into those details in the review of this cl.\n\nIn the future, I\u0027d prefer that simple methods like this are added together with the smallest new feature that makes use of them. For now, feel free to keep it, if you\u0027re confident that it will really be needed.",
      "parentUuid": "62d58386_fcf9afee",
      "range": {
        "startLine": 165,
        "startChar": 0,
        "endLine": 165,
        "endChar": 75
      },
      "revId": "a02b26cc440d97a45c5c6734e06f3365d210e6e2",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "509e0a43_722e70f1",
        "filename": "api/video/video_frame.h",
        "patchSetId": 1
      },
      "lineNbr": 165,
      "author": {
        "id": 5117
      },
      "writtenOn": "2019-01-30T12:45:23Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "7cdee743_056385e9",
      "range": {
        "startLine": 165,
        "startChar": 0,
        "endLine": 165,
        "endChar": 75
      },
      "revId": "a02b26cc440d97a45c5c6734e06f3365d210e6e2",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    }
  ]
}