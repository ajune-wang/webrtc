{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "96a1c504_10e44254",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 18829
      },
      "writtenOn": "2022-05-26T14:50:20Z",
      "side": 1,
      "message": "Thank you for taking another look!",
      "revId": "29cee700ccd119faa3d9623a5d0d55d6fb38f82d",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "adb3fa8a_ac1040b6",
        "filename": "modules/desktop_capture/linux/wayland/shared_screencast_stream.cc",
        "patchSetId": 5
      },
      "lineNbr": 536,
      "author": {
        "id": 8046
      },
      "writtenOn": "2022-05-26T05:16:47Z",
      "side": 1,
      "message": "I also believe you don\u0027t need a lock here (maybe that\u0027s what gives you a bit delay?) if you are going to only signalize you want to renegotiate. And the OnRenegotiateFormat callback already has a lock.",
      "revId": "29cee700ccd119faa3d9623a5d0d55d6fb38f82d",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ef435135_6ffb04e2",
        "filename": "modules/desktop_capture/linux/wayland/shared_screencast_stream.cc",
        "patchSetId": 5
      },
      "lineNbr": 536,
      "author": {
        "id": 18829
      },
      "writtenOn": "2022-05-26T14:50:20Z",
      "side": 1,
      "message": "Thanks for the input, Jan! I believe this lock is not the cause of the delay-until-any-activity I am observing. The motivation for the lock is to keep the access to `pending_resolution_change_` consistent since it is getting updated in `OnRenegotiateFormat` as well with the same lock.",
      "parentUuid": "adb3fa8a_ac1040b6",
      "revId": "29cee700ccd119faa3d9623a5d0d55d6fb38f82d",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "182cc6f3_321ed442",
        "filename": "modules/desktop_capture/linux/wayland/shared_screencast_stream.cc",
        "patchSetId": 5
      },
      "lineNbr": 536,
      "author": {
        "id": 8046
      },
      "writtenOn": "2022-05-26T15:04:11Z",
      "side": 1,
      "message": "The lock is needed/used in case you do operation on any of PipeWire objects, which you don\u0027t. If you want to guard `pending_resolution_change_` you should use your own lock.",
      "parentUuid": "ef435135_6ffb04e2",
      "revId": "29cee700ccd119faa3d9623a5d0d55d6fb38f82d",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b8487dc0_16653cb4",
        "filename": "modules/desktop_capture/linux/wayland/shared_screencast_stream.cc",
        "patchSetId": 5
      },
      "lineNbr": 536,
      "author": {
        "id": 18829
      },
      "writtenOn": "2022-05-26T15:23:32Z",
      "side": 1,
      "message": "Curios about the following and wanted to hear your thoughts on the following:\n\n1. Why can\u0027t the same lock be used for a non-pipewire object (given that the protected variable is getting updated from a callback called from the main loop)?\n2. Why will using a different lock improve any delay?",
      "parentUuid": "182cc6f3_321ed442",
      "revId": "29cee700ccd119faa3d9623a5d0d55d6fb38f82d",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "25974349_4de1a94e",
        "filename": "modules/desktop_capture/linux/wayland/shared_screencast_stream.cc",
        "patchSetId": 5
      },
      "lineNbr": 536,
      "author": {
        "id": 8046
      },
      "writtenOn": "2022-05-26T15:59:54Z",
      "side": 1,
      "message": "1) The lock we use here is just a wrapper for pw_thread_loop_lock() so it is PipeWire API to protect simultaneous access to its objects. We don\u0027t use it to protect our internal variables and it should\u0027t be used this way.\n2) I didn\u0027t say it will do anything about the delay, just that you should use our lock (a new one) if you want to protect access to our variables and do not use PipeWire lock which is meant for completely different purpose.",
      "parentUuid": "b8487dc0_16653cb4",
      "revId": "29cee700ccd119faa3d9623a5d0d55d6fb38f82d",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8c0e28b5_81c02e7a",
        "filename": "modules/desktop_capture/linux/wayland/shared_screencast_stream.cc",
        "patchSetId": 5
      },
      "lineNbr": 536,
      "author": {
        "id": 8046
      },
      "writtenOn": "2022-05-26T16:40:55Z",
      "side": 1,
      "message": "Sorry for being picky. I would just drop the lock without replacement as I believe none of them is needed in this case.",
      "parentUuid": "25974349_4de1a94e",
      "revId": "29cee700ccd119faa3d9623a5d0d55d6fb38f82d",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c64efc3c_39041197",
        "filename": "modules/desktop_capture/linux/wayland/shared_screencast_stream.cc",
        "patchSetId": 5
      },
      "lineNbr": 536,
      "author": {
        "id": 18829
      },
      "writtenOn": "2022-05-26T16:50:41Z",
      "side": 1,
      "message": "No problem at all :) Just wanted to understand the rationale, that\u0027s all.\n\nRE: dropping the lock. Are the methods guaranteed to be called on a single thread (or serialized in some other fashion)?",
      "parentUuid": "8c0e28b5_81c02e7a",
      "revId": "29cee700ccd119faa3d9623a5d0d55d6fb38f82d",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f70284d2_2e26cead",
        "filename": "modules/desktop_capture/linux/wayland/shared_screencast_stream.cc",
        "patchSetId": 5
      },
      "lineNbr": 536,
      "author": {
        "id": 8046
      },
      "writtenOn": "2022-05-26T17:01:32Z",
      "side": 1,
      "message": "https://docs.pipewire.org/page_thread_loop.html",
      "parentUuid": "c64efc3c_39041197",
      "revId": "29cee700ccd119faa3d9623a5d0d55d6fb38f82d",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e4bb6c0e_137b3073",
        "filename": "modules/desktop_capture/linux/wayland/shared_screencast_stream.cc",
        "patchSetId": 5
      },
      "lineNbr": 536,
      "author": {
        "id": 8046
      },
      "writtenOn": "2022-05-26T17:02:18Z",
      "side": 1,
      "message": "This should hopefully explain everything ðŸ˜Š",
      "parentUuid": "f70284d2_2e26cead",
      "revId": "29cee700ccd119faa3d9623a5d0d55d6fb38f82d",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "de3e01e3_8b732b16",
        "filename": "modules/desktop_capture/linux/wayland/shared_screencast_stream.cc",
        "patchSetId": 5
      },
      "lineNbr": 536,
      "author": {
        "id": 18829
      },
      "writtenOn": "2022-05-26T17:09:05Z",
      "side": 1,
      "message": "heh .. thanks!\nMy question was more related to the non-pipewire object access here that we have been talking about, specifically `pending_resolution_changes_`. One access point is already protected with the main lock inside renegotiation method, but in the new `UpdateResolution` that I added, we don\u0027t have any protection if we don\u0027t replace the main loop lock with a custom one. Thoughts?",
      "parentUuid": "e4bb6c0e_137b3073",
      "revId": "29cee700ccd119faa3d9623a5d0d55d6fb38f82d",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "88578676_e0c64f6e",
        "filename": "modules/desktop_capture/linux/wayland/shared_screencast_stream.cc",
        "patchSetId": 5
      },
      "lineNbr": 541,
      "author": {
        "id": 8046
      },
      "writtenOn": "2022-05-26T05:12:42Z",
      "side": 1,
      "message": "Maybe calling `pw_loop_signal_event(pw_thread_loop_get_loop(pw_main_loop_),                         renegotiate_);` is cleaner. This will signalize that you want to update your stream parameters and I guess doing it this way is safer and gives PipeWire opportunity to safely stop what it was currently doing/processing (finish loop iteration).",
      "revId": "29cee700ccd119faa3d9623a5d0d55d6fb38f82d",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0d069b36_61db1b7f",
        "filename": "modules/desktop_capture/linux/wayland/shared_screencast_stream.cc",
        "patchSetId": 5
      },
      "lineNbr": 541,
      "author": {
        "id": 18829
      },
      "writtenOn": "2022-05-26T14:50:20Z",
      "side": 1,
      "message": "Thanks. I had tried that and it crashes in a non-obvious way with an illegal instruction error. I was hoping that calling `OnRenegotiateFormat` is still going to be safe since it acquires the loop lock.",
      "parentUuid": "88578676_e0c64f6e",
      "revId": "29cee700ccd119faa3d9623a5d0d55d6fb38f82d",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c68c8944_254a9ead",
        "filename": "modules/desktop_capture/linux/wayland/shared_screencast_stream.cc",
        "patchSetId": 5
      },
      "lineNbr": 541,
      "author": {
        "id": 8046
      },
      "writtenOn": "2022-05-26T15:04:11Z",
      "side": 1,
      "message": "See my comment above.",
      "parentUuid": "0d069b36_61db1b7f",
      "revId": "29cee700ccd119faa3d9623a5d0d55d6fb38f82d",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0fdeb66b_68beab5d",
        "filename": "modules/desktop_capture/linux/wayland/shared_screencast_stream.cc",
        "patchSetId": 5
      },
      "lineNbr": 541,
      "author": {
        "id": 18829
      },
      "writtenOn": "2022-05-26T15:23:32Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c68c8944_254a9ead",
      "revId": "29cee700ccd119faa3d9623a5d0d55d6fb38f82d",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    }
  ]
}