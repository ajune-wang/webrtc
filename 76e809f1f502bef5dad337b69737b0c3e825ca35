{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "524000f6_d1dd3493",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 5607
      },
      "writtenOn": "2021-01-22T11:01:45Z",
      "side": 1,
      "message": "Hi Per, PTAL.",
      "revId": "76e809f1f502bef5dad337b69737b0c3e825ca35",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "64874e1e_ca787e17",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 5607
      },
      "writtenOn": "2021-02-01T16:20:30Z",
      "side": 1,
      "message": "Friendly ping.",
      "revId": "76e809f1f502bef5dad337b69737b0c3e825ca35",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e634be8a_77b56052",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 5125
      },
      "writtenOn": "2021-02-03T10:19:47Z",
      "side": 1,
      "message": "Very nice CL!!!\nI have some comments.\n\nPTAL",
      "revId": "76e809f1f502bef5dad337b69737b0c3e825ca35",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ce975ad8_1f24f77b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 5607
      },
      "writtenOn": "2021-02-04T14:13:06Z",
      "side": 1,
      "message": "Thanks for the review! Note that in addition to the comments, I also decided to remove the unused WebRtcSpl_MaxAbsIndexW16 function.",
      "revId": "76e809f1f502bef5dad337b69737b0c3e825ca35",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9b890c03_63a90d61",
        "filename": "common_audio/signal_processing/min_max_operations.c",
        "patchSetId": 4
      },
      "lineNbr": 40,
      "author": {
        "id": 5125
      },
      "writtenOn": "2021-02-03T10:19:47Z",
      "side": 1,
      "message": "Is this something that we could drop?\nDo we have any build-bots to test that?\n\nAlso, I doubt that this will compile properly since the compiler may wanr that the code after the return on line 39 is unreachable.",
      "range": {
        "startLine": 38,
        "startChar": 0,
        "endLine": 40,
        "endChar": 6
      },
      "revId": "76e809f1f502bef5dad337b69737b0c3e825ca35",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7675bde4_57c73c8f",
        "filename": "common_audio/signal_processing/min_max_operations.c",
        "patchSetId": 4
      },
      "lineNbr": 40,
      "author": {
        "id": 5087
      },
      "writtenOn": "2021-02-03T12:32:36Z",
      "side": 1,
      "message": "Yes, we have stopped to actively support MIPS in 2018 when we removed trybots with target_os\u003d”android” and target_cpu\u003d”mipsel”. We did that because the Android NDK deprecated MIPS in r16 and removed support in r17. See https://groups.google.com/g/discuss-webrtc/c/E7uhRhut3jY/m/-TfraRdfBAAJ.\n\nIf we can keep the code around in an easy way, we should try to do that (maybe this is useful to someone in the community) but if this is hard and error prone I would say we can drop it and be open to patches from the community.",
      "parentUuid": "9b890c03_63a90d61",
      "range": {
        "startLine": 38,
        "startChar": 0,
        "endLine": 40,
        "endChar": 6
      },
      "revId": "76e809f1f502bef5dad337b69737b0c3e825ca35",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e2677bf1_ab2868a8",
        "filename": "common_audio/signal_processing/min_max_operations.c",
        "patchSetId": 4
      },
      "lineNbr": 40,
      "author": {
        "id": 5607
      },
      "writtenOn": "2021-02-04T14:13:06Z",
      "side": 1,
      "message": "I\u0027ve tried to fix the code so that it will likely keep working on Mips (I agree the previous version probably wouldn\u0027t compile). I don\u0027t have access to a Mips device so I cannot verify that it works.",
      "parentUuid": "7675bde4_57c73c8f",
      "range": {
        "startLine": 38,
        "startChar": 0,
        "endLine": 40,
        "endChar": 6
      },
      "revId": "76e809f1f502bef5dad337b69737b0c3e825ca35",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d5016b4c_818625ea",
        "filename": "common_audio/signal_processing/min_max_operations.c",
        "patchSetId": 4
      },
      "lineNbr": 40,
      "author": {
        "id": 5125
      },
      "writtenOn": "2021-02-05T07:10:05Z",
      "side": 1,
      "message": "The I\u0027d definitely argue that we should not support MIPS here.\nWhat about removing it fully?",
      "parentUuid": "e2677bf1_ab2868a8",
      "range": {
        "startLine": 38,
        "startChar": 0,
        "endLine": 40,
        "endChar": 6
      },
      "revId": "76e809f1f502bef5dad337b69737b0c3e825ca35",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "675aebce_63c14cb4",
        "filename": "common_audio/signal_processing/min_max_operations.c",
        "patchSetId": 4
      },
      "lineNbr": 55,
      "author": {
        "id": 5125
      },
      "writtenOn": "2021-02-03T10:19:47Z",
      "side": 1,
      "message": "Same comment as above",
      "range": {
        "startLine": 54,
        "startChar": 2,
        "endLine": 55,
        "endChar": 8
      },
      "revId": "76e809f1f502bef5dad337b69737b0c3e825ca35",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d3165061_ac017d27",
        "filename": "common_audio/signal_processing/min_max_operations.c",
        "patchSetId": 4
      },
      "lineNbr": 55,
      "author": {
        "id": 5607
      },
      "writtenOn": "2021-02-04T14:13:06Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "675aebce_63c14cb4",
      "range": {
        "startLine": 54,
        "startChar": 2,
        "endLine": 55,
        "endChar": 8
      },
      "revId": "76e809f1f502bef5dad337b69737b0c3e825ca35",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e02f9f5f_5b788704",
        "filename": "common_audio/signal_processing/min_max_operations_neon.c",
        "patchSetId": 4
      },
      "lineNbr": 229,
      "author": {
        "id": 5125
      },
      "writtenOn": "2021-02-03T10:19:47Z",
      "side": 1,
      "message": "This naming is a bit misleading since the std::vector kind of has already taken that name. \"array\" is better, but that is still a bit misleading.\n\nWhat about calling it data, or something else?",
      "range": {
        "startLine": 229,
        "startChar": 44,
        "endLine": 229,
        "endChar": 50
      },
      "revId": "76e809f1f502bef5dad337b69737b0c3e825ca35",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "18dd7ede_c4694312",
        "filename": "common_audio/signal_processing/min_max_operations_neon.c",
        "patchSetId": 4
      },
      "lineNbr": 229,
      "author": {
        "id": 5607
      },
      "writtenOn": "2021-02-04T14:13:06Z",
      "side": 1,
      "message": "I agree, I used \u0027vector\u0027 because that name is used in most other functions in this file, but you\u0027re right that data is better. I\u0027ll rename to data (also elsewhere in the CL).",
      "parentUuid": "e02f9f5f_5b788704",
      "range": {
        "startLine": 229,
        "startChar": 44,
        "endLine": 229,
        "endChar": 50
      },
      "revId": "76e809f1f502bef5dad337b69737b0c3e825ca35",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2b1e2ede_26efa127",
        "filename": "common_audio/signal_processing/min_max_operations_neon.c",
        "patchSetId": 4
      },
      "lineNbr": 230,
      "author": {
        "id": 5125
      },
      "writtenOn": "2021-02-03T10:19:47Z",
      "side": 1,
      "message": "Could this be implemented with non-const references instead of with pointers? That would eliminate the uncertainty/risk of rouge/null pointer accesses.",
      "range": {
        "startLine": 230,
        "startChar": 29,
        "endLine": 230,
        "endChar": 63
      },
      "revId": "76e809f1f502bef5dad337b69737b0c3e825ca35",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a5b2b141_72c7c07d",
        "filename": "common_audio/signal_processing/min_max_operations_neon.c",
        "patchSetId": 4
      },
      "lineNbr": 230,
      "author": {
        "id": 5607
      },
      "writtenOn": "2021-02-04T14:13:06Z",
      "side": 1,
      "message": "Although I agree, this file contains C code, and C doesn\u0027t have references.",
      "parentUuid": "2b1e2ede_26efa127",
      "range": {
        "startLine": 230,
        "startChar": 29,
        "endLine": 230,
        "endChar": 63
      },
      "revId": "76e809f1f502bef5dad337b69737b0c3e825ca35",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "66bfb926_ebb237a4",
        "filename": "common_audio/signal_processing/min_max_operations_neon.c",
        "patchSetId": 4
      },
      "lineNbr": 230,
      "author": {
        "id": 5125
      },
      "writtenOn": "2021-02-05T07:10:05Z",
      "side": 1,
      "message": "Ah, that I forgot. Thanks!",
      "parentUuid": "a5b2b141_72c7c07d",
      "range": {
        "startLine": 230,
        "startChar": 29,
        "endLine": 230,
        "endChar": 63
      },
      "revId": "76e809f1f502bef5dad337b69737b0c3e825ca35",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "983d1966_94e685c3",
        "filename": "common_audio/signal_processing/min_max_operations_neon.c",
        "patchSetId": 4
      },
      "lineNbr": 238,
      "author": {
        "id": 5125
      },
      "writtenOn": "2021-02-03T10:19:47Z",
      "side": 1,
      "message": "I would suggest to use standard array accesses instead of pointer access.\n\nE.e., \nfor (int i \u003d 0; i \u003c length - residual; i +\u003d 4) {\nint32x4_t in32x4_0 \u003d vld1q_s32(\u0026vector[i]);\n...\n}\n...\nfor (int i \u003d residual; i \u003c length; ++i) {\n...\n}",
      "range": {
        "startLine": 238,
        "startChar": 1,
        "endLine": 238,
        "endChar": 34
      },
      "revId": "76e809f1f502bef5dad337b69737b0c3e825ca35",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2b6e9e16_fff6f690",
        "filename": "common_audio/signal_processing/min_max_operations_neon.c",
        "patchSetId": 4
      },
      "lineNbr": 238,
      "author": {
        "id": 5607
      },
      "writtenOn": "2021-02-04T14:13:06Z",
      "side": 1,
      "message": "This function is a merged version of the existing Min and Max neon functions, which is where this comes from. I wanted to not make any more changes than necessary to it, to avoid accidentally introducing bugs. Do you think it\u0027s worth fixing this?",
      "parentUuid": "983d1966_94e685c3",
      "range": {
        "startLine": 238,
        "startChar": 1,
        "endLine": 238,
        "endChar": 34
      },
      "revId": "76e809f1f502bef5dad337b69737b0c3e825ca35",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3220191d_f29b84cf",
        "filename": "common_audio/signal_processing/min_max_operations_neon.c",
        "patchSetId": 4
      },
      "lineNbr": 238,
      "author": {
        "id": 5125
      },
      "writtenOn": "2021-02-05T07:10:05Z",
      "side": 1,
      "message": "I leave it up to you.\n\nI see the point with not touching changed code. However, the code is actually changed by the CL so maybe that safety is not fully valid.\n\nAnother aspect is that if it is not changed now, it will never be.\n\nThe most important thing I think is that the code has proper unittesting to minimize the risk of this going wrong.",
      "parentUuid": "2b6e9e16_fff6f690",
      "range": {
        "startLine": 238,
        "startChar": 1,
        "endLine": 238,
        "endChar": 34
      },
      "revId": "76e809f1f502bef5dad337b69737b0c3e825ca35",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9877427f_13db6849",
        "filename": "common_audio/signal_processing/min_max_operations_neon.c",
        "patchSetId": 4
      },
      "lineNbr": 244,
      "author": {
        "id": 5125
      },
      "writtenOn": "2021-02-03T10:19:47Z",
      "side": 1,
      "message": "Why unroll 8 times? From the loop it seems like it should be possible to unroll 4 times.\nI have a feeling that the step to store the data in two separate variables, e.g., min32x4_0 and min32x4_1, would not be needed if the unrolling is done 4 times.",
      "range": {
        "startLine": 244,
        "startChar": 0,
        "endLine": 244,
        "endChar": 40
      },
      "revId": "76e809f1f502bef5dad337b69737b0c3e825ca35",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d0f5b6f0_97fcac95",
        "filename": "common_audio/signal_processing/min_max_operations_neon.c",
        "patchSetId": 4
      },
      "lineNbr": 244,
      "author": {
        "id": 5607
      },
      "writtenOn": "2021-02-04T14:13:06Z",
      "side": 1,
      "message": "This entire function is heavily based on the existing functions that calculate the min and max separately, and I tried to make as little changes as possible since I assumed the original authors had a reason for unrolling 8 times instead of 4. \n\nYou\u0027re right that unrolling 4 times is possible, and that would make it possible to get rid of one of the variables. However, the loop overhead (the overhead of having to check if we need to continue or not) is larger when unrolling 4 times. WDYT, should I spend time to benchmark the 2 options? So far I tried to avoid changing the code more than necessary.",
      "parentUuid": "9877427f_13db6849",
      "range": {
        "startLine": 244,
        "startChar": 0,
        "endLine": 244,
        "endChar": 40
      },
      "revId": "76e809f1f502bef5dad337b69737b0c3e825ca35",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4873598c_413ed7d9",
        "filename": "common_audio/signal_processing/min_max_operations_neon.c",
        "patchSetId": 4
      },
      "lineNbr": 244,
      "author": {
        "id": 5125
      },
      "writtenOn": "2021-02-05T07:10:05Z",
      "side": 1,
      "message": "I don\u0027t really see why unrolling 4 times would give larger code than doing it 8 times? I place an example below.\n\nMy view is that if we do this, we might as well do it properly. I see the value in not changing the pre-existing code, but I also see the danger in that.\n\nIf we are to change it, I think this is the moment. If this is not corrected, the next person touching this code would end up in the same situation.\n\nWhat do you see as the danger in modifying the code to change this? Since this is a pure function, it should be really easy to unittest.\n\n(my guess for the unrolling is that the original authors copied this from code that did this for a 16 bit vector, and that it for there was possible to use vminq_s16 which uses 8 fields)\n\n\nsize_t residual \u003d length \u0026 0x3;\nfor (i \u003d 0; i \u003c length - residual; i +\u003d 4) {\n    int32x4_t in32x4_0 \u003d vld1q_s32(p_start);\n    p_start +\u003d 4;\n    min32x4_0 \u003d vminq_s32(min32x4_0, in32x4_0);\n    max32x4_0 \u003d vmaxq_s32(max32x4_0, in32x4_0);\n  }",
      "parentUuid": "d0f5b6f0_97fcac95",
      "range": {
        "startLine": 244,
        "startChar": 0,
        "endLine": 244,
        "endChar": 40
      },
      "revId": "76e809f1f502bef5dad337b69737b0c3e825ca35",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    }
  ]
}