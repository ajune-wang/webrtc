{
  "comments": [
    {
      "key": {
        "uuid": "c0812b64_2efeca97",
        "filename": "rtc_base/bounded_inline_vector.h",
        "patchSetId": 11
      },
      "lineNbr": 15,
      "author": {
        "id": 5019
      },
      "writtenOn": "2020-02-28T12:10:10Z",
      "side": 1,
      "message": "add an empty line between c and c++ includes\nhttps://google.github.io/styleguide/cppguide.html#Names_and_Order_of_Includes",
      "range": {
        "startLine": 14,
        "startChar": 0,
        "endLine": 15,
        "endChar": 18
      },
      "revId": "2ba4296fbee39a6c532f479d98f82d5f112ae8c5",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6f472960_54d418c0",
        "filename": "rtc_base/bounded_inline_vector.h",
        "patchSetId": 11
      },
      "lineNbr": 15,
      "author": {
        "id": 5126
      },
      "writtenOn": "2020-02-28T13:24:17Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c0812b64_2efeca97",
      "range": {
        "startLine": 14,
        "startChar": 0,
        "endLine": 15,
        "endChar": 18
      },
      "revId": "2ba4296fbee39a6c532f479d98f82d5f112ae8c5",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "93221276_9796f7ae",
        "filename": "rtc_base/bounded_inline_vector.h",
        "patchSetId": 11
      },
      "lineNbr": 24,
      "author": {
        "id": 5019
      },
      "writtenOn": "2020-02-28T12:13:44Z",
      "side": 1,
      "message": "suggestion:\nto make it easier to see BoundedInlinedVector interface, move this namespace into a separate file (as an implementation detail).\ne.g. bounded_inline_vector_impl.h\n(and then it might be good idea in the BUILD.gn to have _impl.h in sources and bounded_inline_vector.h in public)",
      "range": {
        "startLine": 24,
        "startChar": 0,
        "endLine": 24,
        "endChar": 38
      },
      "revId": "2ba4296fbee39a6c532f479d98f82d5f112ae8c5",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3306c7ba_b901f5c3",
        "filename": "rtc_base/bounded_inline_vector.h",
        "patchSetId": 11
      },
      "lineNbr": 24,
      "author": {
        "id": 5126
      },
      "writtenOn": "2020-02-28T13:38:46Z",
      "side": 1,
      "message": "Nice. Done.",
      "parentUuid": "93221276_9796f7ae",
      "range": {
        "startLine": 24,
        "startChar": 0,
        "endLine": 24,
        "endChar": 38
      },
      "revId": "2ba4296fbee39a6c532f479d98f82d5f112ae8c5",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6e86d31b_1426da9f",
        "filename": "rtc_base/bounded_inline_vector.h",
        "patchSetId": 11
      },
      "lineNbr": 65,
      "author": {
        "id": 5019
      },
      "writtenOn": "2020-02-28T12:10:10Z",
      "side": 1,
      "message": "why is it safe?",
      "range": {
        "startLine": 65,
        "startChar": 4,
        "endLine": 65,
        "endChar": 58
      },
      "revId": "2ba4296fbee39a6c532f479d98f82d5f112ae8c5",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c9803155_1980a0ee",
        "filename": "rtc_base/bounded_inline_vector.h",
        "patchSetId": 11
      },
      "lineNbr": 65,
      "author": {
        "id": 5126
      },
      "writtenOn": "2020-02-28T13:24:17Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6e86d31b_1426da9f",
      "range": {
        "startLine": 65,
        "startChar": 4,
        "endLine": 65,
        "endChar": 58
      },
      "revId": "2ba4296fbee39a6c532f479d98f82d5f112ae8c5",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0ba94c75_52e217ac",
        "filename": "rtc_base/bounded_inline_vector.h",
        "patchSetId": 11
      },
      "lineNbr": 70,
      "author": {
        "id": 5019
      },
      "writtenOn": "2020-02-28T12:10:10Z",
      "side": 1,
      "message": "since comment and code do not fit on the same line, may be put the comment before the code:\n// comment\n::new ...",
      "range": {
        "startLine": 69,
        "startChar": 38,
        "endLine": 70,
        "endChar": 76
      },
      "revId": "2ba4296fbee39a6c532f479d98f82d5f112ae8c5",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bd88e60e_3b05a142",
        "filename": "rtc_base/bounded_inline_vector.h",
        "patchSetId": 11
      },
      "lineNbr": 70,
      "author": {
        "id": 5126
      },
      "writtenOn": "2020-02-28T13:24:17Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0ba94c75_52e217ac",
      "range": {
        "startLine": 69,
        "startChar": 38,
        "endLine": 70,
        "endChar": 76
      },
      "revId": "2ba4296fbee39a6c532f479d98f82d5f112ae8c5",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4d7dab45_4fb99c2f",
        "filename": "rtc_base/bounded_inline_vector.h",
        "patchSetId": 11
      },
      "lineNbr": 92,
      "author": {
        "id": 5019
      },
      "writtenOn": "2020-02-28T12:10:10Z",
      "side": 1,
      "message": "https://google.github.io/styleguide/cppguide.html#General_Naming_Rules\n\n\"Template parameters should follow the naming style for their category: type template parameters should follow the rules for type names, and non-type template parameters should follow the rules for variable names.\"",
      "range": {
        "startLine": 92,
        "startChar": 14,
        "endLine": 92,
        "endChar": 22
      },
      "revId": "2ba4296fbee39a6c532f479d98f82d5f112ae8c5",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2a00b981_c4bf6643",
        "filename": "rtc_base/bounded_inline_vector.h",
        "patchSetId": 11
      },
      "lineNbr": 92,
      "author": {
        "id": 5126
      },
      "writtenOn": "2020-02-28T13:24:17Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4d7dab45_4fb99c2f",
      "range": {
        "startLine": 92,
        "startChar": 14,
        "endLine": 92,
        "endChar": 22
      },
      "revId": "2ba4296fbee39a6c532f479d98f82d5f112ae8c5",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "addda6b5_66e4ce90",
        "filename": "rtc_base/bounded_inline_vector.h",
        "patchSetId": 11
      },
      "lineNbr": 95,
      "author": {
        "id": 5019
      },
      "writtenOn": "2020-02-28T12:10:10Z",
      "side": 1,
      "message": "it might be better to make it a class because it has invariant \u0027exactly size fields of the data array are constructed\u0027:\nhttps://google.github.io/styleguide/cppguide.html#Structs_vs._Classes\n\n\"The struct must not have invariants that imply relationships between different fields\"",
      "range": {
        "startLine": 95,
        "startChar": 0,
        "endLine": 95,
        "endChar": 6
      },
      "revId": "2ba4296fbee39a6c532f479d98f82d5f112ae8c5",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e989cff1_00008a6b",
        "filename": "rtc_base/bounded_inline_vector.h",
        "patchSetId": 11
      },
      "lineNbr": 95,
      "author": {
        "id": 5126
      },
      "writtenOn": "2020-02-28T13:24:17Z",
      "side": 1,
      "message": "I chose not to go that route, because then I would have had to add methods to that class to encapsulate all temporarily invariant-violating operations, and it\u0027s better to have that in the outer class---of which there is only one---than in each of the three internal structs.\n\nThe contract is that Storage has a data array and a size, and handles initialization, copy construction, copy assignment, and destruction; it is the responsibility of the outer class to ensure that size \u003d\u003d number of stored elements whenever any of those operations happen.\n\nShould simply I document this? Or do you have another suggestion?",
      "parentUuid": "addda6b5_66e4ce90",
      "range": {
        "startLine": 95,
        "startChar": 0,
        "endLine": 95,
        "endChar": 6
      },
      "revId": "2ba4296fbee39a6c532f479d98f82d5f112ae8c5",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d098a0f8_1a361ceb",
        "filename": "rtc_base/bounded_inline_vector.h",
        "patchSetId": 11
      },
      "lineNbr": 95,
      "author": {
        "id": 5019
      },
      "writtenOn": "2020-02-28T14:42:53Z",
      "side": 1,
      "message": "since it is a private helper structure documentation might be enough.",
      "parentUuid": "e989cff1_00008a6b",
      "range": {
        "startLine": 95,
        "startChar": 0,
        "endLine": 95,
        "endChar": 6
      },
      "revId": "2ba4296fbee39a6c532f479d98f82d5f112ae8c5",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3cff1483_2965a2c1",
        "filename": "rtc_base/bounded_inline_vector.h",
        "patchSetId": 11
      },
      "lineNbr": 95,
      "author": {
        "id": 5126
      },
      "writtenOn": "2020-02-29T13:02:16Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d098a0f8_1a361ceb",
      "range": {
        "startLine": 95,
        "startChar": 0,
        "endLine": 95,
        "endChar": 6
      },
      "revId": "2ba4296fbee39a6c532f479d98f82d5f112ae8c5",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c9f8cf81_fe5a8687",
        "filename": "rtc_base/bounded_inline_vector.h",
        "patchSetId": 11
      },
      "lineNbr": 113,
      "author": {
        "id": 5019
      },
      "writtenOn": "2020-02-28T12:10:10Z",
      "side": 1,
      "message": "for safety likely need to handle self assign:\n\"a \u003d a;\"",
      "range": {
        "startLine": 113,
        "startChar": 2,
        "endLine": 113,
        "endChar": 42
      },
      "revId": "2ba4296fbee39a6c532f479d98f82d5f112ae8c5",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c0272112_fde16a4a",
        "filename": "rtc_base/bounded_inline_vector.h",
        "patchSetId": 11
      },
      "lineNbr": 113,
      "author": {
        "id": 5126
      },
      "writtenOn": "2020-02-28T13:24:17Z",
      "side": 1,
      "message": "Good point. Done.",
      "parentUuid": "c9f8cf81_fe5a8687",
      "range": {
        "startLine": 113,
        "startChar": 2,
        "endLine": 113,
        "endChar": 42
      },
      "revId": "2ba4296fbee39a6c532f479d98f82d5f112ae8c5",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "09dd1c01_9dd8a098",
        "filename": "rtc_base/bounded_inline_vector.h",
        "patchSetId": 11
      },
      "lineNbr": 189,
      "author": {
        "id": 5125
      },
      "writtenOn": "2020-02-28T10:00:29Z",
      "side": 1,
      "message": "It feels like the ability to explicitly set the vector size would be very handy.\nIf I understand the code correctly, currently the size can only be set at construction or via assignment of another vector, is that correct?\n\nWould it be hard to also allow a resize of the vector content (but limit that to lengths that are lower than the capacity)? \n\nI have a feeling that limiting the way to change the size to not allow a resize will complicate some usecases.",
      "revId": "2ba4296fbee39a6c532f479d98f82d5f112ae8c5",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "12a382cf_28edb973",
        "filename": "rtc_base/bounded_inline_vector.h",
        "patchSetId": 11
      },
      "lineNbr": 189,
      "author": {
        "id": 5126
      },
      "writtenOn": "2020-02-28T13:24:17Z",
      "side": 1,
      "message": "\u003e It feels like the ability to explicitly set the vector size would be very handy.\n\u003e If I understand the code correctly, currently the size can only be set at construction or via assignment of another vector, is that correct?\n\nYes.\n\n\u003e Would it be hard to also allow a resize of the vector content (but limit that to lengths that are lower than the capacity)? \n\u003e \n\u003e I have a feeling that limiting the way to change the size to not allow a resize will complicate some usecases.\n\nAdding more methods isn\u0027t hard---it just takes some time. I can add some in a follow-up CL. Which ones would you like? clear, resize, and push_back?",
      "parentUuid": "09dd1c01_9dd8a098",
      "revId": "2ba4296fbee39a6c532f479d98f82d5f112ae8c5",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0a105a2c_32735315",
        "filename": "rtc_base/bounded_inline_vector.h",
        "patchSetId": 11
      },
      "lineNbr": 189,
      "author": {
        "id": 5125
      },
      "writtenOn": "2020-02-28T13:29:59Z",
      "side": 1,
      "message": "Resize was the one I had primarily in mind. clear and push_back are not important for me to have (but I can only speak for myself).\n\nSince the bound is set during compile-time, I envision a common usage being that the bound is set liberal to allow anything possible, but that one at run-time limits it to the configuration at hand.",
      "parentUuid": "12a382cf_28edb973",
      "revId": "2ba4296fbee39a6c532f479d98f82d5f112ae8c5",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f661a245_2fed36e3",
        "filename": "rtc_base/bounded_inline_vector.h",
        "patchSetId": 11
      },
      "lineNbr": 189,
      "author": {
        "id": 5019
      },
      "writtenOn": "2020-02-28T14:42:53Z",
      "side": 1,
      "message": "I agree this class is not that useful without mutating functions (push_back, emplace_back, resize)\nBut I would prefer these methods to be added in the follow up (I\u0027m happy with the current TODO)",
      "parentUuid": "0a105a2c_32735315",
      "revId": "2ba4296fbee39a6c532f479d98f82d5f112ae8c5",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "96838a2c_b50f3c90",
        "filename": "rtc_base/bounded_inline_vector.h",
        "patchSetId": 11
      },
      "lineNbr": 189,
      "author": {
        "id": 5126
      },
      "writtenOn": "2020-02-29T13:02:16Z",
      "side": 1,
      "message": "My guess is that when using this to return stuff, no mutation will typically be necessary. E.g.\n\n  BoundedInlineVector\u003cArrayView\u003cint\u003e, 4\u003e Foo() {\n    return {first_array_, second_array_};\n  }\n\nThe situations when dynamic population of the vector is required are often incompatible with a compile-time-fixed max size in the fist place.",
      "parentUuid": "f661a245_2fed36e3",
      "revId": "2ba4296fbee39a6c532f479d98f82d5f112ae8c5",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d3f29af0_091b4d5c",
        "filename": "rtc_base/bounded_inline_vector.h",
        "patchSetId": 11
      },
      "lineNbr": 192,
      "author": {
        "id": 5019
      },
      "writtenOn": "2020-02-28T12:10:10Z",
      "side": 1,
      "message": "I can image a usecase where T is const,\nbut agree better not to worry about it until such use case is practical.",
      "range": {
        "startLine": 192,
        "startChar": 43,
        "endLine": 192,
        "endChar": 61
      },
      "revId": "2ba4296fbee39a6c532f479d98f82d5f112ae8c5",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d961fc03_57b032c3",
        "filename": "rtc_base/bounded_inline_vector.h",
        "patchSetId": 11
      },
      "lineNbr": 192,
      "author": {
        "id": 5126
      },
      "writtenOn": "2020-02-28T13:24:17Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "d3f29af0_091b4d5c",
      "range": {
        "startLine": 192,
        "startChar": 43,
        "endLine": 192,
        "endChar": 61
      },
      "revId": "2ba4296fbee39a6c532f479d98f82d5f112ae8c5",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c4c88414_d3c27b4b",
        "filename": "rtc_base/bounded_inline_vector.h",
        "patchSetId": 11
      },
      "lineNbr": 195,
      "author": {
        "id": 5019
      },
      "writtenOn": "2020-02-28T12:10:10Z",
      "side": 1,
      "message": "why?",
      "range": {
        "startLine": 195,
        "startChar": 17,
        "endLine": 195,
        "endChar": 44
      },
      "revId": "2ba4296fbee39a6c532f479d98f82d5f112ae8c5",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "131211a5_ffea4ae4",
        "filename": "rtc_base/bounded_inline_vector.h",
        "patchSetId": 11
      },
      "lineNbr": 195,
      "author": {
        "id": 5126
      },
      "writtenOn": "2020-02-28T13:24:17Z",
      "side": 1,
      "message": "I used to store size in an uint8_t, until I found that that was less efficient than using int. Removed.",
      "parentUuid": "c4c88414_d3c27b4b",
      "range": {
        "startLine": 195,
        "startChar": 17,
        "endLine": 195,
        "endChar": 44
      },
      "revId": "2ba4296fbee39a6c532f479d98f82d5f112ae8c5",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa69dfcd_9516a085",
        "filename": "rtc_base/bounded_inline_vector.h",
        "patchSetId": 11
      },
      "lineNbr": 214,
      "author": {
        "id": 5019
      },
      "writtenOn": "2020-02-28T12:10:10Z",
      "side": 1,
      "message": "should be possible to use (), right?\n\nhttps://abseil.io/tips/88#best-practices-for-initialization\n\n\"Use {} initialization without the \u003d only if the above options don’t compile:\"",
      "range": {
        "startLine": 214,
        "startChar": 16,
        "endLine": 214,
        "endChar": 17
      },
      "revId": "2ba4296fbee39a6c532f479d98f82d5f112ae8c5",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2bebe19f_f993a449",
        "filename": "rtc_base/bounded_inline_vector.h",
        "patchSetId": 11
      },
      "lineNbr": 214,
      "author": {
        "id": 5126
      },
      "writtenOn": "2020-02-28T13:24:17Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "fa69dfcd_9516a085",
      "range": {
        "startLine": 214,
        "startChar": 16,
        "endLine": 214,
        "endChar": 17
      },
      "revId": "2ba4296fbee39a6c532f479d98f82d5f112ae8c5",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "93d05c38_1f4a4103",
        "filename": "rtc_base/bounded_inline_vector.h",
        "patchSetId": 11
      },
      "lineNbr": 218,
      "author": {
        "id": 5019
      },
      "writtenOn": "2020-02-28T12:10:10Z",
      "side": 1,
      "message": "other_capacity",
      "range": {
        "startLine": 218,
        "startChar": 16,
        "endLine": 218,
        "endChar": 29
      },
      "revId": "2ba4296fbee39a6c532f479d98f82d5f112ae8c5",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "072b0dbc_de77a2c2",
        "filename": "rtc_base/bounded_inline_vector.h",
        "patchSetId": 11
      },
      "lineNbr": 218,
      "author": {
        "id": 5126
      },
      "writtenOn": "2020-02-28T13:24:17Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "93d05c38_1f4a4103",
      "range": {
        "startLine": 218,
        "startChar": 16,
        "endLine": 218,
        "endChar": 29
      },
      "revId": "2ba4296fbee39a6c532f479d98f82d5f112ae8c5",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5cc4063a_9b2d5e69",
        "filename": "rtc_base/bounded_inline_vector.h",
        "patchSetId": 11
      },
      "lineNbr": 219,
      "author": {
        "id": 5019
      },
      "writtenOn": "2020-02-28T12:10:10Z",
      "side": 1,
      "message": "nit: since c++14 there is \"enable_if_t\u003c...\u003e\" to shortcut \"enable_if\u003c...\u003e::type\"",
      "range": {
        "startLine": 219,
        "startChar": 21,
        "endLine": 219,
        "endChar": 35
      },
      "revId": "2ba4296fbee39a6c532f479d98f82d5f112ae8c5",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "689c8c31_e9042549",
        "filename": "rtc_base/bounded_inline_vector.h",
        "patchSetId": 11
      },
      "lineNbr": 219,
      "author": {
        "id": 5126
      },
      "writtenOn": "2020-02-28T13:24:17Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5cc4063a_9b2d5e69",
      "range": {
        "startLine": 219,
        "startChar": 21,
        "endLine": 219,
        "endChar": 35
      },
      "revId": "2ba4296fbee39a6c532f479d98f82d5f112ae8c5",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7703744b_fff9cd8e",
        "filename": "rtc_base/bounded_inline_vector.h",
        "patchSetId": 11
      },
      "lineNbr": 260,
      "author": {
        "id": 5125
      },
      "writtenOn": "2020-02-28T10:00:29Z",
      "side": 1,
      "message": "What is the purpose of this method? It seems to be used nowhere, and it is identical to the data() method from what I can see.",
      "range": {
        "startLine": 260,
        "startChar": 11,
        "endLine": 260,
        "endChar": 16
      },
      "revId": "2ba4296fbee39a6c532f479d98f82d5f112ae8c5",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8dfcb3e5_d4e3e7d2",
        "filename": "rtc_base/bounded_inline_vector.h",
        "patchSetId": 11
      },
      "lineNbr": 260,
      "author": {
        "id": 5126
      },
      "writtenOn": "2020-02-28T13:24:17Z",
      "side": 1,
      "message": "It returns a constant pointer to the data regardless of whether *this is const. Compare with cbegin() and cend().",
      "parentUuid": "7703744b_fff9cd8e",
      "range": {
        "startLine": 260,
        "startChar": 11,
        "endLine": 260,
        "endChar": 16
      },
      "revId": "2ba4296fbee39a6c532f479d98f82d5f112ae8c5",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "425ce7e9_249a0f53",
        "filename": "rtc_base/bounded_inline_vector_unittest.cc",
        "patchSetId": 11
      },
      "lineNbr": 27,
      "author": {
        "id": 5019
      },
      "writtenOn": "2020-02-28T12:10:10Z",
      "side": 1,
      "message": "is this a property class should guarantee?\n(i.e. can some future change make copy trivial even for large vectors?)",
      "range": {
        "startLine": 27,
        "startChar": 0,
        "endLine": 27,
        "endChar": 68
      },
      "revId": "2ba4296fbee39a6c532f479d98f82d5f112ae8c5",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "adfdc202_02c45a0b",
        "filename": "rtc_base/bounded_inline_vector_unittest.cc",
        "patchSetId": 11
      },
      "lineNbr": 37,
      "author": {
        "id": 5019
      },
      "writtenOn": "2020-02-28T12:10:10Z",
      "side": 1,
      "message": "why this selection of types? may be comment about each one what special property they have that you want to test.\n(primitive, trivial_but_not_primitive, move_only, ...)",
      "range": {
        "startLine": 35,
        "startChar": 34,
        "endLine": 37,
        "endChar": 54
      },
      "revId": "2ba4296fbee39a6c532f479d98f82d5f112ae8c5",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c6d674d3_ad88eb26",
        "filename": "rtc_base/bounded_inline_vector_unittest.cc",
        "patchSetId": 11
      },
      "lineNbr": 37,
      "author": {
        "id": 5126
      },
      "writtenOn": "2020-02-28T13:24:17Z",
      "side": 1,
      "message": "Done. (Feel free to suggest additional types to test.)",
      "parentUuid": "adfdc202_02c45a0b",
      "range": {
        "startLine": 35,
        "startChar": 34,
        "endLine": 37,
        "endChar": 54
      },
      "revId": "2ba4296fbee39a6c532f479d98f82d5f112ae8c5",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "412620cd_4dfd16dd",
        "filename": "rtc_base/bounded_inline_vector_unittest.cc",
        "patchSetId": 11
      },
      "lineNbr": 38,
      "author": {
        "id": 5019
      },
      "writtenOn": "2020-02-28T12:10:10Z",
      "side": 1,
      "message": "since std::shared_ptr is not allowed in webrtc, it might not be a good idea to use it in test either.\nCan you use some other type. what is special about this one?",
      "range": {
        "startLine": 38,
        "startChar": 34,
        "endLine": 38,
        "endChar": 49
      },
      "revId": "2ba4296fbee39a6c532f479d98f82d5f112ae8c5",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4bf6b566_8f9e095c",
        "filename": "rtc_base/bounded_inline_vector_unittest.cc",
        "patchSetId": 11
      },
      "lineNbr": 38,
      "author": {
        "id": 5126
      },
      "writtenOn": "2020-02-28T13:24:17Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "412620cd_4dfd16dd",
      "range": {
        "startLine": 38,
        "startChar": 34,
        "endLine": 38,
        "endChar": 49
      },
      "revId": "2ba4296fbee39a6c532f479d98f82d5f112ae8c5",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "85690829_043f512a",
        "filename": "rtc_base/bounded_inline_vector_unittest.cc",
        "patchSetId": 11
      },
      "lineNbr": 103,
      "author": {
        "id": 5019
      },
      "writtenOn": "2020-02-28T12:10:10Z",
      "side": 1,
      "message": "why brace initialization?",
      "range": {
        "startLine": 103,
        "startChar": 34,
        "endLine": 103,
        "endChar": 40
      },
      "revId": "2ba4296fbee39a6c532f479d98f82d5f112ae8c5",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dee1ccfb_384de572",
        "filename": "rtc_base/bounded_inline_vector_unittest.cc",
        "patchSetId": 11
      },
      "lineNbr": 103,
      "author": {
        "id": 5126
      },
      "writtenOn": "2020-02-28T13:24:17Z",
      "side": 1,
      "message": "Because normal constructor function call syntax looks very awkward with container initialization...",
      "parentUuid": "85690829_043f512a",
      "range": {
        "startLine": 103,
        "startChar": 34,
        "endLine": 103,
        "endChar": 40
      },
      "revId": "2ba4296fbee39a6c532f479d98f82d5f112ae8c5",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cd22cb1c_25a31ffe",
        "filename": "rtc_base/bounded_inline_vector_unittest.cc",
        "patchSetId": 11
      },
      "lineNbr": 103,
      "author": {
        "id": 5019
      },
      "writtenOn": "2020-02-28T14:42:53Z",
      "side": 1,
      "message": "may be it is an indication current multi parameter constructor is surprising (any other container has such constructor?)\ne.g. one surprise is\nstd::vector\u003cint\u003e v1(7, 24);\nand \nBounedInlineVector\u003cint\u003e v2(7, 24);\n\nproduce different results:\nv1.size() \u003d\u003d 7\nv2.size() \u003d\u003d 2\n\n(and so are std::vector\u003cdouble\u003e v3(13);\nand BoundedInlineVector\u003cdouble\u003e v4(13);}\n\n\nCan you make constainer intialization work?, i.e.\nBoundedInlineVector\u003cdouble, 1\u003e pi \u003d {3.14};",
      "parentUuid": "dee1ccfb_384de572",
      "range": {
        "startLine": 103,
        "startChar": 34,
        "endLine": 103,
        "endChar": 40
      },
      "revId": "2ba4296fbee39a6c532f479d98f82d5f112ae8c5",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "96c56a80_21316e74",
        "filename": "rtc_base/bounded_inline_vector_unittest.cc",
        "patchSetId": 11
      },
      "lineNbr": 103,
      "author": {
        "id": 5126
      },
      "writtenOn": "2020-02-29T13:02:16Z",
      "side": 1,
      "message": "The constructor arguments for std::vector et al. have come about because of historical accidents and pre-C++11 language restrictions. I don\u0027t consider them particularly worth emulating. Having just one form of constructor, in which the initial elements are listed, seems like a sweet spot to me in terms of usability and complexity.\n\nI did make container initialization work. I just needed to make the constructor non-explicit.",
      "parentUuid": "cd22cb1c_25a31ffe",
      "range": {
        "startLine": 103,
        "startChar": 34,
        "endLine": 103,
        "endChar": 40
      },
      "revId": "2ba4296fbee39a6c532f479d98f82d5f112ae8c5",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    }
  ]
}