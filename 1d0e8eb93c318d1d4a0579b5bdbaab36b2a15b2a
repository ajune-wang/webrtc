{
  "comments": [
    {
      "key": {
        "uuid": "1f0c4446_03e41ce3",
        "filename": "call/video_receive_stream.h",
        "patchSetId": 17
      },
      "lineNbr": 98,
      "author": {
        "id": 5117
      },
      "writtenOn": "2019-01-31T12:29:38Z",
      "side": 1,
      "message": "0.0",
      "range": {
        "startLine": 98,
        "startChar": 41,
        "endLine": 98,
        "endChar": 42
      },
      "revId": "1d0e8eb93c318d1d4a0579b5bdbaab36b2a15b2a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "39a0e139_c234d354",
        "filename": "video/receive_statistics_proxy_unittest.cc",
        "patchSetId": 17
      },
      "lineNbr": 271,
      "author": {
        "id": 5142
      },
      "writtenOn": "2019-01-31T09:38:15Z",
      "side": 1,
      "message": "The code that triggers OnStreamInactive (https://cs.chromium.org/chromium/src/third_party/webrtc/video/video_receive_stream.cc?type\u003dcs\u0026sq\u003dpackage:chromium\u0026g\u003d0\u0026l\u003d553) looks pretty straight-forward, but I\u0027m having trouble finding unittests that confirms that this happens. I\u0027d be happy to see it, but I\u0027m not going to block his CL.",
      "revId": "1d0e8eb93c318d1d4a0579b5bdbaab36b2a15b2a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "616621f1_ee07c226",
        "filename": "video/receive_statistics_proxy_unittest.cc",
        "patchSetId": 17
      },
      "lineNbr": 271,
      "author": {
        "id": 5117
      },
      "writtenOn": "2019-01-31T12:29:38Z",
      "side": 1,
      "message": "Maybe to make it more realistic do this instead:\n  // Pause.\n  fake_clock_.AdvanceTimeMilliseconds(5000);\n  statistics_proxy_-\u003eOnStreamInactive();\n  fake_clock_.AdvanceTimeMilliseconds(432);\n\ni.e. the pause it detected after 5sec of inactivity.",
      "range": {
        "startLine": 271,
        "startChar": 21,
        "endLine": 271,
        "endChar": 37
      },
      "revId": "1d0e8eb93c318d1d4a0579b5bdbaab36b2a15b2a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "675aa009_cb1dda1c",
        "filename": "video/receive_statistics_proxy_unittest.cc",
        "patchSetId": 17
      },
      "lineNbr": 292,
      "author": {
        "id": 5117
      },
      "writtenOn": "2019-01-31T12:29:38Z",
      "side": 1,
      "message": "Again, switch order of clock advancement and pause notification.",
      "range": {
        "startLine": 290,
        "startChar": 2,
        "endLine": 292,
        "endChar": 44
      },
      "revId": "1d0e8eb93c318d1d4a0579b5bdbaab36b2a15b2a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1683c376_debbd5d1",
        "filename": "video/receive_statistics_proxy_unittest.cc",
        "patchSetId": 17
      },
      "lineNbr": 299,
      "author": {
        "id": 5117
      },
      "writtenOn": "2019-01-31T12:29:38Z",
      "side": 1,
      "message": "ditto.",
      "range": {
        "startLine": 298,
        "startChar": 2,
        "endLine": 299,
        "endChar": 43
      },
      "revId": "1d0e8eb93c318d1d4a0579b5bdbaab36b2a15b2a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "404d2bb7_53bfb0ae",
        "filename": "video/receive_statistics_proxy_unittest.cc",
        "patchSetId": 17
      },
      "lineNbr": 1042,
      "author": {
        "id": 5142
      },
      "writtenOn": "2019-01-31T09:38:15Z",
      "side": 1,
      "message": "What does this variable mean? I don\u0027t understand it.",
      "revId": "1d0e8eb93c318d1d4a0579b5bdbaab36b2a15b2a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "455f9154_1ef631f9",
        "filename": "video/receive_statistics_proxy_unittest.cc",
        "patchSetId": 17
      },
      "lineNbr": 1043,
      "author": {
        "id": 5142
      },
      "writtenOn": "2019-01-31T09:38:15Z",
      "side": 1,
      "message": "KFreeze -\u003e kFreeze",
      "revId": "1d0e8eb93c318d1d4a0579b5bdbaab36b2a15b2a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "03b25e8e_833904ea",
        "filename": "video/receive_statistics_proxy_unittest.cc",
        "patchSetId": 17
      },
      "lineNbr": 1048,
      "author": {
        "id": 5142
      },
      "writtenOn": "2019-01-31T09:38:15Z",
      "side": 1,
      "message": "Isn\u0027t this supposed to be Max(3 * avg_frame_duration_ms, avg_frame_duration_ms + 150)?",
      "revId": "1d0e8eb93c318d1d4a0579b5bdbaab36b2a15b2a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d3af81ee_3c8efebf",
        "filename": "video/receive_statistics_proxy_unittest.cc",
        "patchSetId": 17
      },
      "lineNbr": 1054,
      "author": {
        "id": 5142
      },
      "writtenOn": "2019-01-31T09:38:15Z",
      "side": 1,
      "message": "What\u0027s kFreezeDetectionMinFreezeDurationMs - 1 ?\n\nI think these two tests would be more easy to read and understand if they weren\u0027t parameterized.",
      "revId": "1d0e8eb93c318d1d4a0579b5bdbaab36b2a15b2a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0333e0f9_00b45d56",
        "filename": "video/receive_statistics_proxy_unittest.cc",
        "patchSetId": 17
      },
      "lineNbr": 1070,
      "author": {
        "id": 5142
      },
      "writtenOn": "2019-01-31T09:38:15Z",
      "side": 1,
      "message": "It should be fine for two frames in the pipe to get processed within a ms otherwise things might get flaky. Are there any assumptions here about time must having passed?",
      "revId": "1d0e8eb93c318d1d4a0579b5bdbaab36b2a15b2a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b0f7ac53_f3651dcb",
        "filename": "video/video_quality_observer.cc",
        "patchSetId": 17
      },
      "lineNbr": 23,
      "author": {
        "id": 5142
      },
      "writtenOn": "2019-01-31T09:38:15Z",
      "side": 1,
      "message": "Is this a detail missing from the spec? Whatever you end up with, let\u0027s make sure it\u0027s documented.",
      "revId": "1d0e8eb93c318d1d4a0579b5bdbaab36b2a15b2a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3999b36b_6aff631f",
        "filename": "video/video_quality_observer.cc",
        "patchSetId": 17
      },
      "lineNbr": 159,
      "author": {
        "id": 5117
      },
      "writtenOn": "2019-01-31T12:29:38Z",
      "side": 1,
      "message": "Nit: Save it in the local variable, so DCHECK and actual use of the value use obviously the same value. Otherwise reader have to check or believe that GetAverageRoundedDown returns the same value.",
      "range": {
        "startLine": 159,
        "startChar": 17,
        "endLine": 159,
        "endChar": 66
      },
      "revId": "1d0e8eb93c318d1d4a0579b5bdbaab36b2a15b2a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    }
  ]
}