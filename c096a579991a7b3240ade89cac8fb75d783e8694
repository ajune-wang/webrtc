{
  "comments": [
    {
      "key": {
        "uuid": "748b3b6f_bdaf3dce",
        "filename": "modules/rtp_rtcp/source/rtp_sequence_number_map.h",
        "patchSetId": 6
      },
      "lineNbr": 29,
      "author": {
        "id": 5019
      },
      "writtenOn": "2019-04-03T12:04:22Z",
      "side": 1,
      "message": "What does it mean for this class?\nI tried to find a unit test that would clarify such usecase, but didn\u0027t recognize any.",
      "revId": "c096a579991a7b3240ade89cac8fb75d783e8694",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1f4e2e42_2176a22a",
        "filename": "modules/rtp_rtcp/source/rtp_sequence_number_map.h",
        "patchSetId": 6
      },
      "lineNbr": 29,
      "author": {
        "id": 5147
      },
      "writtenOn": "2019-04-03T13:10:28Z",
      "side": 1,
      "message": "1. I had a typo. Please mentally replace this by:\n// 3. If a media frame is split into several RTP packets, all of those packets\u0027\n//    sequence numbers will be mapped to the first one\u0027s timestamp.\n\n2.\nIt follows from the way the class is expected to be used. One would normally call\nInsert(/*seq_num\u003d*/10, timestamp, /*is_first\u003d*/true, /*is_last\u003d*/false);\nInsert(/*seq_num\u003d*/11, timestamp, /*is_first\u003d*/false, /*is_last\u003d*/false);\nInsert(/*seq_num\u003d*/12, timestamp, /*is_first\u003d*/false, /*is_last\u003d*/true);\nThe timestamp will be the same in all three calls, so when we Get(10), Get(11) or Get(12), each time we will have a different Info, but the timestamp will be the same. It is not guaranteed by the class itself, though, so I assume you\u0027d suggest to remove this?\n\n3. How about the following instead, then?\n// 3. Media frames are sometimes split into several RTP packets.\n//    In such a case, Insert() is expected to be called once for each packet.\n//    The timestamp is not expected to change between those calls.",
      "parentUuid": "748b3b6f_bdaf3dce",
      "revId": "c096a579991a7b3240ade89cac8fb75d783e8694",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f11d0091_aa3ffcf8",
        "filename": "modules/rtp_rtcp/source/rtp_sequence_number_map_unittest.cc",
        "patchSetId": 6
      },
      "lineNbr": 55,
      "author": {
        "id": 5019
      },
      "writtenOn": "2019-04-03T12:04:22Z",
      "side": 1,
      "message": "may be a different name can make it clearer, something like\nExpectAssociationsAreInTheMap\n\nalternatively this helper can be expressed with custom matcher and two expectations:\n(those one of these expectations will be reversed)\n\nMATCHER_P(InTheMap, uut, \"\") {\n   return uut-\u003eGet(arg.sequence_number) \u003d\u003d arg.info;\n}\n\nTEST {\n  EXPECT_EQ(uut.AssociationCountForTesting(), associations.size());\n  EXPECT_THAT(associations, AllOf(InTheMap(\u0026uut)));\n}\n\n(for tests where slice of the vector is taken, you may try to use rtc::ArrayView)",
      "range": {
        "startLine": 55,
        "startChar": 7,
        "endLine": 55,
        "endChar": 25
      },
      "revId": "c096a579991a7b3240ade89cac8fb75d783e8694",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "785160b6_b5d7c172",
        "filename": "modules/rtp_rtcp/source/rtp_sequence_number_map_unittest.cc",
        "patchSetId": 6
      },
      "lineNbr": 55,
      "author": {
        "id": 5147
      },
      "writtenOn": "2019-04-03T13:10:28Z",
      "side": 1,
      "message": "IMHO, it is simpler as is. Do you feel strongly about this, or may we keep it?",
      "parentUuid": "f11d0091_aa3ffcf8",
      "range": {
        "startLine": 55,
        "startChar": 7,
        "endLine": 55,
        "endChar": 25
      },
      "revId": "c096a579991a7b3240ade89cac8fb75d783e8694",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a5fa202c_76d6b666",
        "filename": "modules/rtp_rtcp/source/rtp_sequence_number_map_unittest.cc",
        "patchSetId": 6
      },
      "lineNbr": 69,
      "author": {
        "id": 5019
      },
      "writtenOn": "2019-04-03T12:04:22Z",
      "side": 1,
      "message": "info used once and you do not expose it\u0027s type, so may be you do not need that variables at all:\nEXPECT_EQ(uut.Get(association-\u003esequence_number), association-\u003einfo)",
      "range": {
        "startLine": 69,
        "startChar": 6,
        "endLine": 69,
        "endChar": 21
      },
      "revId": "c096a579991a7b3240ade89cac8fb75d783e8694",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "eeb7286e_987c76b7",
        "filename": "modules/rtp_rtcp/source/rtp_sequence_number_map_unittest.cc",
        "patchSetId": 6
      },
      "lineNbr": 69,
      "author": {
        "id": 5147
      },
      "writtenOn": "2019-04-03T13:10:28Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a5fa202c_76d6b666",
      "range": {
        "startLine": 69,
        "startChar": 6,
        "endLine": 69,
        "endChar": 21
      },
      "revId": "c096a579991a7b3240ade89cac8fb75d783e8694",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4ed7456f_eb5214bb",
        "filename": "modules/rtp_rtcp/source/rtp_sequence_number_map_unittest.cc",
        "patchSetId": 6
      },
      "lineNbr": 97,
      "author": {
        "id": 5019
      },
      "writtenOn": "2019-04-03T12:04:22Z",
      "side": 1,
      "message": "neighbour code uses num_\u003cobject\u003es instead of \u003cobject\u003e_count,\ni.e. may name this and similar variables num_associations;",
      "range": {
        "startLine": 97,
        "startChar": 13,
        "endLine": 97,
        "endChar": 30
      },
      "revId": "c096a579991a7b3240ade89cac8fb75d783e8694",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "669971ff_f8ff5c0f",
        "filename": "modules/rtp_rtcp/source/rtp_sequence_number_map_unittest.cc",
        "patchSetId": 6
      },
      "lineNbr": 97,
      "author": {
        "id": 5147
      },
      "writtenOn": "2019-04-03T13:10:28Z",
      "side": 1,
      "message": "Which neighbors do that?",
      "parentUuid": "4ed7456f_eb5214bb",
      "range": {
        "startLine": 97,
        "startChar": 13,
        "endLine": 97,
        "endChar": 30
      },
      "revId": "c096a579991a7b3240ade89cac8fb75d783e8694",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6ce6acc9_c366d7ce",
        "filename": "modules/rtp_rtcp/source/rtp_sequence_number_map_unittest.cc",
        "patchSetId": 6
      },
      "lineNbr": 129,
      "author": {
        "id": 5019
      },
      "writtenOn": "2019-04-03T12:04:22Z",
      "side": 1,
      "message": "may be use empty string:\nINSTANTIATE_TEST_SUITE_P(, RtpSequenceNumberMapTestWithParams, ...)\n\n\u0027_\u0027 is disallowed for test suite names and test names\nhttps://github.com/google/googletest/blob/master/googletest/docs/faq.md#why-should-test-suite-names-and-test-names-not-contain-underscore\n(since _ has special meaning in c++ and may result in producing reserved symbol)",
      "range": {
        "startLine": 129,
        "startChar": 25,
        "endLine": 129,
        "endChar": 26
      },
      "revId": "c096a579991a7b3240ade89cac8fb75d783e8694",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dc74d4a4_c7293541",
        "filename": "modules/rtp_rtcp/source/rtp_sequence_number_map_unittest.cc",
        "patchSetId": 6
      },
      "lineNbr": 129,
      "author": {
        "id": 5147
      },
      "writtenOn": "2019-04-03T13:10:28Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6ce6acc9_c366d7ce",
      "range": {
        "startLine": 129,
        "startChar": 25,
        "endLine": 129,
        "endChar": 26
      },
      "revId": "c096a579991a7b3240ade89cac8fb75d783e8694",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa605120_2fd9121d",
        "filename": "modules/rtp_rtcp/source/rtp_sequence_number_map_unittest.cc",
        "patchSetId": 6
      },
      "lineNbr": 152,
      "author": {
        "id": 5019
      },
      "writtenOn": "2019-04-03T12:04:22Z",
      "side": 1,
      "message": "uint32_t (since it is rtp timestamp)",
      "range": {
        "startLine": 152,
        "startChar": 12,
        "endLine": 152,
        "endChar": 20
      },
      "revId": "c096a579991a7b3240ade89cac8fb75d783e8694",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "937ade1e_d0ab3d79",
        "filename": "modules/rtp_rtcp/source/rtp_sequence_number_map_unittest.cc",
        "patchSetId": 6
      },
      "lineNbr": 152,
      "author": {
        "id": 5147
      },
      "writtenOn": "2019-04-03T13:10:28Z",
      "side": 1,
      "message": "Thanks for catching!",
      "parentUuid": "fa605120_2fd9121d",
      "range": {
        "startLine": 152,
        "startChar": 12,
        "endLine": 152,
        "endChar": 20
      },
      "revId": "c096a579991a7b3240ade89cac8fb75d783e8694",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d96b373a_e33d2eb4",
        "filename": "modules/rtp_rtcp/source/rtp_sequence_number_map_unittest.cc",
        "patchSetId": 6
      },
      "lineNbr": 167,
      "author": {
        "id": 5019
      },
      "writtenOn": "2019-04-03T12:04:22Z",
      "side": 1,
      "message": "loop for inserting 2 elements seems overkill here:\nvalue are irrelevant, so may be simplify to something like\n{\n  RtpSequenceNumberMap uut(kMaxPossibleMaxEntries);\n  uut.Insert(1000, {});\n  uut.Insert(1020, {});\n  EXPECT_FALSE(uut.Get(1001));\n}",
      "range": {
        "startLine": 165,
        "startChar": 2,
        "endLine": 167,
        "endChar": 3
      },
      "revId": "c096a579991a7b3240ade89cac8fb75d783e8694",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a5d11599_f9dc4f72",
        "filename": "modules/rtp_rtcp/source/rtp_sequence_number_map_unittest.cc",
        "patchSetId": 6
      },
      "lineNbr": 167,
      "author": {
        "id": 5147
      },
      "writtenOn": "2019-04-03T13:10:28Z",
      "side": 1,
      "message": "I see your point, but I think it makes for a better distinction between setup-code and test-code, when we have a vector with all of the setup-entries. It\u0027s also more consistent in style with the other tests. I would prefer to keep it as-is.",
      "parentUuid": "d96b373a_e33d2eb4",
      "range": {
        "startLine": 165,
        "startChar": 2,
        "endLine": 167,
        "endChar": 3
      },
      "revId": "c096a579991a7b3240ade89cac8fb75d783e8694",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "51caf7ce_577de74e",
        "filename": "modules/rtp_rtcp/source/rtp_sequence_number_map_unittest.cc",
        "patchSetId": 6
      },
      "lineNbr": 193,
      "author": {
        "id": 5019
      },
      "writtenOn": "2019-04-03T12:04:22Z",
      "side": 1,
      "message": "or you can use plan c array\nconst Association associations[] \u003d { ...",
      "range": {
        "startLine": 193,
        "startChar": 2,
        "endLine": 193,
        "endChar": 45
      },
      "revId": "c096a579991a7b3240ade89cac8fb75d783e8694",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f5bcf5af_eac68469",
        "filename": "modules/rtp_rtcp/source/rtp_sequence_number_map_unittest.cc",
        "patchSetId": 6
      },
      "lineNbr": 193,
      "author": {
        "id": 5147
      },
      "writtenOn": "2019-04-03T13:10:28Z",
      "side": 1,
      "message": "Yes, but that\u0027s less consistent with other tests. Since we don\u0027t care about efficiency here, I prefer to keep it as-is.",
      "parentUuid": "51caf7ce_577de74e",
      "range": {
        "startLine": 193,
        "startChar": 2,
        "endLine": 193,
        "endChar": 45
      },
      "revId": "c096a579991a7b3240ade89cac8fb75d783e8694",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "690275a8_f114a2ab",
        "filename": "modules/rtp_rtcp/source/rtp_sequence_number_map_unittest.cc",
        "patchSetId": 6
      },
      "lineNbr": 194,
      "author": {
        "id": 5019
      },
      "writtenOn": "2019-04-03T12:04:22Z",
      "side": 1,
      "message": "I think hexadecimal constants are unsigned by default,\nkeep \u0027u\u0027 suffix if I remember wrong.",
      "range": {
        "startLine": 194,
        "startChar": 50,
        "endLine": 194,
        "endChar": 57
      },
      "revId": "c096a579991a7b3240ade89cac8fb75d783e8694",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d8064bdd_60ef4904",
        "filename": "modules/rtp_rtcp/source/rtp_sequence_number_map_unittest.cc",
        "patchSetId": 6
      },
      "lineNbr": 194,
      "author": {
        "id": 5147
      },
      "writtenOn": "2019-04-03T13:10:28Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "690275a8_f114a2ab",
      "range": {
        "startLine": 194,
        "startChar": 50,
        "endLine": 194,
        "endChar": 57
      },
      "revId": "c096a579991a7b3240ade89cac8fb75d783e8694",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3d5ffd3b_4d78ce2f",
        "filename": "modules/rtp_rtcp/source/rtp_sequence_number_map_unittest.cc",
        "patchSetId": 6
      },
      "lineNbr": 200,
      "author": {
        "id": 5019
      },
      "writtenOn": "2019-04-03T12:04:22Z",
      "side": 1,
      "message": "avoid DCHECKS in tests,\nif something is wrong (including test setup) it is better to fail test than to crash it.\nprefer EXPECT_TRUE/ASSERT_TRUE/ASSERT_FALSE",
      "range": {
        "startLine": 200,
        "startChar": 2,
        "endLine": 200,
        "endChar": 12
      },
      "revId": "c096a579991a7b3240ade89cac8fb75d783e8694",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e73f43c7_13c2fef2",
        "filename": "modules/rtp_rtcp/source/rtp_sequence_number_map_unittest.cc",
        "patchSetId": 6
      },
      "lineNbr": 200,
      "author": {
        "id": 5147
      },
      "writtenOn": "2019-04-03T13:10:28Z",
      "side": 1,
      "message": "I think using DCHECKs like that communicates an important distinction:\n1. Expectations are about the unit-under-test; they\u0027re what we\u0027re testing in the current test.\n2. Assertions are used for expectations of the unit-under-test that have already been EXPECTed by a previous test, and which are baseline assumptions for the current test.\n3. DCHECKs communicate properties of the test itself. If they are wrong, it is not the unit-under-test that is faulty, but rather the test itself. The code in tests is still code, and may still use DCHECKs to prove its own correctness, like any code.",
      "parentUuid": "3d5ffd3b_4d78ce2f",
      "range": {
        "startLine": 200,
        "startChar": 2,
        "endLine": 200,
        "endChar": 12
      },
      "revId": "c096a579991a7b3240ade89cac8fb75d783e8694",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c34f125b_32e7b06b",
        "filename": "modules/rtp_rtcp/source/rtp_sequence_number_map_unittest.cc",
        "patchSetId": 6
      },
      "lineNbr": 248,
      "author": {
        "id": 5019
      },
      "writtenOn": "2019-04-03T12:04:22Z",
      "side": 1,
      "message": "may be\nassociations.back()",
      "range": {
        "startLine": 248,
        "startChar": 23,
        "endLine": 248,
        "endChar": 60
      },
      "revId": "c096a579991a7b3240ade89cac8fb75d783e8694",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bf8e423e_b75f35ac",
        "filename": "modules/rtp_rtcp/source/rtp_sequence_number_map_unittest.cc",
        "patchSetId": 6
      },
      "lineNbr": 248,
      "author": {
        "id": 5147
      },
      "writtenOn": "2019-04-03T13:10:28Z",
      "side": 1,
      "message": "Yes, but that would be inconsistent with associations[associations.size() - 2], used just above.",
      "parentUuid": "c34f125b_32e7b06b",
      "range": {
        "startLine": 248,
        "startChar": 23,
        "endLine": 248,
        "endChar": 60
      },
      "revId": "c096a579991a7b3240ade89cac8fb75d783e8694",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "57756aa8_46eac4e5",
        "filename": "modules/rtp_rtcp/source/rtp_sequence_number_map_unittest.cc",
        "patchSetId": 6
      },
      "lineNbr": 402,
      "author": {
        "id": 5019
      },
      "writtenOn": "2019-04-03T12:04:22Z",
      "side": 1,
      "message": "any reason to make it a parameter, you always use same value.",
      "range": {
        "startLine": 402,
        "startChar": 11,
        "endLine": 402,
        "endChar": 22
      },
      "revId": "c096a579991a7b3240ade89cac8fb75d783e8694",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "75538652_9d133e3b",
        "filename": "modules/rtp_rtcp/source/rtp_sequence_number_map_unittest.cc",
        "patchSetId": 6
      },
      "lineNbr": 402,
      "author": {
        "id": 5147
      },
      "writtenOn": "2019-04-03T13:10:28Z",
      "side": 1,
      "message": "It\u0027s a property of the test, not of the fixture.",
      "parentUuid": "57756aa8_46eac4e5",
      "range": {
        "startLine": 402,
        "startChar": 11,
        "endLine": 402,
        "endChar": 22
      },
      "revId": "c096a579991a7b3240ade89cac8fb75d783e8694",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    }
  ]
}