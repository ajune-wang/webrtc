{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "3609e190_4dae8cf8",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 6305
      },
      "writtenOn": "2021-02-20T13:44:52Z",
      "side": 1,
      "message": "Hello Tommi!\n\nCould you please looks at this CL which adds wrappers for AV1 encoder \u0026 decoder into iOS SDK.\nIt also make it possible to play with AV1 encoding in AppRTCMobile.\n\nThanks a lot in advance,\nYura.",
      "revId": "6d8deaa3fda25267fb88fab58cb95cd990859efd",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "232e135e_250d5672",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5508
      },
      "writtenOn": "2021-02-20T15:41:23Z",
      "side": 1,
      "message": "Peter - can you take a look?",
      "revId": "6d8deaa3fda25267fb88fab58cb95cd990859efd",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "53d764b4_7132a94c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 6305
      },
      "writtenOn": "2021-02-22T09:40:03Z",
      "side": 1,
      "message": "Hello Kári,\n\nCould you please take a look?\n\nThanks a lot in advance,\nYura.",
      "revId": "6d8deaa3fda25267fb88fab58cb95cd990859efd",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c0d2852a_5636036a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5520
      },
      "writtenOn": "2021-02-24T14:39:06Z",
      "side": 1,
      "message": "Hello Yura, thank you for this contribution! \n\nThis looks good, but in order to avoid increasing binary size for all clients, please make including AV1 a compile-time option.",
      "revId": "6d8deaa3fda25267fb88fab58cb95cd990859efd",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cda77d15_3a1b2b5a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 6305
      },
      "writtenOn": "2021-02-24T16:35:33Z",
      "side": 1,
      "message": "Hi Kári.\nThank you very much for review!\n\nI also was concerned about binary size when did this CL. I was mostly inspired by the way VP9 is enabled during compilation. But even so they are similar, the way the are compiled is a bit different (please correct me if I\u0027m wrong).\n\nCompilation of VP9 is primarily controlled with `rtc_libvpx_build_vp9` from `webrtc.gni`. When `rtc_libvpx_build_vp9` is set true during `gn gen` special define `RTC_ENABLE_VP9` is added to compilation. Files with VP9 encoder and decoder are unconditionally included in the compilation (modules/video_coding/BUILD.gn), but the whole content of encoder/decoder files are wrapped with `#ifdef RTC_ENABLE_VP9`. So when `rtc_libvpx_build_vp9` and no `RTC_ENABLE_VP9 is defined, then \"dummy\" implementations of VP9 encoder and decoders are compiled (defined in modules/video_coding/codecs/vp9/vp9.cc).\n\n\nCompilation of AV1 is primarily controlled with `enable_libaom` parameter. There is no special defines added. But actual AV1 encoder/decoder are conditionally included into compilation in `modules/video_coding/codecs/av1/BUILD.gn`. E.g. when AV1 is not enabled, dummy encoder and decoder come from special files `modules/video_coding/codecs/av1/libaom_av1_(encoder/decoder)_absent.cc`, but actual AV1 encoder/decoder not included in the compilation.\n\nSo when enable_libaom \u003d false, then only dummy AV1 encoder/decoder is included in binary and it returns `nullptr` when actual encoder/decoder attempted to be created.\n\nThe only concern is should `RTCVideo(Encoder/Decoder)AV1.mm` be included in SDK compilation or not when enable_libaom \u003d false.\nTo resolve this concert I\u0027ve looked at how VP9 was added in SDK. VP9 encoder/decoder .mm are included in SDK always, but they are just not listed in default codecs when not enabled. \nI could do the same with AV1, but I\u0027d prefer not compile time #ifdef, but rather dynamic check of special flag `webrtc::kIsLibaomAv1EncoderSupported`.\n\nWhat do you think? Should I do some work such that `RTCVideo(Encoder/Decoder)AV1.mm` not included in SDK at all when enable_libaom \u003d false or it wouldn\u0027t hurt that much if dummy implementation will be presented (the same as VP9 encoder/decoder now).\nYura.",
      "parentUuid": "c0d2852a_5636036a",
      "revId": "6d8deaa3fda25267fb88fab58cb95cd990859efd",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bb51b772_3771fa96",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 6305
      },
      "writtenOn": "2021-03-03T08:16:58Z",
      "side": 1,
      "message": "Hi Kári,\n\nSorry for bothering you while you might be very busy with your current tasks.\nCould you please let me know if you still think it is still relevant to implement your previous request about binary size taking into account my explanation about difference with AV1 and VP9 integration to WebRTC? I mean when AV1 is enabled only tiny ObjC wrappers will be included in SDK, but AV1 codec will not increase binary size.\nLet me know if you just busy and don\u0027t have enough time to think about my request.\n\nThanks a lot in advance!",
      "revId": "6d8deaa3fda25267fb88fab58cb95cd990859efd",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2f49ade3_cb5d84ec",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5520
      },
      "writtenOn": "2021-03-03T09:18:10Z",
      "side": 1,
      "message": "Thanks for the detailed explanation! My concern is that when `enable_libaom` is set to false it will still be included in SDP as-is, though with a non-functional implementation, or am I misunderstanding something? I think it might be convenient to add a define that we can use to omit it from the default decoder/encoder factories when compiling without `enable_libaom`.",
      "parentUuid": "cda77d15_3a1b2b5a",
      "revId": "6d8deaa3fda25267fb88fab58cb95cd990859efd",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b5921e63_d9742925",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 6305
      },
      "writtenOn": "2021-03-03T09:34:38Z",
      "side": 1,
      "message": "Thanks a lot for explanation! I just missed that list of codecs in default factory will be reflected and SDP and it is a problem if codec is included, but doesn\u0027t actually work. I uploaded fix for this problem. I also changed VP9 codec wrapper a bit in favor of dynamic check instead of #ifdef (I can rollback if necessary) and do the same dynamic check for AV1.",
      "parentUuid": "2f49ade3_cb5d84ec",
      "revId": "6d8deaa3fda25267fb88fab58cb95cd990859efd",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2d58bca5_7d165b82",
        "filename": "sdk/BUILD.gn",
        "patchSetId": 1
      },
      "lineNbr": 648,
      "author": {
        "id": 5520
      },
      "writtenOn": "2021-02-24T14:39:06Z",
      "side": 1,
      "message": "please put this behind a build-time flag to avoid inflating the binary size for clients who don\u0027t use it. See f.x. `rtc_apprtcmobile_broadcast_extension` for how to do this.",
      "range": {
        "startLine": 648,
        "startChar": 10,
        "endLine": 648,
        "endChar": 13
      },
      "revId": "6d8deaa3fda25267fb88fab58cb95cd990859efd",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2f752956_d42b0626",
        "filename": "sdk/BUILD.gn",
        "patchSetId": 1
      },
      "lineNbr": 648,
      "author": {
        "id": 6305
      },
      "writtenOn": "2021-03-03T11:24:43Z",
      "side": 1,
      "message": "Actual codec presence is controlled by `enable_libaom` build flag which is used inside `libaom_av1_decoder` and `libaom_av1_encoderz` targets.",
      "parentUuid": "2d58bca5_7d165b82",
      "range": {
        "startLine": 648,
        "startChar": 10,
        "endLine": 648,
        "endChar": 13
      },
      "revId": "6d8deaa3fda25267fb88fab58cb95cd990859efd",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "82da78a9_f3010995",
        "filename": "sdk/objc/components/video_codec/RTCDefaultVideoDecoderFactory.m",
        "patchSetId": 1
      },
      "lineNbr": 52,
      "author": {
        "id": 5520
      },
      "writtenOn": "2021-02-24T14:39:06Z",
      "side": 1,
      "message": "Please add DEFINES for this, similar to VP9 above.",
      "range": {
        "startLine": 52,
        "startChar": 2,
        "endLine": 52,
        "endChar": 45
      },
      "revId": "6d8deaa3fda25267fb88fab58cb95cd990859efd",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "aa51e7b7_68eae7ad",
        "filename": "sdk/objc/components/video_codec/RTCDefaultVideoDecoderFactory.m",
        "patchSetId": 1
      },
      "lineNbr": 52,
      "author": {
        "id": 6305
      },
      "writtenOn": "2021-03-03T11:24:43Z",
      "side": 1,
      "message": "Added dynamic check for decoder.",
      "parentUuid": "82da78a9_f3010995",
      "range": {
        "startLine": 52,
        "startChar": 2,
        "endLine": 52,
        "endChar": 45
      },
      "revId": "6d8deaa3fda25267fb88fab58cb95cd990859efd",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c2794c7d_3211e5ae",
        "filename": "sdk/objc/components/video_codec/RTCDefaultVideoEncoderFactory.m",
        "patchSetId": 1
      },
      "lineNbr": 56,
      "author": {
        "id": 5520
      },
      "writtenOn": "2021-02-24T14:39:06Z",
      "side": 1,
      "message": "this also needs ifdefs",
      "range": {
        "startLine": 54,
        "startChar": 2,
        "endLine": 56,
        "endChar": 0
      },
      "revId": "6d8deaa3fda25267fb88fab58cb95cd990859efd",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "62606c28_bbe4f26f",
        "filename": "sdk/objc/components/video_codec/RTCDefaultVideoEncoderFactory.m",
        "patchSetId": 1
      },
      "lineNbr": 56,
      "author": {
        "id": 6305
      },
      "writtenOn": "2021-03-03T11:24:43Z",
      "side": 1,
      "message": "Added dynamic check for encoder.",
      "parentUuid": "c2794c7d_3211e5ae",
      "range": {
        "startLine": 54,
        "startChar": 2,
        "endLine": 56,
        "endChar": 0
      },
      "revId": "6d8deaa3fda25267fb88fab58cb95cd990859efd",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    }
  ]
}