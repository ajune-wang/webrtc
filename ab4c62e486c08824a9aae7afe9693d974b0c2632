{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "df8453f9_02f23a67",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5019
      },
      "writtenOn": "2024-04-08T08:34:55Z",
      "side": 1,
      "message": "I do not have an opinion about these checks,\nalso I\u0027m not an OWNER to provide RS lgtm.",
      "revId": "ab4c62e486c08824a9aae7afe9693d974b0c2632",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e75c3cc4_9284f1c5",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 20429
      },
      "writtenOn": "2024-04-09T20:44:09Z",
      "side": 1,
      "message": "Erik, Philip: PTAL. Thanks!",
      "revId": "ab4c62e486c08824a9aae7afe9693d974b0c2632",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "35bd32a1_512c7de7",
        "filename": "modules/video_coding/codecs/av1/libaom_av1_encoder.cc",
        "patchSetId": 2
      },
      "lineNbr": 630,
      "author": {
        "id": 20429
      },
      "writtenOn": "2024-04-06T04:51:27Z",
      "side": 1,
      "message": "libvpx_vp8_encoder.cc and libvpx_vp9_encoder.cc assert similar conditions, but they use `RTC_DCHECK_EQ` rather than `RTC_CHECK_EQ`:\n\n```\nstd::vector\u003crtc::scoped_refptr\u003cVideoFrameBuffer\u003e\u003e                \nLibvpxVp8Encoder::PrepareBuffers(rtc::scoped_refptr\u003cVideoFrameBuffer\u003e buffer) {\n  RTC_DCHECK_EQ(buffer-\u003ewidth(), raw_images_[0].d_w);\n  RTC_DCHECK_EQ(buffer-\u003eheight(), raw_images_[0].d_h);          \n  ...\n```\n\n```\nint LibvpxVp9Encoder::Encode(const VideoFrame\u0026 input_image,               \n                             const std::vector\u003cVideoFrameType\u003e* frame_types) {\n  ...                                                                 \n  RTC_DCHECK_EQ(input_image.width(), raw_-\u003ed_w);        \n  RTC_DCHECK_EQ(input_image.height(), raw_-\u003ed_h);                                                                    \n  ...\n```\n\nTo help investigate b/330482827, we need to use `RTC_CHECK_EQ`.",
      "revId": "ab4c62e486c08824a9aae7afe9693d974b0c2632",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "At least one maximum vote for label \u0027Code-Review\u0027 is required"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader AND -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1 AND -label:Code-Review\u003dMIN"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader AND -label:Code-Review=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Code-Review=MAX,user=non_uploader"],"failingAtoms":["label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1 AND -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1","label:Code-Review=MIN"]}
      },
      "patchSetCommitId": "ab4c62e486c08824a9aae7afe9693d974b0c2632",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["is:review-enforced_gerrit"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforcement-satisfied_gerrit"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforcement-satisfied_gerrit"]}
      },
      "patchSetCommitId": "ab4c62e486c08824a9aae7afe9693d974b0c2632",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {
        "value": true
      }
    }
  ]
}