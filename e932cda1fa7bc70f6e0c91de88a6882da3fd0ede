{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "7bbcfe24_b0c80ecf",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5634
      },
      "writtenOn": "2021-05-03T08:07:23Z",
      "side": 1,
      "message": "I thought it would be a good idea (if possible) to make the sdp_offer_answer module only relate to the signalling thread. I found exactly one reference to the worker thread in it, so it seemed a good idea to start by getting rid of that one.\n\nThe API is a bit crummy, but I definitely did not want rtp_transmission_manager to know about cricket:::Content and friends - SDP should live in SDP-land only.\n\n",
      "revId": "e932cda1fa7bc70f6e0c91de88a6882da3fd0ede",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6d413275_6937f756",
        "filename": "pc/sdp_offer_answer.cc",
        "patchSetId": 1
      },
      "lineNbr": 4865,
      "author": {
        "id": 5508
      },
      "writtenOn": "2021-05-03T09:05:32Z",
      "side": 1,
      "message": "This actually hides the fact that there\u0027s a thread block here and in that sense is a step backwards (I\u0027ll explain).\n\nA problem that we\u0027ve been reducing over the last few months has been that downstream classes from SdpOfferAnswer, hide Invoke()s that end up hurting performance and slowing down negotiations.\n\nPulling those Invokes *into* SdpOfferAnswer has helped in making it clear where we have multiple Invokes to the same thread, sometimes even hidden in loops. It has lead to design changes that incrementally have cut down on thread blocks and simplified the implementation of downstream classes.\n\nIn this particular case, the demuxer state, state in channel objects and transceivers is being changed and referred to on the worker thread - which actually causes a side effect to the network thread. This is something that hbos recently worked around via \u0027pending modification\u0027 notifications + added checks on the network thread. I think that\u0027s simply a sign that this state belongs to the network thread and not the worker thread. So as to how to tackle this invoke, I\u0027d rather be looking at the change of moving it to the network thread rather than moving it into a different class so that it can\u0027t be seen in the SdpOfferAnswer class.\n\nI\u0027d also consider if we can eliminate potential points of failure early so that the state changes can be applied asynchronously.",
      "revId": "e932cda1fa7bc70f6e0c91de88a6882da3fd0ede",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    }
  ]
}