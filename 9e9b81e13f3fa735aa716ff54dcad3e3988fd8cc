{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "8a39b91e_f638a406",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 8046
      },
      "writtenOn": "2020-11-19T07:57:40Z",
      "side": 1,
      "message": "Hi,\n\nas mentioned in https://webrtc-review.googlesource.com/c/src/+/189544 (which I abandoned), I decided to pick some PipeWire improvements which are really needed to extend PipeWire support in WebRTC. This doesn\u0027t add any API or change behavior as the previous PR, it just adds support for window sharing and dmabuf support and some code improvements on top of that. This is also code which have been already reviewed many times as part of the previous review.\n\nThank you.\n\nJan",
      "revId": "9e9b81e13f3fa735aa716ff54dcad3e3988fd8cc",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1197e617_e1a99ef6",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5087
      },
      "writtenOn": "2020-11-19T08:16:24Z",
      "side": 1,
      "message": "Moving myself to CC since I am not an owner of desktop_capture but build config looks good to me.",
      "revId": "9e9b81e13f3fa735aa716ff54dcad3e3988fd8cc",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "162fb31d_376d1b52",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 8046
      },
      "writtenOn": "2020-11-23T07:24:21Z",
      "side": 1,
      "message": "\u003e Patch Set 2:\n\u003e \n\u003e Sorry about the lack of response - at the moment swamped with a few other things. If possible I\u0027d recommend finding another reviewer right now\n\nHi Tommi,\n\nI understand. However, you are the one who already reviewed this code when it was part of my previous (much bigger) review. This one is only a small portion and focuses only on PipeWire code, it doesn\u0027t change behavior of the capturer at all, it just internally can do more things like window sharing. The same code has been already reviewed and merged in Firefox upstream.\n\n",
      "revId": "9e9b81e13f3fa735aa716ff54dcad3e3988fd8cc",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9197170b_320301d9",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5166
      },
      "writtenOn": "2020-11-23T19:01:19Z",
      "side": 1,
      "message": "Thanks for doing this! I got through the Scoped changes easily enough, but came unstuck later on where it\u0027s not clear to me what the purpose of some of the code changes are. I think in part that\u0027s because it looks like this CL is doing three separate things, and the description doesn\u0027t go into a lot of detail regarding points 2 and 3 (especially 3), and it looks like there might be other, unrelated changes here too.\n\nIdeally, I\u0027d like to see this split into three (or more) CLs each addressing one of the things this CL is doing. Failing that, could you provide more detail on each of the changes explaining what those changes entail? I don\u0027t know a priori what is needed for \"Dmabuf support\", so I can\u0027t verify whether or not a particular part of this CL implements that correctly, especially when it might not be a part of that change at all.",
      "revId": "9e9b81e13f3fa735aa716ff54dcad3e3988fd8cc",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e1f5064f_87a85e6c",
        "filename": "modules/desktop_capture/linux/base_capturer_pipewire.cc",
        "patchSetId": 2
      },
      "lineNbr": 62,
      "author": {
        "id": 5166
      },
      "writtenOn": "2020-11-23T19:01:19Z",
      "side": 1,
      "message": "My C++ is a bit rusty, but it looks like you\u0027re doing this so that if Scoped is instantiated with a type other than one of the specializations below, it will give a runtime error; is that correct? Could you instead delete the destructor for such instantiations, so that it becomes a compile-time error?",
      "revId": "9e9b81e13f3fa735aa716ff54dcad3e3988fd8cc",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2c56c75b_28987ccc",
        "filename": "modules/desktop_capture/linux/base_capturer_pipewire.cc",
        "patchSetId": 2
      },
      "lineNbr": 62,
      "author": {
        "id": 8046
      },
      "writtenOn": "2020-11-24T08:02:20Z",
      "side": 1,
      "message": "Same situation here with C++ and templates, but it looks you need a generic destructor to be defined in order to have destructors for specific objects. At least it doesn\u0027t compile:\n\n../../third_party/webrtc/modules/desktop_capture/linux/base_capturer_pipewire.cc:106:23: error: specialization of member \u0027webrtc::Scoped\u003c_GVariantIter\u003e::~Scoped\u0027 does not specialize an instantiated member Scoped\u003cGVariantIter\u003e::~Scoped()",
      "parentUuid": "e1f5064f_87a85e6c",
      "revId": "9e9b81e13f3fa735aa716ff54dcad3e3988fd8cc",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1e771659_25482a4a",
        "filename": "modules/desktop_capture/linux/base_capturer_pipewire.cc",
        "patchSetId": 2
      },
      "lineNbr": 269,
      "author": {
        "id": 5166
      },
      "writtenOn": "2020-11-23T19:01:19Z",
      "side": 1,
      "message": "Could you reformat this to match the layout of the [0] and [1] references, above? You probably don\u0027t need to replicate the comments, although perhaps a comment before each assignment explaining what it does would be useful.",
      "revId": "9e9b81e13f3fa735aa716ff54dcad3e3988fd8cc",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1d870619_72531681",
        "filename": "modules/desktop_capture/linux/base_capturer_pipewire.cc",
        "patchSetId": 2
      },
      "lineNbr": 269,
      "author": {
        "id": 8046
      },
      "writtenOn": "2020-11-24T08:02:20Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1e771659_25482a4a",
      "revId": "9e9b81e13f3fa735aa716ff54dcad3e3988fd8cc",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bee5923f_e12194fe",
        "filename": "modules/desktop_capture/linux/base_capturer_pipewire.cc",
        "patchSetId": 2
      },
      "lineNbr": 281,
      "author": {
        "id": 5166
      },
      "writtenOn": "2020-11-23T19:01:19Z",
      "side": 1,
      "message": "Optional: Instead of duplicating this line, you could use:\n\nwhile (true) {\n  struct pw_buffer* next_buffer next_buffer \u003d...;\n  if (!next_buffer) {\n    break;\n  }\n  ...\n\nThis is fine if you prefer it though.",
      "revId": "9e9b81e13f3fa735aa716ff54dcad3e3988fd8cc",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f1722fb7_ef783722",
        "filename": "modules/desktop_capture/linux/base_capturer_pipewire.cc",
        "patchSetId": 2
      },
      "lineNbr": 406,
      "author": {
        "id": 5166
      },
      "writtenOn": "2020-11-23T19:01:19Z",
      "side": 1,
      "message": "How about a scoped class for this lock as well?\n\nAlso, it\u0027s not clear which of the improvements this CL is bundling this lock is part of. Ideally the CL should be split into several CLs addressing one issue each, but failing that, if this is a separate bug-fix could you add it to the CL description?",
      "revId": "9e9b81e13f3fa735aa716ff54dcad3e3988fd8cc",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0e230af8_5ac5f8ff",
        "filename": "modules/desktop_capture/linux/base_capturer_pipewire.cc",
        "patchSetId": 2
      },
      "lineNbr": 406,
      "author": {
        "id": 8046
      },
      "writtenOn": "2020-11-24T08:02:20Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f1722fb7_ef783722",
      "revId": "9e9b81e13f3fa735aa716ff54dcad3e3988fd8cc",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7bcecce9_f0ab9ba1",
        "filename": "modules/desktop_capture/linux/base_capturer_pipewire.cc",
        "patchSetId": 2
      },
      "lineNbr": 468,
      "author": {
        "id": 5166
      },
      "writtenOn": "2020-11-23T19:01:19Z",
      "side": 1,
      "message": "It\u0027s not clear how this change fits in to the CL description either. Based on the comment referring to BGRx and the old code referring to RGBx, it looks like it might be an unrelated bugfix, in which case it should be a separate CL.",
      "revId": "9e9b81e13f3fa735aa716ff54dcad3e3988fd8cc",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ec0354ad_0e112add",
        "filename": "modules/desktop_capture/linux/base_capturer_pipewire.cc",
        "patchSetId": 2
      },
      "lineNbr": 468,
      "author": {
        "id": 8046
      },
      "writtenOn": "2020-11-24T08:02:20Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7bcecce9_f0ab9ba1",
      "revId": "9e9b81e13f3fa735aa716ff54dcad3e3988fd8cc",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cf25ec19_8792ef53",
        "filename": "modules/desktop_capture/linux/base_capturer_pipewire.h",
        "patchSetId": 2
      },
      "lineNbr": 36,
      "author": {
        "id": 5166
      },
      "writtenOn": "2020-11-23T19:01:19Z",
      "side": 1,
      "message": "Are these values chosen to match some other constants? If so, then it would be good to document that here.",
      "revId": "9e9b81e13f3fa735aa716ff54dcad3e3988fd8cc",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d26c48ad_ac170e28",
        "filename": "modules/desktop_capture/linux/base_capturer_pipewire.h",
        "patchSetId": 2
      },
      "lineNbr": 36,
      "author": {
        "id": 8046
      },
      "writtenOn": "2020-11-24T08:02:20Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "cf25ec19_8792ef53",
      "revId": "9e9b81e13f3fa735aa716ff54dcad3e3988fd8cc",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    }
  ]
}