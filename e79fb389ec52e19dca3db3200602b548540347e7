{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "f9cc9de0_f1f0fbbe",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 5234
      },
      "writtenOn": "2022-05-02T09:29:04Z",
      "side": 1,
      "message": "This wasn\u0027t as easy as I thought: There\u0027s a subtle difference in when observer is called between new and old signatures, and a couple of tests fail. Advice needed.",
      "revId": "e79fb389ec52e19dca3db3200602b548540347e7",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "012403bd_a5dbca2c",
        "filename": "pc/test/integration_test_helpers.h",
        "patchSetId": 5
      },
      "lineNbr": 926,
      "author": {
        "id": 5234
      },
      "writtenOn": "2022-05-02T09:29:04Z",
      "side": 1,
      "message": "It sounds like this depends on the deprecated behavior implemented by SdpOfferAnswerHandler::SetSessionDescriptionObserverAdapter (see https://source.chromium.org/chromium/chromium/src/+/main:third_party/webrtc/pc/sdp_offer_answer.cc;drc\u003d3af79d17686a37341fa93570f8d32c7ffad644f1;l\u003d1099) which avoids calling the observer immediately (instead posting a message to do it after control returns to the message handler loop).\n\nExact timing is a bit unclear to me (I think we also have a proxy in between, so all that happens on a different thread). Anyway, by changing to the other SetLocalDescription signature (and similarly below for SetRemoteDescription), that delay no longer happens, and a couple of tests break.",
      "range": {
        "startLine": 922,
        "startChar": 0,
        "endLine": 926,
        "endChar": 35
      },
      "revId": "e79fb389ec52e19dca3db3200602b548540347e7",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "113b05a5_9140d429",
        "filename": "pc/test/integration_test_helpers.h",
        "patchSetId": 5
      },
      "lineNbr": 926,
      "author": {
        "id": 5142
      },
      "writtenOn": "2022-05-02T14:51:32Z",
      "side": 1,
      "message": "Some methods run on the Operations Chain (https://w3c.github.io/webrtc-pc/#dfn-operations-chain), including CreateOffer, CreateAnswer, SetLocalDescription and SetRemoteDescription. The operation chain is basically just a queue of operations that ensures if you call an operation while a previous operation is still pending, the second operation is queued to be executed as soon as the pending operation has completed.\n\nThe non-deprecated versions of SLD/SRD invoke the callback as early as possible which is necessary to ensure the state of the peer connection accurately reflects the state that caused the callback to fire. However by the time this callback fires, the operation chain has not yet marked the current SLD/SRD operation as \"completed\". A consequence of this is that if the callback triggers another operation to run it, it will be queued onto the Operations Chain rather than be executed immediately. This prevents SLD/SRD operations from being executed recursively, which is probably a good thing.\n\nThen deprecated versions of SLD/SRD prevent recursion in another way: by delaying the invocation of the callback with a Post. This is good if you want to call SLD/SRD again inside of the callback and have that be executed immediately (because the operations chain will no longer be blocked)... but this is bad if you want to inspect the peer connection\u0027s state and have the state reflect why the event fired. The delay means by the time the callback happens, other API calls could have changed the peer connection\u0027s state in-betweeen the Post and the invocation.\n\nThere was a downstream usage that incorrectly assumed that SLD/SRD operations, which are supposed to be asynchronous, were in fact synchronous. This use case broke when I tried to change it from the old SLD/SRD versions to the new SLD/SRD versions, because that use cases assumed that if SLD/SRD was called inside of the callback then the SLD/SRD would instantly be completed. True with the old API, false with the new API.",
      "parentUuid": "012403bd_a5dbca2c",
      "range": {
        "startLine": 922,
        "startChar": 0,
        "endLine": 926,
        "endChar": 35
      },
      "revId": "e79fb389ec52e19dca3db3200602b548540347e7",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1464f831_010eaa31",
        "filename": "pc/test/integration_test_helpers.h",
        "patchSetId": 5
      },
      "lineNbr": 926,
      "author": {
        "id": 5234
      },
      "writtenOn": "2022-05-02T15:05:03Z",
      "side": 1,
      "message": "Thanks for the explanation. Do you have any suggestion on how to fix the tests?\n\nI don\u0027t quite understand the how it breaks (and I may be off track, it\u0027s just that the observer timing is the only change in behavior I\u0027ve spotted). The FakeSetLocalDescriptionObserver\u0027s callback just stores the result in it\u0027s `error_` member, with no recursive peerconnection calls. And not used until the EXPECT_TRUE_WAIT below. So not at all clear to me why exact timing of the observer call would matter.",
      "parentUuid": "113b05a5_9140d429",
      "range": {
        "startLine": 922,
        "startChar": 0,
        "endLine": 926,
        "endChar": 35
      },
      "revId": "e79fb389ec52e19dca3db3200602b548540347e7",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e74feaee_c89fd8f7",
        "filename": "pc/test/integration_test_helpers.h",
        "patchSetId": 5
      },
      "lineNbr": 926,
      "author": {
        "id": 5142
      },
      "writtenOn": "2022-05-02T15:43:57Z",
      "side": 1,
      "message": "Could there be a difference with the timing of ICE candidates?\n\nICE candidates would cause OnIceCandidate() to fire, which might get added to the other peer connection with AddIceCandidate().\n\nThe old versus new API might change how time you have until you proceed to the next negotiation step? Maybe that would be the difference between creating an answer before or after ICE candidates had been added?\n\nWhat\u0027s an example of a failing test and how does it fail?",
      "parentUuid": "1464f831_010eaa31",
      "range": {
        "startLine": 922,
        "startChar": 0,
        "endLine": 926,
        "endChar": 35
      },
      "revId": "e79fb389ec52e19dca3db3200602b548540347e7",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "180646ff_1685a28f",
        "filename": "pc/test/integration_test_helpers.h",
        "patchSetId": 5
      },
      "lineNbr": 926,
      "author": {
        "id": 5234
      },
      "writtenOn": "2022-05-03T08:24:50Z",
      "side": 1,
      "message": "\u003e What\u0027s an example of a failing test and how does it fail?\n\nYou can see details in the linux_dbg run. When I test locally, the failing tests (in peerconnection_unittests) are:\n\nPeerConnectionDataChannelTest/PeerConnectionDataChannelTest.SctpContentAndTransportNameSetCorrectly/0\n PeerConnectionDataChannelTest/PeerConnectionDataChannelTest.SctpContentAndTransportNameSetCorrectly/1\n PeerConnectionDataChannelTest/PeerConnectionDataChannelTest.SctpPortPropagatedFromSdpToTransport/0\n PeerConnectionDataChannelTest/PeerConnectionDataChannelTest.SctpPortPropagatedFromSdpToTransport/1\n PeerConnectionIntegrationTest/PeerConnectionIntegrationTest.CallTransferredForCallee/0\n PeerConnectionIntegrationTest/PeerConnectionIntegrationTest.CallTransferredForCallee/1\n PeerConnectionIntegrationTest/PeerConnectionIntegrationTest.CallTransferredForCallee/2\n PeerConnectionIntegrationTest/PeerConnectionIntegrationTest.CallTransferredForCallee/3\n PeerConnectionIntegrationTest/PeerConnectionIntegrationTest.CallTransferredForCallee/4\n PeerConnectionIntegrationTest/PeerConnectionIntegrationTest.CallTransferredForCallee/5\n PeerConnectionSignalingTest/PeerConnectionSignalingTest.ParameterlessSetLocalDescriptionCloseBeforeCreatingOffer/0\n PeerConnectionSignalingTest/PeerConnectionSignalingTest.ParameterlessSetLocalDescriptionCloseBeforeCreatingOffer/1\n PeerConnectionSignalingTest/PeerConnectionSignalingTest.ParameterlessSetLocalDescriptionCloseWhileCreatingOffer/0\n PeerConnectionSignalingTest/PeerConnectionSignalingTest.ParameterlessSetLocalDescriptionCloseWhileCreatingOffer/1\n\nThe first of these fails like this:\n\n```\n(peer_connection.cc:1858): Changing IceConnectionState 0 \u003d\u003e 1\n../../pc/peer_connection_data_channel_unittest.cc:255: Failure\nExpected equality of these values:\n  audio_mid\n    Which is: \"audio\"\n  *caller-\u003esctp_transport_name()\n    Which is: \"data\"\nStack trace:\n  0x557008df1da2: webrtc::PeerConnectionDataChannelTest_SctpContentAndTransportNameSetCorrectly_Test::TestBody()\n```\n\nThe SctpPortPropagatedFromSdpToTransport/0 test fails with\n\n```\n(sdp_offer_answer.cc:2676): Session: 4061979071304822041 Old state: have-remote-offer New state: stable\n(basic_port_allocator.cc:406): Start getting ports with turn_port_prune_policy 0\n\n\n#\n# Fatal error in: ../../test/pc/sctp/fake_sctp_transport.h, line 49\n# last system error: 0\n# Check failed: remote_port_\n# *** SIGABRT received at time\u003d1651565594 on cpu 34 ***\nPC: @     0x7f00ab29a8a1  (unknown)  raise\n    @     0x55d6f4cb4bb7         64  absl::WriteFailureInfo()\n    @     0x55d6f4cb4867         64  absl::AbslFailureSignalHandler()\n    @     0x7f00ab6eb200  1136865344  (unknown)\n    @     0x55d6f4f13569        384  rtc::webrtc_checks_impl::FatalLog()\n    @     0x55d6f38c1cf0        112  FakeSctpTransport::remote_port()\n```\n\nThe PeerConnectionIntegrationTest.CallTransferredForCallee/0 test fails with\n\n```\n(rtp_sender_video.cc:726): Sent last RTP packet of the first video frame (pre-pacer)\n(video_send_stream_impl.cc:456): SignalEncoderActive, Encoder is active.\n../../pc/test/integration_test_helpers.h:1043: Failure\nValue of: pc()-\u003eAddIceCandidate(candidate.get())\n  Actual: false\nExpected: true\nStack trace:\n  0x558023b1787a: webrtc::PeerConnectionIntegrationWrapper::ReceiveIceMessage()\n  0x558023b34409: webrtc::PeerConnectionIntegrationWrapper::RelayIceMessageIfReceiverExists()\n  0x558023b26d63: webrtc::PeerConnectionIntegrationWrapper::SendIceMessage()\n  0x558023b16c0e: webrtc::PeerConnectionIntegrationWrapper::OnIceCandidate()\n  0x5580242c640f: webrtc::PeerConnection::OnIceCandidate()\n  0x5580242cc164: webrtc::PeerConnection::OnTransportControllerCandidatesGathered()\n  0x5580242d784e: webrtc::PeerConnection::InitializeTransportController_n()::$_13::operator()()::{lambda()#1}::operator()()\n  0x5580242d761f: webrtc::webrtc_new_closure_impl::SafetyClosureTask\u003c\u003e::Run()\n```\n\nFinally, the PeerConnectionSignalingTest.ParameterlessSetLocalDescriptionCloseBeforeCreatingOffer/0 fails with\n\n```\n(usage_pattern.cc:24): Usage signature is 1048\n(peer_connection.cc:1771): Blocking Close: total\u003d7 (actual\u003d0, could\u003d7)\n../../pc/peer_connection_signaling_unittest.cc:842: Failure\nValue of: observer-\u003ecalled()\n  Actual: true\nExpected: false\nStack trace:\n  0x55801dc4cd82: webrtc::PeerConnectionSignalingTest_ParameterlessSetLocalDescriptionCloseBeforeCreatingOffer_Test::TestBody()\n```\n\nThat seems directly related to observer call timing, and appears easy to fix (will upload new patch set in a moment).",
      "parentUuid": "e74feaee_c89fd8f7",
      "range": {
        "startLine": 922,
        "startChar": 0,
        "endLine": 926,
        "endChar": 35
      },
      "revId": "e79fb389ec52e19dca3db3200602b548540347e7",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "17196813_f27c4fd3",
        "filename": "pc/test/integration_test_helpers.h",
        "patchSetId": 5
      },
      "lineNbr": 926,
      "author": {
        "id": 5142
      },
      "writtenOn": "2022-05-03T09:40:48Z",
      "side": 1,
      "message": "Hmm.. Still not sure because we do EXPECT_EQ_WAIT in-between most operations, but we would certainly wait a little less now.\n\nBut if you printf at CreateOffer begin+end, CreateAnswer begin+end, SetLocalDescription begin+end, SetRemoteDescription begin+end and AddIceCandidate begin+end with the old and new observer do you see any difference in order? Maybe something is different with the timing",
      "parentUuid": "180646ff_1685a28f",
      "range": {
        "startLine": 922,
        "startChar": 0,
        "endLine": 926,
        "endChar": 35
      },
      "revId": "e79fb389ec52e19dca3db3200602b548540347e7",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cf99362c_2cd93624",
        "filename": "pc/test/integration_test_helpers.h",
        "patchSetId": 5
      },
      "lineNbr": 926,
      "author": {
        "id": 5234
      },
      "writtenOn": "2022-05-04T12:33:53Z",
      "side": 1,
      "message": "I can\u0027t see any difference in order of those calls. However, I have a theory regarding this failure:\n```\nExpected equality of these values:\n  audio_mid\n    Which is: \"audio\"\n  *caller-\u003esctp_transport_name()\n    Which is: \"data\"\n```\n\nThe method PeerConnection::sctp_transport_name() reads the member `sctp_transport_name_s_`. This is set in two places, PeerConnection::SetupDataChannelTransport_n and PeerConnection::OnTransportChanged.\n\nIn both cases, it gets the value from dtls_transport_, and posts a task to the signaling thread to update the `sctp_transport_name_s_` member. (There\u0027s one subtle difference, though, one call is to dtls_transport-\u003einternal()-\u003etransport_name(), the other to dtls_transport-\u003etransport_name()).\n\nAnyway, I suspect that with the old api, we post the observer call to the signaling thread and wait for it to complete, and that has the side effect that the task to set `sctp_transport_name_s_` gets to run in the mean time. While with the new api, we don\u0027t wait, and hence get the old value of `sctp_transport_name_s_`.\n\nI don\u0027t know if value of sctp_transport_name() is supposed to be synced with anything else. I\u0027ll see if updating the test to wait for the proper value to appears works.",
      "parentUuid": "17196813_f27c4fd3",
      "range": {
        "startLine": 922,
        "startChar": 0,
        "endLine": 926,
        "endChar": 35
      },
      "revId": "e79fb389ec52e19dca3db3200602b548540347e7",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "797fcf67_be54c36b",
        "filename": "pc/test/integration_test_helpers.h",
        "patchSetId": 5
      },
      "lineNbr": 926,
      "author": {
        "id": 5142
      },
      "writtenOn": "2022-05-04T14:45:29Z",
      "side": 1,
      "message": "Interesting... I know that during negotiation, we could have multiple transports between offer and answer as a fallback plan to \"what if the answerer does not support BUNDLE\" (BUNDLE \u003d use same transport for all), so initially we can have multiple transports, but by the time the answer is set we (and BUNDLE accepted) we would throw away all the other transports and only use a single transport for everything.\n\nMaybe we update transport states \"synchronously\" (\u003d by the time the observer is called) but the SCTP transport name gets updated \"asynchronously\" (\u003d in a PostTask), meaning we\u0027re looking at old information even though the negotiation completed.\n\nSounds like an existing bug if SCTP transport name is not up-to-date when the SLD/SRD call is completed. In my opinion all states should be up-to-date.\n\nIf this theory is correct, we could do EXPECT_EQ_WAIT like you suggested with a TODO referencing a crbug to make sure the transport name gets updated earlier?",
      "parentUuid": "cf99362c_2cd93624",
      "range": {
        "startLine": 922,
        "startChar": 0,
        "endLine": 926,
        "endChar": 35
      },
      "revId": "e79fb389ec52e19dca3db3200602b548540347e7",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "63091718_feb8a7e1",
        "filename": "pc/test/integration_test_helpers.h",
        "patchSetId": 5
      },
      "lineNbr": 926,
      "author": {
        "id": 5234
      },
      "writtenOn": "2022-05-04T15:06:46Z",
      "side": 1,
      "message": "For the remaining failures, had a look at order for  PeerConnectionIntegrationTest.CallTransferredForCallee/0\n\nBefore changes, the order is\n\n  CreateOffer\n  SetLocalDescription\n  SetRemoteDescription\n  AddIceCandidate (twice)\n  CreateAnswer\n\n  SetLocalDescription\n  SetRemoteDescription\n  AddIceCandidate\n  CreateOffer\n  \nAfter the changes, I get instead\n\n  CreateOffer\n  SetLocalDescription\n  SetRemoteDescription\n  CreateAnswer\n  AddIceCandidate (twice)\n  \n  SetLocalDescription\n  SetRemoteDescription\n  CreateOffer\n  AddIceCandidate\n  \nThis could be explained if CreateAnswer and CreateOffer is called in response to the call to the SetRemoteDescriptionObserver, but not sure if that makes sense?\n\nFor this third AddIceCandidate call, I get a failed expectation. Log excerpt (the XXX lines is my extra debug logs):\n\n```\n(sdp_offer_answer.cc:1339): XXX begin CreateOffer\n(sdp_offer_answer.cc:2233): XXX DoCreateOffer\n(sdp_offer_answer.cc:1362): XXX end CreateOffer\n(peer_connection.cc:1858): Changing IceConnectionState 0 \u003d\u003e 1\n(peer_connection.cc:1877): Changing standardized IceConnectionState 0 \u003d\u003e 1\n(integration_test_helpers.h:1102): Callee: OnIceCandidate\n(integration_test_helpers.h:1040): New Peer: ReceiveIceMessage\n(sdp_offer_answer.cc:2476): XXX begin AddIceCandidate\n(sdp_offer_answer.cc:2496): AddIceCandidate: ICE candidates can\u0027t be added without any remote session description.\n(sdp_offer_answer.cc:2481): XXX end AddIceCandidate\n(probe_controller.cc:280): Measured bitrate: 301000 Minimum to probe further: 1260000\n../../pc/test/integration_test_helpers.h:1043: Failure\nValue of: pc()-\u003eAddIceCandidate(candidate.get())\n  Actual: false\nExpected: true\nStack trace:\n  0x55f9a4971bfa: webrtc::PeerConnectionIntegrationWrapper::ReceiveIceMessage()\n  0x55f9a498e789: webrtc::PeerConnectionIntegrationWrapper::RelayIceMessageIfReceiverExists()\n  0x55f9a49810e3: webrtc::PeerConnectionIntegrationWrapper::SendIceMessage()\n  0x55f9a4970f8e: webrtc::PeerConnectionIntegrationWrapper::OnIceCandidate()\n  0x55f9a5120a5f: webrtc::PeerConnection::OnIceCandidate()\n  0x55f9a51267b4: webrtc::PeerConnection::OnTransportControllerCandidatesGathered()\n  0x55f9a5131e9e: webrtc::PeerConnection::InitializeTransportController_n()::$_13::operator()()::{lambda()#1}::operator()()\n```\n\nThe code expects `current_remote_description_` to be non-null here. The member is updated in two places, ApplyLocalDescription, and ReplaceRemoteDescription. Not sure what\u0027s the expected code path in this test.",
      "parentUuid": "cf99362c_2cd93624",
      "range": {
        "startLine": 922,
        "startChar": 0,
        "endLine": 926,
        "endChar": 35
      },
      "revId": "e79fb389ec52e19dca3db3200602b548540347e7",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7ba4e22c_8b26d8f7",
        "filename": "pc/test/integration_test_helpers.h",
        "patchSetId": 5
      },
      "lineNbr": 926,
      "author": {
        "id": 5142
      },
      "writtenOn": "2022-05-05T05:50:02Z",
      "side": 1,
      "message": "\u003e This could be explained if CreateAnswer and CreateOffer is called in response to the call to the SetRemoteDescriptionObserver, but not sure if that makes sense?\n\nPeerConnectionWrapper does wait for observer-\u003ecalled() to be true so its SetRemoteDescription does unblock in response to the observer being called:\nhttps://source.chromium.org/chromium/chromium/src/+/main:third_party/webrtc/pc/peer_connection_wrapper.cc;l\u003d183;drc\u003dafb246b5a949d7bf24dd93c3c3900bbebd407224\n\nAnd PeerConnectionIntegrationWrapper which called SetRemoteDescription does do CreateAnswer in response to this:\nhttps://source.chromium.org/chromium/chromium/src/+/main:third_party/webrtc/pc/test/integration_test_helpers.h;l\u003d883;drc\u003dafb246b5a949d7bf24dd93c3c3900bbebd407224\n\n\u003e For this third AddIceCandidate call, I get a failed expectation.\n\u003e [...]\n\u003e The code expects `current_remote_description_` to be non-null here.\n\nThis I don\u0027t get. Even when the timing is different, AddIceCandidate appears to happen *after* SetRemoteDescription, so remote_description() should be non-null for both peer connections:\nhttps://source.chromium.org/chromium/chromium/src/+/main:third_party/webrtc/pc/sdp_offer_answer.cc;l\u003d2648;drc\u003de813b3c6b110bce715d55f4ce12746e2c43aedb9\n\nHang on, there\u0027s actually two versions of AddIceCandidate:\nhttps://source.chromium.org/chromium/chromium/src/+/main:third_party/webrtc/api/peer_connection_interface.h;l\u003d1127;drc\u003d6c7f98472e8c629ace8ab60eb8ea50b615856902\n\nThe one that returns a bool does NOT make use of the Operations Chain, meaning it does not wait for pending SRD calls to complete before executing. This is the one the test uses. The one that returns void and takes a callback DOES make use of the Operations Chain, i.e. it makes sure any previous SRD calls would have completed before executing the ICE candidate adding.\n\nThis could make a difference, but only the peer connection where AddIceCandidate is called has not completed one of its pending operations yet. But if you remote_description() is still null, perhaps the operation is still pending? What do the logs say?\n\nDoes the test pass if the callback-based AddIceCandidate() is called instead? We should deprecate the non-callback based one I realize...",
      "parentUuid": "63091718_feb8a7e1",
      "range": {
        "startLine": 922,
        "startChar": 0,
        "endLine": 926,
        "endChar": 35
      },
      "revId": "e79fb389ec52e19dca3db3200602b548540347e7",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e0ea620c_59c218cb",
        "filename": "pc/test/integration_test_helpers.h",
        "patchSetId": 5
      },
      "lineNbr": 926,
      "author": {
        "id": 5142
      },
      "writtenOn": "2022-05-05T05:55:31Z",
      "side": 1,
      "message": "Something like this?\n\n  void ReceiveIceMessage(const std::string\u0026 sdp_mid,\n                         int sdp_mline_index,\n                         const std::string\u0026 msg) override {\n    RTC_LOG(LS_INFO) \u003c\u003c debug_name_ \u003c\u003c \": ReceiveIceMessage\";\n    std::unique_ptr\u003cwebrtc::IceCandidateInterface\u003e candidate(\n        webrtc::CreateIceCandidate(sdp_mid, sdp_mline_index, msg, nullptr));\n    absl::optional\u003cRTCError\u003e result;\n    pc()-\u003eAddIceCandidate(candidate.get(), [\u0026result](RTCError r) {\n      result \u003d r;\n    });\n    EXPECT_TRUE_WAIT(result.has_value(), kDefaultTimeout);\n    EXPECT_TRUE(result.value().ok());\n  }\n\nhttps://source.chromium.org/chromium/chromium/src/+/main:third_party/webrtc/pc/test/integration_test_helpers.h;l\u003d1037;drc\u003dafb246b5a949d7bf24dd93c3c3900bbebd407224",
      "parentUuid": "7ba4e22c_8b26d8f7",
      "range": {
        "startLine": 922,
        "startChar": 0,
        "endLine": 926,
        "endChar": 35
      },
      "revId": "e79fb389ec52e19dca3db3200602b548540347e7",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a64addf9_58fbb691",
        "filename": "pc/test/integration_test_helpers.h",
        "patchSetId": 5
      },
      "lineNbr": 926,
      "author": {
        "id": 5142
      },
      "writtenOn": "2022-05-05T05:55:54Z",
      "side": 1,
      "message": "std::move(candidate)",
      "parentUuid": "e0ea620c_59c218cb",
      "range": {
        "startLine": 922,
        "startChar": 0,
        "endLine": 926,
        "endChar": 35
      },
      "revId": "e79fb389ec52e19dca3db3200602b548540347e7",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    }
  ]
}