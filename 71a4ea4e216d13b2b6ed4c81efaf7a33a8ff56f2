{
  "comments": [
    {
      "key": {
        "uuid": "f76aad68_15fe4b8a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 5053
      },
      "writtenOn": "2020-08-21T00:59:05Z",
      "side": 1,
      "message": "Can you clarify how the conflict occurs? From what I can gather it\u0027s something like this:\n\n1. Set a remote description with a video m\u003d section with no ssrcs\n2. Start receiving packets with SSRC X\n3. Set a new remote description with two video m\u003d sections, with SSRCs Y and X respectively\n4. Attempt is made to create new receive stream for X, but that doesn\u0027t work because one already exists.\n\nWhat I don\u0027t understand is: Since the m\u003d sections (and their corresponding VideoChannels/WebrtcVideoEngines) are processed in order, shouldn\u0027t the default receive stream already have been destroyed by the time the actual receive stream is created? \n\nAs for the fix... I think it could be made even more general; instead of removing specific SSRCs, it could simply remove *all* unsignaled streams as long as there\u0027s more than one m\u003d section with the same media type.\n\nBut it seems like this is vulnerable to a race condition currently. What\u0027s stopping the default stream from being re-created right after it\u0027s been destroyed, when control returns to the signaling thread? Something needs to put the WebrtcVideoEngine in a \"don\u0027t create more default streams\" state.\n\nAlso, as an aside, the way I\u0027d hoped/imagined this would work is that the default stream would call RtpDemuxer::AddSink with criteria that only included payload types (meaning \"all video packets go to this sink\"). So if AddSink is called later with an SSRC, the RtpDemuxerCriteria criteria would not conflict, instead the SSRC criteria would just take precedence over the payload type criteria. And that *is* what happens with the RtpDemuxer at the BaseChannel level, but I see we\u0027re still in an odd place where there are two RtpDemuxer instances.",
      "revId": "71a4ea4e216d13b2b6ed4c81efaf7a33a8ff56f2",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9e942b90_93a5dc4c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 5023
      },
      "writtenOn": "2020-08-21T06:41:38Z",
      "side": 1,
      "message": "\u003e What I don\u0027t understand is: Since the m\u003d sections (and their corresponding VideoChannels/WebrtcVideoEngines) are processed in order, shouldn\u0027t the default receive stream already have been destroyed by the time the actual receive stream is created?\nYes, that should be the case. But I believe there is still a race, due to the per-channel thread hops that occur during the Set{Local,Remote}Content calls: during the window between the time when the old default receive stream is destroyed and the time the new video channel has been created, a stray RTP packet could be handled that creates yet another default receive stream. This latter default receive stream is the problem (due to the permanent collision in the Call-level RtpDemuxer), that I believe is handled by this patch.",
      "parentUuid": "f76aad68_15fe4b8a",
      "revId": "71a4ea4e216d13b2b6ed4c81efaf7a33a8ff56f2",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "54655a2b_b3833f01",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 5524
      },
      "writtenOn": "2020-08-21T15:22:16Z",
      "side": 1,
      "message": "Testing is complex since the peer connection classes don\u0027t really support the RTP behavior that triggers the conflict.\n\nIn the test I added here, we first complete a negotiation with only a single track (m\u003d section).\nI then simulate adding a second track, but inject an early media packet which triggers a default receive stream to be added to the first Channel.\nI don\u0027t know this code well, but it seems that the SetRemoteDescription() does not remove the default stream. The SDP for that Channel is not changed?\nThen, the second Channel is added and here the RtpDemuxer refuses to add the sink since it would result in a conflict.\nWe\u0027re not relying on thread-level raciness, it\u0027s sufficient that the media packet arrives before renegotation starts, which seems to be fairly easy to trigger.\n\nAs a side note, both default stream and the new signaled one will be registered with an SSRC here, because that can be parsed from the default RTP header. It will then conflict with the other sink which also uses this ssrc, but also adds mids etc.\n\nReading your comments I think my fix still has a race, a packet could potentially arrive in between calling MaybeDeregister.. and SetRemoteDescription(), re-adding a default stream. This should however be far less likely to happen the the packet/signaling race I describe above.\n\nMaybe addressing that could be a follow-up.\n\nI also don\u0027t fully understand the comment that we can remove all default streams if we add a new signaled one. In which cases are default-stream not allowed to exist according the spec?",
      "parentUuid": "9e942b90_93a5dc4c",
      "revId": "71a4ea4e216d13b2b6ed4c81efaf7a33a8ff56f2",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2721172e_9a53b215",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 5053
      },
      "writtenOn": "2020-08-21T22:19:01Z",
      "side": 1,
      "message": "\u003e Due to the per-channel thread hops that occur during the Set{Local,Remote}Content calls: during the window between the time when the old default receive stream is destroyed and the time the new video channel has been created, a stray RTP packet could be handled that creates yet another default receive stream\n\nHow does this patch prevent that race, though? We\u0027re talking about a packet received between channel1-\u003eSetRemoteContent() and channel2-\u003eSetRemoteContent(), right? But MaybeDeregisterUnsignaledRecvStream happens before both of those calls.\n\n\u003e I don\u0027t know this code well, but it seems that the SetRemoteDescription() does not remove the default stream. The SDP for that Channel is not changed?\n\nI\u0027d consider that a bug... see below.\n\n\u003e I also don\u0027t fully understand the comment that we can remove all default streams if we add a new signaled one. In which cases are default-stream not allowed to exist according the spec?\n\nI don\u0027t know if this is covered in any specification, but my understanding is that default streams should not exist if there are multiple m\u003d sections of the same media type. If we only have one video section, we can safely assume any video packets are associated with it. But as soon as we have two video sections, we need an additional field in order to demux (SSRC/MID/RSID). So I\u0027d either add an \"enable_default_streams\" argument to SetRemoteContent, or change \"MaybeDeregisterUnsignaledRecvStream\" to \"DisableUnsignaledRecvStreams\".\n\nI might go a step further and say default streams should not be created if the m\u003d section has explicitly signaled SSRCs/MID. I\u0027m a little surprised that in your test, the first media channel creates a receive stream for SSRC 2 even though it already has one for SSRC 1. That change would have a higher probability of breaking something though.",
      "parentUuid": "54655a2b_b3833f01",
      "revId": "71a4ea4e216d13b2b6ed4c81efaf7a33a8ff56f2",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "80249c12_dd3821f5",
        "filename": "pc/peer_connection.cc",
        "patchSetId": 5
      },
      "lineNbr": 5899,
      "author": {
        "id": 5053
      },
      "writtenOn": "2020-08-21T00:59:05Z",
      "side": 1,
      "message": "Could link to the bug for more context. (https://bugs.chromium.org/p/webrtc/issues/detail?id\u003d11477)",
      "revId": "71a4ea4e216d13b2b6ed4c81efaf7a33a8ff56f2",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "81099eb2_8f6e7732",
        "filename": "pc/peer_connection.cc",
        "patchSetId": 5
      },
      "lineNbr": 5899,
      "author": {
        "id": 5524
      },
      "writtenOn": "2020-08-21T15:22:16Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "80249c12_dd3821f5",
      "revId": "71a4ea4e216d13b2b6ed4c81efaf7a33a8ff56f2",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    }
  ]
}