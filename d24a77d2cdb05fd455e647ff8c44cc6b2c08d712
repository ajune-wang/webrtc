{
  "comments": [
    {
      "key": {
        "uuid": "6c425d7d_18053fea",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5087
      },
      "writtenOn": "2020-08-12T14:54:20Z",
      "side": 1,
      "message": "nisse@ can you stamp for system_wrappers?",
      "revId": "d24a77d2cdb05fd455e647ff8c44cc6b2c08d712",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c63fdc59_c072f8b5",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 9741
      },
      "writtenOn": "2020-08-13T12:59:30Z",
      "side": 1,
      "message": "Thanks for your very useful comments, Niels! \nHi Mirko, Im sorry I don\u0027t know to upload a new PS since it report \"Change https://webrtc-review.googlesource.com/176382 has been submitted, new uploads are not allowed\", so can you please help to address Niels\u0027s comments, or is there any docs to learn how to reland a patch...",
      "revId": "d24a77d2cdb05fd455e647ff8c44cc6b2c08d712",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d572ce32_5df241a7",
        "filename": "system_wrappers/source/cpu_features.cc",
        "patchSetId": 1
      },
      "lineNbr": 30,
      "author": {
        "id": 5234
      },
      "writtenOn": "2020-08-13T08:08:43Z",
      "side": 1,
      "message": "Add static. And if you really want the WEBRTC_ENABLE_AVX2 define, it should be used around this function too.",
      "range": {
        "startLine": 30,
        "startChar": 0,
        "endLine": 30,
        "endChar": 29
      },
      "revId": "d24a77d2cdb05fd455e647ff8c44cc6b2c08d712",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7084b225_4a4b25a9",
        "filename": "system_wrappers/source/cpu_features.cc",
        "patchSetId": 1
      },
      "lineNbr": 84,
      "author": {
        "id": 5234
      },
      "writtenOn": "2020-08-13T08:08:43Z",
      "side": 1,
      "message": "Not sure if this #if is needed.",
      "range": {
        "startLine": 84,
        "startChar": 0,
        "endLine": 84,
        "endChar": 31
      },
      "revId": "d24a77d2cdb05fd455e647ff8c44cc6b2c08d712",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b868b482_5a7c5ae9",
        "filename": "system_wrappers/source/cpu_features.cc",
        "patchSetId": 1
      },
      "lineNbr": 84,
      "author": {
        "id": 9741
      },
      "writtenOn": "2020-08-13T12:17:56Z",
      "side": 1,
      "message": "According to our discussion, we don\u0027t want to enable the avx2 support as default until the module unittest failure is fixed! So this is needed.",
      "parentUuid": "7084b225_4a4b25a9",
      "range": {
        "startLine": 84,
        "startChar": 0,
        "endLine": 84,
        "endChar": 31
      },
      "revId": "d24a77d2cdb05fd455e647ff8c44cc6b2c08d712",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4a7a9f93_fd8c9145",
        "filename": "system_wrappers/source/cpu_features.cc",
        "patchSetId": 1
      },
      "lineNbr": 84,
      "author": {
        "id": 5234
      },
      "writtenOn": "2020-08-13T12:49:55Z",
      "side": 1,
      "message": "I\u0027m thinking that disabling avx2 code should be done by the code calling this function. If AVX2 is disabled as compile time, there should be no place where this function is called with kAVX2.\nLeaving just the detection code in should be harmless.\n\nI don\u0027t have a strong opinion here, but the fewer #if:s we have, the better.\n\nBut regardless, we should have the same guards here and around the xgetbv function, for consistency.",
      "parentUuid": "b868b482_5a7c5ae9",
      "range": {
        "startLine": 84,
        "startChar": 0,
        "endLine": 84,
        "endChar": 31
      },
      "revId": "d24a77d2cdb05fd455e647ff8c44cc6b2c08d712",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1d639350_ebc184a8",
        "filename": "system_wrappers/source/cpu_features.cc",
        "patchSetId": 1
      },
      "lineNbr": 87,
      "author": {
        "id": 5234
      },
      "writtenOn": "2020-08-13T08:08:43Z",
      "side": 1,
      "message": "I take it these checks ensures that the xgetbv instruction, used below, is available? The comments hint at that, but I think it could be clearer.",
      "range": {
        "startLine": 85,
        "startChar": 11,
        "endLine": 87,
        "endChar": 59
      },
      "revId": "d24a77d2cdb05fd455e647ff8c44cc6b2c08d712",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "25e82d04_be39a1c5",
        "filename": "system_wrappers/source/cpu_features.cc",
        "patchSetId": 1
      },
      "lineNbr": 87,
      "author": {
        "id": 9741
      },
      "writtenOn": "2020-08-13T09:26:06Z",
      "side": 1,
      "message": "Hi Niels, AVX instructions can be used when a)they are supported by the CPU, b) XSAVE is supported by the CPU and c) XSAVE is enabled by the kernel. See http://software.intel.com/en-us/blogs/2011/04/14/is-avx-enabled",
      "parentUuid": "1d639350_ebc184a8",
      "range": {
        "startLine": 85,
        "startChar": 11,
        "endLine": 87,
        "endChar": 59
      },
      "revId": "d24a77d2cdb05fd455e647ff8c44cc6b2c08d712",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "945d7a38_fead3258",
        "filename": "system_wrappers/source/cpu_features.cc",
        "patchSetId": 1
      },
      "lineNbr": 87,
      "author": {
        "id": 5234
      },
      "writtenOn": "2020-08-13T09:37:42Z",
      "side": 1,
      "message": "Thanks for the explanation. Please write out those three conditions in a comment above this code block. And then the xgetbv instruction is one of the AVX instructions (and used to check for AVX2)?",
      "parentUuid": "25e82d04_be39a1c5",
      "range": {
        "startLine": 85,
        "startChar": 11,
        "endLine": 87,
        "endChar": 59
      },
      "revId": "d24a77d2cdb05fd455e647ff8c44cc6b2c08d712",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "65642b2d_7c82875f",
        "filename": "system_wrappers/source/cpu_features.cc",
        "patchSetId": 1
      },
      "lineNbr": 87,
      "author": {
        "id": 9741
      },
      "writtenOn": "2020-08-13T12:04:46Z",
      "side": 1,
      "message": "The xgetbv instruction is used to check for avx support(check if XSAVE enabled by kernel) like the comments hint.",
      "parentUuid": "945d7a38_fead3258",
      "range": {
        "startLine": 85,
        "startChar": 11,
        "endLine": 87,
        "endChar": 59
      },
      "revId": "d24a77d2cdb05fd455e647ff8c44cc6b2c08d712",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1c8eb3f7_50a3837e",
        "filename": "system_wrappers/source/cpu_features.cc",
        "patchSetId": 1
      },
      "lineNbr": 89,
      "author": {
        "id": 5234
      },
      "writtenOn": "2020-08-13T09:37:42Z",
      "side": 1,
      "message": "It looks like we will use this value even if num_ids \u003c 7, so the contents is undefined? Is there a typo? On line 79 above cpu_info7[4] is initialized, but never used.",
      "range": {
        "startLine": 89,
        "startChar": 12,
        "endLine": 89,
        "endChar": 24
      },
      "revId": "d24a77d2cdb05fd455e647ff8c44cc6b2c08d712",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "100f96ee_6e83a100",
        "filename": "system_wrappers/source/cpu_features.cc",
        "patchSetId": 1
      },
      "lineNbr": 89,
      "author": {
        "id": 9741
      },
      "writtenOn": "2020-08-13T12:04:46Z",
      "side": 1,
      "message": "Yes, when the num_ids \u003c 7, this condition will not be met. It\u0027s not a typo. Actually, the below four condition is used to check avx support.\n           (cpu_info[2] \u0026 0x10000000) !\u003d 0 \u0026\u0026\n           (cpu_info[2] \u0026 0x04000000) !\u003d 0 /* XSAVE */ \u0026\u0026\n           (cpu_info[2] \u0026 0x08000000) !\u003d 0 /* OSXSAVE */ \u0026\u0026\n           (xgetbv(0) \u0026 0x00000006) \u003d\u003d 6 /* XSAVE enabled by kernel */.\nAnd the avx2 support needs (avx_support \u0026\u0026 (cpu_info7[1] \u0026 0x00000020) !\u003d 0;).",
      "parentUuid": "1c8eb3f7_50a3837e",
      "range": {
        "startLine": 89,
        "startChar": 12,
        "endLine": 89,
        "endChar": 24
      },
      "revId": "d24a77d2cdb05fd455e647ff8c44cc6b2c08d712",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0d362ff8_da1918f9",
        "filename": "system_wrappers/source/cpu_features.cc",
        "patchSetId": 1
      },
      "lineNbr": 89,
      "author": {
        "id": 5234
      },
      "writtenOn": "2020-08-13T12:49:55Z",
      "side": 1,
      "message": "I see now, I misread the initialization as an assignment.\n\nBut if result is known when num_ids \u003c 7 (i.e., if all cpus supporting avx2 always have num_ids \u003e\u003d 7), it could be simplified as\n\n  if (num_ids \u003c 7) {\n    return 0;\n  }\n  \n  __cpuid(cpu_info7, 7);\n  return ... cpu_info7[1] ...\n\nwith no other initialization of cpu_info7;",
      "parentUuid": "100f96ee_6e83a100",
      "range": {
        "startLine": 89,
        "startChar": 12,
        "endLine": 89,
        "endChar": 24
      },
      "revId": "d24a77d2cdb05fd455e647ff8c44cc6b2c08d712",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    }
  ]
}