{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "30467195_5c21f1dd",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 5116
      },
      "writtenOn": "2020-10-06T07:25:22Z",
      "side": 1,
      "message": "Minyue, can someone from your team have a look?",
      "revId": "38711439fdaf42612cf1a3647718990b75cdef0d",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a0e34f9e_96f120f6",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 14284
      },
      "writtenOn": "2020-10-12T19:05:44Z",
      "side": 1,
      "message": "Ping \u0026 add hbos",
      "revId": "38711439fdaf42612cf1a3647718990b75cdef0d",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "19b41c2f_3426e796",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 7015
      },
      "writtenOn": "2020-10-12T21:54:43Z",
      "side": 1,
      "message": "Thanks for the CL!\n\nI found it maybe a bit confusing to call this _sent packet count, while they count received packets.",
      "revId": "38711439fdaf42612cf1a3647718990b75cdef0d",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "35f4a89c_0c78e92e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 14284
      },
      "writtenOn": "2020-10-13T00:08:18Z",
      "side": 1,
      "message": "According to spec https://w3c.github.io/webrtc-stats/#dom-rtcinboundrtpstreamstats-nackcount , nack_count is for sent packets.\n\nThe code is a bit convoluted, let me try to explain the flow:\n\n1. audio/channel_receive.cc\n\nint32_t ChannelReceive::OnReceivedPayloadData(..\n  // Here we get missing packets that are candidates for NACK\n  std::vector\u003cuint16_t\u003e nack_list \u003d audio_coding_-\u003eGetNackList(round_trip_time);\n  if (!nack_list.empty()) {\n    ...\n    ResendPackets(\u0026(nack_list[0]), static_cast\u003cint\u003e(nack_list.size()));\n  }\n...\nint ChannelReceive::ResendPackets(const uint16_t* sequence_numbers,\n                                  int length) {\n  // NACKs are actually sent by RTCP module\n  return _rtpRtcpModule-\u003eSendNACK(sequence_numbers, length);\n}\n..\n// field:\nstd::unique_ptr\u003cRtpRtcp\u003e _rtpRtcpModule;\n\n2.modules/rtp_rtcp/source/rtp_rtcp_impl.cc:\n\nint32_t ModuleRtpRtcpImpl::SendNACK(const uint16_t* nack_list,\n                                    const uint16_t size) {\n...\nreturn rtcp_sender_.SendRTCP(GetFeedbackState(), kRtcpNack, nack_length,\n                               \u0026nack_list[start_id]);\n...\n// rtcp_sender_ is created in constructor\n\n3. modules/rtp_rtcp/source/rtcp_sender.cc:\n\n// this is called for SendRTCP with type kRtcpNack\nstd::unique_ptr\u003crtcp::RtcpPacket\u003e RTCPSender::BuildNACK(...\n{\n    packet_type_counter_.nack_requests \u003d nack_stats_.requests();\n    packet_type_counter_.unique_nack_requests \u003d nack_stats_.unique_requests();\n    ...\n}\n...\nint32_t RTCPSender::SendCompoundRTCP(..\n{\n   ...\n    // here is where callback is called\n    if (packet_type_counter_observer_ !\u003d nullptr) {\n      packet_type_counter_observer_-\u003eRtcpPacketTypesCounterUpdated(\n          remote_ssrc_, packet_type_counter_);\n    }\n}\n\n\npacket_type_counter_observer_ is called from both send and receive RTCP classes but for sender it is the SSRC while for receiver it is SSRC.",
      "parentUuid": "19b41c2f_3426e796",
      "revId": "38711439fdaf42612cf1a3647718990b75cdef0d",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8866f372_b75f9584",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 5142
      },
      "writtenOn": "2020-10-13T09:32:44Z",
      "side": 1,
      "message": "LGTM % nit",
      "revId": "38711439fdaf42612cf1a3647718990b75cdef0d",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c5afc6b9_288d5b10",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 14284
      },
      "writtenOn": "2020-10-13T23:11:22Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "35f4a89c_0c78e92e",
      "revId": "38711439fdaf42612cf1a3647718990b75cdef0d",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "896bc235_87578a94",
        "filename": "api/stats/rtcstats_objects.h",
        "patchSetId": 4
      },
      "lineNbr": 388,
      "author": {
        "id": 5142
      },
      "writtenOn": "2020-10-13T09:32:44Z",
      "side": 1,
      "message": "nit: If we\u0027re updating this comment, let\u0027s make it \"TODO(https://crbug.com/657856):\" rather than \"TODO(hbos)\". In-comment code should not track ownership of crbugs.",
      "revId": "38711439fdaf42612cf1a3647718990b75cdef0d",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "73c03b3f_c5580955",
        "filename": "api/stats/rtcstats_objects.h",
        "patchSetId": 4
      },
      "lineNbr": 388,
      "author": {
        "id": 14284
      },
      "writtenOn": "2020-10-13T23:11:22Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "896bc235_87578a94",
      "revId": "38711439fdaf42612cf1a3647718990b75cdef0d",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a203a350_74cabce8",
        "filename": "audio/channel_receive.cc",
        "patchSetId": 4
      },
      "lineNbr": 739,
      "author": {
        "id": 5142
      },
      "writtenOn": "2020-10-13T09:32:44Z",
      "side": 1,
      "message": "I\u0027m curious how the NACKs are sent, which transport, and do you need an outbound-rtp to carry the feedback or does this work in receiver stream scenarios?\n\nBut anyway, this CL just surfaces the result, so this is LGTM.",
      "revId": "38711439fdaf42612cf1a3647718990b75cdef0d",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fb0501f4_7c631add",
        "filename": "audio/channel_receive.h",
        "patchSetId": 4
      },
      "lineNbr": 67,
      "author": {
        "id": 7015
      },
      "writtenOn": "2020-10-12T21:54:43Z",
      "side": 1,
      "message": "nack_packets",
      "range": {
        "startLine": 67,
        "startChar": 11,
        "endLine": 67,
        "endChar": 22
      },
      "revId": "38711439fdaf42612cf1a3647718990b75cdef0d",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8911ffe3_0e4537d9",
        "filename": "audio/channel_receive.h",
        "patchSetId": 4
      },
      "lineNbr": 67,
      "author": {
        "id": 14284
      },
      "writtenOn": "2020-10-13T23:11:22Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "fb0501f4_7c631add",
      "range": {
        "startLine": 67,
        "startChar": 11,
        "endLine": 67,
        "endChar": 22
      },
      "revId": "38711439fdaf42612cf1a3647718990b75cdef0d",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e2f57204_fb29276e",
        "filename": "call/audio_receive_stream.h",
        "patchSetId": 4
      },
      "lineNbr": 45,
      "author": {
        "id": 7015
      },
      "writtenOn": "2020-10-12T21:54:43Z",
      "side": 1,
      "message": "sent or received?",
      "range": {
        "startLine": 45,
        "startChar": 13,
        "endLine": 45,
        "endChar": 30
      },
      "revId": "38711439fdaf42612cf1a3647718990b75cdef0d",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0b87c7ca_d16d802f",
        "filename": "call/audio_receive_stream.h",
        "patchSetId": 4
      },
      "lineNbr": 45,
      "author": {
        "id": 5142
      },
      "writtenOn": "2020-10-13T09:32:44Z",
      "side": 1,
      "message": "It\u0027s the \"total number of Negative ACKnowledgement (NACK) packets sent by this receiver. Calculated as defined in [RFC4585] section 6.2.1.\"\nWhich is https://tools.ietf.org/html/rfc4585#section-6.2.1\nI\u0027m not sure this says how to calculate them, but it talks about what a NACK is? Anyway it is the NACKs *sent* so the name sounds good to me.",
      "parentUuid": "e2f57204_fb29276e",
      "range": {
        "startLine": 45,
        "startChar": 13,
        "endLine": 45,
        "endChar": 30
      },
      "revId": "38711439fdaf42612cf1a3647718990b75cdef0d",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b4595902_3142c2cf",
        "filename": "call/audio_receive_stream.h",
        "patchSetId": 4
      },
      "lineNbr": 45,
      "author": {
        "id": 14284
      },
      "writtenOn": "2020-10-13T23:11:22Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0b87c7ca_d16d802f",
      "range": {
        "startLine": 45,
        "startChar": 13,
        "endLine": 45,
        "endChar": 30
      },
      "revId": "38711439fdaf42612cf1a3647718990b75cdef0d",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f2ea4e36_5047ee60",
        "filename": "call/audio_receive_stream.h",
        "patchSetId": 4
      },
      "lineNbr": 45,
      "author": {
        "id": 7015
      },
      "writtenOn": "2020-10-14T07:28:05Z",
      "side": 1,
      "message": "Thanks for the explanation! Yes, with the spec, the meaning is clear. But I feel the variable name isn\u0027t super clear. Would it be better to call it packets_nacked (similar to packets_rcvd or packets_lost)?",
      "parentUuid": "b4595902_3142c2cf",
      "range": {
        "startLine": 45,
        "startChar": 13,
        "endLine": 45,
        "endChar": 30
      },
      "revId": "38711439fdaf42612cf1a3647718990b75cdef0d",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ae30241d_71a452f6",
        "filename": "call/audio_receive_stream.h",
        "patchSetId": 4
      },
      "lineNbr": 45,
      "author": {
        "id": 14284
      },
      "writtenOn": "2020-10-14T16:07:12Z",
      "side": 1,
      "message": "I think that \"packets_nacked\" can be misinterpreted as number of packets that were not received and were negatively acknowledged (which is also a useful metric to add). But here I count the number of NACK packets, each NACK packet can have multiple sequence numbers.",
      "parentUuid": "f2ea4e36_5047ee60",
      "range": {
        "startLine": 45,
        "startChar": 13,
        "endLine": 45,
        "endChar": 30
      },
      "revId": "38711439fdaf42612cf1a3647718990b75cdef0d",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c1e0ce54_7d475ac2",
        "filename": "call/audio_receive_stream.h",
        "patchSetId": 4
      },
      "lineNbr": 45,
      "author": {
        "id": 5142
      },
      "writtenOn": "2020-10-14T19:04:53Z",
      "side": 1,
      "message": "You can always add a link to the spec in a comment if it\u0027s unclear:\n// https://w3c.github.io/webrtc-stats/#dom-rtcinboundrtpstreamstats-nackcount",
      "parentUuid": "ae30241d_71a452f6",
      "range": {
        "startLine": 45,
        "startChar": 13,
        "endLine": 45,
        "endChar": 30
      },
      "revId": "38711439fdaf42612cf1a3647718990b75cdef0d",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "15435ddc_6c51b7e2",
        "filename": "call/audio_receive_stream.h",
        "patchSetId": 4
      },
      "lineNbr": 45,
      "author": {
        "id": 14284
      },
      "writtenOn": "2020-10-14T19:16:30Z",
      "side": 1,
      "message": "Added a comment. Another reason to have \"nack_packets_sent\" is it to be similar to fec counters above: \"fec_packets_received\" and \"fec_packets_discarded\"",
      "parentUuid": "c1e0ce54_7d475ac2",
      "range": {
        "startLine": 45,
        "startChar": 13,
        "endLine": 45,
        "endChar": 30
      },
      "revId": "38711439fdaf42612cf1a3647718990b75cdef0d",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4d927897_9e5f8af2",
        "filename": "call/audio_receive_stream.h",
        "patchSetId": 4
      },
      "lineNbr": 45,
      "author": {
        "id": 7015
      },
      "writtenOn": "2020-10-14T21:00:12Z",
      "side": 1,
      "message": "Okay, it turned out that my understanding was still wrong, even after reading the spec. So are we here counting \"generic NACK messages\" (https://tools.ietf.org/html/rfc4585#section-6.2.1)? Then it might be clearer to call it nack_massages_sent?",
      "parentUuid": "15435ddc_6c51b7e2",
      "range": {
        "startLine": 45,
        "startChar": 13,
        "endLine": 45,
        "endChar": 30
      },
      "revId": "38711439fdaf42612cf1a3647718990b75cdef0d",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "463c9c86_94ee6312",
        "filename": "call/audio_receive_stream.h",
        "patchSetId": 4
      },
      "lineNbr": 45,
      "author": {
        "id": 14284
      },
      "writtenOn": "2020-10-14T22:09:54Z",
      "side": 1,
      "message": "Yes, technically nack \"messages\" is more correct since multiple FB messages can be combined into a compound RTCP packet:\n\"RTCP FB messages are just another RTCP packet type (see Section 4).\n   Therefore, multiple FB messages MAY be combined in a single compound\n   RTCP packet and they MAY also be sent combined with other RTCP\n   packets.\"\n\nBut even in the existing code in rtcp_sender.cc, it\u0027s called nack_packets:\n++packet_type_counter_.nack_packets;\n\nStill let me rename the field.",
      "parentUuid": "4d927897_9e5f8af2",
      "range": {
        "startLine": 45,
        "startChar": 13,
        "endLine": 45,
        "endChar": 30
      },
      "revId": "38711439fdaf42612cf1a3647718990b75cdef0d",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ecf5fe82_099fc49a",
        "filename": "call/audio_receive_stream.h",
        "patchSetId": 4
      },
      "lineNbr": 45,
      "author": {
        "id": 14284
      },
      "writtenOn": "2020-10-14T22:50:14Z",
      "side": 1,
      "message": "I\u0027m actually not sure, in rtcp_statistics.h they are defined as:\n\nuint32_t nack_packets;          // Number of RTCP NACK packets.\nuint32_t nack_requests;         // Number of NACKed RTP packets.\nuint32_t unique_nack_requests;  // Number of unique NACKed RTP packets. \n\nYour call, rename to messages or not?",
      "parentUuid": "463c9c86_94ee6312",
      "range": {
        "startLine": 45,
        "startChar": 13,
        "endLine": 45,
        "endChar": 30
      },
      "revId": "38711439fdaf42612cf1a3647718990b75cdef0d",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8bd6c902_5a58f1d2",
        "filename": "call/audio_receive_stream.h",
        "patchSetId": 4
      },
      "lineNbr": 45,
      "author": {
        "id": 7015
      },
      "writtenOn": "2020-10-15T07:04:21Z",
      "side": 1,
      "message": "I\u0027d let hbos@ to suggest",
      "parentUuid": "ecf5fe82_099fc49a",
      "range": {
        "startLine": 45,
        "startChar": 13,
        "endLine": 45,
        "endChar": 30
      },
      "revId": "38711439fdaf42612cf1a3647718990b75cdef0d",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    }
  ]
}