{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "bbacfa0a_fecbad03",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 16458
      },
      "writtenOn": "2022-02-10T16:54:06Z",
      "side": 1,
      "message": "PTAL?",
      "revId": "993e689fe311a078dedc1ce3677ce4248640f35c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e779bcaa_4b565b0a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 5634
      },
      "writtenOn": "2022-02-10T21:21:23Z",
      "side": 1,
      "message": "Color me naive, but what\u0027s the advantage of PostDelayedTaskAt() over PostDelayedHighPrecision?\nMost of the code has no reason to reach for Clock::Now() for any other reason; why do we need to read the realtime clock an extra time when all we want to do is to have a precise wakeup?\n\nI assume there\u0027s a design document discussing this somewhere; please add a pointer to the description.",
      "revId": "993e689fe311a078dedc1ce3677ce4248640f35c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6f959f7a_25794627",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 5142
      },
      "writtenOn": "2022-02-11T08:49:03Z",
      "side": 1,
      "message": "Adding Evan and Markus for their thoughts.",
      "revId": "993e689fe311a078dedc1ce3677ce4248640f35c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "28e2bdb4_61f84be6",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 5142
      },
      "writtenOn": "2022-02-11T08:49:03Z",
      "side": 1,
      "message": "I think we want PostDelayedTaskAt(), but I definitely see the point that the current consumers of PostDelayedHighPrecisionTask() does not care about current clock time.\n\nPostDelayedTaskAt() is a more powerful API for coalescing tasks since it allows multiple tasks to happen at the same time and is now available in Chrome. We are currently refactoring the MetronomeTaskQueue to make use of Chrome\u0027s PostDelayedTaskAt() which gets rid of a ton of complexity and a metronome thread. I think having access to it inside WebRTC could improve SyncDecoding and may be useful for future \"reduce idle wake up\" projects.\n\nBut hw about we don\u0027t remove PostDelayedHighPrecisionTask() since today\u0027s consumers don\u0027t care about clock time? I think the goal should be to make that a non-virtual helper method that calls PostDelayedTaskAt() and to make PDTA the virtual method.\n\nThis would make this CL a lot smaller too since you don\u0027t have to update all calling places, just the webrtc::TaskQueueBase interface.",
      "parentUuid": "e779bcaa_4b565b0a",
      "revId": "993e689fe311a078dedc1ce3677ce4248640f35c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7a636f7c_817395ed",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 9515
      },
      "writtenOn": "2022-02-11T11:17:56Z",
      "side": 1,
      "message": "Hi Etienne, thanks for the patch!\n\nI think it might be too early for this kind of change right now and it\u0027s more dangerous than overriding HighPrecision in the wrappers since webrtc consumers are switched from reltime to abstime. Additionally I think this kind of change requires a design doc as there\u0027s a fair degree of ambiguity (abstime inception before Timestamp migration? API having the right fidelity?) and there are many interested parties in WebRTC.\n\nLet\u0027s revisit a little later, wdyt?",
      "revId": "993e689fe311a078dedc1ce3677ce4248640f35c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "49294860_d1267d5e",
        "filename": "api/task_queue/task_queue_base.h",
        "patchSetId": 7
      },
      "lineNbr": 106,
      "author": {
        "id": 5142
      },
      "writtenOn": "2022-02-11T08:55:11Z",
      "side": 1,
      "message": "For new APIs I would also be tempted to make use of webrtc::Timestamp. We previously decided that changing the type of the delay to webrtc::TimeDelta would introduce risk of rounding errors and we kept uint32_t for delays. But if we keep the old APIs as-is, and PostDelayedTaskAt() is a completely new API, then any callers of it would necessarily be new code and not regressing existing stuff, so to me it would seem perfectly safe to use webrtc::Timestamp here.\n\nMarkus what do you think?",
      "revId": "993e689fe311a078dedc1ce3677ce4248640f35c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7c312527_2ae9e0c9",
        "filename": "api/task_queue/task_queue_base.h",
        "patchSetId": 7
      },
      "lineNbr": 106,
      "author": {
        "id": 5142
      },
      "writtenOn": "2022-02-11T09:03:08Z",
      "side": 1,
      "message": "Actually I think it is important that PostDelayedTaskAt() uses a timestamp that has the same precision as base::TimeTicks so that WebRTC tasks can be coalesced both in third_party/webrtc and in blink",
      "parentUuid": "49294860_d1267d5e",
      "revId": "993e689fe311a078dedc1ce3677ce4248640f35c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5d27573a_c59d53b9",
        "filename": "api/task_queue/task_queue_base.h",
        "patchSetId": 7
      },
      "lineNbr": 106,
      "author": {
        "id": 18444
      },
      "writtenOn": "2022-02-11T09:19:50Z",
      "side": 1,
      "message": "Using webrtc::Timestamp makes sense to me. It is cleaner than having to do `.ms()`, and the accuracy of the timestamp can be rounded in the conversion using `.ms()` in Chrome.",
      "parentUuid": "7c312527_2ae9e0c9",
      "revId": "993e689fe311a078dedc1ce3677ce4248640f35c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "23195d9a_32a2077f",
        "filename": "api/task_queue/task_queue_base.h",
        "patchSetId": 7
      },
      "lineNbr": 106,
      "author": {
        "id": 9515
      },
      "writtenOn": "2022-02-11T11:17:56Z",
      "side": 1,
      "message": "I want to keep webrtc::Timestamp out of this and treat separately, it\u0027s a dangerous switch that has caused problems in the past.",
      "parentUuid": "5d27573a_c59d53b9",
      "revId": "993e689fe311a078dedc1ce3677ce4248640f35c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1ea6817c_50d68f93",
        "filename": "api/task_queue/task_queue_base.h",
        "patchSetId": 7
      },
      "lineNbr": 119,
      "author": {
        "id": 5142
      },
      "writtenOn": "2022-02-11T08:49:03Z",
      "side": 1,
      "message": "If we don\u0027t deprecate this (see other comment), then I think this should be calling PostDelayedTaskAt() and have a TODO to make it non-virtual when embedders no longer override it.",
      "revId": "993e689fe311a078dedc1ce3677ce4248640f35c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f2e22a5a_299ccd32",
        "filename": "api/task_queue/task_queue_base.h",
        "patchSetId": 7
      },
      "lineNbr": 119,
      "author": {
        "id": 18444
      },
      "writtenOn": "2022-02-11T09:19:50Z",
      "side": 1,
      "message": "Can you add a link to the bug?",
      "parentUuid": "1ea6817c_50d68f93",
      "revId": "993e689fe311a078dedc1ce3677ce4248640f35c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    }
  ]
}