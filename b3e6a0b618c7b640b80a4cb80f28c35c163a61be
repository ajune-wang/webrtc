{
  "comments": [
    {
      "key": {
        "uuid": "e5b86d16_bc7ce0a0",
        "filename": "rtc_base/system/no_unique_address.h",
        "patchSetId": 4
      },
      "lineNbr": 16,
      "author": {
        "id": 5126
      },
      "writtenOn": "2020-04-11T15:08:12Z",
      "side": 1,
      "message": "remove",
      "range": {
        "startLine": 16,
        "startChar": 49,
        "endLine": 16,
        "endChar": 50
      },
      "revId": "b3e6a0b618c7b640b80a4cb80f28c35c163a61be",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6f1ea226_f3c49913",
        "filename": "rtc_base/system/no_unique_address.h",
        "patchSetId": 4
      },
      "lineNbr": 16,
      "author": {
        "id": 5087
      },
      "writtenOn": "2020-04-11T18:15:56Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e5b86d16_bc7ce0a0",
      "range": {
        "startLine": 16,
        "startChar": 49,
        "endLine": 16,
        "endChar": 50
      },
      "revId": "b3e6a0b618c7b640b80a4cb80f28c35c163a61be",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "86737cc6_a29ab860",
        "filename": "rtc_base/system/no_unique_address.h",
        "patchSetId": 4
      },
      "lineNbr": 18,
      "author": {
        "id": 5126
      },
      "writtenOn": "2020-04-11T15:08:12Z",
      "side": 1,
      "message": "Add \"It allows empty types to actually occupy zero bytes as class members, instead of occupying at least one byte just so that they get their own address. There is almost never any reason not to use it on class members that could possibly be empty.\" So that people will know why they should use it...",
      "revId": "b3e6a0b618c7b640b80a4cb80f28c35c163a61be",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7e03d049_cac88b8a",
        "filename": "rtc_base/system/no_unique_address.h",
        "patchSetId": 4
      },
      "lineNbr": 18,
      "author": {
        "id": 5087
      },
      "writtenOn": "2020-04-11T18:15:56Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "86737cc6_a29ab860",
      "revId": "b3e6a0b618c7b640b80a4cb80f28c35c163a61be",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cf94eca8_c34e07f7",
        "filename": "rtc_base/system/no_unique_address.h",
        "patchSetId": 4
      },
      "lineNbr": 23,
      "author": {
        "id": 5087
      },
      "writtenOn": "2020-04-10T19:38:54Z",
      "side": 1,
      "message": "kwiberg@: I have added this but in theory we should not have it because the SequenceChecker is affected by RTC_DCHECK_IS_ON while this attribute might be used elsewhere if we have another empty class.\n\nShould we also have an RTC_NO_UNIQUE_ADDRESS_WHEN_DCHECK_IS_OFF?",
      "range": {
        "startLine": 23,
        "startChar": 53,
        "endLine": 23,
        "endChar": 70
      },
      "revId": "b3e6a0b618c7b640b80a4cb80f28c35c163a61be",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a14a1160_6d8bd869",
        "filename": "rtc_base/system/no_unique_address.h",
        "patchSetId": 4
      },
      "lineNbr": 23,
      "author": {
        "id": 5126
      },
      "writtenOn": "2020-04-11T15:08:12Z",
      "side": 1,
      "message": "Why should RTC_NO_UNIQUE_ADDRESS care about DCHECKs are on? It should be safe for the checker to not have a unique address whether or not DCHECKs are on.",
      "parentUuid": "cf94eca8_c34e07f7",
      "range": {
        "startLine": 23,
        "startChar": 53,
        "endLine": 23,
        "endChar": 70
      },
      "revId": "b3e6a0b618c7b640b80a4cb80f28c35c163a61be",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6710c1e7_e1868eff",
        "filename": "rtc_base/system/no_unique_address.h",
        "patchSetId": 4
      },
      "lineNbr": 23,
      "author": {
        "id": 5087
      },
      "writtenOn": "2020-04-11T18:15:56Z",
      "side": 1,
      "message": "Thanks.\n\nIIRC there were some compiler errors on clang-cl, let me retry. We might have to fix that.",
      "parentUuid": "a14a1160_6d8bd869",
      "range": {
        "startLine": 23,
        "startChar": 53,
        "endLine": 23,
        "endChar": 70
      },
      "revId": "b3e6a0b618c7b640b80a4cb80f28c35c163a61be",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ac39dbdd_c2469953",
        "filename": "rtc_base/system/no_unique_address.h",
        "patchSetId": 4
      },
      "lineNbr": 23,
      "author": {
        "id": 5087
      },
      "writtenOn": "2020-04-11T18:26:37Z",
      "side": 1,
      "message": "Hmm, ok this attribute is not supported by clang-cl:\n\n  In file included from ../../api/rtc_event_log/rtc_event_log_factory.cc:19:\n  ../..\\logging/rtc_event_log/rtc_event_log_impl.h(82,3): error: unknown attribute \n  \u0027no_unique_address\u0027 ignored [-Werror,-Wunknown-attributes]\n    RTC_NO_UNIQUE_ADDRESS SequenceChecker logging_state_checker_;\n    ^\n  ../..\\rtc_base/system/no_unique_address.h(27,5): note: expanded from macro \n  \u0027RTC_NO_UNIQUE_ADDRESS\u0027\n    [[no_unique_address]]  // NOLINT(whitespace/braces)\n\nThis is easy to workaround, the thing that needs more investigation is the binary size on arm64, which moves in the wrong direction.",
      "parentUuid": "6710c1e7_e1868eff",
      "range": {
        "startLine": 23,
        "startChar": 53,
        "endLine": 23,
        "endChar": 70
      },
      "revId": "b3e6a0b618c7b640b80a4cb80f28c35c163a61be",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e7ec6797_409f0055",
        "filename": "rtc_base/system/no_unique_address.h",
        "patchSetId": 4
      },
      "lineNbr": 23,
      "author": {
        "id": 5126
      },
      "writtenOn": "2020-04-11T22:24:54Z",
      "side": 1,
      "message": "The binary size change is very intriguing. Patch set #4 and #5 should have had the same numbers since !RTC_DCHECK_IS_ON is true for the builds that we use to measure binary size, but instead we see a decrease in #4 and an increase in #5.",
      "parentUuid": "ac39dbdd_c2469953",
      "range": {
        "startLine": 23,
        "startChar": 53,
        "endLine": 23,
        "endChar": 70
      },
      "revId": "b3e6a0b618c7b640b80a4cb80f28c35c163a61be",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "54a5334f_78ae10af",
        "filename": "rtc_base/system/no_unique_address.h",
        "patchSetId": 4
      },
      "lineNbr": 23,
      "author": {
        "id": 5087
      },
      "writtenOn": "2020-04-12T11:11:33Z",
      "side": 1,
      "message": "\u003e The binary size change is very intriguing. Patch set #4 and #5 should have had the same numbers since !RTC_DCHECK_IS_ON is true for the builds that we use to measure binary size, but instead we see a decrease in #4 and an increase in #5.\n\nHere is what bloaty has to say about the difference:\n\n$ bloaty no_unique_address_no_dcheck.so -- base_no_dcheck.so \n\n    FILE SIZE        VM SIZE    \n --------------  -------------- \n  +0.0%     +84  +0.0%     +84    .text\n  +0.0%     +80  +0.0%     +80    .eh_frame\n  +0.0%     +24  +0.0%     +24    .eh_frame_hdr\n  -5.3%     -44  -5.3%     -44    [LOAD #1 [RX]]\n  +0.0%    +144  +0.0%    +144    TOTAL\n\nHmm, yes the trybot difference is weird, but it looks like the optimization doesn\u0027t happen on arm64, can this be caused by side effect changes to padding?",
      "parentUuid": "e7ec6797_409f0055",
      "range": {
        "startLine": 23,
        "startChar": 53,
        "endLine": 23,
        "endChar": 70
      },
      "revId": "b3e6a0b618c7b640b80a4cb80f28c35c163a61be",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "40ce2cbb_ae6cf49b",
        "filename": "rtc_base/system/no_unique_address.h",
        "patchSetId": 4
      },
      "lineNbr": 23,
      "author": {
        "id": 5126
      },
      "writtenOn": "2020-04-12T13:16:46Z",
      "side": 1,
      "message": "What does Bloaty have to say about the previous version, the one that showed a size decrease?\n\nWhy do you say that \"the optimization doesn\u0027t happen on arm64\"? Have you measured the size of structs where you can predict the effects? I\u0027m thinking e.g.\n\n  struct Empty {};\n  struct Foo { char a; RTC_NO_UNIQUE_ADDRESS Empty b; };\n\nand checking whether sizeof(Foo) is 1 or 2.",
      "parentUuid": "54a5334f_78ae10af",
      "range": {
        "startLine": 23,
        "startChar": 53,
        "endLine": 23,
        "endChar": 70
      },
      "revId": "b3e6a0b618c7b640b80a4cb80f28c35c163a61be",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f6deaf58_d7e1a3d6",
        "filename": "rtc_base/system/no_unique_address.h",
        "patchSetId": 4
      },
      "lineNbr": 23,
      "author": {
        "id": 5087
      },
      "writtenOn": "2020-04-14T13:11:25Z",
      "side": 1,
      "message": "Hmm, looks like I have messed up things a bit:\n\n    FILE SIZE        VM SIZE    \n --------------  -------------- \n  +0.0%     +80  +0.0%     +80    .eh_frame\n  +7.7%     +60  +7.7%     +60    [LOAD #1 [RX]]\n  +0.0%     +28  +0.0%     +28    .text\n  +0.0%     +24  +0.0%     +24    .eh_frame_hdr\n  -0.0%     -32  -0.0%     -32    .rodata\n  +0.0%    +160  +0.0%    +160    TOTAL\n\nDo you want me to dig deeper of should we just move on? The experiment you suggested confirms that the optimization works:\n\n$ ./out/Debug/no_unique_test \n1\n\nBut this is on Linux x64 not on Android arm64 (even if I think it works indeed, I was just trying to say that maybe we are saving one byte but the end result seems worse than expected because of padding?).",
      "parentUuid": "40ce2cbb_ae6cf49b",
      "range": {
        "startLine": 23,
        "startChar": 53,
        "endLine": 23,
        "endChar": 70
      },
      "revId": "b3e6a0b618c7b640b80a4cb80f28c35c163a61be",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c4f3d29a_ad714c28",
        "filename": "rtc_base/system/no_unique_address.h",
        "patchSetId": 4
      },
      "lineNbr": 23,
      "author": {
        "id": 5126
      },
      "writtenOn": "2020-04-14T13:50:56Z",
      "side": 1,
      "message": "Unless you have instances of the struct present in the binary (for constant initialization), adding RTC_NO_UNIQUE_ADDRESS on a struct member isn\u0027t expected to affect the binary size in any particular direction. It *is* expected to possibly reduce the amount of padding in the struct (since the 1-byte padding of that member is no longer mandated), but how this affects code size or CPU usage is not obvious. All other things being equal one might expect that removing padding would on the net be a good thing (otherwise we would be randomly inserting padding to improve our code), but there\u0027s no guarantee that this will be the case every time.",
      "parentUuid": "f6deaf58_d7e1a3d6",
      "range": {
        "startLine": 23,
        "startChar": 53,
        "endLine": 23,
        "endChar": 70
      },
      "revId": "b3e6a0b618c7b640b80a4cb80f28c35c163a61be",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    }
  ]
}