{
  "comments": [
    {
      "key": {
        "uuid": "ba60c70a_20986bda",
        "filename": "test/pc/e2e/api/peerconnection_quality_test_fixture.h",
        "patchSetId": 6
      },
      "lineNbr": 123,
      "author": {
        "id": 7704
      },
      "writtenOn": "2019-02-20T22:50:27Z",
      "side": 1,
      "message": "I think sb mentioned that codec name is not sufficient to identify the config. You may need codec_name + profile type (main, baseline, etc.) but there may be some other extra info.",
      "range": {
        "startLine": 123,
        "startChar": 16,
        "endLine": 123,
        "endChar": 26
      },
      "revId": "dbe0cb6c8ff5fbc3eacf0ccbd20e367215dc649d",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cbf40839_48b167fd",
        "filename": "test/pc/e2e/api/peerconnection_quality_test_fixture.h",
        "patchSetId": 6
      },
      "lineNbr": 123,
      "author": {
        "id": 5142
      },
      "writtenOn": "2019-02-26T12:57:44Z",
      "side": 1,
      "message": "The SDP might list the codec multiple times, such as when there are multiple profiles. Each set of codec preferences would be listed as its own \"codec\". If you want a unique identifier, you might want to define this by payload type (this is the \"codec number\").",
      "parentUuid": "ba60c70a_20986bda",
      "range": {
        "startLine": 123,
        "startChar": 16,
        "endLine": 123,
        "endChar": 26
      },
      "revId": "dbe0cb6c8ff5fbc3eacf0ccbd20e367215dc649d",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f61dcc0f_21119954",
        "filename": "test/pc/e2e/sdp/sdp_changer.cc",
        "patchSetId": 6
      },
      "lineNbr": 48,
      "author": {
        "id": 5039
      },
      "writtenOn": "2019-02-20T18:26:50Z",
      "side": 1,
      "message": "Could also do:\n\nif (absl::c_none_of(description-\u003estreams(), [\u0026stream_label](const cricket::StreamParams\u0026 stream) {\n    return stream.id \u003d\u003d stream_label;\n})) {\n  continue;\n}",
      "revId": "dbe0cb6c8ff5fbc3eacf0ccbd20e367215dc649d",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "80180106_b364eb97",
        "filename": "test/pc/e2e/sdp/sdp_changer.cc",
        "patchSetId": 6
      },
      "lineNbr": 49,
      "author": {
        "id": 5039
      },
      "writtenOn": "2019-02-20T18:26:50Z",
      "side": 1,
      "message": "Note that the StreamParams is really better known as a track so the id is actually the track id.\n\nIf you care about the stream label in particular, that\u0027s stored in the stream_ids() getter. There can be 0 or many stream labels for a particular track.",
      "range": {
        "startLine": 49,
        "startChar": 10,
        "endLine": 49,
        "endChar": 19
      },
      "revId": "dbe0cb6c8ff5fbc3eacf0ccbd20e367215dc649d",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3ad670f6_57b747b1",
        "filename": "test/pc/e2e/sdp/sdp_changer.cc",
        "patchSetId": 6
      },
      "lineNbr": 59,
      "author": {
        "id": 5039
      },
      "writtenOn": "2019-02-20T18:26:50Z",
      "side": 1,
      "message": "Could do something like this instead:\n\nauto it \u003d absl::c_find_if(codecs, [\u0026codec_name](const cricket::VideoCodec\u0026 codec) {\n  return codec.name \u003d\u003d codec_name;\n});\nRTC_CHECK(it !\u003d codecs.end()) \u003c\u003c \"unsupported ...\nstd::rotate(codecs.begin(), it, it + 1);",
      "revId": "dbe0cb6c8ff5fbc3eacf0ccbd20e367215dc649d",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f1f1bf0c_7ba192b0",
        "filename": "test/pc/e2e/sdp/sdp_changer.cc",
        "patchSetId": 6
      },
      "lineNbr": 62,
      "author": {
        "id": 5039
      },
      "writtenOn": "2019-02-20T18:26:50Z",
      "side": 1,
      "message": "One thing to note is that certain codecs (namely H264) are not uniquely identified by name since there can be multiple variants (e.g., parameterized by profile id or packetization mode).",
      "range": {
        "startLine": 62,
        "startChar": 10,
        "endLine": 62,
        "endChar": 32
      },
      "revId": "dbe0cb6c8ff5fbc3eacf0ccbd20e367215dc649d",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "be1813fa_affd8ade",
        "filename": "test/pc/e2e/sdp/sdp_changer.h",
        "patchSetId": 6
      },
      "lineNbr": 22,
      "author": {
        "id": 5142
      },
      "writtenOn": "2019-02-26T12:57:44Z",
      "side": 1,
      "message": "+orphis would be a good reviewer for this. He has a WIP CL for setCodecPreferences() I believe, which if it landed would mean you would no longer need to modify the SDP but you could use that API instead. I added him in case he wants to comment",
      "revId": "dbe0cb6c8ff5fbc3eacf0ccbd20e367215dc649d",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "44da0934_9602f68b",
        "filename": "test/pc/e2e/sdp/sdp_changer.h",
        "patchSetId": 6
      },
      "lineNbr": 31,
      "author": {
        "id": 5142
      },
      "writtenOn": "2019-02-26T12:57:44Z",
      "side": 1,
      "message": "I would express this as setting the codec preference. You are not truly forcing the codec if the SDP is the offer SDP. Basically:\n- The codec order that the offerer presents SHOULD be the order that the answerer replies with unless the answerer has a codec preference.\n- If the answerer has a codec preference, this order OVERRIDES the offerer\u0027s order.\n- Based on the final codec order, the first codec on the list SHOULD be the one that both endpoints use. However, both endpoints have declared that they are prepared for any codec in the list, and SHOULD thus be prepared for a different codec (but our implementation can certainly expect the first one to be used when talking to itself).\n\nIf you truly want to \"force\" the codec, what you need to do is to remove all codecs other than the first one on the list. This has the side-effect that the negotiation will fail if both endpoints don\u0027t support the same codec (nothing to worry about in a loopback with itself) and you the SDP may require some additional cleaning up.",
      "revId": "dbe0cb6c8ff5fbc3eacf0ccbd20e367215dc649d",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "625a05c8_90e6727f",
        "filename": "test/pc/e2e/sdp/sdp_changer.h",
        "patchSetId": 6
      },
      "lineNbr": 32,
      "author": {
        "id": 5142
      },
      "writtenOn": "2019-02-26T12:57:44Z",
      "side": 1,
      "message": "I think this method should take payload type as argument since that is the unique identifier. In order to get the payload type you can have a helper function that returns payload type based on steam_label and codec_name, and perhaps for now getting the first occurrence is all you need, but that would allow you to in the future distinguish between different profiles for the same codec if you cared to.",
      "revId": "dbe0cb6c8ff5fbc3eacf0ccbd20e367215dc649d",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ff723ad3_1d5a7574",
        "filename": "test/pc/e2e/sdp/sdp_changer.h",
        "patchSetId": 6
      },
      "lineNbr": 36,
      "author": {
        "id": 7704
      },
      "writtenOn": "2019-02-20T22:50:27Z",
      "side": 1,
      "message": "this feels like it should maybe be a simple static method\n\nvoid ForceVideoCodec(SDI* description, label, codec_name)\n\ninstead of \nchanger \u003d SdpChanger(std::move(description));\nchanger.ForceVideoCodec(label, name);\ndescription \u003d changer.ReleaseSessionDescription();",
      "range": {
        "startLine": 25,
        "startChar": 4,
        "endLine": 36,
        "endChar": 37
      },
      "revId": "dbe0cb6c8ff5fbc3eacf0ccbd20e367215dc649d",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4a143e38_6242d105",
        "filename": "test/pc/e2e/test_peer.cc",
        "patchSetId": 6
      },
      "lineNbr": 325,
      "author": {
        "id": 5142
      },
      "writtenOn": "2019-02-26T12:57:44Z",
      "side": 1,
      "message": "Where does the params_ come from? (I\u0027m new to this part of the code)\n\nYou might want to make forcing video codecs optional. For example, if the Answerer forces a video codec it doesn\u0027t matter what the Offerer\u0027s preference was.",
      "revId": "dbe0cb6c8ff5fbc3eacf0ccbd20e367215dc649d",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7bf6fc64_02a8c75e",
        "filename": "test/pc/e2e/test_peer.h",
        "patchSetId": 6
      },
      "lineNbr": 69,
      "author": {
        "id": 5142
      },
      "writtenOn": "2019-02-26T12:57:44Z",
      "side": 1,
      "message": "Please document what patching an offer/answer means. (\"How is this different from CreateOffer()?\")",
      "revId": "dbe0cb6c8ff5fbc3eacf0ccbd20e367215dc649d",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    }
  ]
}