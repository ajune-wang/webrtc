{
  "comments": [
    {
      "key": {
        "uuid": "691a6b9f_ec5eb594",
        "filename": "modules/rtp_rtcp/include/ulpfec_receiver.h",
        "patchSetId": 4
      },
      "lineNbr": 36,
      "author": {
        "id": 5019
      },
      "writtenOn": "2019-06-25T13:43:56Z",
      "side": 1,
      "message": "since you are changing singature of this function and thus will need to update all call sites,\nmay be also update return type to std::unique_ptr\u003cUlpfecReceiver\u003e",
      "range": {
        "startLine": 36,
        "startChar": 9,
        "endLine": 36,
        "endChar": 24
      },
      "revId": "a09e01b03e41e7d7394e9330c366da23a9bfbe91",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a850d538_da0147d6",
        "filename": "modules/rtp_rtcp/include/ulpfec_receiver.h",
        "patchSetId": 4
      },
      "lineNbr": 36,
      "author": {
        "id": 5117
      },
      "writtenOn": "2019-06-25T15:18:27Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "691a6b9f_ec5eb594",
      "range": {
        "startLine": 36,
        "startChar": 9,
        "endLine": 36,
        "endChar": 24
      },
      "revId": "a09e01b03e41e7d7394e9330c366da23a9bfbe91",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "909ded13_271be6e8",
        "filename": "modules/rtp_rtcp/include/ulpfec_receiver.h",
        "patchSetId": 4
      },
      "lineNbr": 38,
      "author": {
        "id": 5019
      },
      "writtenOn": "2019-06-25T13:43:56Z",
      "side": 1,
      "message": "rtc::ArrayView\u003cconst T\u003e\nnormally better parameter type than\nconst std::vector\u003cT\u003e\u0026\n(https://abseil.io/tips/93)",
      "range": {
        "startLine": 38,
        "startChar": 32,
        "endLine": 38,
        "endChar": 64
      },
      "revId": "a09e01b03e41e7d7394e9330c366da23a9bfbe91",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "61e26051_ec3c467c",
        "filename": "modules/rtp_rtcp/include/ulpfec_receiver.h",
        "patchSetId": 4
      },
      "lineNbr": 38,
      "author": {
        "id": 5117
      },
      "writtenOn": "2019-06-25T15:18:27Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "909ded13_271be6e8",
      "range": {
        "startLine": 38,
        "startChar": 32,
        "endLine": 38,
        "endChar": 64
      },
      "revId": "a09e01b03e41e7d7394e9330c366da23a9bfbe91",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4126d09d_8d2b3d35",
        "filename": "modules/rtp_rtcp/source/rtp_packet.cc",
        "patchSetId": 4
      },
      "lineNbr": 159,
      "author": {
        "id": 5019
      },
      "writtenOn": "2019-06-25T13:43:56Z",
      "side": 1,
      "message": "it is safer not to pass buffer without it\u0027s size.\nconsider passing rtc::ArrayView\u003cuint8_t\u003e instead\nand at least DCHECK you do not write beyound the size.",
      "range": {
        "startLine": 159,
        "startChar": 45,
        "endLine": 159,
        "endChar": 54
      },
      "revId": "a09e01b03e41e7d7394e9330c366da23a9bfbe91",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d60eba41_0792bbb9",
        "filename": "modules/rtp_rtcp/source/rtp_packet.cc",
        "patchSetId": 4
      },
      "lineNbr": 159,
      "author": {
        "id": 5117
      },
      "writtenOn": "2019-06-25T15:18:27Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4126d09d_8d2b3d35",
      "range": {
        "startLine": 159,
        "startChar": 45,
        "endLine": 159,
        "endChar": 54
      },
      "revId": "a09e01b03e41e7d7394e9330c366da23a9bfbe91",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e1985d74_98678198",
        "filename": "modules/rtp_rtcp/source/rtp_packet.cc",
        "patchSetId": 4
      },
      "lineNbr": 163,
      "author": {
        "id": 5019
      },
      "writtenOn": "2019-06-25T13:43:56Z",
      "side": 1,
      "message": "will that crash receiver when an rtp packet with non-negotiated id is received?",
      "revId": "a09e01b03e41e7d7394e9330c366da23a9bfbe91",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "00250999_9eb0f92a",
        "filename": "modules/rtp_rtcp/source/rtp_packet.cc",
        "patchSetId": 4
      },
      "lineNbr": 163,
      "author": {
        "id": 5117
      },
      "writtenOn": "2019-06-25T15:18:27Z",
      "side": 1,
      "message": "Yes. That might be a bad idea. Changed to warning and skip.",
      "parentUuid": "e1985d74_98678198",
      "revId": "a09e01b03e41e7d7394e9330c366da23a9bfbe91",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "31e29e01_c6981bc8",
        "filename": "modules/rtp_rtcp/source/rtp_packet.cc",
        "patchSetId": 4
      },
      "lineNbr": 166,
      "author": {
        "id": 5019
      },
      "writtenOn": "2019-06-25T13:43:56Z",
      "side": 1,
      "message": "how can you guaranteed list of extension that need special nullifying is kept in sync if a new one is added?",
      "range": {
        "startLine": 166,
        "startChar": 34,
        "endLine": 166,
        "endChar": 58
      },
      "revId": "a09e01b03e41e7d7394e9330c366da23a9bfbe91",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "56e48f05_9d996880",
        "filename": "modules/rtp_rtcp/source/rtp_packet.cc",
        "patchSetId": 4
      },
      "lineNbr": 166,
      "author": {
        "id": 5117
      },
      "writtenOn": "2019-06-25T15:18:27Z",
      "side": 1,
      "message": "Changed to switch. Now if the new extension is added, and not addressed here, it will be a CE.",
      "parentUuid": "31e29e01_c6981bc8",
      "range": {
        "startLine": 166,
        "startChar": 34,
        "endLine": 166,
        "endChar": 58
      },
      "revId": "a09e01b03e41e7d7394e9330c366da23a9bfbe91",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "21e7e98e_5ad6e46c",
        "filename": "modules/rtp_rtcp/source/rtp_packet.cc",
        "patchSetId": 4
      },
      "lineNbr": 170,
      "author": {
        "id": 5019
      },
      "writtenOn": "2019-06-25T13:43:56Z",
      "side": 1,
      "message": "do you also need to nullify TransportSequenceNumber?\nor is it set before FEC?",
      "range": {
        "startLine": 170,
        "startChar": 41,
        "endLine": 170,
        "endChar": 70
      },
      "revId": "a09e01b03e41e7d7394e9330c366da23a9bfbe91",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a0684c5b_db5f7579",
        "filename": "modules/rtp_rtcp/source/rtp_packet.cc",
        "patchSetId": 4
      },
      "lineNbr": 170,
      "author": {
        "id": 5117
      },
      "writtenOn": "2019-06-25T15:18:27Z",
      "side": 1,
      "message": "Yes, it should also be nullified.",
      "parentUuid": "21e7e98e_5ad6e46c",
      "range": {
        "startLine": 170,
        "startChar": 41,
        "endLine": 170,
        "endChar": 70
      },
      "revId": "a09e01b03e41e7d7394e9330c366da23a9bfbe91",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "65048f7a_bf80766c",
        "filename": "modules/rtp_rtcp/source/rtp_packet.cc",
        "patchSetId": 4
      },
      "lineNbr": 224,
      "author": {
        "id": 5019
      },
      "writtenOn": "2019-06-25T13:43:56Z",
      "side": 1,
      "message": "what is the reason of this change?",
      "range": {
        "startLine": 224,
        "startChar": 5,
        "endLine": 224,
        "endChar": 9
      },
      "revId": "a09e01b03e41e7d7394e9330c366da23a9bfbe91",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bec86aba_7db2548f",
        "filename": "modules/rtp_rtcp/source/rtp_packet.cc",
        "patchSetId": 4
      },
      "lineNbr": 224,
      "author": {
        "id": 5117
      },
      "writtenOn": "2019-06-25T15:18:27Z",
      "side": 1,
      "message": "Accidental - autoformatting caused it.",
      "parentUuid": "65048f7a_bf80766c",
      "range": {
        "startLine": 224,
        "startChar": 5,
        "endLine": 224,
        "endChar": 9
      },
      "revId": "a09e01b03e41e7d7394e9330c366da23a9bfbe91",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bbfbf02a_1ee7ff59",
        "filename": "modules/rtp_rtcp/source/rtp_packet.cc",
        "patchSetId": 4
      },
      "lineNbr": 359,
      "author": {
        "id": 5019
      },
      "writtenOn": "2019-06-25T13:43:56Z",
      "side": 1,
      "message": "ditto",
      "range": {
        "startLine": 359,
        "startChar": 2,
        "endLine": 359,
        "endChar": 4
      },
      "revId": "a09e01b03e41e7d7394e9330c366da23a9bfbe91",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cb704e18_fe0c4fb9",
        "filename": "modules/rtp_rtcp/source/rtp_packet.cc",
        "patchSetId": 4
      },
      "lineNbr": 359,
      "author": {
        "id": 5117
      },
      "writtenOn": "2019-06-25T15:18:27Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "bbfbf02a_1ee7ff59",
      "range": {
        "startLine": 359,
        "startChar": 2,
        "endLine": 359,
        "endChar": 4
      },
      "revId": "a09e01b03e41e7d7394e9330c366da23a9bfbe91",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c11039f7_a05dd572",
        "filename": "modules/rtp_rtcp/source/ulpfec_receiver_impl.cc",
        "patchSetId": 4
      },
      "lineNbr": 117,
      "author": {
        "id": 5117
      },
      "writtenOn": "2019-06-25T12:39:37Z",
      "side": 1,
      "message": "Piggybacking cleanup here: in our UlpFec implementation only 1 block in RED packets is always used.",
      "revId": "a09e01b03e41e7d7394e9330c366da23a9bfbe91",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8b5d7404_1caa9377",
        "filename": "modules/rtp_rtcp/source/ulpfec_receiver_impl.cc",
        "patchSetId": 4
      },
      "lineNbr": 117,
      "author": {
        "id": 5019
      },
      "writtenOn": "2019-06-25T13:43:56Z",
      "side": 1,
      "message": "but out Ulpfec implementation still should be able to receive RED packets produced by other implementations.\nmay it is ok to drop multi-block RED support, but it has different risks than the main change so better be done separately.",
      "parentUuid": "c11039f7_a05dd572",
      "revId": "a09e01b03e41e7d7394e9330c366da23a9bfbe91",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c359c9ce_1659fb9e",
        "filename": "modules/rtp_rtcp/source/ulpfec_receiver_impl.cc",
        "patchSetId": 4
      },
      "lineNbr": 117,
      "author": {
        "id": 5117
      },
      "writtenOn": "2019-06-25T15:18:27Z",
      "side": 1,
      "message": "Reverted.",
      "parentUuid": "8b5d7404_1caa9377",
      "revId": "a09e01b03e41e7d7394e9330c366da23a9bfbe91",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bd3b91a7_454d3c6f",
        "filename": "modules/rtp_rtcp/source/ulpfec_receiver_impl.cc",
        "patchSetId": 4
      },
      "lineNbr": 186,
      "author": {
        "id": 5019
      },
      "writtenOn": "2019-06-25T17:27:08Z",
      "side": 1,
      "message": "nit: since you are not using \u0027Received\u0027 part, may be use RtpPacket class.",
      "range": {
        "startLine": 186,
        "startChar": 15,
        "endLine": 186,
        "endChar": 23
      },
      "revId": "a09e01b03e41e7d7394e9330c366da23a9bfbe91",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9887ab22_f6493cd7",
        "filename": "modules/rtp_rtcp/source/ulpfec_receiver_impl.cc",
        "patchSetId": 4
      },
      "lineNbr": 187,
      "author": {
        "id": 5019
      },
      "writtenOn": "2019-06-25T13:43:56Z",
      "side": 1,
      "message": "I do not think that nullifying belongs to the RtpPacket in the first place:\nright now RtpPacket is not aware of any individual extension.\n\nCopyAndZeroMutableExtensions makes it aware.\n\nIt seems more reasonable to have that function somewhere in RtpSender/RtpVideoSender - these are the classes that are aware what extensions can be used and which of them can be modified after pacer.\n(it can be static functions in the RtpSender/RtpVideoSender)",
      "range": {
        "startLine": 187,
        "startChar": 27,
        "endLine": 187,
        "endChar": 64
      },
      "revId": "a09e01b03e41e7d7394e9330c366da23a9bfbe91",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "365cd0d2_73fdff79",
        "filename": "modules/rtp_rtcp/source/ulpfec_receiver_impl.cc",
        "patchSetId": 4
      },
      "lineNbr": 187,
      "author": {
        "id": 5117
      },
      "writtenOn": "2019-06-25T15:18:27Z",
      "side": 1,
      "message": "I can make there a static method, which would for all mutable extensions query the packet if it has it, then write down zeroed value back into the packet. I don\u0027t like that solution:\nit would just make it much harder to remove dependency on a RtpPacket here. The idea behind this comment is to have some direct buffer manipulation or make RtpPacket kind-of not own the buffer to avoid copying. I also don\u0027t want to create here dependency on the sender, since it\u0027s strictly receive side code here.\n\nAnother approach is to move part of rtp_packet which parses extensions out to rtp_utility. Then, these new static functions could be called to parse the buffer for extensions and manipulate that. The rtp_packet would then use these functions. As a bonus, we could scrap most of the code in RtpHeaderParser and make it finally understand 2-byte extensions.\n\nThis is a big refactoring, so may I leave it for the follow-up CL?",
      "parentUuid": "9887ab22_f6493cd7",
      "range": {
        "startLine": 187,
        "startChar": 27,
        "endLine": 187,
        "endChar": 64
      },
      "revId": "a09e01b03e41e7d7394e9330c366da23a9bfbe91",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8e258686_ddfccbd7",
        "filename": "modules/rtp_rtcp/source/ulpfec_receiver_impl.cc",
        "patchSetId": 4
      },
      "lineNbr": 187,
      "author": {
        "id": 5019
      },
      "writtenOn": "2019-06-25T17:27:08Z",
      "side": 1,
      "message": "good point sender and receiver shouldn\u0027t be mixed.\n\nSure, do not put those refactorings in this change.\nI guess we agree current situation is suboptimal and can discuss how to make it neater later.\n\n(btw, RtpPacket has an option to parse packet without memcpy, but then the input buffer should be rtc::CopyOnWriteBuffer. if packet refactored into that type, then it would be possible to do this mutation without single memcpy.  )",
      "parentUuid": "365cd0d2_73fdff79",
      "range": {
        "startLine": 187,
        "startChar": 27,
        "endLine": 187,
        "endChar": 64
      },
      "revId": "a09e01b03e41e7d7394e9330c366da23a9bfbe91",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f988cbf0_bea26ba5",
        "filename": "modules/rtp_rtcp/source/ulpfec_receiver_impl.cc",
        "patchSetId": 4
      },
      "lineNbr": 187,
      "author": {
        "id": 5117
      },
      "writtenOn": "2019-06-26T10:12:21Z",
      "side": 1,
      "message": "CopyOnWriteBuffer would still incur a copy when the mutable extension would be rewritten, because there would be two buffers - one in RtpPacket and one in Packet here.",
      "parentUuid": "8e258686_ddfccbd7",
      "range": {
        "startLine": 187,
        "startChar": 27,
        "endLine": 187,
        "endChar": 64
      },
      "revId": "a09e01b03e41e7d7394e9330c366da23a9bfbe91",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3e1ce0fd_d07f6e22",
        "filename": "video/video_send_stream_tests.cc",
        "patchSetId": 4
      },
      "lineNbr": 791,
      "author": {
        "id": 5019
      },
      "writtenOn": "2019-06-25T13:43:56Z",
      "side": 1,
      "message": "is it same as\n(*receive_configs)[0].rtp.extensions \u003d send_config-\u003ertp.extensions;\n\n(then it can be done outside if/else branches)",
      "range": {
        "startLine": 790,
        "startChar": 6,
        "endLine": 791,
        "endChar": 80
      },
      "revId": "a09e01b03e41e7d7394e9330c366da23a9bfbe91",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dd32fb3b_c6562694",
        "filename": "video/video_send_stream_tests.cc",
        "patchSetId": 4
      },
      "lineNbr": 791,
      "author": {
        "id": 5117
      },
      "writtenOn": "2019-06-25T15:18:27Z",
      "side": 1,
      "message": "Done. Thanks for noticing this!",
      "parentUuid": "3e1ce0fd_d07f6e22",
      "range": {
        "startLine": 790,
        "startChar": 6,
        "endLine": 791,
        "endChar": 80
      },
      "revId": "a09e01b03e41e7d7394e9330c366da23a9bfbe91",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    }
  ]
}