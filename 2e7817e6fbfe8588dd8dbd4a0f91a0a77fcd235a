{
  "comments": [
    {
      "key": {
        "uuid": "00d8b9fc_a0378853",
        "filename": "api/peerconnectioninterface.h",
        "patchSetId": 1
      },
      "lineNbr": 1001,
      "author": {
        "id": 5234
      },
      "writtenOn": "2018-05-03T09:24:17Z",
      "side": 1,
      "message": "Would it work to to add a default implementation here? inline, unless we want to create a peerconnectioninterface.cc file. It might be considered \"non-trivial\"; copying the three optionals in the structs, and then calling the new method.",
      "range": {
        "startLine": 1001,
        "startChar": 2,
        "endLine": 1001,
        "endChar": 68
      },
      "revId": "2e7817e6fbfe8588dd8dbd4a0f91a0a77fcd235a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9dd668c3_74aa2b47",
        "filename": "api/peerconnectioninterface.h",
        "patchSetId": 1
      },
      "lineNbr": 1001,
      "author": {
        "id": 5126
      },
      "writtenOn": "2018-05-03T10:43:09Z",
      "side": 1,
      "message": "There shouldn\u0027t be any problems with that. But don\u0027t avoid putting it in the .cc file; the state of our build system nowadays is such that it\u0027s generally not hard at all to add one.",
      "parentUuid": "00d8b9fc_a0378853",
      "range": {
        "startLine": 1001,
        "startChar": 2,
        "endLine": 1001,
        "endChar": 68
      },
      "revId": "2e7817e6fbfe8588dd8dbd4a0f91a0a77fcd235a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5a292edd_a3d36de5",
        "filename": "api/peerconnectioninterface.h",
        "patchSetId": 1
      },
      "lineNbr": 1001,
      "author": {
        "id": 5531
      },
      "writtenOn": "2018-05-03T11:11:51Z",
      "side": 1,
      "message": "Things named *Interface aren\u0027t allowed to be abstract base classes according to the style guidelines. Why should it have a default implementation rather just implementing in the implementation class?",
      "parentUuid": "00d8b9fc_a0378853",
      "range": {
        "startLine": 1001,
        "startChar": 2,
        "endLine": 1001,
        "endChar": 68
      },
      "revId": "2e7817e6fbfe8588dd8dbd4a0f91a0a77fcd235a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b6f81aef_8e9425e0",
        "filename": "api/peerconnectioninterface.h",
        "patchSetId": 1
      },
      "lineNbr": 1001,
      "author": {
        "id": 5234
      },
      "writtenOn": "2018-05-03T11:35:51Z",
      "side": 1,
      "message": "\u003e Things named *Interface aren\u0027t allowed to be abstract base classes according to the style guidelines. Why should it have a default implementation rather just implementing in the implementation class?\n\nBecause there multiple implementations, and it\u0027s nice to not have them all be aware of the existence of the deprecated method.\n\nFor transitions over interface changes, we often add default implementations to classes which are otherwise pure interfaces. This class already has two dozen methods with inline default implementations.",
      "parentUuid": "5a292edd_a3d36de5",
      "range": {
        "startLine": 1001,
        "startChar": 2,
        "endLine": 1001,
        "endChar": 68
      },
      "revId": "2e7817e6fbfe8588dd8dbd4a0f91a0a77fcd235a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b23b84ad_5c589421",
        "filename": "api/peerconnectioninterface.h",
        "patchSetId": 1
      },
      "lineNbr": 1001,
      "author": {
        "id": 5531
      },
      "writtenOn": "2018-05-03T11:41:43Z",
      "side": 1,
      "message": "Ok, didn\u0027t know we had an exception for transitions, makes sense though, is this documented anywhere? I agree that it shouldn\u0027t be any issues adding a .cc file.",
      "parentUuid": "b6f81aef_8e9425e0",
      "range": {
        "startLine": 1001,
        "startChar": 2,
        "endLine": 1001,
        "endChar": 68
      },
      "revId": "2e7817e6fbfe8588dd8dbd4a0f91a0a77fcd235a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "938a0792_c1e3aaf2",
        "filename": "api/peerconnectioninterface.h",
        "patchSetId": 1
      },
      "lineNbr": 1001,
      "author": {
        "id": 5234
      },
      "writtenOn": "2018-05-03T11:49:20Z",
      "side": 1,
      "message": "Adding an inline default implementaiton for now, since the compiler seems happy. Could consider a separate cl to move all method implementations to a new .cc file.",
      "parentUuid": "b23b84ad_5c589421",
      "range": {
        "startLine": 1001,
        "startChar": 2,
        "endLine": 1001,
        "endChar": 68
      },
      "revId": "2e7817e6fbfe8588dd8dbd4a0f91a0a77fcd235a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8e5d119a_c4c78ca9",
        "filename": "api/transport/BUILD.gn",
        "patchSetId": 1
      },
      "lineNbr": 11,
      "author": {
        "id": 5531
      },
      "writtenOn": "2018-05-03T11:11:51Z",
      "side": 1,
      "message": "is _api needed here? Seems reduntant considering the api/ path.",
      "range": {
        "startLine": 11,
        "startChar": 16,
        "endLine": 11,
        "endChar": 36
      },
      "revId": "2e7817e6fbfe8588dd8dbd4a0f91a0a77fcd235a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f7573ec5_5cd8b85b",
        "filename": "api/transport/BUILD.gn",
        "patchSetId": 1
      },
      "lineNbr": 11,
      "author": {
        "id": 5234
      },
      "writtenOn": "2018-05-03T11:35:51Z",
      "side": 1,
      "message": "Some guidance is needed. Roughly half (and a majority) of the targets under api/ include _api in their name, half of them doesn\u0027t. \n\n$ git grep source_set master -- api |grep -c _api\n21\n$ git grep source_set master -- api |grep -c -v _api\n18",
      "parentUuid": "8e5d119a_c4c78ca9",
      "range": {
        "startLine": 11,
        "startChar": 16,
        "endLine": 11,
        "endChar": 36
      },
      "revId": "2e7817e6fbfe8588dd8dbd4a0f91a0a77fcd235a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1d6e5458_cbed8a48",
        "filename": "pc/peerconnection.cc",
        "patchSetId": 1
      },
      "lineNbr": 3036,
      "author": {
        "id": 5126
      },
      "writtenOn": "2018-05-03T10:43:09Z",
      "side": 1,
      "message": "Consider using a catch-all lambda capture ([\u0026]), since those are (1) nice and short and (2) illegal except when invoked synchronously, which will make the intent clear.",
      "range": {
        "startLine": 3036,
        "startChar": 23,
        "endLine": 3036,
        "endChar": 38
      },
      "revId": "2e7817e6fbfe8588dd8dbd4a0f91a0a77fcd235a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "10b83967_bf7e09e7",
        "filename": "pc/peerconnection.cc",
        "patchSetId": 1
      },
      "lineNbr": 3036,
      "author": {
        "id": 5234
      },
      "writtenOn": "2018-05-03T11:49:20Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1d6e5458_cbed8a48",
      "range": {
        "startLine": 3036,
        "startChar": 23,
        "endLine": 3036,
        "endChar": 38
      },
      "revId": "2e7817e6fbfe8588dd8dbd4a0f91a0a77fcd235a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3f0e9ee6_ee16962a",
        "filename": "pc/peerconnection.cc",
        "patchSetId": 1
      },
      "lineNbr": 3041,
      "author": {
        "id": 5126
      },
      "writtenOn": "2018-05-03T10:43:09Z",
      "side": 1,
      "message": "Not introduced in this CL, but... you can just use the optionals directly in a bool context. Or, if that feels too magical, they have a .has_value() method.",
      "revId": "2e7817e6fbfe8588dd8dbd4a0f91a0a77fcd235a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f4c4bb43_0b1ae3ee",
        "filename": "pc/peerconnection.cc",
        "patchSetId": 1
      },
      "lineNbr": 3041,
      "author": {
        "id": 5234
      },
      "writtenOn": "2018-05-03T11:49:20Z",
      "side": 1,
      "message": "Changing to .has_value().",
      "parentUuid": "3f0e9ee6_ee16962a",
      "revId": "2e7817e6fbfe8588dd8dbd4a0f91a0a77fcd235a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    }
  ]
}