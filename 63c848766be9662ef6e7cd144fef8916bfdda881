{
  "comments": [
    {
      "key": {
        "uuid": "2e37a379_7a342690",
        "filename": "rtc_base/BUILD.gn",
        "patchSetId": 1
      },
      "lineNbr": 345,
      "author": {
        "id": 5234
      },
      "writtenOn": "2019-09-18T06:55:49Z",
      "side": 1,
      "message": "Does the \"int_\" and Int prefixes really add clarity?\n\nIf we need them, I think DivideRoundToNearestInt reads better then IntDivideRoundToNearest.",
      "range": {
        "startLine": 343,
        "startChar": 0,
        "endLine": 345,
        "endChar": 34
      },
      "revId": "63c848766be9662ef6e7cd144fef8916bfdda881",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c526ced8_c94c6bf6",
        "filename": "rtc_base/BUILD.gn",
        "patchSetId": 1
      },
      "lineNbr": 345,
      "author": {
        "id": 5126
      },
      "writtenOn": "2019-09-18T08:21:26Z",
      "side": 1,
      "message": "Weak +1 for removing the prefixes.",
      "parentUuid": "2e37a379_7a342690",
      "range": {
        "startLine": 343,
        "startChar": 0,
        "endLine": 345,
        "endChar": 34
      },
      "revId": "63c848766be9662ef6e7cd144fef8916bfdda881",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f00c3d3c_774eb7d7",
        "filename": "rtc_base/BUILD.gn",
        "patchSetId": 1
      },
      "lineNbr": 345,
      "author": {
        "id": 5019
      },
      "writtenOn": "2019-09-18T08:57:01Z",
      "side": 1,
      "message": "probably not. There is already protection against unintended use with floats.\nSo shorter name is probably better. Renamed.",
      "parentUuid": "2e37a379_7a342690",
      "range": {
        "startLine": 343,
        "startChar": 0,
        "endLine": 345,
        "endChar": 34
      },
      "revId": "63c848766be9662ef6e7cd144fef8916bfdda881",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ad2d73bf_95ecc0b9",
        "filename": "rtc_base/numerics/int_divide_round.h",
        "patchSetId": 1
      },
      "lineNbr": 21,
      "author": {
        "id": 5126
      },
      "writtenOn": "2019-09-18T08:21:26Z",
      "side": 1,
      "message": "Say `Dividend` here instead? That would make it easier for callers.",
      "range": {
        "startLine": 21,
        "startChar": 7,
        "endLine": 21,
        "endChar": 11
      },
      "revId": "63c848766be9662ef6e7cd144fef8916bfdda881",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "290af346_ba1f2de1",
        "filename": "rtc_base/numerics/int_divide_round.h",
        "patchSetId": 1
      },
      "lineNbr": 21,
      "author": {
        "id": 5019
      },
      "writtenOn": "2019-09-18T08:57:01Z",
      "side": 1,
      "message": "that fails test \u0027PreservesType\u0027\nin particular typeof(uint8_t / uint32_t) \u003d\u003d uint32_t [not uint8_t]\n\nFor consistency with regular division would prefer to keep that property.",
      "parentUuid": "ad2d73bf_95ecc0b9",
      "range": {
        "startLine": 21,
        "startChar": 7,
        "endLine": 21,
        "endChar": 11
      },
      "revId": "63c848766be9662ef6e7cd144fef8916bfdda881",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2a109a87_8cfb8403",
        "filename": "rtc_base/numerics/int_divide_round.h",
        "patchSetId": 1
      },
      "lineNbr": 21,
      "author": {
        "id": 5126
      },
      "writtenOn": "2019-09-18T13:31:43Z",
      "side": 1,
      "message": "Hmm, OK. Then auto here is probably best, since the expression for the actual type will be hard to read.",
      "parentUuid": "290af346_ba1f2de1",
      "range": {
        "startLine": 21,
        "startChar": 7,
        "endLine": 21,
        "endChar": 11
      },
      "revId": "63c848766be9662ef6e7cd144fef8916bfdda881",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5f90fe87_e66dfa1b",
        "filename": "rtc_base/numerics/int_divide_round.h",
        "patchSetId": 1
      },
      "lineNbr": 25,
      "author": {
        "id": 5126
      },
      "writtenOn": "2019-09-18T08:21:26Z",
      "side": 1,
      "message": "Have you tried building this in debug mode? I don\u0027t know of a way to CHECK in a constexpr function prior to C++20.\n\nAlso, why restrict the arguments to positive numbers? Just ease of implementation?",
      "revId": "63c848766be9662ef6e7cd144fef8916bfdda881",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e293cab9_044dbc39",
        "filename": "rtc_base/numerics/int_divide_round.h",
        "patchSetId": 1
      },
      "lineNbr": 25,
      "author": {
        "id": 5234
      },
      "writtenOn": "2019-09-18T08:38:47Z",
      "side": 1,
      "message": "Unfortunately, C++ signed integer division (and corresponding %) are not defined as floor operations, but rounding towards zero. I\u0027ve so far never seen a case where that causes anything but trouble with negative numbers.",
      "parentUuid": "5f90fe87_e66dfa1b",
      "revId": "63c848766be9662ef6e7cd144fef8916bfdda881",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "43c95781_28d867df",
        "filename": "rtc_base/numerics/int_divide_round.h",
        "patchSetId": 1
      },
      "lineNbr": 25,
      "author": {
        "id": 5019
      },
      "writtenOn": "2019-09-18T08:57:01Z",
      "side": 1,
      "message": "yes, I tried: it works when check pass and fails to compile constexpr when it doesn\u0027t (thanks to c++14 it can be now done with regular RTC_CHECK/RTC_DCHECK)\n\nchecking constexpr is possible even in c++11:\nconstexpr Function() {\n  return condition_ok ? DoTheWork() : CallNonConstexprFunction();\n}\n\n----\nYes, restricting to positive number for easier implementation and easier reasoning.\nUse cases I\u0027m aware about only care about positive numbers.\n\nAlso, math and c++ disagree what is proper flooring for negative numbers. So I try to avoid it.",
      "parentUuid": "5f90fe87_e66dfa1b",
      "revId": "63c848766be9662ef6e7cd144fef8916bfdda881",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4d1c9b8b_a898aee6",
        "filename": "rtc_base/numerics/int_divide_round.h",
        "patchSetId": 1
      },
      "lineNbr": 25,
      "author": {
        "id": 5126
      },
      "writtenOn": "2019-09-18T13:31:43Z",
      "side": 1,
      "message": "Oooh, that\u0027s extremely nice. I had no idea that it worked.",
      "parentUuid": "43c95781_28d867df",
      "revId": "63c848766be9662ef6e7cd144fef8916bfdda881",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d9d129e4_a24188c0",
        "filename": "rtc_base/numerics/int_divide_round.h",
        "patchSetId": 1
      },
      "lineNbr": 45,
      "author": {
        "id": 5234
      },
      "writtenOn": "2019-09-18T06:55:49Z",
      "side": 1,
      "message": "Since divisor \u003e 0, this alternative should also work:\n\nhalf \u003d (divisor - 1) / 2;\nif (dividend % divisor \u003e half)\n  ++result;\n\nwith one operation less. Neither version is obvious to me. It might be a little clearer to write the condition as \n\nauto r \u003d dividend % divisor;\nif (2*r \u003e\u003d divisor) ++result;\n\nbut that risks overflow in 2*r.\n\nI would consider writing the update as\n\nauto q \u003d dividend / divisor;\nauto r \u003d dividend % divisor;\nreturn q + (condition on r);\n\n(applies to above function too).",
      "range": {
        "startLine": 41,
        "startChar": 0,
        "endLine": 45,
        "endChar": 33
      },
      "revId": "63c848766be9662ef6e7cd144fef8916bfdda881",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e8484098_eb521f11",
        "filename": "rtc_base/numerics/int_divide_round.h",
        "patchSetId": 1
      },
      "lineNbr": 45,
      "author": {
        "id": 5019
      },
      "writtenOn": "2019-09-18T08:57:01Z",
      "side": 1,
      "message": "yep, that way to calculate half looks better.\n---\nAdded unittest where 2*r overflows producing incorrect result.\n---\nrewrote return statement as \"return q + (...);\"\nlooks nicer.\nI was afraid that would promote result to int in some cases, but it seems to preserve type of the quotient.",
      "parentUuid": "d9d129e4_a24188c0",
      "range": {
        "startLine": 41,
        "startChar": 0,
        "endLine": 45,
        "endChar": 33
      },
      "revId": "63c848766be9662ef6e7cd144fef8916bfdda881",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "039b18c4_a1bf971b",
        "filename": "rtc_base/numerics/int_divide_round_unittest.cc",
        "patchSetId": 1
      },
      "lineNbr": 67,
      "author": {
        "id": 5126
      },
      "writtenOn": "2019-09-18T08:21:26Z",
      "side": 1,
      "message": "These two can be static_assert.",
      "revId": "63c848766be9662ef6e7cd144fef8916bfdda881",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5ea508d4_ad0a6fda",
        "filename": "rtc_base/numerics/int_divide_round_unittest.cc",
        "patchSetId": 1
      },
      "lineNbr": 67,
      "author": {
        "id": 5019
      },
      "writtenOn": "2019-09-18T08:57:01Z",
      "side": 1,
      "message": "changed to static assert. [though not entirely sure why that is better in test code]",
      "parentUuid": "039b18c4_a1bf971b",
      "revId": "63c848766be9662ef6e7cd144fef8916bfdda881",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    }
  ]
}