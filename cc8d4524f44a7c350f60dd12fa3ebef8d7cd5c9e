{
  "comments": [
    {
      "key": {
        "uuid": "4fae81e6_00941130",
        "filename": "media/engine/webrtcvideoengine.cc",
        "patchSetId": 3
      },
      "lineNbr": 1490,
      "author": {
        "id": 5142
      },
      "writtenOn": "2018-09-24T15:10:15Z",
      "side": 1,
      "message": "This spec says \"The browser MUST keep information from RTP packets received in the previous 10 seconds.\" Is there any way that receive_streams_ may be modified such that history is erased? If so, when?",
      "revId": "cc8d4524f44a7c350f60dd12fa3ebef8d7cd5c9e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ea957b86_641a13f8",
        "filename": "media/engine/webrtcvideoengine.cc",
        "patchSetId": 3
      },
      "lineNbr": 1490,
      "author": {
        "id": 5234
      },
      "writtenOn": "2018-09-25T08:35:32Z",
      "side": 1,
      "message": "After a quick search, it seems streams can be destroyed on call to PeerConnection::SetRemoteDescription, and from the logic for unsignalled streams (which I don\u0027t quite understand).\n\nI guess there are a couple of cases:\n\n1. A stream is destroyed and recreated with the same ssrc. In this case, history is lost. Maybe it should be retained in some way, but I wouldn\u0027t expect much of practical problems?\n\n2. Asking for GetSources() on an ssrc that has no associated stream object, but might have had one less than 10s ago. Do the web apis provide a way to do that? Can we have a w3c RtpReceiver without a corresponding stream in webrtcvideoengine?\n\nOr generally, keeping stats for *all* received rtp packets, even if we discard them without passing them on to any stream. We could do that somewhere close to the RTP demuxer, but we\u0027d need some limits to not exhaust memory if we receive evil packets using a huge number of distinct ssrcs.",
      "parentUuid": "4fae81e6_00941130",
      "revId": "cc8d4524f44a7c350f60dd12fa3ebef8d7cd5c9e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a2811e38_3568cd31",
        "filename": "media/engine/webrtcvideoengine.cc",
        "patchSetId": 3
      },
      "lineNbr": 1490,
      "author": {
        "id": 5234
      },
      "writtenOn": "2018-09-25T08:35:32Z",
      "side": 1,
      "message": "This could also be \"return {}\", right?",
      "range": {
        "startLine": 1490,
        "startChar": 11,
        "endLine": 1490,
        "endChar": 43
      },
      "revId": "cc8d4524f44a7c350f60dd12fa3ebef8d7cd5c9e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1c427d90_1ae66701",
        "filename": "media/engine/webrtcvideoengine.cc",
        "patchSetId": 3
      },
      "lineNbr": 1490,
      "author": {
        "id": 5142
      },
      "writtenOn": "2018-09-25T08:50:48Z",
      "side": 1,
      "message": "As the spec is written today, if setRemoteDescription() repurposes  the receiver to be used with different SSRCs, and history is cleared as a side-effect, that would be a bug because the spec says \"any RTP packets that have been received to this receiver the last 10s\". But I\u0027m not sure it should be a bug, it might not be bad idea to do so in that case? Not sure if code or spec should be updated, that type of bug that only happens on renegotiation I would be less concerned about.\n\nIf however SSRCs can be switched out on the fly while a receiver is active and we lose history even in cases where we are actively using a receiver we may have a significant problem.",
      "parentUuid": "ea957b86_641a13f8",
      "revId": "cc8d4524f44a7c350f60dd12fa3ebef8d7cd5c9e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "80a558f5_46d20718",
        "filename": "media/engine/webrtcvideoengine.cc",
        "patchSetId": 3
      },
      "lineNbr": 1490,
      "author": {
        "id": 5613
      },
      "writtenOn": "2018-09-25T09:04:13Z",
      "side": 1,
      "message": "This code is *identical* to that of audio handling.\nSo if that is OK, then this is ok.\nIf that is not ok, I think it should be a separate bug, not strictly related to this.\n\nWDYT?",
      "parentUuid": "4fae81e6_00941130",
      "revId": "cc8d4524f44a7c350f60dd12fa3ebef8d7cd5c9e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9fcb8557_e94adae2",
        "filename": "media/engine/webrtcvideoengine.cc",
        "patchSetId": 3
      },
      "lineNbr": 1490,
      "author": {
        "id": 5613
      },
      "writtenOn": "2018-09-25T09:04:13Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a2811e38_3568cd31",
      "range": {
        "startLine": 1490,
        "startChar": 11,
        "endLine": 1490,
        "endChar": 43
      },
      "revId": "cc8d4524f44a7c350f60dd12fa3ebef8d7cd5c9e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1cd9e29b_8fb96c25",
        "filename": "media/engine/webrtcvideoengine.cc",
        "patchSetId": 3
      },
      "lineNbr": 1490,
      "author": {
        "id": 5142
      },
      "writtenOn": "2018-09-25T16:12:32Z",
      "side": 1,
      "message": "Can you file a bug and add a TODO?",
      "parentUuid": "80a558f5_46d20718",
      "revId": "cc8d4524f44a7c350f60dd12fa3ebef8d7cd5c9e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1081f4c2_a1155271",
        "filename": "media/engine/webrtcvideoengine_unittest.cc",
        "patchSetId": 3
      },
      "lineNbr": 984,
      "author": {
        "id": 5142
      },
      "writtenOn": "2018-09-24T15:10:15Z",
      "side": 1,
      "message": "nit: Should we use rtc::SetClockForTesting() to ensure the source is not removed even if the bot freezes for 10s?",
      "revId": "cc8d4524f44a7c350f60dd12fa3ebef8d7cd5c9e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "66b5785f_a8f5f6d6",
        "filename": "media/engine/webrtcvideoengine_unittest.cc",
        "patchSetId": 3
      },
      "lineNbr": 984,
      "author": {
        "id": 5613
      },
      "writtenOn": "2018-09-25T09:04:13Z",
      "side": 1,
      "message": "done in newly added test.",
      "parentUuid": "1081f4c2_a1155271",
      "revId": "cc8d4524f44a7c350f60dd12fa3ebef8d7cd5c9e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1bf0e502_2c061062",
        "filename": "media/engine/webrtcvideoengine_unittest.cc",
        "patchSetId": 3
      },
      "lineNbr": 985,
      "author": {
        "id": 5142
      },
      "writtenOn": "2018-09-24T15:10:15Z",
      "side": 1,
      "message": "Can we add a test on this layer that tests the case where the SSRC does exist?\n\nRegardless of layers, the following behaviors would be nice to test:\n- Injecting an RTP packet should add a source.\n- Injecting another RTP packet should update the timestamp.\n- Advancing time by 10s should remove the source.\n- Is SSRC switching a valid use case that should be tested? See other comment.",
      "revId": "cc8d4524f44a7c350f60dd12fa3ebef8d7cd5c9e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1cdbc3c4_1d6c3979",
        "filename": "media/engine/webrtcvideoengine_unittest.cc",
        "patchSetId": 3
      },
      "lineNbr": 985,
      "author": {
        "id": 5613
      },
      "writtenOn": "2018-09-25T09:04:13Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1bf0e502_2c061062",
      "revId": "cc8d4524f44a7c350f60dd12fa3ebef8d7cd5c9e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1b7ee532_ae16dcd7",
        "filename": "pc/peerconnection_integrationtest.cc",
        "patchSetId": 3
      },
      "lineNbr": 4322,
      "author": {
        "id": 5142
      },
      "writtenOn": "2018-09-24T15:10:15Z",
      "side": 1,
      "message": "Nitty but: What do you think about splitting this up into two tests? Avoiding loops and testing audio and video behaviors separately makes test failures more explicit (which media type failed, which actual line). Code reusibility is a lesser concern inside of tests, but you do end up with two almost identical tests.",
      "revId": "cc8d4524f44a7c350f60dd12fa3ebef8d7cd5c9e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cbce20b9_2d7dbaee",
        "filename": "pc/peerconnection_integrationtest.cc",
        "patchSetId": 3
      },
      "lineNbr": 4322,
      "author": {
        "id": 5613
      },
      "writtenOn": "2018-09-25T09:04:13Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "1b7ee532_ae16dcd7",
      "revId": "cc8d4524f44a7c350f60dd12fa3ebef8d7cd5c9e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dd03aefa_27b570d7",
        "filename": "pc/peerconnection_integrationtest.cc",
        "patchSetId": 3
      },
      "lineNbr": 4333,
      "author": {
        "id": 5234
      },
      "writtenOn": "2018-09-24T13:31:58Z",
      "side": 1,
      "message": "Maybe this part (and the below expectations on |audio_receiver| and |video_receiver|) could be written more clearly with std::any_of.",
      "range": {
        "startLine": 4320,
        "startChar": 0,
        "endLine": 4333,
        "endChar": 5
      },
      "revId": "cc8d4524f44a7c350f60dd12fa3ebef8d7cd5c9e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f936b0dc_56e45207",
        "filename": "pc/peerconnection_integrationtest.cc",
        "patchSetId": 3
      },
      "lineNbr": 4333,
      "author": {
        "id": 5613
      },
      "writtenOn": "2018-09-25T09:04:13Z",
      "side": 1,
      "message": "split the test instead.\nDone",
      "parentUuid": "dd03aefa_27b570d7",
      "range": {
        "startLine": 4320,
        "startChar": 0,
        "endLine": 4333,
        "endChar": 5
      },
      "revId": "cc8d4524f44a7c350f60dd12fa3ebef8d7cd5c9e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "77b303ee_637f4b87",
        "filename": "video/rtp_video_stream_receiver.cc",
        "patchSetId": 3
      },
      "lineNbr": 685,
      "author": {
        "id": 5142
      },
      "writtenOn": "2018-09-24T15:10:15Z",
      "side": 1,
      "message": "This assumes we only ever have one SSRC per receiver. Is this correct? I thought it was possible for multiple SSRCs to go to the same receiver, like special codecs or multiple layers or other magic? +hta\n\nIf so I\u0027m wondering if we need ContributingSources to be a helper class for both SSRCs and CSRCs (renaming it RtpSourcesRecord or something) so that we can do this above where we now only update contributing_sources_:\nsynchronization_sources_.Update(now_ms, {packet.Ssrc()});",
      "revId": "cc8d4524f44a7c350f60dd12fa3ebef8d7cd5c9e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9c88b1e1_95cf7fac",
        "filename": "video/rtp_video_stream_receiver.cc",
        "patchSetId": 3
      },
      "lineNbr": 685,
      "author": {
        "id": 5613
      },
      "writtenOn": "2018-09-25T09:04:13Z",
      "side": 1,
      "message": "I think it\u0027s safe.\n\n1) multiple layers: In that case the same SSRC is used (which is in fact quite confusing!)\nI\u0027m not sure if vice sets the CSRC either in that case :(\n\n2) special codecs: checked with brandtr@\nflex-fec uses different SSRC. But does not really need to be shown here.\nMaybe one might argue that these should be show in contributing sources??\nBut that also feels like a different discussion.\n\n3) Other magic: checked with Magica de Hex, but she was busy with potions right now,\nand promised to get back after perf.\n\nWDYT?",
      "parentUuid": "77b303ee_637f4b87",
      "revId": "cc8d4524f44a7c350f60dd12fa3ebef8d7cd5c9e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6b91076e_1d20626a",
        "filename": "video/rtp_video_stream_receiver.cc",
        "patchSetId": 3
      },
      "lineNbr": 685,
      "author": {
        "id": 5234
      },
      "writtenOn": "2018-09-25T09:27:45Z",
      "side": 1,
      "message": "\u003e 2) special codecs: checked with brandtr@\n\u003e flex-fec uses different SSRC. But does not really need to be shown here.\n\u003e Maybe one might argue that these should be show in contributing sources??\n\u003e But that also feels like a different discussion.\n\nPackets on the flexfec ssrc should be demuxed to FlexfecReceiver::OnRtpPacket. Packets *recovered* by flexfec will enter OnRtpPacket here (if and only if they have our ssrc), and hence be accounted for. Which sounds reasonable to me.\n\nNot sure how things will change with MID demuxing, but I hope we can\u0027t have mid-stream ssrc changes.",
      "parentUuid": "9c88b1e1_95cf7fac",
      "revId": "cc8d4524f44a7c350f60dd12fa3ebef8d7cd5c9e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "df175d2f_487b460d",
        "filename": "video/rtp_video_stream_receiver.cc",
        "patchSetId": 3
      },
      "lineNbr": 685,
      "author": {
        "id": 5142
      },
      "writtenOn": "2018-09-25T16:12:32Z",
      "side": 1,
      "message": "I don\u0027t know enough about this, but sure. We can always fix it later if its a problem.",
      "parentUuid": "6b91076e_1d20626a",
      "revId": "cc8d4524f44a7c350f60dd12fa3ebef8d7cd5c9e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    }
  ]
}