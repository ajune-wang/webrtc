{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "be796c2a_dcd9c8e6",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 5019
      },
      "writtenOn": "2021-01-13T15:15:35Z",
      "side": 1,
      "message": "1st pass catching small simple things,\nI still haven\u0027t look at the overall refactoring.",
      "revId": "3d1f3ec7ec382230783b2751c5394d9e234239b8",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c968f853_a667da90",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 5019
      },
      "writtenOn": "2021-01-13T17:31:34Z",
      "side": 1,
      "message": "I think I got overall idea. Might be helpful to be a bit more detailed in the description:\n\nOne thing this change is doing is merging two helper classes,\nAnother - replace direct access to structs with indirect access via accessors.\nboth lgtm, I just have lot\u0027s of nits (here is some more)",
      "revId": "3d1f3ec7ec382230783b2751c5394d9e234239b8",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "23c7839d_a22a6d29",
        "filename": "media/engine/simulcast_encoder_adapter.cc",
        "patchSetId": 3
      },
      "lineNbr": 75,
      "author": {
        "id": 5019
      },
      "writtenOn": "2021-01-13T15:15:35Z",
      "side": 1,
      "message": "https://google.github.io/styleguide/cppguide.html#Structs_vs._Tuples\n\n\"Prefer to use a struct instead of a pair or a tuple whenever the elements can have meaningful names.\"\n\n(e.g. https://webrtc.googlesource.com/src/+/refs/heads/master/modules/video_coding/svc/svc_rate_allocator.cc#34 )",
      "range": {
        "startLine": 74,
        "startChar": 3,
        "endLine": 75,
        "endChar": 25
      },
      "revId": "3d1f3ec7ec382230783b2751c5394d9e234239b8",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9eab6d14_c9004a3f",
        "filename": "media/engine/simulcast_encoder_adapter.cc",
        "patchSetId": 3
      },
      "lineNbr": 75,
      "author": {
        "id": 5524
      },
      "writtenOn": "2021-01-13T20:30:49Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "23c7839d_a22a6d29",
      "range": {
        "startLine": 74,
        "startChar": 3,
        "endLine": 75,
        "endChar": 25
      },
      "revId": "3d1f3ec7ec382230783b2751c5394d9e234239b8",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d0851a2e_820f4ec2",
        "filename": "media/engine/simulcast_encoder_adapter.cc",
        "patchSetId": 3
      },
      "lineNbr": 82,
      "author": {
        "id": 5019
      },
      "writtenOn": "2021-01-13T17:31:34Z",
      "side": 1,
      "message": "or avoid wrapping first_active_stream into optional by using different condition:\nif (num_active_streams \u003d\u003d 0) {\n  first_active_stream \u003d i;\n}\n++num_active_streams;",
      "range": {
        "startLine": 82,
        "startChar": 6,
        "endLine": 82,
        "endChar": 31
      },
      "revId": "3d1f3ec7ec382230783b2751c5394d9e234239b8",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7393da78_db375d35",
        "filename": "media/engine/simulcast_encoder_adapter.cc",
        "patchSetId": 3
      },
      "lineNbr": 238,
      "author": {
        "id": 5019
      },
      "writtenOn": "2021-01-13T15:15:35Z",
      "side": 1,
      "message": "personally I do not bother commenting out parameter names when function body is empty.",
      "range": {
        "startLine": 238,
        "startChar": 27,
        "endLine": 238,
        "endChar": 54
      },
      "revId": "3d1f3ec7ec382230783b2751c5394d9e234239b8",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "834eecf2_fa097b8f",
        "filename": "media/engine/simulcast_encoder_adapter.cc",
        "patchSetId": 3
      },
      "lineNbr": 238,
      "author": {
        "id": 5524
      },
      "writtenOn": "2021-01-13T20:30:49Z",
      "side": 1,
      "message": "I get nagged by the ide, so I do that to avoid the squiggly line :p",
      "parentUuid": "7393da78_db375d35",
      "range": {
        "startLine": 238,
        "startChar": 27,
        "endLine": 238,
        "endChar": 54
      },
      "revId": "3d1f3ec7ec382230783b2751c5394d9e234239b8",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9db9b195_df43c12a",
        "filename": "media/engine/simulcast_encoder_adapter.cc",
        "patchSetId": 3
      },
      "lineNbr": 247,
      "author": {
        "id": 5019
      },
      "writtenOn": "2021-01-13T17:31:34Z",
      "side": 1,
      "message": "It is on purpose encoder_contexts_ and stored_encoders_ keep encoders in opposite orders? or order doesn\u0027t matter?\nIt might be nice to add a comment about it, since here it looks strange to reverse the order.",
      "range": {
        "startLine": 247,
        "startChar": 22,
        "endLine": 247,
        "endChar": 30
      },
      "revId": "3d1f3ec7ec382230783b2751c5394d9e234239b8",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "03fc3623_50df38b3",
        "filename": "media/engine/simulcast_encoder_adapter.cc",
        "patchSetId": 3
      },
      "lineNbr": 247,
      "author": {
        "id": 5524
      },
      "writtenOn": "2021-01-14T13:04:56Z",
      "side": 1,
      "message": "Order in stored_encoders_ doesn\u0027t matter. It\u0027s also an std::stack, so there\u0027s not much choice ðŸ˜Š \nCan add a comment though.",
      "parentUuid": "9db9b195_df43c12a",
      "range": {
        "startLine": 247,
        "startChar": 22,
        "endLine": 247,
        "endChar": 30
      },
      "revId": "3d1f3ec7ec382230783b2751c5394d9e234239b8",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "565ccc83_cff673c5",
        "filename": "media/engine/simulcast_encoder_adapter.cc",
        "patchSetId": 3
      },
      "lineNbr": 289,
      "author": {
        "id": 5019
      },
      "writtenOn": "2021-01-13T17:31:34Z",
      "side": 1,
      "message": "why create rate_allocator on heap instead on stack like it was before?\nhttps://abseil.io/tips/187",
      "range": {
        "startLine": 289,
        "startChar": 41,
        "endLine": 289,
        "endChar": 55
      },
      "revId": "3d1f3ec7ec382230783b2751c5394d9e234239b8",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0a943be7_687e767b",
        "filename": "media/engine/simulcast_encoder_adapter.cc",
        "patchSetId": 3
      },
      "lineNbr": 289,
      "author": {
        "id": 5524
      },
      "writtenOn": "2021-01-14T13:04:56Z",
      "side": 1,
      "message": "Because it will soon possibly be an SvcRateAllocator instead.",
      "parentUuid": "565ccc83_cff673c5",
      "range": {
        "startLine": 289,
        "startChar": 41,
        "endLine": 289,
        "endChar": 55
      },
      "revId": "3d1f3ec7ec382230783b2751c5394d9e234239b8",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3fa141bc_b3abfdee",
        "filename": "media/engine/simulcast_encoder_adapter.cc",
        "patchSetId": 3
      },
      "lineNbr": 302,
      "author": {
        "id": 5019
      },
      "writtenOn": "2021-01-13T15:15:35Z",
      "side": 1,
      "message": "what does \u0027vec\u0027 mean? (if it is short for vector, then do not cut words, and also this variable is not a vector).\n\nwould `spatial_layers` or `simulcast_streams` be more appropriate names for this variable?",
      "range": {
        "startLine": 302,
        "startChar": 7,
        "endLine": 302,
        "endChar": 16
      },
      "revId": "3d1f3ec7ec382230783b2751c5394d9e234239b8",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "23a51a4e_9a2dfbf2",
        "filename": "media/engine/simulcast_encoder_adapter.cc",
        "patchSetId": 3
      },
      "lineNbr": 302,
      "author": {
        "id": 5019
      },
      "writtenOn": "2021-01-13T15:15:35Z",
      "side": 1,
      "message": "it might be cleaner to write it\nrtc::ArrayView\u003cSpatialLayer\u003e layer_vec(codec_.simulcastStream).\n\n(i.e instead of `auto v \u003d T(params);` write `T v(params);`)\n\nEven clearer is to capture number of streams too (otherwise, why do you want ArrayView in the first place?):\nrtc::ArrayView\u003cSpatialLayer\u003e layer_vec(codec_.simulcastStream, number_of_streams).",
      "range": {
        "startLine": 302,
        "startChar": 2,
        "endLine": 302,
        "endChar": 72
      },
      "revId": "3d1f3ec7ec382230783b2751c5394d9e234239b8",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5d32a8ec_70c148e6",
        "filename": "media/engine/simulcast_encoder_adapter.cc",
        "patchSetId": 3
      },
      "lineNbr": 302,
      "author": {
        "id": 5524
      },
      "writtenOn": "2021-01-13T20:30:49Z",
      "side": 1,
      "message": "Not vector as in std::vector, no. Changed to spatial layers, since that can sort of be applied to both simulcast streams and svc spatial layers.",
      "parentUuid": "3fa141bc_b3abfdee",
      "range": {
        "startLine": 302,
        "startChar": 7,
        "endLine": 302,
        "endChar": 16
      },
      "revId": "3d1f3ec7ec382230783b2751c5394d9e234239b8",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ab319ec3_e18ef455",
        "filename": "media/engine/simulcast_encoder_adapter.cc",
        "patchSetId": 3
      },
      "lineNbr": 302,
      "author": {
        "id": 5524
      },
      "writtenOn": "2021-01-13T20:30:49Z",
      "side": 1,
      "message": "It\u0027s this way since it\u0027s going to be updated to\nauto layer_vec \u003d is_vp9 ? rtc::ArrayView\u003cSpatialLayer\u003e(codec_.spatialLayers) : rtc::ArrayView\u003cSpatialLayer\u003e(codec_.simulcastStream);\n\nI can change it, but I\u0027ll just change it back again later..?\n\nGood point about the size though, but it should be kMaxSimulcastStreams (and kMaxSpatialLayers for vp9 when that\u0027s added).",
      "parentUuid": "23a51a4e_9a2dfbf2",
      "range": {
        "startLine": 302,
        "startChar": 2,
        "endLine": 302,
        "endChar": 72
      },
      "revId": "3d1f3ec7ec382230783b2751c5394d9e234239b8",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "490b2f6b_83194df4",
        "filename": "media/engine/simulcast_encoder_adapter.cc",
        "patchSetId": 3
      },
      "lineNbr": 302,
      "author": {
        "id": 5019
      },
      "writtenOn": "2021-01-14T11:42:09Z",
      "side": 1,
      "message": "why size should be kMaxStreams?\ncode below only used to search up to number_of_streams elements.\n\n(e.g. minmax_element would now search through all kMaxStreams instead of just number_of_streams)",
      "parentUuid": "ab319ec3_e18ef455",
      "range": {
        "startLine": 302,
        "startChar": 2,
        "endLine": 302,
        "endChar": 72
      },
      "revId": "3d1f3ec7ec382230783b2751c5394d9e234239b8",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "88bd4344_2e10d774",
        "filename": "media/engine/simulcast_encoder_adapter.cc",
        "patchSetId": 3
      },
      "lineNbr": 302,
      "author": {
        "id": 5019
      },
      "writtenOn": "2021-01-14T11:42:09Z",
      "side": 1,
      "message": "I think we need to somehow agree on meaning of terms\n\"layer\", \"simulcast\", \"svc\"\nWe keep using same words meaning different concepts.\n(and it doesn\u0027t help that webrtc glossary and wikipedia use different meanings for  \"svc\":\nhttps://webrtcglossary.com/svc/\nhttps://en.wikipedia.org/wiki/Scalable_Video_Coding )",
      "parentUuid": "5d32a8ec_70c148e6",
      "range": {
        "startLine": 302,
        "startChar": 7,
        "endLine": 302,
        "endChar": 16
      },
      "revId": "3d1f3ec7ec382230783b2751c5394d9e234239b8",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "69ffd0cb_7ea030da",
        "filename": "media/engine/simulcast_encoder_adapter.cc",
        "patchSetId": 3
      },
      "lineNbr": 304,
      "author": {
        "id": 5019
      },
      "writtenOn": "2021-01-13T15:15:35Z",
      "side": 1,
      "message": "if std::end(layer_vec) \u003d\u003d std::begin(layer_vec) + number_of_streams, you may use container version:\n\nconst auto minmax \u003d absl::c_minmax_element(layer_vec);",
      "range": {
        "startLine": 304,
        "startChar": 29,
        "endLine": 304,
        "endChar": 71
      },
      "revId": "3d1f3ec7ec382230783b2751c5394d9e234239b8",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "40e085a9_2c409160",
        "filename": "media/engine/simulcast_encoder_adapter.cc",
        "patchSetId": 3
      },
      "lineNbr": 304,
      "author": {
        "id": 5524
      },
      "writtenOn": "2021-01-13T20:30:49Z",
      "side": 1,
      "message": "Ah, cool!",
      "parentUuid": "69ffd0cb_7ea030da",
      "range": {
        "startLine": 304,
        "startChar": 29,
        "endLine": 304,
        "endChar": 71
      },
      "revId": "3d1f3ec7ec382230783b2751c5394d9e234239b8",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2f03e883_d8d09171",
        "filename": "media/engine/simulcast_encoder_adapter.cc",
        "patchSetId": 3
      },
      "lineNbr": 307,
      "author": {
        "id": 5019
      },
      "writtenOn": "2021-01-13T15:15:35Z",
      "side": 1,
      "message": "or\nlowest_resolution_stream_index \u003d minmax.first - layer_vec.begin();",
      "range": {
        "startLine": 307,
        "startChar": 6,
        "endLine": 307,
        "endChar": 56
      },
      "revId": "3d1f3ec7ec382230783b2751c5394d9e234239b8",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "eaa5a825_af0203e5",
        "filename": "media/engine/simulcast_encoder_adapter.cc",
        "patchSetId": 3
      },
      "lineNbr": 307,
      "author": {
        "id": 5524
      },
      "writtenOn": "2021-01-13T20:30:49Z",
      "side": 1,
      "message": "Done.",
      "parentUuid": "2f03e883_d8d09171",
      "range": {
        "startLine": 307,
        "startChar": 6,
        "endLine": 307,
        "endChar": 56
      },
      "revId": "3d1f3ec7ec382230783b2751c5394d9e234239b8",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "19b3c6f8_29253389",
        "filename": "media/engine/simulcast_encoder_adapter.cc",
        "patchSetId": 3
      },
      "lineNbr": 336,
      "author": {
        "id": 5019
      },
      "writtenOn": "2021-01-13T17:31:34Z",
      "side": 1,
      "message": "This function is very large, so prefer to keep scope of each variable smaller\n(i.e. why increase scope of the encoder_info variable?)",
      "range": {
        "startLine": 336,
        "startChar": 9,
        "endLine": 336,
        "endChar": 27
      },
      "revId": "3d1f3ec7ec382230783b2751c5394d9e234239b8",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "00560301_07f098b0",
        "filename": "media/engine/simulcast_encoder_adapter.cc",
        "patchSetId": 3
      },
      "lineNbr": 336,
      "author": {
        "id": 5524
      },
      "writtenOn": "2021-01-14T13:04:56Z",
      "side": 1,
      "message": "The instance will be reused in a follow-up, and native_scalability will not look only the the current encoder_info.supports_simulcast. I can postpone that change till then though.",
      "parentUuid": "19b3c6f8_29253389",
      "range": {
        "startLine": 336,
        "startChar": 9,
        "endLine": 336,
        "endChar": 27
      },
      "revId": "3d1f3ec7ec382230783b2751c5394d9e234239b8",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7b8a47f8_eb864092",
        "filename": "media/engine/simulcast_encoder_adapter.cc",
        "patchSetId": 3
      },
      "lineNbr": 397,
      "author": {
        "id": 5019
      },
      "writtenOn": "2021-01-13T15:15:35Z",
      "side": 1,
      "message": "you do not need else after break.",
      "range": {
        "startLine": 397,
        "startChar": 6,
        "endLine": 397,
        "endChar": 10
      },
      "revId": "3d1f3ec7ec382230783b2751c5394d9e234239b8",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ca89fba9_44ecb9b5",
        "filename": "media/engine/simulcast_encoder_adapter.cc",
        "patchSetId": 3
      },
      "lineNbr": 397,
      "author": {
        "id": 5524
      },
      "writtenOn": "2021-01-13T20:30:49Z",
      "side": 1,
      "message": "Done.",
      "parentUuid": "7b8a47f8_eb864092",
      "range": {
        "startLine": 397,
        "startChar": 6,
        "endLine": 397,
        "endChar": 10
      },
      "revId": "3d1f3ec7ec382230783b2751c5394d9e234239b8",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "312c28e3_d3149398",
        "filename": "media/engine/simulcast_encoder_adapter.cc",
        "patchSetId": 3
      },
      "lineNbr": 450,
      "author": {
        "id": 5019
      },
      "writtenOn": "2021-01-13T15:15:35Z",
      "side": 1,
      "message": "it seems si is not used for anything other than taking element from encoder_context_,\nso may be use ranged-based for loop.",
      "range": {
        "startLine": 450,
        "startChar": 7,
        "endLine": 450,
        "endChar": 16
      },
      "revId": "3d1f3ec7ec382230783b2751c5394d9e234239b8",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1d94539f_66b4d60d",
        "filename": "media/engine/simulcast_encoder_adapter.cc",
        "patchSetId": 3
      },
      "lineNbr": 450,
      "author": {
        "id": 5524
      },
      "writtenOn": "2021-01-13T20:30:49Z",
      "side": 1,
      "message": "Done. Though I\u0027ll change it back later ;)",
      "parentUuid": "312c28e3_d3149398",
      "range": {
        "startLine": 450,
        "startChar": 7,
        "endLine": 450,
        "endChar": 16
      },
      "revId": "3d1f3ec7ec382230783b2751c5394d9e234239b8",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ff3f6490_6206cc72",
        "filename": "media/engine/simulcast_encoder_adapter.cc",
        "patchSetId": 3
      },
      "lineNbr": 451,
      "author": {
        "id": 5019
      },
      "writtenOn": "2021-01-13T15:15:35Z",
      "side": 1,
      "message": "the body of the loop looks large enough to motivate longer, more descriptive name.",
      "range": {
        "startLine": 451,
        "startChar": 10,
        "endLine": 451,
        "endChar": 11
      },
      "revId": "3d1f3ec7ec382230783b2751c5394d9e234239b8",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "47421f40_8c9f605e",
        "filename": "media/engine/simulcast_encoder_adapter.cc",
        "patchSetId": 3
      },
      "lineNbr": 451,
      "author": {
        "id": 5524
      },
      "writtenOn": "2021-01-13T20:30:49Z",
      "side": 1,
      "message": "Alright, changed it to \u0027layer\u0027 since that\u0027s how it\u0027s conceptually used here.",
      "parentUuid": "ff3f6490_6206cc72",
      "range": {
        "startLine": 451,
        "startChar": 10,
        "endLine": 451,
        "endChar": 11
      },
      "revId": "3d1f3ec7ec382230783b2751c5394d9e234239b8",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "24984098_202b4331",
        "filename": "media/engine/simulcast_encoder_adapter.cc",
        "patchSetId": 3
      },
      "lineNbr": 560,
      "author": {
        "id": 5019
      },
      "writtenOn": "2021-01-13T15:15:35Z",
      "side": 1,
      "message": "ditto, prefer longer name.",
      "range": {
        "startLine": 560,
        "startChar": 20,
        "endLine": 560,
        "endChar": 21
      },
      "revId": "3d1f3ec7ec382230783b2751c5394d9e234239b8",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "153b2cd3_b5d29a56",
        "filename": "media/engine/simulcast_encoder_adapter.cc",
        "patchSetId": 3
      },
      "lineNbr": 560,
      "author": {
        "id": 5524
      },
      "writtenOn": "2021-01-13T20:30:49Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "24984098_202b4331",
      "range": {
        "startLine": 560,
        "startChar": 20,
        "endLine": 560,
        "endChar": 21
      },
      "revId": "3d1f3ec7ec382230783b2751c5394d9e234239b8",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cf85cd33_73661662",
        "filename": "media/engine/simulcast_encoder_adapter.cc",
        "patchSetId": 3
      },
      "lineNbr": 612,
      "author": {
        "id": 5019
      },
      "writtenOn": "2021-01-13T15:15:35Z",
      "side": 1,
      "message": "Here body is small enough, so `c` looks good.",
      "range": {
        "startLine": 612,
        "startChar": 4,
        "endLine": 612,
        "endChar": 5
      },
      "revId": "3d1f3ec7ec382230783b2751c5394d9e234239b8",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7ef40129_574f4085",
        "filename": "media/engine/simulcast_encoder_adapter.cc",
        "patchSetId": 3
      },
      "lineNbr": 657,
      "author": {
        "id": 5019
      },
      "writtenOn": "2021-01-13T15:15:35Z",
      "side": 1,
      "message": "why introduce this alias? (it\u0027s name doesn\u0027t look clearer than the original variable)",
      "range": {
        "startLine": 657,
        "startChar": 22,
        "endLine": 657,
        "endChar": 31
      },
      "revId": "3d1f3ec7ec382230783b2751c5394d9e234239b8",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "84fede04_ff2cccf2",
        "filename": "media/engine/simulcast_encoder_adapter.cc",
        "patchSetId": 3
      },
      "lineNbr": 657,
      "author": {
        "id": 5524
      },
      "writtenOn": "2021-01-13T20:30:49Z",
      "side": 1,
      "message": "Because in a follow-up it could be an alias for inst.spatialLayers instead.\nChanged name from layer_vec to spatial_layers btw.",
      "parentUuid": "7ef40129_574f4085",
      "range": {
        "startLine": 657,
        "startChar": 22,
        "endLine": 657,
        "endChar": 31
      },
      "revId": "3d1f3ec7ec382230783b2751c5394d9e234239b8",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "db27678c_5c4ccdd4",
        "filename": "media/engine/simulcast_encoder_adapter.h",
        "patchSetId": 3
      },
      "lineNbr": 74,
      "author": {
        "id": 5019
      },
      "writtenOn": "2021-01-13T15:15:35Z",
      "side": 1,
      "message": "prefer int over uint8_t\n\nhttps://google.github.io/styleguide/cppguide.html#Integer_Types\n\n\"You should not use the unsigned integer types such as uint32_t, unless there is a valid reason such as representing a bit pattern rather than a number, or you need defined overflow modulo 2^N.\"",
      "range": {
        "startLine": 74,
        "startChar": 19,
        "endLine": 74,
        "endChar": 26
      },
      "revId": "3d1f3ec7ec382230783b2751c5394d9e234239b8",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2e1f633f_12a5fa34",
        "filename": "media/engine/simulcast_encoder_adapter.h",
        "patchSetId": 3
      },
      "lineNbr": 74,
      "author": {
        "id": 5019
      },
      "writtenOn": "2021-01-13T15:15:35Z",
      "side": 1,
      "message": "remove trailing _",
      "range": {
        "startLine": 74,
        "startChar": 37,
        "endLine": 74,
        "endChar": 38
      },
      "revId": "3d1f3ec7ec382230783b2751c5394d9e234239b8",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ac72d5c3_a218a40e",
        "filename": "media/engine/simulcast_encoder_adapter.h",
        "patchSetId": 3
      },
      "lineNbr": 74,
      "author": {
        "id": 5524
      },
      "writtenOn": "2021-01-13T20:30:49Z",
      "side": 1,
      "message": "Done. This was just a lazy copy-paste.",
      "parentUuid": "db27678c_5c4ccdd4",
      "range": {
        "startLine": 74,
        "startChar": 19,
        "endLine": 74,
        "endChar": 26
      },
      "revId": "3d1f3ec7ec382230783b2751c5394d9e234239b8",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "82bea8ad_426a3672",
        "filename": "media/engine/simulcast_encoder_adapter.h",
        "patchSetId": 3
      },
      "lineNbr": 74,
      "author": {
        "id": 5524
      },
      "writtenOn": "2021-01-13T20:30:49Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "2e1f633f_12a5fa34",
      "range": {
        "startLine": 74,
        "startChar": 37,
        "endLine": 74,
        "endChar": 38
      },
      "revId": "3d1f3ec7ec382230783b2751c5394d9e234239b8",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e63364eb_cd1bbe01",
        "filename": "media/engine/simulcast_encoder_adapter.h",
        "patchSetId": 3
      },
      "lineNbr": 79,
      "author": {
        "id": 5019
      },
      "writtenOn": "2021-01-13T15:15:35Z",
      "side": 1,
      "message": "does this class support assignment?\nIf yes, declare the operator explicitly (I suspect it might also need explicit implementation because move constructor has one).\n\nIf not, delete it:\nEncoderContext\u0026 operator\u003d(EncoderContext\u0026\u0026) \u003d delete;\n(no need to delete both copy and move assignment, deleting one is enough)",
      "range": {
        "startLine": 78,
        "startChar": 4,
        "endLine": 79,
        "endChar": 19
      },
      "revId": "3d1f3ec7ec382230783b2751c5394d9e234239b8",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3696ea75_bc4a749c",
        "filename": "media/engine/simulcast_encoder_adapter.h",
        "patchSetId": 3
      },
      "lineNbr": 79,
      "author": {
        "id": 5524
      },
      "writtenOn": "2021-01-13T20:30:49Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e63364eb_cd1bbe01",
      "range": {
        "startLine": 78,
        "startChar": 4,
        "endLine": 79,
        "endChar": 19
      },
      "revId": "3d1f3ec7ec382230783b2751c5394d9e234239b8",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "906e0130_1579da05",
        "filename": "media/engine/simulcast_encoder_adapter.h",
        "patchSetId": 3
      },
      "lineNbr": 87,
      "author": {
        "id": 5019
      },
      "writtenOn": "2021-01-13T15:15:35Z",
      "side": 1,
      "message": "can encoder be nullptr? (if not - prefer to return reference)",
      "range": {
        "startLine": 86,
        "startChar": 0,
        "endLine": 87,
        "endChar": 66
      },
      "revId": "3d1f3ec7ec382230783b2751c5394d9e234239b8",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "de2d53bf_417ffcf9",
        "filename": "media/engine/simulcast_encoder_adapter.h",
        "patchSetId": 3
      },
      "lineNbr": 87,
      "author": {
        "id": 5524
      },
      "writtenOn": "2021-01-13T20:30:49Z",
      "side": 1,
      "message": "It could, after Release - but since that\u0027s no longer possible let\u0027s change it.",
      "parentUuid": "906e0130_1579da05",
      "range": {
        "startLine": 86,
        "startChar": 0,
        "endLine": 87,
        "endChar": 66
      },
      "revId": "3d1f3ec7ec382230783b2751c5394d9e234239b8",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6ed5e3a8_9d7fcc98",
        "filename": "media/engine/simulcast_encoder_adapter.h",
        "patchSetId": 3
      },
      "lineNbr": 101,
      "author": {
        "id": 5019
      },
      "writtenOn": "2021-01-13T15:15:35Z",
      "side": 1,
      "message": "is it valid to use the EncoderContext after Release is called?\nif not, you may annotate it:\nstd::unique_ptr\u003cVideoEncoder\u003e Release() \u0026\u0026;\n\nthat would force user to move context before encoder is released:\nauto encoder \u003d std::move(context).Release();\n\nand would generate a compiler warning if context is used after such move.\n\nhttps://google.github.io/styleguide/cppguide.html#Forwarding_references\n\"You may use them to define \u0026\u0026-qualified methods that logically \"consume\" *this, leaving it in an unusable or empty state.\"",
      "range": {
        "startLine": 101,
        "startChar": 35,
        "endLine": 101,
        "endChar": 43
      },
      "revId": "3d1f3ec7ec382230783b2751c5394d9e234239b8",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ab40ac77_e379ba56",
        "filename": "media/engine/simulcast_encoder_adapter.h",
        "patchSetId": 3
      },
      "lineNbr": 101,
      "author": {
        "id": 5524
      },
      "writtenOn": "2021-01-13T20:30:49Z",
      "side": 1,
      "message": "That\u0027s neat! Didn\u0027t know you could do that, thanks for the tip",
      "parentUuid": "6ed5e3a8_9d7fcc98",
      "range": {
        "startLine": 101,
        "startChar": 35,
        "endLine": 101,
        "endChar": 43
      },
      "revId": "3d1f3ec7ec382230783b2751c5394d9e234239b8",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3a227ef9_bcdedf66",
        "filename": "media/engine/simulcast_encoder_adapter.h",
        "patchSetId": 3
      },
      "lineNbr": 101,
      "author": {
        "id": 5019
      },
      "writtenOn": "2021-01-14T11:42:09Z",
      "side": 1,
      "message": "This feature exists since c++11, but became allowed by style guide only recently (~half a year ago)",
      "parentUuid": "ab40ac77_e379ba56",
      "range": {
        "startLine": 101,
        "startChar": 35,
        "endLine": 101,
        "endChar": 43
      },
      "revId": "3d1f3ec7ec382230783b2751c5394d9e234239b8",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "83dda30b_df1f7d8a",
        "filename": "media/engine/simulcast_encoder_adapter.h",
        "patchSetId": 3
      },
      "lineNbr": 102,
      "author": {
        "id": 5019
      },
      "writtenOn": "2021-01-13T17:31:34Z",
      "side": 1,
      "message": "can it help to use webrtc::Timestamp ?\n(at least do not use unsigned type with fixed width)",
      "range": {
        "startLine": 102,
        "startChar": 20,
        "endLine": 102,
        "endChar": 28
      },
      "revId": "3d1f3ec7ec382230783b2751c5394d9e234239b8",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "383b0076_08582678",
        "filename": "media/engine/simulcast_encoder_adapter.h",
        "patchSetId": 3
      },
      "lineNbr": 102,
      "author": {
        "id": 5524
      },
      "writtenOn": "2021-01-14T13:04:56Z",
      "side": 1,
      "message": "Yeah, I _think_ timestamp_us should work here, so let\u0027s change to Timestamp",
      "parentUuid": "83dda30b_df1f7d8a",
      "range": {
        "startLine": 102,
        "startChar": 20,
        "endLine": 102,
        "endChar": 28
      },
      "revId": "3d1f3ec7ec382230783b2751c5394d9e234239b8",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a96455a6_bed4e083",
        "filename": "media/engine/simulcast_encoder_adapter.h",
        "patchSetId": 3
      },
      "lineNbr": 138,
      "author": {
        "id": 5019
      },
      "writtenOn": "2021-01-13T17:31:34Z",
      "side": 1,
      "message": "previous function uses `stream_idx` as 1st parameter. Does it has the same meaning?",
      "range": {
        "startLine": 138,
        "startChar": 29,
        "endLine": 138,
        "endChar": 40
      },
      "revId": "3d1f3ec7ec382230783b2751c5394d9e234239b8",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "10cde11a_40d61177",
        "filename": "media/engine/simulcast_encoder_adapter.h",
        "patchSetId": 3
      },
      "lineNbr": 138,
      "author": {
        "id": 5524
      },
      "writtenOn": "2021-01-14T13:04:56Z",
      "side": 1,
      "message": "Yes, renamed.",
      "parentUuid": "a96455a6_bed4e083",
      "range": {
        "startLine": 138,
        "startChar": 29,
        "endLine": 138,
        "endChar": 40
      },
      "revId": "3d1f3ec7ec382230783b2751c5394d9e234239b8",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4cf80677_a8c901fa",
        "filename": "media/engine/simulcast_encoder_adapter.h",
        "patchSetId": 3
      },
      "lineNbr": 141,
      "author": {
        "id": 5019
      },
      "writtenOn": "2021-01-13T17:31:34Z",
      "side": 1,
      "message": "please mention units and change type to Timestamp or int64_t (unless it is timestamp_rtp that uses 32bit wrap-around)",
      "range": {
        "startLine": 141,
        "startChar": 6,
        "endLine": 141,
        "endChar": 24
      },
      "revId": "3d1f3ec7ec382230783b2751c5394d9e234239b8",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1e3805ea_cbd2e9dd",
        "filename": "media/engine/simulcast_encoder_adapter.h",
        "patchSetId": 3
      },
      "lineNbr": 141,
      "author": {
        "id": 5524
      },
      "writtenOn": "2021-01-14T13:04:56Z",
      "side": 1,
      "message": "This method shouldn\u0027t even be in this cl, removed. :)\nAnd yes, it\u0027s the rtp timestamp - it\u0027s used as an id to match a VideoFrame objects to resulting EncodedImages.",
      "parentUuid": "4cf80677_a8c901fa",
      "range": {
        "startLine": 141,
        "startChar": 6,
        "endLine": 141,
        "endChar": 24
      },
      "revId": "3d1f3ec7ec382230783b2751c5394d9e234239b8",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7ecec57c_82eefda7",
        "filename": "media/engine/simulcast_encoder_adapter.h",
        "patchSetId": 3
      },
      "lineNbr": 150,
      "author": {
        "id": 5019
      },
      "writtenOn": "2021-01-13T17:31:34Z",
      "side": 1,
      "message": "For me a layer is set of frames (or anything else) associated with a particular spatial_id and temporal_id pair. (e.g. go/av1-spec defines it like that)\n\nDo you mind to renaming these two variables to first_active_stream_[index_]/num_active_streams_\nor first_active_encoder_/num_active_encoders_.",
      "range": {
        "startLine": 150,
        "startChar": 22,
        "endLine": 150,
        "endChar": 27
      },
      "revId": "3d1f3ec7ec382230783b2751c5394d9e234239b8",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d015ae8a_293ab804",
        "filename": "media/engine/simulcast_encoder_adapter.h",
        "patchSetId": 3
      },
      "lineNbr": 150,
      "author": {
        "id": 5524
      },
      "writtenOn": "2021-01-14T13:04:56Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7ecec57c_82eefda7",
      "range": {
        "startLine": 150,
        "startChar": 22,
        "endLine": 150,
        "endChar": 27
      },
      "revId": "3d1f3ec7ec382230783b2751c5394d9e234239b8",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    }
  ]
}