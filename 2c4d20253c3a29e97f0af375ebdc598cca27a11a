{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "34d43d03_19a02d5c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 9405
      },
      "writtenOn": "2022-05-17T21:14:04Z",
      "side": 1,
      "message": "Hi, KÃ¡ri. This CL is intended to improve thread safety in the Obj-C sdk. PTAL. Thank you.",
      "revId": "2c4d20253c3a29e97f0af375ebdc598cca27a11a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2b8286b4_a47c3bf3",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5634
      },
      "writtenOn": "2022-05-17T22:00:53Z",
      "side": 1,
      "message": "Think carefully about whether you really want this.\n\nInside WebRTC, there\u0027s been an effort to move away from blocking invokes to other threads - because they can cause surprisingly large performance hits in some situations. The tendency is to try to stay on one thread as long as possible, and if a set of operations needs to be done on another thread, one groups them together to perform them with one thread jump.\n\nAnd of course, if the task doesn\u0027t need a synchronous response, one uses PostTask, not Invoke.\n\nStill, proxying is better than accessing objects on the wrong thread. But sometimes the answer to being called on the wrong thread is just crashing (DCHECK).\n",
      "revId": "2c4d20253c3a29e97f0af375ebdc598cca27a11a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c925bf74_e21c6056",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 9405
      },
      "writtenOn": "2022-06-03T14:54:43Z",
      "side": 1,
      "message": "You\u0027re right. Proxies are inherently blocking calls, so there can be some performance costs.\n\nHowever, most of the code modified by this CL uses a proxy inside that method, like `_nativeMediaStream-\u003eAddTrack` etc.\n\nSince these APIs are Objective-C APIs, using DCHECK to force threads may surprise SDK users, and it is hard to enforce, considering that the threads being used are implementation details. I want to use a proxy instead.",
      "parentUuid": "2b8286b4_a47c3bf3",
      "revId": "2c4d20253c3a29e97f0af375ebdc598cca27a11a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "359fe1c7_58b208fd",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5634
      },
      "writtenOn": "2022-06-11T08:32:23Z",
      "side": 1,
      "message": "Explanation accepted - I assume the pointed-to object is the internal object, not the proxy (which would already do the threadjump).\n\nAwaiting Kari\u0027s review for Obj-C style reading.\n",
      "revId": "2c4d20253c3a29e97f0af375ebdc598cca27a11a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3095c18d_c06b107f",
        "filename": "sdk/objc/api/peerconnection/RTCMediaStream.mm",
        "patchSetId": 2
      },
      "lineNbr": 98,
      "author": {
        "id": 5634
      },
      "writtenOn": "2022-06-11T08:32:23Z",
      "side": 1,
      "message": "This change seems wrong. It seems to return with no action when the object is found, contrary to what the previous code was (it would assert when the object was not fund).",
      "revId": "2c4d20253c3a29e97f0af375ebdc598cca27a11a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "81c32566_10a9858d",
        "filename": "sdk/objc/api/peerconnection/RTCMediaStream.mm",
        "patchSetId": 2
      },
      "lineNbr": 98,
      "author": {
        "id": 9405
      },
      "writtenOn": "2022-06-13T01:44:50Z",
      "side": 1,
      "message": "Oops. Done.",
      "parentUuid": "3095c18d_c06b107f",
      "revId": "2c4d20253c3a29e97f0af375ebdc598cca27a11a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    }
  ]
}