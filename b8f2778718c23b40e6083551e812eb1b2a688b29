{
  "comments": [
    {
      "key": {
        "uuid": "16a3cf0a_e7fbe559",
        "filename": "pc/rtcstatscollector.cc",
        "patchSetId": 3
      },
      "lineNbr": 993,
      "author": {
        "id": 5053
      },
      "writtenOn": "2018-02-09T23:54:17Z",
      "side": 1,
      "message": "Do you need to pass along \"RtpSenderProxyWithInternal\u003cRtpSenderInternal\u003e\"s around everywhere, or could you just use the RtpSenderInternal directly?",
      "revId": "b8f2778718c23b40e6083551e812eb1b2a688b29",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a72e6250_002a69cb",
        "filename": "pc/rtcstatscollector.cc",
        "patchSetId": 3
      },
      "lineNbr": 993,
      "author": {
        "id": 5039
      },
      "writtenOn": "2018-02-10T00:07:17Z",
      "side": 1,
      "message": "I think it\u0027s probably good to standardize on one or the other. RtpSenderProxyWithInternal seems to be the precedence. It has one benefit of always working correctly for looking up senders by pointer value, since sender.get() isn\u0027t necessarily the same as sender-\u003einternal() (right?)",
      "parentUuid": "16a3cf0a_e7fbe559",
      "revId": "b8f2778718c23b40e6083551e812eb1b2a688b29",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1cfc4241_cbb4c353",
        "filename": "pc/rtcstatscollector.cc",
        "patchSetId": 3
      },
      "lineNbr": 993,
      "author": {
        "id": 5053
      },
      "writtenOn": "2018-02-12T18:12:50Z",
      "side": 1,
      "message": "Right; the reason I originally introduced this class was for RemoveTrack. We were originally just storing pointers to the inner/\"internal\" object, but for RemoveTrack, the caller passes in a pointer to a proxy object it got, which needs to be matched with an inner object. So I wanted a class that gave me both without having to \"static_cast.\" Maybe in this case static_casting would have been the lesser of two evils...\n\nBut anyway, the stats collector doesn\u0027t need to do that. And using the proxy pointers has a potential disadvantage; it would be easy to introduce an extra thread hop without realizing, by calling a method from the \"wrong\" thread. If doing this with the internal object, a DCHECK would be hit, forcing it to be called from the appropriate \"ProducePartialResultsOnFooThread\".",
      "parentUuid": "a72e6250_002a69cb",
      "revId": "b8f2778718c23b40e6083551e812eb1b2a688b29",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b5186abe_5d12c959",
        "filename": "pc/rtcstatscollector.cc",
        "patchSetId": 3
      },
      "lineNbr": 993,
      "author": {
        "id": 5142
      },
      "writtenOn": "2018-02-12T20:00:41Z",
      "side": 1,
      "message": "Not only can the thread hop impact performance, but it has lead to deadlocks in the past. Internal directly sgtm.",
      "parentUuid": "1cfc4241_cbb4c353",
      "revId": "b8f2778718c23b40e6083551e812eb1b2a688b29",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "431eb190_8ca88882",
        "filename": "pc/rtcstatscollector.cc",
        "patchSetId": 3
      },
      "lineNbr": 1005,
      "author": {
        "id": 5142
      },
      "writtenOn": "2018-02-12T20:00:41Z",
      "side": 1,
      "message": "nit: Instead of copying senders and receivers, can you pass transceiver_stats_infos_?",
      "revId": "b8f2778718c23b40e6083551e812eb1b2a688b29",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fcd670f6_2dea838d",
        "filename": "pc/rtcstatscollector.cc",
        "patchSetId": 3
      },
      "lineNbr": 1281,
      "author": {
        "id": 5142
      },
      "writtenOn": "2018-02-12T20:00:41Z",
      "side": 1,
      "message": "nit: How about (and same for video)?\nDCHECK(voice_stats.find(voice_channel-\u003emedia_channel() \u003d\u003d voice_stats.end());",
      "revId": "b8f2778718c23b40e6083551e812eb1b2a688b29",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "93a5f25c_fdb4158d",
        "filename": "pc/rtcstatscollector.cc",
        "patchSetId": 3
      },
      "lineNbr": 1318,
      "author": {
        "id": 5142
      },
      "writtenOn": "2018-02-12T20:00:41Z",
      "side": 1,
      "message": "voice_stats and video_stats elements are moved while the maps are still in use. As-is this should be safe, but what if the following happens as a bug or as a future code change?\n- What if multiple channels reference the same VoiceChannel*, this would trigger explicit std::move() of already moved channels.\n- What if code is updated to modify the contents of voice_stats after this line, internally std::map might move objects around triggering moving already moved objects.\n\nWhile sensible implementations of moving unique_ptr is the same as release() we should not assume so.\n\nCan you DCHECK element has value and use release() instead?\n\n  DCHECK(voice_stats[voice_channel-\u003emedia_channel()]);\n  voice_media_info.reset(voice_stats[voice_channel-\u003emedia_channel()].release());\n\nAnd same for video.",
      "revId": "b8f2778718c23b40e6083551e812eb1b2a688b29",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "48d055d1_37979fa8",
        "filename": "pc/trackmediainfomap.h",
        "patchSetId": 3
      },
      "lineNbr": 46,
      "author": {
        "id": 5142
      },
      "writtenOn": "2018-02-12T20:00:41Z",
      "side": 1,
      "message": "Like previously discussed, using internals directly would be good so that we don\u0027t accidentally thread jump. We can do that here too.",
      "revId": "b8f2778718c23b40e6083551e812eb1b2a688b29",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    }
  ]
}