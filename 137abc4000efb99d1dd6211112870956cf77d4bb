{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "e6bcd4e9_686709d4",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 20534
      },
      "writtenOn": "2023-09-18T08:35:10Z",
      "side": 1,
      "message": "It seems h264_packet_buffer is not used in anywhere in WebRTC, so remove it to avoid misunderstanding of code.",
      "revId": "137abc4000efb99d1dd6211112870956cf77d4bb",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2f85c3c0_0c64078d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5527
      },
      "writtenOn": "2023-09-18T08:45:31Z",
      "side": 1,
      "message": "These classes exist so that we can detangle H264 specific code from all other codecs. It has not been a high prio for us to but we are (very) slowly working on it.",
      "revId": "137abc4000efb99d1dd6211112870956cf77d4bb",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "61cc4f75_e6ef555c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 18005
      },
      "writtenOn": "2023-09-18T08:48:24Z",
      "side": 1,
      "message": "I suggest we rename this to h26x_packet_buffer.h at least? we\u0027ll be using this for shared impl for h.264 and h.265.",
      "parentUuid": "2f85c3c0_0c64078d",
      "revId": "137abc4000efb99d1dd6211112870956cf77d4bb",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3f3dd675_b3b2b81e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5527
      },
      "writtenOn": "2023-09-18T08:50:43Z",
      "side": 1,
      "message": "Can H26X specific code coexist in a clean manner?",
      "parentUuid": "61cc4f75_e6ef555c",
      "revId": "137abc4000efb99d1dd6211112870956cf77d4bb",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b36687a5_6c4e3321",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 18005
      },
      "writtenOn": "2023-09-19T01:09:15Z",
      "side": 1,
      "message": "We cannot avoid switches of codec in most of API if we merge, as FuA/StapA and NALU types are enumerated with different values for H.264 and H.265, and we have extra VPS besides SPS and PPS for H.265.\nBasic logic should be similar for both and worth a merge of impl.",
      "parentUuid": "3f3dd675_b3b2b81e",
      "revId": "137abc4000efb99d1dd6211112870956cf77d4bb",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    }
  ]
}