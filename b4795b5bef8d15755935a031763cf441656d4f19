{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "ab740b6c_e049e563",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 19549
      },
      "writtenOn": "2023-09-26T19:21:52Z",
      "side": 1,
      "message": "To test,\n- apply in Chrome\n- with Wireshark on, make a call on https://webrtc.github.io/samples/src/content/peerconnection/bandwidth/\n- check chrome://histograms, search for WebRTC.PeerConnection.SslPeerSignatureAlgorithm\n- inspect the value, convert it to hex 0x403 \n- search for that value in Wireshark, find it in the client hello signature_algorithms extensions, the servers Certificate Request and the clients Certificate Verify messages\n\nWhat we are looking for is the size of the bucket with rsa_pkcs1_sha1 (0x0201)",
      "revId": "b4795b5bef8d15755935a031763cf441656d4f19",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d6425531_8932a881",
        "filename": "p2p/base/dtls_transport_internal.h",
        "patchSetId": 2
      },
      "lineNbr": 74,
      "author": {
        "id": 19549
      },
      "writtenOn": "2023-09-26T19:21:52Z",
      "side": 1,
      "message": "inheritance seems broken here since the JSEP transport depends on DtlsTransportInternal? :-(",
      "revId": "b4795b5bef8d15755935a031763cf441656d4f19",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0b1b3ea1_7a0d1a83",
        "filename": "p2p/base/dtls_transport_internal.h",
        "patchSetId": 2
      },
      "lineNbr": 74,
      "author": {
        "id": 5634
      },
      "writtenOn": "2023-09-27T07:46:44Z",
      "side": 1,
      "message": "Depends on its interface; its implementation is further subclassed.\nThis is webrtc; you can never have too many subclasses :-)\n\nI\u0027d make this an RTC_CHECK rather than a \"return 0\"; \"if you\u0027re here, you\u0027ve instantiated the wrong level of hierarchy\".\n\nAdd a TODO to make pure virtual (as if we\u0027ll ever get to that).",
      "parentUuid": "d6425531_8932a881",
      "revId": "b4795b5bef8d15755935a031763cf441656d4f19",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ffb62337_d439822b",
        "filename": "p2p/base/dtls_transport_internal.h",
        "patchSetId": 2
      },
      "lineNbr": 74,
      "author": {
        "id": 19549
      },
      "writtenOn": "2023-09-27T08:36:03Z",
      "side": 1,
      "message": "Made it pure virtual and added it to the fake dtls transport.\n\n(is this class simply misnamed and should be DtlsTransportInterface?)",
      "parentUuid": "0b1b3ea1_7a0d1a83",
      "revId": "b4795b5bef8d15755935a031763cf441656d4f19",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2eee2e2b_d89edd40",
        "filename": "p2p/base/dtls_transport_internal.h",
        "patchSetId": 2
      },
      "lineNbr": 74,
      "author": {
        "id": 5634
      },
      "writtenOn": "2023-09-28T07:26:43Z",
      "side": 1,
      "message": "I think a lot of the Internal things here are subclasses of a (public) Interface, and define an internal interface that is then implemented by some other class.\nSometimes because depending on the implementation class would create a dependency cycle, other times for less good reasons (I suspect).\n\nBut each case requires examining the inheritance tree.\nNot touching in this CL anyway.",
      "parentUuid": "ffb62337_d439822b",
      "revId": "b4795b5bef8d15755935a031763cf441656d4f19",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dd6b6cb6_7f23c960",
        "filename": "pc/peer_connection.cc",
        "patchSetId": 2
      },
      "lineNbr": 2893,
      "author": {
        "id": 19549
      },
      "writtenOn": "2023-09-26T19:21:52Z",
      "side": 1,
      "message": "We don\u0027t seem to have the full sparse histogram used in https://chromium-review.googlesource.com/c/chromium/src/+/3378927\n\ndavidben: can (and should) we apply a lower limit here? From Wireshark i\u0027d say 0x1000 as limit and \u0026 0xfff the value?",
      "revId": "b4795b5bef8d15755935a031763cf441656d4f19",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "eac03e47_15f2aae5",
        "filename": "pc/peer_connection.cc",
        "patchSetId": 2
      },
      "lineNbr": 2893,
      "author": {
        "id": 8070
      },
      "writtenOn": "2023-09-26T20:32:27Z",
      "side": 1,
      "message": "The allocations are a bit all over the place due to some... interesting historical quirks.\nhttps://www.iana.org/assignments/tls-parameters/tls-parameters.xhtml#tls-signaturescheme\n\nIt happens that we haven\u0027t currently allocated anything with a high bit, but there\u0027s no guarantee of that. (Usually IETF likes to allocate small numbers and we\u0027ll pick large random numbers for pre-standard stuff. But there hasn\u0027t been any pre-standard signature schemes right now. Maybe there will be when we start playing with PQ here, if PQ ends up looking like that.)\n\nSo, uh, it\u0027d probably work for now, but it\u0027s fragile?\n\nI\u0027m not sure I\u0027m following the comment about \"full sparse histogram\". What\u0027s the concern with `RTC_HISTOGRAM_ENUMERATION_SPARSE`? `kSslCipherSuiteMaxValue` is 0xffff, so it seems to have been fine for cipher suites.",
      "parentUuid": "dd6b6cb6_7f23c960",
      "revId": "b4795b5bef8d15755935a031763cf441656d4f19",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e51142b5_f0e58e67",
        "filename": "pc/peer_connection.cc",
        "patchSetId": 2
      },
      "lineNbr": 2893,
      "author": {
        "id": 19549
      },
      "writtenOn": "2023-09-27T07:38:10Z",
      "side": 1,
      "message": "kSslCipherSuiteMaxValue is better!\n\nIn practice I hope we will not see much else then the ~10 values we see in Chrome so this should be light enough on UMA. And hopefully won\u0027t stay for long.",
      "parentUuid": "eac03e47_15f2aae5",
      "revId": "b4795b5bef8d15755935a031763cf441656d4f19",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "81a75607_9e4ff3bb",
        "filename": "pc/peer_connection.cc",
        "patchSetId": 2
      },
      "lineNbr": 2893,
      "author": {
        "id": 6988
      },
      "writtenOn": "2023-09-27T19:43:51Z",
      "side": 1,
      "message": "I think 0xffff is actually better. Per the other comment, these values are *not* cipher suites. So really this is only working because:\n\n1. Both cipher suites and signature schemes use 16-bit codepoints\n2. `kSslCipherSuiteMaxValue` doesn\u0027t try to be clever and shrinkwrap to the smallest cipher suite you all implement\n\nGiven that, I think it\u0027s better to just write this as 0xffff. Or `UINT16_MAX` or `std::numeric_limits\u003cuint16_t\u003e::max()` if you prefer. Or even `std::numeric_limits\u003cdecltype(ssl_peer_signature_algorithm)\u003e::max()` but that\u0027s probably a bit much. ðŸ˜Š",
      "parentUuid": "e51142b5_f0e58e67",
      "revId": "b4795b5bef8d15755935a031763cf441656d4f19",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d0845590_7a599d67",
        "filename": "pc/peer_connection.cc",
        "patchSetId": 2
      },
      "lineNbr": 2893,
      "author": {
        "id": 5602
      },
      "writtenOn": "2023-09-27T19:45:32Z",
      "side": 1,
      "message": "(Since I\u0027ve already accidentally used two different accounts on this thread, may as well go use the third! ðŸ˜‚)",
      "parentUuid": "81a75607_9e4ff3bb",
      "revId": "b4795b5bef8d15755935a031763cf441656d4f19",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "73381d1e_0478821c",
        "filename": "pc/peer_connection.cc",
        "patchSetId": 2
      },
      "lineNbr": 2893,
      "author": {
        "id": 19549
      },
      "writtenOn": "2023-09-28T08:59:25Z",
      "side": 1,
      "message": "I threw more constants at it!\n\n(and hey, you are talking to someone with the hidden agenda of contributing from a dozen different accounts :-)",
      "parentUuid": "d0845590_7a599d67",
      "revId": "b4795b5bef8d15755935a031763cf441656d4f19",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    }
  ]
}