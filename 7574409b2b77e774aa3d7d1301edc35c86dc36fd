{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "ce568979_1a786b35",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 14134
      },
      "writtenOn": "2022-06-02T20:02:37Z",
      "side": 1,
      "message": "Overall looks good with a couple of comments.\n\nIt would be better if the token could be passed to/from the caller instead of being stored in a singleton.  Singletons in a library like this create headaches because they will leak memory if WebRTC is loaded and unloaded as a shared object from the calling application.\n\nThe current design, however, does not allow the same Wayland capturer object to be used both for interaction with the portal, and for creating the capturer, so we need to stash the token somewhere inside WebRTC.  What is the possibility of passing the token back and forth in the future?",
      "revId": "7574409b2b77e774aa3d7d1301edc35c86dc36fd",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "83a818ec_7b0df9ca",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 18474
      },
      "writtenOn": "2022-06-02T20:07:41Z",
      "side": 1,
      "message": "I think we\u0027d need to modify the WebRTC Source type to allow this and then Chrome code to forward it around; and finally the DesktopCapturer \"SelectSource\" type would probably need to take something more complex than the SourceId. (The token is a string type and I think we cannot just typedef \"SourceId\" to string for Wayland and have it just work.)",
      "parentUuid": "ce568979_1a786b35",
      "revId": "7574409b2b77e774aa3d7d1301edc35c86dc36fd",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2be7a117_aede2275",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 18474
      },
      "writtenOn": "2022-06-02T20:07:41Z",
      "side": 1,
      "message": "LGTM with Mark\u0027s comments addressed.",
      "revId": "7574409b2b77e774aa3d7d1301edc35c86dc36fd",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8a28d4b0_b46c531a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 8046
      },
      "writtenOn": "2022-06-03T06:26:40Z",
      "side": 1,
      "message": "The thing is:\n1) Even though I care mostly about Firefox (where this is not necessary) and Chrome, I\u0027m trying to make it work with current WebRTC API the way it will automatically work for any other consumer, not just only Chrome.\n2) The thing that all portal calls are asynchronous make it more complicated, because at the time we return a `SourceId` from `GetSourceList()` we still don\u0027t have the restore token so we would need to either make it blocking or make it blocking/async in Chrome so it requests `SourceList` only when we are ready.",
      "parentUuid": "83a818ec_7b0df9ca",
      "revId": "7574409b2b77e774aa3d7d1301edc35c86dc36fd",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ac16199e_4854c955",
        "filename": "modules/desktop_capture/linux/wayland/base_capturer_pipewire.cc",
        "patchSetId": 3
      },
      "lineNbr": 60,
      "author": {
        "id": 14134
      },
      "writtenOn": "2022-06-02T20:02:37Z",
      "side": 1,
      "message": "Update this logging message? The failure looks like it happened when starting the capturer, not interacting with the portal.",
      "revId": "7574409b2b77e774aa3d7d1301edc35c86dc36fd",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "60827989_9a649dc0",
        "filename": "modules/desktop_capture/linux/wayland/base_capturer_pipewire.cc",
        "patchSetId": 3
      },
      "lineNbr": 60,
      "author": {
        "id": 8046
      },
      "writtenOn": "2022-06-03T06:26:40Z",
      "side": 1,
      "message": "The condition checks both the response from the portal and the result from starting the stream. Maybe we can make them separate and add logging message for both separately, but this is not related to this change and hasn\u0027t changed in this change.",
      "parentUuid": "ac16199e_4854c955",
      "revId": "7574409b2b77e774aa3d7d1301edc35c86dc36fd",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "96116508_0021266e",
        "filename": "modules/desktop_capture/linux/wayland/base_capturer_pipewire.cc",
        "patchSetId": 3
      },
      "lineNbr": 60,
      "author": {
        "id": 14134
      },
      "writtenOn": "2022-06-03T17:16:07Z",
      "side": 1,
      "message": "Should this function even attempt to call StartScreenCastStream() if is_screencast_portal_ is true?  Maybe the is_screencast_portal_ check should happen first.",
      "parentUuid": "60827989_9a649dc0",
      "revId": "7574409b2b77e774aa3d7d1301edc35c86dc36fd",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e32fc834_ef75562d",
        "filename": "modules/desktop_capture/linux/wayland/base_capturer_pipewire.cc",
        "patchSetId": 3
      },
      "lineNbr": 65,
      "author": {
        "id": 14134
      },
      "writtenOn": "2022-06-02T20:02:37Z",
      "side": 1,
      "message": "Should RestoreToken() be added to ScreenCapturePortalInterface?  Then you don\u0027t need to cast the portal_ instance here.",
      "revId": "7574409b2b77e774aa3d7d1301edc35c86dc36fd",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c7e93bb2_7a8c261a",
        "filename": "modules/desktop_capture/linux/wayland/base_capturer_pipewire.cc",
        "patchSetId": 3
      },
      "lineNbr": 65,
      "author": {
        "id": 8046
      },
      "writtenOn": "2022-06-03T06:26:40Z",
      "side": 1,
      "message": "I was thinking about it, but it would make more sense in case it can be also used by the RemoteDesktop portal, since the ScreenCapturePortalInterface is base for both. Adding new stuff to the base that is specific only to one of the portals doesn\u0027t make sense to me, but I\u0027ll move it there if you want me to.",
      "parentUuid": "e32fc834_ef75562d",
      "revId": "7574409b2b77e774aa3d7d1301edc35c86dc36fd",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f525197d_8059fc23",
        "filename": "modules/desktop_capture/linux/wayland/restore_token_manager.cc",
        "patchSetId": 3
      },
      "lineNbr": 16,
      "author": {
        "id": 14134
      },
      "writtenOn": "2022-06-02T20:02:37Z",
      "side": 1,
      "message": "Prefer to return a reference here.",
      "revId": "7574409b2b77e774aa3d7d1301edc35c86dc36fd",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "da8ffb03_7cb7c6ca",
        "filename": "modules/desktop_capture/linux/wayland/restore_token_manager.cc",
        "patchSetId": 3
      },
      "lineNbr": 16,
      "author": {
        "id": 8046
      },
      "writtenOn": "2022-06-03T06:26:40Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f525197d_8059fc23",
      "revId": "7574409b2b77e774aa3d7d1301edc35c86dc36fd",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    }
  ]
}