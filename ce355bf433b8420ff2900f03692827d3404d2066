{
  "comments": [
    {
      "key": {
        "uuid": "84d54406_2096ade1",
        "filename": "pc/channel.h",
        "patchSetId": 9
      },
      "lineNbr": 56,
      "author": {
        "id": 6930
      },
      "writtenOn": "2018-11-12T23:08:10Z",
      "side": 1,
      "message": "Make this a separate file to allow for multiple implementations without including the concrete implementation.",
      "revId": "ce355bf433b8420ff2900f03692827d3404d2066",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e3cdc26b_3def0620",
        "filename": "pc/channel.h",
        "patchSetId": 9
      },
      "lineNbr": 56,
      "author": {
        "id": 8244
      },
      "writtenOn": "2018-11-13T00:06:31Z",
      "side": 1,
      "message": "Done. Also renamed to ChannelInterface",
      "parentUuid": "84d54406_2096ade1",
      "revId": "ce355bf433b8420ff2900f03692827d3404d2066",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3b3f6e8c_70a9a94e",
        "filename": "pc/channel.h",
        "patchSetId": 9
      },
      "lineNbr": 56,
      "author": {
        "id": 5800
      },
      "writtenOn": "2018-11-13T00:28:08Z",
      "side": 1,
      "message": "+1",
      "parentUuid": "84d54406_2096ade1",
      "revId": "ce355bf433b8420ff2900f03692827d3404d2066",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "38ba2a25_e5cce606",
        "filename": "pc/channel.h",
        "patchSetId": 9
      },
      "lineNbr": 56,
      "author": {
        "id": 8244
      },
      "writtenOn": "2018-11-13T02:05:06Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3b3f6e8c_70a9a94e",
      "revId": "ce355bf433b8420ff2900f03692827d3404d2066",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0e55e351_f6f53a22",
        "filename": "pc/channel.h",
        "patchSetId": 9
      },
      "lineNbr": 57,
      "author": {
        "id": 6930
      },
      "writtenOn": "2018-11-12T23:08:10Z",
      "side": 1,
      "message": "Minimize white space vertically. The comments act as a good enough buffer for readability:\nhttps://google.github.io/styleguide/cppguide.html#Vertical_Whitespace",
      "revId": "ce355bf433b8420ff2900f03692827d3404d2066",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fbc51e67_bef90431",
        "filename": "pc/channel.h",
        "patchSetId": 9
      },
      "lineNbr": 57,
      "author": {
        "id": 8244
      },
      "writtenOn": "2018-11-13T00:06:31Z",
      "side": 1,
      "message": "i thought this was ok. \"don\u0027t put more than one or two blank lines between functions\".\nthe space between methods actually helps me read it, if in general, it doesn\u0027t i can remove it.",
      "parentUuid": "0e55e351_f6f53a22",
      "revId": "ce355bf433b8420ff2900f03692827d3404d2066",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9397160b_2a199182",
        "filename": "pc/channel.h",
        "patchSetId": 9
      },
      "lineNbr": 57,
      "author": {
        "id": 8244
      },
      "writtenOn": "2018-11-13T18:56:41Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "fbc51e67_bef90431",
      "revId": "ce355bf433b8420ff2900f03692827d3404d2066",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f8a8f5e4_78179ca6",
        "filename": "pc/channel.h",
        "patchSetId": 9
      },
      "lineNbr": 78,
      "author": {
        "id": 5800
      },
      "writtenOn": "2018-11-13T00:28:08Z",
      "side": 1,
      "message": "Why did you do this instead of just storing a public sigslot? Moving this from basechannel:\nsigslot::signal1\u003cBaseChannel*\u003e SignalFirstPacketReceived;\n\nIs there an advantage? I see a couple other places in our code where Interfaces store the sigslot itself instead of a a pure virtual function like you did here.",
      "range": {
        "startLine": 77,
        "startChar": 0,
        "endLine": 78,
        "endChar": 33
      },
      "revId": "ce355bf433b8420ff2900f03692827d3404d2066",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0463f6da_38a3778c",
        "filename": "pc/channel.h",
        "patchSetId": 9
      },
      "lineNbr": 78,
      "author": {
        "id": 8244
      },
      "writtenOn": "2018-11-13T18:56:41Z",
      "side": 1,
      "message": "summarizing F2F discussion. in general, events are not part of the language, so they are not exposed via interface, but through signals which are class members.\nThe general guiding principle is that sizeof(interface) \u003d\u003d 0, i.e. no members, just methods.\nExposing members reduces the flexibility in general and especially for testing (as you are tied to an implementation that is harder to mock/test).\nIdeally, we would be able to define events as methods and implement them via signals - i.e. define an event interface that allows subscribing (+\u003d) disconnecting (-\u003d) clearing, etc. not based on a specific implementation.\nI might need to research a bit more about how multiple inheritance works in c++, as this might be very close to what we are already doing, and there is some minor tweak that is missing.",
      "parentUuid": "f8a8f5e4_78179ca6",
      "range": {
        "startLine": 77,
        "startChar": 0,
        "endLine": 78,
        "endChar": 33
      },
      "revId": "ce355bf433b8420ff2900f03692827d3404d2066",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "156b2bf1_008228cc",
        "filename": "pc/channel.h",
        "patchSetId": 9
      },
      "lineNbr": 188,
      "author": {
        "id": 6930
      },
      "writtenOn": "2018-11-12T23:08:10Z",
      "side": 1,
      "message": "This appears to be incorrectly formatted:\ngit cl format.",
      "range": {
        "startLine": 188,
        "startChar": 6,
        "endLine": 188,
        "endChar": 14
      },
      "revId": "ce355bf433b8420ff2900f03692827d3404d2066",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c11556a4_2a4a51e7",
        "filename": "pc/channel.h",
        "patchSetId": 9
      },
      "lineNbr": 188,
      "author": {
        "id": 8244
      },
      "writtenOn": "2018-11-13T00:06:31Z",
      "side": 1,
      "message": "i thought so too, but actually git cl format is what created this abomination :)\nHopefully now that the interface name changed the line is shorter and can fit in under 80 chars.",
      "parentUuid": "156b2bf1_008228cc",
      "range": {
        "startLine": 188,
        "startChar": 6,
        "endLine": 188,
        "endChar": 14
      },
      "revId": "ce355bf433b8420ff2900f03692827d3404d2066",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7602ff3b_7e3769dd",
        "filename": "pc/peerconnection_ice_unittest.cc",
        "patchSetId": 9
      },
      "lineNbr": 220,
      "author": {
        "id": 5800
      },
      "writtenOn": "2018-11-13T00:28:08Z",
      "side": 1,
      "message": "I think you could append the suffix \"ForTesting\" so that this function is only exposed to test code. This would allow you to put it in the interface and not have to static cast.\n\nhttps://chromium.googlesource.com/chromium/src/+/master/styleguide/c++/c++.md#test_only-code",
      "range": {
        "startLine": 219,
        "startChar": 8,
        "endLine": 220,
        "endChar": 48
      },
      "revId": "ce355bf433b8420ff2900f03692827d3404d2066",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "410bd2d8_cb117c61",
        "filename": "pc/rtpsender.h",
        "patchSetId": 9
      },
      "lineNbr": 40,
      "author": {
        "id": 5800
      },
      "writtenOn": "2018-11-13T00:28:08Z",
      "side": 1,
      "message": "It would be nice if we could enforce this with a DCHECK. Now that we are setting a generic MediaChannel maybe the best thing to do is expose a media_type() function in MediaChannel as well as BaseChannel.",
      "range": {
        "startLine": 39,
        "startChar": 0,
        "endLine": 40,
        "endChar": 61
      },
      "revId": "ce355bf433b8420ff2900f03692827d3404d2066",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9422ec9b_73220367",
        "filename": "pc/rtpsender.h",
        "patchSetId": 9
      },
      "lineNbr": 40,
      "author": {
        "id": 8244
      },
      "writtenOn": "2018-11-13T02:05:06Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "410bd2d8_cb117c61",
      "range": {
        "startLine": 39,
        "startChar": 0,
        "endLine": 40,
        "endChar": 61
      },
      "revId": "ce355bf433b8420ff2900f03692827d3404d2066",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9a7622a9_8d9dadef",
        "filename": "pc/rtptransceiver.cc",
        "patchSetId": 9
      },
      "lineNbr": 63,
      "author": {
        "id": 5800
      },
      "writtenOn": "2018-11-13T00:28:08Z",
      "side": 1,
      "message": "If you didn\u0027t want to expose a media_type() function in the MediaChannel interface, you could DCHECK_EQ(media_type(), channel_-\u003emedia_type()) here.",
      "range": {
        "startLine": 63,
        "startChar": 4,
        "endLine": 63,
        "endChar": 39
      },
      "revId": "ce355bf433b8420ff2900f03692827d3404d2066",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cda31b04_56892f3c",
        "filename": "pc/rtptransceiver_unittest.cc",
        "patchSetId": 9
      },
      "lineNbr": 42,
      "author": {
        "id": 5800
      },
      "writtenOn": "2018-11-13T00:28:08Z",
      "side": 1,
      "message": "Is this code necessary to test the behavior that we can\u0027t set a channel on a stopped transceiver?",
      "range": {
        "startLine": 39,
        "startChar": 0,
        "endLine": 42,
        "endChar": 44
      },
      "revId": "ce355bf433b8420ff2900f03692827d3404d2066",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d498966e_ca4d3e3e",
        "filename": "pc/rtptransceiver_unittest.cc",
        "patchSetId": 9
      },
      "lineNbr": 42,
      "author": {
        "id": 8244
      },
      "writtenOn": "2018-11-13T02:05:06Z",
      "side": 1,
      "message": "will add a test case to separate the two cases:\n1. CannotSetChannelOnStoppedTransceiver\n2. CanUnsetChannelOnStoppedTransceiver",
      "parentUuid": "cda31b04_56892f3c",
      "range": {
        "startLine": 39,
        "startChar": 0,
        "endLine": 42,
        "endChar": 44
      },
      "revId": "ce355bf433b8420ff2900f03692827d3404d2066",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    }
  ]
}