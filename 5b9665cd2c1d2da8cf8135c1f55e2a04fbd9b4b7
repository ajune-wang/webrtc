{
  "comments": [
    {
      "key": {
        "uuid": "7ca07aa0_2ebb8a5a",
        "filename": "rtc_base/numerics/sequence_number_util.h",
        "patchSetId": 16
      },
      "lineNbr": 144,
      "author": {
        "id": 5126
      },
      "writtenOn": "2019-03-11T09:55:54Z",
      "side": 1,
      "message": "This extra space isn\u0027t needed in C++11 and later.\n\nAlso, why is the SeqNumUnwrapper instantiated on demand? That\u0027s different from how SeqNumUnwrapper works.",
      "range": {
        "startLine": 144,
        "startChar": 38,
        "endLine": 144,
        "endChar": 39
      },
      "revId": "5b9665cd2c1d2da8cf8135c1f55e2a04fbd9b4b7",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6ec357b4_284b42ab",
        "filename": "rtc_base/numerics/sequence_number_util.h",
        "patchSetId": 16
      },
      "lineNbr": 144,
      "author": {
        "id": 7641
      },
      "writtenOn": "2019-03-11T10:23:39Z",
      "side": 1,
      "message": "Shouldn\u0027t git cl format fix this then?\n\nSeqNumWrapper is instantiated with a starting number. Since we want to preserve the least significant bits, we need to set this starting number based on the first value that is seen, so that\u0027s why the initialization is delayed.\n\nDuring the work with this CL I tried various approaches where SeqNumWrapper was modified. Finally I ended up with this solution where the implementation of SeqNumWrapper is unchanged and PowerOf2SeqNumWrapper is a wrapper around this class.",
      "parentUuid": "7ca07aa0_2ebb8a5a",
      "range": {
        "startLine": 144,
        "startChar": 38,
        "endLine": 144,
        "endChar": 39
      },
      "revId": "5b9665cd2c1d2da8cf8135c1f55e2a04fbd9b4b7",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "909d8023_00e6d32c",
        "filename": "rtc_base/numerics/sequence_number_util.h",
        "patchSetId": 16
      },
      "lineNbr": 144,
      "author": {
        "id": 5126
      },
      "writtenOn": "2019-03-11T10:33:29Z",
      "side": 1,
      "message": "\u003e Shouldn\u0027t git cl format fix this then?\n\nArguably yes. Feel free to post a bug.\n\n\u003e SeqNumWrapper is instantiated with a starting number. Since we want to preserve the least significant bits, we need to set this starting number based on the first value that is seen, so that\u0027s why the initialization is delayed.\n\u003e \n\u003e During the work with this CL I tried various approaches where SeqNumWrapper was modified. Finally I ended up with this solution where the implementation of SeqNumWrapper is unchanged and PowerOf2SeqNumWrapper is a wrapper around this class.\n\nSo basically, PowerOf2SeqNumUnwrapper is a SeqNumUnwrapper that doesn\u0027t require a starting value, and that incidentally only works for powers of two because you haven\u0027t implemented the not-power-of-two case?",
      "parentUuid": "6ec357b4_284b42ab",
      "range": {
        "startLine": 144,
        "startChar": 38,
        "endLine": 144,
        "endChar": 39
      },
      "revId": "5b9665cd2c1d2da8cf8135c1f55e2a04fbd9b4b7",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cf61085a_417e932a",
        "filename": "rtc_base/numerics/sequence_number_util.h",
        "patchSetId": 16
      },
      "lineNbr": 144,
      "author": {
        "id": 5527
      },
      "writtenOn": "2019-03-11T10:42:53Z",
      "side": 1,
      "message": "The rationale for this class is that the vast majority of sequence numbers being unwrapped wrap at a power of two, and in those cases it is useful to preserve the LSBs.",
      "parentUuid": "909d8023_00e6d32c",
      "range": {
        "startLine": 144,
        "startChar": 38,
        "endLine": 144,
        "endChar": 39
      },
      "revId": "5b9665cd2c1d2da8cf8135c1f55e2a04fbd9b4b7",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e57bd1aa_871cb436",
        "filename": "rtc_base/numerics/sequence_number_util.h",
        "patchSetId": 16
      },
      "lineNbr": 144,
      "author": {
        "id": 5126
      },
      "writtenOn": "2019-03-11T11:07:25Z",
      "side": 1,
      "message": "But why not always guarantee that you preserve the first input\u0027s value mod M? It won\u0027t even be expensive at run time, because you can find a multiple of M close to 2^62 at compile time.\n\n(The root of my complaint is the name: The new class changes the behavior and adds a constraint on M for ease of implementation reasons, and it seems odd to name it only after the second change. Much better to fix SeqNumUnwrapper so that the naming issue goes away...)\n\n(Design note: If the unwrapped numbers had been int64_t, we could have simply ensured that Unwrap(n) \u003d\u003d n for the first input. Dead easy to implement and to explain. And we don\u0027t want unwrapped sequence numbers to ever wrap---do we?---so signed should be the right choice.)",
      "parentUuid": "cf61085a_417e932a",
      "range": {
        "startLine": 144,
        "startChar": 38,
        "endLine": 144,
        "endChar": 39
      },
      "revId": "5b9665cd2c1d2da8cf8135c1f55e2a04fbd9b4b7",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "40a08d7c_3962a1a2",
        "filename": "rtc_base/numerics/sequence_number_util.h",
        "patchSetId": 16
      },
      "lineNbr": 144,
      "author": {
        "id": 7641
      },
      "writtenOn": "2019-03-11T11:57:15Z",
      "side": 1,
      "message": "I agree, it might be a good reason to make this more generic so that you always preserve the input value mod M. This is close to one of the initial approaches. The bad thing is that you change the meaning of start_at of SeqNumUnwrapper. \nPerhaps, you could change so that SeqNumUnwrapper will preserve the value mod M unless you specify a starting number??\n\nI\u0027m not sure I understand your complaint of the name. It\u0027s named as a special case unwrapper for power of 2 wrapping periods. The behavior is not really changed, only how it\u0027s initialized.\n\nRegarding, using int64_t, I know this is something Philip has been thinking about. The problem as I see it is that you might get negative values. For example if you unwrap 0 followed by the late arrival of 65534 or if the sequence is going backwards. I think it\u0027s good to preserve the sign so that a sequence of positive numbers remains a sequence of positive numbers. But perhaps, this is still a good idea. Just have to make sure that the code using it makes any assumptions of the number being positive.\n\n\nThe options as I see it:\n* Change SeqNumUnwrapper to always preserve the input value mod M by changing how the starting value is calculated.\n* Change Power2SeqNumUnwrapper to a generic mod-M preserving unwrapper that uses SeqNumUnwrapper.\n* Use int64_t and unwrap first value to itself.\n* Keep this CL as is :) The motivation to do this would be that 2^n wrapping periods are by far the most useful case.\n\nWhat do you think?",
      "parentUuid": "e57bd1aa_871cb436",
      "range": {
        "startLine": 144,
        "startChar": 38,
        "endLine": 144,
        "endChar": 39
      },
      "revId": "5b9665cd2c1d2da8cf8135c1f55e2a04fbd9b4b7",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bfb1dfb4_e85d2b54",
        "filename": "rtc_base/numerics/sequence_number_util.h",
        "patchSetId": 16
      },
      "lineNbr": 144,
      "author": {
        "id": 5126
      },
      "writtenOn": "2019-03-11T12:11:29Z",
      "side": 1,
      "message": "I like option 3 best. The absolute values of unwrapped sequence numbers aren\u0027t meaningful, only the diffs are, so negative values should be no problem. The code will get simpler, and the unwrapped numbers will be easier for humans to deal with.\n\nOption 1 is my second choice. As you said, it\u0027s possible to keep the current behavior when the user gives an explicit starting value, and change only the implicit starting value used when the user doesn\u0027t supply one. (Although I must point out that a user-supplied starting value smells of the absolute values of unwrapped numbers not being insignificant. When do we need to use this?)",
      "parentUuid": "40a08d7c_3962a1a2",
      "range": {
        "startLine": 144,
        "startChar": 38,
        "endLine": 144,
        "endChar": 39
      },
      "revId": "5b9665cd2c1d2da8cf8135c1f55e2a04fbd9b4b7",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "83d1ccc2_0ae6d972",
        "filename": "rtc_base/numerics/sequence_number_util_unittest.cc",
        "patchSetId": 16
      },
      "lineNbr": 344,
      "author": {
        "id": 5126
      },
      "writtenOn": "2019-03-11T09:55:54Z",
      "side": 1,
      "message": "These tests only verify the low 8 and 5 bits, respectively. Shouldn\u0027t they also test that the entire unwrapped value is correct?",
      "revId": "5b9665cd2c1d2da8cf8135c1f55e2a04fbd9b4b7",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7fac7133_8ec5952f",
        "filename": "rtc_base/numerics/sequence_number_util_unittest.cc",
        "patchSetId": 16
      },
      "lineNbr": 344,
      "author": {
        "id": 7641
      },
      "writtenOn": "2019-03-11T10:23:39Z",
      "side": 1,
      "message": "I was thinking that it\u0027s already tested in the tests for SeqNumUnwrapper.\nBut perhaps it\u0027s good to have some additional tests.",
      "parentUuid": "83d1ccc2_0ae6d972",
      "revId": "5b9665cd2c1d2da8cf8135c1f55e2a04fbd9b4b7",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    }
  ]
}