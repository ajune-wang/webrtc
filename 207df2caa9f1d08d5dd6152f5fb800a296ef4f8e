{
  "comments": [
    {
      "key": {
        "uuid": "35bdfa03_06a7c4a5",
        "filename": "call/rtp_demuxer.cc",
        "patchSetId": 17
      },
      "lineNbr": 109,
      "author": {
        "id": 5019
      },
      "writtenOn": "2020-05-29T14:02:53Z",
      "side": 1,
      "message": "I\u0027m not sure what this error message adds.\nMay be remove it or instead explain why it must succeed.",
      "range": {
        "startLine": 109,
        "startChar": 25,
        "endLine": 109,
        "endChar": 57
      },
      "revId": "207df2caa9f1d08d5dd6152f5fb800a296ef4f8e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "72c5d4a8_500940c0",
        "filename": "call/rtp_demuxer.cc",
        "patchSetId": 17
      },
      "lineNbr": 109,
      "author": {
        "id": 6305
      },
      "writtenOn": "2020-05-29T16:31:40Z",
      "side": 1,
      "message": "I\u0027ve changed error message to better explain what went wrong, but I don\u0027t mind removing it. I preferred error message over comment because error message could immediately explain what went wrong when it happen.",
      "parentUuid": "35bdfa03_06a7c4a5",
      "range": {
        "startLine": 109,
        "startChar": 25,
        "endLine": 109,
        "endChar": 57
      },
      "revId": "207df2caa9f1d08d5dd6152f5fb800a296ef4f8e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c8820ece_129f3335",
        "filename": "call/rtp_demuxer.cc",
        "patchSetId": 17
      },
      "lineNbr": 109,
      "author": {
        "id": 5019
      },
      "writtenOn": "2020-05-29T17:05:40Z",
      "side": 1,
      "message": "thank you, new message helps. (I also agree that error message usually better than a comment).",
      "parentUuid": "72c5d4a8_500940c0",
      "range": {
        "startLine": 109,
        "startChar": 25,
        "endLine": 109,
        "endChar": 57
      },
      "revId": "207df2caa9f1d08d5dd6152f5fb800a296ef4f8e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "632c190e_e567ca5c",
        "filename": "call/rtp_demuxer.cc",
        "patchSetId": 17
      },
      "lineNbr": 206,
      "author": {
        "id": 5019
      },
      "writtenOn": "2020-05-29T14:02:53Z",
      "side": 1,
      "message": "binding becomes ambigious for newly added payload types?\nI wonder if this loop can be done other way around using smaller (new_)criteria.payload_types instead of sinks_by_pt_:\n\nfor (int payload_type : criteria.payload_types) {\n  auto kv \u003d sink_by_pt_.emplace(payload_type, sink);\n  // Delete from the mapping if there was already sink for the same payload_type.\n  // multimap guarantees insertion order for elements with the same key, so if there are\n  // elements with the same key, they must be just before newly inserted.\n  if (kv.first !\u003d sink_by_pt_.begin() \u0026\u0026 std::prev(kv.first)-\u003efirst \u003d\u003d payload_type) {\n    auto prev_it \u003d std::prev(kv.first);\n    if (prev_it !\u003d sink_by_pt_.begin() \u0026\u0026 std::prev(prev_it)-\u003efirst \u003d\u003d payload_type) {\n       // already ambigious, there should be nothing to remove.\n    } else {\n      auto* old_sink \u003d prev_it-\u003esecond.sink;\n      RemoveFromMapIf(\u0026sink_by_ssrc_, [\u0026](const auto\u0026 ssrc_and_binding) {\n        return ssrc_and_binding.second \u003d\u003d {SsrcBinding::Origin::kResolvedByPayloadType, old_sink};\n      });\n    }\n  }\n}\n\nbut may be that is just preliminary optimisation...",
      "range": {
        "startLine": 200,
        "startChar": 2,
        "endLine": 206,
        "endChar": 48
      },
      "revId": "207df2caa9f1d08d5dd6152f5fb800a296ef4f8e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "abf14a6a_598ca03b",
        "filename": "call/rtp_demuxer.cc",
        "patchSetId": 17
      },
      "lineNbr": 206,
      "author": {
        "id": 5019
      },
      "writtenOn": "2020-05-29T14:02:53Z",
      "side": 1,
      "message": "const auto\u0026",
      "range": {
        "startLine": 206,
        "startChar": 9,
        "endLine": 206,
        "endChar": 19
      },
      "revId": "207df2caa9f1d08d5dd6152f5fb800a296ef4f8e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b45942d2_88914c93",
        "filename": "call/rtp_demuxer.cc",
        "patchSetId": 17
      },
      "lineNbr": 206,
      "author": {
        "id": 6305
      },
      "writtenOn": "2020-05-29T16:31:40Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "abf14a6a_598ca03b",
      "range": {
        "startLine": 206,
        "startChar": 9,
        "endLine": 206,
        "endChar": 19
      },
      "revId": "207df2caa9f1d08d5dd6152f5fb800a296ef4f8e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dbf567c9_0d1a8704",
        "filename": "call/rtp_demuxer.cc",
        "patchSetId": 17
      },
      "lineNbr": 206,
      "author": {
        "id": 6305
      },
      "writtenOn": "2020-05-29T16:31:40Z",
      "side": 1,
      "message": "This peace of code seems a bit complicated for me. But I understand your worries. So I\u0027ve updated current implementation with to accept set of updated payload types, so it would only touch bindings with modified payload type bindings.",
      "parentUuid": "632c190e_e567ca5c",
      "range": {
        "startLine": 200,
        "startChar": 2,
        "endLine": 206,
        "endChar": 48
      },
      "revId": "207df2caa9f1d08d5dd6152f5fb800a296ef4f8e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f806294d_62a6ca56",
        "filename": "call/rtp_demuxer.cc",
        "patchSetId": 17
      },
      "lineNbr": 206,
      "author": {
        "id": 5019
      },
      "writtenOn": "2020-05-29T17:05:40Z",
      "side": 1,
      "message": "looks better!\nI do not see reason to optimise this further now\n(until there will be evidence this cause performance problems)",
      "parentUuid": "dbf567c9_0d1a8704",
      "range": {
        "startLine": 200,
        "startChar": 2,
        "endLine": 206,
        "endChar": 48
      },
      "revId": "207df2caa9f1d08d5dd6152f5fb800a296ef4f8e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cdf3ec06_68a77c54",
        "filename": "call/rtp_demuxer.cc",
        "patchSetId": 17
      },
      "lineNbr": 211,
      "author": {
        "id": 5019
      },
      "writtenOn": "2020-05-29T14:02:53Z",
      "side": 1,
      "message": "it it same as?\nif (sinks_by_pt_.count(sink_by_pt.first) \u003e 1) {\n\nhttps://en.cppreference.com/w/cpp/container/multimap/count",
      "range": {
        "startLine": 210,
        "startChar": 6,
        "endLine": 211,
        "endChar": 55
      },
      "revId": "207df2caa9f1d08d5dd6152f5fb800a296ef4f8e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c41c0831_316f3ce7",
        "filename": "call/rtp_demuxer.cc",
        "patchSetId": 17
      },
      "lineNbr": 211,
      "author": {
        "id": 6305
      },
      "writtenOn": "2020-05-29T16:31:40Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "cdf3ec06_68a77c54",
      "range": {
        "startLine": 210,
        "startChar": 6,
        "endLine": 211,
        "endChar": 55
      },
      "revId": "207df2caa9f1d08d5dd6152f5fb800a296ef4f8e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "458876b3_0470338e",
        "filename": "call/rtp_demuxer.cc",
        "patchSetId": 17
      },
      "lineNbr": 473,
      "author": {
        "id": 5019
      },
      "writtenOn": "2020-05-29T14:02:53Z",
      "side": 1,
      "message": "why remove and reinsert?, what was wrong with\nit-\u003esecond \u003d binding;",
      "range": {
        "startLine": 472,
        "startChar": 4,
        "endLine": 473,
        "endChar": 41
      },
      "revId": "207df2caa9f1d08d5dd6152f5fb800a296ef4f8e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c65f21bb_01f656ee",
        "filename": "call/rtp_demuxer.cc",
        "patchSetId": 17
      },
      "lineNbr": 473,
      "author": {
        "id": 6305
      },
      "writtenOn": "2020-05-29T16:31:40Z",
      "side": 1,
      "message": "I\u0027ve declared fields of `SsrcBinding` as `const` to emphasize that bindings is only modifiable as a whole object. `const` field caused copy-assignment operator deleted and hence `t-\u003esecond \u003d binding;` does not compile.",
      "parentUuid": "458876b3_0470338e",
      "range": {
        "startLine": 472,
        "startChar": 4,
        "endLine": 473,
        "endChar": 41
      },
      "revId": "207df2caa9f1d08d5dd6152f5fb800a296ef4f8e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "def3d9d1_5f132ad6",
        "filename": "call/rtp_demuxer.cc",
        "patchSetId": 17
      },
      "lineNbr": 473,
      "author": {
        "id": 5019
      },
      "writtenOn": "2020-05-29T17:05:40Z",
      "side": 1,
      "message": "marking all member const doesn\u0027t make object modifiable as a whole, it makes class unmodifable at all.\n\nhttps://abseil.io/tips/177 mentions this pattern in \"The Unusual Case: immutable types\"\nand recommends to \"Avoid const and reference data members when building value types\"\n\nIn this case I think it is better to remove const in favor of making code here faster (changing element is a cheap constant operation, where removing from map, then reinserting it involves two map lookups and might involve allocation)\n\nspecially since this type is very private to RtpDemuxer.",
      "parentUuid": "c65f21bb_01f656ee",
      "range": {
        "startLine": 472,
        "startChar": 4,
        "endLine": 473,
        "endChar": 41
      },
      "revId": "207df2caa9f1d08d5dd6152f5fb800a296ef4f8e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "567dc729_d693ecef",
        "filename": "call/rtp_demuxer.cc",
        "patchSetId": 17
      },
      "lineNbr": 517,
      "author": {
        "id": 5019
      },
      "writtenOn": "2020-05-29T14:02:53Z",
      "side": 1,
      "message": "prefer not to have default branch to detect missing case at compile time.",
      "range": {
        "startLine": 516,
        "startChar": 0,
        "endLine": 517,
        "endChar": 23
      },
      "revId": "207df2caa9f1d08d5dd6152f5fb800a296ef4f8e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4c3928fd_a254e81d",
        "filename": "call/rtp_demuxer.cc",
        "patchSetId": 17
      },
      "lineNbr": 517,
      "author": {
        "id": 6305
      },
      "writtenOn": "2020-05-29T16:31:40Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "567dc729_d693ecef",
      "range": {
        "startLine": 516,
        "startChar": 0,
        "endLine": 517,
        "endChar": 23
      },
      "revId": "207df2caa9f1d08d5dd6152f5fb800a296ef4f8e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "941d2aed_50d0b232",
        "filename": "call/rtp_demuxer.h",
        "patchSetId": 17
      },
      "lineNbr": 166,
      "author": {
        "id": 5019
      },
      "writtenOn": "2020-05-29T14:02:53Z",
      "side": 1,
      "message": "put members last, after operators and ToString function\n\nhttps://google.github.io/styleguide/cppguide.html#Declaration_Order",
      "range": {
        "startLine": 165,
        "startChar": 0,
        "endLine": 166,
        "endChar": 24
      },
      "revId": "207df2caa9f1d08d5dd6152f5fb800a296ef4f8e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9722b602_2671b2a0",
        "filename": "call/rtp_demuxer.h",
        "patchSetId": 17
      },
      "lineNbr": 166,
      "author": {
        "id": 6305
      },
      "writtenOn": "2020-05-29T16:31:40Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "941d2aed_50d0b232",
      "range": {
        "startLine": 165,
        "startChar": 0,
        "endLine": 166,
        "endChar": 24
      },
      "revId": "207df2caa9f1d08d5dd6152f5fb800a296ef4f8e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "299c292f_b01d6ef5",
        "filename": "call/rtp_demuxer.h",
        "patchSetId": 17
      },
      "lineNbr": 168,
      "author": {
        "id": 5019
      },
      "writtenOn": "2020-05-29T14:02:53Z",
      "side": 1,
      "message": "prefer declare binary operators as free functions:\nfriend bool operator\u003d\u003d(const SsrcBinding\u0026 lhs, const SsrcBinding\u0026 rhs) {\n  return lhs.sink \u003d\u003d rhs.sink \u0026\u0026 lhs.origin \u003d\u003d rhs.origin;\n}",
      "range": {
        "startLine": 168,
        "startChar": 4,
        "endLine": 168,
        "endChar": 47
      },
      "revId": "207df2caa9f1d08d5dd6152f5fb800a296ef4f8e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e96c7211_10c1945d",
        "filename": "call/rtp_demuxer.h",
        "patchSetId": 17
      },
      "lineNbr": 168,
      "author": {
        "id": 6305
      },
      "writtenOn": "2020-05-29T16:31:40Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "299c292f_b01d6ef5",
      "range": {
        "startLine": 168,
        "startChar": 4,
        "endLine": 168,
        "endChar": 47
      },
      "revId": "207df2caa9f1d08d5dd6152f5fb800a296ef4f8e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "aba0c578_ade9c862",
        "filename": "call/rtp_demuxer_unittest.cc",
        "patchSetId": 17
      },
      "lineNbr": 425,
      "author": {
        "id": 5019
      },
      "writtenOn": "2020-05-29T14:02:53Z",
      "side": 1,
      "message": "user_lower_case_for_local_variables\n\nhttps://google.github.io/styleguide/cppguide.html#Variable_Names\n\n(same for 3 more criterias below)",
      "range": {
        "startLine": 425,
        "startChar": 21,
        "endLine": 425,
        "endChar": 45
      },
      "revId": "207df2caa9f1d08d5dd6152f5fb800a296ef4f8e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2bb18eef_0e9e445c",
        "filename": "call/rtp_demuxer_unittest.cc",
        "patchSetId": 17
      },
      "lineNbr": 425,
      "author": {
        "id": 6305
      },
      "writtenOn": "2020-05-29T16:31:40Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "aba0c578_ade9c862",
      "range": {
        "startLine": 425,
        "startChar": 21,
        "endLine": 425,
        "endChar": 45
      },
      "revId": "207df2caa9f1d08d5dd6152f5fb800a296ef4f8e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5e766942_f35ce71c",
        "filename": "call/rtp_demuxer_unittest.cc",
        "patchSetId": 17
      },
      "lineNbr": 463,
      "author": {
        "id": 5019
      },
      "writtenOn": "2020-05-29T14:02:53Z",
      "side": 1,
      "message": "also\nEXPECT_CALL(sink1, OnRtpPacket).Times(0) ?\nor you find that expectation redundant?",
      "range": {
        "startLine": 463,
        "startChar": 2,
        "endLine": 463,
        "endChar": 13
      },
      "revId": "207df2caa9f1d08d5dd6152f5fb800a296ef4f8e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d38fbc5d_94a83667",
        "filename": "call/rtp_demuxer_unittest.cc",
        "patchSetId": 17
      },
      "lineNbr": 463,
      "author": {
        "id": 6305
      },
      "writtenOn": "2020-05-29T16:31:40Z",
      "side": 1,
      "message": "Done.",
      "parentUuid": "5e766942_f35ce71c",
      "range": {
        "startLine": 463,
        "startChar": 2,
        "endLine": 463,
        "endChar": 13
      },
      "revId": "207df2caa9f1d08d5dd6152f5fb800a296ef4f8e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8601bc6a_46791e40",
        "filename": "call/rtp_rtcp_demuxer_helper.h",
        "patchSetId": 17
      },
      "lineNbr": 34,
      "author": {
        "id": 5019
      },
      "writtenOn": "2020-05-29T14:02:53Z",
      "side": 1,
      "message": "may be do not shorten the type name: Predicate\nto make it searchable by people less familiar with template meta-programming.\n(variable probably ok to keep short since function body is relatively short)\n\nhttps://google.github.io/styleguide/cppguide.html#General_Naming_Rules",
      "range": {
        "startLine": 34,
        "startChar": 33,
        "endLine": 34,
        "endChar": 37
      },
      "revId": "207df2caa9f1d08d5dd6152f5fb800a296ef4f8e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "808e0d38_abdfa2fb",
        "filename": "call/rtp_rtcp_demuxer_helper.h",
        "patchSetId": 17
      },
      "lineNbr": 34,
      "author": {
        "id": 6305
      },
      "writtenOn": "2020-05-29T16:31:40Z",
      "side": 1,
      "message": "Done.",
      "parentUuid": "8601bc6a_46791e40",
      "range": {
        "startLine": 34,
        "startChar": 33,
        "endLine": 34,
        "endChar": 37
      },
      "revId": "207df2caa9f1d08d5dd6152f5fb800a296ef4f8e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    }
  ]
}