{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "653dab8b_1db33fce",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 5634
      },
      "writtenOn": "2024-07-31T20:02:52Z",
      "side": 1,
      "message": "Think there are points to be addressed before submitting.\nConcept seems good.",
      "revId": "340afa36e3723d2610700853dc382070e53cb22c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ed31305b_c79315f4",
        "filename": "api/frame_transformer_interface.h",
        "patchSetId": 5
      },
      "lineNbr": 110,
      "author": {
        "id": 17470
      },
      "writtenOn": "2024-07-31T15:50:21Z",
      "side": 1,
      "message": "Nit, typo:\n```suggestion\n  // Only define for received audio packets.\n```",
      "range": {
        "startLine": 110,
        "startChar": 5,
        "endLine": 110,
        "endChar": 42
      },
      "revId": "340afa36e3723d2610700853dc382070e53cb22c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0e85ce16_eb762487",
        "filename": "api/frame_transformer_interface.h",
        "patchSetId": 5
      },
      "lineNbr": 110,
      "author": {
        "id": 5634
      },
      "writtenOn": "2024-07-31T20:02:52Z",
      "side": 1,
      "message": "should be \"only defined\".\n\n\n```suggestion\n  // Only defined for received audio packet.\n```",
      "parentUuid": "ed31305b_c79315f4",
      "range": {
        "startLine": 110,
        "startChar": 5,
        "endLine": 110,
        "endChar": 42
      },
      "revId": "340afa36e3723d2610700853dc382070e53cb22c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "eab41fc0_39bb1aa1",
        "filename": "api/frame_transformer_interface.h",
        "patchSetId": 5
      },
      "lineNbr": 110,
      "author": {
        "id": 19084
      },
      "writtenOn": "2024-08-01T08:35:21Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0e85ce16_eb762487",
      "range": {
        "startLine": 110,
        "startChar": 5,
        "endLine": 110,
        "endChar": 42
      },
      "revId": "340afa36e3723d2610700853dc382070e53cb22c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3d32ecac_bfef3fba",
        "filename": "audio/channel_receive_frame_transformer_delegate.cc",
        "patchSetId": 5
      },
      "lineNbr": 93,
      "author": {
        "id": 17470
      },
      "writtenOn": "2024-07-31T15:50:21Z",
      "side": 1,
      "message": "Should negative infinity be represented as a nullopt?",
      "fixSuggestions": [
        {
          "fixId": "32a74d7f_471df5a2",
          "description": "prompt_to_edit API",
          "replacements": [
            {
              "path": "audio/channel_receive_frame_transformer_delegate.cc",
              "range": {
                "startLine": 94,
                "startChar": 0,
                "endLine": 95,
                "endChar": 0
              },
              "replacement": "    return receive_time_ \u003d\u003d Timestamp::MinusInfinity()\n               ? absl::nullopt\n               : absl::optional\u003cTimestamp\u003e(receive_time_);\n"
            }
          ]
        }
      ],
      "revId": "340afa36e3723d2610700853dc382070e53cb22c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9f87e1b9_8390cbb6",
        "filename": "audio/channel_receive_frame_transformer_delegate.cc",
        "patchSetId": 5
      },
      "lineNbr": 93,
      "author": {
        "id": 19084
      },
      "writtenOn": "2024-08-01T08:35:21Z",
      "side": 1,
      "message": "Good idea !",
      "parentUuid": "3d32ecac_bfef3fba",
      "revId": "340afa36e3723d2610700853dc382070e53cb22c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d2d4fe08_befb1109",
        "filename": "audio/channel_receive_frame_transformer_delegate.cc",
        "patchSetId": 5
      },
      "lineNbr": 203,
      "author": {
        "id": 17470
      },
      "writtenOn": "2024-07-31T15:50:21Z",
      "side": 1,
      "message": "Why not cast to TransformableIncomingAudioFrame and use `original-\u003eHeader()` and the copy constructor? That would preserve eg other header extensions that might be there. Some issues about shallow copies?",
      "fixSuggestions": [
        {
          "fixId": "6ce78162_40f46e0f",
          "description": "prompt_to_edit API",
          "replacements": [
            {
              "path": "audio/channel_receive_frame_transformer_delegate.cc",
              "range": {
                "startLine": 203,
                "startChar": 0,
                "endLine": 226,
                "endChar": 0
              },
              "replacement": "  auto* original_incoming_frame \u003d\n      static_cast\u003cTransformableIncomingAudioFrame*\u003e(original);\n"
            },
            {
              "path": "audio/channel_receive_frame_transformer_delegate.cc",
              "range": {
                "startLine": 227,
                "startChar": 0,
                "endLine": 228,
                "endChar": 0
              },
              "replacement": "      original-\u003eGetData(), original_incoming_frame-\u003eHeader(),\n      original-\u003eGetSsrc(), original-\u003eGetMimeType(),\n"
            }
          ]
        }
      ],
      "revId": "340afa36e3723d2610700853dc382070e53cb22c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cdd2c68e_e11f632b",
        "filename": "audio/channel_receive_frame_transformer_delegate.cc",
        "patchSetId": 5
      },
      "lineNbr": 203,
      "author": {
        "id": 5634
      },
      "writtenOn": "2024-07-31T20:02:52Z",
      "side": 1,
      "message": "Please resolve this. Metadata changes frequently; cloning a frame should be done in a change-resistant way.",
      "parentUuid": "d2d4fe08_befb1109",
      "revId": "340afa36e3723d2610700853dc382070e53cb22c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2886123f_57d85428",
        "filename": "audio/channel_receive_frame_transformer_delegate.cc",
        "patchSetId": 5
      },
      "lineNbr": 203,
      "author": {
        "id": 19084
      },
      "writtenOn": "2024-08-01T08:35:21Z",
      "side": 1,
      "message": "I had it like that at first and then I felt uneasy about the cast.\nI\u0027ll get to my original implementation with the cast.",
      "parentUuid": "cdd2c68e_e11f632b",
      "revId": "340afa36e3723d2610700853dc382070e53cb22c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "adba075f_9272cf0c",
        "filename": "audio/channel_receive_frame_transformer_delegate_unittest.cc",
        "patchSetId": 5
      },
      "lineNbr": 145,
      "author": {
        "id": 5634
      },
      "writtenOn": "2024-07-31T20:02:52Z",
      "side": 1,
      "message": "I don\u0027t like the addition of extra argument here. Isn\u0027t the receive time already present in the packet or header, if it is known at all?\n(If it isn\u0027t, may be acceptable, but why shouldn\u0027t it be?)",
      "revId": "340afa36e3723d2610700853dc382070e53cb22c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c3c41f5b_dc5fd32b",
        "filename": "audio/channel_receive_frame_transformer_delegate_unittest.cc",
        "patchSetId": 5
      },
      "lineNbr": 145,
      "author": {
        "id": 19084
      },
      "writtenOn": "2024-08-01T08:35:21Z",
      "side": 1,
      "message": "The header is the RTP header. It does not contain the time it hase been seen first on the network card. This is why this should be an extra argument.",
      "parentUuid": "adba075f_9272cf0c",
      "revId": "340afa36e3723d2610700853dc382070e53cb22c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "318034da_6212c595",
        "filename": "audio/channel_receive_frame_transformer_delegate_unittest.cc",
        "patchSetId": 5
      },
      "lineNbr": 191,
      "author": {
        "id": 5634
      },
      "writtenOn": "2024-07-31T20:02:52Z",
      "side": 1,
      "message": "When you use the same number multiple times in a test, make a constant for it (kFakeTimestamp?)",
      "revId": "340afa36e3723d2610700853dc382070e53cb22c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cba348d9_54d2bf72",
        "filename": "audio/channel_receive_frame_transformer_delegate_unittest.cc",
        "patchSetId": 5
      },
      "lineNbr": 191,
      "author": {
        "id": 19084
      },
      "writtenOn": "2024-08-01T08:35:21Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "318034da_6212c595",
      "revId": "340afa36e3723d2610700853dc382070e53cb22c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    }
  ]
}