{
  "comments": [
    {
      "key": {
        "uuid": "a02fb28b_dec53fb3",
        "filename": "p2p/base/portallocator.h",
        "patchSetId": 4
      },
      "lineNbr": 429,
      "author": {
        "id": 5053
      },
      "writtenOn": "2018-04-05T22:02:41Z",
      "side": 1,
      "message": "I\u0027m realizing now that chromium\u0027s \"P2PPortAllocator\" calls some methods besides the constructor on a different thread: https://cs.chromium.org/chromium/src/content/renderer/p2p/port_allocator.cc?type\u003dcs\u0026l\u003d45\n\nSo either chromium needs to be changed, or the rule could be changed to \"getters/setters safe to call from another thread until Initialize is called\"...",
      "revId": "2fbdb45d73d70e0a7ec8b6286ac2b00a007edcb9",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2d0f23a7_5f7c13c9",
        "filename": "p2p/base/portallocator.h",
        "patchSetId": 4
      },
      "lineNbr": 429,
      "author": {
        "id": 5887
      },
      "writtenOn": "2018-04-06T01:13:00Z",
      "side": 1,
      "message": "Done. It feels a reasonable compromise after our discussion. CheckRunOnValidThreadIfInitialized() is added for thread checking for methods that can be safely called on a different thread before Initialize().",
      "parentUuid": "a02fb28b_dec53fb3",
      "revId": "2fbdb45d73d70e0a7ec8b6286ac2b00a007edcb9",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "139c467d_c8bb7287",
        "filename": "p2p/base/portallocator.h",
        "patchSetId": 4
      },
      "lineNbr": 545,
      "author": {
        "id": 5053
      },
      "writtenOn": "2018-04-05T22:02:41Z",
      "side": 1,
      "message": "Should be able to add the DCHECK here too",
      "revId": "2fbdb45d73d70e0a7ec8b6286ac2b00a007edcb9",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "61a15bc3_233f23c2",
        "filename": "p2p/base/portallocator.h",
        "patchSetId": 4
      },
      "lineNbr": 545,
      "author": {
        "id": 5887
      },
      "writtenOn": "2018-04-06T01:13:00Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "139c467d_c8bb7287",
      "revId": "2fbdb45d73d70e0a7ec8b6286ac2b00a007edcb9",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d39c4eec_84513c5f",
        "filename": "p2p/client/basicportallocator.cc",
        "patchSetId": 4
      },
      "lineNbr": 192,
      "author": {
        "id": 5053
      },
      "writtenOn": "2018-04-05T22:02:41Z",
      "side": 1,
      "message": "Thread check here too?",
      "revId": "2fbdb45d73d70e0a7ec8b6286ac2b00a007edcb9",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c404dc26_9cf23f4b",
        "filename": "p2p/client/basicportallocator.cc",
        "patchSetId": 4
      },
      "lineNbr": 192,
      "author": {
        "id": 5887
      },
      "writtenOn": "2018-04-06T01:13:00Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d39c4eec_84513c5f",
      "revId": "2fbdb45d73d70e0a7ec8b6286ac2b00a007edcb9",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0ababeb7_77d6ca37",
        "filename": "pc/peerconnection.cc",
        "patchSetId": 4
      },
      "lineNbr": 1988,
      "author": {
        "id": 5053
      },
      "writtenOn": "2018-04-05T22:02:41Z",
      "side": 1,
      "message": "I think we can just get rid of FreezeCandidatePool, since this logic is already implemented in SetConfiguration at the PeerConnection level: https://cs.chromium.org/chromium/src/third_party/webrtc/pc/peerconnection.cc?l\u003d2824\u0026rcl\u003d4c9b3c840df3baf5145d73ecb994ba24b87908c7",
      "revId": "2fbdb45d73d70e0a7ec8b6286ac2b00a007edcb9",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ad1995ba_d1c5e5f7",
        "filename": "pc/peerconnection.cc",
        "patchSetId": 4
      },
      "lineNbr": 1988,
      "author": {
        "id": 5887
      },
      "writtenOn": "2018-04-06T01:13:00Z",
      "side": 1,
      "message": "Ack. Also moved the comment to SetConfiguration.",
      "parentUuid": "0ababeb7_77d6ca37",
      "revId": "2fbdb45d73d70e0a7ec8b6286ac2b00a007edcb9",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dddd4c2d_b4e0855b",
        "filename": "pc/peerconnection.cc",
        "patchSetId": 4
      },
      "lineNbr": 1988,
      "author": {
        "id": 5053
      },
      "writtenOn": "2018-04-06T18:41:47Z",
      "side": 1,
      "message": "Sorry, I was wrong about this. SetConfiguration doesn\u0027t take care of the second part of the comment, \"changing the set of ICE servers will not result in new candidates being gathered\". Note this early return: https://cs.chromium.org/chromium/src/third_party/webrtc/p2p/base/portallocator.cc?l\u003d133\u0026rcl\u003d3ab5c40f72ef640a4decfe16d5787bf7da990473\n\nI don\u0027t like doing a thread hop just to satisfy a thread check, though... How about this: PeerConnection can store \"candidate_pool_frozen_\" and pass it as an argument into PortAllocator::SetConfiguration?",
      "parentUuid": "ad1995ba_d1c5e5f7",
      "revId": "2fbdb45d73d70e0a7ec8b6286ac2b00a007edcb9",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f31fb5cb_f827bab1",
        "filename": "pc/peerconnection.cc",
        "patchSetId": 4
      },
      "lineNbr": 1988,
      "author": {
        "id": 5053
      },
      "writtenOn": "2018-04-10T16:39:19Z",
      "side": 1,
      "message": "This still needs to be addressed.",
      "parentUuid": "dddd4c2d_b4e0855b",
      "revId": "2fbdb45d73d70e0a7ec8b6286ac2b00a007edcb9",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1ccdc8a4_0079efe9",
        "filename": "pc/peerconnection.cc",
        "patchSetId": 4
      },
      "lineNbr": 1988,
      "author": {
        "id": 5887
      },
      "writtenOn": "2018-04-10T22:23:12Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f31fb5cb_f827bab1",
      "revId": "2fbdb45d73d70e0a7ec8b6286ac2b00a007edcb9",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "84dc24ba_c7adca45",
        "filename": "pc/peerconnection.cc",
        "patchSetId": 4
      },
      "lineNbr": 3003,
      "author": {
        "id": 5053
      },
      "writtenOn": "2018-04-05T22:02:41Z",
      "side": 1,
      "message": "It would be ideal if all the network thread hops could be combined into one.\n\nNote that JsepTransportController::SetMetricsObserver will already do the thread hop, and it has a pointer to the PortAllocator, so this code could just be moved there. Or you could invoke a \"PeerConnection::SetMetricsObserver_n\" method that does all this if you think leaving the code in PeerConnection would be cleaner (since it owns the PortAllocator).",
      "revId": "2fbdb45d73d70e0a7ec8b6286ac2b00a007edcb9",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f2730469_00cb8aad",
        "filename": "pc/peerconnection.cc",
        "patchSetId": 4
      },
      "lineNbr": 3003,
      "author": {
        "id": 5887
      },
      "writtenOn": "2018-04-06T01:13:00Z",
      "side": 1,
      "message": "Our current code assumes the methods of the metric observer are on the same thread as the peer connection, and RegisterUMAObserver is called after the peer connection is created and the port allocator initialized. We can save one thread hop by moving PortAllocator::SetMetricsObserver to JsepTransportController::SetMetricsObserver, but it feels awkward to bundle the thread hopping of that getter of flags somewhere else. What do you think?",
      "parentUuid": "84dc24ba_c7adca45",
      "revId": "2fbdb45d73d70e0a7ec8b6286ac2b00a007edcb9",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4c474457_03482dd1",
        "filename": "pc/peerconnection.cc",
        "patchSetId": 4
      },
      "lineNbr": 3003,
      "author": {
        "id": 5053
      },
      "writtenOn": "2018-04-06T18:41:47Z",
      "side": 1,
      "message": "If it feels awkward to move these \"IncrementEnumCounter\"s to JsepTransportController::SetMetricsObserver or PeerConnection::SetMetricsObserver_n, another option would be doing it from a lambda.",
      "parentUuid": "f2730469_00cb8aad",
      "revId": "2fbdb45d73d70e0a7ec8b6286ac2b00a007edcb9",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6d2dc3c8_f73efb00",
        "filename": "pc/peerconnection.cc",
        "patchSetId": 4
      },
      "lineNbr": 3003,
      "author": {
        "id": 5053
      },
      "writtenOn": "2018-04-10T16:39:19Z",
      "side": 1,
      "message": "Would still prefer if this were addressed before landing.",
      "parentUuid": "4c474457_03482dd1",
      "revId": "2fbdb45d73d70e0a7ec8b6286ac2b00a007edcb9",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0cc9a34e_6d13caf8",
        "filename": "pc/peerconnection.cc",
        "patchSetId": 4
      },
      "lineNbr": 3003,
      "author": {
        "id": 5887
      },
      "writtenOn": "2018-04-10T22:23:12Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6d2dc3c8_f73efb00",
      "revId": "2fbdb45d73d70e0a7ec8b6286ac2b00a007edcb9",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    }
  ]
}