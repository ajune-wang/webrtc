{
  "comments": [
    {
      "key": {
        "uuid": "619c80eb_a1a2a67c",
        "filename": "logging/rtc_event_log/events/rtc_event_probe_cluster_created.cc",
        "patchSetId": 1
      },
      "lineNbr": 15,
      "author": {
        "id": 5147
      },
      "writtenOn": "2018-05-25T12:04:04Z",
      "side": 1,
      "message": "This is instantiated by:\n\n    event_log_-\u003eLog(rtc::MakeUnique\u003cRtcEventProbeClusterCreated\u003e(\n        cluster.pace_info.probe_cluster_id, cluster.pace_info.send_bitrate_bps,\n        cluster.pace_info.probe_cluster_min_probes,\n        cluster.pace_info.probe_cluster_min_bytes));\n\nWhich gets its date from here:\n\nstruct PacedPacketInfo {\n  PacedPacketInfo();\n  PacedPacketInfo(int probe_cluster_id,\n                  int probe_cluster_min_probes,\n                  int probe_cluster_min_bytes);\n\n  bool operator\u003d\u003d(const PacedPacketInfo\u0026 rhs) const;\n\n  // TODO(srte): Move probing info to a separate, optional struct.\n  static constexpr int kNotAProbe \u003d -1;\n  int send_bitrate_bps \u003d -1;\n  int probe_cluster_id \u003d kNotAProbe;\n  int probe_cluster_min_probes \u003d -1;\n  int probe_cluster_min_bytes \u003d -1;\n};\n\nSo it seems a bit unsafe. No?",
      "revId": "78f0787f7cc903159c0f7f01242a3924572272c5",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1259bad5_ecc619cc",
        "filename": "logging/rtc_event_log/events/rtc_event_probe_cluster_created.cc",
        "patchSetId": 1
      },
      "lineNbr": 15,
      "author": {
        "id": 5150
      },
      "writtenOn": "2018-05-25T13:04:19Z",
      "side": 1,
      "message": "Not really. (Or at least not more unsafe than what we have now.)\n\nA probe logically has to consist of a non-negative number of bytes and packets, so the arguments should never be negative.\n\nMoreover, we\u0027re currently writing the data as int32_t and uin32_t in the proto and reading it as int32_t and uint32_t respectively in the parser. What this CL does is exposing this minor type inconsistency to the caller rather than hiding it in the internals of the event log.",
      "parentUuid": "619c80eb_a1a2a67c",
      "revId": "78f0787f7cc903159c0f7f01242a3924572272c5",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "39d1c260_f97f9b88",
        "filename": "logging/rtc_event_log/events/rtc_event_probe_cluster_created.cc",
        "patchSetId": 1
      },
      "lineNbr": 15,
      "author": {
        "id": 5147
      },
      "writtenOn": "2018-05-25T14:00:49Z",
      "side": 1,
      "message": "It sounds generally reasonable, but I am a bit concerned that PacedPacketInfo\u0027s members might at some point:\n* Have a negative number (see in the above comment what their default ctor sets them to). \n* Also, I am not sure we\u0027re guaranteed that int-s would not be more than 32-bit on some systems, although maybe we have some build configuration to prevent that?\n\nPossible solutions:\n* Is changing the types at PacedPacketInfo an option?\n* Maybe we should use some checked/saturated/otherwise-safe cast when instantiating RtcEventProbeClusterCreated?\n\nWdyt?\n\n(By the way, in the post-CL code, it is slightly odd that |bitrate_bps| is signed, but |min_probes| is unsigned; I\u0027d expect both to be unsigned values.)",
      "parentUuid": "1259bad5_ecc619cc",
      "revId": "78f0787f7cc903159c0f7f01242a3924572272c5",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2eb8ee1b_9312d01f",
        "filename": "logging/rtc_event_log/events/rtc_event_probe_cluster_created.cc",
        "patchSetId": 1
      },
      "lineNbr": 15,
      "author": {
        "id": 5147
      },
      "writtenOn": "2018-05-25T14:20:37Z",
      "side": 1,
      "message": "Discussed offline; I\u0027m satisfied that this is as good as can be done with the amount of effort this deserves at the moment.",
      "parentUuid": "39d1c260_f97f9b88",
      "revId": "78f0787f7cc903159c0f7f01242a3924572272c5",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    }
  ]
}