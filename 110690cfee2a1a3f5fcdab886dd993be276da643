{
  "comments": [
    {
      "key": {
        "uuid": "3afdc238_b65082da",
        "filename": "modules/video_coding/codecs/vp8/libvpx_vp8_encoder.cc",
        "patchSetId": 4
      },
      "lineNbr": 316,
      "author": {
        "id": 5117
      },
      "writtenOn": "2018-08-28T15:13:32Z",
      "side": 1,
      "message": "This has number of temporal layers per stream already.\nhttps://cs.chromium.org/chromium/src/third_party/webrtc/api/video_codecs/video_codec.h?type\u003dcs\u0026sq\u003dpackage:chromium\u0026g\u003d0\u0026l\u003d38\n\nCould you use that?",
      "range": {
        "startLine": 316,
        "startChar": 50,
        "endLine": 316,
        "endChar": 66
      },
      "revId": "110690cfee2a1a3f5fcdab886dd993be276da643",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "501d3b53_75d5baef",
        "filename": "modules/video_coding/codecs/vp8/libvpx_vp8_encoder.cc",
        "patchSetId": 4
      },
      "lineNbr": 316,
      "author": {
        "id": 5117
      },
      "writtenOn": "2018-08-28T16:31:53Z",
      "side": 1,
      "message": "Ideally, this method shouldn\u0027t even have num_temporal_layers as a parameter. Because it\u0027s derived from codec in a calling code.\n\nYou should inline here the code, which currently was in TemporalLayers::CreateTemporalLayers:\n\n  if (IsConferenceModeScreenshare(codec) \u0026\u0026 spatial_id \u003d\u003d 0) {\n    // Conference mode temporal layering for screen content in base stream.\n    return absl::make_unique\u003cScreenshareLayers\u003e(2, Clock::GetRealTimeClock());\n  }\n\n  return absl::make_unique\u003cDefaultTemporalLayers\u003e(\n      NumTemporalLayers(codec, spatial_id));\n\nAnd NumTemporalLayers is:\n\n  uint8_t num_temporal_layers \u003d\n      std::max\u003cuint8_t\u003e(1, codec.VP8().numberOfTemporalLayers);\n  if (codec.numberOfSimulcastStreams \u003e 0) {\n    RTC_DCHECK_LT(spatial_id, codec.numberOfSimulcastStreams);\n    num_temporal_layers \u003d\n        std::max(num_temporal_layers,\n                 codec.simulcastStream[spatial_id].numberOfTemporalLayers);\n  }\n  return num_temporal_layers;",
      "parentUuid": "3afdc238_b65082da",
      "range": {
        "startLine": 316,
        "startChar": 50,
        "endLine": 316,
        "endChar": 66
      },
      "revId": "110690cfee2a1a3f5fcdab886dd993be276da643",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3440a792_465a2a41",
        "filename": "modules/video_coding/codecs/vp8/libvpx_vp8_encoder.cc",
        "patchSetId": 4
      },
      "lineNbr": 316,
      "author": {
        "id": 5524
      },
      "writtenOn": "2018-09-05T11:52:12Z",
      "side": 1,
      "message": "Yes, makes sense. I\u0027ve moved IsConferenceModeScreenshare() and NumTemporalLayers() to \nSimulcastUtility so we can re-use them for now.",
      "parentUuid": "501d3b53_75d5baef",
      "range": {
        "startLine": 316,
        "startChar": 50,
        "endLine": 316,
        "endChar": 66
      },
      "revId": "110690cfee2a1a3f5fcdab886dd993be276da643",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "882c205f_3df14b2d",
        "filename": "test/fake_vp8_encoder.cc",
        "patchSetId": 4
      },
      "lineNbr": 80,
      "author": {
        "id": 5117
      },
      "writtenOn": "2018-08-28T15:13:32Z",
      "side": 1,
      "message": "again, use codec here and revert parameters change.",
      "range": {
        "startLine": 80,
        "startChar": 8,
        "endLine": 80,
        "endChar": 72
      },
      "revId": "110690cfee2a1a3f5fcdab886dd993be276da643",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7da7d7e8_cdc3a53a",
        "filename": "test/fake_vp8_encoder.cc",
        "patchSetId": 4
      },
      "lineNbr": 80,
      "author": {
        "id": 5524
      },
      "writtenOn": "2018-09-05T11:52:12Z",
      "side": 1,
      "message": "Followed libvpx_vp8_encoder and removed the other two parameters.",
      "parentUuid": "882c205f_3df14b2d",
      "range": {
        "startLine": 80,
        "startChar": 8,
        "endLine": 80,
        "endChar": 72
      },
      "revId": "110690cfee2a1a3f5fcdab886dd993be276da643",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    }
  ]
}