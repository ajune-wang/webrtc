{
  "comments": [
    {
      "key": {
        "uuid": "c8a86e60_58e6230b",
        "filename": "system_wrappers/include/ntp_time.h",
        "patchSetId": 10
      },
      "lineNbr": 66,
      "author": {
        "id": 5234
      },
      "writtenOn": "2019-08-16T11:07:50Z",
      "side": 1,
      "message": "I think it\u0027s nice to group the constants as a multiplicative scale factor, since I\u0027m not sure what amount of reordering the compiler is allowed to do. I.e.,\n\nmilliseconds * (NtpTime::kFractionsPerSecond / 1000.0)",
      "range": {
        "startLine": 66,
        "startChar": 25,
        "endLine": 66,
        "endChar": 65
      },
      "revId": "ec9b74e4b7bfe1f77ba1b892881a765bf0b6c177",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cef66cf3_9c695b86",
        "filename": "system_wrappers/include/ntp_time.h",
        "patchSetId": 10
      },
      "lineNbr": 66,
      "author": {
        "id": 5234
      },
      "writtenOn": "2019-08-16T11:07:50Z",
      "side": 1,
      "message": "Please add an include of math.h (or cmath, and change to std::round).\n\nSince we want an integer, maybe use llround rather than round? Return type is long long rather than int64_t. I couldn\u0027t find any similar function with int64_t return type.",
      "range": {
        "startLine": 66,
        "startChar": 6,
        "endLine": 66,
        "endChar": 11
      },
      "revId": "ec9b74e4b7bfe1f77ba1b892881a765bf0b6c177",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "178b33a6_e6eba742",
        "filename": "system_wrappers/include/ntp_time.h",
        "patchSetId": 10
      },
      "lineNbr": 66,
      "author": {
        "id": 8392
      },
      "writtenOn": "2019-08-16T11:21:10Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "cef66cf3_9c695b86",
      "range": {
        "startLine": 66,
        "startChar": 6,
        "endLine": 66,
        "endChar": 11
      },
      "revId": "ec9b74e4b7bfe1f77ba1b892881a765bf0b6c177",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6e190e74_f33079ef",
        "filename": "system_wrappers/include/ntp_time.h",
        "patchSetId": 10
      },
      "lineNbr": 66,
      "author": {
        "id": 8392
      },
      "writtenOn": "2019-08-16T11:21:10Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c8a86e60_58e6230b",
      "range": {
        "startLine": 66,
        "startChar": 25,
        "endLine": 66,
        "endChar": 65
      },
      "revId": "ec9b74e4b7bfe1f77ba1b892881a765bf0b6c177",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4dbfb68f_bf5e5375",
        "filename": "system_wrappers/include/ntp_time.h",
        "patchSetId": 10
      },
      "lineNbr": 70,
      "author": {
        "id": 5234
      },
      "writtenOn": "2019-08-16T11:07:50Z",
      "side": 1,
      "message": "Do we really need the uint64_t milliseconds?",
      "range": {
        "startLine": 70,
        "startChar": 34,
        "endLine": 70,
        "endChar": 55
      },
      "revId": "ec9b74e4b7bfe1f77ba1b892881a765bf0b6c177",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "65ec8894_b8347401",
        "filename": "system_wrappers/include/ntp_time.h",
        "patchSetId": 10
      },
      "lineNbr": 70,
      "author": {
        "id": 8392
      },
      "writtenOn": "2019-08-16T11:21:10Z",
      "side": 1,
      "message": "It seems to make sense for symmetry reasons.\n\nOne alternative is to only use signed `int64_t milliseconds` for both sets of conversion functions to/from Q32.32 and UQ32.32, and then maybe add code to do clamping to handle overflow?",
      "parentUuid": "4dbfb68f_bf5e5375",
      "range": {
        "startLine": 70,
        "startChar": 34,
        "endLine": 70,
        "endChar": 55
      },
      "revId": "ec9b74e4b7bfe1f77ba1b892881a765bf0b6c177",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "540beb38_01affd9c",
        "filename": "system_wrappers/include/ntp_time.h",
        "patchSetId": 10
      },
      "lineNbr": 70,
      "author": {
        "id": 5234
      },
      "writtenOn": "2019-08-16T11:26:03Z",
      "side": 1,
      "message": "Style guide discourages use of uint64_t, it\u0027s appropriate only in special cases, e.g., if one really wants mod 2^64 arithmetic, or if one represents an on-the-wire value of corresponding type. So don\u0027t add the uint64_t functions unless there\u0027s some clear use case for them.",
      "parentUuid": "65ec8894_b8347401",
      "range": {
        "startLine": 70,
        "startChar": 34,
        "endLine": 70,
        "endChar": 55
      },
      "revId": "ec9b74e4b7bfe1f77ba1b892881a765bf0b6c177",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    }
  ]
}