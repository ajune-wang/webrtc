{
  "comments": [
    {
      "key": {
        "uuid": "b61b9144_7e5d702a",
        "filename": "logging/rtc_event_log/rtc_event_log_parser_new.cc",
        "patchSetId": 1
      },
      "lineNbr": 226,
      "author": {
        "id": 5147
      },
      "writtenOn": "2018-09-29T21:08:46Z",
      "side": 1,
      "message": "What if the stream is empty at this point? Was this line perhaps meant to go after the check of eof rather than before it?",
      "revId": "bdae6af8bfa7e12458e56f8b7c0bad50d0260392",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "86c7aaeb_f2804b26",
        "filename": "logging/rtc_event_log/rtc_event_log_parser_new.cc",
        "patchSetId": 1
      },
      "lineNbr": 226,
      "author": {
        "id": 5150
      },
      "writtenOn": "2018-09-30T15:51:11Z",
      "side": 1,
      "message": "eof() checks for errors in the last IO operation.\n\nhttps://en.cppreference.com/w/cpp/io/basic_ios/eof",
      "parentUuid": "b61b9144_7e5d702a",
      "revId": "bdae6af8bfa7e12458e56f8b7c0bad50d0260392",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e41275cc_1d7dc7d4",
        "filename": "logging/rtc_event_log/rtc_event_log_parser_new.cc",
        "patchSetId": 1
      },
      "lineNbr": 226,
      "author": {
        "id": 5147
      },
      "writtenOn": "2018-09-30T18:38:49Z",
      "side": 1,
      "message": "ParseVarInt() does not know what had happened with the stream before it ParseVarInt() was called. It might be that someone had already read from it up to its end. There is no DCHECK or comment over the function to indicate that this is not permissible. But I guess calling get() a second time will just return -1 (or equivalent) again, so it probably doesn\u0027t matter? For your consideration whether DCHECK over !eof() at the entrance to the function would make sense.",
      "parentUuid": "86c7aaeb_f2804b26",
      "revId": "bdae6af8bfa7e12458e56f8b7c0bad50d0260392",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0d82d9a0_5509b469",
        "filename": "logging/rtc_event_log/rtc_event_log_parser_new.cc",
        "patchSetId": 1
      },
      "lineNbr": 226,
      "author": {
        "id": 5150
      },
      "writtenOn": "2018-10-01T11:53:05Z",
      "side": 1,
      "message": "We don\u0027t use the value if we reach eof, so it doesn\u0027t really matter. The observable behavior will be the same.",
      "parentUuid": "e41275cc_1d7dc7d4",
      "revId": "bdae6af8bfa7e12458e56f8b7c0bad50d0260392",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7937f8ee_00354483",
        "filename": "logging/rtc_event_log/rtc_event_log_parser_new.cc",
        "patchSetId": 1
      },
      "lineNbr": 227,
      "author": {
        "id": 5147
      },
      "writtenOn": "2018-09-29T21:08:46Z",
      "side": 1,
      "message": "If not for the above comment, I would suggest:\nbyte \u003c 0 || stream.eof()\n(Or !\u003d std::char_traits\u003cchar\u003e::eof() instead of \u003c 0, but maybe that\u0027s unnecessarily arcane?)\nIf the above comment is not misguided, and the order is changed, we probably would still want to check the result of get(), in case something still goes wrong between the check for eof() and the get(), which, if the stream is reading from disk, I think could happen?",
      "revId": "bdae6af8bfa7e12458e56f8b7c0bad50d0260392",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "df942c3c_e46754ad",
        "filename": "logging/rtc_event_log/rtc_event_log_parser_new.cc",
        "patchSetId": 1
      },
      "lineNbr": 227,
      "author": {
        "id": 5150
      },
      "writtenOn": "2018-09-30T15:51:11Z",
      "side": 1,
      "message": "We\u0027re DCHECKing byte \u003e\u003d 0 on the line below.",
      "parentUuid": "7937f8ee_00354483",
      "revId": "bdae6af8bfa7e12458e56f8b7c0bad50d0260392",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "03b0637f_a2167076",
        "filename": "logging/rtc_event_log/rtc_event_log_parser_new.cc",
        "patchSetId": 1
      },
      "lineNbr": 227,
      "author": {
        "id": 5147
      },
      "writtenOn": "2018-09-30T18:38:49Z",
      "side": 1,
      "message": "I should have looked more closely at the documentation of eof(). The beginning suggested that it behaved as I had expected from the name; I now see that this was not true.",
      "parentUuid": "df942c3c_e46754ad",
      "revId": "bdae6af8bfa7e12458e56f8b7c0bad50d0260392",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "eb3af11a_c698c8d8",
        "filename": "logging/rtc_event_log/rtc_event_log_parser_new.cc",
        "patchSetId": 1
      },
      "lineNbr": 228,
      "author": {
        "id": 5147
      },
      "writtenOn": "2018-09-29T21:08:46Z",
      "side": 1,
      "message": "It also looks like it is implicitly assumed that the varint is not the last thing in the stream, which I am not sure we intended to assume? Assume the entire stream consists of a single byte such as 0x00, 0x01, or anything that does not have the most significant bit set. You\u0027d expect this to be read correctly, but it looks to me like it would fail, because after the first read, which does *not* indicate another byte to be necessary, eof() would evaluate to true, and this would fire. Or did I miss something?",
      "revId": "bdae6af8bfa7e12458e56f8b7c0bad50d0260392",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6c931429_2b50350e",
        "filename": "logging/rtc_event_log/rtc_event_log_parser_new.cc",
        "patchSetId": 1
      },
      "lineNbr": 228,
      "author": {
        "id": 5150
      },
      "writtenOn": "2018-09-30T15:51:11Z",
      "side": 1,
      "message": "See above.",
      "parentUuid": "eb3af11a_c698c8d8",
      "revId": "bdae6af8bfa7e12458e56f8b7c0bad50d0260392",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0ab4874d_cbe6d50d",
        "filename": "logging/rtc_event_log/rtc_event_log_parser_new.cc",
        "patchSetId": 1
      },
      "lineNbr": 228,
      "author": {
        "id": 5147
      },
      "writtenOn": "2018-09-30T18:38:49Z",
      "side": 1,
      "message": "I now see this in the Notes part of the documentation:\n\"For example, if the most recent I/O was a get() which returned the last byte of a file, eof() returns false.\"\nThanks.",
      "parentUuid": "6c931429_2b50350e",
      "revId": "bdae6af8bfa7e12458e56f8b7c0bad50d0260392",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "43183180_82978abe",
        "filename": "logging/rtc_event_log/rtc_event_log_parser_new.cc",
        "patchSetId": 1
      },
      "lineNbr": 480,
      "author": {
        "id": 5147
      },
      "writtenOn": "2018-09-29T21:08:46Z",
      "side": 1,
      "message": "Maybe (kMaxEventSize + 2 * kMaxVarIntByteLength) or something?\n(This would make it evident that the vector is prepared to hold an event and two varints. Then, maybe a comment could briefly summarize what those upcoming varints will be?)",
      "range": {
        "startLine": 480,
        "startChar": 47,
        "endLine": 480,
        "endChar": 49
      },
      "revId": "bdae6af8bfa7e12458e56f8b7c0bad50d0260392",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "22e8a2a8_7643d3eb",
        "filename": "logging/rtc_event_log/rtc_event_log_parser_new.cc",
        "patchSetId": 1
      },
      "lineNbr": 480,
      "author": {
        "id": 5150
      },
      "writtenOn": "2018-09-30T15:51:11Z",
      "side": 1,
      "message": "Will add kMaxVarIntByteLength.\n\nThe varints have been there all along. (It\u0027s the field tag + wiretype varint and the length varint.) The difference is that we now include copy those raw fields and parse an EventStream consisting of one Event. Previously we only parsed the Event.",
      "parentUuid": "43183180_82978abe",
      "range": {
        "startLine": 480,
        "startChar": 47,
        "endLine": 480,
        "endChar": 49
      },
      "revId": "bdae6af8bfa7e12458e56f8b7c0bad50d0260392",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a764e34e_697f57d9",
        "filename": "logging/rtc_event_log/rtc_event_log_parser_new.cc",
        "patchSetId": 1
      },
      "lineNbr": 480,
      "author": {
        "id": 5147
      },
      "writtenOn": "2018-09-30T18:38:49Z",
      "side": 1,
      "message": "I was suggesting a comment that explains this more briefly than an examination of the code of the entire function. Your comment of \"event + 2 varints\" prompted this suggestion - I think a summary of the expected contents of the buffer would be more useful to the reader. Either no comment, your comment or my comment would make sense to me, though.",
      "parentUuid": "22e8a2a8_7643d3eb",
      "range": {
        "startLine": 480,
        "startChar": 47,
        "endLine": 480,
        "endChar": 49
      },
      "revId": "bdae6af8bfa7e12458e56f8b7c0bad50d0260392",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fcc00ee6_1609ddff",
        "filename": "logging/rtc_event_log/rtc_event_log_parser_new.cc",
        "patchSetId": 1
      },
      "lineNbr": 480,
      "author": {
        "id": 5150
      },
      "writtenOn": "2018-10-01T11:53:05Z",
      "side": 1,
      "message": "I\u0027ll go with a named constant and no comment. This will be removed in a followup CL anyway.",
      "parentUuid": "a764e34e_697f57d9",
      "range": {
        "startLine": 480,
        "startChar": 47,
        "endLine": 480,
        "endChar": 49
      },
      "revId": "bdae6af8bfa7e12458e56f8b7c0bad50d0260392",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "14cc9ed8_6241e4f1",
        "filename": "logging/rtc_event_log/rtc_event_log_parser_new.cc",
        "patchSetId": 1
      },
      "lineNbr": 486,
      "author": {
        "id": 5147
      },
      "writtenOn": "2018-09-29T21:08:46Z",
      "side": 1,
      "message": "What\u0027s the purpose of this? Is it necessary to do this before invoking eof()? Is it invoked to ensure that the condition that would result in an exception is not met? Or does it have a side-effect which I have missed in the documentation?",
      "range": {
        "startLine": 486,
        "startChar": 0,
        "endLine": 486,
        "endChar": 18
      },
      "revId": "bdae6af8bfa7e12458e56f8b7c0bad50d0260392",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "82a05c54_c177a1eb",
        "filename": "logging/rtc_event_log/rtc_event_log_parser_new.cc",
        "patchSetId": 1
      },
      "lineNbr": 486,
      "author": {
        "id": 5150
      },
      "writtenOn": "2018-09-30T15:51:11Z",
      "side": 1,
      "message": "It sets the eofbit.",
      "parentUuid": "14cc9ed8_6241e4f1",
      "range": {
        "startLine": 486,
        "startChar": 0,
        "endLine": 486,
        "endChar": 18
      },
      "revId": "bdae6af8bfa7e12458e56f8b7c0bad50d0260392",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4604a3af_7257fce4",
        "filename": "logging/rtc_event_log/rtc_event_log_parser_new.cc",
        "patchSetId": 1
      },
      "lineNbr": 486,
      "author": {
        "id": 5147
      },
      "writtenOn": "2018-09-30T18:38:49Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "82a05c54_c177a1eb",
      "range": {
        "startLine": 486,
        "startChar": 0,
        "endLine": 486,
        "endChar": 18
      },
      "revId": "bdae6af8bfa7e12458e56f8b7c0bad50d0260392",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d7d869a4_7fdd6514",
        "filename": "logging/rtc_event_log/rtc_event_log_parser_new.cc",
        "patchSetId": 1
      },
      "lineNbr": 495,
      "author": {
        "id": 5147
      },
      "writtenOn": "2018-09-29T21:08:46Z",
      "side": 1,
      "message": "It is mildly confusing that this appears to correspond exactly to |bytes_read|. Maybe use the same name for both?",
      "range": {
        "startLine": 495,
        "startChar": 11,
        "endLine": 495,
        "endChar": 24
      },
      "revId": "bdae6af8bfa7e12458e56f8b7c0bad50d0260392",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "160e1167_c6326309",
        "filename": "logging/rtc_event_log/rtc_event_log_parser_new.cc",
        "patchSetId": 1
      },
      "lineNbr": 495,
      "author": {
        "id": 5150
      },
      "writtenOn": "2018-09-30T15:51:11Z",
      "side": 1,
      "message": "Will do.",
      "parentUuid": "d7d869a4_7fdd6514",
      "range": {
        "startLine": 495,
        "startChar": 11,
        "endLine": 495,
        "endChar": 24
      },
      "revId": "bdae6af8bfa7e12458e56f8b7c0bad50d0260392",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3c157154_efb5f823",
        "filename": "logging/rtc_event_log/rtc_event_log_parser_new.cc",
        "patchSetId": 1
      },
      "lineNbr": 495,
      "author": {
        "id": 5150
      },
      "writtenOn": "2018-10-01T11:53:05Z",
      "side": 1,
      "message": "Actually, bytes_read is a local variable that counts the number of bytes read in a single call to ParseVarInt. Bytes written corresponds to the total number of bytes written in the buffer. They are equal for the first varint but not for subsequent ones. |pos| is equavlaent though, so I renamed it to bytes_written and made a small simplification of the code.",
      "parentUuid": "160e1167_c6326309",
      "range": {
        "startLine": 495,
        "startChar": 11,
        "endLine": 495,
        "endChar": 24
      },
      "revId": "bdae6af8bfa7e12458e56f8b7c0bad50d0260392",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e2f176bd_a1e75198",
        "filename": "logging/rtc_event_log/rtc_event_log_parser_new.cc",
        "patchSetId": 1
      },
      "lineNbr": 514,
      "author": {
        "id": 5147
      },
      "writtenOn": "2018-09-29T21:08:46Z",
      "side": 1,
      "message": "Is there a minimum too, perhaps?",
      "revId": "bdae6af8bfa7e12458e56f8b7c0bad50d0260392",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8c29f288_b574a0f3",
        "filename": "logging/rtc_event_log/rtc_event_log_parser_new.cc",
        "patchSetId": 1
      },
      "lineNbr": 514,
      "author": {
        "id": 5150
      },
      "writtenOn": "2018-09-30T15:51:11Z",
      "side": 1,
      "message": "No, and the max will have to be removed with the new format.",
      "parentUuid": "e2f176bd_a1e75198",
      "revId": "bdae6af8bfa7e12458e56f8b7c0bad50d0260392",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "87454f61_34078b9f",
        "filename": "logging/rtc_event_log/rtc_event_log_parser_new.cc",
        "patchSetId": 1
      },
      "lineNbr": 514,
      "author": {
        "id": 5147
      },
      "writtenOn": "2018-09-30T18:38:49Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "8c29f288_b574a0f3",
      "revId": "bdae6af8bfa7e12458e56f8b7c0bad50d0260392",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    }
  ]
}