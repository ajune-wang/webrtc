{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "757c41d3_1e901633",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 10107
      },
      "writtenOn": "2022-07-20T09:22:35Z",
      "side": 1,
      "message": "Adding Tommi for global approval.",
      "revId": "e261f5298b83aeac36d81ce49de60da1abfa603e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0141f5a1_a268f7dc",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 5508
      },
      "writtenOn": "2022-07-20T10:01:01Z",
      "side": 1,
      "message": "some minor comments but lgtm",
      "revId": "e261f5298b83aeac36d81ce49de60da1abfa603e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9d0c4e9a_6515293d",
        "filename": "modules/audio_coding/neteq/tools/neteq_delay_analyzer.cc",
        "patchSetId": 4
      },
      "lineNbr": 201,
      "author": {
        "id": 5508
      },
      "writtenOn": "2022-07-20T10:01:01Z",
      "side": 1,
      "message": "nit: {} not necessary here?",
      "revId": "e261f5298b83aeac36d81ce49de60da1abfa603e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6dc34298_e371ba38",
        "filename": "modules/audio_coding/neteq/tools/neteq_delay_analyzer.cc",
        "patchSetId": 4
      },
      "lineNbr": 201,
      "author": {
        "id": 10107
      },
      "writtenOn": "2022-07-20T10:57:26Z",
      "side": 1,
      "message": "With parentheses, the compiler parses this as a function declaration (so won\u0027t compile).",
      "parentUuid": "9d0c4e9a_6515293d",
      "revId": "e261f5298b83aeac36d81ce49de60da1abfa603e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "92c9fc4f_71e0d4cb",
        "filename": "modules/audio_coding/neteq/tools/neteq_rtpplay.cc",
        "patchSetId": 4
      },
      "lineNbr": 171,
      "author": {
        "id": 5508
      },
      "writtenOn": "2022-07-20T10:01:01Z",
      "side": 1,
      "message": "nit: is `std::string str_str \u003d std::string(str)` preferred over `std::string str_str(str)`?",
      "revId": "e261f5298b83aeac36d81ce49de60da1abfa603e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1bbdc17c_123978c9",
        "filename": "modules/audio_coding/neteq/tools/neteq_rtpplay.cc",
        "patchSetId": 4
      },
      "lineNbr": 171,
      "author": {
        "id": 10107
      },
      "writtenOn": "2022-07-20T10:57:26Z",
      "side": 1,
      "message": "My reading of the style guide is that it doesn\u0027t matter, but https://abseil.io/tips/88 (totw/88) states that using assignment syntax should be preferred.",
      "parentUuid": "92c9fc4f_71e0d4cb",
      "revId": "e261f5298b83aeac36d81ce49de60da1abfa603e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dfb30ad4_8152983e",
        "filename": "modules/audio_coding/neteq/tools/neteq_rtpplay.cc",
        "patchSetId": 4
      },
      "lineNbr": 204,
      "author": {
        "id": 5508
      },
      "writtenOn": "2022-07-20T10:01:01Z",
      "side": 1,
      "message": "Can also do:\n\nprintf(\"Invalid SSRC: %.*s\\n\", static_cast\u003cint\u003e(str.size()), str.data());\n\n(see `FormatStringView` for an example)",
      "revId": "e261f5298b83aeac36d81ce49de60da1abfa603e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ea2d85a3_5fc7e681",
        "filename": "modules/audio_coding/neteq/tools/neteq_rtpplay.cc",
        "patchSetId": 4
      },
      "lineNbr": 204,
      "author": {
        "id": 10107
      },
      "writtenOn": "2022-07-20T10:57:26Z",
      "side": 1,
      "message": "Ah, great tip! Thanks.",
      "parentUuid": "dfb30ad4_8152983e",
      "revId": "e261f5298b83aeac36d81ce49de60da1abfa603e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d6541a95_6699cfc8",
        "filename": "modules/audio_coding/test/RTPFile.cc",
        "patchSetId": 4
      },
      "lineNbr": 128,
      "author": {
        "id": 5508
      },
      "writtenOn": "2022-07-20T10:01:01Z",
      "side": 1,
      "message": "not sure if going through operator\u003d() is preferred",
      "revId": "e261f5298b83aeac36d81ce49de60da1abfa603e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "21dd13b3_af67a435",
        "filename": "modules/audio_coding/test/RTPFile.cc",
        "patchSetId": 4
      },
      "lineNbr": 128,
      "author": {
        "id": 10107
      },
      "writtenOn": "2022-07-20T10:57:26Z",
      "side": 1,
      "message": "I believe this uses the copy constructor, not operator\u003d(), right? If so, see my previous comment.",
      "parentUuid": "d6541a95_6699cfc8",
      "revId": "e261f5298b83aeac36d81ce49de60da1abfa603e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "dc724007_1bf7dcf1",
        "filename": "modules/audio_coding/test/RTPFile.cc",
        "patchSetId": 4
      },
      "lineNbr": 128,
      "author": {
        "id": 5508
      },
      "writtenOn": "2022-07-20T11:41:29Z",
      "side": 1,
      "message": "Ack - yes that\u0027s right. I was thinking semantically - but I think that totw tip has been pointed out to me in the past so I had a vague recollection of it being preferred but couldn\u0027t quite remember. Thanks for the link. Why I was thinking that this would perhaps being an exception to that rule is because the expression on the right side of `\u003d` actually uses the constructor that is being avoided ðŸ˜Š",
      "parentUuid": "21dd13b3_af67a435",
      "revId": "e261f5298b83aeac36d81ce49de60da1abfa603e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "df5aa930_01ef2476",
        "filename": "modules/audio_coding/test/RTPFile.cc",
        "patchSetId": 4
      },
      "lineNbr": 128,
      "author": {
        "id": 10107
      },
      "writtenOn": "2022-07-20T11:56:46Z",
      "side": 1,
      "message": "Hmm... I think that the right hand side is using absl::string_view\u0027s operator string() function (at least as long as absl::string_view is not aliased to std::string_view). I don\u0027t know what that means in terms of the formatting to prefer though.\n\nI\u0027ll submit as-is, but if you prefer formatting the other way, let me know, and I\u0027ll switch (for this and subsequent CLs; I\u0027ve been using this style consistently so far as it is much more prevalent in g3).",
      "parentUuid": "dc724007_1bf7dcf1",
      "revId": "e261f5298b83aeac36d81ce49de60da1abfa603e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1c6d6084_c1e45979",
        "filename": "modules/audio_coding/test/RTPFile.cc",
        "patchSetId": 4
      },
      "lineNbr": 128,
      "author": {
        "id": 5508
      },
      "writtenOn": "2022-07-20T12:32:09Z",
      "side": 1,
      "message": "Yes, lgtm to go ahead with submitting as is.\n\nI\u0027d guess that the right hand side uses this constructor:\n```template\u003c class StringViewLike \u003e\nexplicit basic_string(const StringViewLike\u0026 t,\n                      const Allocator\u0026 alloc \u003d Allocator());\n```\n\nWhat I mean is that the right hand side is using that ctor and if we did not use assignment (i.e. `std::string filename_str(filename)`) then we\u0027d also be using that ctor, simply without assignment.\n\nLooking at the totw/ and abseil tips, I don\u0027t think this is exactly the same situation as we have here.\n\nBasically, in this case we are doing: `Foo f \u003d Foo(bar)` and not `Foo f \u003d bar`. The tips are for the latter, but not as far as I can tell, the former.",
      "parentUuid": "df5aa930_01ef2476",
      "revId": "e261f5298b83aeac36d81ce49de60da1abfa603e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3690d874_e7826383",
        "filename": "modules/audio_coding/test/RTPFile.cc",
        "patchSetId": 4
      },
      "lineNbr": 128,
      "author": {
        "id": 10107
      },
      "writtenOn": "2022-07-20T14:31:54Z",
      "side": 1,
      "message": "So it turns out (I stumbled on this some time ago) absl::string_view does not fulfil the requirements for StringViewLike. This means that the right hand side is in fact using absl::string_view\u0027s string conversion operator, and so is the non-assignment form. I tested this manually with printf-logging to confirm.\n\nAs long as absl::string_view is not aliased to std::string_view, creating a string from string_view will end up using std::string\u0027s copy constructor. And my reading of totw/88 was that copy construction should prefer the assignment form.\n\nI personally find this to be quite confusing, because in the (possibly far) future I\u0027m sure chromium and webrtc will want to move from absl::string_view to std::string_view. So which form should we use in the meantime? No idea...\n\nI\u0027ve asked for opinions on this in our internal C users mailinglist. We should probably just make a decision and then stick with it. I\u0027m happy to ensure consistency in webrtc\u0027s codebase whatever the decision.",
      "parentUuid": "1c6d6084_c1e45979",
      "revId": "e261f5298b83aeac36d81ce49de60da1abfa603e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e59fff1f_999adaa5",
        "filename": "modules/audio_coding/test/RTPFile.cc",
        "patchSetId": 4
      },
      "lineNbr": 128,
      "author": {
        "id": 10107
      },
      "writtenOn": "2022-07-20T18:01:05Z",
      "side": 1,
      "message": "So it seems there is consensus that totw/88 does not recommend the assignment form in this particular case. I\u0027ll stick with the constructor form from now on and I\u0027ll try to convert the assignment forms I find. Does that sg?",
      "parentUuid": "3690d874_e7826383",
      "revId": "e261f5298b83aeac36d81ce49de60da1abfa603e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a6cd9bdb_6bb8c2e4",
        "filename": "modules/audio_coding/test/RTPFile.cc",
        "patchSetId": 4
      },
      "lineNbr": 128,
      "author": {
        "id": 6720
      },
      "writtenOn": "2022-07-20T18:05:33Z",
      "side": 1,
      "message": "Yes that sounds good. I wasn\u0027t expecting that you\u0027d dig into this that seriously but good to have this cleared up and also to learn that absl::string_view does not meet the StringViewLike criteria (and surprising too). So, thanks for doing that.",
      "parentUuid": "e59fff1f_999adaa5",
      "revId": "e261f5298b83aeac36d81ce49de60da1abfa603e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    }
  ]
}