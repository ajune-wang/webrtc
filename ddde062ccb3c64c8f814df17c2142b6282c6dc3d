{
  "comments": [
    {
      "key": {
        "uuid": "61f88112_37f1d8e2",
        "filename": "pc/peerconnection.cc",
        "patchSetId": 3
      },
      "lineNbr": 587,
      "author": {
        "id": 5039
      },
      "writtenOn": "2018-12-12T17:42:39Z",
      "side": 1,
      "message": "Unnecessary diff?",
      "revId": "ddde062ccb3c64c8f814df17c2142b6282c6dc3d",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "aefaabb5_57da9af1",
        "filename": "pc/peerconnection.cc",
        "patchSetId": 3
      },
      "lineNbr": 587,
      "author": {
        "id": 5142
      },
      "writtenOn": "2018-12-13T17:25:07Z",
      "side": 1,
      "message": "Oops, accidentally moved GetStreamIdsString after removing it and changing my mind, order restored.",
      "parentUuid": "61f88112_37f1d8e2",
      "revId": "ddde062ccb3c64c8f814df17c2142b6282c6dc3d",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "20c98458_fcbae678",
        "filename": "pc/peerconnection.cc",
        "patchSetId": 3
      },
      "lineNbr": 2658,
      "author": {
        "id": 5800
      },
      "writtenOn": "2018-12-12T23:34:28Z",
      "side": 1,
      "message": "This is another bug this change fixes, where we didn\u0027t process removed streams. Good work!",
      "range": {
        "startLine": 2658,
        "startChar": 6,
        "endLine": 2658,
        "endChar": 32
      },
      "revId": "ddde062ccb3c64c8f814df17c2142b6282c6dc3d",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "49fd999a_5e5b3340",
        "filename": "pc/peerconnection.cc",
        "patchSetId": 3
      },
      "lineNbr": 2680,
      "author": {
        "id": 5039
      },
      "writtenOn": "2018-12-12T17:42:39Z",
      "side": 1,
      "message": "Can you refactor/remove this to avoid duplication with SetAssociatedRemoteStreams?",
      "revId": "ddde062ccb3c64c8f814df17c2142b6282c6dc3d",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "776357ed_8ff8bef3",
        "filename": "pc/peerconnection.cc",
        "patchSetId": 3
      },
      "lineNbr": 2680,
      "author": {
        "id": 5800
      },
      "writtenOn": "2018-12-12T23:34:28Z",
      "side": 1,
      "message": "ProcessRemovalOfRemoteTrack is called when the transceiver is no longer receiving (receiver track removed). SetAssociatedRemoteStreams is called when the transceiver is receiving. I guess you could have a separate function - ProcessRemovedStreams() that goes through the list of removed streams:\nif (stream-\u003eGetAudioTracks().empty() \u0026\u0026 stream-\u003eGetVideoTracks().empty()) {\n  remote_streams_-\u003eRemoveStream(stream);\n  removed_streams-\u003epush_back(stream);\n  // Also removes stream from list of removed streams.\n}\n\nIs this what you had in mind steve?",
      "parentUuid": "49fd999a_5e5b3340",
      "revId": "ddde062ccb3c64c8f814df17c2142b6282c6dc3d",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6c7451cb_bdeef225",
        "filename": "pc/peerconnection.cc",
        "patchSetId": 3
      },
      "lineNbr": 2680,
      "author": {
        "id": 5142
      },
      "writtenOn": "2018-12-13T17:25:07Z",
      "side": 1,
      "message": "I get the streams before SetAssociatedRemoteStreams() and ProcessRemovalOfRemoteTrack(), and do that logic on those streams after the calls. That way only looping through the streams once.",
      "parentUuid": "776357ed_8ff8bef3",
      "revId": "ddde062ccb3c64c8f814df17c2142b6282c6dc3d",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2c7e7d7e_cb586007",
        "filename": "pc/peerconnection.h",
        "patchSetId": 3
      },
      "lineNbr": 484,
      "author": {
        "id": 5039
      },
      "writtenOn": "2018-12-12T17:42:39Z",
      "side": 1,
      "message": "nit: newline after",
      "revId": "ddde062ccb3c64c8f814df17c2142b6282c6dc3d",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f5f1ddd2_3afd537a",
        "filename": "pc/peerconnection.h",
        "patchSetId": 3
      },
      "lineNbr": 484,
      "author": {
        "id": 5142
      },
      "writtenOn": "2018-12-13T17:25:07Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "2c7e7d7e_cb586007",
      "revId": "ddde062ccb3c64c8f814df17c2142b6282c6dc3d",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b6b991c0_feaebac2",
        "filename": "pc/peerconnection_rtp_unittest.cc",
        "patchSetId": 3
      },
      "lineNbr": 514,
      "author": {
        "id": 5039
      },
      "writtenOn": "2018-12-12T17:42:39Z",
      "side": 1,
      "message": "Can you make a few changes:\n\n1) Introduce a caller to avoid one PeerConnection offering to itself.\n2) Avoid the string SDP and instead munge the generated offer/answer (to change MSIDs).",
      "revId": "ddde062ccb3c64c8f814df17c2142b6282c6dc3d",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "577a2275_efce77dc",
        "filename": "pc/peerconnection_rtp_unittest.cc",
        "patchSetId": 3
      },
      "lineNbr": 514,
      "author": {
        "id": 5800
      },
      "writtenOn": "2018-12-12T23:34:28Z",
      "side": 1,
      "message": "+1 to this. Just need to change the stream_ids_ in the StreamParams object. Should simplify the test.",
      "parentUuid": "b6b991c0_feaebac2",
      "revId": "ddde062ccb3c64c8f814df17c2142b6282c6dc3d",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e924f5a6_74c9b703",
        "filename": "pc/peerconnection_rtp_unittest.cc",
        "patchSetId": 3
      },
      "lineNbr": 514,
      "author": {
        "id": 5142
      },
      "writtenOn": "2018-12-13T17:25:07Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "577a2275_efce77dc",
      "revId": "ddde062ccb3c64c8f814df17c2142b6282c6dc3d",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "502301da_255cd717",
        "filename": "pc/peerconnection_rtp_unittest.cc",
        "patchSetId": 3
      },
      "lineNbr": 524,
      "author": {
        "id": 5142
      },
      "writtenOn": "2018-12-12T15:25:53Z",
      "side": 1,
      "message": "Note: I didn\u0027t bother making the OnTrack event fire again when the streams changed because a) I\u0027m lazy, b) Chromium does not use the PeerConnectionObserver for its \"ontrack\" and c) unlike the web version of RTCPeerConnection, the PeerConnectionObserver has events for streams being added or removed, so sneaking in streams being added as an \"ontrack\" event makes less sense in the native layer.",
      "revId": "ddde062ccb3c64c8f814df17c2142b6282c6dc3d",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2eb1fb2f_d97f6cb3",
        "filename": "pc/peerconnection_rtp_unittest.cc",
        "patchSetId": 3
      },
      "lineNbr": 524,
      "author": {
        "id": 5039
      },
      "writtenOn": "2018-12-12T17:42:39Z",
      "side": 1,
      "message": "ASSERT_EQ",
      "range": {
        "startLine": 524,
        "startChar": 2,
        "endLine": 524,
        "endChar": 11
      },
      "revId": "ddde062ccb3c64c8f814df17c2142b6282c6dc3d",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7da431c2_ede8a113",
        "filename": "pc/peerconnection_rtp_unittest.cc",
        "patchSetId": 3
      },
      "lineNbr": 524,
      "author": {
        "id": 5800
      },
      "writtenOn": "2018-12-12T23:34:28Z",
      "side": 1,
      "message": "sgtm.",
      "parentUuid": "502301da_255cd717",
      "revId": "ddde062ccb3c64c8f814df17c2142b6282c6dc3d",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "48a14f60_9da738bd",
        "filename": "pc/peerconnection_rtp_unittest.cc",
        "patchSetId": 3
      },
      "lineNbr": 524,
      "author": {
        "id": 5142
      },
      "writtenOn": "2018-12-13T17:25:07Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "2eb1fb2f_d97f6cb3",
      "range": {
        "startLine": 524,
        "startChar": 2,
        "endLine": 524,
        "endChar": 11
      },
      "revId": "ddde062ccb3c64c8f814df17c2142b6282c6dc3d",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c6f4bf42_1235decb",
        "filename": "pc/peerconnection_rtp_unittest.cc",
        "patchSetId": 3
      },
      "lineNbr": 538,
      "author": {
        "id": 5039
      },
      "writtenOn": "2018-12-12T17:42:39Z",
      "side": 1,
      "message": "If you want to be fancy you can do:\n\nEXPECT_THAT(transceiver-\u003ereceiver()-\u003estreams(), ElementsAre(Property(\u0026MediaStreamInterface::id, \"2\"));",
      "revId": "ddde062ccb3c64c8f814df17c2142b6282c6dc3d",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8d3719c0_2e468619",
        "filename": "pc/peerconnection_rtp_unittest.cc",
        "patchSetId": 3
      },
      "lineNbr": 538,
      "author": {
        "id": 5142
      },
      "writtenOn": "2018-12-13T17:25:07Z",
      "side": 1,
      "message": "Oooh fancy.\nIt barfs. I think it\u0027s because its a scoped_refptr\u003c\u003e to MediaStreamInterface, not MediaStreamInterface. Know how to get around that? I didn\u0027t change the code now.",
      "parentUuid": "c6f4bf42_1235decb",
      "revId": "ddde062ccb3c64c8f814df17c2142b6282c6dc3d",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5b3caa5f_3ce08b61",
        "filename": "pc/peerconnection_rtp_unittest.cc",
        "patchSetId": 3
      },
      "lineNbr": 538,
      "author": {
        "id": 5039
      },
      "writtenOn": "2018-12-14T02:17:06Z",
      "side": 1,
      "message": "I think the best approach would be to teach gmock about scoped_refptr, but it looks like that might not be very feasible, so I guess we should just leave it as is.",
      "parentUuid": "8d3719c0_2e468619",
      "revId": "ddde062ccb3c64c8f814df17c2142b6282c6dc3d",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    }
  ]
}