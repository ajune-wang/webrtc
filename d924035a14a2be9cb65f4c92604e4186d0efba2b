{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "8910c300_ebbe47ca",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 9405
      },
      "writtenOn": "2021-11-12T15:08:37Z",
      "side": 1,
      "message": "Artem, could you take a look once more? The implementation is largely changed.",
      "revId": "d924035a14a2be9cb65f4c92604e4186d0efba2b",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4e7833e2_cb3c1bf6",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 6337
      },
      "writtenOn": "2021-11-15T09:35:37Z",
      "side": 1,
      "message": "Thank you for heads up. I\u0027ll take the second look then after Danil will LGTM",
      "parentUuid": "8910c300_ebbe47ca",
      "revId": "d924035a14a2be9cb65f4c92604e4186d0efba2b",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a9ceeb48_72f973e1",
        "filename": "rtc_base/logging.cc",
        "patchSetId": 4
      },
      "lineNbr": 66,
      "author": {
        "id": 5019
      },
      "writtenOn": "2021-11-12T15:36:36Z",
      "side": 1,
      "message": "use ABSL_CONST_INIT instead.\n(it is already used in this file)\n\nfrom absl/base/attributes.h\nhttps://chromium.googlesource.com/chromium/src/+/main/third_party/abseil-cpp/absl/base/attributes.h#666",
      "range": {
        "startLine": 66,
        "startChar": 0,
        "endLine": 66,
        "endChar": 13
      },
      "revId": "d924035a14a2be9cb65f4c92604e4186d0efba2b",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "afd44fca_609b00c9",
        "filename": "rtc_base/logging.cc",
        "patchSetId": 4
      },
      "lineNbr": 66,
      "author": {
        "id": 9405
      },
      "writtenOn": "2021-11-12T17:10:45Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a9ceeb48_72f973e1",
      "range": {
        "startLine": 66,
        "startChar": 0,
        "endLine": 66,
        "endChar": 13
      },
      "revId": "d924035a14a2be9cb65f4c92604e4186d0efba2b",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d0efbe8e_421930b3",
        "filename": "rtc_base/logging.cc",
        "patchSetId": 4
      },
      "lineNbr": 93,
      "author": {
        "id": 5019
      },
      "writtenOn": "2021-11-12T15:36:36Z",
      "side": 1,
      "message": "this implementation does atomic load (twice!) for each call.\nat the very least you may change it to do a single load when mutex already created.\nbut why are you sure it is faster than lock compiler uses for static initialization?\n(each atomic operation also involves some kind of lock)",
      "revId": "d924035a14a2be9cb65f4c92604e4186d0efba2b",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "111acbee_a9c95386",
        "filename": "rtc_base/logging.cc",
        "patchSetId": 4
      },
      "lineNbr": 93,
      "author": {
        "id": 9405
      },
      "writtenOn": "2021-11-12T17:10:45Z",
      "side": 1,
      "message": "It was my mistake to use two load. Fixed\nI\u0027m not 100% sure that atomic access will be faster than accessing static initialized variables using mutex.\nLooking for a way to see if I can evaluate the performance difference.\nAlso considering just using the well-known pattern of static initialization.",
      "parentUuid": "d0efbe8e_421930b3",
      "revId": "d924035a14a2be9cb65f4c92604e4186d0efba2b",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a1e5b85c_df671bcc",
        "filename": "rtc_base/logging.cc",
        "patchSetId": 4
      },
      "lineNbr": 93,
      "author": {
        "id": 5019
      },
      "writtenOn": "2021-11-15T17:10:41Z",
      "side": 1,
      "message": "Unless you\u0027ve measured performance, I would prefer simpler\n  webrtc::Mutex\u0026 GetLoggingLock() {\n    static webrtc::Mutex\u0026 mutex \u003d *new webrtc::Mutex();\n    return mutex;\n  };\n  \nusually compiler can do better optimisation than developer.",
      "parentUuid": "111acbee_a9c95386",
      "revId": "d924035a14a2be9cb65f4c92604e4186d0efba2b",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    }
  ]
}