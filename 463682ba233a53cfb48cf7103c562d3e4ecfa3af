{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "e4bcb112_b466f607",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5613
      },
      "writtenOn": "2024-09-23T13:03:28Z",
      "side": 1,
      "message": "Hi @hta and @phancke@meta.com\n\nI looked at your original https://webrtc-review.googlesource.com/c/src/+/362480\nand think that it was hard to test (that we got behavior we want) and that\nthe behavior change was unclear, and that the implementation was too subtle.\n\nI applied your patch, and tested on \"my\" app, and got errors...\nthat I did not debug.\n\nMost of this I wrote as review comments, and I also wrote the doc about how I think it would work.\n\nThis being a boring Monday, I also wrote an implementation.\n\"Sorry\" about that. It is almost 100% complete...but not quite.\n\nObviously I like my implementation :) and I can complete it if you like it too.\nBut I can also abandon it if you think that is better.\nHow do you think we should proceed ?",
      "revId": "463682ba233a53cfb48cf7103c562d3e4ecfa3af",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "21345e5e_16aea9c2",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5634
      },
      "writtenOn": "2024-09-23T18:39:20Z",
      "side": 1,
      "message": "just shipping some comments on first readthrough - I still haven\u0027t delved into exactly how this ties into the DTLS machinery.",
      "revId": "463682ba233a53cfb48cf7103c562d3e4ecfa3af",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "49f1b53a_019ee20b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 3350241
      },
      "writtenOn": "2024-09-23T20:02:20Z",
      "side": 1,
      "message": "i can take a stab at updating my CL with this pattern, this will make things much easier to test!",
      "parentUuid": "21345e5e_16aea9c2",
      "revId": "463682ba233a53cfb48cf7103c562d3e4ecfa3af",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b1d9e7cf_4f145d52",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 3350241
      },
      "writtenOn": "2024-09-23T20:02:20Z",
      "side": 1,
      "message": "The controller is going to make the decision whether to send the DTLS packet normally or piggyback it?\n\nIt can also easily enforce things like \"only handshake packets\" in the future.",
      "revId": "463682ba233a53cfb48cf7103c562d3e4ecfa3af",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8ce16a0c_25ea3d85",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5613
      },
      "writtenOn": "2024-09-24T11:37:01Z",
      "side": 1,
      "message": "UPDATE: found 2 non functional aspect (after more closely monitored manual testing)\n\n1) the timeout thing *needs* to be fixed, it not just a nice-to-have\nI.e\n- there should be NO timeout when in piggy-back-only-mode\n- the timeout needs to turn on then getting writable first time\n\nThis is not theoretically hard to do...but from first glance\nmy impression is that it cuts across layers\n\n2) The cl need to be updated to track which packets are send/received.\nI\u0027ll probably do that this afternoon.",
      "revId": "463682ba233a53cfb48cf7103c562d3e4ecfa3af",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c4cb8198_a8e18a7d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5613
      },
      "writtenOn": "2024-09-24T11:42:32Z",
      "side": 1,
      "message": "re 2) I think only way to do this is using 2 attributes...(or maybe 3!)",
      "parentUuid": "8ce16a0c_25ea3d85",
      "revId": "463682ba233a53cfb48cf7103c562d3e4ecfa3af",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0a4570a1_fadebf20",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 3350241
      },
      "writtenOn": "2024-09-25T00:53:48Z",
      "side": 1,
      "message": "yeah, we need an API to *reset* the timeout or we are regressing the still-default  case of this not being supported.\n\nIf we \"flush\" the cached DTLS packets (which for the backward compat should just be the client hello) once ICE establishes that should mitigate some of the impact but if that DTLS packet is lost the resend will happen with the much higher exponential backoff.\n\nJust found https://source.chromium.org/chromium/chromium/src/+/main:third_party/boringssl/src/include/openssl/ssl.h;l\u003d335 which does not bode well for the overall plan of caching...\n\nI think we can *not* read from the SSL session at that point to give us the packet which would be sent next regardless of timeout. DTLSv1_handle_timeout almost does that but returns early if the timer did not expire.",
      "parentUuid": "c4cb8198_a8e18a7d",
      "revId": "463682ba233a53cfb48cf7103c562d3e4ecfa3af",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5d726ae2_5b481fed",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5613
      },
      "writtenOn": "2024-09-25T07:36:25Z",
      "side": 1,
      "message": "restating currently unsolved problem with timeouts.\n\n1) current DTLS timeout is computed based on RTT\n2) If we start DTLS before STUN PING RESPONSE, we don\u0027t have a RTT\n\n3) My idea was to update the DTLS timeout after we have received the STUN PING RESPONSE\nThis will also be the normal case when remote does not support piggybacked DTLS.\n\n3.1) OpenSSL (incl. boringssl) does not have a function to update the timeout\n\n3.2 We can either\na) add/modify OpenSSL to support this\nnot hard...but might need 10 billion approvals!\n\nb) we can modify openssl_stream_adapter.cc to handle the timeout\n\"outside\" of OpenSSL (i.e open-ssl will run with 0 timeout, but we will only call ssl-functions on \"our\" timeout), not super hard, but also not super great.",
      "parentUuid": "0a4570a1_fadebf20",
      "revId": "463682ba233a53cfb48cf7103c562d3e4ecfa3af",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b2d1c243_968e1570",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 3350241
      },
      "writtenOn": "2024-09-25T15:03:28Z",
      "side": 1,
      "message": "Good catch about the initial timeout! We might configure it to the 20ms STUN pacing instead of the current default 50 when this is used (the joy of defaults that... never get used).\n\nSetting the initial timeout after starting the handshake will be ignored but it looks like we can update this by calling dtls1_stop_timer but that is an internal API:\nhttps://source.chromium.org/chromium/chromium/src/+/main:third_party/boringssl/src/ssl/d1_lib.cc;l\u003d132;drc\u003df522344e45882da4c7f7cb1b3a0a7bd747d654bb;bpv\u003d1;bpt\u003d1\nWe can ask for it to be exposed in BoringSSL, we have a pretty clear use-case. I can start an email thread, this is easier with the slides instead of cc-ing on one of the CLs. OpenSSL is more tricky but I can deal with that.",
      "parentUuid": "5d726ae2_5b481fed",
      "revId": "463682ba233a53cfb48cf7103c562d3e4ecfa3af",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e265f51f_2f27b616",
        "filename": "p2p/base/connection.h",
        "patchSetId": 1
      },
      "lineNbr": 56,
      "author": {
        "id": 3350241
      },
      "writtenOn": "2024-09-23T20:02:20Z",
      "side": 1,
      "message": "we always assume a magic 1200 as MTU for RTP and DTLS (but IIRC for RTP that excludes the SRTP overhead)",
      "revId": "463682ba233a53cfb48cf7103c562d3e4ecfa3af",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f00fa49e_7cc58b1c",
        "filename": "p2p/base/connection.h",
        "patchSetId": 1
      },
      "lineNbr": 56,
      "author": {
        "id": 5634
      },
      "writtenOn": "2024-09-24T04:49:49Z",
      "side": 1,
      "message": "The IPv6 minimum MTU is 1280 (modulo details). I guess 1200 was chosen to give some leeway to SRTP overhead and other weirdness. In one particular SCTP/DTLS case, we had to go down to 1190, I think.",
      "parentUuid": "e265f51f_2f27b616",
      "revId": "463682ba233a53cfb48cf7103c562d3e4ecfa3af",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "904337f9_691a5a8c",
        "filename": "p2p/base/dtls_stun_piggyback_controller.h",
        "patchSetId": 1
      },
      "lineNbr": 23,
      "author": {
        "id": 5634
      },
      "writtenOn": "2024-09-23T18:39:20Z",
      "side": 1,
      "message": "Should you document this using a SequenceChecker?",
      "revId": "463682ba233a53cfb48cf7103c562d3e4ecfa3af",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8ad1c1e3_11d778ac",
        "filename": "p2p/base/dtls_stun_piggyback_controller.h",
        "patchSetId": 1
      },
      "lineNbr": 59,
      "author": {
        "id": 5634
      },
      "writtenOn": "2024-09-23T18:39:20Z",
      "side": 1,
      "message": "If this never changes, mark it with a const marker (I think it goes right before the name).",
      "revId": "463682ba233a53cfb48cf7103c562d3e4ecfa3af",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6cc13eac_ac17dcaf",
        "filename": "p2p/base/dtls_transport.cc",
        "patchSetId": 1
      },
      "lineNbr": 154,
      "author": {
        "id": 5634
      },
      "writtenOn": "2024-09-23T18:39:20Z",
      "side": 1,
      "message": "Is KESO the local variant of DEBUG?",
      "revId": "463682ba233a53cfb48cf7103c562d3e4ecfa3af",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9aaf091b_fef5b755",
        "filename": "p2p/base/p2p_transport_channel.cc",
        "patchSetId": 1
      },
      "lineNbr": 183,
      "author": {
        "id": 3350241
      },
      "writtenOn": "2024-09-25T15:03:28Z",
      "side": 1,
      "message": "this also needs to be wired up in OnUnknownAddress to handle prflx candidates?\nEasy to test by *not* adding the DTLS clients (answerer) ice candidates which forces prflx",
      "revId": "463682ba233a53cfb48cf7103c562d3e4ecfa3af",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    }
  ]
}