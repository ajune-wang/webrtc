{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "7041d345_7c40a90d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 12094
      },
      "writtenOn": "2024-02-02T08:15:37Z",
      "side": 1,
      "message": "@philipel@chromium.org, this CL mainly add HEVC support for h26x_packet_buffer. `Clear` and `ClearTo` are not implemented yet. I\u0027ll add them in a separate CL.",
      "revId": "e901a6b89d675f0a99c9840f87aed17acac5c1e4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2af9b9c0_18cba9ab",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 5634
      },
      "writtenOn": "2024-02-05T07:01:18Z",
      "side": 1,
      "message": "Holding off until H.26x experts have chimed in.\nSomewhat skeptical of merging the buffer classes when the resulting H26x class has \"if this codec/that codec\" functions. A common base class with subclasses may be a cleaner pattern.",
      "revId": "e901a6b89d675f0a99c9840f87aed17acac5c1e4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "60681dd5_9d851155",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 12094
      },
      "writtenOn": "2024-02-05T07:40:16Z",
      "side": 1,
      "message": "Philip might have some experiments two years ago, and decided to move forward with the standalone h26x_packet_buffer (see conversation with Philip above). It would be hard for him to recall the reason, but if you and Philip (or other reviewers) think it worths to try the inheritance pattern again, I can update the CL and see if there is any problems at this time.",
      "parentUuid": "2af9b9c0_18cba9ab",
      "revId": "e901a6b89d675f0a99c9840f87aed17acac5c1e4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d13d50d8_3c82b0cf",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 18005
      },
      "writtenOn": "2024-02-05T07:56:28Z",
      "side": 1,
      "message": "Let me explain the difference of H.265 packet buffer impl. against H.264 packet buffer:\n\n1. For H.264 the output from depacketizer is an array of NALUs(without start code) with their indices in RTPHeader.H264CodecSpecific;\n   - Packet buffer is expected to 1) check existence of key-frame before outputting frame; 2) add start code before NALU; 3) configure RTPHeader.frameType according to current frame\u0027s real type.\n   \n2. For H.265 the output from depacketizer is already segments with start code inserted when necessary, and RTPHeader.frameType configured. Packet buffer is expected to only check existence of key-frame before outputting frame. Nothing else. The decision of not having H.265 codec specific RTPHeader member is made with RTC team at the beginning.\n\nLooks a little overkill to have a base H.26x packet_buffer class and H.264/H.265 override that, but I don\u0027t have strong objection on doing that.",
      "parentUuid": "60681dd5_9d851155",
      "revId": "e901a6b89d675f0a99c9840f87aed17acac5c1e4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "af2ee82c_f23fb8bd",
        "filename": "modules/video_coding/h26x_packet_buffer.cc",
        "patchSetId": 7
      },
      "lineNbr": 144,
      "author": {
        "id": 5527
      },
      "writtenOn": "2024-02-07T10:22:56Z",
      "side": 1,
      "message": "Rename this to `h264_idr_only_keyframes_allowed`, also update the corresponding member.",
      "range": {
        "startLine": 144,
        "startChar": 40,
        "endLine": 144,
        "endChar": 66
      },
      "revId": "e901a6b89d675f0a99c9840f87aed17acac5c1e4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7919f89c_333d3e9c",
        "filename": "modules/video_coding/h26x_packet_buffer.cc",
        "patchSetId": 7
      },
      "lineNbr": 144,
      "author": {
        "id": 12094
      },
      "writtenOn": "2024-02-08T06:56:36Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "af2ee82c_f23fb8bd",
      "range": {
        "startLine": 144,
        "startChar": 40,
        "endLine": 144,
        "endChar": 66
      },
      "revId": "e901a6b89d675f0a99c9840f87aed17acac5c1e4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b6fc45dc_561e3afd",
        "filename": "modules/video_coding/h26x_packet_buffer.cc",
        "patchSetId": 7
      },
      "lineNbr": 156,
      "author": {
        "id": 5527
      },
      "writtenOn": "2024-02-07T10:22:56Z",
      "side": 1,
      "message": "This check would now never hit if someone were to insert a non H264 packet.\n\nI think we can simply remove this check, or it would have to look like something like this:\n\n    if (!absl::holds_alternative\u003cRTPVideoHeaderH264\u003e(\n            packet-\u003evideo_header.video_type_header\n    #ifdef RTC_ENABLE_H265\n        || !absl::holds_alternative\u003cRTPVideoHeaderH265\u003e(\n            packet-\u003evideo_header.video_type_header\n    #endif  \n            ) {\n      return result;\n    }",
      "range": {
        "startLine": 156,
        "startChar": 4,
        "endLine": 156,
        "endChar": 17
      },
      "revId": "e901a6b89d675f0a99c9840f87aed17acac5c1e4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9282b02c_2bc7287e",
        "filename": "modules/video_coding/h26x_packet_buffer.cc",
        "patchSetId": 7
      },
      "lineNbr": 156,
      "author": {
        "id": 12094
      },
      "writtenOn": "2024-02-08T06:56:36Z",
      "side": 1,
      "message": "An RTC_DCHECK was added above so only H264 and H265 packets will be inserted. Jianlin told me we don\u0027t want `RTCVideoHeaderH265` as per our previous discussion. Therefore, this check is only for H264.",
      "parentUuid": "b6fc45dc_561e3afd",
      "range": {
        "startLine": 156,
        "startChar": 4,
        "endLine": 156,
        "endChar": 17
      },
      "revId": "e901a6b89d675f0a99c9840f87aed17acac5c1e4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d03873d1_40c817c0",
        "filename": "modules/video_coding/h26x_packet_buffer.cc",
        "patchSetId": 7
      },
      "lineNbr": 156,
      "author": {
        "id": 5527
      },
      "writtenOn": "2024-02-08T07:50:32Z",
      "side": 1,
      "message": "\u003e Jianlin told me we don\u0027t want `RTCVideoHeaderH265` as per our previous discussion. Therefore, this check is only for H264.\n\nAh, good point, but in that case I would say just remove this check, it had very little value to begin with.",
      "parentUuid": "9282b02c_2bc7287e",
      "range": {
        "startLine": 156,
        "startChar": 4,
        "endLine": 156,
        "endChar": 17
      },
      "revId": "e901a6b89d675f0a99c9840f87aed17acac5c1e4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f8f8f13f_727dc331",
        "filename": "modules/video_coding/h26x_packet_buffer.cc",
        "patchSetId": 7
      },
      "lineNbr": 285,
      "author": {
        "id": 5527
      },
      "writtenOn": "2024-02-07T10:22:56Z",
      "side": 1,
      "message": "Shouldn\u0027t `has_irap` match any of\n\n      H265::NaluType::kBlaWLp\n      H265::NaluType::kBlaWRadl\n      H265::NaluType::kBlaNLp\n      H265::NaluType::kIdrWRadl\n      H265::NaluType::kIdrNLp\n      H265::NaluType::kCra\n      H265::NaluType::kRsvIrapVcl23\n      \n?",
      "range": {
        "startLine": 285,
        "startChar": 8,
        "endLine": 285,
        "endChar": 16
      },
      "revId": "e901a6b89d675f0a99c9840f87aed17acac5c1e4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1e48d4f8_6ff2aaeb",
        "filename": "modules/video_coding/h26x_packet_buffer.cc",
        "patchSetId": 7
      },
      "lineNbr": 285,
      "author": {
        "id": 12094
      },
      "writtenOn": "2024-02-08T06:56:36Z",
      "side": 1,
      "message": "These types are between kBlaWLp (16) and kRsvIrapVcl23 (23), so the code in line 285 and 286 checks if `nalu_type` is in the range. Patchset 8 updated test case H265IrapIsNotKeyframe for checking all these types.",
      "parentUuid": "f8f8f13f_727dc331",
      "range": {
        "startLine": 285,
        "startChar": 8,
        "endLine": 285,
        "endChar": 16
      },
      "revId": "e901a6b89d675f0a99c9840f87aed17acac5c1e4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f284caad_3972eb6d",
        "filename": "modules/video_coding/h26x_packet_buffer.cc",
        "patchSetId": 7
      },
      "lineNbr": 302,
      "author": {
        "id": 5527
      },
      "writtenOn": "2024-02-07T10:22:56Z",
      "side": 1,
      "message": "Move this to the end of the `if` block at 269.",
      "range": {
        "startLine": 298,
        "startChar": 0,
        "endLine": 302,
        "endChar": 3
      },
      "revId": "e901a6b89d675f0a99c9840f87aed17acac5c1e4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8a53dd0f_b530177c",
        "filename": "modules/video_coding/h26x_packet_buffer.cc",
        "patchSetId": 7
      },
      "lineNbr": 302,
      "author": {
        "id": 12094
      },
      "writtenOn": "2024-02-08T06:56:36Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f284caad_3972eb6d",
      "range": {
        "startLine": 298,
        "startChar": 0,
        "endLine": 302,
        "endChar": 3
      },
      "revId": "e901a6b89d675f0a99c9840f87aed17acac5c1e4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c0f915e5_6b2fe3a1",
        "filename": "modules/video_coding/h26x_packet_buffer.cc",
        "patchSetId": 7
      },
      "lineNbr": 308,
      "author": {
        "id": 5527
      },
      "writtenOn": "2024-02-07T10:22:56Z",
      "side": 1,
      "message": "Move this to the end of the `else if` block at 278.",
      "range": {
        "startLine": 304,
        "startChar": 0,
        "endLine": 308,
        "endChar": 3
      },
      "revId": "e901a6b89d675f0a99c9840f87aed17acac5c1e4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4b6b699f_e5076bde",
        "filename": "modules/video_coding/h26x_packet_buffer.cc",
        "patchSetId": 7
      },
      "lineNbr": 308,
      "author": {
        "id": 12094
      },
      "writtenOn": "2024-02-08T06:56:36Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c0f915e5_6b2fe3a1",
      "range": {
        "startLine": 304,
        "startChar": 0,
        "endLine": 308,
        "endChar": 3
      },
      "revId": "e901a6b89d675f0a99c9840f87aed17acac5c1e4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1bc09c01_34cf0b04",
        "filename": "modules/video_coding/h26x_packet_buffer.cc",
        "patchSetId": 7
      },
      "lineNbr": 333,
      "author": {
        "id": 5527
      },
      "writtenOn": "2024-02-07T10:22:56Z",
      "side": 1,
      "message": "Rename to FixH264VideoPayload.",
      "range": {
        "startLine": 333,
        "startChar": 10,
        "endLine": 333,
        "endChar": 25
      },
      "revId": "e901a6b89d675f0a99c9840f87aed17acac5c1e4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bb40ff58_529ea76c",
        "filename": "modules/video_coding/h26x_packet_buffer.cc",
        "patchSetId": 7
      },
      "lineNbr": 333,
      "author": {
        "id": 12094
      },
      "writtenOn": "2024-02-08T06:56:36Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1bc09c01_34cf0b04",
      "range": {
        "startLine": 333,
        "startChar": 10,
        "endLine": 333,
        "endChar": 25
      },
      "revId": "e901a6b89d675f0a99c9840f87aed17acac5c1e4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "38ac585f_bc356493",
        "filename": "modules/video_coding/h26x_packet_buffer_unittest.cc",
        "patchSetId": 7
      },
      "lineNbr": 339,
      "author": {
        "id": 5527
      },
      "writtenOn": "2024-02-07T10:22:56Z",
      "side": 1,
      "message": "`#endif  // RTC_ENABLE_H265`",
      "range": {
        "startLine": 339,
        "startChar": 1,
        "endLine": 339,
        "endChar": 6
      },
      "revId": "e901a6b89d675f0a99c9840f87aed17acac5c1e4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8068115b_8e28ef47",
        "filename": "modules/video_coding/h26x_packet_buffer_unittest.cc",
        "patchSetId": 7
      },
      "lineNbr": 339,
      "author": {
        "id": 12094
      },
      "writtenOn": "2024-02-08T06:56:36Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "38ac585f_bc356493",
      "range": {
        "startLine": 339,
        "startChar": 1,
        "endLine": 339,
        "endChar": 6
      },
      "revId": "e901a6b89d675f0a99c9840f87aed17acac5c1e4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d1d28008_af429781",
        "filename": "modules/video_coding/h26x_packet_buffer_unittest.cc",
        "patchSetId": 7
      },
      "lineNbr": 933,
      "author": {
        "id": 5527
      },
      "writtenOn": "2024-02-07T10:22:56Z",
      "side": 1,
      "message": "`H265VpsSpsPpsIdrIsKeyframe`",
      "range": {
        "startLine": 933,
        "startChar": 27,
        "endLine": 933,
        "endChar": 44
      },
      "revId": "e901a6b89d675f0a99c9840f87aed17acac5c1e4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9623d48c_adf86713",
        "filename": "modules/video_coding/h26x_packet_buffer_unittest.cc",
        "patchSetId": 7
      },
      "lineNbr": 933,
      "author": {
        "id": 12094
      },
      "writtenOn": "2024-02-08T06:56:36Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d1d28008_af429781",
      "range": {
        "startLine": 933,
        "startChar": 27,
        "endLine": 933,
        "endChar": 44
      },
      "revId": "e901a6b89d675f0a99c9840f87aed17acac5c1e4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    }
  ]
}