{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "06869f56_0d5722e1",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 5019
      },
      "writtenOn": "2022-05-25T11:29:37Z",
      "side": 1,
      "message": "declaring copy constructor without move constructor automatically deletes move constructor, so currently moves and not there.",
      "revId": "1d1f9960bd359f9d0ebc93c6d35a84ee6acde440",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0f2b2d14_f69d8e89",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 5508
      },
      "writtenOn": "2022-05-25T11:51:30Z",
      "side": 1,
      "message": "Ack, fixed the CL description.",
      "parentUuid": "06869f56_0d5722e1",
      "revId": "1d1f9960bd359f9d0ebc93c6d35a84ee6acde440",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7dbb826e_c872417c",
        "filename": "api/candidate.h",
        "patchSetId": 3
      },
      "lineNbr": 48,
      "author": {
        "id": 5019
      },
      "writtenOn": "2022-05-25T11:29:37Z",
      "side": 1,
      "message": "looking at the class members I do not see benefit in adding move operator.\nDo you have evidence that this move operator increases performance?\n\n(in theory large strings might be faster to move, but I suspect most of the strings here are short, thus subject of the small string optimization and thus move is not faster than copy)\n\nhttps://google.github.io/styleguide/cppguide.html#Copy_Constructors\n“Move operations for copyable types are strictly a performance optimization and are a potential source of bugs and complexity, so avoid defining them unless they are significantly more efficient than the corresponding copy operations.”",
      "range": {
        "startLine": 48,
        "startChar": 0,
        "endLine": 48,
        "endChar": 35
      },
      "revId": "1d1f9960bd359f9d0ebc93c6d35a84ee6acde440",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "972191d0_12c67708",
        "filename": "api/candidate.h",
        "patchSetId": 3
      },
      "lineNbr": 178,
      "author": {
        "id": 5019
      },
      "writtenOn": "2022-05-25T11:29:37Z",
      "side": 1,
      "message": "assign operators should be generally declared among constructors, before destructor and other functions\n\nhttps://google.github.io/styleguide/cppguide.html#Declaration_Order",
      "revId": "1d1f9960bd359f9d0ebc93c6d35a84ee6acde440",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6613a980_419a64e8",
        "filename": "rtc_base/ip_address.h",
        "patchSetId": 3
      },
      "lineNbr": 72,
      "author": {
        "id": 5019
      },
      "writtenOn": "2022-05-25T11:29:37Z",
      "side": 1,
      "message": "ditto, why move would be significantly more efficient than copy?",
      "revId": "1d1f9960bd359f9d0ebc93c6d35a84ee6acde440",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "507396c8_4d39a873",
        "filename": "rtc_base/ip_address.h",
        "patchSetId": 3
      },
      "lineNbr": 72,
      "author": {
        "id": 5508
      },
      "writtenOn": "2022-05-25T11:51:30Z",
      "side": 1,
      "message": "Don\u0027t expect that they would.\n\nTaking a couple of steps back - The background is that I\u0027m changing a few methods in the port and connection classes that have to do with candidates. As is, the Connection class exposes a getter (local_candidate()) that is actually a forwarding call over to port_\u0027s vector of candidates, using an index into that vector that\u0027s owned by Connection.\n\nThe problem is that the lifetime of Port and Connection (still) isn\u0027t strictly defined, so Connection\u0027s `port_` pointer, might in theory be nullptr when local_candidate() is called.\n\nWhat I\u0027d rather have, is that Connection would have a reliable local candidate member variable. It could be shared with port, but it\u0027s important to get away from dereferencing the port_ variable.\n\nSo as I was looking into how candidates are constructed, stored and passed around, I saw that we were pretty much copying them at every turn. So, this cl is kind of at the opposite end of the story.\n\nThoughts?",
      "parentUuid": "6613a980_419a64e8",
      "revId": "1d1f9960bd359f9d0ebc93c6d35a84ee6acde440",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ee86889d_29b40ff8",
        "filename": "rtc_base/ip_address.h",
        "patchSetId": 3
      },
      "lineNbr": 72,
      "author": {
        "id": 5019
      },
      "writtenOn": "2022-05-25T12:14:02Z",
      "side": 1,
      "message": "why copying is a problem? if it is perfomance issue, then moving most likely won\u0027t solve it.\n\nThere is also \"copy elision\" feature (and also \"return value optimization\")\ne.g. see https://abseil.io/tips/166 or https://abseil.io/tips/117\n\"It turns out that sometimes passing by value can be much more efficient than passing by reference.\"\n\nI would suggest to somehow measure perfomance to check if copy is a problem in the first place. If they are copied only during startup/renegotiation/tear down, then those events are so rare that slow copy unlikely be an issue.\n\nif copy is expensive, then it might be more efficient to wrap those types into unique_ptr (and move), or into shared_ptr\u003cconst T\u003e to have cheap immutable copies (or shared_ptr\u003cT\u003e, but then need to be careful when it is used from different threads)",
      "parentUuid": "507396c8_4d39a873",
      "revId": "1d1f9960bd359f9d0ebc93c6d35a84ee6acde440",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7d6e0f8a_e6afe9ed",
        "filename": "rtc_base/ip_address.h",
        "patchSetId": 3
      },
      "lineNbr": 72,
      "author": {
        "id": 5508
      },
      "writtenOn": "2022-05-25T12:39:48Z",
      "side": 1,
      "message": "I guess this would be the simplest approach then:\nhttps://webrtc-review.googlesource.com/c/src/+/263643\n\nIt does remove the previous `index` optimization though, but I\u0027m not sure if that was actually justified from the start.",
      "parentUuid": "ee86889d_29b40ff8",
      "revId": "1d1f9960bd359f9d0ebc93c6d35a84ee6acde440",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    }
  ]
}