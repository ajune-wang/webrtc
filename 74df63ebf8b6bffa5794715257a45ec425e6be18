{
  "comments": [
    {
      "key": {
        "uuid": "e33db02b_94c2b65a",
        "filename": "video/adaptation/encode_usage_resource.cc",
        "patchSetId": 39
      },
      "lineNbr": 96,
      "author": {
        "id": 5117
      },
      "writtenOn": "2020-05-12T12:03:47Z",
      "side": 1,
      "message": "Is it here to ensure that resource isn\u0027t deleted while the task is being dispatched?\nI would be happy if we could come up with a better solution to this issue, but \nMaybe ensure that resources are deleted after the task_queue is stopped?\nSo far it\u0027s confusing and I was compelled to comment \"it\u0027s unused, please delete it\".\n\nMy suggestion is to move queues to the base class Resource. Then you could post the task in |Resourse::OnResourceUsageStateMeasured()|. Then you could add RTC_GUARDED_BY(queue) tag to the  |listener_| and |usage_state_|.\n\nBut it get\u0027s tricky with quality_scaler_resource. For now I\u0027m fine with it.\nAt least add a comment here on why this_ref is needed.\n\nAlso, please do move queues to |Resource|, even if OnResrouceUsageStateMeasured is posted everywhere. If anything, it would remove a lot of duplicated code in all the resources and you could protect Resource members with RTC_GUARDERD_BY().",
      "range": {
        "startLine": 96,
        "startChar": 13,
        "endLine": 96,
        "endChar": 21
      },
      "revId": "74df63ebf8b6bffa5794715257a45ec425e6be18",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "063ef71b_b3077374",
        "filename": "video/adaptation/quality_scaler_resource.cc",
        "patchSetId": 39
      },
      "lineNbr": 129,
      "author": {
        "id": 5117
      },
      "writtenOn": "2020-05-12T12:03:47Z",
      "side": 1,
      "message": "if it\u0027s task postings now, infinite recursion is impossible now. Please remove processing_in_progress_\nIt might happen that due to some mistake in the logic we will post unnecessary tasks in a loop, but processing_in_progress won\u0027t catch that, as it will be set and unset while a task is being run.",
      "range": {
        "startLine": 129,
        "startChar": 8,
        "endLine": 129,
        "endChar": 31
      },
      "revId": "74df63ebf8b6bffa5794715257a45ec425e6be18",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "74bd5408_c63d38c1",
        "filename": "video/adaptation/quality_scaler_resource.h",
        "patchSetId": 39
      },
      "lineNbr": 89,
      "author": {
        "id": 5117
      },
      "writtenOn": "2020-05-12T12:03:47Z",
      "side": 1,
      "message": "nit: Could you please group all the members by the queue they are used at?",
      "revId": "74df63ebf8b6bffa5794715257a45ec425e6be18",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f7ed5946_2b4dbb1a",
        "filename": "video/adaptation/video_stream_encoder_resource_manager.cc",
        "patchSetId": 39
      },
      "lineNbr": 309,
      "author": {
        "id": 8683
      },
      "writtenOn": "2020-05-12T13:16:24Z",
      "side": 1,
      "message": "For all of these above, why is this and this_ref needed? Why not just this_ref?",
      "range": {
        "startLine": 309,
        "startChar": 7,
        "endLine": 309,
        "endChar": 15
      },
      "revId": "74df63ebf8b6bffa5794715257a45ec425e6be18",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "272534a3_4418fb38",
        "filename": "video/adaptation/video_stream_encoder_resource_manager.cc",
        "patchSetId": 39
      },
      "lineNbr": 841,
      "author": {
        "id": 5142
      },
      "writtenOn": "2020-05-12T10:24:04Z",
      "side": 1,
      "message": "Can this be replaced by an atomic boolean?",
      "revId": "74df63ebf8b6bffa5794715257a45ec425e6be18",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e3871255_522e5582",
        "filename": "video/adaptation/video_stream_encoder_resource_manager.cc",
        "patchSetId": 39
      },
      "lineNbr": 841,
      "author": {
        "id": 5117
      },
      "writtenOn": "2020-05-12T12:03:47Z",
      "side": 1,
      "message": "yes it can!\nIt might happen that the code in the task below for adaptation queue first sees false, then updates it to true, while code here in encoder queue would post an extra unneeded task between these two accesses. It wouldn\u0027t be a problem since no real harm would be done and the same can happen if the encoder_queue task checks the flag value right before the resource adaptation queue task enters the critical section.",
      "parentUuid": "272534a3_4418fb38",
      "revId": "74df63ebf8b6bffa5794715257a45ec425e6be18",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f4a969b6_87e3caba",
        "filename": "video/adaptation/video_stream_encoder_resource_manager.h",
        "patchSetId": 39
      },
      "lineNbr": 186,
      "author": {
        "id": 5117
      },
      "writtenOn": "2020-05-12T12:03:47Z",
      "side": 1,
      "message": "Move it to |Resource| class altogether.",
      "range": {
        "startLine": 186,
        "startChar": 9,
        "endLine": 186,
        "endChar": 19
      },
      "revId": "74df63ebf8b6bffa5794715257a45ec425e6be18",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "84b3df44_1b726a31",
        "filename": "video/adaptation/video_stream_encoder_resource_manager.h",
        "patchSetId": 39
      },
      "lineNbr": 186,
      "author": {
        "id": 8683
      },
      "writtenOn": "2020-05-12T13:16:24Z",
      "side": 1,
      "message": "I agree with Ilya, trying to move this to the base class could make things a little more straightforward. However the encoder_queue in not so important in the base class, I understand that can be tricky.",
      "parentUuid": "f4a969b6_87e3caba",
      "range": {
        "startLine": 186,
        "startChar": 9,
        "endLine": 186,
        "endChar": 19
      },
      "revId": "74df63ebf8b6bffa5794715257a45ec425e6be18",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3d98eddd_77d27548",
        "filename": "video/adaptation/video_stream_encoder_resource_manager.h",
        "patchSetId": 39
      },
      "lineNbr": 208,
      "author": {
        "id": 5117
      },
      "writtenOn": "2020-05-12T12:03:47Z",
      "side": 1,
      "message": "Oh, this is another tricky situation of moving the queues to Resource. \nIn theory it should work even if resource_adaptation_queue is moved to |Resource|. Worth a try, IMHO.",
      "range": {
        "startLine": 208,
        "startChar": 23,
        "endLine": 208,
        "endChar": 49
      },
      "revId": "74df63ebf8b6bffa5794715257a45ec425e6be18",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2ed6f3c8_a122cb8c",
        "filename": "video/video_stream_encoder_unittest.cc",
        "patchSetId": 39
      },
      "lineNbr": 204,
      "author": {
        "id": 5142
      },
      "writtenOn": "2020-05-12T09:30:10Z",
      "side": 1,
      "message": "Self-review: Is this needed?",
      "revId": "74df63ebf8b6bffa5794715257a45ec425e6be18",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "10793fd6_faa95768",
        "filename": "video/video_stream_encoder_unittest.cc",
        "patchSetId": 39
      },
      "lineNbr": 204,
      "author": {
        "id": 5117
      },
      "writtenOn": "2020-05-12T12:03:47Z",
      "side": 1,
      "message": "Is the idea here to ensure that encoder_queue does some activity posted by set_usage_state and event is set after that? What if that activity posts something else across the tasks?\nIt\u0027s very tricky and i think it will be impossible to test. If there\u0027s no tasks cascade, then the current way should work.\n\nIf you just want to wait till set_usage_state terminates, no need to post a task back to the encoder queue. Events should work across different threads.",
      "parentUuid": "2ed6f3c8_a122cb8c",
      "revId": "74df63ebf8b6bffa5794715257a45ec425e6be18",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4537ccb6_b80b7074",
        "filename": "video/video_stream_encoder_unittest.cc",
        "patchSetId": 39
      },
      "lineNbr": 2256,
      "author": {
        "id": 5142
      },
      "writtenOn": "2020-05-12T09:30:10Z",
      "side": 1,
      "message": "Self-review: Fix all the \"BEFORE LANDING\" TODOs.",
      "revId": "74df63ebf8b6bffa5794715257a45ec425e6be18",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    }
  ]
}