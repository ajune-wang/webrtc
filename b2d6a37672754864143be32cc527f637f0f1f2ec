{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "86afc39f_9c13f23c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5634
      },
      "writtenOn": "2022-10-24T07:30:40Z",
      "side": 1,
      "message": "Wonder if we could go even one step further. Looks good otherwise.",
      "revId": "b2d6a37672754864143be32cc527f637f0f1f2ec",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "49a619fd_8b66ab35",
        "filename": "p2p/base/port_allocator.cc",
        "patchSetId": 2
      },
      "lineNbr": 148,
      "author": {
        "id": 19549
      },
      "writtenOn": "2022-10-21T18:13:05Z",
      "side": 1,
      "message": "turn servers are compared here which means the comparison operator gets used (and needed to change). Hard to catch, I don\u0027t think we have any integration test?",
      "revId": "b2d6a37672754864143be32cc527f637f0f1f2ec",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5a8388f3_971585aa",
        "filename": "p2p/base/port_allocator.h",
        "patchSetId": 2
      },
      "lineNbr": 174,
      "author": {
        "id": 19549
      },
      "writtenOn": "2022-10-21T18:13:05Z",
      "side": 1,
      "message": "this is required because we compare the new servers to the old servers below but the new servers don\u0027t have the priority set.\n\nAFAIK this operator isn\u0027t used much externally, only in remoting/protocol/ice_config_unittest.cc\nwhich looks very much like it is using the old apprtc json format?!",
      "revId": "b2d6a37672754864143be32cc527f637f0f1f2ec",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1fa9da87_4e5b2c2d",
        "filename": "p2p/base/port_allocator.h",
        "patchSetId": 2
      },
      "lineNbr": 174,
      "author": {
        "id": 5634
      },
      "writtenOn": "2022-10-24T07:30:40Z",
      "side": 1,
      "message": "It\u0027s not in api/, so should in theory not be used externally. Don\u0027t you love theories?",
      "parentUuid": "5a8388f3_971585aa",
      "revId": "b2d6a37672754864143be32cc527f637f0f1f2ec",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "71c42d0d_20f2999f",
        "filename": "p2p/base/port_allocator.h",
        "patchSetId": 2
      },
      "lineNbr": 183,
      "author": {
        "id": 5634
      },
      "writtenOn": "2022-10-24T07:30:40Z",
      "side": 1,
      "message": "given that it\u0027s not computed initially, should it be absl::optional?\n\nI do wonder where it is used - would it be possible to have a function PortAllocator-\u003eTurnServerPriority(index) that returns sizeof(turn_servers_) - index (and DCHECKs on out-of-bounds arguments)?\n\nThat would make it clearer that priority is a function of the turn server list, not a property of the individual turn server.",
      "revId": "b2d6a37672754864143be32cc527f637f0f1f2ec",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "At least one maximum vote for label \u0027Code-Review\u0027 is required"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader AND -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1 AND -label:Code-Review\u003dMIN"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader AND -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Code-Review=MAX,user=non_uploader","label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1 AND -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1","label:Code-Review=MIN"]}
      },
      "patchSetCommitId": "b2d6a37672754864143be32cc527f637f0f1f2ec",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforced_gerrit"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforcement-satisfied_gerrit"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "b2d6a37672754864143be32cc527f637f0f1f2ec",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}