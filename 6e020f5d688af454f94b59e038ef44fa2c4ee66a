{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "5f2a2a8f_25add97a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 8046
      },
      "writtenOn": "2022-10-10T18:26:17Z",
      "side": 1,
      "message": "Thanks. I think I saw this issue in the past for a while, but never identified what might be wrong. I know the X11 implementation was slightly different, but it looked weird to me ovewriting shared frames so I implemented it the way that was correct in my opinion.",
      "revId": "6e020f5d688af454f94b59e038ef44fa2c4ee66a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fc6c889b_fcf82e43",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 8046
      },
      "writtenOn": "2022-10-10T18:30:14Z",
      "side": 1,
      "message": "This will also break my unit test as I have a test for this exact case. At least I can remove it and make it more simple.",
      "revId": "6e020f5d688af454f94b59e038ef44fa2c4ee66a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0d3d3e79_a2a7af5f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 19629
      },
      "writtenOn": "2022-10-10T18:59:05Z",
      "side": 1,
      "message": "I think the underlying issue is us always moving to the next frame without knowing if we will be able to use it. If we can extend the queue API to tell us whether or not the next frame is shared, we can still avoid overwriting the frame (i.e. keeping your logic to return from ProcessBuffer). This can though cause visual effects of screen freezes (when e.g. queue has no frame we can write to) and/or frames speeding up (when we suddenly have a frame we can use in the queue but we have missed to capture few frames in the past) I think. But at least frames will be monotonic on time scale.\n\n(Separately, we should keep the RTC_DLOG (for debug logging this condition) since otherwise we see lot of warnings on some slower machines.)",
      "parentUuid": "5f2a2a8f_25add97a",
      "revId": "6e020f5d688af454f94b59e038ef44fa2c4ee66a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "At least one maximum vote for label \u0027Code-Review\u0027 is required"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader AND -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader AND -label:Code-Review=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Code-Review=MAX,user=non_uploader"],"failingAtoms":["label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1"]}
      },
      "patchSetCommitId": "6e020f5d688af454f94b59e038ef44fa2c4ee66a",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["is:review-enforced_gerrit"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforcement-satisfied_gerrit"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforcement-satisfied_gerrit"]}
      },
      "patchSetCommitId": "6e020f5d688af454f94b59e038ef44fa2c4ee66a",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {
        "value": true
      }
    }
  ]
}