{
  "comments": [
    {
      "key": {
        "uuid": "51e5ee08_84ea439d",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 12,
      "author": {
        "id": 5126
      },
      "writtenOn": "2019-03-01T11:29:57Z",
      "side": 1,
      "message": "I agree that centralizing this dangerous practice is useful. It makes it easier to spot and track.",
      "revId": "ca43a255febc0c1c03e1186c124f7bc10b70b8cf",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c70463e6_f0deb83d",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 12,
      "author": {
        "id": 5019
      },
      "writtenOn": "2019-03-01T11:54:06Z",
      "side": 1,
      "message": "there is TaskQueueForTest that is one of the attempts to centralize that.\n\nTaskQueue is by design asynchronous. Introducing blocking method (even though called unsafe) seems like giving up on the main idea of the TaskQueue.\n\nI think it would be helpful to create and discuss a design doc how TaskQueue interface suppose to look like before adding new functions into it.\n\nA different design can produce a plan how to reduce/eliminate number of blocking calls.\nCentralizing that usage can be a step towards that goal, but it is only a step.\nWithout bigger picture it looks harmful.",
      "parentUuid": "51e5ee08_84ea439d",
      "revId": "ca43a255febc0c1c03e1186c124f7bc10b70b8cf",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "512fe1c8_7ab78a34",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 12,
      "author": {
        "id": 5531
      },
      "writtenOn": "2019-03-01T13:16:19Z",
      "side": 1,
      "message": "Since it currently support blocking behavior, and blocking behavior is widely used in the code base, I don\u0027t see how it would be harmful to explicitly provide an interface for it. I agree that it would be ideal if we could avoid blocking behavior, but there is a lot of unit tests and probably plenty of production code that assumes synchronous behavior in the API at different levels.",
      "parentUuid": "c70463e6_f0deb83d",
      "revId": "ca43a255febc0c1c03e1186c124f7bc10b70b8cf",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6f66790c_f6265321",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 12,
      "author": {
        "id": 5126
      },
      "writtenOn": "2019-03-02T09:37:47Z",
      "side": 1,
      "message": "There\u0027s also the point that making blocking calls *to* a TQ and making blocking calls *from* a TQ are two different things. IIUC your immediate problem was with the latter, Sebastian?",
      "parentUuid": "512fe1c8_7ab78a34",
      "revId": "ca43a255febc0c1c03e1186c124f7bc10b70b8cf",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1decf24f_5df4e5d7",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 12,
      "author": {
        "id": 5531
      },
      "writtenOn": "2019-03-04T08:19:03Z",
      "side": 1,
      "message": "My issue is with making a blocking call to a TQ, but from the same thread as the TQ. In practice, the solution would also allow posting from a TQ, but that is not something I expect that we\u0027ll use.",
      "parentUuid": "6f66790c_f6265321",
      "revId": "ca43a255febc0c1c03e1186c124f7bc10b70b8cf",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "064a816b_03c10cf8",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 12,
      "author": {
        "id": 5126
      },
      "writtenOn": "2019-03-04T08:37:11Z",
      "side": 1,
      "message": "So the code is making a blocking call from task queue A to task queue B, and you run into problems because you try to use a single thread to drive both A and B?\n\nI completely agree that this is something we want to avoid anyway---the fundamental problem is *not* that you\u0027re doing something unusual. Blocking calls in general, and blocking calls *from* a task queue in particular, is something we\u0027d really like to avoid.\n\nThat said, I think the cleanest way to solve your immediate problem, without having to rearchitect the WebRTC threading model first, would be to bump the thread pool size by 1 for the duration of the blocking call. And ideally, we\u0027d do this without polluting the public API.",
      "parentUuid": "1decf24f_5df4e5d7",
      "revId": "ca43a255febc0c1c03e1186c124f7bc10b70b8cf",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "935f094a_37c273ea",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 12,
      "author": {
        "id": 5531
      },
      "writtenOn": "2019-03-08T16:44:38Z",
      "side": 1,
      "message": "As discussed offline, bumping thread pool wont help here since I got none.\n\nI still don\u0027t follow why we think it\u0027s better to do blocking calls using Event that an explicit API. Intependently of potential workaround I could use (currently it\u0027s leaning towards having to maintain a fork of webrtc with this feature",
      "parentUuid": "064a816b_03c10cf8",
      "revId": "ca43a255febc0c1c03e1186c124f7bc10b70b8cf",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b9d869a2_ee7332d7",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 20,
      "author": {
        "id": 5126
      },
      "writtenOn": "2019-03-01T11:29:57Z",
      "side": 1,
      "message": "Is the problem that you\u0027re planning to use a pool of size 1 for all task queues in the system, and we have code that makes blocking calls from one task queue to another? And you plan to work around the problem by letting the single, \"blocked\" thread do other work for the pool while it waits?\n\nAn alternative that\u0027s simpler for the TQ implementations would be to have TQBase methods called e.g. StartBlockingOperation() and EndBlockingOperation() that you call around the Wait(). Defaulting to no-ops, but implementations could e.g. use them to temporarily increase their pool size by 1.",
      "revId": "ca43a255febc0c1c03e1186c124f7bc10b70b8cf",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c859aaed_676e4454",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 20,
      "author": {
        "id": 5531
      },
      "writtenOn": "2019-03-01T13:16:19Z",
      "side": 1,
      "message": "I\u0027ll mix different threading primitives in the same time controller (too keep things synchronized). So it might be a ProcessThread calling a TaskQueue for instance. So yess, the workaround will be that it will process all pending task up to the posted task\n\nNot sure how the start-stop thing helps here. We would still need to post the task to satisfy queue checkers etc, right?",
      "parentUuid": "b9d869a2_ee7332d7",
      "revId": "ca43a255febc0c1c03e1186c124f7bc10b70b8cf",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2c69f0c7_8aa5051a",
        "filename": "api/task_queue/task_queue_base.h",
        "patchSetId": 1
      },
      "lineNbr": 63,
      "author": {
        "id": 5126
      },
      "writtenOn": "2019-03-01T11:29:57Z",
      "side": 1,
      "message": "Not sure I agree with this prefix---it seems to imply that there should also be a safe version, which there is not. Just the \"Blocking\" prefix should be enough of a warning flag.\n\nAlso, please document this method here, including the fact that implementations that use real wallclock time should have no need to override it.",
      "range": {
        "startLine": 63,
        "startChar": 15,
        "endLine": 63,
        "endChar": 21
      },
      "revId": "ca43a255febc0c1c03e1186c124f7bc10b70b8cf",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e2bb3145_a86c0237",
        "filename": "api/task_queue/task_queue_base.h",
        "patchSetId": 1
      },
      "lineNbr": 63,
      "author": {
        "id": 5531
      },
      "writtenOn": "2019-03-01T13:16:19Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "2c69f0c7_8aa5051a",
      "range": {
        "startLine": 63,
        "startChar": 15,
        "endLine": 63,
        "endChar": 21
      },
      "revId": "ca43a255febc0c1c03e1186c124f7bc10b70b8cf",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "26d3d697_5b331fd6",
        "filename": "rtc_base/task_queue.h",
        "patchSetId": 1
      },
      "lineNbr": 241,
      "author": {
        "id": 5126
      },
      "writtenOn": "2019-03-01T11:29:57Z",
      "side": 1,
      "message": "We do not in fact want users to avoid this at all costs, so the comment should be moderated. And please also warn against deadlocks---that\u0027s the danger when you call this from a thread instead of a TQ (and it\u0027s also a danger when you call from a TQ).",
      "revId": "ca43a255febc0c1c03e1186c124f7bc10b70b8cf",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ace27b56_72fa6d78",
        "filename": "rtc_base/task_queue.h",
        "patchSetId": 1
      },
      "lineNbr": 241,
      "author": {
        "id": 5531
      },
      "writtenOn": "2019-03-01T13:16:19Z",
      "side": 1,
      "message": "Yeah I agree, I just wanted a placeholder. I do think that it\u0027s something that we want to minimize, but when it\u0027s needed it should obviously be used.\n\nUpdated the name and comment.",
      "parentUuid": "26d3d697_5b331fd6",
      "revId": "ca43a255febc0c1c03e1186c124f7bc10b70b8cf",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    }
  ]
}