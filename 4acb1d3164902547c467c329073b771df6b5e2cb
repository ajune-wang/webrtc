{
  "comments": [
    {
      "key": {
        "uuid": "77a7a024_69e48466",
        "filename": "pc/peer_connection.h",
        "patchSetId": 2
      },
      "lineNbr": 76,
      "author": {
        "id": 8393
      },
      "writtenOn": "2019-04-23T22:57:14Z",
      "side": 1,
      "message": "This should be MDNS_CANDIDATE_COLLECTED.\n\nBut I am not sure this approach is going to work - in cases where mDNS registration fails, we won\u0027t get a mDNS candidate from that peer. I think we probably need to do something like PRIVATE_REMOTE_CANDIDATE_ADDED, and use presence of private candidates to determine if mDNS is on. \n\n(I assume that PRIVATE_ only handles private IPv4 addresses, so that creates its own set of problems, but that\u0027s still probably the best option).",
      "range": {
        "startLine": 76,
        "startChar": 4,
        "endLine": 76,
        "endChar": 27
      },
      "revId": "4acb1d3164902547c467c329073b771df6b5e2cb",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fe101520_23e66de1",
        "filename": "pc/peer_connection.h",
        "patchSetId": 2
      },
      "lineNbr": 76,
      "author": {
        "id": 7524
      },
      "writtenOn": "2019-04-24T15:38:21Z",
      "side": 1,
      "message": "mDNS registrations are very unlikely to fail. I renamed this flag and added one for REMOTE_PRIVATE_CANDIDATE_ADDED.\n\nI extended the definition of a private address to include the RFC6598 (100.64/10) addresses.",
      "parentUuid": "77a7a024_69e48466",
      "range": {
        "startLine": 76,
        "startChar": 4,
        "endLine": 76,
        "endChar": 27
      },
      "revId": "4acb1d3164902547c467c329073b771df6b5e2cb",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6c5e6859_811c6cd7",
        "filename": "pc/peer_connection_histogram_unittest.cc",
        "patchSetId": 2
      },
      "lineNbr": 55,
      "author": {
        "id": 6646
      },
      "writtenOn": "2019-04-23T22:11:17Z",
      "side": 1,
      "message": "nit: could bundle with the above as an array, like https://cs.chromium.org/chromium/src/third_party/webrtc/p2p/base/p2p_transport_channel_unittest.cc?l\u003d65",
      "range": {
        "startLine": 55,
        "startChar": 32,
        "endLine": 55,
        "endChar": 51
      },
      "revId": "4acb1d3164902547c467c329073b771df6b5e2cb",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3d1c29e3_e04f424d",
        "filename": "pc/peer_connection_histogram_unittest.cc",
        "patchSetId": 2
      },
      "lineNbr": 55,
      "author": {
        "id": 7524
      },
      "writtenOn": "2019-04-24T15:38:21Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6c5e6859_811c6cd7",
      "range": {
        "startLine": 55,
        "startChar": 32,
        "endLine": 55,
        "endChar": 51
      },
      "revId": "4acb1d3164902547c467c329073b771df6b5e2cb",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "209deaaf_e3f2449b",
        "filename": "pc/peer_connection_histogram_unittest.cc",
        "patchSetId": 2
      },
      "lineNbr": 244,
      "author": {
        "id": 6646
      },
      "writtenOn": "2019-04-23T22:11:17Z",
      "side": 1,
      "message": "nit: nullptr /* observer_in */",
      "range": {
        "startLine": 244,
        "startChar": 44,
        "endLine": 244,
        "endChar": 51
      },
      "revId": "4acb1d3164902547c467c329073b771df6b5e2cb",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7560dffd_12d0adff",
        "filename": "pc/peer_connection_histogram_unittest.cc",
        "patchSetId": 2
      },
      "lineNbr": 244,
      "author": {
        "id": 7524
      },
      "writtenOn": "2019-04-24T15:38:21Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "209deaaf_e3f2449b",
      "range": {
        "startLine": 244,
        "startChar": 44,
        "endLine": 244,
        "endChar": 51
      },
      "revId": "4acb1d3164902547c467c329073b771df6b5e2cb",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bb679aae_4bc15211",
        "filename": "pc/peer_connection_histogram_unittest.cc",
        "patchSetId": 2
      },
      "lineNbr": 249,
      "author": {
        "id": 6646
      },
      "writtenOn": "2019-04-23T22:11:17Z",
      "side": 1,
      "message": "Do we need this interface for the current test on mDNS?",
      "range": {
        "startLine": 249,
        "startChar": 26,
        "endLine": 249,
        "endChar": 38
      },
      "revId": "4acb1d3164902547c467c329073b771df6b5e2cb",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b7395798_ab9170e2",
        "filename": "pc/peer_connection_histogram_unittest.cc",
        "patchSetId": 2
      },
      "lineNbr": 249,
      "author": {
        "id": 7524
      },
      "writtenOn": "2019-04-24T15:38:21Z",
      "side": 1,
      "message": "removed.",
      "parentUuid": "bb679aae_4bc15211",
      "range": {
        "startLine": 249,
        "startChar": 26,
        "endLine": 249,
        "endChar": 38
      },
      "revId": "4acb1d3164902547c467c329073b771df6b5e2cb",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "26202cf3_13117e05",
        "filename": "pc/peer_connection_histogram_unittest.cc",
        "patchSetId": 2
      },
      "lineNbr": 275,
      "author": {
        "id": 6646
      },
      "writtenOn": "2019-04-23T22:11:17Z",
      "side": 1,
      "message": "nit: could do a similar absl::make_unique",
      "range": {
        "startLine": 275,
        "startChar": 49,
        "endLine": 275,
        "endChar": 63
      },
      "revId": "4acb1d3164902547c467c329073b771df6b5e2cb",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "59b7781d_1da3552d",
        "filename": "pc/peer_connection_histogram_unittest.cc",
        "patchSetId": 2
      },
      "lineNbr": 275,
      "author": {
        "id": 7524
      },
      "writtenOn": "2019-04-24T15:38:21Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "26202cf3_13117e05",
      "range": {
        "startLine": 275,
        "startChar": 49,
        "endLine": 275,
        "endChar": 63
      },
      "revId": "4acb1d3164902547c467c329073b771df6b5e2cb",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5eea7933_512b23e3",
        "filename": "pc/peer_connection_histogram_unittest.cc",
        "patchSetId": 2
      },
      "lineNbr": 314,
      "author": {
        "id": 6646
      },
      "writtenOn": "2019-04-23T22:11:17Z",
      "side": 1,
      "message": "How the interface is assigned is unclear from the signature of these creation methods. Some of them use 1.1.1.1, while this one uses 2.2.2.2. This could lead to subtle test-only bugs if we add more tests involving both sides, for example if we have two peers with mDNS enabled. I suggest let the test body provide the interface, like GetNextAvailableLocalAddress (a better solution could be like the integration test to provide two pcs at the same time to coordinate this, e.g. CreatePcWrapper*s*; agreed this set of tests was only focused on a single pc historically). If the pool is exhausted (currently two of them), could fail the test.",
      "range": {
        "startLine": 314,
        "startChar": 41,
        "endLine": 314,
        "endChar": 60
      },
      "revId": "4acb1d3164902547c467c329073b771df6b5e2cb",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "87b84b9c_cfa038c5",
        "filename": "pc/peer_connection_histogram_unittest.cc",
        "patchSetId": 2
      },
      "lineNbr": 314,
      "author": {
        "id": 5039
      },
      "writtenOn": "2019-04-23T22:40:17Z",
      "side": 1,
      "message": "Check out peer_connection_ice_unittest.cc which has solved this issue.",
      "parentUuid": "5eea7933_512b23e3",
      "range": {
        "startLine": 314,
        "startChar": 41,
        "endLine": 314,
        "endChar": 60
      },
      "revId": "4acb1d3164902547c467c329073b771df6b5e2cb",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "648523bd_f48bf628",
        "filename": "pc/peer_connection_histogram_unittest.cc",
        "patchSetId": 2
      },
      "lineNbr": 314,
      "author": {
        "id": 6646
      },
      "writtenOn": "2019-04-23T22:43:21Z",
      "side": 1,
      "message": "Good point. AddInterface does not have to be done before creating the pc. Doing it before SLD should be sufficient IIRC.",
      "parentUuid": "87b84b9c_cfa038c5",
      "range": {
        "startLine": 314,
        "startChar": 41,
        "endLine": 314,
        "endChar": 60
      },
      "revId": "4acb1d3164902547c467c329073b771df6b5e2cb",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1088b05e_ab685084",
        "filename": "pc/peer_connection_histogram_unittest.cc",
        "patchSetId": 2
      },
      "lineNbr": 314,
      "author": {
        "id": 7524
      },
      "writtenOn": "2019-04-24T15:38:21Z",
      "side": 1,
      "message": "Addressed",
      "parentUuid": "648523bd_f48bf628",
      "range": {
        "startLine": 314,
        "startChar": 41,
        "endLine": 314,
        "endChar": 60
      },
      "revId": "4acb1d3164902547c467c329073b771df6b5e2cb",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "459c4640_f2224415",
        "filename": "pc/peer_connection_histogram_unittest.cc",
        "patchSetId": 2
      },
      "lineNbr": 342,
      "author": {
        "id": 6646
      },
      "writtenOn": "2019-04-23T22:11:17Z",
      "side": 1,
      "message": "nit: maybe put it in a way about the lifetime. The network manager/port allocator is supposed to outlive the peer connection.",
      "range": {
        "startLine": 342,
        "startChar": 2,
        "endLine": 342,
        "endChar": 4
      },
      "revId": "4acb1d3164902547c467c329073b771df6b5e2cb",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c1b61cb0_af32cdd6",
        "filename": "pc/peer_connection_histogram_unittest.cc",
        "patchSetId": 2
      },
      "lineNbr": 342,
      "author": {
        "id": 7524
      },
      "writtenOn": "2019-04-24T15:38:21Z",
      "side": 1,
      "message": "Took the comment from peer_connection_ice_unittests.cc",
      "parentUuid": "459c4640_f2224415",
      "range": {
        "startLine": 342,
        "startChar": 2,
        "endLine": 342,
        "endChar": 4
      },
      "revId": "4acb1d3164902547c467c329073b771df6b5e2cb",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    }
  ]
}