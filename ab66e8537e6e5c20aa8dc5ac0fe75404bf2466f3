{
  "comments": [
    {
      "key": {
        "uuid": "cf7a47f4_0a33adc8",
        "filename": "p2p/base/ice_controller_interface.h",
        "patchSetId": 2
      },
      "lineNbr": 82,
      "author": {
        "id": 5634
      },
      "writtenOn": "2020-03-26T16:15:52Z",
      "side": 1,
      "message": "If the user of this method in p2p_transport_channel.cc has to const_cast the result, it shouldn\u0027t be a const pointer inside this struct.\n\nMy usual gripe about struct: Can we give it a constructor and make the members const?\n(note that a pointer that is const doesn\u0027t make the pointed-to object const)",
      "revId": "ab66e8537e6e5c20aa8dc5ac0fe75404bf2466f3",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "51218486_7f19f918",
        "filename": "p2p/base/ice_controller_interface.h",
        "patchSetId": 2
      },
      "lineNbr": 82,
      "author": {
        "id": 5613
      },
      "writtenOn": "2020-03-27T06:50:00Z",
      "side": 1,
      "message": "1) const,\nthe \"contract\" between P2PTransportChannel and IceController is that\nP2PTransportChhannel gives \"const Connection*\"-pointer for IceController to use,\nbut not mutate. Hence, the IceController returns a const pointer, that P2P will const_cast\u003c\u003e\nand do stuff on. \"By misstake\" I pushed the const_cast\u003c\u003e into BasicIceController and Nicer,\nand I thought I\u0027ll undo that misstake when I anyway change the interface.\nWDYT ?\n\n2) constructor: done",
      "parentUuid": "cf7a47f4_0a33adc8",
      "revId": "ab66e8537e6e5c20aa8dc5ac0fe75404bf2466f3",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "99a3f9ef_668f532b",
        "filename": "p2p/base/ice_controller_interface.h",
        "patchSetId": 2
      },
      "lineNbr": 82,
      "author": {
        "id": 5634
      },
      "writtenOn": "2020-03-27T08:19:32Z",
      "side": 1,
      "message": "Then the contract is bad, because the caller is breaking it :-)\n\nWhat I\u0027d prefer here is two accessors, one returning a const pointer and the other returning a non-const pointer. That way, the codesearch tools can pinpoint exactly the places that are asking for a non-const pointer, and you can get away with casting away constness in a single place.\n\nThe constructor (the one that you want to end up with) should take a non-const pointer, because the struct isn\u0027t enforcing the contract of constness. The one that constructs the PingResult should just be forced to live with that. (But you can do that later, as part of cleaning up after the change.)",
      "parentUuid": "51218486_7f19f918",
      "revId": "ab66e8537e6e5c20aa8dc5ac0fe75404bf2466f3",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ea7655a0_8dc82605",
        "filename": "p2p/base/ice_controller_interface.h",
        "patchSetId": 2
      },
      "lineNbr": 87,
      "author": {
        "id": 5634
      },
      "writtenOn": "2020-03-26T16:15:52Z",
      "side": 1,
      "message": "English: The recommended delay before calling SelectConnectionToPing() again.\n(is it recommended, required, suggested or something else? Also, it\u0027s an interval, not a time, right?)",
      "revId": "ab66e8537e6e5c20aa8dc5ac0fe75404bf2466f3",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "74bf8203_5431284d",
        "filename": "p2p/base/ice_controller_interface.h",
        "patchSetId": 2
      },
      "lineNbr": 87,
      "author": {
        "id": 5613
      },
      "writtenOn": "2020-03-27T06:50:00Z",
      "side": 1,
      "message": "Done.\nI skipped using any of the \"recommended, required, suggested\"\nWDYT ?",
      "parentUuid": "ea7655a0_8dc82605",
      "revId": "ab66e8537e6e5c20aa8dc5ac0fe75404bf2466f3",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9845c652_bc1095e4",
        "filename": "p2p/base/ice_controller_interface.h",
        "patchSetId": 2
      },
      "lineNbr": 87,
      "author": {
        "id": 5634
      },
      "writtenOn": "2020-03-27T07:53:14Z",
      "side": 1,
      "message": "Just reading this code, this delay is puzzling, because there seems to be no enforcement of the delay. Is the caller supposed to send another ping no earlier than this, no later than this, or exactly at this time?\n\nKnowing something about context, this might be computed from the global rate limiter T0 for ICE pings - needed to keep the overall rate of pings to a reasonable limit (I think it\u0027s around 64 Kbis/second), in which case it\u0027s \"please don\u0027t call me again before at least this much time has passed, but I\u0027m not asking you to call me if you don\u0027t need to\". Value in the 5-20 ms range.\n\nAnother interpretation might be \"this is my estimate of the time at which you need to ping this connection again to make sure the NAT bindings stay alive\" - value in the 60 second range - in which case it is \"please call me again before this, or consider the connection dead\". but the API is odd for that usage, so I suspect the previous theory looks better.\n\nBut just from the comment, I can\u0027t tell which it is, and that bothers me.",
      "parentUuid": "74bf8203_5431284d",
      "revId": "ab66e8537e6e5c20aa8dc5ac0fe75404bf2466f3",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "343d7a09_363373c2",
        "filename": "p2p/base/ice_controller_interface.h",
        "patchSetId": 2
      },
      "lineNbr": 87,
      "author": {
        "id": 5613
      },
      "writtenOn": "2020-03-27T08:00:12Z",
      "side": 1,
      "message": "I need to do step 3 in this series too,\ni\u0027ll improve the comment on the field.",
      "parentUuid": "9845c652_bc1095e4",
      "revId": "ab66e8537e6e5c20aa8dc5ac0fe75404bf2466f3",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    }
  ]
}