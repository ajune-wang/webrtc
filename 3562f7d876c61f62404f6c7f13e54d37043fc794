{
  "comments": [
    {
      "key": {
        "uuid": "9e217a5d_a1ee0da2",
        "filename": "api/video/video_frame.h",
        "patchSetId": 3
      },
      "lineNbr": 36,
      "author": {
        "id": 5234
      },
      "writtenOn": "2019-01-30T11:03:55Z",
      "side": 1,
      "message": "Still unclear why these are needed. Can you explain?\n\nIf they ever differ from the dimension of of the previous frame, there will be a problem.",
      "range": {
        "startLine": 34,
        "startChar": 0,
        "endLine": 36,
        "endChar": 20
      },
      "revId": "3562f7d876c61f62404f6c7f13e54d37043fc794",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "22abe696_9a940172",
        "filename": "api/video/video_frame.h",
        "patchSetId": 3
      },
      "lineNbr": 36,
      "author": {
        "id": 5117
      },
      "writtenOn": "2019-01-30T11:50:55Z",
      "side": 1,
      "message": "Yes, there will be a problem and it\u0027s handled correctly in the following CLs. But to be even able to detect this problem we include these fields.\n\nE.g. if we omit them, we can\u0027t detect a bad user, who sents a partial update after the resolution have changed",
      "parentUuid": "9e217a5d_a1ee0da2",
      "range": {
        "startLine": 34,
        "startChar": 0,
        "endLine": 36,
        "endChar": 20
      },
      "revId": "3562f7d876c61f62404f6c7f13e54d37043fc794",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6bb5ac34_a6d95e0e",
        "filename": "api/video/video_frame.h",
        "patchSetId": 3
      },
      "lineNbr": 36,
      "author": {
        "id": 5234
      },
      "writtenOn": "2019-01-30T12:26:20Z",
      "side": 1,
      "message": "I\u0027m thinking that it\u0027s not worth 8 bytes in this struct, just to detecting bad usage.\n\nDownstream code can just check that the partial frame fits inside the previous frame (it has to do that anyway), and then just paste it at the given position. It\u0027s then the responsibility of the frame source to produce a consistent stream of full and partial frames.\n\nI mean, there are lots of ways a camera or capturer could misbehave, resulting in garbled data; it\u0027s not clear to me why we\u0027d need special handling of this particular way it could possibly misbehave.",
      "parentUuid": "22abe696_9a940172",
      "range": {
        "startLine": 34,
        "startChar": 0,
        "endLine": 36,
        "endChar": 20
      },
      "revId": "3562f7d876c61f62404f6c7f13e54d37043fc794",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bacc977c_dc6585b4",
        "filename": "api/video/video_frame.h",
        "patchSetId": 3
      },
      "lineNbr": 36,
      "author": {
        "id": 5117
      },
      "writtenOn": "2019-01-30T12:45:23Z",
      "side": 1,
      "message": "Sorry,I didn\u0027t mention the main reason for these fields. We need to somehow notify the webrtc that the frame is the full frame.\n\nIdea is that ParitalDescription is an optional field of VideoFrame and normally it\u0027s not set at all and nothing is changed in how WebRTC behaves. But if the field is present, webrtc will cache the last frame to support partial updates and perform them, if needed. This is a necessary and heavy operation, so we want to avoid it in case partial capture is not desired. \n\nThus, the PartialDescription needs some way of showing that the frame is a full picture.\nIt can be just a bool flag, but 8 bytes is nothing compared to a whole uncompressed frame buffer, and it allows to check for possible errors in the capturer at the chrome side.\n\nOther alternative would be to pass some special values as offset (e.g -1), but it seems a bit hacky to me.",
      "parentUuid": "6bb5ac34_a6d95e0e",
      "range": {
        "startLine": 34,
        "startChar": 0,
        "endLine": 36,
        "endChar": 20
      },
      "revId": "3562f7d876c61f62404f6c7f13e54d37043fc794",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    }
  ]
}