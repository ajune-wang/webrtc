{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "0669ff4c_52b543d4",
        "filename": "/COMMIT_MSG",
        "patchSetId": 8
      },
      "lineNbr": 7,
      "author": {
        "id": 5117
      },
      "writtenOn": "2021-12-03T12:12:04Z",
      "side": 1,
      "message": "That\u0027s a lot of framebuffers! \nAm I understanding correctly, that in the end, after experiments prove its viability, FrameBuffer3 will replace the FrameBuffer2 completely? I know we can\u0027t delete FrameBuffer1 because it\u0027s there for legacy reasons to not update some external projects, which are using it. I just hope that this won\u0027t happen to FrameBuffer2 also.",
      "range": {
        "startLine": 7,
        "startChar": 4,
        "endLine": 7,
        "endChar": 16
      },
      "revId": "debfad4f4adb2996d13d9a958544ddae300a721c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1fc2dfac_24d48bdb",
        "filename": "/COMMIT_MSG",
        "patchSetId": 8
      },
      "lineNbr": 7,
      "author": {
        "id": 5019
      },
      "writtenOn": "2021-12-03T12:50:45Z",
      "side": 1,
      "message": "what are deprecation plans for FrameBuffer1 and FrameBuffer2?",
      "range": {
        "startLine": 7,
        "startChar": 4,
        "endLine": 7,
        "endChar": 16
      },
      "revId": "debfad4f4adb2996d13d9a958544ddae300a721c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "894bc405_172b8efa",
        "filename": "/COMMIT_MSG",
        "patchSetId": 8
      },
      "lineNbr": 7,
      "author": {
        "id": 5527
      },
      "writtenOn": "2021-12-03T13:55:03Z",
      "side": 1,
      "message": "Yeah, I agree, that\u0027s a lot of FrameBuffers!\n\nJust a short recap:\nFB is (IMO) badly named.\nFB2 has a sensible name, but is really not related to FB1 in functionality\nFB3 also has a sensible name, and is related to FB2 in functionality.\n\nThe idea is to create two schedulers on top of FB3, one replicating the behavior of FB2, and the other implementing this new decode scheduling strategy. If the new behavior is not useful then we will at least have a cleaned up version of the current behavior, so FB2 should be going away either way.",
      "parentUuid": "0669ff4c_52b543d4",
      "range": {
        "startLine": 7,
        "startChar": 4,
        "endLine": 7,
        "endChar": 16
      },
      "revId": "debfad4f4adb2996d13d9a958544ddae300a721c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "091c53fd_9b2c0c56",
        "filename": "/COMMIT_MSG",
        "patchSetId": 8
      },
      "lineNbr": 7,
      "author": {
        "id": 5527
      },
      "writtenOn": "2021-12-03T14:42:10Z",
      "side": 1,
      "message": "Answered here: https://webrtc-review.googlesource.com/c/src/+/238985/8..9//COMMIT_MSG#b7",
      "parentUuid": "1fc2dfac_24d48bdb",
      "range": {
        "startLine": 7,
        "startChar": 4,
        "endLine": 7,
        "endChar": 16
      },
      "revId": "debfad4f4adb2996d13d9a958544ddae300a721c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0b79004a_6289d317",
        "filename": "/COMMIT_MSG",
        "patchSetId": 8
      },
      "lineNbr": 7,
      "author": {
        "id": 18444
      },
      "writtenOn": "2021-12-06T08:48:49Z",
      "side": 1,
      "message": "Exactly, I am working on a scheduler that is compatible with Frame buffer 2 behaviour at this time. The idea then will be to roll out this new scheduler in the frame buffer 2 interface with intention of removing frame buffer 2 once it is confirmed that this is working as expected.",
      "parentUuid": "894bc405_172b8efa",
      "range": {
        "startLine": 7,
        "startChar": 4,
        "endLine": 7,
        "endChar": 16
      },
      "revId": "debfad4f4adb2996d13d9a958544ddae300a721c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "710cb4ce_7b8e904e",
        "filename": "/COMMIT_MSG",
        "patchSetId": 8
      },
      "lineNbr": 9,
      "author": {
        "id": 5019
      },
      "writtenOn": "2021-12-03T12:50:45Z",
      "side": 1,
      "message": "do you plan to re-implement FrameBuffer2 using FrameBuffer3?\nIn such case might be beneficial to think about distinct names for them.",
      "range": {
        "startLine": 9,
        "startChar": 98,
        "endLine": 9,
        "endChar": 110
      },
      "revId": "debfad4f4adb2996d13d9a958544ddae300a721c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "20f8858b_2cd0d1b9",
        "filename": "/COMMIT_MSG",
        "patchSetId": 8
      },
      "lineNbr": 9,
      "author": {
        "id": 5527
      },
      "writtenOn": "2021-12-03T14:42:10Z",
      "side": 1,
      "message": "A decoder scheduler on top of FB3 replicating the current behavior is already being implemented.",
      "parentUuid": "710cb4ce_7b8e904e",
      "range": {
        "startLine": 9,
        "startChar": 98,
        "endLine": 9,
        "endChar": 110
      },
      "revId": "debfad4f4adb2996d13d9a958544ddae300a721c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1798f16d_2a370ca3",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 8
      },
      "lineNbr": 0,
      "author": {
        "id": 5019
      },
      "writtenOn": "2021-12-03T12:50:45Z",
      "side": 1,
      "message": "I haven\u0027t check implementation.\n(would like first to see comments what this class suppose to do, preferably both as class comment and as test names)",
      "revId": "debfad4f4adb2996d13d9a958544ddae300a721c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3c996a4c_2e59417c",
        "filename": "modules/video_coding/frame_buffer3.cc",
        "patchSetId": 8
      },
      "lineNbr": 57,
      "author": {
        "id": 5117
      },
      "writtenOn": "2021-12-03T12:12:04Z",
      "side": 1,
      "message": "nit: These 4 can be just functions in the anonymous namespace. They do nothing with the FrameBuffer3 object itself. \n\nMoving them out of the class would simplify it, so I suggest doing so.",
      "range": {
        "startLine": 40,
        "startChar": 0,
        "endLine": 57,
        "endChar": 1
      },
      "revId": "debfad4f4adb2996d13d9a958544ddae300a721c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "eabe627e_92b77e32",
        "filename": "modules/video_coding/frame_buffer3.cc",
        "patchSetId": 8
      },
      "lineNbr": 57,
      "author": {
        "id": 5527
      },
      "writtenOn": "2021-12-03T13:55:03Z",
      "side": 1,
      "message": "The problem is that FrameInfo is a private, so I can\u0027t have a std::map\u003cint64_t, FrameInfo\u003e::iterator outside of the class. Maybe I should mark them as static in the header?",
      "parentUuid": "3c996a4c_2e59417c",
      "range": {
        "startLine": 40,
        "startChar": 0,
        "endLine": 57,
        "endChar": 1
      },
      "revId": "debfad4f4adb2996d13d9a958544ddae300a721c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "417b3e1e_4d2870bd",
        "filename": "modules/video_coding/frame_buffer3.cc",
        "patchSetId": 8
      },
      "lineNbr": 57,
      "author": {
        "id": 5019
      },
      "writtenOn": "2021-12-03T17:32:17Z",
      "side": 1,
      "message": "yes, mark them static in such case,\nor... cheat using templates:\n\nnamespace {\n\ntemplate\u003ctypename FrameIterator\u003e\nint64_t FrameId(const FrameIterator\u0026 it) { return it-\u003efirst; }\n\n}",
      "parentUuid": "eabe627e_92b77e32",
      "range": {
        "startLine": 40,
        "startChar": 0,
        "endLine": 57,
        "endChar": 1
      },
      "revId": "debfad4f4adb2996d13d9a958544ddae300a721c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "db00bb9f_70e32a7d",
        "filename": "modules/video_coding/frame_buffer3.cc",
        "patchSetId": 8
      },
      "lineNbr": 57,
      "author": {
        "id": 5527
      },
      "writtenOn": "2021-12-06T11:15:59Z",
      "side": 1,
      "message": "Cheated",
      "parentUuid": "417b3e1e_4d2870bd",
      "range": {
        "startLine": 40,
        "startChar": 0,
        "endLine": 57,
        "endChar": 1
      },
      "revId": "debfad4f4adb2996d13d9a958544ddae300a721c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e86cce05_a33c1cf4",
        "filename": "modules/video_coding/frame_buffer3.cc",
        "patchSetId": 8
      },
      "lineNbr": 76,
      "author": {
        "id": 5117
      },
      "writtenOn": "2021-12-03T12:12:04Z",
      "side": 1,
      "message": "The FrameBuffer2 was pretty verbose and i\u0027m glad that some log messages (like this one) were removed.\n\nHowever, some logging is necessary. \nImagine some user is complaining that they see no video in a conference call and we just see that decode_fps is 0, while network_fps is OK in the logs adn there\u0027s no decode errors. Currently we would have no idea, why the frames are not even passed to the decoder.\n\nLogging is especially needed when the frame buffer is out of capacity. Also probably when the frame has invalid references etc. Or maybe I\u0027m even missing some other important cases.",
      "range": {
        "startLine": 76,
        "startChar": 6,
        "endLine": 76,
        "endChar": 41
      },
      "revId": "debfad4f4adb2996d13d9a958544ddae300a721c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "16894141_f99b5353",
        "filename": "modules/video_coding/frame_buffer3.cc",
        "patchSetId": 8
      },
      "lineNbr": 76,
      "author": {
        "id": 5527
      },
      "writtenOn": "2021-12-03T13:55:03Z",
      "side": 1,
      "message": "Good point, added logging.",
      "parentUuid": "e86cce05_a33c1cf4",
      "range": {
        "startLine": 76,
        "startChar": 6,
        "endLine": 76,
        "endChar": 41
      },
      "revId": "debfad4f4adb2996d13d9a958544ddae300a721c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a7cfcf69_9804c487",
        "filename": "modules/video_coding/frame_buffer3.cc",
        "patchSetId": 8
      },
      "lineNbr": 134,
      "author": {
        "id": 5117
      },
      "writtenOn": "2021-12-03T12:12:04Z",
      "side": 1,
      "message": "Will this be called externally? It\u0027s a public method right now, but I can\u0027t figure out why would it be needed like that.\n\nIf not, it would make sense to inline it here.",
      "range": {
        "startLine": 134,
        "startChar": 2,
        "endLine": 134,
        "endChar": 25
      },
      "revId": "debfad4f4adb2996d13d9a958544ddae300a721c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "90ae6e0b_a16ef36b",
        "filename": "modules/video_coding/frame_buffer3.cc",
        "patchSetId": 8
      },
      "lineNbr": 134,
      "author": {
        "id": 5527
      },
      "writtenOn": "2021-12-03T13:55:03Z",
      "side": 1,
      "message": "Yes, it will be called externally. The reason it\u0027s public is so that temporal units can be removed from the frame buffer without the framebuffer marking them as decoded. This is necessary when fast-forwarding (dropping higher temporal layers).",
      "parentUuid": "a7cfcf69_9804c487",
      "range": {
        "startLine": 134,
        "startChar": 2,
        "endLine": 134,
        "endChar": 25
      },
      "revId": "debfad4f4adb2996d13d9a958544ddae300a721c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5b4694a9_8a695414",
        "filename": "modules/video_coding/frame_buffer3.cc",
        "patchSetId": 8
      },
      "lineNbr": 178,
      "author": {
        "id": 5117
      },
      "writtenOn": "2021-12-03T12:12:04Z",
      "side": 1,
      "message": "The performance degradation comparing to the Frame_buffer2 makes me very concerned.\n\nThe previous method was optimal - each frame maintained a counter of missing dependencies which was updated when something became continuous. Then continuity was propagated with a simple BFS.\n\nCurrent solution scans all the frames dependencies of all the frames each time something is decoded.\n\nI know it will never be a bottleneck, but I still believe we should speed this code up a 100 times with a slightly more complicated algorithm.",
      "range": {
        "startLine": 178,
        "startChar": 2,
        "endLine": 178,
        "endChar": 55
      },
      "revId": "debfad4f4adb2996d13d9a958544ddae300a721c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "65617db8_beec2673",
        "filename": "modules/video_coding/frame_buffer3.cc",
        "patchSetId": 8
      },
      "lineNbr": 178,
      "author": {
        "id": 5527
      },
      "writtenOn": "2021-12-03T13:55:03Z",
      "side": 1,
      "message": "Up until PS3 I used reverse references to only update the necessary frames when frames were inserted/decoded. I believe this is overengineering it though, and for a typical stream (vast, vast, majority of frames are received in order) then iterating from the inserted frame to the end basically means it will only loop once.",
      "parentUuid": "5b4694a9_8a695414",
      "range": {
        "startLine": 178,
        "startChar": 2,
        "endLine": 178,
        "endChar": 55
      },
      "revId": "debfad4f4adb2996d13d9a958544ddae300a721c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "53e71923_9c32ed26",
        "filename": "modules/video_coding/frame_buffer3.cc",
        "patchSetId": 8
      },
      "lineNbr": 207,
      "author": {
        "id": 5117
      },
      "writtenOn": "2021-12-03T12:12:04Z",
      "side": 1,
      "message": "This also can be speed up by maintaining a decodability flag in the same way as a continuity and updating it with a same BFS-like algorithm.",
      "revId": "debfad4f4adb2996d13d9a958544ddae300a721c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "17f87df8_c036b560",
        "filename": "modules/video_coding/frame_buffer3.cc",
        "patchSetId": 8
      },
      "lineNbr": 207,
      "author": {
        "id": 5527
      },
      "writtenOn": "2021-12-03T13:55:03Z",
      "side": 1,
      "message": "Yes, but even when the buffer is large (lets say 500 ms), then at 60 fps you would only have ~30 frames in the buffer. I suspect a better speedup would be to use  a vector instead of a map, because iterating over \u003c100 elements is quicker than inserting/removing/traversing just a few elements in a map.",
      "parentUuid": "53e71923_9c32ed26",
      "revId": "debfad4f4adb2996d13d9a958544ddae300a721c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7c2cffea_502d0a0f",
        "filename": "modules/video_coding/frame_buffer3.h",
        "patchSetId": 8
      },
      "lineNbr": 25,
      "author": {
        "id": 5019
      },
      "writtenOn": "2021-12-03T12:50:45Z",
      "side": 1,
      "message": "https://google.github.io/styleguide/cppguide.html#Class_Comments\n\n“Every non-obvious class or struct declaration should have an accompanying comment that describes what it is for and how it should be used.”\n\n(I guess the fact that frame_buffer1, frame_buffer2 and frame_buffer3 Do three different things is a very strong signal it is not obvious what this class does)",
      "revId": "debfad4f4adb2996d13d9a958544ddae300a721c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "334b4f3c_8f273644",
        "filename": "modules/video_coding/frame_buffer3.h",
        "patchSetId": 8
      },
      "lineNbr": 25,
      "author": {
        "id": 5527
      },
      "writtenOn": "2021-12-03T14:42:10Z",
      "side": 1,
      "message": "FB1 is separate from FB2 and FB3 in terms of functionality.",
      "parentUuid": "7c2cffea_502d0a0f",
      "revId": "debfad4f4adb2996d13d9a958544ddae300a721c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3e53f81b_875bca51",
        "filename": "modules/video_coding/frame_buffer3.h",
        "patchSetId": 8
      },
      "lineNbr": 25,
      "author": {
        "id": 5019
      },
      "writtenOn": "2021-12-03T17:32:17Z",
      "side": 1,
      "message": "My point is that class purpose is far from obvious, so should be documented.\n\n(I\u0027m just using the fact that FB1, FB2, and FB3 are named similarly, but have separate functionality. That imply functionality can\u0027t be guessed from the name)",
      "parentUuid": "334b4f3c_8f273644",
      "revId": "debfad4f4adb2996d13d9a958544ddae300a721c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "17e7f646_32fa0933",
        "filename": "modules/video_coding/frame_buffer3.h",
        "patchSetId": 8
      },
      "lineNbr": 25,
      "author": {
        "id": 5527
      },
      "writtenOn": "2021-12-06T11:15:59Z",
      "side": 1,
      "message": "Added class level documentation.",
      "parentUuid": "3e53f81b_875bca51",
      "revId": "debfad4f4adb2996d13d9a958544ddae300a721c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ebc630bc_102d7449",
        "filename": "modules/video_coding/frame_buffer3.h",
        "patchSetId": 8
      },
      "lineNbr": 26,
      "author": {
        "id": 5019
      },
      "writtenOn": "2021-12-03T12:50:45Z",
      "side": 1,
      "message": "interesting that it still doesn\u0027t collider with frame_buffer1 (that is webrtc::VCMFrameBuffer), not with frame_buffer2 (that is webrtc::video_coding::FrameBuffer)",
      "range": {
        "startLine": 26,
        "startChar": 6,
        "endLine": 26,
        "endChar": 17
      },
      "revId": "debfad4f4adb2996d13d9a958544ddae300a721c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bec7826d_982258c3",
        "filename": "modules/video_coding/frame_buffer3.h",
        "patchSetId": 8
      },
      "lineNbr": 28,
      "author": {
        "id": 5019
      },
      "writtenOn": "2021-12-03T12:50:45Z",
      "side": 1,
      "message": "https://google.github.io/styleguide/cppguide.html#Aliases\n\n“Public aliases are for the benefit of an API\u0027s user, and should be clearly documented.”",
      "range": {
        "startLine": 28,
        "startChar": 8,
        "endLine": 28,
        "endChar": 19
      },
      "revId": "debfad4f4adb2996d13d9a958544ddae300a721c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c8178d79_a6c4e950",
        "filename": "modules/video_coding/frame_buffer3.h",
        "patchSetId": 8
      },
      "lineNbr": 28,
      "author": {
        "id": 5527
      },
      "writtenOn": "2021-12-03T14:42:10Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "bec7826d_982258c3",
      "range": {
        "startLine": 28,
        "startChar": 8,
        "endLine": 28,
        "endChar": 19
      },
      "revId": "debfad4f4adb2996d13d9a958544ddae300a721c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8f8901be_833ff25d",
        "filename": "modules/video_coding/frame_buffer3.h",
        "patchSetId": 8
      },
      "lineNbr": 33,
      "author": {
        "id": 5019
      },
      "writtenOn": "2021-12-03T12:50:45Z",
      "side": 1,
      "message": "personally I prefer to mention destructor explicetly, even when it is just\n  ~FrameBuffer() \u003d default;\n  \nIn this case it would gives the reader information that destructor is public and non virtual.",
      "revId": "debfad4f4adb2996d13d9a958544ddae300a721c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3b233887_e35ce239",
        "filename": "modules/video_coding/frame_buffer3.h",
        "patchSetId": 8
      },
      "lineNbr": 33,
      "author": {
        "id": 5527
      },
      "writtenOn": "2021-12-03T14:42:10Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "8f8901be_833ff25d",
      "revId": "debfad4f4adb2996d13d9a958544ddae300a721c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "61c390bc_dc2c598a",
        "filename": "modules/video_coding/frame_buffer3.h",
        "patchSetId": 8
      },
      "lineNbr": 36,
      "author": {
        "id": 5117
      },
      "writtenOn": "2021-12-03T12:12:04Z",
      "side": 1,
      "message": "nit: some comments about these methods would be great. At least specify, what the \"Temporal Unit\" is.\n\nAlso a definition of \"Countinous\" for frames and temporal units would be great here.",
      "revId": "debfad4f4adb2996d13d9a958544ddae300a721c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8ea2bcb2_909b7567",
        "filename": "modules/video_coding/frame_buffer3.h",
        "patchSetId": 8
      },
      "lineNbr": 36,
      "author": {
        "id": 5019
      },
      "writtenOn": "2021-12-03T12:50:45Z",
      "side": 1,
      "message": "what is \u0027temporal unit frame id\u0027?\nthere can be multiple frames in a temporal unit and thus multiple frame ids.\n\n(side note: it might be good idea to use class comment to describe what is temporal unit, and what is frame in the context of this class)",
      "range": {
        "startLine": 36,
        "startChar": 40,
        "endLine": 36,
        "endChar": 59
      },
      "revId": "debfad4f4adb2996d13d9a958544ddae300a721c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a1f7e16d_64fd48b7",
        "filename": "modules/video_coding/frame_buffer3.h",
        "patchSetId": 8
      },
      "lineNbr": 36,
      "author": {
        "id": 5527
      },
      "writtenOn": "2021-12-03T13:55:03Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "61c390bc_dc2c598a",
      "revId": "debfad4f4adb2996d13d9a958544ddae300a721c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a669c0dd_e368d745",
        "filename": "modules/video_coding/frame_buffer3.h",
        "patchSetId": 8
      },
      "lineNbr": 36,
      "author": {
        "id": 5527
      },
      "writtenOn": "2021-12-03T14:42:10Z",
      "side": 1,
      "message": "Added comment.",
      "parentUuid": "8ea2bcb2_909b7567",
      "range": {
        "startLine": 36,
        "startChar": 40,
        "endLine": 36,
        "endChar": 59
      },
      "revId": "debfad4f4adb2996d13d9a958544ddae300a721c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "673879ff_47ccea21",
        "filename": "modules/video_coding/frame_buffer3.h",
        "patchSetId": 8
      },
      "lineNbr": 55,
      "author": {
        "id": 5117
      },
      "writtenOn": "2021-12-03T12:12:04Z",
      "side": 1,
      "message": "This should be TemporalUnitInMap or something else.\nOtherwise it\u0027s a little confusing because the |ExtractNextTemporalUnit| doesn\u0027t use this struct but rather returns a frameVector.",
      "range": {
        "startLine": 55,
        "startChar": 9,
        "endLine": 55,
        "endChar": 21
      },
      "revId": "debfad4f4adb2996d13d9a958544ddae300a721c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f29fe161_491879c6",
        "filename": "modules/video_coding/frame_buffer3.h",
        "patchSetId": 8
      },
      "lineNbr": 55,
      "author": {
        "id": 5527
      },
      "writtenOn": "2021-12-03T13:55:03Z",
      "side": 1,
      "message": "It\u0027s just a better alternative to std::pair. I don\u0027t think it\u0027s confusing since it\u0027s a private struct, so it wouldn\u0027t be used in the public API.",
      "parentUuid": "673879ff_47ccea21",
      "range": {
        "startLine": 55,
        "startChar": 9,
        "endLine": 55,
        "endChar": 21
      },
      "revId": "debfad4f4adb2996d13d9a958544ddae300a721c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6acd99fb_a6d0bbd8",
        "filename": "modules/video_coding/frame_buffer3_unittest.cc",
        "patchSetId": 8
      },
      "lineNbr": 34,
      "author": {
        "id": 5019
      },
      "writtenOn": "2021-12-03T12:50:45Z",
      "side": 1,
      "message": "what is the point of this matcher when you can either:\n  EXPECT_THAT(FunctionThatReturnsOptional(), Eq(absl::nullopt));\n  EXPECT_EQ(FunctionThatReturnsOptional(), absl::nullopt);",
      "range": {
        "startLine": 32,
        "startChar": 0,
        "endLine": 34,
        "endChar": 1
      },
      "revId": "debfad4f4adb2996d13d9a958544ddae300a721c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9c875a83_0d676df8",
        "filename": "modules/video_coding/frame_buffer3_unittest.cc",
        "patchSetId": 8
      },
      "lineNbr": 34,
      "author": {
        "id": 5527
      },
      "writtenOn": "2021-12-03T14:42:10Z",
      "side": 1,
      "message": "Hoping it was cleaner, maybe not, removed.",
      "parentUuid": "6acd99fb_a6d0bbd8",
      "range": {
        "startLine": 32,
        "startChar": 0,
        "endLine": 34,
        "endChar": 1
      },
      "revId": "debfad4f4adb2996d13d9a958544ddae300a721c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9dfc5dc8_b7e4b731",
        "filename": "modules/video_coding/frame_buffer3_unittest.cc",
        "patchSetId": 8
      },
      "lineNbr": 42,
      "author": {
        "id": 5019
      },
      "writtenOn": "2021-12-03T12:50:45Z",
      "side": 1,
      "message": "may be would be easier to read if this would be called FrameBuilder.",
      "range": {
        "startLine": 42,
        "startChar": 6,
        "endLine": 42,
        "endChar": 13
      },
      "revId": "debfad4f4adb2996d13d9a958544ddae300a721c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e43f45b8_e8eb0ae9",
        "filename": "modules/video_coding/frame_buffer3_unittest.cc",
        "patchSetId": 8
      },
      "lineNbr": 42,
      "author": {
        "id": 5527
      },
      "writtenOn": "2021-12-03T14:42:10Z",
      "side": 1,
      "message": "Tests looks nicer when the name is shorter :)",
      "parentUuid": "9dfc5dc8_b7e4b731",
      "range": {
        "startLine": 42,
        "startChar": 6,
        "endLine": 42,
        "endChar": 13
      },
      "revId": "debfad4f4adb2996d13d9a958544ddae300a721c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1441af6a_1fd69a97",
        "filename": "modules/video_coding/frame_buffer3_unittest.cc",
        "patchSetId": 8
      },
      "lineNbr": 52,
      "author": {
        "id": 5019
      },
      "writtenOn": "2021-12-03T12:50:45Z",
      "side": 1,
      "message": "reading individual tests I wasn\u0027t sure what this property mean.\nMay be named it\n \u0027EndOfTemporalUnit\u0027 or \n \u0027EndOfPicture(bool value \u003d true)\u0027 or\n \u0027MarkerBit()\u0027 [general sure confusing, but a widely known concept] or\n \u0027TopSpatialLayer\u0027",
      "range": {
        "startLine": 52,
        "startChar": 11,
        "endLine": 52,
        "endChar": 17
      },
      "revId": "debfad4f4adb2996d13d9a958544ddae300a721c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "feaedb81_1f2d5343",
        "filename": "modules/video_coding/frame_buffer3_unittest.cc",
        "patchSetId": 8
      },
      "lineNbr": 52,
      "author": {
        "id": 5527
      },
      "writtenOn": "2021-12-03T14:42:10Z",
      "side": 1,
      "message": "ditto",
      "parentUuid": "1441af6a_1fd69a97",
      "range": {
        "startLine": 52,
        "startChar": 11,
        "endLine": 52,
        "endChar": 17
      },
      "revId": "debfad4f4adb2996d13d9a958544ddae300a721c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5ad6ae3d_0ac34874",
        "filename": "modules/video_coding/frame_buffer3_unittest.cc",
        "patchSetId": 8
      },
      "lineNbr": 63,
      "author": {
        "id": 5019
      },
      "writtenOn": "2021-12-03T12:50:45Z",
      "side": 1,
      "message": "prefer explicit RTC_CHECK(rtp_timestamp_.has_value());\n\n(otherwise my first reaction as reader was: why 0 timestamp is not allowed?)",
      "revId": "debfad4f4adb2996d13d9a958544ddae300a721c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "65f346fe_3222d63a",
        "filename": "modules/video_coding/frame_buffer3_unittest.cc",
        "patchSetId": 8
      },
      "lineNbr": 63,
      "author": {
        "id": 5527
      },
      "writtenOn": "2021-12-03T14:42:10Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5ad6ae3d_0ac34874",
      "revId": "debfad4f4adb2996d13d9a958544ddae300a721c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0e66d0a9_efb55a6a",
        "filename": "modules/video_coding/frame_buffer3_unittest.cc",
        "patchSetId": 8
      },
      "lineNbr": 95,
      "author": {
        "id": 5019
      },
      "writtenOn": "2021-12-03T12:50:45Z",
      "side": 1,
      "message": "Optional matcher works, but you may compare it directly to actual value (because optional\u003cT\u003e \u003d\u003d T is well defined):\n  EXPECT_THAT(buffer.LastContinuousFrameId(), Eq(1));\n  EXPECT_EQ(buffer.LastContinuousFrameId(), 1);",
      "range": {
        "startLine": 95,
        "startChar": 2,
        "endLine": 95,
        "endChar": 59
      },
      "revId": "debfad4f4adb2996d13d9a958544ddae300a721c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "96ad10bc_32c06fce",
        "filename": "modules/video_coding/frame_buffer3_unittest.cc",
        "patchSetId": 8
      },
      "lineNbr": 95,
      "author": {
        "id": 5527
      },
      "writtenOn": "2021-12-03T14:42:10Z",
      "side": 1,
      "message": "Done, weird that with Eq() I need to use unsigned literals, but with Optional() it accept signed ones.",
      "parentUuid": "0e66d0a9_efb55a6a",
      "range": {
        "startLine": 95,
        "startChar": 2,
        "endLine": 95,
        "endChar": 59
      },
      "revId": "debfad4f4adb2996d13d9a958544ddae300a721c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "783c3d91_19fd2f2b",
        "filename": "modules/video_coding/frame_buffer3_unittest.cc",
        "patchSetId": 8
      },
      "lineNbr": 98,
      "author": {
        "id": 5019
      },
      "writtenOn": "2021-12-03T12:50:45Z",
      "side": 1,
      "message": "https://testing.googleblog.com/2014/10/testing-on-toilet-writing-descriptive.html\n\n“Make sure test names contain both the scenario being tested and the expected outcome.”",
      "range": {
        "startLine": 98,
        "startChar": 23,
        "endLine": 98,
        "endChar": 37
      },
      "revId": "debfad4f4adb2996d13d9a958544ddae300a721c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2750c972_fd0f34c3",
        "filename": "modules/video_coding/frame_buffer3_unittest.cc",
        "patchSetId": 8
      },
      "lineNbr": 98,
      "author": {
        "id": 5527
      },
      "writtenOn": "2021-12-03T14:42:10Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "783c3d91_19fd2f2b",
      "range": {
        "startLine": 98,
        "startChar": 23,
        "endLine": 98,
        "endChar": 37
      },
      "revId": "debfad4f4adb2996d13d9a958544ddae300a721c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4fffb91f_012fa2a9",
        "filename": "modules/video_coding/frame_buffer3_unittest.cc",
        "patchSetId": 8
      },
      "lineNbr": 239,
      "author": {
        "id": 5019
      },
      "writtenOn": "2021-12-03T12:50:45Z",
      "side": 1,
      "message": "have you check the error message when this expectation fails?\n\nIn cases like this I often do other way around, instead of introducing custom matcher, I add helper.\nstd::vector\u003cint64_t\u003e FrameIds(??? frames);\n\nand then write\nEXPECT_THAT(FrameIds(buffer.ExtractNextTemporalUnit()), ElementsAre(1, 2, 3));",
      "range": {
        "startLine": 237,
        "startChar": 0,
        "endLine": 239,
        "endChar": 0
      },
      "revId": "debfad4f4adb2996d13d9a958544ddae300a721c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0c49e245_27b4221b",
        "filename": "modules/video_coding/frame_buffer3_unittest.cc",
        "patchSetId": 8
      },
      "lineNbr": 239,
      "author": {
        "id": 5527
      },
      "writtenOn": "2021-12-03T14:42:10Z",
      "side": 1,
      "message": "I have completely given up on useful printouts from gtest for non-trivial types. I think the current format it easier to read.",
      "parentUuid": "4fffb91f_012fa2a9",
      "range": {
        "startLine": 237,
        "startChar": 0,
        "endLine": 239,
        "endChar": 0
      },
      "revId": "debfad4f4adb2996d13d9a958544ddae300a721c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cc835361_7c353e37",
        "filename": "test/fuzzers/frame_buffer3_fuzzer.cc",
        "patchSetId": 8
      },
      "lineNbr": 30,
      "author": {
        "id": 5019
      },
      "writtenOn": "2021-12-03T12:50:45Z",
      "side": 1,
      "message": "prefer explicit\nrtc::MakeArrayView(data, size)",
      "range": {
        "startLine": 30,
        "startChar": 30,
        "endLine": 30,
        "endChar": 42
      },
      "revId": "debfad4f4adb2996d13d9a958544ddae300a721c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2df96cae_6192acb4",
        "filename": "test/fuzzers/frame_buffer3_fuzzer.cc",
        "patchSetId": 8
      },
      "lineNbr": 30,
      "author": {
        "id": 5527
      },
      "writtenOn": "2021-12-03T14:42:10Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "cc835361_7c353e37",
      "range": {
        "startLine": 30,
        "startChar": 30,
        "endLine": 30,
        "endChar": 42
      },
      "revId": "debfad4f4adb2996d13d9a958544ddae300a721c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b6dfc241_5a1fa26d",
        "filename": "test/fuzzers/frame_buffer3_fuzzer.cc",
        "patchSetId": 8
      },
      "lineNbr": 32,
      "author": {
        "id": 5019
      },
      "writtenOn": "2021-12-03T12:50:45Z",
      "side": 1,
      "message": "prefer explicit conversion:\nwhile (helper.BytesLeft() \u003e 0) {\n\nhttps://abseil.io/tips/141 “Beware Implicit Conversions to bool”",
      "range": {
        "startLine": 32,
        "startChar": 9,
        "endLine": 32,
        "endChar": 27
      },
      "revId": "debfad4f4adb2996d13d9a958544ddae300a721c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ab10e69f_4318c32f",
        "filename": "test/fuzzers/frame_buffer3_fuzzer.cc",
        "patchSetId": 8
      },
      "lineNbr": 32,
      "author": {
        "id": 5527
      },
      "writtenOn": "2021-12-03T14:42:10Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b6dfc241_5a1fa26d",
      "range": {
        "startLine": 32,
        "startChar": 9,
        "endLine": 32,
        "endChar": 27
      },
      "revId": "debfad4f4adb2996d13d9a958544ddae300a721c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    }
  ]
}