{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "aebe9533_a2b118ea",
        "filename": "pc/channel_unittest.cc",
        "patchSetId": 4
      },
      "lineNbr": 517,
      "author": {
        "id": 5019
      },
      "writtenOn": "2021-04-06T09:08:50Z",
      "side": 1,
      "message": "alternatively you may pass channel by reference:\n\n  bool IsSrtpActive(cricket::BaseChannel\u0026 channel) {\n    return network_thread_-\u003eInvoke\u003cbool\u003e(\n        RTC_FROM_HERE, [\u0026] { return channel.srtp_active(); });\n  }\n\nhttps://google.github.io/styleguide/cppguide.html#Inputs_and_Outputs\n\"non-optional output and input/output parameters should usually be references (which cannot be null)\"",
      "range": {
        "startLine": 517,
        "startChar": 4,
        "endLine": 517,
        "endChar": 24
      },
      "revId": "07b34f3187ffbf4843b91be690bfb7999acdf336",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "60eddb86_8859326e",
        "filename": "pc/channel_unittest.cc",
        "patchSetId": 4
      },
      "lineNbr": 517,
      "author": {
        "id": 5508
      },
      "writtenOn": "2021-04-06T09:27:03Z",
      "side": 1,
      "message": "done - now (using the type that\u0027s used by the surrogate class):\nbool IsSrtpActive(std::unique_ptr\u003ctypename T::Channel\u003e\u0026 channel)",
      "parentUuid": "aebe9533_a2b118ea",
      "range": {
        "startLine": 517,
        "startChar": 4,
        "endLine": 517,
        "endChar": 24
      },
      "revId": "07b34f3187ffbf4843b91be690bfb7999acdf336",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "45015942_426d4aa8",
        "filename": "pc/channel_unittest.cc",
        "patchSetId": 4
      },
      "lineNbr": 517,
      "author": {
        "id": 5019
      },
      "writtenOn": "2021-04-06T09:43:27Z",
      "side": 1,
      "message": "why do you need reference to the pointer if you only use reference to the object?\nI\u0027ve suggested to use reference instead of the DCHECK, use reference to indicate passed channel can\u0027t be nullptr pointer.\n\nEXPECT_FALSE(IsSrtpActive(*channel1_));)",
      "parentUuid": "60eddb86_8859326e",
      "range": {
        "startLine": 517,
        "startChar": 4,
        "endLine": 517,
        "endChar": 24
      },
      "revId": "07b34f3187ffbf4843b91be690bfb7999acdf336",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "77f75902_f202ef70",
        "filename": "pc/channel_unittest.cc",
        "patchSetId": 4
      },
      "lineNbr": 517,
      "author": {
        "id": 5508
      },
      "writtenOn": "2021-04-06T09:53:15Z",
      "side": 1,
      "message": "Well I figured that dereferencing a pointer doesn\u0027t mean that it can\u0027t be null (in fact some of the old webrtc code has been burned by this). I do understand your point though that it signals to the outside code that the expectation is that can\u0027t be null. However there\u0027s nobody besides me looking at that code right now ðŸ˜Š\n\nSo I opted to take a reference to the object that really can\u0027t be null, which is the unique_ptr\u003c\u003e object and have the RTC_DCHECK check in the function as a check that the test implementation itself is correct (not the code under test).",
      "parentUuid": "45015942_426d4aa8",
      "range": {
        "startLine": 517,
        "startChar": 4,
        "endLine": 517,
        "endChar": 24
      },
      "revId": "07b34f3187ffbf4843b91be690bfb7999acdf336",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bfee6f68_30f62c45",
        "filename": "pc/channel_unittest.cc",
        "patchSetId": 4
      },
      "lineNbr": 519,
      "author": {
        "id": 5019
      },
      "writtenOn": "2021-04-06T09:08:50Z",
      "side": 1,
      "message": "Invoke is a synchronious call, so lambda doesn\u0027t need to outlive this function and thus auto capture is ok and encouraged.\n\nhttp://go/c-readability-advice#explicit-vs-implicit-lambda-capture-clauses",
      "range": {
        "startLine": 519,
        "startChar": 24,
        "endLine": 519,
        "endChar": 31
      },
      "revId": "07b34f3187ffbf4843b91be690bfb7999acdf336",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "82f53753_84f934d3",
        "filename": "pc/channel_unittest.cc",
        "patchSetId": 4
      },
      "lineNbr": 519,
      "author": {
        "id": 5508
      },
      "writtenOn": "2021-04-06T09:27:03Z",
      "side": 1,
      "message": "done",
      "parentUuid": "bfee6f68_30f62c45",
      "range": {
        "startLine": 519,
        "startChar": 24,
        "endLine": 519,
        "endChar": 31
      },
      "revId": "07b34f3187ffbf4843b91be690bfb7999acdf336",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c5ef1955_2f18f563",
        "filename": "pc/channel_unittest.cc",
        "patchSetId": 4
      },
      "lineNbr": 524,
      "author": {
        "id": 5508
      },
      "writtenOn": "2021-04-06T09:27:03Z",
      "side": 1,
      "message": "same here",
      "revId": "07b34f3187ffbf4843b91be690bfb7999acdf336",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    }
  ]
}