{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "5280f09b_54fc7db6",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 5234
      },
      "writtenOn": "2022-06-10T14:11:56Z",
      "side": 1,
      "message": "Lots of affected files, but almost all changes are substitutions of include lines and corresponding build targets.",
      "revId": "acea6a679d7b54fece177e523935bb680cdf8052",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "be0cce85_121cf476",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 5087
      },
      "writtenOn": "2022-06-10T14:19:31Z",
      "side": 1,
      "message": "Do you know if any downstream client is using rtc::make_ref_counted?\n\nIf they #include rtc_base/ref_counted_object.h, they will not get it and there might be a compile error.",
      "parentUuid": "5280f09b_54fc7db6",
      "revId": "acea6a679d7b54fece177e523935bb680cdf8052",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c3c0fa7e_b4b4ca66",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 5234
      },
      "writtenOn": "2022-06-13T07:27:32Z",
      "side": 1,
      "message": "Looks like there are a few downstream uses. May need an initial cl to just add new header file and build target.",
      "parentUuid": "be0cce85_121cf476",
      "revId": "acea6a679d7b54fece177e523935bb680cdf8052",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a818913d_4967e4f5",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 5087
      },
      "writtenOn": "2022-06-13T08:21:45Z",
      "side": 1,
      "message": "Are you going to fix them before landing this one?\n\n(e.g. by adding an empty api/make_ref_counted.h and an #include + dependency on it, so when this CL lands everything will be fine)",
      "parentUuid": "c3c0fa7e_b4b4ca66",
      "revId": "acea6a679d7b54fece177e523935bb680cdf8052",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0be074fe_66146d67",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 5234
      },
      "writtenOn": "2022-06-15T08:16:03Z",
      "side": 1,
      "message": "Looks green now!",
      "parentUuid": "a818913d_4967e4f5",
      "revId": "acea6a679d7b54fece177e523935bb680cdf8052",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "889302c4_df21cb6e",
        "filename": "api/make_ref_counted.h",
        "patchSetId": 6
      },
      "lineNbr": 117,
      "author": {
        "id": 5634
      },
      "writtenOn": "2022-06-10T15:18:58Z",
      "side": 1,
      "message": "Do we need to expose Ref in API, or can we leave that in the internal parts?\n\nDo we have external usages of Ref?",
      "revId": "acea6a679d7b54fece177e523935bb680cdf8052",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1b37872d_ea4842d5",
        "filename": "api/make_ref_counted.h",
        "patchSetId": 6
      },
      "lineNbr": 117,
      "author": {
        "id": 5234
      },
      "writtenOn": "2022-06-13T07:27:32Z",
      "side": 1,
      "message": "Good question. I initially want to leave them out, but they depend on the HasAddRefAndRelease utility declared here.",
      "parentUuid": "889302c4_df21cb6e",
      "revId": "acea6a679d7b54fece177e523935bb680cdf8052",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a7f55706_a35b26bb",
        "filename": "api/make_ref_counted.h",
        "patchSetId": 6
      },
      "lineNbr": 117,
      "author": {
        "id": 5634
      },
      "writtenOn": "2022-06-14T08:46:37Z",
      "side": 1,
      "message": "Why is that a problem?\nDoes the HasAddRefAndRelease utility depend on Ref?\nCan we move Ref into the webrtc_make_ref_counted_internal namespace?\n\nThe name sounds so general, and as is so well commented, that it looks like something users of this API should be doing, and I\u0027m not clear why we should want that.",
      "parentUuid": "1b37872d_ea4842d5",
      "revId": "acea6a679d7b54fece177e523935bb680cdf8052",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7095e2e3_f51c2948",
        "filename": "api/make_ref_counted.h",
        "patchSetId": 6
      },
      "lineNbr": 117,
      "author": {
        "id": 5234
      },
      "writtenOn": "2022-06-14T09:25:16Z",
      "side": 1,
      "message": "Tommi, what\u0027s your opinion? I can only find one user of rtc::Ref, the (deprecated) AsyncInvoker, so I don\u0027t really see its claimed utility for template programming.\n\nThe dependency problem: rtc::make_ref_counted depends on the HasAddRefAndRelease utility, and with this cl, that\u0027s defined in an internal namespace in this file.\n\nrtc::Ref also depends on HasAddRefAndRelease. So if I leave that in the old place, I can\u0027t include api/make_ref_counted (circular include), so I\u0027d have to move or duplicate HasAddRefAndRelease, which doesn\u0027t seem quite right, but not extremely wrong either.\n\nI\u0027m tempted to try to change AsyncInvoker to just use scoped_ref_ptr, and then delete the rtc::Ref as unused.",
      "parentUuid": "a7f55706_a35b26bb",
      "revId": "acea6a679d7b54fece177e523935bb680cdf8052",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "41112d5e_faa12583",
        "filename": "api/make_ref_counted.h",
        "patchSetId": 6
      },
      "lineNbr": 117,
      "author": {
        "id": 5508
      },
      "writtenOn": "2022-06-14T09:28:41Z",
      "side": 1,
      "message": "Agree that we don\u0027t want this to become an API that we expect external code to rely on. Can we move it into the internal namespace as Harald suggests?",
      "parentUuid": "7095e2e3_f51c2948",
      "revId": "acea6a679d7b54fece177e523935bb680cdf8052",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8b8f2f5d_0e6dcf64",
        "filename": "api/make_ref_counted.h",
        "patchSetId": 6
      },
      "lineNbr": 117,
      "author": {
        "id": 5508
      },
      "writtenOn": "2022-06-14T09:30:44Z",
      "side": 1,
      "message": "Fixing AsyncInvoker and removing rtc::Ref is also an option but I\u0027d prefer to do that in a separate CL.",
      "parentUuid": "41112d5e_faa12583",
      "revId": "acea6a679d7b54fece177e523935bb680cdf8052",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "57ce9a4b_f4ff61fa",
        "filename": "api/make_ref_counted.h",
        "patchSetId": 6
      },
      "lineNbr": 117,
      "author": {
        "id": 5234
      },
      "writtenOn": "2022-06-14T13:50:41Z",
      "side": 1,
      "message": "Separate deletion cl landed. So rtc::Ref no longer moved anywhere.",
      "parentUuid": "8b8f2f5d_0e6dcf64",
      "revId": "acea6a679d7b54fece177e523935bb680cdf8052",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    }
  ]
}