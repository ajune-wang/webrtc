{
  "comments": [
    {
      "key": {
        "uuid": "b2b6fe6a_c3d9f8a9",
        "filename": "pc/peerconnection_histogram_unittest.cc",
        "patchSetId": 7
      },
      "lineNbr": 143,
      "author": {
        "id": 5142
      },
      "writtenOn": "2018-07-16T14:37:28Z",
      "side": 1,
      "message": "I believe WAIT_() is supposed to be an internal macro not used directly? There are only 2 uses of it in unittests. EXPECT_TRUE_WAIT like before?",
      "revId": "57240478512632f368e98c4128b0420c2968e411",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "38f66590_e067de73",
        "filename": "pc/peerconnection_histogram_unittest.cc",
        "patchSetId": 7
      },
      "lineNbr": 143,
      "author": {
        "id": 5634
      },
      "writtenOn": "2018-07-16T14:54:07Z",
      "side": 1,
      "message": "The reason for using the internal macro is that in the case of failed connection (the no-host case on a bot with only private addresses), the function will return false, but the test should succeed. Using EXPECT_TRUE_WAIT will mark the test as failing.\nPerhaps I should modify WAIT_ to have an externally available version with a more expressive name?",
      "parentUuid": "b2b6fe6a_c3d9f8a9",
      "revId": "57240478512632f368e98c4128b0420c2968e411",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e8ffe88f_73175bcf",
        "filename": "pc/peerconnection_histogram_unittest.cc",
        "patchSetId": 7
      },
      "lineNbr": 143,
      "author": {
        "id": 5142
      },
      "writtenOn": "2018-07-16T17:10:38Z",
      "side": 1,
      "message": "Oh right, that makes sense.\n\nYou could also use \"WAIT(ex, timeout)\" only difference is you would have to re-evaluate the expression if you want the result of it, but you don\u0027t do anything with \"res\" anyway and this function returns the right value based on the return statement\u0027s expression.",
      "parentUuid": "38f66590_e067de73",
      "revId": "57240478512632f368e98c4128b0420c2968e411",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b7379f7a_ab8b7a56",
        "filename": "pc/peerconnection_histogram_unittest.cc",
        "patchSetId": 7
      },
      "lineNbr": 143,
      "author": {
        "id": 5634
      },
      "writtenOn": "2018-07-16T17:19:46Z",
      "side": 1,
      "message": "Thanks - I\u0027d missed WAIT()! Done.",
      "parentUuid": "e8ffe88f_73175bcf",
      "revId": "57240478512632f368e98c4128b0420c2968e411",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9b21292f_355d4368",
        "filename": "pc/peerconnection_histogram_unittest.cc",
        "patchSetId": 7
      },
      "lineNbr": 147,
      "author": {
        "id": 5142
      },
      "writtenOn": "2018-07-16T14:37:28Z",
      "side": 1,
      "message": "nit: GenerateOfferAndGatherCandidates()?\nA name like \"...Get...\" makes it sound like it should return the candidates but it only waits for gathering to complete.\n\nUnless we want to make it return candidates as a list?",
      "revId": "57240478512632f368e98c4128b0420c2968e411",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "75b1e188_96477d5f",
        "filename": "pc/peerconnection_histogram_unittest.cc",
        "patchSetId": 7
      },
      "lineNbr": 147,
      "author": {
        "id": 5634
      },
      "writtenOn": "2018-07-16T14:54:07Z",
      "side": 1,
      "message": "Will do.",
      "parentUuid": "9b21292f_355d4368",
      "revId": "57240478512632f368e98c4128b0420c2968e411",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3209b325_9b5a0ee2",
        "filename": "pc/peerconnection_histogram_unittest.cc",
        "patchSetId": 7
      },
      "lineNbr": 147,
      "author": {
        "id": 5634
      },
      "writtenOn": "2018-07-16T17:19:46Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "75b1e188_96477d5f",
      "revId": "57240478512632f368e98c4128b0420c2968e411",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f1ddfc42_415dd1a6",
        "filename": "pc/peerconnection_histogram_unittest.cc",
        "patchSetId": 7
      },
      "lineNbr": 405,
      "author": {
        "id": 5142
      },
      "writtenOn": "2018-07-16T14:37:28Z",
      "side": 1,
      "message": "It would be nice to verify that the expected candidates were gathered (kDefaultLocalAddress, kPrivateLocalAddress), since there is a lot of things happening behind the scenes of this unittest.",
      "revId": "57240478512632f368e98c4128b0420c2968e411",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7576b31c_a90086a4",
        "filename": "pc/peerconnection_histogram_unittest.cc",
        "patchSetId": 7
      },
      "lineNbr": 405,
      "author": {
        "id": 5634
      },
      "writtenOn": "2018-07-16T14:54:07Z",
      "side": 1,
      "message": "I kind of believe in tests that test one thing only - we have the observer wired up that could have collected the addresses, but we would then be testing candidate collection, which is covered by other unittests.",
      "parentUuid": "f1ddfc42_415dd1a6",
      "revId": "57240478512632f368e98c4128b0420c2968e411",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "77c5e71f_78c315e3",
        "filename": "pc/peerconnection_histogram_unittest.cc",
        "patchSetId": 7
      },
      "lineNbr": 405,
      "author": {
        "id": 5634
      },
      "writtenOn": "2018-07-16T17:19:46Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "7576b31c_a90086a4",
      "revId": "57240478512632f368e98c4128b0420c2968e411",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    }
  ]
}