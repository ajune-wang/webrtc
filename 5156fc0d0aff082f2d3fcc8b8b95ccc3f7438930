{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "939010a2_2da8f026",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 5634
      },
      "writtenOn": "2023-10-10T10:17:52Z",
      "side": 1,
      "message": "PTAL.",
      "revId": "5156fc0d0aff082f2d3fcc8b8b95ccc3f7438930",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "053a4358_fd67d8d1",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 5508
      },
      "writtenOn": "2023-10-10T11:20:16Z",
      "side": 1,
      "message": "lgtm - a couple of small suggestions below",
      "revId": "5156fc0d0aff082f2d3fcc8b8b95ccc3f7438930",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "30161335_637a73dc",
        "filename": "examples/peerconnection/client/peer_connection_client.cc",
        "patchSetId": 6
      },
      "lineNbr": 99,
      "author": {
        "id": 5508
      },
      "writtenOn": "2023-10-10T11:20:16Z",
      "side": 1,
      "message": "nit: `RTC_DCHECK_NE(state_, RESOLVING);`",
      "revId": "5156fc0d0aff082f2d3fcc8b8b95ccc3f7438930",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "dc4332c1_8b6dcc5e",
        "filename": "examples/peerconnection/client/peer_connection_client.cc",
        "patchSetId": 6
      },
      "lineNbr": 99,
      "author": {
        "id": 5634
      },
      "writtenOn": "2023-10-10T11:30:47Z",
      "side": 1,
      "message": "Done.",
      "parentUuid": "30161335_637a73dc",
      "revId": "5156fc0d0aff082f2d3fcc8b8b95ccc3f7438930",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1726e366_234c5625",
        "filename": "examples/peerconnection/client/peer_connection_client.cc",
        "patchSetId": 6
      },
      "lineNbr": 112,
      "author": {
        "id": 5508
      },
      "writtenOn": "2023-10-10T11:20:16Z",
      "side": 1,
      "message": "is this basically the same as:\n```\nif (result.GetError() !\u003d 0 ||\n    !result.GetResolvedAddress(AF_INET, \u0026server_address_)) {\n  callback_-\u003eOnServerConnectionFailure();\n  resolver_.reset();\n  state_ \u003d NOT_CONNECTED;\n  return;\n}\n\nDoConnect();\n```\n? Just so that we don\u0027t need to repeat the same steps for failure cases.",
      "revId": "5156fc0d0aff082f2d3fcc8b8b95ccc3f7438930",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a245f7a1_6bb0b660",
        "filename": "examples/peerconnection/client/peer_connection_client.cc",
        "patchSetId": 6
      },
      "lineNbr": 112,
      "author": {
        "id": 5634
      },
      "writtenOn": "2023-10-10T11:30:47Z",
      "side": 1,
      "message": "Thought about it, I don\u0027t like having modify-my-argument functions in if statements. Matter of taste, I suppose.\n\nAlso thought about letting failure set a boolean and testing on that, but that seemed too much typing for the case (and we should check GetError() before GetResolvedAddress(), so that\u0027s two booleans).",
      "parentUuid": "1726e366_234c5625",
      "revId": "5156fc0d0aff082f2d3fcc8b8b95ccc3f7438930",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "eb98428f_78cde1a9",
        "filename": "examples/peerconnection/client/peer_connection_client.cc",
        "patchSetId": 6
      },
      "lineNbr": 112,
      "author": {
        "id": 5508
      },
      "writtenOn": "2023-10-10T12:52:57Z",
      "side": 1,
      "message": "yup. Another way of looking at it (and then I\u0027ll stop the bikeshed) would be to handle the success case first:\n\n```\nvoid PeerConnectionClient::OnResolveResult(\n    const webrtc::AsyncDnsResolverResult\u0026 result) {\n  if (result.GetError() \u003d\u003d 0 \u0026\u0026\n      result.GetResolvedAddress(AF_INET, \u0026server_address_)) {\n    DoConnect();\n  } else {\n    callback_-\u003eOnServerConnectionFailure();\n    resolver_.reset();\n    state_ \u003d NOT_CONNECTED;\n  }\n}\n```\n\nActually, it looks like GetResolvedAddress() won\u0027t return success unless there\u0027s no error, so this would do it:\n\n```\nvoid PeerConnectionClient::OnResolveResult(\n    const webrtc::AsyncDnsResolverResult\u0026 result) {\n  if (result.GetResolvedAddress(AF_INET, \u0026server_address_)) {\n    DoConnect();\n  } else {\n    callback_-\u003eOnServerConnectionFailure();\n    resolver_.reset();\n    state_ \u003d NOT_CONNECTED;\n  }\n}\n```",
      "parentUuid": "a245f7a1_6bb0b660",
      "revId": "5156fc0d0aff082f2d3fcc8b8b95ccc3f7438930",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    }
  ]
}