{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "1df0f19d_a670e411",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 8046
      },
      "writtenOn": "2022-08-27T04:36:20Z",
      "side": 1,
      "message": "Looks good to me now.",
      "revId": "b147666a257a4213dd4dbd5e324b9f19093eb6c1",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a083b23c_067d579e",
        "filename": "modules/desktop_capture/linux/wayland/shared_screencast_stream.cc",
        "patchSetId": 5
      },
      "lineNbr": 540,
      "author": {
        "id": 14134
      },
      "writtenOn": "2022-08-29T17:46:44Z",
      "side": 1,
      "message": "Can you document the code paths that can call this from the pipewire thread and the non-pipewire thread?",
      "revId": "b147666a257a4213dd4dbd5e324b9f19093eb6c1",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8ad1e7a5_cf77a778",
        "filename": "modules/desktop_capture/linux/wayland/shared_screencast_stream.cc",
        "patchSetId": 5
      },
      "lineNbr": 547,
      "author": {
        "id": 14134
      },
      "writtenOn": "2022-08-29T17:46:44Z",
      "side": 1,
      "message": "It appears that this can be allocated but never started, or the \"pipewire context\" fails to start (L414-426).  Do we still need to call pw_thread_loop_wait/_stop in those cases?",
      "revId": "b147666a257a4213dd4dbd5e324b9f19093eb6c1",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d9d27c85_6ef2720b",
        "filename": "modules/desktop_capture/linux/wayland/shared_screencast_stream.cc",
        "patchSetId": 5
      },
      "lineNbr": 559,
      "author": {
        "id": 14134
      },
      "writtenOn": "2022-08-29T17:46:44Z",
      "side": 1,
      "message": "Super nit:  Prefer to put lock-guarded code into its own scope { } so that additional statements aren\u0027t included by accident.",
      "revId": "b147666a257a4213dd4dbd5e324b9f19093eb6c1",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c3d2830a_450f0481",
        "filename": "modules/desktop_capture/linux/wayland/shared_screencast_stream.cc",
        "patchSetId": 5
      },
      "lineNbr": 574,
      "author": {
        "id": 14134
      },
      "writtenOn": "2022-08-29T17:46:44Z",
      "side": 1,
      "message": "Aside: If all of these pipewire internal structs have essentially the same lifetime, IMO it would be better to bundle them into a single class that can be created, intiialized, and destroyed together, ideally using an RAII pattern.\n\nThis class could also be used to validate thread-correct behavior.\n\nSounds like it could be a big change, though, given the extensive usage of these pipewire structs, and you might want to hang other APIs off of it to wrap more of low-level pipewire details and possibly facilitate unit test mocks.\n\nWDYT?",
      "revId": "b147666a257a4213dd4dbd5e324b9f19093eb6c1",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    }
  ]
}