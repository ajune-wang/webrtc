{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "2cd2bccf_fc1d6b16",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5634
      },
      "writtenOn": "2024-03-19T07:27:08Z",
      "side": 1,
      "message": "Not clear what you are trying to achieve here, or if this is the only effect it will have.\n\nAre you trying to make it so that only one audio format will be generated? For Opus, or for all codecs? Are there audio formats that we want represented in SDP in multiple alternate shapes, varying only in parameters? Will this prevent that?\n\nPlease file a bug and explain more what the goal is.",
      "revId": "9cfc05fbe7394698eddf1f91fdb14b302fdea807",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5cc90445_09bb60f9",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 8038
      },
      "writtenOn": "2024-03-19T09:03:07Z",
      "side": 1,
      "message": "This payload type mapper is used in voice engine to get (or generate) a payload type for the codecs returned by the codec factory.\n\nThe goal is to use the existing payload type mapping regardless of the format parameters (instead of generating a new type). For example, if I were to change the default codec params for Opus in the codec factory, I don\u0027t want a new payload type to be generated (see test). I don\u0027t see that it should be any different for other codecs.\n\nThe goal is not to have multiple audio formats in the SDP for the same codec (only varying in parameters). I\u0027m honestly not sure what would happen if the codec factory returns multiple versions of the same codec. Is that \"allowed\" in SDP?",
      "parentUuid": "2cd2bccf_fc1d6b16",
      "revId": "9cfc05fbe7394698eddf1f91fdb14b302fdea807",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a08481d6_f19fd400",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5634
      },
      "writtenOn": "2024-03-20T03:00:52Z",
      "side": 1,
      "message": "A payload type in SDP indicates a particular codec *and its configuration*.\nI honestly don\u0027t know if offering G.711 with ptime\u003d10 ms is interoperable with G.711 with ptime\u003d20 ms. I know that offering both in an offer is legal.\n(I know that in many cases in video, the same codec with different fmtp lines represent formats that do *not* interoperate.)\n\nIf you change the default codec params for Opus, you will generate a new payload type - by definition it\u0027s different. Hopefully you will also stop generating the old one, so that you don\u0027t end up in a situation with both. But it seems wrong for a lower level comparison routine to decide that you *can\u0027t* have both.",
      "parentUuid": "5cc90445_09bb60f9",
      "revId": "9cfc05fbe7394698eddf1f91fdb14b302fdea807",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f8670ea3_e2a65e11",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5634
      },
      "writtenOn": "2024-03-20T03:00:52Z",
      "side": 1,
      "message": "I think this is wrong, model-wise.",
      "revId": "9cfc05fbe7394698eddf1f91fdb14b302fdea807",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "94c3a197_96dea4f2",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 8038
      },
      "writtenOn": "2024-03-20T12:34:27Z",
      "side": 1,
      "message": "Yes, I agree, reverting.",
      "parentUuid": "f8670ea3_e2a65e11",
      "revId": "9cfc05fbe7394698eddf1f91fdb14b302fdea807",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "eefaa63c_ec655ade",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 8038
      },
      "writtenOn": "2024-03-20T12:34:27Z",
      "side": 1,
      "message": "Alright, thanks for the explanation. This does indeed look like the wrong thing to do.\n\nFor the Opus case, it really doesn\u0027t make sense to have different formats for different sets of parameters since they are all interoperable, but I guess it could be different for other codecs.",
      "parentUuid": "a08481d6_f19fd400",
      "revId": "9cfc05fbe7394698eddf1f91fdb14b302fdea807",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "At least one maximum vote for label \u0027Code-Review\u0027 is required"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader AND -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1 AND -label:Code-Review\u003dMIN"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader AND -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Code-Review=MAX,user=non_uploader","label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1 AND -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1","label:Code-Review=MIN"]}
      },
      "patchSetCommitId": "9cfc05fbe7394698eddf1f91fdb14b302fdea807",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforced_gerrit"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforcement-satisfied_gerrit"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "9cfc05fbe7394698eddf1f91fdb14b302fdea807",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}