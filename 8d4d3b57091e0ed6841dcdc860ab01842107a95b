{
  "comments": [
    {
      "key": {
        "uuid": "481c528c_d4539b0c",
        "filename": "api/DEPS",
        "patchSetId": 3
      },
      "lineNbr": 23,
      "author": {
        "id": 5087
      },
      "writtenOn": "2018-10-18T11:59:19Z",
      "side": 1,
      "message": "It is annoying that we need to explicitly mark all the internal folders with \"-\". I tried to use noparent [1] but then we lose the rules for Abseil (which we want to keep there). Well, or maybe not, maybe we want to carefully decide which part of Abseil is allowed in API headers. WDYT?\n\n[1] - https://cs.chromium.org/chromium/src/buildtools/checkdeps/README.md?l\u003d62\u0026rcl\u003d2888931260f2a32bc583f005bd807a561b2fa6af",
      "range": {
        "startLine": 1,
        "startChar": 0,
        "endLine": 23,
        "endChar": 1
      },
      "revId": "8d4d3b57091e0ed6841dcdc860ab01842107a95b",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "777cf47a_b80ba6a1",
        "filename": "api/DEPS",
        "patchSetId": 3
      },
      "lineNbr": 23,
      "author": {
        "id": 5126
      },
      "writtenOn": "2018-10-18T12:54:51Z",
      "side": 1,
      "message": "And no wildcards? That *is* annoying.\n\nIs it possible to define variables? In that case, we could put the Abseil whitelist in a variable and use that both in //DEPS and //api/DEPS---and then //api/DEPS could use `noparent`.",
      "parentUuid": "481c528c_d4539b0c",
      "range": {
        "startLine": 1,
        "startChar": 0,
        "endLine": 23,
        "endChar": 1
      },
      "revId": "8d4d3b57091e0ed6841dcdc860ab01842107a95b",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "da82b7f1_e8122f6a",
        "filename": "api/DEPS",
        "patchSetId": 3
      },
      "lineNbr": 23,
      "author": {
        "id": 5087
      },
      "writtenOn": "2018-10-19T07:22:44Z",
      "side": 1,
      "message": "It seems there is something like \"From()\" (https://dev.chromium.org/developers/how-tos/depottools#TOC-DEPS-file) but it is never used: https://cs.chromium.org/search/?q\u003df:DEPS+From%5C(\u0026sq\u003dpackage:chromium\u0026type\u003dcs.\n\nOn the other hand, after thinking on it. It is possible that we don\u0027t want to allow all the Abseil things we use internally in our APIs. For example, absl::optional/absl::string_view are OK, but I don\u0027t think we want to allow absl::InlinedVector usage in API headers.",
      "parentUuid": "777cf47a_b80ba6a1",
      "range": {
        "startLine": 1,
        "startChar": 0,
        "endLine": 23,
        "endChar": 1
      },
      "revId": "8d4d3b57091e0ed6841dcdc860ab01842107a95b",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ad80b120_bd4ddd10",
        "filename": "api/DEPS",
        "patchSetId": 3
      },
      "lineNbr": 271,
      "author": {
        "id": 5126
      },
      "writtenOn": "2018-10-18T12:54:51Z",
      "side": 1,
      "message": "It looks like there are a few files that would really benefit from moving to api/ (e.g. scoped_ref_ptr.h), and some that really ought to move to api/internal/ or something like it (e.g. safe_conversions.h, refcount.h).",
      "revId": "8d4d3b57091e0ed6841dcdc860ab01842107a95b",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "00247b36_877d0f9f",
        "filename": "api/DEPS",
        "patchSetId": 3
      },
      "lineNbr": 271,
      "author": {
        "id": 5087
      },
      "writtenOn": "2018-10-19T07:22:44Z",
      "side": 1,
      "message": "Yes, the situation is not that bad and some of these will be moved to api/. As you wrote, rtc::scoped_refptr\u003cT\u003e is used as output type in some API functions so it makes sense to move it.\n\nI think we can go through this in Q1.",
      "parentUuid": "ad80b120_bd4ddd10",
      "revId": "8d4d3b57091e0ed6841dcdc860ab01842107a95b",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "285409eb_073a4b09",
        "filename": "api/DEPS",
        "patchSetId": 3
      },
      "lineNbr": 295,
      "author": {
        "id": 5126
      },
      "writtenOn": "2018-10-18T12:54:51Z",
      "side": 1,
      "message": "Is there a nice way to blanket allow everything, so that we don\u0027t have to list it? Or I guess not everything, just the stuff that the parent dir allowed...\n\nHmm. Maybe we ought to switch things around, and have *no* `include_rules`, and then restrict the headers with a *.h entry in specific_include_rules? Do we have headers that aren\u0027t named *.h?",
      "revId": "8d4d3b57091e0ed6841dcdc860ab01842107a95b",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "176f3f55_b405e9eb",
        "filename": "api/DEPS",
        "patchSetId": 3
      },
      "lineNbr": 295,
      "author": {
        "id": 5087
      },
      "writtenOn": "2018-10-19T07:22:44Z",
      "side": 1,
      "message": "\u003e Is there a nice way to blanket allow everything, so that we don\u0027t have to list it? Or I guess not everything, just the stuff that the parent dir allowed...\n\u003e \n\u003e Hmm. Maybe we ought to switch things around, and have *no* `include_rules`, and then restrict the headers with a *.h entry in specific_include_rules? Do we have headers that aren\u0027t named *.h?\n\nIn api/ all the headers end with .h, let me try this idea. No `include_rules`, the first `specific_include_rules` to restrict everything and then the next `specific_include_rules` to allow on a case by case basis.",
      "parentUuid": "285409eb_073a4b09",
      "revId": "8d4d3b57091e0ed6841dcdc860ab01842107a95b",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "546142c3_30e6f9b2",
        "filename": "api/DEPS",
        "patchSetId": 3
      },
      "lineNbr": 295,
      "author": {
        "id": 5087
      },
      "writtenOn": "2018-10-19T07:47:56Z",
      "side": 1,
      "message": "\u003e In api/ all the headers end with .h, let me try this idea. No `include_rules`, the first `specific_include_rules` to restrict everything and then the next `specific_include_rules` to allow on a case by case basis.\n\nMmmh, no we cannot rely on the order by which this rules are applied: https://cs.chromium.org/chromium/src/buildtools/checkdeps/README.md?l\u003d46-52\u0026rcl\u003d2888931260f2a32bc583f005bd807a561b2fa6af.\n\nMaybe, we can move this one level above but I think we will always struggle to deal with duplication here (we want to iterate on a list and prefix with + for .cc and - for .h but there is no possibility to do that in DEPS language without duplication).\n\nI am starting to think that the best solution is to:\n\n 1. Use \"-\" rules in src/DEPS to disallow includes from Chromium\u0027s base/, etc...\n 2. Actively maintain DEPS files in sub-folders and allow only what is needed and like in this \n    case explicitly disallow something (e.g. header includes on internal things).",
      "parentUuid": "176f3f55_b405e9eb",
      "revId": "8d4d3b57091e0ed6841dcdc860ab01842107a95b",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "10d794d7_327b3828",
        "filename": "api/DEPS",
        "patchSetId": 3
      },
      "lineNbr": 295,
      "author": {
        "id": 5126
      },
      "writtenOn": "2018-10-19T08:29:33Z",
      "side": 1,
      "message": "Hmm. api/ would be causing a lot of extra work in all the other subtrees, then. It pretty much sounds like your original proposal is the least bad one. :-/\n\nI guess we could build a presubmit test that verifies that `include_rules` and `specific_include_rules[\".*\\.cc\"]` contain a complete list of top-level dirs---that ought to catch all mistakes, right? It wouldn\u0027t even be difficult to parse, since it\u0027s Python...",
      "parentUuid": "546142c3_30e6f9b2",
      "revId": "8d4d3b57091e0ed6841dcdc860ab01842107a95b",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9d37461c_7f03922f",
        "filename": "api/DEPS",
        "patchSetId": 3
      },
      "lineNbr": 295,
      "author": {
        "id": 5087
      },
      "writtenOn": "2018-10-23T12:31:13Z",
      "side": 1,
      "message": "Back to this, finally.\n\nI am writing the presubmit check, because as it turns out, this is easy to get wrong. In this moment, for example, we are missing common_video, testing, third_party in the list. :-)",
      "parentUuid": "10d794d7_327b3828",
      "revId": "8d4d3b57091e0ed6841dcdc860ab01842107a95b",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "221049b1_cdcfe8dd",
        "filename": "api/DEPS",
        "patchSetId": 3
      },
      "lineNbr": 295,
      "author": {
        "id": 5087
      },
      "writtenOn": "2018-10-24T09:39:31Z",
      "side": 1,
      "message": "PTAL PS#4.",
      "parentUuid": "9d37461c_7f03922f",
      "revId": "8d4d3b57091e0ed6841dcdc860ab01842107a95b",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    }
  ]
}