{
  "comments": [
    {
      "key": {
        "uuid": "17e3ecb1_57f45df2",
        "filename": "modules/pacing/packet_router.cc",
        "patchSetId": 2
      },
      "lineNbr": 35,
      "author": {
        "id": 5234
      },
      "writtenOn": "2017-12-01T14:16:18Z",
      "side": 1,
      "message": "I take it this is because previous behavior was to start at one? Would make sense to switch to zero-based sequence numbers at some point.",
      "range": {
        "startLine": 35,
        "startChar": 20,
        "endLine": 35,
        "endChar": 21
      },
      "revId": "723110633ec5efa45b8d26cbdee459691c56d314",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fd8cffde_b9a03dfd",
        "filename": "modules/pacing/packet_router.cc",
        "patchSetId": 2
      },
      "lineNbr": 136,
      "author": {
        "id": 5234
      },
      "writtenOn": "2017-12-01T12:55:55Z",
      "side": 1,
      "message": "Do you think memory_order_relaxed is sufficient here? And if we want to do subtleties like that, maybe it\u0027s best to put it in its own class (say, SequenceNumberGenerator), document what service it provides, and avoid direct use of std::atomic?",
      "range": {
        "startLine": 136,
        "startChar": 36,
        "endLine": 136,
        "endChar": 37
      },
      "revId": "723110633ec5efa45b8d26cbdee459691c56d314",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "60a42889_f8ca2363",
        "filename": "modules/pacing/packet_router.cc",
        "patchSetId": 2
      },
      "lineNbr": 136,
      "author": {
        "id": 5019
      },
      "writtenOn": "2017-12-01T13:09:27Z",
      "side": 1,
      "message": "I do want to put it into own class, but prefer to do it in separate CL (it has different complications)\n\nperformance it not that critical for these sequence numbers, so prefer to use default (stricter) memory order to make it more readable.",
      "parentUuid": "fd8cffde_b9a03dfd",
      "range": {
        "startLine": 136,
        "startChar": 36,
        "endLine": 136,
        "endChar": 37
      },
      "revId": "723110633ec5efa45b8d26cbdee459691c56d314",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7401e08b_d3b0db5a",
        "filename": "modules/pacing/packet_router.cc",
        "patchSetId": 2
      },
      "lineNbr": 136,
      "author": {
        "id": 5234
      },
      "writtenOn": "2017-12-01T14:16:18Z",
      "side": 1,
      "message": "Ack. Consider what memory order to use when you get to move it to its own class.",
      "parentUuid": "60a42889_f8ca2363",
      "range": {
        "startLine": 136,
        "startChar": 36,
        "endLine": 136,
        "endChar": 37
      },
      "revId": "723110633ec5efa45b8d26cbdee459691c56d314",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "194ea0d6_c0f2bcb2",
        "filename": "modules/pacing/packet_router.cc",
        "patchSetId": 2
      },
      "lineNbr": 136,
      "author": {
        "id": 5126
      },
      "writtenOn": "2017-12-06T11:42:07Z",
      "side": 1,
      "message": "I would argue that choosing a too strict memory ordering is bad too (although obviously not as bad as choosing one that\u0027s too lenient), since the memory ordering choice documents the requirements that the author considered.\n\nSuggestion: Wrap the atomic variable and its operations in a small class (local to this file, if possible), and document in detail what it does and how it behaves (in all maybe a couple of sentences). Given such documentation, it\u0027ll probably be easy to choose the right memory ordering, and if not, note in the implementation that you may be using a memory ordering that\u0027s stricter than necessary.",
      "parentUuid": "7401e08b_d3b0db5a",
      "range": {
        "startLine": 136,
        "startChar": 36,
        "endLine": 136,
        "endChar": 37
      },
      "revId": "723110633ec5efa45b8d26cbdee459691c56d314",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d550be73_a7d2f201",
        "filename": "modules/pacing/packet_router_unittest.cc",
        "patchSetId": 2
      },
      "lineNbr": 343,
      "author": {
        "id": 5234
      },
      "writtenOn": "2017-12-01T12:55:55Z",
      "side": 1,
      "message": "Does the thread stop imply needed memory barriers to make the stores to received[index] visible?",
      "range": {
        "startLine": 343,
        "startChar": 16,
        "endLine": 343,
        "endChar": 20
      },
      "revId": "723110633ec5efa45b8d26cbdee459691c56d314",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8555b920_aeeb3c5f",
        "filename": "modules/pacing/packet_router_unittest.cc",
        "patchSetId": 2
      },
      "lineNbr": 343,
      "author": {
        "id": 5019
      },
      "writtenOn": "2017-12-01T13:09:27Z",
      "side": 1,
      "message": "test would fail otherwise.",
      "parentUuid": "d550be73_a7d2f201",
      "range": {
        "startLine": 343,
        "startChar": 16,
        "endLine": 343,
        "endChar": 20
      },
      "revId": "723110633ec5efa45b8d26cbdee459691c56d314",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "942a473d_0ab9dcc1",
        "filename": "modules/pacing/packet_router_unittest.cc",
        "patchSetId": 2
      },
      "lineNbr": 343,
      "author": {
        "id": 5234
      },
      "writtenOn": "2017-12-01T14:16:18Z",
      "side": 1,
      "message": "I\u0027m curious if it\u0027s guaranteed by the spec. I don\u0027t know, but I would expect that pthread_join and the like imply memory synchronization so that one can rely on the terminated thread\u0027s stores.",
      "parentUuid": "8555b920_aeeb3c5f",
      "range": {
        "startLine": 343,
        "startChar": 16,
        "endLine": 343,
        "endChar": 20
      },
      "revId": "723110633ec5efa45b8d26cbdee459691c56d314",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    }
  ]
}