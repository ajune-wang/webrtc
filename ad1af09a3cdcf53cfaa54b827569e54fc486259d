{
  "comments": [
    {
      "key": {
        "uuid": "a485b241_9616e969",
        "filename": "rtc_base/numerics/sequence_number_util.h",
        "patchSetId": 1
      },
      "lineNbr": 99,
      "author": {
        "id": 5527
      },
      "writtenOn": "2019-02-20T15:06:07Z",
      "side": 1,
      "message": "This is true for values that wraps at powers of 2, but not true otherwise.\n\nMaybe it\u0027s better if I change the SeqNumUnwrapper to return int64_t instead, then we can have 0 as a default start value.",
      "range": {
        "startLine": 97,
        "startChar": 68,
        "endLine": 99,
        "endChar": 53
      },
      "revId": "ad1af09a3cdcf53cfaa54b827569e54fc486259d",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2b728000_f36272b7",
        "filename": "rtc_base/numerics/sequence_number_util.h",
        "patchSetId": 1
      },
      "lineNbr": 99,
      "author": {
        "id": 5117
      },
      "writtenOn": "2019-02-20T15:30:30Z",
      "side": 1,
      "message": "Do we even have any wrapping field which has a period not a power of 2.\n\nEither way, just make a default unwrapped value something like M*100, and in a constructor make last value |start_at % M|.",
      "parentUuid": "a485b241_9616e969",
      "range": {
        "startLine": 97,
        "startChar": 68,
        "endLine": 99,
        "endChar": 53
      },
      "revId": "ad1af09a3cdcf53cfaa54b827569e54fc486259d",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "27619143_7b2799a7",
        "filename": "rtc_base/numerics/sequence_number_util.h",
        "patchSetId": 1
      },
      "lineNbr": 99,
      "author": {
        "id": 7641
      },
      "writtenOn": "2019-02-25T14:30:20Z",
      "side": 1,
      "message": "As far as I can see, there are no uses of this class for M !\u003d 2^n.\n\nWhat do you think of the following pragmatic approach.\n\n1. Add a Wrap function that would return the least significant bits. \n2. Include a static assert in this function so that it cannot be called unless M is a power of 2. Add a TODO to implement support for M !\u003d 2^n. This could be done by an alternative implementation that is something like (unwrapped - starting_value) % M.",
      "parentUuid": "2b728000_f36272b7",
      "range": {
        "startLine": 97,
        "startChar": 68,
        "endLine": 99,
        "endChar": 53
      },
      "revId": "ad1af09a3cdcf53cfaa54b827569e54fc486259d",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "79de95b6_0c293038",
        "filename": "rtc_base/numerics/sequence_number_util.h",
        "patchSetId": 1
      },
      "lineNbr": 99,
      "author": {
        "id": 5117
      },
      "writtenOn": "2019-02-25T15:07:08Z",
      "side": 1,
      "message": "I like that solution.",
      "parentUuid": "27619143_7b2799a7",
      "range": {
        "startLine": 97,
        "startChar": 68,
        "endLine": 99,
        "endChar": 53
      },
      "revId": "ad1af09a3cdcf53cfaa54b827569e54fc486259d",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d9bc0bc6_48251414",
        "filename": "rtc_base/numerics/sequence_number_util.h",
        "patchSetId": 1
      },
      "lineNbr": 99,
      "author": {
        "id": 7641
      },
      "writtenOn": "2019-03-04T10:27:25Z",
      "side": 1,
      "message": "I have now made the starting value dependent on if M is a power of 2 or not. I think that there are two cases where there can be a benefit of having a particular starting value, and that is if M is a power of 2 or if M is a power of 10. The code should handle both these cases.",
      "parentUuid": "79de95b6_0c293038",
      "range": {
        "startLine": 97,
        "startChar": 68,
        "endLine": 99,
        "endChar": 53
      },
      "revId": "ad1af09a3cdcf53cfaa54b827569e54fc486259d",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "eb105ef0_286c76be",
        "filename": "rtc_base/numerics/sequence_number_util.h",
        "patchSetId": 1
      },
      "lineNbr": 100,
      "author": {
        "id": 5117
      },
      "writtenOn": "2019-02-19T14:34:40Z",
      "side": 1,
      "message": "Isn\u0027t it a little too big? something like 1\u003c\u003c32 would be easier to debug also, as values wouldn\u0027t be so astronomical.",
      "range": {
        "startLine": 100,
        "startChar": 57,
        "endLine": 100,
        "endChar": 59
      },
      "revId": "ad1af09a3cdcf53cfaa54b827569e54fc486259d",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "68dee867_83f360dc",
        "filename": "rtc_base/numerics/sequence_number_util.h",
        "patchSetId": 1
      },
      "lineNbr": 100,
      "author": {
        "id": 7641
      },
      "writtenOn": "2019-03-04T10:27:25Z",
      "side": 1,
      "message": "As described in the comment, the idea to use this number is to get an unwrapper that can unwrap in both directions.",
      "parentUuid": "eb105ef0_286c76be",
      "range": {
        "startLine": 100,
        "startChar": 57,
        "endLine": 100,
        "endChar": 59
      },
      "revId": "ad1af09a3cdcf53cfaa54b827569e54fc486259d",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "acdbeab4_47f101fb",
        "filename": "rtc_base/numerics/sequence_number_util.h",
        "patchSetId": 1
      },
      "lineNbr": 104,
      "author": {
        "id": 5117
      },
      "writtenOn": "2019-02-19T14:34:40Z",
      "side": 1,
      "message": "Please take here least significant bits of start_at (static_cast\u003c\u003e) or add a comment that start_at should be multiple of periods.\n\nOtherwise some unlucky start_at and first values combination may result in an incorrect behavior.",
      "revId": "ad1af09a3cdcf53cfaa54b827569e54fc486259d",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "acd53214_02af4cf4",
        "filename": "rtc_base/numerics/sequence_number_util.h",
        "patchSetId": 1
      },
      "lineNbr": 104,
      "author": {
        "id": 5117
      },
      "writtenOn": "2019-02-20T15:30:30Z",
      "side": 1,
      "message": "update: make it\nlast_value_(start_at % (M ? M : std::numeric_limits\u003cT\u003e::max())",
      "parentUuid": "acdbeab4_47f101fb",
      "revId": "ad1af09a3cdcf53cfaa54b827569e54fc486259d",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "042641df_5728b9b8",
        "filename": "rtc_base/numerics/sequence_number_util.h",
        "patchSetId": 1
      },
      "lineNbr": 104,
      "author": {
        "id": 7641
      },
      "writtenOn": "2019-03-04T10:27:25Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "acd53214_02af4cf4",
      "revId": "ad1af09a3cdcf53cfaa54b827569e54fc486259d",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    }
  ]
}