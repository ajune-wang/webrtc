{
  "comments": [
    {
      "key": {
        "uuid": "0d0ab490_81e52411",
        "filename": "modules/video_coding/loss_notification_controller.cc",
        "patchSetId": 4
      },
      "lineNbr": 13,
      "author": {
        "id": 5147
      },
      "writtenOn": "2020-01-22T13:51:08Z",
      "side": 1,
      "message": "You\u0027ve already included this from the header file.",
      "range": {
        "startLine": 13,
        "startChar": 0,
        "endLine": 13,
        "endChar": 19
      },
      "revId": "d2a3c464c3bdf82540f47ce8a24e95836550658e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e29c0bad_3e5170e3",
        "filename": "modules/video_coding/loss_notification_controller.cc",
        "patchSetId": 4
      },
      "lineNbr": 13,
      "author": {
        "id": 5019
      },
      "writtenOn": "2020-01-22T18:13:50Z",
      "side": 1,
      "message": "The style rules changed half a year ago, now file should include all headers it needs, there is no longer exception for the \u0027related header\u0027.\n\nsection https://google.github.io/styleguide/cppguide.html#Names_and_Order_of_Includes\nwas changed in\nhttps://github.com/google/styleguide/commit/f0314ea7e0a483a10250f46f663d633e69ebd60e#diff-26120df7bca3279afbf749017c778545L494",
      "parentUuid": "0d0ab490_81e52411",
      "range": {
        "startLine": 13,
        "startChar": 0,
        "endLine": 13,
        "endChar": 19
      },
      "revId": "d2a3c464c3bdf82540f47ce8a24e95836550658e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "eb8ddac6_33a07e14",
        "filename": "modules/video_coding/loss_notification_controller.cc",
        "patchSetId": 4
      },
      "lineNbr": 15,
      "author": {
        "id": 5147
      },
      "writtenOn": "2020-01-22T13:51:08Z",
      "side": 1,
      "message": "Same.",
      "range": {
        "startLine": 15,
        "startChar": 0,
        "endLine": 15,
        "endChar": 27
      },
      "revId": "d2a3c464c3bdf82540f47ce8a24e95836550658e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "db7016eb_b98356a0",
        "filename": "modules/video_coding/loss_notification_controller.cc",
        "patchSetId": 4
      },
      "lineNbr": 15,
      "author": {
        "id": 5019
      },
      "writtenOn": "2020-01-22T18:13:50Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "eb8ddac6_33a07e14",
      "range": {
        "startLine": 15,
        "startChar": 0,
        "endLine": 15,
        "endChar": 27
      },
      "revId": "d2a3c464c3bdf82540f47ce8a24e95836550658e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "305c550a_ac330866",
        "filename": "modules/video_coding/loss_notification_controller.cc",
        "patchSetId": 4
      },
      "lineNbr": 52,
      "author": {
        "id": 5147
      },
      "writtenOn": "2020-01-16T13:31:46Z",
      "side": 1,
      "message": "The combination of this parameter\u0027s name and its type is unclear to me.",
      "range": {
        "startLine": 52,
        "startChar": 4,
        "endLine": 52,
        "endChar": 47
      },
      "revId": "d2a3c464c3bdf82540f47ce8a24e95836550658e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9f063826_dd66b4f7",
        "filename": "modules/video_coding/loss_notification_controller.cc",
        "patchSetId": 4
      },
      "lineNbr": 52,
      "author": {
        "id": 5019
      },
      "writtenOn": "2020-01-16T14:20:58Z",
      "side": 1,
      "message": "any suggestions how to make it better?\n\ne.g., does passing 4 parameters instead (where last 3 are only used when first_in_frame \u003d\u003d true) looks clearer?",
      "parentUuid": "305c550a_ac330866",
      "range": {
        "startLine": 52,
        "startChar": 4,
        "endLine": 52,
        "endChar": 47
      },
      "revId": "d2a3c464c3bdf82540f47ce8a24e95836550658e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cc6d8794_0c04d00d",
        "filename": "modules/video_coding/loss_notification_controller.cc",
        "patchSetId": 4
      },
      "lineNbr": 52,
      "author": {
        "id": 5147
      },
      "writtenOn": "2020-01-22T13:51:08Z",
      "side": 1,
      "message": "I think renaming the parameter will go a long way towards making things clearer. :-)",
      "parentUuid": "9f063826_dd66b4f7",
      "range": {
        "startLine": 52,
        "startChar": 4,
        "endLine": 52,
        "endChar": 47
      },
      "revId": "d2a3c464c3bdf82540f47ce8a24e95836550658e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b9349f35_04eac7bd",
        "filename": "modules/video_coding/loss_notification_controller.cc",
        "patchSetId": 4
      },
      "lineNbr": 52,
      "author": {
        "id": 5019
      },
      "writtenOn": "2020-01-22T18:13:50Z",
      "side": 1,
      "message": "renamed and added a comment as suggested in other comments.",
      "parentUuid": "cc6d8794_0c04d00d",
      "range": {
        "startLine": 52,
        "startChar": 4,
        "endLine": 52,
        "endChar": 47
      },
      "revId": "d2a3c464c3bdf82540f47ce8a24e95836550658e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ff37d6f8_ee045ebd",
        "filename": "modules/video_coding/loss_notification_controller.cc",
        "patchSetId": 4
      },
      "lineNbr": 73,
      "author": {
        "id": 5147
      },
      "writtenOn": "2020-01-22T13:51:08Z",
      "side": 1,
      "message": "1. `last_received_frame_id_` is an absl::optional. Can we draw attention to that fact by explicitly using .value()?\n2. You\u0027re reading the value before it\u0027s set for the first time. Should that not crash?",
      "range": {
        "startLine": 73,
        "startChar": 36,
        "endLine": 73,
        "endChar": 59
      },
      "revId": "d2a3c464c3bdf82540f47ce8a24e95836550658e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d9341258_a988143f",
        "filename": "modules/video_coding/loss_notification_controller.cc",
        "patchSetId": 4
      },
      "lineNbr": 73,
      "author": {
        "id": 5019
      },
      "writtenOn": "2020-01-22T18:13:50Z",
      "side": 1,
      "message": "1. why type of the last_received_frame_id_ important?\nThis code tries to say \"if new frame is earlier than the last received\".\nThat it naturally false if there was no earlier frames.\n\n2. I do not read the value, I compare T and optional\u003cT\u003e\nthat is well defined: absl::nullopt is smaller than any T.\n(see (26) in https://en.cppreference.com/w/cpp/utility/optional/operator_cmp that abseil adopts)",
      "parentUuid": "ff37d6f8_ee045ebd",
      "range": {
        "startLine": 73,
        "startChar": 36,
        "endLine": 73,
        "endChar": 59
      },
      "revId": "d2a3c464c3bdf82540f47ce8a24e95836550658e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2421b4ce_a4e48d88",
        "filename": "modules/video_coding/loss_notification_controller.h",
        "patchSetId": 4
      },
      "lineNbr": 39,
      "author": {
        "id": 5147
      },
      "writtenOn": "2020-01-22T13:51:08Z",
      "side": 1,
      "message": "Maybe rephrase this to:\n|frame_details| will non-null iff this is the first packet in the frame.\n?",
      "range": {
        "startLine": 38,
        "startChar": 0,
        "endLine": 39,
        "endChar": 14
      },
      "revId": "d2a3c464c3bdf82540f47ce8a24e95836550658e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7100f7ec_4e6ee701",
        "filename": "modules/video_coding/loss_notification_controller.h",
        "patchSetId": 4
      },
      "lineNbr": 39,
      "author": {
        "id": 5019
      },
      "writtenOn": "2020-01-22T18:13:50Z",
      "side": 1,
      "message": "Added such comment.\nalso, thanks to your suggestion realized there is no need to use optional\u003c\u003e here.\npassing raw pointer that can be nullptr is simpler in this case.",
      "parentUuid": "2421b4ce_a4e48d88",
      "range": {
        "startLine": 38,
        "startChar": 0,
        "endLine": 39,
        "endChar": 14
      },
      "revId": "d2a3c464c3bdf82540f47ce8a24e95836550658e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0af89f85_648514c6",
        "filename": "modules/video_coding/loss_notification_controller.h",
        "patchSetId": 4
      },
      "lineNbr": 41,
      "author": {
        "id": 5147
      },
      "writtenOn": "2020-01-16T13:31:46Z",
      "side": 1,
      "message": "What is the size at which we switch between passing by value and passing by const-ref?",
      "range": {
        "startLine": 41,
        "startChar": 24,
        "endLine": 41,
        "endChar": 52
      },
      "revId": "d2a3c464c3bdf82540f47ce8a24e95836550658e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b3ab673c_de731b78",
        "filename": "modules/video_coding/loss_notification_controller.h",
        "patchSetId": 4
      },
      "lineNbr": 41,
      "author": {
        "id": 5019
      },
      "writtenOn": "2020-01-16T14:20:58Z",
      "side": 1,
      "message": "I\u0027m not aware of such a guidance.\n\nI believe it is not about size, but how efficient copy is, how likely copy/move will be avoid altogether thanks to RVO. (and how much does that matter on the used code path)\n\nIn this case I trust compiler would optimize copy away since parameter is trivial.\n(even if it doesn\u0027t, copy looks cheap - no more than passing 4 parameters instead)",
      "parentUuid": "0af89f85_648514c6",
      "range": {
        "startLine": 41,
        "startChar": 24,
        "endLine": 41,
        "endChar": 52
      },
      "revId": "d2a3c464c3bdf82540f47ce8a24e95836550658e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "eef37fa9_7b6a08a8",
        "filename": "modules/video_coding/loss_notification_controller.h",
        "patchSetId": 4
      },
      "lineNbr": 41,
      "author": {
        "id": 5147
      },
      "writtenOn": "2020-01-22T13:51:08Z",
      "side": 1,
      "message": "Can we call this |frame_details|?",
      "range": {
        "startLine": 41,
        "startChar": 53,
        "endLine": 41,
        "endChar": 67
      },
      "revId": "d2a3c464c3bdf82540f47ce8a24e95836550658e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "74f49066_dcf74b7c",
        "filename": "modules/video_coding/loss_notification_controller.h",
        "patchSetId": 4
      },
      "lineNbr": 41,
      "author": {
        "id": 5019
      },
      "writtenOn": "2020-01-22T18:13:50Z",
      "side": 1,
      "message": "I went for shorter |frame| since not so sure what does \u0027_details\u0027 suffix adds in this case.",
      "parentUuid": "eef37fa9_7b6a08a8",
      "range": {
        "startLine": 41,
        "startChar": 53,
        "endLine": 41,
        "endChar": 67
      },
      "revId": "d2a3c464c3bdf82540f47ce8a24e95836550658e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "edcd676d_85a29f83",
        "filename": "modules/video_coding/loss_notification_controller_unittest.cc",
        "patchSetId": 4
      },
      "lineNbr": 30,
      "author": {
        "id": 5147
      },
      "writtenOn": "2020-01-16T13:31:46Z",
      "side": 1,
      "message": "Here it\u0027s clear - that |first_in_frame| is a bool makes things very clear. But I am not sure what it meant in the UUT.",
      "range": {
        "startLine": 30,
        "startChar": 2,
        "endLine": 30,
        "endChar": 22
      },
      "revId": "d2a3c464c3bdf82540f47ce8a24e95836550658e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4b7ea5af_8621c85c",
        "filename": "video/rtp_video_stream_receiver.cc",
        "patchSetId": 4
      },
      "lineNbr": 354,
      "author": {
        "id": 5147
      },
      "writtenOn": "2020-01-22T13:51:08Z",
      "side": 1,
      "message": "I am confused by this. Is the information in the following URL wrong?\nhttps://www.cs.columbia.edu/~hgs/rtp/faq.html#marker",
      "revId": "d2a3c464c3bdf82540f47ce8a24e95836550658e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "126d3d3a_eeb361f0",
        "filename": "video/rtp_video_stream_receiver.cc",
        "patchSetId": 4
      },
      "lineNbr": 354,
      "author": {
        "id": 5019
      },
      "writtenOn": "2020-01-22T18:13:50Z",
      "side": 1,
      "message": "that page talks about \u0027voice packets\u0027\n\nFor video packets marker bit indicates end of picture/temporal unit.\n(technically that is codec specific, but it is true for all codecs webrtc supports)\n\nas a consequence marker bit indicates end of frame (since frame can\u0027t span across multiple pictures)",
      "parentUuid": "4b7ea5af_8621c85c",
      "revId": "d2a3c464c3bdf82540f47ce8a24e95836550658e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ba08170e_8d2993e0",
        "filename": "video/rtp_video_stream_receiver.cc",
        "patchSetId": 4
      },
      "lineNbr": 392,
      "author": {
        "id": 5147
      },
      "writtenOn": "2020-01-22T13:51:08Z",
      "side": 1,
      "message": "Could you please explain this? (Not super-critical for the current CL, but it looks like you were the one to introduce this code.)\n1. How is the marker bit related to end of frame?\n2. What if we have a disagreement between that bit, and the GFD info? Should that not be treated as an error?",
      "range": {
        "startLine": 390,
        "startChar": 0,
        "endLine": 392,
        "endChar": 58
      },
      "revId": "d2a3c464c3bdf82540f47ce8a24e95836550658e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0eaee85c_b84bd6c1",
        "filename": "video/rtp_video_stream_receiver.cc",
        "patchSetId": 4
      },
      "lineNbr": 392,
      "author": {
        "id": 5019
      },
      "writtenOn": "2020-01-22T18:13:50Z",
      "side": 1,
      "message": "1. as mentioned in the previous comment. marker bit \u003d end of picture \u003d\u003e end of frame.\n2. yep, you right, well formed packet shouldn\u0027t have \"Marker() \u0026\u0026 !LastPacketInSubFrame()\" state. Currently code silently recover that error. I\u0027m not sure how to handle that error better (silently discard packet? - may be. Log a warning? - might trigger too many warning.)\n\n(btw \"!Marker() \u0026\u0026 LastPacketInSubFrame()\" is a valid state: indicates there are more frames in the same picture)\n\nEither way that issue doesn\u0027t look related to the current cl.\n(and may be not important enough to address.)",
      "parentUuid": "ba08170e_8d2993e0",
      "range": {
        "startLine": 390,
        "startChar": 0,
        "endLine": 392,
        "endChar": 58
      },
      "revId": "d2a3c464c3bdf82540f47ce8a24e95836550658e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dd6e4bb5_4a633ffc",
        "filename": "video/rtp_video_stream_receiver.cc",
        "patchSetId": 4
      },
      "lineNbr": 405,
      "author": {
        "id": 5147
      },
      "writtenOn": "2020-01-22T13:51:08Z",
      "side": 1,
      "message": "Not for this CL, but would be nice to have a ctor that takes all of these, to make it harder to forget to set some of the values.",
      "range": {
        "startLine": 403,
        "startChar": 0,
        "endLine": 405,
        "endChar": 77
      },
      "revId": "d2a3c464c3bdf82540f47ce8a24e95836550658e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1bcaf397_2858c3f8",
        "filename": "video/rtp_video_stream_receiver.cc",
        "patchSetId": 4
      },
      "lineNbr": 405,
      "author": {
        "id": 5019
      },
      "writtenOn": "2020-01-22T18:13:50Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "dd6e4bb5_4a633ffc",
      "range": {
        "startLine": 403,
        "startChar": 0,
        "endLine": 405,
        "endChar": 77
      },
      "revId": "d2a3c464c3bdf82540f47ce8a24e95836550658e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "258aff3b_1fc514e6",
        "filename": "video/rtp_video_stream_receiver.cc",
        "patchSetId": 4
      },
      "lineNbr": 407,
      "author": {
        "id": 5147
      },
      "writtenOn": "2020-01-22T13:51:08Z",
      "side": 1,
      "message": "Due diligence - are we sure about this part? What if we\u0027re parsing v00? We\u0027d be assuming nothing is discardable. Is that intentional?",
      "range": {
        "startLine": 407,
        "startChar": 50,
        "endLine": 407,
        "endChar": 66
      },
      "revId": "d2a3c464c3bdf82540f47ce8a24e95836550658e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7809252b_a1edf874",
        "filename": "video/rtp_video_stream_receiver.cc",
        "patchSetId": 4
      },
      "lineNbr": 407,
      "author": {
        "id": 5019
      },
      "writtenOn": "2020-01-22T18:13:50Z",
      "side": 1,
      "message": "that is consistent with current behavior (this was move from the RtpVideoStreamReceiver::OnAssembledFrame).\nit might be possible to do better.\n(e.g. discardable \u003d temporal_index \u003e 0), but I prefer to avoid mixing in behavior changes.",
      "parentUuid": "258aff3b_1fc514e6",
      "range": {
        "startLine": 407,
        "startChar": 50,
        "endLine": 407,
        "endChar": 66
      },
      "revId": "d2a3c464c3bdf82540f47ce8a24e95836550658e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b7025f6d_1a483041",
        "filename": "video/rtp_video_stream_receiver.cc",
        "patchSetId": 4
      },
      "lineNbr": 410,
      "author": {
        "id": 5147
      },
      "writtenOn": "2020-01-22T13:51:08Z",
      "side": 1,
      "message": "Does packet.generic_descriptor go through some sanitization when constructed to ensure that a buggy/malicious remote cannot induce a negative value here, e.g. by setting the FrameId() to 2 and the dependency diff to 3?\nPerhaps it would make sense to sanitize here, even if it\u0027s repeated, to have more robust code?",
      "range": {
        "startLine": 410,
        "startChar": 42,
        "endLine": 410,
        "endChar": 58
      },
      "revId": "d2a3c464c3bdf82540f47ce8a24e95836550658e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fe8ca220_0517ecf5",
        "filename": "video/rtp_video_stream_receiver.cc",
        "patchSetId": 4
      },
      "lineNbr": 410,
      "author": {
        "id": 5019
      },
      "writtenOn": "2020-01-22T18:13:50Z",
      "side": 1,
      "message": "no, it doesn\u0027t. Why negative referenced number whould be a problem?\n\n(it will point to a frame that can never be received, so this frame would never look decodable, but there are simpler ways to trigger same behavior....\nor may be it can. depends how frame_id unwrapper behave.\ne.g. delta frame with frame_id \u003d 2 and fdiff\u003d3 is received, then key frame with frame_id\u003d0xffff is received. That is valid.)",
      "parentUuid": "b7025f6d_1a483041",
      "range": {
        "startLine": 410,
        "startChar": 42,
        "endLine": 410,
        "endChar": 58
      },
      "revId": "d2a3c464c3bdf82540f47ce8a24e95836550658e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b7d29d03_7d91b6d4",
        "filename": "video/rtp_video_stream_receiver.cc",
        "patchSetId": 4
      },
      "lineNbr": 446,
      "author": {
        "id": 5147
      },
      "writtenOn": "2020-01-22T13:51:08Z",
      "side": 1,
      "message": "Could you add a ctor for FrameDetails that would allow you to emplace(arg0, arg1, ...) instead? Or do you think this would be less readable, because it would rely on ordering rather than naming the params?",
      "range": {
        "startLine": 446,
        "startChar": 8,
        "endLine": 446,
        "endChar": 32
      },
      "revId": "d2a3c464c3bdf82540f47ce8a24e95836550658e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b2c20a77_dc11a8aa",
        "filename": "video/rtp_video_stream_receiver.cc",
        "patchSetId": 4
      },
      "lineNbr": 446,
      "author": {
        "id": 5019
      },
      "writtenOn": "2020-01-22T18:13:50Z",
      "side": 1,
      "message": "yes, I think setting values using names is more readable than having multiple parameters,\nspecially since types here are too generic to give a hint of the parameter meaning.\n\nbugs where some values are errornesly unset I believe better catched with a unittest.",
      "parentUuid": "b7d29d03_7d91b6d4",
      "range": {
        "startLine": 446,
        "startChar": 8,
        "endLine": 446,
        "endChar": 32
      },
      "revId": "d2a3c464c3bdf82540f47ce8a24e95836550658e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0356cf50_801c477c",
        "filename": "video/rtp_video_stream_receiver.cc",
        "patchSetId": 4
      },
      "lineNbr": 448,
      "author": {
        "id": 5147
      },
      "writtenOn": "2020-01-22T13:51:08Z",
      "side": 1,
      "message": "1. Parentheses?\n2. IIRC, we didn\u0027t really care about the difference between an intra-frame and a key-frame here; the important things was the lack of dependencies. Perhaps we should still rely on that?",
      "range": {
        "startLine": 448,
        "startChar": 12,
        "endLine": 448,
        "endChar": 69
      },
      "revId": "d2a3c464c3bdf82540f47ce8a24e95836550658e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "221992bf_3e3ad1d1",
        "filename": "video/rtp_video_stream_receiver.cc",
        "patchSetId": 4
      },
      "lineNbr": 448,
      "author": {
        "id": 5019
      },
      "writtenOn": "2020-01-22T18:13:50Z",
      "side": 1,
      "message": "1. why? (expression looks simple enough, can order of operators be confusing here?)\n2. up to you,\nbut I would recommend to keep distinguishing between key frame and frame with no dependencies.\nfirst one resets all the state (LossNotificationController does decodable_frame_ids_.clear();)\nsecond one - doesn\u0027t and shouldn\u0027t. e.g. This dependencies are potentially valid:\nD\u003c--D\u003c--D\n|   |   |\nKF  D   D\n--time--\u003e\n\nyou right that GFDv0 can\u0027t see the difference between key frame and intra frame,\nbut GFDv2 - can.",
      "parentUuid": "0356cf50_801c477c",
      "range": {
        "startLine": 448,
        "startChar": 12,
        "endLine": 448,
        "endChar": 69
      },
      "revId": "d2a3c464c3bdf82540f47ce8a24e95836550658e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    }
  ]
}