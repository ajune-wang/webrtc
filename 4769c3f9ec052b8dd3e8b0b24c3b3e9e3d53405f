{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "7d1572cd_e25c9132",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 5634
      },
      "writtenOn": "2022-07-05T13:47:33Z",
      "side": 1,
      "message": "Can you add a test?\n\nUse ScopedFieldTrial to ensure the test runs with the right value of the FT flag.\n\nAlso note the policy for field trials:\n\nhttps://source.chromium.org/chromium/chromium/src/+/main:third_party/webrtc/g3doc/field-trials.md;l\u003d1?q\u003dpolicy%20field%20trial%20file:md%20\u0026ss\u003dchromium\n\nwe\u0027re trying to reduce the proliferation of field trials by at least ensuring that we have them documented.\n",
      "revId": "4769c3f9ec052b8dd3e8b0b24c3b3e9e3d53405f",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f99fcdcb_b44801bc",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 7755
      },
      "writtenOn": "2022-07-05T14:26:15Z",
      "side": 1,
      "message": "Field trials are still a very convenient way to guard things in chrome that should not be enabled by default (see WebRTCFakeNetwork/ in issue 14238 or the raw rtp dump). Shall I propose text for the policy for debugging/testing-only trials?\n\ntest: though to test, like the NullVideoDecoder the black one isn\u0027t exposed as a public symbol.",
      "parentUuid": "7d1572cd_e25c9132",
      "revId": "4769c3f9ec052b8dd3e8b0b24c3b3e9e3d53405f",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "23850d57_b286b770",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 5634
      },
      "writtenOn": "2022-07-05T14:32:06Z",
      "side": 1,
      "message": "The test would be something like:\n- ScopedFieldTrial(\"flag/enabled\")\n- Decode a (non-black) frame (or 2, to be fancy)\n- Check that it has the right size\n- Check that it\u0027s black\n\nThen you know that the black frame decoder is a) invokable, and b) doesn\u0027t crash.",
      "parentUuid": "f99fcdcb_b44801bc",
      "revId": "4769c3f9ec052b8dd3e8b0b24c3b3e9e3d53405f",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "75dca148_8710a493",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 7755
      },
      "writtenOn": "2022-07-06T07:09:41Z",
      "side": 1,
      "message": "yes but that would require putting it into a .h file (where would I put it?) and mind you, the video decoder itself doesn\u0027t have a test. The most tricky part would be \"check that it is black\" for which there is no method in the YUV buffer.\n\n(but at least I could do a death test for crashing when width/height is not set by the depacketizer)",
      "parentUuid": "23850d57_b286b770",
      "revId": "4769c3f9ec052b8dd3e8b0b24c3b3e9e3d53405f",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f8ed428c_367fce6a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 7755
      },
      "writtenOn": "2022-07-07T14:20:10Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "75dca148_8710a493",
      "revId": "4769c3f9ec052b8dd3e8b0b24c3b3e9e3d53405f",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    }
  ]
}