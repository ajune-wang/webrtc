{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "42a8d394_4a9a28af",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 15
      },
      "lineNbr": 0,
      "author": {
        "id": 8046
      },
      "writtenOn": "2022-12-06T09:58:16Z",
      "side": 1,
      "message": "I unfortunately have no experience with PipeWire and camera, but I would suggest looking into:\n1) https://github.com/wtay/obs-studio/blob/pipewire-unified-dev/plugins/linux-pipewire/camera-portal.c\n2) https://github.com/wtay/obs-studio/blob/pipewire-unified-dev/plugins/linux-pipewire/pipewire-stream-video-async.c\n\nThis is an implementation of camera support from Wim Taymans (author of PipeWire) so I would consider this as a referencing implementation. In case you want to double-check some of the stuff you are doing.",
      "revId": "92e5bd2cfa3d2ec34c309ded5e363f87cfb9b9a0",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a5b390b3_23611c41",
        "filename": "modules/video_capture/linux/device_info_pipewire.cc",
        "patchSetId": 15
      },
      "lineNbr": 35,
      "author": {
        "id": 8046
      },
      "writtenOn": "2022-12-01T10:45:33Z",
      "side": 1,
      "message": "Shouldn\u0027t this at least check if there are any devices and return `-1` in case of none, similar to v4l2?",
      "revId": "92e5bd2cfa3d2ec34c309ded5e363f87cfb9b9a0",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d7774825_25dee3ed",
        "filename": "modules/video_capture/linux/device_info_pipewire.cc",
        "patchSetId": 15
      },
      "lineNbr": 35,
      "author": {
        "id": 9816
      },
      "writtenOn": "2022-12-06T11:57:18Z",
      "side": 1,
      "message": "I just copied that from the V4L2 implementation. I don\u0027t think it is actually called on Linux.",
      "parentUuid": "a5b390b3_23611c41",
      "revId": "92e5bd2cfa3d2ec34c309ded5e363f87cfb9b9a0",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d2e12053_4307ffe1",
        "filename": "modules/video_capture/linux/device_info_pipewire.cc",
        "patchSetId": 15
      },
      "lineNbr": 35,
      "author": {
        "id": 8046
      },
      "writtenOn": "2022-12-06T12:24:17Z",
      "side": 1,
      "message": "It\u0027s definitely in V4L2 implementation.\n\nSee https://source.chromium.org/chromium/chromium/src/+/main:third_party/webrtc/modules/video_capture/linux/video_capture_v4l2.cc;l\u003d81",
      "parentUuid": "d7774825_25dee3ed",
      "revId": "92e5bd2cfa3d2ec34c309ded5e363f87cfb9b9a0",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e934dd38_5f396432",
        "filename": "modules/video_capture/linux/device_info_pipewire.cc",
        "patchSetId": 15
      },
      "lineNbr": 35,
      "author": {
        "id": 9816
      },
      "writtenOn": "2022-12-06T15:53:54Z",
      "side": 1,
      "message": "This is `DeviceInfo*::Init` not `VideoCaptureModule*::Init`.\nSee https://source.chromium.org/chromium/chromium/src/+/main:third_party/webrtc/modules/video_capture/linux/device_info_v4l2.cc;l\u003d34",
      "parentUuid": "d2e12053_4307ffe1",
      "revId": "92e5bd2cfa3d2ec34c309ded5e363f87cfb9b9a0",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e0f18c83_5583d155",
        "filename": "modules/video_capture/linux/device_info_pipewire.cc",
        "patchSetId": 15
      },
      "lineNbr": 35,
      "author": {
        "id": 8046
      },
      "writtenOn": "2022-12-06T16:46:31Z",
      "side": 1,
      "message": "You are right, my mistake.",
      "parentUuid": "e934dd38_5f396432",
      "revId": "92e5bd2cfa3d2ec34c309ded5e363f87cfb9b9a0",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8c475781_0506cad3",
        "filename": "modules/video_capture/linux/pipewire_session.cc",
        "patchSetId": 15
      },
      "lineNbr": 60,
      "author": {
        "id": 8046
      },
      "writtenOn": "2022-12-06T09:58:16Z",
      "side": 1,
      "message": "Shouldn\u0027t this be called in `OnRegistryGlobal` callback?",
      "revId": "92e5bd2cfa3d2ec34c309ded5e363f87cfb9b9a0",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "59b4f4d4_52ee5b0e",
        "filename": "modules/video_capture/linux/pipewire_session.cc",
        "patchSetId": 15
      },
      "lineNbr": 60,
      "author": {
        "id": 9816
      },
      "writtenOn": "2022-12-06T11:57:18Z",
      "side": 1,
      "message": "It\u0027s called there indirectly: The `PipewireNode` object is created there.",
      "parentUuid": "8c475781_0506cad3",
      "revId": "92e5bd2cfa3d2ec34c309ded5e363f87cfb9b9a0",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "357d39e6_0af88325",
        "filename": "modules/video_capture/linux/pipewire_session.cc",
        "patchSetId": 15
      },
      "lineNbr": 225,
      "author": {
        "id": 8046
      },
      "writtenOn": "2022-12-01T10:45:33Z",
      "side": 1,
      "message": "Should this also return false in case of `VideoCaptureOptions::Status::UNAVAILABLE`? E.g. the desktop capturer, when requests frames, can ask later again if there are not available yet and there is no error. I don\u0027t expect that when you for example set `UNAVAILABLE` in case it fails to dlopen PipeWire, that it is something that will change later.",
      "revId": "92e5bd2cfa3d2ec34c309ded5e363f87cfb9b9a0",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "67a8b611_58f1b9e2",
        "filename": "modules/video_capture/linux/pipewire_session.cc",
        "patchSetId": 15
      },
      "lineNbr": 225,
      "author": {
        "id": 9816
      },
      "writtenOn": "2022-12-06T11:57:18Z",
      "side": 1,
      "message": "I need to remove that function. It a leftover from earlier versions and is not used any more.",
      "parentUuid": "357d39e6_0af88325",
      "revId": "92e5bd2cfa3d2ec34c309ded5e363f87cfb9b9a0",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a99f4847_70d046ea",
        "filename": "modules/video_capture/linux/pipewire_session.cc",
        "patchSetId": 15
      },
      "lineNbr": 225,
      "author": {
        "id": 9816
      },
      "writtenOn": "2022-12-06T15:53:54Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "67a8b611_58f1b9e2",
      "revId": "92e5bd2cfa3d2ec34c309ded5e363f87cfb9b9a0",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c81d2e59_aac159c9",
        "filename": "modules/video_capture/linux/pipewire_session.cc",
        "patchSetId": 15
      },
      "lineNbr": 396,
      "author": {
        "id": 8046
      },
      "writtenOn": "2022-12-01T10:45:33Z",
      "side": 1,
      "message": "I would move the PipeWire lib initialization here, to have it together and possibly not initialized in case the portal request fails or is rejected.",
      "revId": "92e5bd2cfa3d2ec34c309ded5e363f87cfb9b9a0",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dd7ac138_0a215f7c",
        "filename": "modules/video_capture/linux/pipewire_session.cc",
        "patchSetId": 15
      },
      "lineNbr": 396,
      "author": {
        "id": 9816
      },
      "writtenOn": "2022-12-06T11:57:18Z",
      "side": 1,
      "message": "I did it early so we can fail faster (without any D-Bus calls) when libpipewire is not available, but I can put it here as well.",
      "parentUuid": "c81d2e59_aac159c9",
      "revId": "92e5bd2cfa3d2ec34c309ded5e363f87cfb9b9a0",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b1508444_2d4c1c82",
        "filename": "modules/video_capture/linux/pipewire_session.cc",
        "patchSetId": 15
      },
      "lineNbr": 396,
      "author": {
        "id": 9816
      },
      "writtenOn": "2022-12-06T15:53:54Z",
      "side": 1,
      "message": "I moved it right before `InitPipeWire()` because it has a different failure status, ok like this?",
      "parentUuid": "dd7ac138_0a215f7c",
      "revId": "92e5bd2cfa3d2ec34c309ded5e363f87cfb9b9a0",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9d42834e_378964e6",
        "filename": "modules/video_capture/linux/pipewire_session.cc",
        "patchSetId": 15
      },
      "lineNbr": 396,
      "author": {
        "id": 8046
      },
      "writtenOn": "2022-12-06T16:46:31Z",
      "side": 1,
      "message": "Yes, it\u0027s just a bit weird that we have two methods with basically same name (`InitPipeWire` and `InitializePipeWire`). Maybe call it `InitPipeWireLib`?",
      "parentUuid": "b1508444_2d4c1c82",
      "revId": "92e5bd2cfa3d2ec34c309ded5e363f87cfb9b9a0",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e50a6026_4910bb16",
        "filename": "modules/video_capture/linux/pipewire_session.cc",
        "patchSetId": 15
      },
      "lineNbr": 396,
      "author": {
        "id": 9816
      },
      "writtenOn": "2022-12-06T16:53:37Z",
      "side": 1,
      "message": "I\u0027d rather not change the existing one. What about `SetupPipeWire` for the new code here?",
      "parentUuid": "9d42834e_378964e6",
      "revId": "92e5bd2cfa3d2ec34c309ded5e363f87cfb9b9a0",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "218472b1_e19ff3f5",
        "filename": "modules/video_capture/linux/pipewire_session.cc",
        "patchSetId": 15
      },
      "lineNbr": 407,
      "author": {
        "id": 8046
      },
      "writtenOn": "2022-11-28T12:52:13Z",
      "side": 1,
      "message": "This is what caused us crashes in the capturer as this will cause the `fd` to be automatically closed by PipeWire. You should also close this `fd` yourself when you are cleaning all the DBus stuff.\nUse `pw_core_ \u003d pw_context_connect_fd(fcntl(fd, F_DUPFD_CLOEXEC), nullptr, 0);`\n\nFor reference: https://webrtc-review.googlesource.com/c/src/+/270421",
      "revId": "92e5bd2cfa3d2ec34c309ded5e363f87cfb9b9a0",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1acbf71a_3217d822",
        "filename": "modules/video_capture/linux/pipewire_session.cc",
        "patchSetId": 15
      },
      "lineNbr": 407,
      "author": {
        "id": 9816
      },
      "writtenOn": "2022-11-30T16:14:11Z",
      "side": 1,
      "message": "No. The desktop capture code the fd is closed explicitly as well. This does not happen here, so no duplication is necessary.",
      "parentUuid": "218472b1_e19ff3f5",
      "revId": "92e5bd2cfa3d2ec34c309ded5e363f87cfb9b9a0",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9a8a501c_e7a3bf52",
        "filename": "modules/video_capture/linux/pipewire_session.cc",
        "patchSetId": 15
      },
      "lineNbr": 407,
      "author": {
        "id": 8046
      },
      "writtenOn": "2022-11-30T17:12:12Z",
      "side": 1,
      "message": "I would still expect you close the fd yourself to have it under your control, but given the PipeWire documentation explicitly says it will close it, it should not be a problem.",
      "parentUuid": "1acbf71a_3217d822",
      "revId": "92e5bd2cfa3d2ec34c309ded5e363f87cfb9b9a0",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4af05a09_2e72e12f",
        "filename": "modules/video_capture/linux/pipewire_session.cc",
        "patchSetId": 15
      },
      "lineNbr": 443,
      "author": {
        "id": 8046
      },
      "writtenOn": "2022-11-28T12:52:13Z",
      "side": 1,
      "message": "Maybe also add `pw_thread_loop_wait(pw_main_loop_)` before stopping it to give it some time to finish?",
      "revId": "92e5bd2cfa3d2ec34c309ded5e363f87cfb9b9a0",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f8789540_70bd0f33",
        "filename": "modules/video_capture/linux/pipewire_session.cc",
        "patchSetId": 15
      },
      "lineNbr": 443,
      "author": {
        "id": 9816
      },
      "writtenOn": "2022-11-30T16:14:11Z",
      "side": 1,
      "message": "`pw_thread_loop_wait()` blocks until some other thread calls `pw_thread_loop_signal()`. Or what am I missing here?",
      "parentUuid": "4af05a09_2e72e12f",
      "revId": "92e5bd2cfa3d2ec34c309ded5e363f87cfb9b9a0",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5e9810dd_92fc3a71",
        "filename": "modules/video_capture/linux/pipewire_session.cc",
        "patchSetId": 15
      },
      "lineNbr": 443,
      "author": {
        "id": 8046
      },
      "writtenOn": "2022-11-30T17:12:12Z",
      "side": 1,
      "message": "Digging now into it, you are correct and I wonder why it works in our case. I think it\u0027s because we close the session and that gives us later OnCoreError callback which in return resumes this wait. This probably won\u0027t be happening in your case as the camera portal works differently.",
      "parentUuid": "f8789540_70bd0f33",
      "revId": "92e5bd2cfa3d2ec34c309ded5e363f87cfb9b9a0",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "900cdf26_3300e2cd",
        "filename": "modules/video_capture/linux/pipewire_session.cc",
        "patchSetId": 15
      },
      "lineNbr": 470,
      "author": {
        "id": 8046
      },
      "writtenOn": "2022-12-01T10:45:33Z",
      "side": 1,
      "message": "Unused variable. Will yell error during compilation.",
      "revId": "92e5bd2cfa3d2ec34c309ded5e363f87cfb9b9a0",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f8a550ef_9acb9de6",
        "filename": "modules/video_capture/linux/pipewire_session.cc",
        "patchSetId": 15
      },
      "lineNbr": 470,
      "author": {
        "id": 9816
      },
      "writtenOn": "2022-12-06T11:57:18Z",
      "side": 1,
      "message": "Right, I removed some other code here at some point but I forgot the variable. I\u0027ll remove it.",
      "parentUuid": "900cdf26_3300e2cd",
      "revId": "92e5bd2cfa3d2ec34c309ded5e363f87cfb9b9a0",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4744a0fc_c6c915f3",
        "filename": "modules/video_capture/linux/pipewire_session.cc",
        "patchSetId": 15
      },
      "lineNbr": 470,
      "author": {
        "id": 9816
      },
      "writtenOn": "2022-12-06T15:53:54Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f8a550ef_9acb9de6",
      "revId": "92e5bd2cfa3d2ec34c309ded5e363f87cfb9b9a0",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7fd5c443_a5272907",
        "filename": "modules/video_capture/linux/pipewire_session.cc",
        "patchSetId": 15
      },
      "lineNbr": 481,
      "author": {
        "id": 8046
      },
      "writtenOn": "2022-11-28T12:52:13Z",
      "side": 1,
      "message": "It looks like you will end up calling Finish(Success) multiple times, for example from the `PipeWireSync()` call in `InitPipeWire()`, but also in callbacks (`OnRegistryGlobal` or `OnNodeInfo`). Is this really how it\u0027s supposed to work? I\u0027m just asking, I might be missing something and I definitely don\u0027t know how the camera API in WebRTC is supposed to work, but I would expect you make sure all nodes/cams are listed before calling finish.",
      "revId": "92e5bd2cfa3d2ec34c309ded5e363f87cfb9b9a0",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1358506c_4c918eb3",
        "filename": "modules/video_capture/linux/pipewire_session.cc",
        "patchSetId": 15
      },
      "lineNbr": 481,
      "author": {
        "id": 9816
      },
      "writtenOn": "2022-11-30T16:14:11Z",
      "side": 1,
      "message": "The important part is `seq \u003d\u003d that-\u003esync_seq_`:\n`PipeWireSync()` send a new sync event with a new sequence number.\nWe call `PipeWireSync()` whenever we request new data. So when a sync event comes back and the sequence data does not match, then we are still waiting for more data.\nWhen the sequence numbers match, then all requested data has arrived and enumeration is complete and Finish(Success) is called.",
      "parentUuid": "7fd5c443_a5272907",
      "revId": "92e5bd2cfa3d2ec34c309ded5e363f87cfb9b9a0",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "af8dff73_486e3060",
        "filename": "modules/video_capture/linux/pipewire_session.cc",
        "patchSetId": 15
      },
      "lineNbr": 494,
      "author": {
        "id": 8046
      },
      "writtenOn": "2022-12-01T10:45:33Z",
      "side": 1,
      "message": "absl::string_view?",
      "revId": "92e5bd2cfa3d2ec34c309ded5e363f87cfb9b9a0",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0553bf2e_15dd3e8c",
        "filename": "modules/video_capture/linux/pipewire_session.cc",
        "patchSetId": 15
      },
      "lineNbr": 494,
      "author": {
        "id": 9816
      },
      "writtenOn": "2022-12-06T11:57:18Z",
      "side": 1,
      "message": "I didn\u0027t know about that. I\u0027ll change it.",
      "parentUuid": "af8dff73_486e3060",
      "revId": "92e5bd2cfa3d2ec34c309ded5e363f87cfb9b9a0",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d12911e3_157d9b0b",
        "filename": "modules/video_capture/linux/pipewire_session.cc",
        "patchSetId": 15
      },
      "lineNbr": 494,
      "author": {
        "id": 9816
      },
      "writtenOn": "2022-12-06T15:53:54Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0553bf2e_15dd3e8c",
      "revId": "92e5bd2cfa3d2ec34c309ded5e363f87cfb9b9a0",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "55b3faa5_f2a4fa7f",
        "filename": "modules/video_capture/linux/pipewire_session.cc",
        "patchSetId": 15
      },
      "lineNbr": 517,
      "author": {
        "id": 8046
      },
      "writtenOn": "2022-12-01T10:45:33Z",
      "side": 1,
      "message": "Isn\u0027t the `Cleanup()` call redundant? I expect that in case of `Status::ERROR` or `Status::DENIED` it will end up closing the request anyway so the destructor will be called afterwards.",
      "revId": "92e5bd2cfa3d2ec34c309ded5e363f87cfb9b9a0",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "13378473_99bd4278",
        "filename": "modules/video_capture/linux/pipewire_session.cc",
        "patchSetId": 15
      },
      "lineNbr": 517,
      "author": {
        "id": 9816
      },
      "writtenOn": "2022-12-06T11:57:18Z",
      "side": 1,
      "message": "Hmm, good point. I\u0027ll check when the object is actually delete.",
      "parentUuid": "55b3faa5_f2a4fa7f",
      "revId": "92e5bd2cfa3d2ec34c309ded5e363f87cfb9b9a0",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "92c865b9_0cb83360",
        "filename": "modules/video_capture/linux/pipewire_session.cc",
        "patchSetId": 15
      },
      "lineNbr": 517,
      "author": {
        "id": 9816
      },
      "writtenOn": "2022-12-06T16:10:02Z",
      "side": 1,
      "message": "Forgot about that on in the last update. The Session is part of the new `VideoCaptureOptions` and those should be deleted on failure. And my WIP implementation in chromium does that.\n\nSo I\u0027ve removed the `Cleanup()` here.",
      "parentUuid": "13378473_99bd4278",
      "revId": "92e5bd2cfa3d2ec34c309ded5e363f87cfb9b9a0",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1863bbef_45ebdcec",
        "filename": "modules/video_capture/linux/video_capture_pipewire.cc",
        "patchSetId": 15
      },
      "lineNbr": 68,
      "author": {
        "id": 8046
      },
      "writtenOn": "2022-12-01T10:45:33Z",
      "side": 1,
      "message": "Can be static.",
      "revId": "92e5bd2cfa3d2ec34c309ded5e363f87cfb9b9a0",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1c3b2263_544ea520",
        "filename": "modules/video_capture/linux/video_capture_pipewire.cc",
        "patchSetId": 15
      },
      "lineNbr": 68,
      "author": {
        "id": 9816
      },
      "writtenOn": "2022-12-06T11:57:18Z",
      "side": 1,
      "message": "ack",
      "parentUuid": "1863bbef_45ebdcec",
      "revId": "92e5bd2cfa3d2ec34c309ded5e363f87cfb9b9a0",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "456ec627_c5291ada",
        "filename": "modules/video_capture/linux/video_capture_pipewire.cc",
        "patchSetId": 15
      },
      "lineNbr": 68,
      "author": {
        "id": 9816
      },
      "writtenOn": "2022-12-06T15:53:54Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1c3b2263_544ea520",
      "revId": "92e5bd2cfa3d2ec34c309ded5e363f87cfb9b9a0",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "393a0109_49c5d9e3",
        "filename": "modules/video_capture/linux/video_capture_pipewire.cc",
        "patchSetId": 15
      },
      "lineNbr": 120,
      "author": {
        "id": 8046
      },
      "writtenOn": "2022-12-01T10:45:33Z",
      "side": 1,
      "message": "Check if `stream_` was properly created?",
      "revId": "92e5bd2cfa3d2ec34c309ded5e363f87cfb9b9a0",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0003cea8_c9af86b6",
        "filename": "modules/video_capture/linux/video_capture_pipewire.cc",
        "patchSetId": 15
      },
      "lineNbr": 120,
      "author": {
        "id": 9816
      },
      "writtenOn": "2022-12-06T11:57:18Z",
      "side": 1,
      "message": "good point.",
      "parentUuid": "393a0109_49c5d9e3",
      "revId": "92e5bd2cfa3d2ec34c309ded5e363f87cfb9b9a0",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c3726532_7de5e1e6",
        "filename": "modules/video_capture/linux/video_capture_pipewire.cc",
        "patchSetId": 15
      },
      "lineNbr": 120,
      "author": {
        "id": 9816
      },
      "writtenOn": "2022-12-06T15:53:54Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0003cea8_c9af86b6",
      "revId": "92e5bd2cfa3d2ec34c309ded5e363f87cfb9b9a0",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c102085f_cecb1cfa",
        "filename": "modules/video_capture/linux/video_capture_pipewire.cc",
        "patchSetId": 15
      },
      "lineNbr": 143,
      "author": {
        "id": 8046
      },
      "writtenOn": "2022-12-01T10:45:33Z",
      "side": 1,
      "message": "This duplicates the `prefer_jpeg` case, in case if it\u0027s just about order, can you just push the `SPA_MEDIA_SUBTYPE_raw` directly at the correct position based on the condition?",
      "revId": "92e5bd2cfa3d2ec34c309ded5e363f87cfb9b9a0",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "085a3876_8cce29b3",
        "filename": "modules/video_capture/linux/video_capture_pipewire.cc",
        "patchSetId": 15
      },
      "lineNbr": 143,
      "author": {
        "id": 9816
      },
      "writtenOn": "2022-12-06T11:57:18Z",
      "side": 1,
      "message": "Sure. I was trying to avoid inserting something at the beginning of a vector but it\u0027s a very short vector of pointers, so it really doesn\u0027t matter here.",
      "parentUuid": "c102085f_cecb1cfa",
      "revId": "92e5bd2cfa3d2ec34c309ded5e363f87cfb9b9a0",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0aed55a4_cce7e867",
        "filename": "modules/video_capture/linux/video_capture_pipewire.cc",
        "patchSetId": 15
      },
      "lineNbr": 143,
      "author": {
        "id": 9816
      },
      "writtenOn": "2022-12-06T15:53:54Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "085a3876_8cce29b3",
      "revId": "92e5bd2cfa3d2ec34c309ded5e363f87cfb9b9a0",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5d44b5da_ff8fc7a2",
        "filename": "modules/video_capture/linux/video_capture_pipewire.cc",
        "patchSetId": 15
      },
      "lineNbr": 270,
      "author": {
        "id": 8046
      },
      "writtenOn": "2022-12-06T09:58:16Z",
      "side": 1,
      "message": "No support for SPA_META_VideoCrop? I can see this is going to be supported in OBS and we support it in PipeWire based desktop capturer.",
      "revId": "92e5bd2cfa3d2ec34c309ded5e363f87cfb9b9a0",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2780ccee_82e01f64",
        "filename": "modules/video_capture/linux/video_capture_pipewire.cc",
        "patchSetId": 15
      },
      "lineNbr": 270,
      "author": {
        "id": 9816
      },
      "writtenOn": "2022-12-06T11:57:18Z",
      "side": 1,
      "message": "The internal camera API in webrtc does not support cropping. And the v4l2 and libcamera plugins in pipewire don\u0027t support SPA_META_VideoCrop so it cannot be used anyways with devices provided by those plugins. So I don\u0027t think it makes sense to add support here.\nIt\u0027s different for screen sharing: I thinks it\u0027s used there to cut out individual windows from a entire screen.\nOr am I missing something here?",
      "parentUuid": "5d44b5da_ff8fc7a2",
      "revId": "92e5bd2cfa3d2ec34c309ded5e363f87cfb9b9a0",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "11dfad96_b2d3e7e0",
        "filename": "modules/video_capture/linux/video_capture_pipewire.cc",
        "patchSetId": 15
      },
      "lineNbr": 270,
      "author": {
        "id": 20124
      },
      "writtenOn": "2022-12-06T12:13:39Z",
      "side": 1,
      "message": "\u003e And the v4l2 and libcamera plugins in pipewire don\u0027t support SPA_META_VideoCrop so it cannot be used.\n\nThat\u0027s correct - for screen sharing it\u0027s AFAIK mainly used to implement resizable window sharing.\n\nWhat *is* supported now (in libcamera, v4l2 will probably follow) is `SPA_META_VideoTransform` (see https://gitlab.freedesktop.org/pipewire/pipewire/-/merge_requests/1455), which would be great to support here for both cameras and screen sharing.\nIn case of cameras it will be needed on some mobile devices such as phones, which often have their cameras rotated 90deg, requiring clients to rotate the buffers accordingly. For screen sharing it\u0027d allow to share pre-rotated buffers, which is only a minor performance optimization.",
      "parentUuid": "2780ccee_82e01f64",
      "revId": "92e5bd2cfa3d2ec34c309ded5e363f87cfb9b9a0",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "76784ee7_42118c70",
        "filename": "modules/video_capture/linux/video_capture_pipewire.cc",
        "patchSetId": 15
      },
      "lineNbr": 270,
      "author": {
        "id": 8046
      },
      "writtenOn": "2022-12-06T12:24:17Z",
      "side": 1,
      "message": "I can think of zooming, this is when video cropping can get used? But I don\u0027t know really, I just saw that the OBS implementation supports it.",
      "parentUuid": "11dfad96_b2d3e7e0",
      "revId": "92e5bd2cfa3d2ec34c309ded5e363f87cfb9b9a0",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e8093ce4_25a8ad6c",
        "filename": "modules/video_capture/linux/video_capture_pipewire.cc",
        "patchSetId": 15
      },
      "lineNbr": 270,
      "author": {
        "id": 20124
      },
      "writtenOn": "2022-12-06T12:30:59Z",
      "side": 1,
      "message": "It allows to fluidly resize shared windows without having to recreate buffers etc. \n\nIf you share windows in Mutter it will pick a big size for the buffers (usually screen size, apart from edge cases where a window is bigger than the/one screen) and then crop to the actual window size.",
      "parentUuid": "76784ee7_42118c70",
      "revId": "92e5bd2cfa3d2ec34c309ded5e363f87cfb9b9a0",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "83583e39_3fd14698",
        "filename": "modules/video_capture/linux/video_capture_pipewire.cc",
        "patchSetId": 15
      },
      "lineNbr": 270,
      "author": {
        "id": 8046
      },
      "writtenOn": "2022-12-06T12:41:13Z",
      "side": 1,
      "message": "Yes, I know what it gets used for in case of screen sharing and I implemented it for this exact case. I\u0027m here talking just about camera usage.",
      "parentUuid": "e8093ce4_25a8ad6c",
      "revId": "92e5bd2cfa3d2ec34c309ded5e363f87cfb9b9a0",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f02aaae9_e6fa5694",
        "filename": "modules/video_capture/linux/video_capture_pipewire.cc",
        "patchSetId": 15
      },
      "lineNbr": 270,
      "author": {
        "id": 9816
      },
      "writtenOn": "2022-12-06T15:53:54Z",
      "side": 1,
      "message": "The crop rectangle is provided by the source. I\u0027m not sure how that would help for zooming. And there is certainly no PipeWire camera implementation that make use of that.\n\n`SPA_META_VideoTransform` is not in any PipeWire release, so I don\u0027t have a version check that I could use in the implementation.\n\nCan we please start with a basic implementation first? We can add more features later on. I\u0027ve added support for rotation in the new API needed for chromium (https://webrtc-review.googlesource.com/c/src/+/264548), so it can be easily added later.",
      "parentUuid": "83583e39_3fd14698",
      "revId": "92e5bd2cfa3d2ec34c309ded5e363f87cfb9b9a0",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b088b4ad_c6942d70",
        "filename": "modules/video_capture/linux/video_capture_pipewire.cc",
        "patchSetId": 15
      },
      "lineNbr": 270,
      "author": {
        "id": 20124
      },
      "writtenOn": "2022-12-06T16:01:57Z",
      "side": 1,
      "message": "\u003e Can we please start with a basic implementation first?\n\nAbsolutely, this wasn\u0027t meant to be a blocker. Just wanted to make sure you know about it.\n\n\u003e Yes, I know what it gets used for in case of screen sharing and I implemented it for this exact case. I\u0027m here talking just about camera usage.\n\nUh right, sorry for the noise :/\nIIUC cropping *could* become useful in the future, but only in the other way around, i.e. if a zooming rect would be given to upstream (libcamera) in order to optimize certain algorithms for that. I\u0027d totally agree that it doesn\u0027t make sense in the moment.",
      "parentUuid": "f02aaae9_e6fa5694",
      "revId": "92e5bd2cfa3d2ec34c309ded5e363f87cfb9b9a0",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5df86b81_9f16db75",
        "filename": "modules/video_capture/linux/video_capture_pipewire.cc",
        "patchSetId": 15
      },
      "lineNbr": 270,
      "author": {
        "id": 9816
      },
      "writtenOn": "2022-12-06T16:10:02Z",
      "side": 1,
      "message": "\u003e \u003e Can we please start with a basic implementation first?\n\u003e \n\u003e Absolutely, this wasn\u0027t meant to be a blocker. Just wanted to make sure you know about it.\n\nI didn\u0027t know about it and it was good to talk about it. It got me thinking and I noticed that the new API (in the other CL) was incomplete. So thank you for that.",
      "parentUuid": "b088b4ad_c6942d70",
      "revId": "92e5bd2cfa3d2ec34c309ded5e363f87cfb9b9a0",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6d7f13f8_1131d573",
        "filename": "modules/video_capture/linux/video_capture_pipewire.cc",
        "patchSetId": 15
      },
      "lineNbr": 270,
      "author": {
        "id": 8046
      },
      "writtenOn": "2022-12-06T16:46:31Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5df86b81_9f16db75",
      "revId": "92e5bd2cfa3d2ec34c309ded5e363f87cfb9b9a0",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "645c37db_12196019",
        "filename": "modules/video_capture/linux/video_capture_pipewire.cc",
        "patchSetId": 15
      },
      "lineNbr": 313,
      "author": {
        "id": 8046
      },
      "writtenOn": "2022-11-28T12:52:13Z",
      "side": 1,
      "message": "This doesn\u0027t always give you the latest buffer if I\u0027m not mistaken.\n\nCheck what we have in the capturer: https://source.chromium.org/chromium/chromium/src/+/main:third_party/webrtc/modules/desktop_capture/linux/wayland/shared_screencast_stream.cc;l\u003d316",
      "revId": "92e5bd2cfa3d2ec34c309ded5e363f87cfb9b9a0",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "10e1ace7_6d8da46a",
        "filename": "modules/video_capture/linux/video_capture_pipewire.cc",
        "patchSetId": 15
      },
      "lineNbr": 313,
      "author": {
        "id": 9816
      },
      "writtenOn": "2022-11-30T16:14:11Z",
      "side": 1,
      "message": "You\u0027re dropping buffers if there is more than one buffer pending. I\u0027m not sure if that is the correct thing to do for cameras. v4l2 does not drop buffers either.",
      "parentUuid": "645c37db_12196019",
      "revId": "92e5bd2cfa3d2ec34c309ded5e363f87cfb9b9a0",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "de534c37_f4e2996c",
        "filename": "modules/video_capture/linux/video_capture_pipewire.cc",
        "patchSetId": 15
      },
      "lineNbr": 313,
      "author": {
        "id": 8046
      },
      "writtenOn": "2022-11-30T17:12:12Z",
      "side": 1,
      "message": "Right, but wouldn\u0027t that give you the most recent picture behind the camera? Let\u0027s say your are receiving frames faster than you are able to proccess, than won\u0027t your image be lagging and there will be delay? At least that\u0027s the usual behavior I see everywhere with screen sharing, but I might be wrong here.",
      "parentUuid": "10e1ace7_6d8da46a",
      "revId": "92e5bd2cfa3d2ec34c309ded5e363f87cfb9b9a0",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "046ba7d3_40d6cf95",
        "filename": "modules/video_capture/linux/video_capture_pipewire.cc",
        "patchSetId": 15
      },
      "lineNbr": 313,
      "author": {
        "id": 9816
      },
      "writtenOn": "2022-11-30T17:39:58Z",
      "side": 1,
      "message": "I think there is a difference between screen sharing and a camera. With screen sharing we have a high resolution and the framerate is best effort anyways. So just returning the latest buffer is a good idea.\n\nWith a Camera I would argue that smooth playback is more important than absolute minimum latency. And that means delivering all frames.",
      "parentUuid": "de534c37_f4e2996c",
      "revId": "92e5bd2cfa3d2ec34c309ded5e363f87cfb9b9a0",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2f51108b_b404556c",
        "filename": "modules/video_capture/linux/video_capture_pipewire.cc",
        "patchSetId": 15
      },
      "lineNbr": 313,
      "author": {
        "id": 8046
      },
      "writtenOn": "2022-11-30T17:52:09Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "046ba7d3_40d6cf95",
      "revId": "92e5bd2cfa3d2ec34c309ded5e363f87cfb9b9a0",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    }
  ]
}