{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "2a1f9559_d0831fb7",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 15079
      },
      "writtenOn": "2022-05-09T11:23:55Z",
      "side": 1,
      "message": "Hey Kári! Noticed this crash in our Crahlytics and thought I\u0027d send a patch. Can you please take a look?",
      "revId": "2f693c6e205625aee137fe55334caff1f95c14d7",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b3a2c73b_78685141",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5520
      },
      "writtenOn": "2022-05-09T12:16:47Z",
      "side": 1,
      "message": "Hi Saúl, thanks for the patch!\n\nI wonder if this is actually due to a race-condition where the captureSession is being reset or reconfigured on a different thread, and we end up calling `addInput` on a different capture session than `canAddInput`? I haven\u0027t looked closely, but this might be an explanation.\n\nAn easy way to verify would be to assign `_captureSession` to a local variable in the method instead, and see if the crashes disappear.\n\nIn general, we try very hard to avoid try/catch whenever possible and instead find the root cause of the exception to stop it happening in the first place. Of course, this isn\u0027t always possible, but I want us to eliminate all other possibilities first.\n",
      "revId": "2f693c6e205625aee137fe55334caff1f95c14d7",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2fda3504_3276d277",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 15079
      },
      "writtenOn": "2022-05-09T12:48:21Z",
      "side": 1,
      "message": "Good point, I asked myself the same :-) We are not calling that API directly, we just call `startCaptureWithDevice:format:fps:completionHandler:` and I see that it internally dispatches the call to the `RTCDispatcherTypeCaptureSession` queue.\n\nI don\u0027t see any obvious code paths in WebRTC leading to changes to `_captureSession` from multiple threads, that\u0027s why I suspect the docs might not be accurate.",
      "parentUuid": "b3a2c73b_78685141",
      "revId": "2f693c6e205625aee137fe55334caff1f95c14d7",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "722b6049_ff1060b5",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5520
      },
      "writtenOn": "2022-05-23T09:22:30Z",
      "side": 1,
      "message": "Apologies for the delayed response. I\u0027ve been looking into this, and we don\u0027t see these crashes in our internal products. We use a different capture component but it\u0027s doing the same canAddInput/addInput dance. That leads me to suspect that there might be a race here. \n\nI don\u0027t want to land a try/catch that hides a potential race condition, so I think we should look carefully at the root cause first.",
      "parentUuid": "2fda3504_3276d277",
      "revId": "2f693c6e205625aee137fe55334caff1f95c14d7",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "586516fd_3d8b0366",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 15079
      },
      "writtenOn": "2022-05-23T12:32:58Z",
      "side": 1,
      "message": "Agreed. Do you have any suggestions on where to start? I\u0027ll try and see if any other thread touches the capture section.",
      "parentUuid": "722b6049_ff1060b5",
      "revId": "2f693c6e205625aee137fe55334caff1f95c14d7",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "At least one maximum vote for label \u0027Code-Review\u0027 is required"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader AND -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1 AND -label:Code-Review\u003dMIN"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader AND -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Code-Review=MAX,user=non_uploader","label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1 AND -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1","label:Code-Review=MIN"]}
      },
      "patchSetCommitId": "2f693c6e205625aee137fe55334caff1f95c14d7",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforced_gerrit"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforcement-satisfied_gerrit"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "2f693c6e205625aee137fe55334caff1f95c14d7",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}