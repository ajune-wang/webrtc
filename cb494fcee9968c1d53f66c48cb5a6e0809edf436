{
  "comments": [
    {
      "key": {
        "uuid": "52b80cdd_cb835732",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 14,
      "author": {
        "id": 5126
      },
      "writtenOn": "2019-01-29T10:25:14Z",
      "side": 1,
      "message": "It depends on whether the object owns the state that\u0027s being returned, or if it just points to it. For example, *p may legitimately return different things at different times even if p is a const pointer (but not if it\u0027s a pointer to const).\n\nMy mental model is that a Clock object \"points\" to some source of time, not that it owns it. If Clock had a method to set the time, I would probably reconsider.\n\nWhat side effects are you referring to?",
      "revId": "cb494fcee9968c1d53f66c48cb5a6e0809edf436",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "999ed80e_7859eb9e",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 14,
      "author": {
        "id": 5234
      },
      "writtenOn": "2019-01-29T10:39:33Z",
      "side": 1,
      "message": "Quoting my comments on https://webrtc-review.googlesource.com/c/src/+/120344:\n\nIt\u0027s desirable (if not formally required) that calling a method on a const object twice produces the same result.\n\nIn particular, as one of the implementations of this interface (WindowsRealTimeClock) declares mutable member variables, see https://cs.chromium.org/chromium/src/third_party/webrtc/system_wrappers/source/clock.cc?rcl\u003d190713c7cd0fc02b95ccd94baae5f184d6529596\u0026l\u003d200",
      "parentUuid": "52b80cdd_cb835732",
      "revId": "cb494fcee9968c1d53f66c48cb5a6e0809edf436",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "83f51491_9d3d5b28",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 14,
      "author": {
        "id": 5126
      },
      "writtenOn": "2019-01-29T17:06:58Z",
      "side": 1,
      "message": "Ah. That code doesn\u0027t look pretty; who guarantees that we don\u0027t wrap twice between calls...?\n\nBut OK. Removing the const from most of Clock\u0027s methods seems like an OK way to solve this. Will you require Clock to be thread safe?",
      "parentUuid": "999ed80e_7859eb9e",
      "revId": "cb494fcee9968c1d53f66c48cb5a6e0809edf436",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "15b9762b_78f9dfb0",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 14,
      "author": {
        "id": 5531
      },
      "writtenOn": "2019-01-29T17:38:30Z",
      "side": 1,
      "message": "I haven\u0027t looked at thread safety concerns, but it seems like that should be enforced.",
      "parentUuid": "83f51491_9d3d5b28",
      "revId": "cb494fcee9968c1d53f66c48cb5a6e0809edf436",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7b2eec57_516754b8",
        "filename": "modules/video_coding/jitter_estimator.h",
        "patchSetId": 1
      },
      "lineNbr": 161,
      "author": {
        "id": 5234
      },
      "writtenOn": "2019-01-30T07:44:22Z",
      "side": 1,
      "message": "Can this be Clock* const clock_; ?",
      "range": {
        "startLine": 161,
        "startChar": 2,
        "endLine": 161,
        "endChar": 16
      },
      "revId": "cb494fcee9968c1d53f66c48cb5a6e0809edf436",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f45acc61_6f56fe5d",
        "filename": "modules/video_coding/jitter_estimator.h",
        "patchSetId": 1
      },
      "lineNbr": 161,
      "author": {
        "id": 5531
      },
      "writtenOn": "2019-01-30T10:24:35Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7b2eec57_516754b8",
      "range": {
        "startLine": 161,
        "startChar": 2,
        "endLine": 161,
        "endChar": 16
      },
      "revId": "cb494fcee9968c1d53f66c48cb5a6e0809edf436",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "425ff7ba_44dab58b",
        "filename": "test/scenario/quality_stats.h",
        "patchSetId": 1
      },
      "lineNbr": 94,
      "author": {
        "id": 5234
      },
      "writtenOn": "2019-01-30T07:44:22Z",
      "side": 1,
      "message": "Clock* const clock_; if possible.",
      "range": {
        "startLine": 94,
        "startChar": 2,
        "endLine": 94,
        "endChar": 16
      },
      "revId": "cb494fcee9968c1d53f66c48cb5a6e0809edf436",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "90ca87c3_dcd1772e",
        "filename": "test/scenario/quality_stats.h",
        "patchSetId": 1
      },
      "lineNbr": 94,
      "author": {
        "id": 5531
      },
      "writtenOn": "2019-01-30T10:24:35Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "425ff7ba_44dab58b",
      "range": {
        "startLine": 94,
        "startChar": 2,
        "endLine": 94,
        "endChar": 16
      },
      "revId": "cb494fcee9968c1d53f66c48cb5a6e0809edf436",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    }
  ]
}