{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "d8c316f4_1d948da4",
        "filename": "logging/rtc_event_log/events/rtc_event_bwe_update_delay_based.h",
        "patchSetId": 3
      },
      "lineNbr": 31,
      "author": {
        "id": 5531
      },
      "writtenOn": "2022-01-26T09:42:35Z",
      "side": 1,
      "message": "Would be nice with a comment explaining why we don\u0027t use a mapping instead of two explicit and verbose conversion functions. (I assume performance?)",
      "range": {
        "startLine": 31,
        "startChar": 2,
        "endLine": 31,
        "endChar": 41
      },
      "revId": "2f7e27a1832800e23e19fbf28bc45dc85a4c8ef3",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "46526654_6fe79110",
        "filename": "logging/rtc_event_log/events/rtc_event_bwe_update_delay_based.h",
        "patchSetId": 3
      },
      "lineNbr": 31,
      "author": {
        "id": 5150
      },
      "writtenOn": "2022-02-03T02:54:28Z",
      "side": 1,
      "message": "Yes. For example, gcc -O2 compiles the Encode function roughly into a range check;\n\nEncode(BandwidthUsage):\n        mov     rax, -1\n        cmp     edi, 3\n        ja      .L1\n        mov     edi, edi\n        mov     rax, QWORD PTR CSWTCH.11[0+rdi*8]\n.L1:\n        ret\n        \nIf the compiler is allowed to inline the code, it may do even more optimizations.\n \nAdded comment.",
      "parentUuid": "d8c316f4_1d948da4",
      "range": {
        "startLine": 31,
        "startChar": 2,
        "endLine": 31,
        "endChar": 41
      },
      "revId": "2f7e27a1832800e23e19fbf28bc45dc85a4c8ef3",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b84689ad_cef36a1a",
        "filename": "logging/rtc_event_log/events/rtc_event_bwe_update_delay_based.h",
        "patchSetId": 3
      },
      "lineNbr": 34,
      "author": {
        "id": 5531
      },
      "writtenOn": "2022-01-26T09:42:35Z",
      "side": 1,
      "message": "IMO better to inline this as to make it obvious that it won\u0027t be used in practice, now it looks like it\u0027s a valid option just like the ones above.",
      "range": {
        "startLine": 34,
        "startChar": 0,
        "endLine": 34,
        "endChar": 78
      },
      "revId": "2f7e27a1832800e23e19fbf28bc45dc85a4c8ef3",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7cf11cd0_81a37dbc",
        "filename": "logging/rtc_event_log/events/rtc_event_bwe_update_delay_based.h",
        "patchSetId": 3
      },
      "lineNbr": 34,
      "author": {
        "id": 5150
      },
      "writtenOn": "2022-02-03T02:54:28Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b84689ad_cef36a1a",
      "range": {
        "startLine": 34,
        "startChar": 0,
        "endLine": 34,
        "endChar": 78
      },
      "revId": "2f7e27a1832800e23e19fbf28bc45dc85a4c8ef3",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6fdc453f_d3d5b01e",
        "filename": "logging/rtc_event_log/events/rtc_event_field_encoding.h",
        "patchSetId": 3
      },
      "lineNbr": 107,
      "author": {
        "id": 5531
      },
      "writtenOn": "2022-01-26T09:42:35Z",
      "side": 1,
      "message": "EncodeRtcEventMember? Or if you think the extraction is important to tell about, ExtractAndEncode...",
      "range": {
        "startLine": 107,
        "startChar": 22,
        "endLine": 107,
        "endChar": 29
      },
      "revId": "2f7e27a1832800e23e19fbf28bc45dc85a4c8ef3",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "df9aa91b_3933cb06",
        "filename": "logging/rtc_event_log/events/rtc_event_field_encoding.h",
        "patchSetId": 3
      },
      "lineNbr": 107,
      "author": {
        "id": 5150
      },
      "writtenOn": "2022-02-03T02:54:28Z",
      "side": 1,
      "message": "This is a specialization (well, almost) so the name needs to match the other templates. Generally, these functions take a list of events and a member pointer, and extracts that member to a list.\n\nAnd I want to avoid the word \"encode\" since it may cause confusion with the encoding step that comes afterwards. The \"encoding\" that happens in this step is essentially just a static_cast to a uint64_t.",
      "parentUuid": "6fdc453f_d3d5b01e",
      "range": {
        "startLine": 107,
        "startChar": 22,
        "endLine": 107,
        "endChar": 29
      },
      "revId": "2f7e27a1832800e23e19fbf28bc45dc85a4c8ef3",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a71b15f5_e0c432ca",
        "filename": "logging/rtc_event_log/events/rtc_event_field_encoding.h",
        "patchSetId": 3
      },
      "lineNbr": 120,
      "author": {
        "id": 5531
      },
      "writtenOn": "2022-01-26T09:42:35Z",
      "side": 1,
      "message": "To make this more refactor safe, refer to the function name or better if it\u0027s possible to write it without a dependency.\n\nMaybe keep a comment before all of the functions that covers them all barring the special details for valueswithpositions?",
      "range": {
        "startLine": 120,
        "startChar": 3,
        "endLine": 120,
        "endChar": 16
      },
      "revId": "2f7e27a1832800e23e19fbf28bc45dc85a4c8ef3",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d5e86b88_e461c409",
        "filename": "logging/rtc_event_log/events/rtc_event_field_encoding.h",
        "patchSetId": 3
      },
      "lineNbr": 120,
      "author": {
        "id": 5150
      },
      "writtenOn": "2022-02-03T02:54:28Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a71b15f5_e0c432ca",
      "range": {
        "startLine": 120,
        "startChar": 3,
        "endLine": 120,
        "endChar": 16
      },
      "revId": "2f7e27a1832800e23e19fbf28bc45dc85a4c8ef3",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c2f94d99_b1f6fc1e",
        "filename": "logging/rtc_event_log/events/rtc_event_field_encoding.h",
        "patchSetId": 3
      },
      "lineNbr": 145,
      "author": {
        "id": 5531
      },
      "writtenOn": "2022-01-26T09:42:35Z",
      "side": 1,
      "message": "Same as above.",
      "range": {
        "startLine": 145,
        "startChar": 3,
        "endLine": 145,
        "endChar": 17
      },
      "revId": "2f7e27a1832800e23e19fbf28bc45dc85a4c8ef3",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "10de1524_6ce4cc41",
        "filename": "logging/rtc_event_log/events/rtc_event_field_encoding.h",
        "patchSetId": 3
      },
      "lineNbr": 145,
      "author": {
        "id": 5150
      },
      "writtenOn": "2022-02-03T02:54:28Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c2f94d99_b1f6fc1e",
      "range": {
        "startLine": 145,
        "startChar": 3,
        "endLine": 145,
        "endChar": 17
      },
      "revId": "2f7e27a1832800e23e19fbf28bc45dc85a4c8ef3",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8d52abd3_60c44813",
        "filename": "logging/rtc_event_log/events/rtc_event_field_encoding.h",
        "patchSetId": 3
      },
      "lineNbr": 162,
      "author": {
        "id": 5531
      },
      "writtenOn": "2022-01-26T09:42:35Z",
      "side": 1,
      "message": "Same as above.",
      "range": {
        "startLine": 162,
        "startChar": 3,
        "endLine": 162,
        "endChar": 16
      },
      "revId": "2f7e27a1832800e23e19fbf28bc45dc85a4c8ef3",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "08aadce9_828dfe9b",
        "filename": "logging/rtc_event_log/events/rtc_event_field_encoding.h",
        "patchSetId": 3
      },
      "lineNbr": 162,
      "author": {
        "id": 5150
      },
      "writtenOn": "2022-02-03T02:54:28Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "8d52abd3_60c44813",
      "range": {
        "startLine": 162,
        "startChar": 3,
        "endLine": 162,
        "endChar": 16
      },
      "revId": "2f7e27a1832800e23e19fbf28bc45dc85a4c8ef3",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cc184907_dc161797",
        "filename": "logging/rtc_event_log/events/rtc_event_field_extraction.h",
        "patchSetId": 3
      },
      "lineNbr": 59,
      "author": {
        "id": 5531
      },
      "writtenOn": "2022-01-26T09:42:35Z",
      "side": 1,
      "message": "Could you expand on this comment, this is hard to understand without full context.",
      "range": {
        "startLine": 59,
        "startChar": 0,
        "endLine": 59,
        "endChar": 61
      },
      "revId": "2f7e27a1832800e23e19fbf28bc45dc85a4c8ef3",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f5487a54_0a20ace9",
        "filename": "logging/rtc_event_log/events/rtc_event_field_extraction.h",
        "patchSetId": 3
      },
      "lineNbr": 59,
      "author": {
        "id": 5150
      },
      "writtenOn": "2022-02-03T02:54:28Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "cc184907_dc161797",
      "range": {
        "startLine": 59,
        "startChar": 0,
        "endLine": 59,
        "endChar": 61
      },
      "revId": "2f7e27a1832800e23e19fbf28bc45dc85a4c8ef3",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "24fea96a_6a963565",
        "filename": "logging/rtc_event_log/events/rtc_event_field_extraction.h",
        "patchSetId": 3
      },
      "lineNbr": 62,
      "author": {
        "id": 5531
      },
      "writtenOn": "2022-01-26T09:42:35Z",
      "side": 1,
      "message": "There\u0027s no better way to do this?",
      "range": {
        "startLine": 62,
        "startChar": 16,
        "endLine": 62,
        "endChar": 38
      },
      "revId": "2f7e27a1832800e23e19fbf28bc45dc85a4c8ef3",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5d6924a9_a0e55ec3",
        "filename": "logging/rtc_event_log/events/rtc_event_field_extraction.h",
        "patchSetId": 3
      },
      "lineNbr": 62,
      "author": {
        "id": 5150
      },
      "writtenOn": "2022-02-03T02:54:28Z",
      "side": 1,
      "message": "We would like a static_assert(false, ...), but we need to make the \u0027false\u0027 dependent on the type to prevent the assert from being evaluated before the template has been instantiated. Afaik, sizeof(T)!\u003dsizeof(T) is a fairly standard way to do this.\n\nAnother alternative is `sizeof(T) !\u003d 0` but this assumes that all types have size\u003e\u003d1.\nA third option is creating another dummy struct with a \u0027false\u0027 member\n`template\u003ctypename T\u003e struct Dummy : public std::false_type {};\nstatic_assert(Dummy\u003cT\u003e::value, ...)`",
      "parentUuid": "24fea96a_6a963565",
      "range": {
        "startLine": 62,
        "startChar": 16,
        "endLine": 62,
        "endChar": 38
      },
      "revId": "2f7e27a1832800e23e19fbf28bc45dc85a4c8ef3",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "445789d7_b0f3c0fa",
        "filename": "logging/rtc_event_log/events/rtc_event_field_extraction.h",
        "patchSetId": 3
      },
      "lineNbr": 62,
      "author": {
        "id": 5531
      },
      "writtenOn": "2022-02-08T16:22:57Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "5d6924a9_a0e55ec3",
      "range": {
        "startLine": 62,
        "startChar": 16,
        "endLine": 62,
        "endChar": 38
      },
      "revId": "2f7e27a1832800e23e19fbf28bc45dc85a4c8ef3",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b56a1fa7_00ee7368",
        "filename": "logging/rtc_event_log/events/rtc_event_field_extraction.h",
        "patchSetId": 3
      },
      "lineNbr": 63,
      "author": {
        "id": 5531
      },
      "writtenOn": "2022-01-26T09:42:35Z",
      "side": 1,
      "message": "This reads a bit confusing as an error message. Maybe describe the error instead, eg. \"Missing specialisation of RtcEventLogEnum for type\" and context in a comment nearby in the code?",
      "range": {
        "startLine": 63,
        "startChar": 17,
        "endLine": 63,
        "endChar": 62
      },
      "revId": "2f7e27a1832800e23e19fbf28bc45dc85a4c8ef3",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c96143cb_2a4e8ab9",
        "filename": "logging/rtc_event_log/events/rtc_event_field_extraction.h",
        "patchSetId": 3
      },
      "lineNbr": 63,
      "author": {
        "id": 5150
      },
      "writtenOn": "2022-02-03T02:54:28Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b56a1fa7_00ee7368",
      "range": {
        "startLine": 63,
        "startChar": 17,
        "endLine": 63,
        "endChar": 62
      },
      "revId": "2f7e27a1832800e23e19fbf28bc45dc85a4c8ef3",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b13b5433_8c6aa4a0",
        "filename": "logging/rtc_event_log/rtc_event_log_parser.cc",
        "patchSetId": 3
      },
      "lineNbr": 1436,
      "author": {
        "id": 5531
      },
      "writtenOn": "2022-01-26T09:42:35Z",
      "side": 1,
      "message": "They should not be sorted?",
      "range": {
        "startLine": 1436,
        "startChar": 8,
        "endLine": 1436,
        "endChar": 30
      },
      "revId": "2f7e27a1832800e23e19fbf28bc45dc85a4c8ef3",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "60beecbe_88eae7ea",
        "filename": "logging/rtc_event_log/rtc_event_log_parser.cc",
        "patchSetId": 3
      },
      "lineNbr": 1436,
      "author": {
        "id": 5150
      },
      "writtenOn": "2022-02-03T02:54:28Z",
      "side": 1,
      "message": "Possibly. My idea was to have label that helps you find all the places that need to be updated when adding a new event type. Wdyt?",
      "parentUuid": "b13b5433_8c6aa4a0",
      "range": {
        "startLine": 1436,
        "startChar": 8,
        "endLine": 1436,
        "endChar": 30
      },
      "revId": "2f7e27a1832800e23e19fbf28bc45dc85a4c8ef3",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1ebadce1_fe7e287e",
        "filename": "logging/rtc_event_log/rtc_event_log_parser.cc",
        "patchSetId": 3
      },
      "lineNbr": 1436,
      "author": {
        "id": 5531
      },
      "writtenOn": "2022-02-08T16:22:57Z",
      "side": 1,
      "message": "I don\u0027t think such a system would carry its own weight really. Doesn\u0027t take much for it to get out of date and more confusing that clarifying. Usually code search will be helpful enough anyway. Rather, trying to keep the number of places to change low is the way tio go IMO.",
      "parentUuid": "60beecbe_88eae7ea",
      "range": {
        "startLine": 1436,
        "startChar": 8,
        "endLine": 1436,
        "endChar": 30
      },
      "revId": "2f7e27a1832800e23e19fbf28bc45dc85a4c8ef3",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    }
  ]
}