{
  "comments": [
    {
      "key": {
        "uuid": "7750e932_49e6f266",
        "filename": "modules/pacing/paced_sender.cc",
        "patchSetId": 5
      },
      "lineNbr": 382,
      "author": {
        "id": 5531
      },
      "writtenOn": "2019-07-02T16:40:27Z",
      "side": 1,
      "message": "Why do we have to do this twice now? Previously we would only do it once, right?",
      "range": {
        "startLine": 382,
        "startChar": 6,
        "endLine": 382,
        "endChar": 20
      },
      "revId": "819336f433be97c7c855e89b5a8b940a285ce23b",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "34370904_2bb2db9b",
        "filename": "modules/pacing/paced_sender.cc",
        "patchSetId": 5
      },
      "lineNbr": 382,
      "author": {
        "id": 5524
      },
      "writtenOn": "2019-07-02T19:40:31Z",
      "side": 1,
      "message": "That\u0027s because previously TimeToSendPadding() would actually generate and immediately send padding packets.\nThe new GeneratePadding() will generate new padding packets and add them to the PacedSender queue, after which the pacer will need to actually send them out. This is done so that there will be a single way for RTP packets to be sent, plus it avoids some raciness where the pacer is potentially busy generating and sending padding packets while another thread is adding actual payload packets.",
      "parentUuid": "7750e932_49e6f266",
      "range": {
        "startLine": 382,
        "startChar": 6,
        "endLine": 382,
        "endChar": 20
      },
      "revId": "819336f433be97c7c855e89b5a8b940a285ce23b",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "249a5640_058cf493",
        "filename": "modules/pacing/paced_sender.cc",
        "patchSetId": 5
      },
      "lineNbr": 382,
      "author": {
        "id": 5531
      },
      "writtenOn": "2019-07-03T11:25:54Z",
      "side": 1,
      "message": "Could GeneratePadding() return the packets to PacedSender instead? That way it seems like we wouldn\u0027t have to exit the critscope in paced sender and we avoid one piece of circularity (PacedSender-\u003ePacketRouter-\u003eRtpRtcp-\u003eRtpSender-\u003ePacedSender) and one piece of hidden assumed side effect (PacedSender expects that a call to PacketRouter::GeneratePadding will in indirectly lead to PacedSender::EnqueuePacket being called).",
      "parentUuid": "34370904_2bb2db9b",
      "range": {
        "startLine": 382,
        "startChar": 6,
        "endLine": 382,
        "endChar": 20
      },
      "revId": "819336f433be97c7c855e89b5a8b940a285ce23b",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1a4c28cc_635ce41a",
        "filename": "modules/pacing/paced_sender.cc",
        "patchSetId": 5
      },
      "lineNbr": 382,
      "author": {
        "id": 5524
      },
      "writtenOn": "2019-07-05T10:21:43Z",
      "side": 1,
      "message": "We\u0027ll still have a lock order inversion problem, so must continue to release the lock until we can get rid of it.\nI have changed GeneratePadding() to return the padding packets though, agree that\u0027s cleaner.",
      "parentUuid": "249a5640_058cf493",
      "range": {
        "startLine": 382,
        "startChar": 6,
        "endLine": 382,
        "endChar": 20
      },
      "revId": "819336f433be97c7c855e89b5a8b940a285ce23b",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2592e285_6b4a9617",
        "filename": "modules/pacing/paced_sender.cc",
        "patchSetId": 5
      },
      "lineNbr": 440,
      "author": {
        "id": 5531
      },
      "writtenOn": "2019-07-02T16:40:27Z",
      "side": 1,
      "message": "It\u0027s not nice to have hidden exits of critical sections. Would it be possible to refactor in such a way that all explicit leaves and entries (non-scoped) are in Process()?",
      "range": {
        "startLine": 440,
        "startChar": 0,
        "endLine": 440,
        "endChar": 22
      },
      "revId": "819336f433be97c7c855e89b5a8b940a285ce23b",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "540c85da_15ae0498",
        "filename": "modules/pacing/paced_sender.cc",
        "patchSetId": 5
      },
      "lineNbr": 440,
      "author": {
        "id": 5524
      },
      "writtenOn": "2019-07-02T19:40:31Z",
      "side": 1,
      "message": "This leaving and re-taking the lock is ugly and should be removed anyway. In an upcoming CL I will split the logic of the PacedSender form the logic and ModuleProcessingThread that\u0027s driving it, so that most of the code can be re-used when a new TaskQueue-based implementation is added.\nCan we save that until then?",
      "parentUuid": "2592e285_6b4a9617",
      "range": {
        "startLine": 440,
        "startChar": 0,
        "endLine": 440,
        "endChar": 22
      },
      "revId": "819336f433be97c7c855e89b5a8b940a285ce23b",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fd36f590_c145c76d",
        "filename": "modules/pacing/paced_sender.cc",
        "patchSetId": 5
      },
      "lineNbr": 440,
      "author": {
        "id": 5531
      },
      "writtenOn": "2019-07-03T11:25:54Z",
      "side": 1,
      "message": "It should, but is made much worse if it\u0027s not obvious. We have had bugs caused by such this before. That caused me to spend some effort to ensure that we at least keep all the leaves and enters in the same function.\n\nNot that bugs caused by missing this tend to be flaky, making discovery and investigation particularly expensive.",
      "parentUuid": "540c85da_15ae0498",
      "range": {
        "startLine": 440,
        "startChar": 0,
        "endLine": 440,
        "endChar": 22
      },
      "revId": "819336f433be97c7c855e89b5a8b940a285ce23b",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e8e7cba6_65cf091d",
        "filename": "modules/pacing/paced_sender.cc",
        "patchSetId": 5
      },
      "lineNbr": 440,
      "author": {
        "id": 5524
      },
      "writtenOn": "2019-07-05T10:21:43Z",
      "side": 1,
      "message": "It\u0027s going to be quite tricky to avoid a helper method. Otherwise the loop will become quite incomprehensible.\nI\u0027ve made a change where all releasing of locks is scoped, I hope this will make things safer. wdyt?",
      "parentUuid": "fd36f590_c145c76d",
      "range": {
        "startLine": 440,
        "startChar": 0,
        "endLine": 440,
        "endChar": 22
      },
      "revId": "819336f433be97c7c855e89b5a8b940a285ce23b",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8454113c_ec9a95a3",
        "filename": "modules/pacing/paced_sender.cc",
        "patchSetId": 5
      },
      "lineNbr": 440,
      "author": {
        "id": 5531
      },
      "writtenOn": "2019-07-05T10:48:33Z",
      "side": 1,
      "message": "That doesn\u0027t help against hidden release, so I don\u0027t think it\u0027s worth it considering that it\u0027s a bit unconventional. \n\nCould the large method be split into smaller pieces with consistent lock level so the repeated parts doesn\u0027t have to be as much? Or maybe the call to generate padding could be moved to inside the loop, so we don\u0027t need the two calls?",
      "parentUuid": "e8e7cba6_65cf091d",
      "range": {
        "startLine": 440,
        "startChar": 0,
        "endLine": 440,
        "endChar": 22
      },
      "revId": "819336f433be97c7c855e89b5a8b940a285ce23b",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0a308024_cdfa2d38",
        "filename": "modules/pacing/paced_sender.cc",
        "patchSetId": 5
      },
      "lineNbr": 440,
      "author": {
        "id": 5524
      },
      "writtenOn": "2019-07-05T11:54:25Z",
      "side": 1,
      "message": "The new padding generation can be done within the loop. Adding the legacy one there will be quite messy.\nCan wait to clean this up... :/",
      "parentUuid": "8454113c_ec9a95a3",
      "range": {
        "startLine": 440,
        "startChar": 0,
        "endLine": 440,
        "endChar": 22
      },
      "revId": "819336f433be97c7c855e89b5a8b940a285ce23b",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "98de5c6a_d9fcfb5f",
        "filename": "modules/pacing/paced_sender.h",
        "patchSetId": 5
      },
      "lineNbr": 206,
      "author": {
        "id": 5531
      },
      "writtenOn": "2019-07-02T16:40:27Z",
      "side": 1,
      "message": "legacy_packet_reference_mode_?",
      "range": {
        "startLine": 206,
        "startChar": 13,
        "endLine": 206,
        "endChar": 37
      },
      "revId": "819336f433be97c7c855e89b5a8b940a285ce23b",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7732d87e_6464edb5",
        "filename": "modules/pacing/paced_sender.h",
        "patchSetId": 5
      },
      "lineNbr": 206,
      "author": {
        "id": 5524
      },
      "writtenOn": "2019-07-03T10:54:52Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "98de5c6a_d9fcfb5f",
      "range": {
        "startLine": 206,
        "startChar": 13,
        "endLine": 206,
        "endChar": 37
      },
      "revId": "819336f433be97c7c855e89b5a8b940a285ce23b",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "319549be_a48378b9",
        "filename": "modules/rtp_rtcp/source/rtp_sender.cc",
        "patchSetId": 5
      },
      "lineNbr": 512,
      "author": {
        "id": 5531
      },
      "writtenOn": "2019-07-02T16:40:27Z",
      "side": 1,
      "message": "This is becoming quite complex, do we really need all the complexity here?",
      "range": {
        "startLine": 511,
        "startChar": 0,
        "endLine": 512,
        "endChar": 37
      },
      "revId": "819336f433be97c7c855e89b5a8b940a285ce23b",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7eca2891_f6ffe7e1",
        "filename": "modules/rtp_rtcp/source/rtp_sender.cc",
        "patchSetId": 5
      },
      "lineNbr": 512,
      "author": {
        "id": 5524
      },
      "writtenOn": "2019-07-02T19:40:31Z",
      "side": 1,
      "message": "It\u0027s complex right now since we\u0027ll have three possible code paths: un-paced, legacy paced and the new paced one. Once I demonstrate that there are no regressions with the new path, I will remove the first two, significantly reducing the complexity.\nIf you\u0027re just talking about that if-statement, I can duplicate the retransmission rate checking code instead?",
      "parentUuid": "319549be_a48378b9",
      "range": {
        "startLine": 511,
        "startChar": 0,
        "endLine": 512,
        "endChar": 37
      },
      "revId": "819336f433be97c7c855e89b5a8b940a285ce23b",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f5c2633d_2809b46c",
        "filename": "modules/rtp_rtcp/source/rtp_sender.cc",
        "patchSetId": 5
      },
      "lineNbr": 512,
      "author": {
        "id": 5531
      },
      "writtenOn": "2019-07-03T11:25:54Z",
      "side": 1,
      "message": "Hmm, not sure I follow, are all combinations currently used? There\u0027s 2^3 \u003d 8 potential inputs to this expression, I\u0027m guessing that we only use a subset of those? Maybe that could be clarified by using DCHECK to ensure that we aren\u0027t using some unexpected combination, and then the condition itself could be simplified?\nMaybe it would help to add some intermediate variables like  no_pacing and legacy_pacing for use in the condition?",
      "parentUuid": "7eca2891_f6ffe7e1",
      "range": {
        "startLine": 511,
        "startChar": 0,
        "endLine": 512,
        "endChar": 37
      },
      "revId": "819336f433be97c7c855e89b5a8b940a285ce23b",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "16e8cf85_c2483787",
        "filename": "modules/rtp_rtcp/source/rtp_sender.cc",
        "patchSetId": 5
      },
      "lineNbr": 512,
      "author": {
        "id": 5524
      },
      "writtenOn": "2019-07-05T10:21:43Z",
      "side": 1,
      "message": "I split this up instead. Probably fine with some code duplication since we\u0027re going to clean this up soon anyway.",
      "parentUuid": "f5c2633d_2809b46c",
      "range": {
        "startLine": 511,
        "startChar": 0,
        "endLine": 512,
        "endChar": 37
      },
      "revId": "819336f433be97c7c855e89b5a8b940a285ce23b",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a986d620_55d0c057",
        "filename": "modules/rtp_rtcp/source/rtp_sender.cc",
        "patchSetId": 5
      },
      "lineNbr": 901,
      "author": {
        "id": 5531
      },
      "writtenOn": "2019-07-02T16:40:27Z",
      "side": 1,
      "message": "Won\u0027t this set the sequence number of all pacer packets to 0? Or possibly hardcode the ID to 0.\n\nEither way it\u0027d be appropriate to add the argument name: /*extension_id*/\u003d0",
      "range": {
        "startLine": 901,
        "startChar": 6,
        "endLine": 901,
        "endChar": 55
      },
      "revId": "819336f433be97c7c855e89b5a8b940a285ce23b",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "42e52b14_9c2d9ee4",
        "filename": "modules/rtp_rtcp/source/rtp_sender.cc",
        "patchSetId": 5
      },
      "lineNbr": 901,
      "author": {
        "id": 5524
      },
      "writtenOn": "2019-07-02T19:40:31Z",
      "side": 1,
      "message": "That\u0027s not the extension id. I just populated them with a twsn of 0 so that is marked as set, then PacketRouter can update it to the actual value. I first just tried setting and ignoring\nthe packet which don\u0027t have the extension registered and reserved, but that resulted in a\nbunch of warning logging.\n\nFiled https://webrtc-review.googlesource.com/c/src/+/144461 in order to avoid that.",
      "parentUuid": "a986d620_55d0c057",
      "range": {
        "startLine": 901,
        "startChar": 6,
        "endLine": 901,
        "endChar": 55
      },
      "revId": "819336f433be97c7c855e89b5a8b940a285ce23b",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cdfb730d_e6fc7721",
        "filename": "modules/rtp_rtcp/source/rtp_sender.cc",
        "patchSetId": 5
      },
      "lineNbr": 901,
      "author": {
        "id": 5524
      },
      "writtenOn": "2019-07-03T10:54:52Z",
      "side": 1,
      "message": "Fixed.",
      "parentUuid": "42e52b14_9c2d9ee4",
      "range": {
        "startLine": 901,
        "startChar": 6,
        "endLine": 901,
        "endChar": 55
      },
      "revId": "819336f433be97c7c855e89b5a8b940a285ce23b",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    }
  ]
}