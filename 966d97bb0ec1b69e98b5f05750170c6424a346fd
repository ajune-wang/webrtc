{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "d1e663df_ca7366f5",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 17,
      "author": {
        "id": 6092
      },
      "writtenOn": "2024-10-09T22:17:36Z",
      "side": 1,
      "message": "To use this Picker in Chrome Remote Desktop, we will need to report the real `SourceId` that is being captured.\n\nIf you need it to be constant, you could maybe clear the `allowsChangingSelectedContent` flag on the `SCContentSharingPickerConfiguration`?\n\nOtherwise, you could maybe call `OnSelection()` on the `DelegatedSourceListController` every time the `SourceId` changes - and then the consumer can get the new ID by calling `GetSourceList()`?\n\nThe selected screen ID is not documented in the SCK API, but Apple told us we can get it from the `display` attribute of the `SCContentFilter` property that\u0027s with the `SCContentSharingPicker`.\n\nI think this CL is fine for now, but we will eventually need to access the actual `SourceId` for Chrome Remote Desktop.\n\nFor now, I\u0027m not too concerned about the value of `allowsChangingSelectedContent`. We could always add a `DesktopCaptureOptions` setting for this later, if we need to change it?",
      "range": {
        "startLine": 15,
        "startChar": 10,
        "endLine": 17,
        "endChar": 53
      },
      "revId": "966d97bb0ec1b69e98b5f05750170c6424a346fd",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cd0b46ea_9f1e0df4",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 17,
      "author": {
        "id": 8178
      },
      "writtenOn": "2024-10-11T13:03:17Z",
      "side": 1,
      "message": "Note that `GetSourceList` was originally for enumerating all sources to let *the application pick* source with `SelectSource`. This doesn\u0027t make sense with the system picker, since the system picker lets the user change source at will. If `DelegatedSourceListController` is implemented it starts making sense since you can track source selection changes. But then Firefox would have to adapt:\n\nIn Firefox if two clients wants to capture the same source they will share one capturer as an optimization. That wouldn\u0027t work if the selected source can change under your feet, which is why I invented unique SourceIds. This was modeled on `BaseCapturerPipeWire` which does something similar.\n\nShould this change we can adapt, assuming that `GetDelegatedSourceListController` can be used as a check for when `GetSourceList` can be changed by the capturer.\n\nAlso note that the unique `SourceId` generation only kicks in when the system picker is enabled in `ScreenCapturerSck`. `GetSourceList` with the system picker disabled is still unimplemented.\n\nAnother issue with using `GetSourceList` and `DelegatedSourceListController` to expose the real captured source with the system picker, is what to do when the `SCContentFilter` contains more than a plain display. It is always tied to a display but can also contain a list of windows to include or exclude. You might want to introduce a mode through `DesktopCaptureOptions` or a dedicated factory function that exposes the captured display, and locks the picker to single displays only, or as you say, prevents changes with `allowsChangingSelectedContent`. Either option here should be fairly trivial to implement. Ideally `GetSourceList` should function consistently across modes, but it can only go so far I guess.",
      "parentUuid": "d1e663df_ca7366f5",
      "range": {
        "startLine": 15,
        "startChar": 10,
        "endLine": 17,
        "endChar": 53
      },
      "revId": "966d97bb0ec1b69e98b5f05750170c6424a346fd",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "52d4aa52_d7905221",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 17,
      "author": {
        "id": 6092
      },
      "writtenOn": "2024-10-12T00:36:28Z",
      "side": 1,
      "message": "`BaseCapturerPipeWire` is a bit weird, and is maybe not a good example to follow? My understanding is, that capturer itself creates the virtual display that it captures from?\n\nI don\u0027t think it was designed for capturing from real physical displays - it was written when we were implementing Wayland support for Chrome Remote Desktop. I don\u0027t know of anybody else using this code, and it is still very experimental.\n\nWe may change the way it works - I think something else should create the virtual display, and the Wayland capturer should be able to capture from it, or a real display. I have a feeling that the XDG Portal APIs are different for these cases, but I\u0027m no expert! ðŸ˜Š\n\nI\u0027m happy with any combination of DesktopCaptureOptions that lets CRD access the screen ID being captured, without breaking anything that Firefox is doing ðŸ˜Š",
      "parentUuid": "cd0b46ea_9f1e0df4",
      "range": {
        "startLine": 15,
        "startChar": 10,
        "endLine": 17,
        "endChar": 53
      },
      "revId": "966d97bb0ec1b69e98b5f05750170c6424a346fd",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6f6dc433_aa2b93f8",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 17,
      "author": {
        "id": 18474
      },
      "writtenOn": "2024-10-17T00:00:21Z",
      "side": 1,
      "message": "As you call out, the point of `DelegatedSourceListController` is because Wayland has a similar requirement that we go through a system picker rather than being able to call this directly. In that sense, I\u0027d say `BaseCapturerPipeWire` is likely *fine* to model from. I\u0027m not sure if we really track selection changes, so much as use this as a mechanism to help provide the UI a way to \"resummon\" the picker after the user gets the current preview. I *think* the contract with delegated picking is also that you expect to only see one source and you know that you can\u0027t change it (e.g. the `GetSourceList` behavior *is* different), based on what I\u0027ve heard from this API, I *do* think that pattern is likely the right one to follow. (I may be misremembering some guarantees and/or didn\u0027t document things, I can try to look into this more as well if you are unable to find/follow the references).\n\nThe other part that is potentially tricky with Chrome at least is that the capturer created during the picker is *not* the same as the capturer that is actually created to do the capturing, and so there is some restore logic, which requires using the system-level IDs where possible so that everything is talking in the same space (I *think* `BaseCapturerPipeWire` has some singleton object responsible for generating the IDs IIRC). I\u0027m not sure if that\u0027s possible today and/or what timeline we\u0027d have for wiring this up in Chrome (maybe we do things completely differently? I\u0027d need to dig in).\n\n`BaseCapturerPipeWire` is used for actually capturing windows/screens today and shipped and not experimental :).\n\nYou can see a wrapper of using this existing code here: https://source.chromium.org/chromium/chromium/src/+/main:chrome/browser/media/webrtc/delegated_source_list_capturer.cc",
      "parentUuid": "52d4aa52_d7905221",
      "range": {
        "startLine": 15,
        "startChar": 10,
        "endLine": 17,
        "endChar": 53
      },
      "revId": "966d97bb0ec1b69e98b5f05750170c6424a346fd",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0ff1ece9_52ced8a5",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 22,
      "author": {
        "id": 18474
      },
      "writtenOn": "2024-10-17T00:00:21Z",
      "side": 1,
      "message": "By and large this sounds like we\u0027re doing the same things that we used to do with the Wayland capturer before refactoring to the `DelegatedSourceListController` to give a little bit better hooks for integration.",
      "range": {
        "startLine": 21,
        "startChar": 0,
        "endLine": 22,
        "endChar": 8
      },
      "revId": "966d97bb0ec1b69e98b5f05750170c6424a346fd",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "41f12f96_a285a893",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 25,
      "author": {
        "id": 18474
      },
      "writtenOn": "2024-10-17T00:00:21Z",
      "side": 1,
      "message": "I believe this also interacts poorly with some of the existing code.",
      "range": {
        "startLine": 25,
        "startChar": 2,
        "endLine": 25,
        "endChar": 31
      },
      "revId": "966d97bb0ec1b69e98b5f05750170c6424a346fd",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4a17f134_d562a874",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 6092
      },
      "writtenOn": "2024-10-09T22:17:36Z",
      "side": 1,
      "message": "Thank you for doing this work, it\u0027s much appreciated! ðŸ˜Š",
      "revId": "966d97bb0ec1b69e98b5f05750170c6424a346fd",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d70ffabe_9338f6e5",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 18474
      },
      "writtenOn": "2024-10-17T00:00:21Z",
      "side": 1,
      "message": "Still working through this one but wanted to share some initial thoughts. I could be wrong, but from what I\u0027m recollecting being told about SckCapturer I *do* think it is fairly similar to the PipeWire capturerer with regards to `DelegatedSourceListController` usage. However, I *think* in Chrome, this class is currently only used by CRD, and we do SCK for Screens/windows differently? @kron would know better than I though.",
      "revId": "966d97bb0ec1b69e98b5f05750170c6424a346fd",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e3e0c41a_f20d4a72",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 7641
      },
      "writtenOn": "2024-10-17T11:16:25Z",
      "side": 1,
      "message": "Yes, that\u0027s correct, `getDisplayMedia` in Chrome will not use this code path.",
      "parentUuid": "d70ffabe_9338f6e5",
      "revId": "966d97bb0ec1b69e98b5f05750170c6424a346fd",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "94138ef6_0ba6956f",
        "filename": "modules/desktop_capture/desktop_capturer.cc",
        "patchSetId": 4
      },
      "lineNbr": 115,
      "author": {
        "id": 18474
      },
      "writtenOn": "2024-10-17T00:00:21Z",
      "side": 1,
      "message": "This actually looks like dead code to me in the Chromium project.... Is it used by Firefox?",
      "range": {
        "startLine": 115,
        "startChar": 50,
        "endLine": 115,
        "endChar": 71
      },
      "revId": "966d97bb0ec1b69e98b5f05750170c6424a346fd",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "53544dd9_43409a20",
        "filename": "modules/desktop_capture/desktop_capturer.cc",
        "patchSetId": 4
      },
      "lineNbr": 125,
      "author": {
        "id": 18474
      },
      "writtenOn": "2024-10-17T00:00:21Z",
      "side": 1,
      "message": "Presumably we do not have a way to restrict the SckCapturer to Desktop Screens or Windows?",
      "range": {
        "startLine": 125,
        "startChar": 13,
        "endLine": 125,
        "endChar": 37
      },
      "revId": "966d97bb0ec1b69e98b5f05750170c6424a346fd",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "61a1c638_86ec191d",
        "filename": "modules/desktop_capture/mac/screen_capturer_sck.mm",
        "patchSetId": 4
      },
      "lineNbr": 189,
      "author": {
        "id": 7641
      },
      "writtenOn": "2024-10-17T11:16:25Z",
      "side": 1,
      "message": "Shouldn\u0027t this call be conditioned on `capture_options_.allow_sck_system_picker()`?",
      "range": {
        "startLine": 189,
        "startChar": 2,
        "endLine": 189,
        "endChar": 43
      },
      "revId": "966d97bb0ec1b69e98b5f05750170c6424a346fd",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fbb0cf4b_97ed117c",
        "filename": "modules/desktop_capture/mac/screen_capturer_sck.mm",
        "patchSetId": 4
      },
      "lineNbr": 294,
      "author": {
        "id": 7641
      },
      "writtenOn": "2024-10-17T11:19:40Z",
      "side": 1,
      "message": "@tovep@google.com Can you take a look at this given that you worked on the integration of SCContentSharingPicker in Chrome? See also sck_picker_handle.mm.",
      "range": {
        "startLine": 294,
        "startChar": 0,
        "endLine": 294,
        "endChar": 41
      },
      "revId": "966d97bb0ec1b69e98b5f05750170c6424a346fd",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    }
  ]
}