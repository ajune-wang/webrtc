{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "2a0ad1e5_87d6862b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5634
      },
      "writtenOn": "2020-10-14T12:26:50Z",
      "side": 1,
      "message": "I think this refactoring is clean now.\nThe PeerConnectionFactory contains resources needed to create stuff. It will be deallocated when nobody wants to create stuff any more.\n\nThe ConnectionResources contains resources that are needed while a call is active. It will be deallocated when the last factory or PeerConnection that depends on it disappears.\n\nThis may change the lifetime of some objects; the last bug was that call_factory needed to survive until the end of the call(s); it\u0027s not just a creator object.",
      "revId": "b427d253c849f15521af8992d88f932856b34f90",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "61383cce_f91a7576",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5142
      },
      "writtenOn": "2020-10-14T12:54:21Z",
      "side": 1,
      "message": "LGTM. Questions and suggestions added, but nothing blocking landing",
      "revId": "b427d253c849f15521af8992d88f932856b34f90",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d02d3432_3e95329c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5234
      },
      "writtenOn": "2020-10-14T13:31:55Z",
      "side": 1,
      "message": "Nice! A couple of comments on const and thread synchronization.",
      "revId": "b427d253c849f15521af8992d88f932856b34f90",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d2ce90a7_8be0ac22",
        "filename": "pc/connection_context.cc",
        "patchSetId": 2
      },
      "lineNbr": 32,
      "author": {
        "id": 5508
      },
      "writtenOn": "2020-10-14T17:11:16Z",
      "side": 1,
      "message": "if you make network_thread_ const, you could set it with a helper method (and consolidate this and the next code blocks).\n\n\u003cin the initializer list\u003e\nnetwork_thread_(MaybeStartNewThread(dependencies.network_thread, \"pc_network_thread\", \u0026owned_network_thread_),",
      "revId": "b427d253c849f15521af8992d88f932856b34f90",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "615e8e82_44e47e7d",
        "filename": "pc/connection_context.cc",
        "patchSetId": 2
      },
      "lineNbr": 32,
      "author": {
        "id": 5634
      },
      "writtenOn": "2020-10-14T19:39:08Z",
      "side": 1,
      "message": "I\u0027ll take a stab at it..... it worked. Done!",
      "parentUuid": "d2ce90a7_8be0ac22",
      "revId": "b427d253c849f15521af8992d88f932856b34f90",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "09374afa_2c9b036d",
        "filename": "pc/connection_context.cc",
        "patchSetId": 2
      },
      "lineNbr": 46,
      "author": {
        "id": 5508
      },
      "writtenOn": "2020-10-14T17:11:16Z",
      "side": 1,
      "message": "similarly here with MaybeWrapCurrentThread().\n\nIdeally I\u0027d like to remove all of this magic since this always pulls in the thread wrappers etc even if the caller doesn\u0027t want/need it.",
      "revId": "b427d253c849f15521af8992d88f932856b34f90",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "06adf050_45da5315",
        "filename": "pc/connection_context.cc",
        "patchSetId": 2
      },
      "lineNbr": 46,
      "author": {
        "id": 5634
      },
      "writtenOn": "2020-10-14T19:39:08Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "09374afa_2c9b036d",
      "revId": "b427d253c849f15521af8992d88f932856b34f90",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "de39ef3d_e3de82b4",
        "filename": "pc/connection_context.cc",
        "patchSetId": 2
      },
      "lineNbr": 58,
      "author": {
        "id": 5142
      },
      "writtenOn": "2020-10-14T12:54:21Z",
      "side": 1,
      "message": "Nice :)",
      "revId": "b427d253c849f15521af8992d88f932856b34f90",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "537683f6_bc3a7581",
        "filename": "pc/connection_context.cc",
        "patchSetId": 2
      },
      "lineNbr": 83,
      "author": {
        "id": 5508
      },
      "writtenOn": "2020-10-14T17:11:16Z",
      "side": 1,
      "message": "thread check?",
      "revId": "b427d253c849f15521af8992d88f932856b34f90",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d0a5c5f2_43e279ed",
        "filename": "pc/connection_context.cc",
        "patchSetId": 2
      },
      "lineNbr": 83,
      "author": {
        "id": 5634
      },
      "writtenOn": "2020-10-14T19:39:08Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "537683f6_bc3a7581",
      "revId": "b427d253c849f15521af8992d88f932856b34f90",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "73e8fa54_50ea3bcb",
        "filename": "pc/connection_context.cc",
        "patchSetId": 2
      },
      "lineNbr": 109,
      "author": {
        "id": 5508
      },
      "writtenOn": "2020-10-14T17:11:16Z",
      "side": 1,
      "message": "return channel_manager_-\u003eInit();",
      "revId": "b427d253c849f15521af8992d88f932856b34f90",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a8195341_65c51ef3",
        "filename": "pc/connection_context.cc",
        "patchSetId": 2
      },
      "lineNbr": 109,
      "author": {
        "id": 5634
      },
      "writtenOn": "2020-10-14T19:39:08Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "73e8fa54_50ea3bcb",
      "revId": "b427d253c849f15521af8992d88f932856b34f90",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4dbe02ef_b59cf533",
        "filename": "pc/connection_context.cc",
        "patchSetId": 2
      },
      "lineNbr": 117,
      "author": {
        "id": 5508
      },
      "writtenOn": "2020-10-14T17:11:16Z",
      "side": 1,
      "message": "do we expect this to be called on any thread?",
      "revId": "b427d253c849f15521af8992d88f932856b34f90",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2958bbf3_81bec7e7",
        "filename": "pc/connection_context.cc",
        "patchSetId": 2
      },
      "lineNbr": 117,
      "author": {
        "id": 5634
      },
      "writtenOn": "2020-10-14T19:39:08Z",
      "side": 1,
      "message": "Just on the worker thread and signaling thread :-( Added a comment for later refactoring.",
      "parentUuid": "4dbe02ef_b59cf533",
      "revId": "b427d253c849f15521af8992d88f932856b34f90",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "820b58b2_a4dfd48f",
        "filename": "pc/connection_context.h",
        "patchSetId": 2
      },
      "lineNbr": 39,
      "author": {
        "id": 5142
      },
      "writtenOn": "2020-10-14T12:54:21Z",
      "side": 1,
      "message": "If the purpose of this is to share context between PCs consider setting up a \"hello world\" type of peer connection test that uses multiple PCs with the same context.",
      "revId": "b427d253c849f15521af8992d88f932856b34f90",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f03df993_39ec8359",
        "filename": "pc/connection_context.h",
        "patchSetId": 2
      },
      "lineNbr": 39,
      "author": {
        "id": 5634
      },
      "writtenOn": "2020-10-14T19:39:08Z",
      "side": 1,
      "message": "It\u0027s a bit weird that the tests that have multiple PCs use separate factories.... perhaps I\u0027ll modify some of them. But this is a pure refactoring CL.",
      "parentUuid": "820b58b2_a4dfd48f",
      "revId": "b427d253c849f15521af8992d88f932856b34f90",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3da88210_910ec547",
        "filename": "pc/connection_context.h",
        "patchSetId": 2
      },
      "lineNbr": 42,
      "author": {
        "id": 5234
      },
      "writtenOn": "2020-10-14T13:31:55Z",
      "side": 1,
      "message": "This can affect all peer connections using the context. Can it be used mid-call, or is the intention that SetOptions should only be called before the first peer connection using this context is created? Please document.\n\nThere\u0027s no explicit synchronization, please document which threads are expected to read and write the options. If the setter method can be changed to a construction time setting, that\u0027s even better, but  perhaps out of scope for this cl.",
      "range": {
        "startLine": 42,
        "startChar": 0,
        "endLine": 42,
        "endChar": 74
      },
      "revId": "b427d253c849f15521af8992d88f932856b34f90",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "21ace3ec_7b09fabf",
        "filename": "pc/connection_context.h",
        "patchSetId": 2
      },
      "lineNbr": 42,
      "author": {
        "id": 5634
      },
      "writtenOn": "2020-10-14T19:39:08Z",
      "side": 1,
      "message": "This is \"the sins of the fathers\" area .... I managed to add a great deal of constness and RTC_GUARDED_BY, but a few issues were discovered and got comments added. Luckily I seem to have been able to make all the pointers that were accessed on multiple threads const.",
      "parentUuid": "3da88210_910ec547",
      "range": {
        "startLine": 42,
        "startChar": 0,
        "endLine": 42,
        "endChar": 74
      },
      "revId": "b427d253c849f15521af8992d88f932856b34f90",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d46873db_9b101605",
        "filename": "pc/connection_context.h",
        "patchSetId": 2
      },
      "lineNbr": 42,
      "author": {
        "id": 5234
      },
      "writtenOn": "2020-10-15T07:51:32Z",
      "side": 1,
      "message": "Sounds good enough for now.",
      "parentUuid": "21ace3ec_7b09fabf",
      "range": {
        "startLine": 42,
        "startChar": 0,
        "endLine": 42,
        "endChar": 74
      },
      "revId": "b427d253c849f15521af8992d88f932856b34f90",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "50fb416f_8ab76462",
        "filename": "pc/connection_context.h",
        "patchSetId": 2
      },
      "lineNbr": 44,
      "author": {
        "id": 5234
      },
      "writtenOn": "2020-10-14T13:31:55Z",
      "side": 1,
      "message": "Refactoring to eliminate this method would be desirable, but perhaps out of scope for current cl.\n\nIf create/init can fail, could use a static Create method that performs all logic that is potentially failing, return null on failure, and then pass fully initialized ChannelManager et al to a private constructor.",
      "range": {
        "startLine": 44,
        "startChar": 2,
        "endLine": 44,
        "endChar": 20
      },
      "revId": "b427d253c849f15521af8992d88f932856b34f90",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0d40893a_6bc107fd",
        "filename": "pc/connection_context.h",
        "patchSetId": 2
      },
      "lineNbr": 44,
      "author": {
        "id": 5634
      },
      "writtenOn": "2020-10-14T19:39:08Z",
      "side": 1,
      "message": "The only caller to Initialize seems to be this piece of code:\n\nhttps://source.chromium.org/chromium/chromium/src/+/master:third_party/webrtc/pc/peer_connection_factory.cc;l\u003d52;drc\u003da450ab794839b63f9c2ba982f738945f90e9fee2;bpv\u003d1;bpt\u003d1\n\nThe reason for the odd pattern seems to be that Initialize must be called on the signalling thread, but until we\u0027ve created the PeerConnectionFactory, we don\u0027t know what the signaling thread will end up being.\n\nProbably good for another refactoring round.",
      "parentUuid": "50fb416f_8ab76462",
      "range": {
        "startLine": 44,
        "startChar": 2,
        "endLine": 44,
        "endChar": 20
      },
      "revId": "b427d253c849f15521af8992d88f932856b34f90",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f71e4827_acc50ed7",
        "filename": "pc/connection_context.h",
        "patchSetId": 2
      },
      "lineNbr": 44,
      "author": {
        "id": 5234
      },
      "writtenOn": "2020-10-15T07:51:32Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "0d40893a_6bc107fd",
      "range": {
        "startLine": 44,
        "startChar": 2,
        "endLine": 44,
        "endChar": 20
      },
      "revId": "b427d253c849f15521af8992d88f932856b34f90",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ee28da37_dc5745da",
        "filename": "pc/connection_context.h",
        "patchSetId": 2
      },
      "lineNbr": 53,
      "author": {
        "id": 5508
      },
      "writtenOn": "2020-10-14T17:11:16Z",
      "side": 1,
      "message": "if signaling_thread_ et al, are not const, then these getters (I guess all of them) are prone to race conditions.",
      "revId": "b427d253c849f15521af8992d88f932856b34f90",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a50cedaa_1844a43c",
        "filename": "pc/connection_context.h",
        "patchSetId": 2
      },
      "lineNbr": 53,
      "author": {
        "id": 5634
      },
      "writtenOn": "2020-10-14T19:39:08Z",
      "side": 1,
      "message": "They were const-in-practice; I was able to make them const-in-declaration after applying tricks to the constructor. Hooray!",
      "parentUuid": "ee28da37_dc5745da",
      "revId": "b427d253c849f15521af8992d88f932856b34f90",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cd80caf1_636fa0d3",
        "filename": "pc/connection_context.h",
        "patchSetId": 2
      },
      "lineNbr": 81,
      "author": {
        "id": 5508
      },
      "writtenOn": "2020-10-14T17:11:16Z",
      "side": 1,
      "message": "rtc::Thread* const network_thread_; ?\n(sam for other vars)",
      "revId": "b427d253c849f15521af8992d88f932856b34f90",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7866c33e_802b768c",
        "filename": "pc/connection_context.h",
        "patchSetId": 2
      },
      "lineNbr": 81,
      "author": {
        "id": 5634
      },
      "writtenOn": "2020-10-14T19:39:08Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "cd80caf1_636fa0d3",
      "revId": "b427d253c849f15521af8992d88f932856b34f90",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "199342f6_2d33af46",
        "filename": "pc/connection_context.h",
        "patchSetId": 2
      },
      "lineNbr": 95,
      "author": {
        "id": 5234
      },
      "writtenOn": "2020-10-14T13:31:55Z",
      "side": 1,
      "message": "Those of these that are initialized at construction time can be marked const. The thread pointers can be initialized at construction time and be made const, with a bit more effort.  With initializers like\n\n  owned_network_thread_(network_thread ? nullptr : [](){code to create and return thread;}()),\n  network_thread_(network_thread ? network_thread : owned_network_thread_.get()),",
      "range": {
        "startLine": 87,
        "startChar": 0,
        "endLine": 95,
        "endChar": 48
      },
      "revId": "b427d253c849f15521af8992d88f932856b34f90",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7c33a5bf_b4d5e17e",
        "filename": "pc/connection_context.h",
        "patchSetId": 2
      },
      "lineNbr": 95,
      "author": {
        "id": 5508
      },
      "writtenOn": "2020-10-14T17:11:16Z",
      "side": 1,
      "message": "+1 on as much constness as we can get away with 😊",
      "parentUuid": "199342f6_2d33af46",
      "range": {
        "startLine": 87,
        "startChar": 0,
        "endLine": 95,
        "endChar": 48
      },
      "revId": "b427d253c849f15521af8992d88f932856b34f90",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "01ff3736_b9b8c38c",
        "filename": "pc/connection_context.h",
        "patchSetId": 2
      },
      "lineNbr": 95,
      "author": {
        "id": 5634
      },
      "writtenOn": "2020-10-14T19:39:08Z",
      "side": 1,
      "message": "With a bit of helper magic, this seemed to work. Added constness wherever it would compile.",
      "parentUuid": "199342f6_2d33af46",
      "range": {
        "startLine": 87,
        "startChar": 0,
        "endLine": 95,
        "endChar": 48
      },
      "revId": "b427d253c849f15521af8992d88f932856b34f90",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2fc9f1f0_7e7b6389",
        "filename": "pc/peer_connection.cc",
        "patchSetId": 2
      },
      "lineNbr": 341,
      "author": {
        "id": 5508
      },
      "writtenOn": "2020-10-14T17:11:16Z",
      "side": 1,
      "message": "std::move() (to avoid an additional AddRef/Release)",
      "revId": "b427d253c849f15521af8992d88f932856b34f90",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c9d61401_c0696c5e",
        "filename": "pc/peer_connection.h",
        "patchSetId": 2
      },
      "lineNbr": 75,
      "author": {
        "id": 5508
      },
      "writtenOn": "2020-10-14T17:11:16Z",
      "side": 1,
      "message": "can you remove explicit?",
      "revId": "b427d253c849f15521af8992d88f932856b34f90",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "32ff3f5e_642fec60",
        "filename": "pc/peer_connection_factory.cc",
        "patchSetId": 2
      },
      "lineNbr": 87,
      "author": {
        "id": 5508
      },
      "writtenOn": "2020-10-14T17:11:16Z",
      "side": 1,
      "message": "let\u0027s keep the thread check",
      "revId": "b427d253c849f15521af8992d88f932856b34f90",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8807968a_b33c2dfe",
        "filename": "pc/peer_connection_factory.cc",
        "patchSetId": 2
      },
      "lineNbr": 146,
      "author": {
        "id": 5508
      },
      "writtenOn": "2020-10-14T17:11:16Z",
      "side": 1,
      "message": "could replace all of these with RTC_DCHECK_RUN_ON(signaling_thread());",
      "revId": "b427d253c849f15521af8992d88f932856b34f90",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "32e1a693_21237945",
        "filename": "pc/peer_connection_factory.h",
        "patchSetId": 2
      },
      "lineNbr": 81,
      "author": {
        "id": 5508
      },
      "writtenOn": "2020-10-14T17:11:16Z",
      "side": 1,
      "message": "I think that generally we\u0027ve not added const methods that return non const pointers. In this case I understand why you\u0027re doing it but I feel that while most of the time we use \u0027const\u0027 to restrict usage of a method to specific scenarios, but here we\u0027re actually loosening the restrictions. Unless there\u0027s a clear reason for doing that, I\u0027d prefer we skip it.",
      "revId": "b427d253c849f15521af8992d88f932856b34f90",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "83908e5d_ee6b1156",
        "filename": "pc/peer_connection_factory.h",
        "patchSetId": 2
      },
      "lineNbr": 81,
      "author": {
        "id": 5234
      },
      "writtenOn": "2020-10-15T07:51:32Z",
      "side": 1,
      "message": "I think it\u0027s kind-of normal with a pointer that is const but points to a non-const object. This class could have a bunch of\n\n  const std::unique_ptr\u003cFoo\u003e foo_;\n\nwith the understanding that the pointer is set at construction time, and may be safely read by any thread. While the pointed-to object may have mutable state and it\u0027s own synchronization or thread checkers to coordinate access.\n\nAnd an accessor method for the foo_ pointer could then be const, but I don\u0027t have a strong opinion on that. It\u0027s more important that the member variable is const.",
      "parentUuid": "32e1a693_21237945",
      "revId": "b427d253c849f15521af8992d88f932856b34f90",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0290ab7b_5930a215",
        "filename": "pc/peer_connection_factory.h",
        "patchSetId": 2
      },
      "lineNbr": 81,
      "author": {
        "id": 5634
      },
      "writtenOn": "2020-10-15T09:49:28Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "83908e5d_ee6b1156",
      "revId": "b427d253c849f15521af8992d88f932856b34f90",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    }
  ]
}