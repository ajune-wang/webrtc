{
  "comments": [
    {
      "key": {
        "uuid": "635060e5_ad8cce27",
        "filename": "api/peerconnectioninterface.h",
        "patchSetId": 16
      },
      "lineNbr": 1292,
      "author": {
        "id": 5234
      },
      "writtenOn": "2018-02-13T12:02:22Z",
      "side": 1,
      "message": "Using unique_ptr for injection, like this, is the recommended way to do it. Refactoring to avoid the very long argument list (maybe builder-pattern?) is desirable, but out of scope for this cl.",
      "range": {
        "startLine": 1292,
        "startChar": 4,
        "endLine": 1292,
        "endChar": 73
      },
      "revId": "a1e3f63e1be1dd28585274c30d417ade586afd34",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a0a97021_aa0ba8f0",
        "filename": "api/peerconnectioninterface.h",
        "patchSetId": 16
      },
      "lineNbr": 1292,
      "author": {
        "id": 6290
      },
      "writtenOn": "2018-02-13T16:04:42Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "635060e5_ad8cce27",
      "range": {
        "startLine": 1292,
        "startChar": 4,
        "endLine": 1292,
        "endChar": 73
      },
      "revId": "a1e3f63e1be1dd28585274c30d417ade586afd34",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7b002ff2_88232200",
        "filename": "call/call.cc",
        "patchSetId": 16
      },
      "lineNbr": 424,
      "author": {
        "id": 5234
      },
      "writtenOn": "2018-02-13T12:02:22Z",
      "side": 1,
      "message": "I don\u0027t follow here. Why can\u0027t we use the fec_controller_factory passed to the Call constructor?",
      "range": {
        "startLine": 422,
        "startChar": 0,
        "endLine": 424,
        "endChar": 33
      },
      "revId": "a1e3f63e1be1dd28585274c30d417ade586afd34",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "58b4a1a8_75a21865",
        "filename": "call/call.cc",
        "patchSetId": 16
      },
      "lineNbr": 424,
      "author": {
        "id": 6290
      },
      "writtenOn": "2018-02-13T16:04:42Z",
      "side": 1,
      "message": "For the VideoQualityTest(which inherites test::CallTest and test::CallTest owns a sender_call_), we pass the fec_controller_factory to the VideoQualityTest ctor, and we later call sender_call_.CreateVideoSendStream() with injected FecController.",
      "parentUuid": "7b002ff2_88232200",
      "range": {
        "startLine": 422,
        "startChar": 0,
        "endLine": 424,
        "endChar": 33
      },
      "revId": "a1e3f63e1be1dd28585274c30d417ade586afd34",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ddced114_a5142e96",
        "filename": "call/call.cc",
        "patchSetId": 16
      },
      "lineNbr": 428,
      "author": {
        "id": 5234
      },
      "writtenOn": "2018-02-13T12:02:22Z",
      "side": 1,
      "message": "I\u0027ma also a little confused about ownership. The FecControllerFActory passed to the Call constructor is a raw pointer, and I\u0027m assuming ownership belongs to PeerConnectionFactory?\n\nHere\u0027 we get another FecControllerFactory, including ownership. Where will that ownership belong?",
      "range": {
        "startLine": 428,
        "startChar": 4,
        "endLine": 428,
        "endChar": 51
      },
      "revId": "a1e3f63e1be1dd28585274c30d417ade586afd34",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1295833a_3cb8c19f",
        "filename": "call/call.cc",
        "patchSetId": 16
      },
      "lineNbr": 428,
      "author": {
        "id": 6290
      },
      "writtenOn": "2018-02-13T16:04:42Z",
      "side": 1,
      "message": "Yes, the ownership belongs to PeerConnectionFactory when the the FecControllerFactory passed to Call ctor.\nWhen in the perf tests case, we pass in a unique_ptr\u003cFecControllerFactory\u003e, the ownership belongs to the Call. Shall we also pass in a raw pointer for this case too?",
      "parentUuid": "ddced114_a5142e96",
      "range": {
        "startLine": 428,
        "startChar": 4,
        "endLine": 428,
        "endChar": 51
      },
      "revId": "a1e3f63e1be1dd28585274c30d417ade586afd34",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "87c00650_850d237e",
        "filename": "call/call.cc",
        "patchSetId": 16
      },
      "lineNbr": 752,
      "author": {
        "id": 5234
      },
      "writtenOn": "2018-02-14T08:28:10Z",
      "side": 1,
      "message": "This doesn\u0027t look right. We get ownership of the factory, save a raw pointer to it, and then the factory will be destroyed as the \n\n  std::unique_ptr\u003cFecControllerFactoryInterface\u003e fec_controller_factory\n\ngoes out of scope. Also it\u0027s a bit subtle that the member fec_controller_factory_ is used inside the below call to CreateVideoSendStream (and at that time, factory is still alive).\n\nIt would be somehow correct if you add a \n\n  fec_controller_factory \u003d nullptr;\n\nat the end of the method, to not leave it pointing to a destroyed object, but I don\u0027t think it is appropriate for CreateVideoSendStream to make state changes affecting unrelated streams.\n\nI would suggest one of these alternatives:\n\n1. Reorganize the tests so that the appropriate factory can be passed with Call::Config to the Call constructor (and then fec_controller_factory_ member isn\u0027t needed, it can be accessed via config_ instead), or\n\n2. Keep the old method with a std::unique_ptr\u003cFecController\u003e as argument, use that from the tests (the test may have its own factory, unrelated to Call\u0027s), and let the CreateVideoStream method without FecController argument create one using config_.fec_controller_factory (if that is non-null).\n\n3. Add a method SetFecControllerFactory to explicitly change the fec_controller_factory_ pointer, if you really need to be able to change it after construction.",
      "range": {
        "startLine": 752,
        "startChar": 2,
        "endLine": 752,
        "endChar": 57
      },
      "revId": "a1e3f63e1be1dd28585274c30d417ade586afd34",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "54c6e2ff_0e8e24d4",
        "filename": "call/call.h",
        "patchSetId": 16
      },
      "lineNbr": 131,
      "author": {
        "id": 5234
      },
      "writtenOn": "2018-02-13T12:02:22Z",
      "side": 1,
      "message": "I\u0027d prefer a new member in Call::Config instead. Any good reason that can\u0027t work?",
      "range": {
        "startLine": 131,
        "startChar": 22,
        "endLine": 131,
        "endChar": 51
      },
      "revId": "a1e3f63e1be1dd28585274c30d417ade586afd34",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e55a4290_9530a587",
        "filename": "call/call.h",
        "patchSetId": 16
      },
      "lineNbr": 131,
      "author": {
        "id": 6290
      },
      "writtenOn": "2018-02-13T16:04:42Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "54c6e2ff_0e8e24d4",
      "range": {
        "startLine": 131,
        "startChar": 22,
        "endLine": 131,
        "endChar": 51
      },
      "revId": "a1e3f63e1be1dd28585274c30d417ade586afd34",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4010771b_5ad5776f",
        "filename": "sdk/android/api/org/webrtc/FecControllerFactoryFactoryInterface.java",
        "patchSetId": 16
      },
      "lineNbr": 16,
      "author": {
        "id": 5234
      },
      "writtenOn": "2018-02-13T12:02:22Z",
      "side": 1,
      "message": "I\u0027m getting confused when we get to FactoryFactories... (but I\u0027m not so used to java).\n\nThe returned native factory will only be used for injection into PeerConnectionFactory, no methods on the java side?",
      "range": {
        "startLine": 16,
        "startChar": 17,
        "endLine": 16,
        "endChar": 53
      },
      "revId": "a1e3f63e1be1dd28585274c30d417ade586afd34",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8b6abbbe_e8f65a95",
        "filename": "sdk/android/api/org/webrtc/FecControllerFactoryFactoryInterface.java",
        "patchSetId": 16
      },
      "lineNbr": 16,
      "author": {
        "id": 6290
      },
      "writtenOn": "2018-02-13T16:04:42Z",
      "side": 1,
      "message": "There is a FecControllerFactoryFactory that implements this class. Which resides in another commit.",
      "parentUuid": "4010771b_5ad5776f",
      "range": {
        "startLine": 16,
        "startChar": 17,
        "endLine": 16,
        "endChar": 53
      },
      "revId": "a1e3f63e1be1dd28585274c30d417ade586afd34",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2c982f07_0cb8357a",
        "filename": "sdk/android/api/org/webrtc/PeerConnectionFactory.java",
        "patchSetId": 16
      },
      "lineNbr": 164,
      "author": {
        "id": 5525
      },
      "writtenOn": "2018-02-13T14:25:44Z",
      "side": 1,
      "message": "Ying, is there a reason why we pass the FEC controller to the PeerConnectionFactory constructor and not to createPeerConnection method? I don\u0027t see why it\u0027s needed already at construction time?",
      "range": {
        "startLine": 159,
        "startChar": 0,
        "endLine": 164,
        "endChar": 5
      },
      "revId": "a1e3f63e1be1dd28585274c30d417ade586afd34",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    }
  ]
}