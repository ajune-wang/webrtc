{
  "comments": [
    {
      "key": {
        "uuid": "51e45ed9_1ec6eb35",
        "filename": "modules/video_coding/loss_notification_controller.cc",
        "patchSetId": 1
      },
      "lineNbr": 92,
      "author": {
        "id": 5234
      },
      "writtenOn": "2019-04-09T15:02:50Z",
      "side": 1,
      "message": "Which logic in the code does this comment refer to? Could be rephrased for clarity.",
      "range": {
        "startLine": 90,
        "startChar": 0,
        "endLine": 92,
        "endChar": 53
      },
      "revId": "14e2b4d41d57339e6b40966e305cda8f99241088",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "83ed667d_372f0023",
        "filename": "modules/video_coding/loss_notification_controller.cc",
        "patchSetId": 1
      },
      "lineNbr": 92,
      "author": {
        "id": 5147
      },
      "writtenOn": "2019-04-09T19:22:23Z",
      "side": 1,
      "message": "HandleLoss can be called from the else-block below, but not from the if-block. This explains why. Would moving this comment into the if-block help? Or perhaps you could suggest a different way to enhance clarity?",
      "parentUuid": "51e45ed9_1ec6eb35",
      "range": {
        "startLine": 90,
        "startChar": 0,
        "endLine": 92,
        "endChar": 53
      },
      "revId": "14e2b4d41d57339e6b40966e305cda8f99241088",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "002f0a0f_f5e4fd72",
        "filename": "modules/video_coding/loss_notification_controller.cc",
        "patchSetId": 1
      },
      "lineNbr": 92,
      "author": {
        "id": 5234
      },
      "writtenOn": "2019-04-10T14:19:17Z",
      "side": 1,
      "message": "Move into the else block may help. For phrasing, I think \"key frames do not issue a loss notification\" is unclear; a key frame is not an actor doing anything. It\u0027s also unobvious to me if this describes logic implemented in this function, or describes an expectation on how the remote end should act.\n\nIf I\u0027ve got the context right, this is logic on the send side, and hence should process received loss notifications, but not \"issue\" any such notifications?",
      "parentUuid": "83ed667d_372f0023",
      "range": {
        "startLine": 90,
        "startChar": 0,
        "endLine": 92,
        "endChar": 53
      },
      "revId": "14e2b4d41d57339e6b40966e305cda8f99241088",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4d69d5cf_20ba3120",
        "filename": "modules/video_coding/loss_notification_controller.cc",
        "patchSetId": 1
      },
      "lineNbr": 92,
      "author": {
        "id": 5147
      },
      "writtenOn": "2019-04-10T14:37:49Z",
      "side": 1,
      "message": "Actually, this is the receiver side. It issues the loss notifications.\nI have moved the comment and changed the phrasing slightly.",
      "parentUuid": "002f0a0f_f5e4fd72",
      "range": {
        "startLine": 90,
        "startChar": 0,
        "endLine": 92,
        "endChar": 53
      },
      "revId": "14e2b4d41d57339e6b40966e305cda8f99241088",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "65fd753e_8b1e4388",
        "filename": "video/encoder_rtcp_feedback.cc",
        "patchSetId": 1
      },
      "lineNbr": 98,
      "author": {
        "id": 5234
      },
      "writtenOn": "2019-04-09T15:02:50Z",
      "side": 1,
      "message": "I\u0027d find\n\n  const absl::optional\u003cRtpSequenceNumberMap::Info\u003e last_decodable \u003d \n    rtp_video_sender_-\u003eGetSentRtpPacketInfo(seq_num_of_last_decodable);\n\t\n  const absl::optional\u003cRtpSequenceNumberMap::Info\u003e last_received \u003d \n    rtp_video_sender_-\u003eGetSentRtpPacketInfo(seq_num_of_last_recieved);\n\n  if (!last_decodable || !last_received)\n    return;\n\nboth clearer and slightly shorter.",
      "range": {
        "startLine": 87,
        "startChar": 0,
        "endLine": 98,
        "endChar": 0
      },
      "revId": "14e2b4d41d57339e6b40966e305cda8f99241088",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d187e20b_989cff26",
        "filename": "video/encoder_rtcp_feedback.cc",
        "patchSetId": 1
      },
      "lineNbr": 98,
      "author": {
        "id": 5147
      },
      "writtenOn": "2019-04-09T19:22:23Z",
      "side": 1,
      "message": "1. Clearer - agreed. But not as efficient.\n2. It\u0027s harder to convince oneself that there is no actual bug hiding behind fetching two values consecutively, rather than atomically. It\u0027s also more brittle in the face of future changes.",
      "parentUuid": "65fd753e_8b1e4388",
      "range": {
        "startLine": 87,
        "startChar": 0,
        "endLine": 98,
        "endChar": 0
      },
      "revId": "14e2b4d41d57339e6b40966e305cda8f99241088",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "40fd45dc_53cd4c1a",
        "filename": "video/encoder_rtcp_feedback.cc",
        "patchSetId": 1
      },
      "lineNbr": 98,
      "author": {
        "id": 5234
      },
      "writtenOn": "2019-04-10T14:19:17Z",
      "side": 1,
      "message": "This is a judgement call. I won\u0027t insist, even though I would have made a different trade off. \n\nAs for potential races, if we receive two sequence numbers from the network and look them up, we would always have to deal with the possibility that one of the numbers being within the window we keep track of, and the other one outside. Even if it \"can\u0027t happen\" under normal circumstances, it could happen due to a network anomaly or an evil peer.",
      "parentUuid": "d187e20b_989cff26",
      "range": {
        "startLine": 87,
        "startChar": 0,
        "endLine": 98,
        "endChar": 0
      },
      "revId": "14e2b4d41d57339e6b40966e305cda8f99241088",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5ad02e5b_d9203b8f",
        "filename": "video/encoder_rtcp_feedback.cc",
        "patchSetId": 1
      },
      "lineNbr": 98,
      "author": {
        "id": 5147
      },
      "writtenOn": "2019-04-10T14:37:49Z",
      "side": 1,
      "message": "\u003cquote\u003e\nEven if it \"can\u0027t happen\" under normal circumstances, it could happen due to a network anomaly or an evil peer.\n\u003c/quote\u003e\n\nBeing robust to unlikely scenarios, is exactly why I prefer to Get() on both sequence numbers in one atomic action. It\u0027s easier for me to convince myself that the code is robust to these cases this way, and that it would remain so.",
      "parentUuid": "40fd45dc_53cd4c1a",
      "range": {
        "startLine": 87,
        "startChar": 0,
        "endLine": 98,
        "endChar": 0
      },
      "revId": "14e2b4d41d57339e6b40966e305cda8f99241088",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "312fc9eb_9847377f",
        "filename": "video/encoder_rtcp_feedback.cc",
        "patchSetId": 1
      },
      "lineNbr": 122,
      "author": {
        "id": 5524
      },
      "writtenOn": "2019-04-09T16:41:11Z",
      "side": 1,
      "message": "probably more easily readable as \n\nif (!decodability_flag) {\n  loss_notification.last_received_decodable \u003d false;\n}",
      "range": {
        "startLine": 121,
        "startChar": 4,
        "endLine": 122,
        "endChar": 72
      },
      "revId": "14e2b4d41d57339e6b40966e305cda8f99241088",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a36429b1_3b27f7df",
        "filename": "video/encoder_rtcp_feedback.cc",
        "patchSetId": 1
      },
      "lineNbr": 122,
      "author": {
        "id": 5147
      },
      "writtenOn": "2019-04-09T19:22:23Z",
      "side": 1,
      "message": "I have three aesthetic considerations here:\n1. I don\u0027t want to rely on the ctor setting to absl::nullopt upon construction; I want to explicitly assign a value.\n2. I want the value assignment to look as similar as possible in all cases.\n3. I want to keep nesting as low as I can, while keeping the structure simple. (So still a\u0026\u0026b, a\u0026\u0026!b, etc. - going over all permutations of is_first/is_last.)\n\nSo I would prefer to keep this line as-is. Or do you feel strongly about this?",
      "parentUuid": "312fc9eb_9847377f",
      "range": {
        "startLine": 121,
        "startChar": 4,
        "endLine": 122,
        "endChar": 72
      },
      "revId": "14e2b4d41d57339e6b40966e305cda8f99241088",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4fd13b4b_5d530d0d",
        "filename": "video/encoder_rtcp_feedback.cc",
        "patchSetId": 1
      },
      "lineNbr": 122,
      "author": {
        "id": 5524
      },
      "writtenOn": "2019-04-10T09:51:06Z",
      "side": 1,
      "message": "I\u0027ll allow it :P",
      "parentUuid": "a36429b1_3b27f7df",
      "range": {
        "startLine": 121,
        "startChar": 4,
        "endLine": 122,
        "endChar": 72
      },
      "revId": "14e2b4d41d57339e6b40966e305cda8f99241088",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "55b74094_166981c4",
        "filename": "video/encoder_rtcp_feedback.cc",
        "patchSetId": 1
      },
      "lineNbr": 123,
      "author": {
        "id": 5234
      },
      "writtenOn": "2019-04-09T15:02:50Z",
      "side": 1,
      "message": "This should be always true here. Maybe move it from the condition into a DCHECK?",
      "range": {
        "startLine": 123,
        "startChar": 13,
        "endLine": 123,
        "endChar": 36
      },
      "revId": "14e2b4d41d57339e6b40966e305cda8f99241088",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "121f6bc7_43f63468",
        "filename": "video/encoder_rtcp_feedback.cc",
        "patchSetId": 1
      },
      "lineNbr": 123,
      "author": {
        "id": 5524
      },
      "writtenOn": "2019-04-09T16:41:11Z",
      "side": 1,
      "message": "If so, could also do the check for !decodability_flag first and then split on last_received.is_last true or false.\n\nDon\u0027t feel too strongly about it though",
      "parentUuid": "55b74094_166981c4",
      "range": {
        "startLine": 123,
        "startChar": 13,
        "endLine": 123,
        "endChar": 36
      },
      "revId": "14e2b4d41d57339e6b40966e305cda8f99241088",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e9206020_b65b6707",
        "filename": "video/encoder_rtcp_feedback.cc",
        "patchSetId": 1
      },
      "lineNbr": 123,
      "author": {
        "id": 5147
      },
      "writtenOn": "2019-04-09T19:22:23Z",
      "side": 1,
      "message": "This is a case where I think clarity overrides efficiency. I also expect the compiler to be able to optimize the needless check away. (Able to, but I am not sure it would.) I prefer spelling out all four value permutations of is_first and is_last. What do you guys say?",
      "parentUuid": "55b74094_166981c4",
      "range": {
        "startLine": 123,
        "startChar": 13,
        "endLine": 123,
        "endChar": 36
      },
      "revId": "14e2b4d41d57339e6b40966e305cda8f99241088",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ea07ae1a_77769d3e",
        "filename": "video/encoder_rtcp_feedback.cc",
        "patchSetId": 1
      },
      "lineNbr": 123,
      "author": {
        "id": 5524
      },
      "writtenOn": "2019-04-10T09:51:06Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "e9206020_b65b6707",
      "range": {
        "startLine": 123,
        "startChar": 13,
        "endLine": 123,
        "endChar": 36
      },
      "revId": "14e2b4d41d57339e6b40966e305cda8f99241088",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "707d8239_724cbf3e",
        "filename": "video/video_send_stream_impl.cc",
        "patchSetId": 1
      },
      "lineNbr": 252,
      "author": {
        "id": 5234
      },
      "writtenOn": "2019-04-09T15:02:50Z",
      "side": 1,
      "message": "I\u0027m not sure I like passing the big RtpVideoSenderInterface like this. And the reason why a setter method is needed is that we set up a circular references between EncoderFeedback and RtpVideoSender. Circular references aren\u0027t totally unexpected since we\u0027re wiring up a feedback signal, but it\u0027s not clear this signal needs an additional circle; this isn\u0027t the first or only feedback signal.\n\nWould it work to instead have EncoderFeedback own a mapping ssrc -\u003e RtpSequenceNumberMap, and pass that to RtpVideoSender on construction (for wiring down to the RtpSenderVideo, which will update the mapping?\n\nLanding as is may be fine, but I\u0027d like to understand what\u0027s the right way is to wire the components together, and if there are any reasonable followup changes to fix it.",
      "range": {
        "startLine": 252,
        "startChar": 2,
        "endLine": 252,
        "endChar": 57
      },
      "revId": "14e2b4d41d57339e6b40966e305cda8f99241088",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "56479fa1_9201c9f5",
        "filename": "video/video_send_stream_impl.cc",
        "patchSetId": 1
      },
      "lineNbr": 252,
      "author": {
        "id": 5147
      },
      "writtenOn": "2019-04-09T19:22:23Z",
      "side": 1,
      "message": "I agree that circular references are best avoided when possible. Let\u0027s discuss offline how we can do that in a way that would not introduce future problems for you in decoupling the RTP and video logic? You\u0027ve mentioned you\u0027d be amenable to doing so in a separate CL. I\u0027d like to take you up on that offer. :-)",
      "parentUuid": "707d8239_724cbf3e",
      "range": {
        "startLine": 252,
        "startChar": 2,
        "endLine": 252,
        "endChar": 57
      },
      "revId": "14e2b4d41d57339e6b40966e305cda8f99241088",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "de0d3712_cb6fd9ea",
        "filename": "video/video_stream_encoder.cc",
        "patchSetId": 1
      },
      "lineNbr": 1417,
      "author": {
        "id": 5234
      },
      "writtenOn": "2019-04-09T15:02:50Z",
      "side": 1,
      "message": "This is a common pattern in this file. I wonder if there\u0027s any drawback in making it post unconditionally,\n\n  encoder_queue_.PostTask([this, loss_notification]{ \n      encoder_-\u003eOnLossNotification(loss_notification);\n  }\n\nIt would look a bit simpler.",
      "range": {
        "startLine": 1408,
        "startChar": 0,
        "endLine": 1417,
        "endChar": 3
      },
      "revId": "14e2b4d41d57339e6b40966e305cda8f99241088",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b50dc36c_1f511bcd",
        "filename": "video/video_stream_encoder.cc",
        "patchSetId": 1
      },
      "lineNbr": 1417,
      "author": {
        "id": 5147
      },
      "writtenOn": "2019-04-09T19:22:23Z",
      "side": 1,
      "message": "One drawback is that if the method is called already on encoder_queue_, posting the task will introduce a needless delay. We could have saved one check of IsCurrent(), by posting a task to OnLossNotificationInternal(), but that would deviate from the pattern in this file, so I don\u0027t think it\u0027s desirable.",
      "parentUuid": "de0d3712_cb6fd9ea",
      "range": {
        "startLine": 1408,
        "startChar": 0,
        "endLine": 1417,
        "endChar": 3
      },
      "revId": "14e2b4d41d57339e6b40966e305cda8f99241088",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    }
  ]
}