{
  "comments": [
    {
      "key": {
        "uuid": "069cd527_a7bf9a14",
        "filename": "modules/rtp_rtcp/source/rtcp_transceiver_config.h",
        "patchSetId": 8
      },
      "lineNbr": 57,
      "author": {
        "id": 5234
      },
      "writtenOn": "2017-11-29T12:34:47Z",
      "side": 1,
      "message": "nit: Drop extra //-lines, for consistency with surrounding comments.",
      "range": {
        "startLine": 55,
        "startChar": 2,
        "endLine": 57,
        "endChar": 4
      },
      "revId": "2893b98c61774412ff28fc998b93d388c4815b58",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "03972529_5b2b8ed9",
        "filename": "modules/rtp_rtcp/source/rtcp_transceiver_config.h",
        "patchSetId": 8
      },
      "lineNbr": 57,
      "author": {
        "id": 5019
      },
      "writtenOn": "2017-11-30T11:49:00Z",
      "side": 1,
      "message": "Done (will introduce to make it section-like comment (like Tuning parameters or Flags) if there will be more global callbacks",
      "parentUuid": "069cd527_a7bf9a14",
      "range": {
        "startLine": 55,
        "startChar": 2,
        "endLine": 57,
        "endChar": 4
      },
      "revId": "2893b98c61774412ff28fc998b93d388c4815b58",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2e94bc6f_5eaba691",
        "filename": "modules/rtp_rtcp/source/rtcp_transceiver_config.h",
        "patchSetId": 8
      },
      "lineNbr": 78,
      "author": {
        "id": 5234
      },
      "writtenOn": "2017-11-29T12:34:47Z",
      "side": 1,
      "message": "Include the expansions of the rrtr and dlrr acronyms in the comment. Could also mention the relation to rtt_observer.",
      "range": {
        "startLine": 78,
        "startChar": 0,
        "endLine": 78,
        "endChar": 75
      },
      "revId": "2893b98c61774412ff28fc998b93d388c4815b58",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "39e59bbc_4d99a504",
        "filename": "modules/rtp_rtcp/source/rtcp_transceiver_config.h",
        "patchSetId": 8
      },
      "lineNbr": 78,
      "author": {
        "id": 5019
      },
      "writtenOn": "2017-11-30T11:49:00Z",
      "side": 1,
      "message": "that made comment too large in my opinion, so instead I unmentioned rrtr and dlrr and made comment more generic (but kept the link where reader can find technical details)\n\nchange the name of the experiment too",
      "parentUuid": "2e94bc6f_5eaba691",
      "range": {
        "startLine": 78,
        "startChar": 0,
        "endLine": 78,
        "endChar": 75
      },
      "revId": "2893b98c61774412ff28fc998b93d388c4815b58",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d8cf12f4_c3a33456",
        "filename": "modules/rtp_rtcp/source/rtcp_transceiver_config.h",
        "patchSetId": 8
      },
      "lineNbr": 78,
      "author": {
        "id": 5234
      },
      "writtenOn": "2017-11-30T12:14:39Z",
      "side": 1,
      "message": "\"dlrr\" in the name is still somewhat mysterious without further context...\n\nI have had a quick look at the rfc, and I think I understand roughly what it\u0027s for. Some questions:\n\n1. Do we have any use for the RTT based on DLRR, if the callback is NULL? If not, we don\u0027t need a separate bool flag.\n\n2. This config flag controls both processing of received DLRR, and transmission of RRTR. But if I understood this correctly, there\u0027s little point in sending RRTR if we are a media sender and can expect to get DLSR (delay since sender report)? And whether or not we\u0027re a media sender isn\u0027t a construction time property. And then we don\u0027t yet do any DLSR, is that something you plan to do soon?\n\n3. Maybe I\u0027m missing something, but I don\u0027t see the code to send DLRR in response to RTRR. It would make some sense to me to have that in the same cl, with some kind of end-to-end test of this signalling.",
      "parentUuid": "39e59bbc_4d99a504",
      "range": {
        "startLine": 78,
        "startChar": 0,
        "endLine": 78,
        "endChar": 75
      },
      "revId": "2893b98c61774412ff28fc998b93d388c4815b58",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6f7973f6_654ab284",
        "filename": "modules/rtp_rtcp/source/rtcp_transceiver_config.h",
        "patchSetId": 8
      },
      "lineNbr": 78,
      "author": {
        "id": 5019
      },
      "writtenOn": "2017-11-30T13:03:08Z",
      "side": 1,
      "message": "unmentioned dlrr in the flag name.\n\nI\u0027m planing a bit ahead here:\n1. RttObserver is how RtcpTransceiver is used (in fact it would be odd to use RtcpTransciver and ignore rtt altogether).\nflag is what to put into rtcp messages on the wire. Prefer to keep that split (but added a warning to Config::Validate it would be odd to use one without another).\n\nWhen calculating RTT using SenderReports is fully implemented, same rtt_observer will be used to report it.\n\n2. It is something I definitely plan when will start adding features for rtp sender. \u0027Soon\u0027 is hope. In particular it will make sense not to send rrtr if there is at least one sender i.e. if sender report was generated, not receiver report. (added a TODO)\n\n3. That is sender feature too. It will be very similar to how current RtcpTransceiver react to sender report by adding last_rr and delay to report blocks. Since all sender specific feature are currently missing, do not see why add TODO for this particular one.\n\nEnd-to-end test would be challenging to write: It would make sense to have 2 different clocks for 2 transceivers representing different endpoints.",
      "parentUuid": "d8cf12f4_c3a33456",
      "range": {
        "startLine": 78,
        "startChar": 0,
        "endLine": 78,
        "endChar": 75
      },
      "revId": "2893b98c61774412ff28fc998b93d388c4815b58",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b8350d9b_3e0712a7",
        "filename": "modules/rtp_rtcp/source/rtcp_transceiver_config.h",
        "patchSetId": 8
      },
      "lineNbr": 78,
      "author": {
        "id": 5234
      },
      "writtenOn": "2017-11-30T13:50:14Z",
      "side": 1,
      "message": "\u003e flag is what to put into rtcp messages on the wire. Prefer to keep that split (but added a warning to Config::Validate it would be odd to use one without another).\n\nMaybe drop \"calculate\" from the name then. Suggest |enable_receiver_only_rtt_measurement| or (to stay closer to rfc terminology) |enable_non_sender_rtt_measurement|.\n\n\u003e End-to-end test would be challenging to write: It would make sense to have 2 different clocks for 2 transceivers representing different endpoints.\n\nIt might help to have \"current time\" as input to all methods that handle time, instead of calling rtc::TimeMicros. But that\u0027s to be sorted out later.",
      "parentUuid": "6f7973f6_654ab284",
      "range": {
        "startLine": 78,
        "startChar": 0,
        "endLine": 78,
        "endChar": 75
      },
      "revId": "2893b98c61774412ff28fc998b93d388c4815b58",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c1aa3d4d_49f4a3ca",
        "filename": "modules/rtp_rtcp/source/rtcp_transceiver_config.h",
        "patchSetId": 8
      },
      "lineNbr": 78,
      "author": {
        "id": 5019
      },
      "writtenOn": "2017-11-30T13:59:51Z",
      "side": 1,
      "message": "I went for \u0027non_sender_rtt_measurement\u0027: I feel \u0027enable_\u0027 prefix duplicate type of the field.",
      "parentUuid": "b8350d9b_3e0712a7",
      "range": {
        "startLine": 78,
        "startChar": 0,
        "endLine": 78,
        "endChar": 75
      },
      "revId": "2893b98c61774412ff28fc998b93d388c4815b58",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dc66a85b_92b446fe",
        "filename": "modules/rtp_rtcp/source/rtcp_transceiver_config.h",
        "patchSetId": 8
      },
      "lineNbr": 78,
      "author": {
        "id": 5234
      },
      "writtenOn": "2017-11-30T14:32:49Z",
      "side": 1,
      "message": "\u003e I went for \u0027non_sender_rtt_measurement\u0027: I feel \u0027enable_\u0027 prefix duplicate type of the field.\n\nSounds good.",
      "parentUuid": "c1aa3d4d_49f4a3ca",
      "range": {
        "startLine": 78,
        "startChar": 0,
        "endLine": 78,
        "endChar": 75
      },
      "revId": "2893b98c61774412ff28fc998b93d388c4815b58",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9b5a0938_8d147994",
        "filename": "modules/rtp_rtcp/source/rtcp_transceiver_impl.cc",
        "patchSetId": 8
      },
      "lineNbr": 207,
      "author": {
        "id": 5234
      },
      "writtenOn": "2017-11-29T12:34:47Z",
      "side": 1,
      "message": "Do I get this right, that this conversion to \"compact ntp\" is needed to get correct 32-bit wraparound when computing rtt_ntp a few lines below? Might deserve a comment.",
      "range": {
        "startLine": 207,
        "startChar": 32,
        "endLine": 207,
        "endChar": 42
      },
      "revId": "2893b98c61774412ff28fc998b93d388c4815b58",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "889100c8_b330a7d6",
        "filename": "modules/rtp_rtcp/source/rtcp_transceiver_impl.cc",
        "patchSetId": 8
      },
      "lineNbr": 207,
      "author": {
        "id": 5019
      },
      "writtenOn": "2017-11-30T11:49:00Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9b5a0938_8d147994",
      "range": {
        "startLine": 207,
        "startChar": 32,
        "endLine": 207,
        "endChar": 42
      },
      "revId": "2893b98c61774412ff28fc998b93d388c4815b58",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0891d76f_bf443c09",
        "filename": "modules/rtp_rtcp/source/rtcp_transceiver_impl.cc",
        "patchSetId": 8
      },
      "lineNbr": 215,
      "author": {
        "id": 5234
      },
      "writtenOn": "2017-11-29T12:34:47Z",
      "side": 1,
      "message": "This callback will be invoked on the rtcp task queue. What\u0027s the intended receiver of the callback? Some internal method which returns quickly?",
      "range": {
        "startLine": 215,
        "startChar": 28,
        "endLine": 215,
        "endChar": 39
      },
      "revId": "2893b98c61774412ff28fc998b93d388c4815b58",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b8a33fc2_07b3369b",
        "filename": "modules/rtp_rtcp/source/rtcp_transceiver_impl.cc",
        "patchSetId": 8
      },
      "lineNbr": 215,
      "author": {
        "id": 5019
      },
      "writtenOn": "2017-11-30T11:49:00Z",
      "side": 1,
      "message": "That is one of the guarantee would like to provide: all callbacks happen on the TaskQueue. (added comment to the configuration)\n\nPreferably it returns quickly (e.g. PostTask to another queue if need long processing), but not sure why this expectation is required.\nIf it turn out to be a problem, I\u0027ll consider adding another TaskQueue* for_callbacks to the configuration.",
      "parentUuid": "0891d76f_bf443c09",
      "range": {
        "startLine": 215,
        "startChar": 28,
        "endLine": 215,
        "endChar": 39
      },
      "revId": "2893b98c61774412ff28fc998b93d388c4815b58",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4174e0ae_3550a34b",
        "filename": "modules/rtp_rtcp/source/rtcp_transceiver_impl_unittest.cc",
        "patchSetId": 8
      },
      "lineNbr": 53,
      "author": {
        "id": 5234
      },
      "writtenOn": "2017-11-29T12:34:47Z",
      "side": 1,
      "message": "What is this method for? It seems unused in this cl.",
      "range": {
        "startLine": 53,
        "startChar": 21,
        "endLine": 53,
        "endChar": 37
      },
      "revId": "2893b98c61774412ff28fc998b93d388c4815b58",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9cb5c8cb_6defb058",
        "filename": "modules/rtp_rtcp/source/rtcp_transceiver_impl_unittest.cc",
        "patchSetId": 8
      },
      "lineNbr": 53,
      "author": {
        "id": 5019
      },
      "writtenOn": "2017-11-30T11:49:00Z",
      "side": 1,
      "message": "It is pure virtual in the webrtc::RtcpRttStats interface, so have to add it to the mock.\nFor some reason missed this mock already defined in dedicated file. including that one instead.",
      "parentUuid": "4174e0ae_3550a34b",
      "range": {
        "startLine": 53,
        "startChar": 21,
        "endLine": 53,
        "endChar": 37
      },
      "revId": "2893b98c61774412ff28fc998b93d388c4815b58",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    }
  ]
}