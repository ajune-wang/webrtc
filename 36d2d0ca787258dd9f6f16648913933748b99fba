{
  "comments": [
    {
      "key": {
        "uuid": "ad6dff67_e334bc04",
        "filename": "pc/dtlssrtptransport.h",
        "patchSetId": 2
      },
      "lineNbr": 25,
      "author": {
        "id": 5080
      },
      "writtenOn": "2017-10-05T04:01:23Z",
      "side": 1,
      "message": "It\u0027s not ideal to have so many duplicated methods here.\nI tried the idea of making an RtpTransportInternalAdapter(we already have RtpTransportAdapter for ORTC) and it is not straightforward for DtlsSrtpTransport to use the adapter pattern.\n\nFor example, \n\nAssuming we have:\nRtpTransport |r|;\n\nThe base class RtpTransportAdapter keeps a pointer of |r| (not owned) and implements the methods using |r|.\n\nSrtpTransport subclasses RtpTransportAdapter owning |r| and it also keeps a raw pointer of |r| \n\nDtlsSrtpTransport subclasses RtpTransportAdapter owning an SrtpTransport |s| which owns |r|,\nand because DtlsSrtpTransport is a subclass, it also keeps a raw pointer of |r|. \n\nWe need to make sure three objects using the same |r| underneath.\n\n\nThe DtlsSrtpTransport don\u0027t have to implement the RtpTransportInternal again with this method but the ownership management is just not simple enough. Do you think we should still do it or did I miss something here?\n\nIn addition, since DtlsSrtpTransport has so many overlapped methods with SrtpTransport, does it make sense for DtlsSrtpTransport to be a subclass of SrtpTransport meaning a special kind of SrtpTransport with extra capabilities (extracting keys from DtlsTransport.)?",
      "revId": "36d2d0ca787258dd9f6f16648913933748b99fba",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ca3a296e_8dfbdc89",
        "filename": "pc/dtlssrtptransport.h",
        "patchSetId": 2
      },
      "lineNbr": 25,
      "author": {
        "id": 5053
      },
      "writtenOn": "2017-10-07T18:28:53Z",
      "side": 1,
      "message": "I still don\u0027t understand the problem with the adapter approach. If every object in the stack calls methods of the object below, then they\u0027ll naturally all use the same |r|. Maybe you could show me the issue in person?\n\nAs for subclassing SrtpTransport: I don\u0027t think that\u0027s a good idea. We don\u0027t *want* DtlsSrtpTransport to expose \"SetRtpParams\"/etc., the idea is that it handles that internally.",
      "parentUuid": "ad6dff67_e334bc04",
      "revId": "36d2d0ca787258dd9f6f16648913933748b99fba",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b3a6cbd4_c8fcf10e",
        "filename": "pc/dtlssrtptransport.h",
        "patchSetId": 2
      },
      "lineNbr": 25,
      "author": {
        "id": 5080
      },
      "writtenOn": "2017-10-10T18:18:35Z",
      "side": 1,
      "message": "This approach works. I\u0027ll use it in next patch.",
      "parentUuid": "ca3a296e_8dfbdc89",
      "revId": "36d2d0ca787258dd9f6f16648913933748b99fba",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0a93fad2_c61f9ebe",
        "filename": "pc/dtlssrtptransport.h",
        "patchSetId": 2
      },
      "lineNbr": 30,
      "author": {
        "id": 5053
      },
      "writtenOn": "2017-10-07T18:28:53Z",
      "side": 1,
      "message": "This doesn\u0027t need to be public, does it?",
      "revId": "36d2d0ca787258dd9f6f16648913933748b99fba",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4ad5549d_76417543",
        "filename": "pc/dtlssrtptransport.h",
        "patchSetId": 2
      },
      "lineNbr": 30,
      "author": {
        "id": 5080
      },
      "writtenOn": "2017-10-10T18:18:35Z",
      "side": 1,
      "message": "No, it doesn\u0027t if DtlsSrtpTransport handles everything internally.",
      "parentUuid": "0a93fad2_c61f9ebe",
      "revId": "36d2d0ca787258dd9f6f16648913933748b99fba",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "28886a15_8984965f",
        "filename": "pc/dtlssrtptransport.h",
        "patchSetId": 2
      },
      "lineNbr": 34,
      "author": {
        "id": 5053
      },
      "writtenOn": "2017-10-07T18:28:53Z",
      "side": 1,
      "message": "This should connect to SignalDtlsState, so that keys will be applied once the DTLS handshake is done.",
      "revId": "36d2d0ca787258dd9f6f16648913933748b99fba",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "531338a2_f0df1dd9",
        "filename": "pc/dtlssrtptransport.h",
        "patchSetId": 2
      },
      "lineNbr": 34,
      "author": {
        "id": 5080
      },
      "writtenOn": "2017-10-10T18:18:35Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "28886a15_8984965f",
      "revId": "36d2d0ca787258dd9f6f16648913933748b99fba",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f0c3acea_85f53e16",
        "filename": "pc/dtlssrtptransport.h",
        "patchSetId": 2
      },
      "lineNbr": 126,
      "author": {
        "id": 5053
      },
      "writtenOn": "2017-10-07T18:28:53Z",
      "side": 1,
      "message": "Does this need to be public? It could be called internally when a different DTLS transport is set, right?",
      "revId": "36d2d0ca787258dd9f6f16648913933748b99fba",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "018e9dee_44dbf652",
        "filename": "pc/dtlssrtptransport.h",
        "patchSetId": 2
      },
      "lineNbr": 126,
      "author": {
        "id": 5080
      },
      "writtenOn": "2017-10-10T18:18:35Z",
      "side": 1,
      "message": "Yeah, you are right.",
      "parentUuid": "f0c3acea_85f53e16",
      "revId": "36d2d0ca787258dd9f6f16648913933748b99fba",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    }
  ]
}