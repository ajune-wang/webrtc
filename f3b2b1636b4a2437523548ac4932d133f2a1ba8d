{
  "comments": [
    {
      "key": {
        "uuid": "2bb3544e_3631e187",
        "filename": "audio/audio_receive_stream_unittest.cc",
        "patchSetId": 41
      },
      "lineNbr": 239,
      "author": {
        "id": 5119
      },
      "writtenOn": "2020-04-24T12:05:06Z",
      "side": 1,
      "message": "All of these can be parameterized, but perhaps it is not worth it for such a small set of configurations.",
      "range": {
        "startLine": 237,
        "startChar": 0,
        "endLine": 239,
        "endChar": 56
      },
      "revId": "f3b2b1636b4a2437523548ac4932d133f2a1ba8d",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dec517a9_ba3013d2",
        "filename": "audio/audio_send_stream_unittest.cc",
        "patchSetId": 41
      },
      "lineNbr": 313,
      "author": {
        "id": 5119
      },
      "writtenOn": "2020-04-24T12:05:06Z",
      "side": 1,
      "message": "I think ASSERT_* is easier on the test framework.",
      "range": {
        "startLine": 313,
        "startChar": 4,
        "endLine": 313,
        "endChar": 14
      },
      "revId": "f3b2b1636b4a2437523548ac4932d133f2a1ba8d",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d89d11d4_03c88877",
        "filename": "audio/audio_send_stream_unittest.cc",
        "patchSetId": 41
      },
      "lineNbr": 431,
      "author": {
        "id": 5119
      },
      "writtenOn": "2020-04-24T12:05:06Z",
      "side": 1,
      "message": "Do we have test coverage of send_stream-\u003eGetStats() with nullptr APM?\n\nWDYT about having this test loop over use_null_audio_processing like the rest, and only EXPECT on the apm_statistics values if !use_null_audio_processing?",
      "range": {
        "startLine": 429,
        "startChar": 0,
        "endLine": 431,
        "endChar": 42
      },
      "revId": "f3b2b1636b4a2437523548ac4932d133f2a1ba8d",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3f91d6c1_a6c8f12d",
        "filename": "audio/audio_send_stream_unittest.cc",
        "patchSetId": 41
      },
      "lineNbr": 465,
      "author": {
        "id": 5119
      },
      "writtenOn": "2020-04-24T12:05:06Z",
      "side": 1,
      "message": "Same question",
      "range": {
        "startLine": 462,
        "startChar": 1,
        "endLine": 465,
        "endChar": 42
      },
      "revId": "f3b2b1636b4a2437523548ac4932d133f2a1ba8d",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "62c444fb_75441b1f",
        "filename": "media/engine/webrtc_voice_engine.cc",
        "patchSetId": 41
      },
      "lineNbr": 470,
      "author": {
        "id": 5119
      },
      "writtenOn": "2020-04-24T12:05:06Z",
      "side": 1,
      "message": "This can also be moved below the if (!ap) check, right?",
      "range": {
        "startLine": 459,
        "startChar": 0,
        "endLine": 470,
        "endChar": 0
      },
      "revId": "f3b2b1636b4a2437523548ac4932d133f2a1ba8d",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c5e1c775_cd65f608",
        "filename": "media/engine/webrtc_voice_engine.cc",
        "patchSetId": 41
      },
      "lineNbr": 474,
      "author": {
        "id": 5119
      },
      "writtenOn": "2020-04-24T12:05:06Z",
      "side": 1,
      "message": "Consider logging at LS_INFO if (!ap), similar to the verbosity of the rest of the code",
      "range": {
        "startLine": 472,
        "startChar": 0,
        "endLine": 474,
        "endChar": 3
      },
      "revId": "f3b2b1636b4a2437523548ac4932d133f2a1ba8d",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d47d30cc_08db16c7",
        "filename": "media/engine/webrtc_voice_engine.cc",
        "patchSetId": 41
      },
      "lineNbr": 601,
      "author": {
        "id": 5119
      },
      "writtenOn": "2020-04-24T12:05:06Z",
      "side": 1,
      "message": "Since invocation of these functions most likely originates in client-level API calls, WDYT about logging a warning that the functionality is disabled?",
      "range": {
        "startLine": 573,
        "startChar": 1,
        "endLine": 601,
        "endChar": 0
      },
      "revId": "f3b2b1636b4a2437523548ac4932d133f2a1ba8d",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8e3c40c6_46201b85",
        "filename": "media/engine/webrtc_voice_engine_unittest.cc",
        "patchSetId": 41
      },
      "lineNbr": 1,
      "author": {
        "id": 5126
      },
      "writtenOn": "2020-04-23T09:25:37Z",
      "side": 1,
      "message": "You add a substantial amount of new test code in this file, whereas in other test files you simply added loops around existing tests. Was that for some reason impossible or impractical here?",
      "revId": "f3b2b1636b4a2437523548ac4932d133f2a1ba8d",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "edf192a8_550b422b",
        "filename": "media/engine/webrtc_voice_engine_unittest.cc",
        "patchSetId": 41
      },
      "lineNbr": 1,
      "author": {
        "id": 5125
      },
      "writtenOn": "2020-04-23T10:15:19Z",
      "side": 1,
      "message": "Yes, my first approach was to do this here as well.\n\nHowever, since this is a fixture TEST_F, that failed with the simple loop approach. The problem was that the initial setup at the test-setup time should be different if a null APM should be used or not.\n\nI think that one maybe can workaround that even with the fixture approach by tweaking the setup procedure (it is definitely possible to do it without the fixture-approach) but I did not want to change the existing test-code too much.\n\nWDYT? Does that make sense? If not, what is best to do?: Move to non-fixture tests or try to tweak the setup process to work with this?",
      "parentUuid": "8e3c40c6_46201b85",
      "revId": "f3b2b1636b4a2437523548ac4932d133f2a1ba8d",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5c456c74_f464669e",
        "filename": "media/engine/webrtc_voice_engine_unittest.cc",
        "patchSetId": 41
      },
      "lineNbr": 194,
      "author": {
        "id": 5119
      },
      "writtenOn": "2020-04-24T12:05:06Z",
      "side": 1,
      "message": "You can signal that this is unused by omitting the parameter name.\n\nWebRtcVoiceEngineTestFake(const char* field_trials, bool)",
      "range": {
        "startLine": 194,
        "startChar": 59,
        "endLine": 194,
        "endChar": 65
      },
      "revId": "f3b2b1636b4a2437523548ac4932d133f2a1ba8d",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "50399aa4_34335bb5",
        "filename": "media/engine/webrtc_voice_engine_unittest.cc",
        "patchSetId": 41
      },
      "lineNbr": 196,
      "author": {
        "id": 5119
      },
      "writtenOn": "2020-04-24T12:05:06Z",
      "side": 1,
      "message": "What do you think about taking and storing a \"use_null_audio_processing\" parameter, and place all related EXPECT calls behind a check `if (ues_null_audio_processing)`? Is there anything stopping us from doing this? Or does it make WebRtcVoiceEngineTestFake too hard to read?\n\n\nIt appears that there is _some_ support for parameterizing a test fixture.\nhttps://stackoverflow.com/questions/3152326/google-test-parameterized-tests-which-use-an-existing-test-fixture-class",
      "range": {
        "startLine": 192,
        "startChar": 0,
        "endLine": 196,
        "endChar": 0
      },
      "revId": "f3b2b1636b4a2437523548ac4932d133f2a1ba8d",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dd577868_90cb3e64",
        "filename": "modules/audio_processing/audio_processing_builder_impl.cc",
        "patchSetId": 41
      },
      "lineNbr": 26,
      "author": {
        "id": 5087
      },
      "writtenOn": "2020-04-23T10:41:41Z",
      "side": 1,
      "message": "Should this also keep WEBRTC_EXCLUDE_AUDIO_PROCESSING_MODULE into account?",
      "range": {
        "startLine": 23,
        "startChar": 0,
        "endLine": 26,
        "endChar": 1
      },
      "revId": "f3b2b1636b4a2437523548ac4932d133f2a1ba8d",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "475de80f_1fb62d68",
        "filename": "modules/audio_processing/audio_processing_builder_impl.cc",
        "patchSetId": 41
      },
      "lineNbr": 26,
      "author": {
        "id": 5125
      },
      "writtenOn": "2020-04-23T11:00:16Z",
      "side": 1,
      "message": "It implicitly does since it calls the AudioProcessingBuilder::Create(const webrtc::Config\u0026 config) method, which in turn reacts on that build flag.",
      "parentUuid": "dd577868_90cb3e64",
      "range": {
        "startLine": 23,
        "startChar": 0,
        "endLine": 26,
        "endChar": 1
      },
      "revId": "f3b2b1636b4a2437523548ac4932d133f2a1ba8d",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "870dd75f_6e1228e0",
        "filename": "modules/audio_processing/audio_processing_builder_impl.cc",
        "patchSetId": 41
      },
      "lineNbr": 26,
      "author": {
        "id": 5087
      },
      "writtenOn": "2020-04-23T11:26:58Z",
      "side": 1,
      "message": "Oh my... 😄 How did I miss that?",
      "parentUuid": "475de80f_1fb62d68",
      "range": {
        "startLine": 23,
        "startChar": 0,
        "endLine": 26,
        "endChar": 1
      },
      "revId": "f3b2b1636b4a2437523548ac4932d133f2a1ba8d",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2a6ba786_01554c1c",
        "filename": "pc/peer_connection_integrationtest.cc",
        "patchSetId": 41
      },
      "lineNbr": 657,
      "author": {
        "id": 5126
      },
      "writtenOn": "2020-04-23T09:25:37Z",
      "side": 1,
      "message": "Can this be done unconditionally? It would make the test easier to read.",
      "revId": "f3b2b1636b4a2437523548ac4932d133f2a1ba8d",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0a8558e9_5ca32322",
        "filename": "pc/peer_connection_integrationtest.cc",
        "patchSetId": 41
      },
      "lineNbr": 657,
      "author": {
        "id": 5125
      },
      "writtenOn": "2020-04-23T10:15:19Z",
      "side": 1,
      "message": "It could. However, I\u0027m slightly concerned that that would reduce the test coverage/value of the test for the case where APM is actually not forced to not be built. \n\nThe media_deps.audio_processing field is populated by the\nwebrtc::SetMediaEngineDefaults method in\nthird_party/webrtc/media/engine/webrtc_media_engine_defaults.h\n\nFrom what I can see, it is only used for testing, so a variant could be to move this conditional into that. However, there is nothing stating the the method must only be used for tests, so my concern with that approach is therefore that it may at some point be used for non-tests, which in turn would cause AudioProcessingBuilderForTesting to be used for production (non-test) code, and thereby sneak in a the APM binary code regardless of the build flag.\n\nMy concern with using AudioProcessingBuilderForTesting() regardless of whether media_deps.audio_processing is already assigned is that it would remove the test coverage of the corresponding functionality in webrtc::SetMediaEngineDefaults.\nThis is not that nice, since that is the normal way that audio_processing would be created (since the build flag for this is default off).\n\nWDYT?",
      "parentUuid": "2a6ba786_01554c1c",
      "revId": "f3b2b1636b4a2437523548ac4932d133f2a1ba8d",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5b00e570_57259572",
        "filename": "pc/peer_connection_integrationtest.cc",
        "patchSetId": 41
      },
      "lineNbr": 657,
      "author": {
        "id": 5119
      },
      "writtenOn": "2020-04-24T11:20:13Z",
      "side": 1,
      "message": "It appears that SetMediaEngineDefaults was introduced to be used in a test:\nhttps://webrtc-review.googlesource.com/c/src/+/131952\n\nPerhaps we can check in with Danil about if the target can be made test_only?",
      "parentUuid": "0a8558e9_5ca32322",
      "revId": "f3b2b1636b4a2437523548ac4932d133f2a1ba8d",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "175dbed0_27a71f06",
        "filename": "test/fuzzers/BUILD.gn",
        "patchSetId": 41
      },
      "lineNbr": 440,
      "author": {
        "id": 5119
      },
      "writtenOn": "2020-04-24T11:20:13Z",
      "side": 1,
      "message": "Is this part necessary? I think the helper only uses an APM provided from audio_processing_configs_fuzzer.cc",
      "range": {
        "startLine": 440,
        "startChar": 0,
        "endLine": 440,
        "endChar": 58
      },
      "revId": "f3b2b1636b4a2437523548ac4932d133f2a1ba8d",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cce09a89_7603dcb2",
        "filename": "test/fuzzers/BUILD.gn",
        "patchSetId": 41
      },
      "lineNbr": 477,
      "author": {
        "id": 5119
      },
      "writtenOn": "2020-04-24T11:20:13Z",
      "side": 1,
      "message": "Is this necessary? agc_fuzzer does not create an APM.",
      "range": {
        "startLine": 476,
        "startChar": 50,
        "endLine": 477,
        "endChar": 58
      },
      "revId": "f3b2b1636b4a2437523548ac4932d133f2a1ba8d",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b2fb5e5d_ac035889",
        "filename": "webrtc.gni",
        "patchSetId": 41
      },
      "lineNbr": 100,
      "author": {
        "id": 5126
      },
      "writtenOn": "2020-04-23T09:25:37Z",
      "side": 1,
      "message": "Call it \"rtc_include_audio_processing_module\" instead, to avoid double negatives?",
      "revId": "f3b2b1636b4a2437523548ac4932d133f2a1ba8d",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "187cf31c_3200add0",
        "filename": "webrtc.gni",
        "patchSetId": 41
      },
      "lineNbr": 100,
      "author": {
        "id": 5125
      },
      "writtenOn": "2020-04-23T10:15:19Z",
      "side": 1,
      "message": "I agree that that could make sense.\nThis does partly follow the pattern elsewhere in this file\nE.g., \nrtc_exclude_transient_suppressor \u003d false\nrtc_exclude_metrics_default \u003d build_with_chromium\nrtc_exclude_field_trial_default \u003d false\n\nbut there are also several examples of the oppsite \ne.g., \nrtc_include_builtin_audio_codecs \u003d true\n\n\nI personally is like the \"exclude\" term, since it kind of states what the deliberate action with this is and what the default behavior is that most users want: the intention is not to explicitly choose to include it, but rather to explicitly choose to exclude it.\n\nAnother aspect of keeping the \"exclude\" term is that it for APM we now already have added \"rtc_exclude_transient_suppressor\" and it would be nice to follow that pattern.\n\nWDYT?",
      "parentUuid": "b2fb5e5d_ac035889",
      "revId": "f3b2b1636b4a2437523548ac4932d133f2a1ba8d",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0da367bc_e94b38fd",
        "filename": "webrtc.gni",
        "patchSetId": 41
      },
      "lineNbr": 100,
      "author": {
        "id": 5087
      },
      "writtenOn": "2020-04-23T10:29:13Z",
      "side": 1,
      "message": "I also like the idea of using \"exclude\" since this highlights the fact that we are changing the default.",
      "parentUuid": "187cf31c_3200add0",
      "revId": "f3b2b1636b4a2437523548ac4932d133f2a1ba8d",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    }
  ]
}