{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "ccbaa186_48d7a914",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 9,
      "author": {
        "id": 5117
      },
      "writtenOn": "2021-07-09T08:13:31Z",
      "side": 1,
      "message": "That\u0027s weird. For vp8/vp9 we use only 1 temporal reference all the time.\n\nAlso the code in openH264 doesn\u0027t even compute the same thing. It takes half the GOP size (which is 2^(tl_number-1)) [1] \nLooks like there\u0027s a bug - a missed LOG call.\n\nSo, for 2 layers it will currently overwrite the requested reference number with 1, for 3 layers - with 2. for 4 layers - with 4.\n\nThis seems like a very counter-intuitive and weird behavior.\nDoes H264 not support using only one temporal reference at all?\n\nIf anything, I would press openh264 to remove this check.\n\n[1] https://source.chromium.org/chromium/chromium/src/+/main:third_party/openh264/src/codec/encoder/core/src/au_set.cpp;l\u003d105;drc\u003d8e90a2775c5b9448324fe8fef11d177cb65f36cc",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 9,
        "endChar": 51
      },
      "revId": "a5971117183d6f1fb6295d523ab1b38922b0e3e1",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f5bc517d_fc9e3029",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 9,
      "author": {
        "id": 5825
      },
      "writtenOn": "2021-07-09T08:25:31Z",
      "side": 1,
      "message": "iNumRefFrame specifies number of total reference buffers, not number of references to use for prediction.\n\n\u003e\u003eLooks like there\u0027s a bug - a missed LOG call.\nYes, good catch. For \u003e\u003d4 temp layers it allocates more than needed. But should not affect WebRTC since we never use more than 3 layers.\n\n\u003e\u003eDoes H264 not support using only one temporal reference at all?\nYes, the spec support this feature. But there is no control for that in OpenH264 as I can see.",
      "parentUuid": "ccbaa186_48d7a914",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 9,
        "endChar": 51
      },
      "revId": "a5971117183d6f1fb6295d523ab1b38922b0e3e1",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3d7dfa07_06168d24",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5825
      },
      "writtenOn": "2021-07-08T14:08:44Z",
      "side": 1,
      "message": "Asa is OOO. Erik, could you please take a look?",
      "revId": "a5971117183d6f1fb6295d523ab1b38922b0e3e1",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "19deca4e_8fd2ac23",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 9338
      },
      "writtenOn": "2021-07-09T01:25:02Z",
      "side": 1,
      "message": "I think, by setting the number of frames to 1, we make OpenH264 encoder produce the same temporal layer reference structure as vp8 and vp9.\nAlthough OpenH264 encoder README states it uses multiple reference frames in the case of 3 and 4 temporal layers. https://github.com/cisco/openh264#encoder-features\n\nWell, it may not be a big deal to use multiple reference frames. But doesn\u0027t using one reference frames help encoding fast?",
      "revId": "a5971117183d6f1fb6295d523ab1b38922b0e3e1",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "022c7a8a_0b0fd146",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5117
      },
      "writtenOn": "2021-07-09T08:13:31Z",
      "side": 1,
      "message": "I ",
      "revId": "a5971117183d6f1fb6295d523ab1b38922b0e3e1",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2d860518_63bab429",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5825
      },
      "writtenOn": "2021-07-09T08:15:37Z",
      "side": 1,
      "message": "We need to distinguish between number of reference buffers and number of references used for prediction of a frame.\n\nIf we want top temporal layer to be able to use the previous temporal layer for prediction (T2 to refer T1 in case of 3 temporal layers) then we need N\u003dnum_temp_layers-1 reference buffers at least.\n\nIn VP8/9 number of reference buffers is hardcoded by the spec: 3 for VP8 and 8 for VP9. There is no such parameter as number of reference buffers in VP8/9 bitstream. In H264 that varies between 0 and 16, and is controlled by iNumRefFrame in OpenH264.\n\nI couldn\u0027t find a control for number of references to use for prediction in OpenH264. In libvpx VP8/9 there are flags for that.\n\nNote that, as the description says, OpenH264 has logic that overrides iNumRefFrame to max(iNumRefFrame, num_temp_layers - 1). I.e., even if you set it to 1 the final value written into the bitstream will be 2 when 3 temporal layers are requested.",
      "parentUuid": "19deca4e_8fd2ac23",
      "revId": "a5971117183d6f1fb6295d523ab1b38922b0e3e1",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6a282c2e_6b1f75b3",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5117
      },
      "writtenOn": "2021-07-09T08:20:06Z",
      "side": 1,
      "message": "Ah, so this is number of reference buffers and not the number of references per frame? Then it makes sense (still, calculations inside openh264 seem to be missing a LOG call). \n\nSergey, could you please update the description to clear that ambiguation.",
      "parentUuid": "2d860518_63bab429",
      "revId": "a5971117183d6f1fb6295d523ab1b38922b0e3e1",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "64c7fd32_f77ef336",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 9338
      },
      "writtenOn": "2021-07-09T08:48:42Z",
      "side": 1,
      "message": "Ack. Thanks. I and Ilya misunderstood the meaning. :)",
      "parentUuid": "6a282c2e_6b1f75b3",
      "revId": "a5971117183d6f1fb6295d523ab1b38922b0e3e1",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b5b91090_d1450384",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5825
      },
      "writtenOn": "2021-07-09T11:34:36Z",
      "side": 1,
      "message": "Updated the description and commented in the code:\n    // iNumRefFrame specifies total number of reference buffers to allocate.\n    // For N temporal layers we need at least (N - 1) buffers to store last\n    // encoded frames of all reference temporal layers.\n    // Note that there is no API in OpenH254 encoder to specify exact set of\n    // references to be used to prediction of a given frame. Encoder can\n    // theoretically use all available reference buffers.",
      "parentUuid": "64c7fd32_f77ef336",
      "revId": "a5971117183d6f1fb6295d523ab1b38922b0e3e1",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    }
  ]
}