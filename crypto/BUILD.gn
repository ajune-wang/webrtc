# Copyright (c) 2018 The WebRTC project authors. All Rights Reserved.
#
# Use of this source code is governed by a BSD-style license
# that can be found in the LICENSE file in the root of the source
# tree. An additional intellectual property rights grant can be found
# in the file PATENTS.  All contributing project authors may
# be found in the AUTHORS file in the root of the source tree.

import("../webrtc.gni")
if (is_android) {
  import("//build/config/android/config.gni")
  import("//build/config/android/rules.gni")
}

if (!rtc_build_ssl) {
  config("external_ssl_library") {
    assert(rtc_ssl_root != "",
           "You must specify rtc_ssl_root when rtc_build_ssl==0.")
    include_dirs = [ rtc_ssl_root ]
  }
}

rtc_source_set("message_digest") {
  sources = [
    "messagedigest.cc",
    "messagedigest.h",
  ]
}

rtc_static_library("crypto") {
  sources = [
    "openssl.h",
    "openssladapter.cc",
    "openssladapter.h",
    "opensslcertificate.cc",
    "opensslcertificate.h",
    "openssldigest.cc",
    "openssldigest.h",
    "opensslidentity.cc",
    "opensslidentity.h",
    "opensslsessioncache.cc",
    "opensslsessioncache.h",
    "opensslstreamadapter.cc",
    "opensslstreamadapter.h",
    "opensslutility.cc",
    "opensslutility.h",
    "rtccertificate.cc",
    "rtccertificate.h",
    "rtccertificategenerator.cc",
    "rtccertificategenerator.h",
    "ssladapter.cc",
    "ssladapter.h",
    "sslcertificate.cc",
    "sslcertificate.h",
    "sslfingerprint.cc",
    "sslfingerprint.h",
    "sslidentity.cc",
    "sslidentity.h",
    "sslroots.h",
    "sslstreamadapter.cc",
    "sslstreamadapter.h",
  ]

  public_deps = [  # no-presubmit-check TODO(webrtc:8603)
    ":message_digest",
  ]

  deps = [
    "..:webrtc_common",
    "../api:array_view",
    "../api:call_api",
    "../logging:rtc_event_log_api",
    "../rtc_base:checks",
    "../rtc_base:rtc_base",
    "../rtc_base:rtc_task_queue",
    "../rtc_base:stringutils",
    "../rtc_base/third_party/base64",
    "../rtc_base/third_party/sigslot",
    "../system_wrappers:metrics_api",
    "//third_party/abseil-cpp/absl/memory",
    "//third_party/abseil-cpp/absl/types:optional",
  ]

  if (build_with_chromium) {
    include_dirs = [ "../../boringssl/src/include" ]
  } else {
    sources += [ "sslroots.h" ]
  }
  if (rtc_build_ssl) {
    deps += [ "//third_party/boringssl" ]
  } else {
    configs += [ ":external_ssl_library" ]
  }
}

rtc_source_set("crypto_tests_utils") {
  testonly = true
  sources = [
    "fakesslidentity.cc",
    "fakesslidentity.h",
    "testcertificateverifier.h",
  ]
  deps = [
    "../api/units:time_delta",
    "../rtc_base:checks",
    "../rtc_base:rtc_base",
    "../rtc_base:stringutils",
    "../rtc_base/third_party/sigslot",
    "../test:field_trial",
    "../test:test_support",
    "//third_party/abseil-cpp/absl/memory",
  ]
  public_deps = [ # no-presubmit-check TODO(webrtc:8603)
    "//testing/gtest",
  ]
}

rtc_source_set("crypto_unittests") {
  testonly = true
  defines = []

  sources = [
    "messagedigest_unittest.cc",
    "rtccertificate_unittest.cc",
    "rtccertificategenerator_unittest.cc",
  ]
  if (is_posix || is_fuchsia) {
    sources += [
      "openssladapter_unittest.cc",
      "opensslsessioncache_unittest.cc",
      "opensslutility_unittest.cc",
      "ssladapter_unittest.cc",
      "sslidentity_unittest.cc",
      "sslstreamadapter_unittest.cc",
    ]
  }
  deps = [
    "../api:array_view",
    "../rtc_base:checks",
    "../rtc_base:rtc_base_tests_main",
    "../rtc_base:rtc_base_tests_utils",
    "../rtc_base:stringutils",
    "../rtc_base/third_party/sigslot",
    "../test:fileutils",
    "../test:test_support",
    "//third_party/abseil-cpp/absl/memory",
    "//third_party/abseil-cpp/absl/types:optional",
  ]
  public_deps = [ # no-presubmit-check TODO(webrtc:8603)
    "../rtc_base:rtc_base",
  ]
  if (build_with_chromium) {
    include_dirs = [ "../../boringssl/src/include" ]
  }
  if (rtc_build_ssl) {
    deps += [ "//third_party/boringssl" ]
  } else {
    configs += [ ":external_ssl_library" ]
  }
}
