{
  "comments": [
    {
      "key": {
        "uuid": "a16f6640_5319856e",
        "filename": "api/peerconnectioninterface.h",
        "patchSetId": 1
      },
      "lineNbr": 162,
      "author": {
        "id": 5077
      },
      "writtenOn": "2018-12-05T11:50:40Z",
      "side": 1,
      "message": "This applies to other interfaces as well - should it instead go in a global .md file? \"DESIGN.md\"? Or just move it to the top of this .h if it is considered \"root\" enough.",
      "revId": "997d84363efd54d201973824299a6f69f3f6c1a0",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dd7ff4b1_784a6a65",
        "filename": "api/peerconnectioninterface.h",
        "patchSetId": 1
      },
      "lineNbr": 166,
      "author": {
        "id": 5142
      },
      "writtenOn": "2018-12-05T09:28:57Z",
      "side": 1,
      "message": "Hang on, this wouldn\u0027t be true if the \"calling thread\" is the e.g. the signaling thread... Can you clarify?",
      "revId": "997d84363efd54d201973824299a6f69f3f6c1a0",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "752fd7ec_d2a92469",
        "filename": "api/peerconnectioninterface.h",
        "patchSetId": 1
      },
      "lineNbr": 166,
      "author": {
        "id": 5634
      },
      "writtenOn": "2018-12-05T10:29:25Z",
      "side": 1,
      "message": "If the calling thread is the signalling thread, this still applies. No other task is going to execute on the signalling thread while the function call is in progress.",
      "parentUuid": "dd7ff4b1_784a6a65",
      "revId": "997d84363efd54d201973824299a6f69f3f6c1a0",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3c8c9efc_74326fc6",
        "filename": "api/peerconnectioninterface.h",
        "patchSetId": 1
      },
      "lineNbr": 176,
      "author": {
        "id": 5126
      },
      "writtenOn": "2018-12-05T12:30:49Z",
      "side": 1,
      "message": "This caveat seems scary. Allowing subclasses to impose additional restrictions means that you can\u0027t safely treat them as an instance of the base class, but since this is just a comment, the compiler doesn\u0027t know that. All restrictions should apply to the base class too, so that subclasses don\u0027t have to add restrictions.",
      "revId": "997d84363efd54d201973824299a6f69f3f6c1a0",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "36ca450a_77a2e9ff",
        "filename": "api/peerconnectioninterface.h",
        "patchSetId": 1
      },
      "lineNbr": 176,
      "author": {
        "id": 5634
      },
      "writtenOn": "2018-12-05T12:53:00Z",
      "side": 1,
      "message": "But it\u0027s true - the two subclasses of api/peerconnecctioninterface.h are api/peerconnectionproxy (which can be called on any thread, but dispatches) and pc/peerconnection - which can only be invoked on the signalling thread.",
      "parentUuid": "3c8c9efc_74326fc6",
      "revId": "997d84363efd54d201973824299a6f69f3f6c1a0",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8bd8b921_74a5f46b",
        "filename": "api/peerconnectioninterface.h",
        "patchSetId": 1
      },
      "lineNbr": 176,
      "author": {
        "id": 5126
      },
      "writtenOn": "2018-12-05T13:51:18Z",
      "side": 1,
      "message": "This means that if all we know about an object is that it\u0027s an instance of PeerConnectionInterface, we don\u0027t know that it\u0027s safe to call its methods from any thread other than the signaling thread.\n\nIt would be best to document this (that it may only be called from the signaling thread) as part of the contract for PeerConnectionInterface, and then document that the subclass in api/peerconnectionproxy lifts these restrictions. A subclass can safely be made strictly *more* capable, because then it still upholds the base class contract.",
      "parentUuid": "36ca450a_77a2e9ff",
      "revId": "997d84363efd54d201973824299a6f69f3f6c1a0",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "67e91eeb_b758cec4",
        "filename": "api/peerconnectioninterface.h",
        "patchSetId": 1
      },
      "lineNbr": 177,
      "author": {
        "id": 5142
      },
      "writtenOn": "2018-12-05T09:26:01Z",
      "side": 1,
      "message": "nit: Remove empty line?",
      "revId": "997d84363efd54d201973824299a6f69f3f6c1a0",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c1418fea_35950278",
        "filename": "api/peerconnectioninterface.h",
        "patchSetId": 1
      },
      "lineNbr": 177,
      "author": {
        "id": 5634
      },
      "writtenOn": "2018-12-05T10:29:25Z",
      "side": 1,
      "message": "when cleaning up :-)",
      "parentUuid": "67e91eeb_b758cec4",
      "revId": "997d84363efd54d201973824299a6f69f3f6c1a0",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    }
  ]
}