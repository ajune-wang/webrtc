{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "003f27c4_81b70950",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 5634
      },
      "writtenOn": "2024-03-06T12:55:22Z",
      "side": 1,
      "message": "Commenting on the standards process only.",
      "revId": "cabfadaf23aa545122af71efcefa4146a7127bda",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f486500a_16b282f8",
        "filename": "modules/audio_coding/neteq/decision_logic.cc",
        "patchSetId": 6
      },
      "lineNbr": 217,
      "author": {
        "id": 8038
      },
      "writtenOn": "2024-03-06T08:52:20Z",
      "side": 1,
      "message": "Tight latency bounds may have a negative effect on quality (resulting in more time stretching and underruns). Existing users of the playoutDelayHint API may use it to increase quality (at the cost of latency). This change breaks what we originally intended with the spec.\n\nI think it would be more appropriate to have another API, for example where it\u0027s possible to set both the min and max delay, for this use case where a fixed delay is more important than quality.",
      "range": {
        "startLine": 213,
        "startChar": 0,
        "endLine": 217,
        "endChar": 3
      },
      "revId": "cabfadaf23aa545122af71efcefa4146a7127bda",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "180972bc_8944a312",
        "filename": "modules/audio_coding/neteq/decision_logic.cc",
        "patchSetId": 6
      },
      "lineNbr": 217,
      "author": {
        "id": 3281934
      },
      "writtenOn": "2024-03-06T10:22:12Z",
      "side": 1,
      "message": "Another API like proposed in https://github.com/w3c/webrtc-extensions/issues/199 would be ideal, but adding a new web exposed API is a painful process. Here I just came up with a workaround by setting the jitterBufferTarget to same value multiple times in a row, which results in setting precise_jitter_buffer_target_mode_ \u003d true. Rest of the changes are guarded by precise_jitter_buffer_target_mode_.",
      "parentUuid": "f486500a_16b282f8",
      "range": {
        "startLine": 213,
        "startChar": 0,
        "endLine": 217,
        "endChar": 3
      },
      "revId": "cabfadaf23aa545122af71efcefa4146a7127bda",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a75b6b96_9512c22c",
        "filename": "modules/audio_coding/neteq/decision_logic.cc",
        "patchSetId": 6
      },
      "lineNbr": 217,
      "author": {
        "id": 8038
      },
      "writtenOn": "2024-03-06T10:46:50Z",
      "side": 1,
      "message": "I know it\u0027s a painful process but it seems like the right thing in this case :) \n\nChanging the behavior like this seems highly non-obvious for users and is not something that will be approved (sorry).",
      "parentUuid": "180972bc_8944a312",
      "range": {
        "startLine": 213,
        "startChar": 0,
        "endLine": 217,
        "endChar": 3
      },
      "revId": "cabfadaf23aa545122af71efcefa4146a7127bda",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dd892e36_d6039ec4",
        "filename": "modules/audio_coding/neteq/decision_logic.cc",
        "patchSetId": 6
      },
      "lineNbr": 217,
      "author": {
        "id": 3281934
      },
      "writtenOn": "2024-03-06T12:25:29Z",
      "side": 1,
      "message": "Ok, I see. What about triggering \"precise_jitter_buffer_target_mode_ \u003d true\" when min and max delay are equal? NetEq already has API to set min and max delay.\nAnd there exists rtp extension https://webrtc.googlesource.com/src/+/refs/heads/main/docs/native-code/rtp-hdrext/playout-delay, which if i am not missing something, is wired only for video. Wiring it for audio too might give the desired control to application layer, and at the same time it is worth to give a try with adding a new web exposed API.",
      "parentUuid": "a75b6b96_9512c22c",
      "range": {
        "startLine": 213,
        "startChar": 0,
        "endLine": 217,
        "endChar": 3
      },
      "revId": "cabfadaf23aa545122af71efcefa4146a7127bda",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "503d9e93_e0878829",
        "filename": "modules/audio_coding/neteq/decision_logic.cc",
        "patchSetId": 6
      },
      "lineNbr": 217,
      "author": {
        "id": 5634
      },
      "writtenOn": "2024-03-06T12:55:22Z",
      "side": 1,
      "message": "Adding new functionality by abusing (\"re-interpreting\") existing APIs is generally frowned upon. If you have an API proposal in a bug / PR in the working group, it is acceptable (and customary) to add it in chromium behind a feature flag, so that it can be experimented with before it is standardized.\n\nI am very much aware that the process of driving through new features is a lot more painful than it seems to have any justification for being - but we haven\u0027t abandoned it yet; if we manage to drive it through, we at least have the hope that the browsers eventually converge on it; with non-standard API hacks, the chances are low-to-zero.",
      "parentUuid": "dd892e36_d6039ec4",
      "range": {
        "startLine": 213,
        "startChar": 0,
        "endLine": 217,
        "endChar": 3
      },
      "revId": "cabfadaf23aa545122af71efcefa4146a7127bda",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9a7d026f_e0ec58d5",
        "filename": "modules/audio_coding/neteq/decision_logic.cc",
        "patchSetId": 6
      },
      "lineNbr": 217,
      "author": {
        "id": 3281934
      },
      "writtenOn": "2024-03-07T07:20:13Z",
      "side": 1,
      "message": "Is there a need for new API in NetEq too or can min_delay \u003d\u003d max_delay condition to trigger precise target mode be sufficient and not considered as abuse of existing API? Also what would be the correct course of actions? Does it first need to be implemented in libWebrtc and then add JS API or should I start from intent to implement in blink-dev?",
      "parentUuid": "503d9e93_e0878829",
      "range": {
        "startLine": 213,
        "startChar": 0,
        "endLine": 217,
        "endChar": 3
      },
      "revId": "cabfadaf23aa545122af71efcefa4146a7127bda",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9c4ad0c5_7c3ccb96",
        "filename": "modules/audio_coding/neteq/decision_logic.cc",
        "patchSetId": 6
      },
      "lineNbr": 217,
      "author": {
        "id": 8038
      },
      "writtenOn": "2024-03-07T10:41:09Z",
      "side": 1,
      "message": "I\u0027d like to avoid any special modes in NetEq (like a fixed delay mode), if possible. However, I do think it makes sense to allow applications to set a maximum target delay (that has been requested before).\n\nI think it would be good to have a design discussion somewhere, to discuss what the goals are and how to achieve them in the best way. Not sure how that\u0027s usually done for external contributors, github or bug or doc? Any input Harald?",
      "parentUuid": "9a7d026f_e0ec58d5",
      "range": {
        "startLine": 213,
        "startChar": 0,
        "endLine": 217,
        "endChar": 3
      },
      "revId": "cabfadaf23aa545122af71efcefa4146a7127bda",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f2c13a68_0b4d1a84",
        "filename": "modules/audio_coding/neteq/decision_logic.cc",
        "patchSetId": 6
      },
      "lineNbr": 217,
      "author": {
        "id": 5634
      },
      "writtenOn": "2024-03-07T14:12:38Z",
      "side": 1,
      "message": "For API changes like adding min and max values to JitterBufferTarget, the proposal for the functionality should be added as an issue on https://github.com/w3c/webrtc-extensions and the proposed API should be added as a PR on the same repo.\n\nThe current jitterBufferTarget parameter doesn\u0027t say whether it\u0027s intended as a min or a max.",
      "parentUuid": "9c4ad0c5_7c3ccb96",
      "range": {
        "startLine": 213,
        "startChar": 0,
        "endLine": 217,
        "endChar": 3
      },
      "revId": "cabfadaf23aa545122af71efcefa4146a7127bda",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7c1592b2_15c95f4a",
        "filename": "modules/audio_coding/neteq/decision_logic.cc",
        "patchSetId": 6
      },
      "lineNbr": 217,
      "author": {
        "id": 3281934
      },
      "writtenOn": "2024-03-07T14:31:45Z",
      "side": 1,
      "message": "I did some more testing and it seems main evil at the moment is here:\n\"const int64_t high_limit \u003d low_limit +\n                                 packet_arrival_history_-\u003eGetMaxDelayMs() +\n                                 kDelayAdjustmentGranularityMs;\"\nBasically it doesn\u0027t allow the playout delay to never reach target. Lets say the GetMaxDelayMs() returns 40 and adding the granularity 20 means that playout delay remains at +60ms forever given that the target is stable at some value. This affects also normal usage without externally set jitterBufferTarget, leaving the delay potentially at much higher values than necessary. Can we get rid of the + packet_arrival_history_-\u003eGetMaxDelayMs() and find other solution to avoid acceleration right after underrun what you mentioned earlier? Another question is if \"config_.enable_stable_delay_mode\" is something which will be always used in the future and that can be counted on?",
      "parentUuid": "9c4ad0c5_7c3ccb96",
      "range": {
        "startLine": 213,
        "startChar": 0,
        "endLine": 217,
        "endChar": 3
      },
      "revId": "cabfadaf23aa545122af71efcefa4146a7127bda",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "50d85202_8ee2ba6d",
        "filename": "modules/audio_coding/neteq/decision_logic.cc",
        "patchSetId": 6
      },
      "lineNbr": 217,
      "author": {
        "id": 8038
      },
      "writtenOn": "2024-03-08T12:42:10Z",
      "side": 1,
      "message": "Yes, it is possible that it could be done better. In the initial version we used `max(low_limit, GetMaxDelayMs())` but that resulted in quite a bit lower delay than expected (and hence more underruns). I need to spend some time thinking and evaluating options.\n\nAn easy solution for the specific case when a minimum delay is set (jitterBufferTarget/playoutDelayHint) is to apply it after the delay manager target + GetMaxDelayMs.\n\n`enable_stable_delay_mode` is enabled by default and used in Chrome. I cannot promise it will always be used by we don\u0027t have any other plans currently :)",
      "parentUuid": "7c1592b2_15c95f4a",
      "range": {
        "startLine": 213,
        "startChar": 0,
        "endLine": 217,
        "endChar": 3
      },
      "revId": "cabfadaf23aa545122af71efcefa4146a7127bda",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d62d508c_1c8bea7d",
        "filename": "modules/audio_coding/neteq/decision_logic.cc",
        "patchSetId": 6
      },
      "lineNbr": 217,
      "author": {
        "id": 3281934
      },
      "writtenOn": "2024-03-08T13:18:43Z",
      "side": 1,
      "message": "I would be very much interested in an easy solution which could be done in a short term. In patch set 7 I limited the delay using max delay, which isn\u0027t web exposed yet. What you are suggesting is to ignore GetMaxDelayMs() in case jitterBufferTarget is set without having max delay set? That would be great.\n\n\u003eenable_stable_delay_mode is enabled by default and used in Chrome\nSounds good. I was worried about if it is controlled by field trials or other means to flip it in production over night.",
      "parentUuid": "50d85202_8ee2ba6d",
      "range": {
        "startLine": 213,
        "startChar": 0,
        "endLine": 217,
        "endChar": 3
      },
      "revId": "cabfadaf23aa545122af71efcefa4146a7127bda",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2d9ea732_71a1bee6",
        "filename": "modules/audio_coding/neteq/decision_logic.cc",
        "patchSetId": 6
      },
      "lineNbr": 217,
      "author": {
        "id": 8038
      },
      "writtenOn": "2024-03-11T13:44:24Z",
      "side": 1,
      "message": "Not fully ignore, but we can apply it before we apply the minimum delay.\nSo instead of doing `high_level \u003d max(target_delay, min_delay) + GetMaxDelayMs()` we can do `high_level \u003d max(target_delay + GetMaxDelayMs(), min_delay)`.",
      "parentUuid": "d62d508c_1c8bea7d",
      "range": {
        "startLine": 213,
        "startChar": 0,
        "endLine": 217,
        "endChar": 3
      },
      "revId": "cabfadaf23aa545122af71efcefa4146a7127bda",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2794ac26_41c805e3",
        "filename": "modules/audio_coding/neteq/decision_logic.cc",
        "patchSetId": 6
      },
      "lineNbr": 217,
      "author": {
        "id": 3281934
      },
      "writtenOn": "2024-03-11T16:31:34Z",
      "side": 1,
      "message": "Ok, I see.Implemented in patch set 8. It may help in case jitterBufferTarget is set quite a bit higher than the underrun_optimizer_.GetOptimalDelayMs(). It would be more useful if value of GetMaxDelayMs() could be seen in stats, to be able to know how much jitterBufferTarget has to be increased to make it reachable.",
      "parentUuid": "2d9ea732_71a1bee6",
      "range": {
        "startLine": 213,
        "startChar": 0,
        "endLine": 217,
        "endChar": 3
      },
      "revId": "cabfadaf23aa545122af71efcefa4146a7127bda",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "387cbf42_8b8f00d2",
        "filename": "modules/audio_coding/neteq/decision_logic.cc",
        "patchSetId": 6
      },
      "lineNbr": 217,
      "author": {
        "id": 3281934
      },
      "writtenOn": "2024-03-18T18:07:14Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "2794ac26_41c805e3",
      "range": {
        "startLine": 213,
        "startChar": 0,
        "endLine": 217,
        "endChar": 3
      },
      "revId": "cabfadaf23aa545122af71efcefa4146a7127bda",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f2916f06_43807f39",
        "filename": "modules/audio_coding/neteq/decision_logic.cc",
        "patchSetId": 6
      },
      "lineNbr": 325,
      "author": {
        "id": 8038
      },
      "writtenOn": "2024-03-06T08:52:20Z",
      "side": 1,
      "message": "This will not actually make the adaptation faster, which you described was the problem in the bug? So is this really necessary?",
      "range": {
        "startLine": 325,
        "startChar": 8,
        "endLine": 325,
        "endChar": 42
      },
      "revId": "cabfadaf23aa545122af71efcefa4146a7127bda",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "427504e9_c9c05cad",
        "filename": "modules/audio_coding/neteq/decision_logic.cc",
        "patchSetId": 6
      },
      "lineNbr": 325,
      "author": {
        "id": 3281934
      },
      "writtenOn": "2024-03-06T10:22:12Z",
      "side": 1,
      "message": "The bug was initially filed based on just one example where the target was reached very slowly, which later turned out to specific to DTX scenario. In DTX scenario the adaption would be faster after this change. But during active speech the difference is slightly tighter delay tolerance and eliminating dependency on field trial \"config_.enable_stable_delay_mode\"",
      "parentUuid": "f2916f06_43807f39",
      "range": {
        "startLine": 325,
        "startChar": 8,
        "endLine": 325,
        "endChar": 42
      },
      "revId": "cabfadaf23aa545122af71efcefa4146a7127bda",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bd9546c0_b607f841",
        "filename": "modules/audio_coding/neteq/decision_logic.cc",
        "patchSetId": 6
      },
      "lineNbr": 325,
      "author": {
        "id": 3281934
      },
      "writtenOn": "2024-03-18T18:07:14Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "427504e9_c9c05cad",
      "range": {
        "startLine": 325,
        "startChar": 8,
        "endLine": 325,
        "endChar": 42
      },
      "revId": "cabfadaf23aa545122af71efcefa4146a7127bda",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "079780e6_a68aff5b",
        "filename": "modules/audio_coding/neteq/decision_logic.cc",
        "patchSetId": 6
      },
      "lineNbr": 344,
      "author": {
        "id": 8038
      },
      "writtenOn": "2024-03-06T08:52:20Z",
      "side": 1,
      "message": "This max delay is pretty important to avoid accelerating directly after an underrun (i.e. when network delay \u003e playout delay).",
      "range": {
        "startLine": 344,
        "startChar": 33,
        "endLine": 344,
        "endChar": 71
      },
      "revId": "cabfadaf23aa545122af71efcefa4146a7127bda",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0fa99c07_bc694707",
        "filename": "modules/audio_coding/neteq/decision_logic.cc",
        "patchSetId": 6
      },
      "lineNbr": 344,
      "author": {
        "id": 3281934
      },
      "writtenOn": "2024-03-06T10:22:12Z",
      "side": 1,
      "message": "This \"low_limit + packet_arrival_history_-\u003eGetMaxDelayMs()\" part i do no quite understand yet, but isn\u0027t it more of a problem when the target delay is influenced by network conditions? With this change the max delay is set equal to min delay and there are no stretching expected unless the externally set jitterBufferTarget hasn\u0027t been reached yet. But once it is reached the delay is expected to be stable.",
      "parentUuid": "079780e6_a68aff5b",
      "range": {
        "startLine": 344,
        "startChar": 33,
        "endLine": 344,
        "endChar": 71
      },
      "revId": "cabfadaf23aa545122af71efcefa4146a7127bda",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8d5a0fef_0017918b",
        "filename": "modules/audio_coding/neteq/decision_logic.cc",
        "patchSetId": 6
      },
      "lineNbr": 344,
      "author": {
        "id": 8038
      },
      "writtenOn": "2024-03-06T10:46:50Z",
      "side": 1,
      "message": "No. If there is a network delay spike causing an underrun, then the delay will increase (in-order packets are not discarded in NetEq unless the buffer is full).",
      "parentUuid": "0fa99c07_bc694707",
      "range": {
        "startLine": 344,
        "startChar": 33,
        "endLine": 344,
        "endChar": 71
      },
      "revId": "cabfadaf23aa545122af71efcefa4146a7127bda",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0ad4e503_5a9813c9",
        "filename": "modules/audio_coding/neteq/decision_logic.cc",
        "patchSetId": 6
      },
      "lineNbr": 344,
      "author": {
        "id": 3281934
      },
      "writtenOn": "2024-03-06T12:25:29Z",
      "side": 1,
      "message": "Ok, then discarding the packets which do not fit into target delay is also missing from this CL.",
      "parentUuid": "8d5a0fef_0017918b",
      "range": {
        "startLine": 344,
        "startChar": 33,
        "endLine": 344,
        "endChar": 71
      },
      "revId": "cabfadaf23aa545122af71efcefa4146a7127bda",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "708d53f2_16f94f68",
        "filename": "modules/audio_coding/neteq/decision_logic.cc",
        "patchSetId": 6
      },
      "lineNbr": 344,
      "author": {
        "id": 3281934
      },
      "writtenOn": "2024-03-18T18:07:14Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "0ad4e503_5a9813c9",
      "range": {
        "startLine": 344,
        "startChar": 33,
        "endLine": 344,
        "endChar": 71
      },
      "revId": "cabfadaf23aa545122af71efcefa4146a7127bda",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dd6617a4_30701a14",
        "filename": "modules/audio_coding/neteq/decision_logic.cc",
        "patchSetId": 6
      },
      "lineNbr": 386,
      "author": {
        "id": 8038
      },
      "writtenOn": "2024-03-06T08:52:20Z",
      "side": 1,
      "message": "This will cause decoding to wait when there is packet loss until the right delay is achieved. Not sure if this is the correct thing to do. However, I think something similar to this would be appropriate when in DTX. It used to be the case, but it was changed recently, I think an oversight from my side, see `below_target_delay \u0026\u0026 !config_.combine_concealment_decision`.",
      "range": {
        "startLine": 386,
        "startChar": 6,
        "endLine": 386,
        "endChar": 40
      },
      "revId": "cabfadaf23aa545122af71efcefa4146a7127bda",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "77b12776_47d1c595",
        "filename": "modules/audio_coding/neteq/decision_logic.cc",
        "patchSetId": 6
      },
      "lineNbr": 386,
      "author": {
        "id": 3281934
      },
      "writtenOn": "2024-03-06T10:22:12Z",
      "side": 1,
      "message": "As far as I understood taking a future packet would change the playout delay, which is undesired in precise_jitter_buffer_target_mode_, but this change was mostly needed to make the delay adapt to the target in no voice activity periods.",
      "parentUuid": "dd6617a4_30701a14",
      "range": {
        "startLine": 386,
        "startChar": 6,
        "endLine": 386,
        "endChar": 40
      },
      "revId": "cabfadaf23aa545122af71efcefa4146a7127bda",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "dc718e01_dddf0c6e",
        "filename": "modules/audio_coding/neteq/decision_logic.cc",
        "patchSetId": 6
      },
      "lineNbr": 386,
      "author": {
        "id": 3281934
      },
      "writtenOn": "2024-03-18T18:07:14Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "77b12776_47d1c595",
      "range": {
        "startLine": 386,
        "startChar": 6,
        "endLine": 386,
        "endChar": 40
      },
      "revId": "cabfadaf23aa545122af71efcefa4146a7127bda",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    }
  ]
}