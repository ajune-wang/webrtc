{
  "comments": [
    {
      "key": {
        "uuid": "89f5fedc_788f9580",
        "filename": "video/video_stream_encoder.cc",
        "patchSetId": 8
      },
      "lineNbr": 49,
      "author": {
        "id": 5234
      },
      "writtenOn": "2018-07-25T15:12:49Z",
      "side": 1,
      "message": "Why this change to larger type?",
      "range": {
        "startLine": 49,
        "startChar": 6,
        "endLine": 49,
        "endChar": 13
      },
      "revId": "7566b2412d4ab45205d96827b10b0e3ddbe5052f",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "74db2b9d_bb20d821",
        "filename": "video/video_stream_encoder.cc",
        "patchSetId": 8
      },
      "lineNbr": 49,
      "author": {
        "id": 5520
      },
      "writtenOn": "2018-07-26T11:13:33Z",
      "side": 1,
      "message": "I have no idea. Fixed.",
      "parentUuid": "89f5fedc_788f9580",
      "range": {
        "startLine": 49,
        "startChar": 6,
        "endLine": 49,
        "endChar": 13
      },
      "revId": "7566b2412d4ab45205d96827b10b0e3ddbe5052f",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "03b60ef1_ea313d86",
        "filename": "video/video_stream_encoder.cc",
        "patchSetId": 8
      },
      "lineNbr": 953,
      "author": {
        "id": 5234
      },
      "writtenOn": "2018-07-25T15:12:49Z",
      "side": 1,
      "message": "This cast isn\u0027t entirely kosher, if |bitrate_bps \u003c encoder_start_bitrate_bps_| (bit difference of reasonable size), then the value before the cast is a large unsigned integer, which doesn\u0027t fit in a signed int, and you have undefined behavior (or possibly implementation defined behavior, not sure which).\n\nWriting it as \n\n  std::abs(static_cast\u003cint\u003e(bitrate_bps) - static_cast\u003cint\u003e(encoder_start_bitrate_bps))\n\nis a bit better. That should be well defined as long as all actual values fit in the range of a signed int. I wasn\u0027t aware of any safe and friendly utility to provide absolute difference of unsigned numbers, but https://codereview.stackexchange.com/questions/51179/absolute-difference-function-for-stdsize-t suggests something like\n\n  abs_diff\u003cT\u003e(T a, T b) { return std::max(a,b) - std::min(a,b); } \n\nor\n\n  (a \u003c b) ? b - a : a - b\n\nwhich should be perfectly reliable for *unsigned* type T. For signed numbers, something more complex would be needed, since the result needs to be of the corresponding unsigned type, e.g., a \u003d 2^31 - 1, b \u003d -2^31 gives an absolute difference of 2^32-1.\n\nYou might also want to do the easy checks first,\n\n  if (IsInitialFramedropOnBWEEnabled() \u0026\u0026 !has_seen_first_significant_bwe_change_) {\n  \nbefore comparing numerical values.",
      "range": {
        "startLine": 953,
        "startChar": 6,
        "endLine": 953,
        "endChar": 75
      },
      "revId": "7566b2412d4ab45205d96827b10b0e3ddbe5052f",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "413f8b1b_08b954fe",
        "filename": "video/video_stream_encoder.cc",
        "patchSetId": 8
      },
      "lineNbr": 953,
      "author": {
        "id": 5520
      },
      "writtenOn": "2018-07-26T11:13:33Z",
      "side": 1,
      "message": "Since both the numbers in question are uint32s I replaced the std::abs with the abs_diff as above. Also reordered checks to do the easy ones first.",
      "parentUuid": "03b60ef1_ea313d86",
      "range": {
        "startLine": 953,
        "startChar": 6,
        "endLine": 953,
        "endChar": 75
      },
      "revId": "7566b2412d4ab45205d96827b10b0e3ddbe5052f",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6fa9ce7f_a6f2ff47",
        "filename": "video/video_stream_encoder.cc",
        "patchSetId": 8
      },
      "lineNbr": 957,
      "author": {
        "id": 5520
      },
      "writtenOn": "2018-07-25T14:41:48Z",
      "side": 1,
      "message": "This constant is kind of arbitrary, but the reason for doing it this way is that the first few new values from the BW estimator are very close to the old encoder_start_bitrate_bps_, and then suddenly changes after a few calls.",
      "range": {
        "startLine": 957,
        "startChar": 23,
        "endLine": 957,
        "endChar": 26
      },
      "revId": "7566b2412d4ab45205d96827b10b0e3ddbe5052f",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e861411b_1e12a6ac",
        "filename": "video/video_stream_encoder.cc",
        "patchSetId": 8
      },
      "lineNbr": 957,
      "author": {
        "id": 5234
      },
      "writtenOn": "2018-07-25T15:12:49Z",
      "side": 1,
      "message": "Constant might deserve a name.\n\nWill it be a problem if the initial bitrate is close to correct, and the first large change happens a minute or two into the call?",
      "parentUuid": "6fa9ce7f_a6f2ff47",
      "range": {
        "startLine": 957,
        "startChar": 23,
        "endLine": 957,
        "endChar": 26
      },
      "revId": "7566b2412d4ab45205d96827b10b0e3ddbe5052f",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ce2d2e70_52a627af",
        "filename": "video/video_stream_encoder.cc",
        "patchSetId": 8
      },
      "lineNbr": 957,
      "author": {
        "id": 5520
      },
      "writtenOn": "2018-07-26T11:13:33Z",
      "side": 1,
      "message": "Yes that\u0027s a drawback here that this can potentially happen in the middle of a call. It\u0027s unclear whether that\u0027s really a problem, but if it is I don\u0027t know how we can work around it in a sensible way. \n\nAll of this is a bit of a hack anyway...",
      "parentUuid": "e861411b_1e12a6ac",
      "range": {
        "startLine": 957,
        "startChar": 23,
        "endLine": 957,
        "endChar": 26
      },
      "revId": "7566b2412d4ab45205d96827b10b0e3ddbe5052f",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    }
  ]
}