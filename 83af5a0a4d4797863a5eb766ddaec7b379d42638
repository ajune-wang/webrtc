{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "ba886905_2c2eee6e",
        "filename": "/COMMIT_MSG",
        "patchSetId": 13
      },
      "lineNbr": 13,
      "author": {
        "id": 5019
      },
      "writtenOn": "2024-05-02T09:53:34Z",
      "side": 1,
      "message": "chromium:41496465, webrtc:42226112",
      "range": {
        "startLine": 13,
        "startChar": 5,
        "endLine": 13,
        "endChar": 35
      },
      "revId": "83af5a0a4d4797863a5eb766ddaec7b379d42638",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "575fad93_53811b83",
        "filename": "/COMMIT_MSG",
        "patchSetId": 13
      },
      "lineNbr": 13,
      "author": {
        "id": 17470
      },
      "writtenOn": "2024-05-07T10:13:27Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ba886905_2c2eee6e",
      "range": {
        "startLine": 13,
        "startChar": 5,
        "endLine": 13,
        "endChar": 35
      },
      "revId": "83af5a0a4d4797863a5eb766ddaec7b379d42638",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "183cdcfc_2fa503e5",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 13
      },
      "lineNbr": 0,
      "author": {
        "id": 17470
      },
      "writtenOn": "2024-04-30T09:44:26Z",
      "side": 1,
      "message": "Resurrecting this now I\u0027ve had some more time to think about solutions. Have adopted a couple of Danil\u0027s suggestions as detailed below.\n\nPTAL!",
      "revId": "83af5a0a4d4797863a5eb766ddaec7b379d42638",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "778c9e06_cc1be4f6",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 13
      },
      "lineNbr": 0,
      "author": {
        "id": 5019
      },
      "writtenOn": "2024-05-02T09:53:34Z",
      "side": 1,
      "message": "Looks convoluted, need some time to understand what\u0027s going on.\n\nI\u0027m not sure what value adds extra TransformableVideoFrameWithDependencies interface.\n\nadding getter intstead of passing the value looks suspecious too, but that is documented, I just need a bit more time to read that part to be sure there is no better alternative.\nIn particular I need to understand why std::function. If getter is always called in the same function then rtc::FunctionView is likely better alternative. If you might need to move this getter and call it from another thread/another context, then absl::AnyInvocable might be better.\nThe type of the functor communicates assumptions how it can be called, and thus helps to understand what can be in it.",
      "revId": "83af5a0a4d4797863a5eb766ddaec7b379d42638",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4b59b25d_7eaa94f9",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 13
      },
      "lineNbr": 0,
      "author": {
        "id": 17470
      },
      "writtenOn": "2024-05-07T10:13:27Z",
      "side": 1,
      "message": "The getter pattern, due to the external sequencing requirements of the RTPSenderVideo, is certainly convoluted...\nrtc::FunctionView looks like a good fit for what we need to do here - I\u0027ve switched to that.\n\nRe the interface, as discussed in the comment below about casting, we need to add some interface/class declaration in one of the headers, be that an interface like I\u0027ve done so far, or the entire TransformableVideoReceiverFrame class. I do like having all of the impl details of specific frames kept within the single .cc...",
      "parentUuid": "778c9e06_cc1be4f6",
      "revId": "83af5a0a4d4797863a5eb766ddaec7b379d42638",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8fb19205_44007d96",
        "filename": "modules/rtp_rtcp/source/rtp_sender_video_frame_transformer_delegate.cc",
        "patchSetId": 13
      },
      "lineNbr": 246,
      "author": {
        "id": 5019
      },
      "writtenOn": "2024-05-02T09:53:34Z",
      "side": 1,
      "message": "Why this cast is safe?\n\nIs it guaranteed this class would always be `TransformableVideoReceiverFrame` ? (then you can cast to it and don\u0027t need extra TransformableVideoFrameWithDependencies interface)",
      "range": {
        "startLine": 246,
        "startChar": 8,
        "endLine": 246,
        "endChar": 61
      },
      "revId": "83af5a0a4d4797863a5eb766ddaec7b379d42638",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "44c98e73_686a1e87",
        "filename": "modules/rtp_rtcp/source/rtp_sender_video_frame_transformer_delegate.cc",
        "patchSetId": 13
      },
      "lineNbr": 246,
      "author": {
        "id": 17470
      },
      "writtenOn": "2024-05-07T10:13:27Z",
      "side": 1,
      "message": "It needs to be one of the internal subclasses of TransformableVideoFrame, so either TransformableVideoReceiverFrame or a Mock in tests, but I\u0027ve not found a good way to add that requirement to the API at compile time yet. Any thoughts?\n\nWe could move TransformableVideoReceiverFrame up into the receiver transform delegate\u0027s header file and cast it directly here (and change mocks to mock that), but that\u0027s pretty similar to adding this interface except with more implementation details getting exposed, no?",
      "parentUuid": "8fb19205_44007d96",
      "range": {
        "startLine": 246,
        "startChar": 8,
        "endLine": 246,
        "endChar": 61
      },
      "revId": "83af5a0a4d4797863a5eb766ddaec7b379d42638",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2b6fdc60_77fb3db0",
        "filename": "modules/rtp_rtcp/source/rtp_sender_video_frame_transformer_delegate.cc",
        "patchSetId": 13
      },
      "lineNbr": 246,
      "author": {
        "id": 5019
      },
      "writtenOn": "2024-05-07T16:47:26Z",
      "side": 1,
      "message": "I have some thoughts, but they do not look small to implement.\n\nCurrent api seems to force to use unsafe casts - OnTransformFrame takes base interface, and callbacks with the same interface, but all callbacks expect it to be more concrete class/interface.\nCurrently nothing prevents chromium to create their own version of TransformableFrameInterface and pass it to the callback.\n\nI\u0027m not sure \"TransformableFrame\" should be an virtual interface at all - this class suppose to pass information around, but in c++ virtual interfaces better fit for classes that perform some logic.\nIn particular mocking shouldn\u0027t be the 1st choice to test how it is used ( https://testing.googleblog.com/2024/02/increase-test-fidelity-by-avoiding-mocks.html )\n\nIt might be possible to use Passkey idiom to allow only webrtc to create instances of the TranformableVideoFrame interfaces (that idiom is mentioned in https://abseil.io/tips/134 for std::shared_ptr constructor, but can be applied more widely), then those casts would be more safe.\n\nAnother option is to use public interface for things that can be changed publicly, and add few friends to change things that can be changed/accessed only by webrtc:\n```\n.h\nclass TransforambleVideoFrame {\n public:\n  // Not copyable\n  TransforambleVideoFrame(const TransforambleVideoFrame\u0026) \u003d delete;\n  // Publicly movable\n  TransforambleVideoFrame(TransforambleVideoFrame\u0026\u0026) \u003d default;\n  // Can be deleted by anyone.\n  ~TransforambleVideoFrame();\n  // accessors for properties that can be changed outside of the webrtc.\n  uint32_t GetSsrc() const;\n  \n private:\n  class Impl;\n  \n  // non-move constructor(s) are private, use TransormableVideoFrameFactory;\n  TransforambleVideoFrame(); \n\n  // This class can do low level modification to the impl,\n  // but it is defined in build target private to WebRTC\n  friend class TransormableVideoFrameAccessor;\n  std::unique_ptr\u003cFrameDependencyStructure\u003e FetchStructure();\n  \n  // Alternativly, may skip intermediate Accessor helper and befriend WebRTC transformers directly\n  friend class RTPSenderVideoFrameTransformerDelegate;\n  friend class RTPReceiveVideoFrameTransformerDelegate;\n  \n  // This class is the only one that may create new instances of the TransformableVideoFrame, public users may only move the class around, or delete it, but can\u0027t create new instances of the TranformableVideoFrame\n  // Once again, it is in a build target that is private to WebRTC\n  friend class TransormableVideoFrameFactory;\n  std::unique_ptr\u003cImpl\u003e impl_;\n};\n\napi/tranformable_video_frame.cc\nstruct TransforambleVideoFrame::Impl {\n  uint32_t ssrc;\n  uint32_t rtp_timestamp;\n  rtc::scoped_refptr\u003cEncodedBufferInterface\u003e elementary_bitstream;\n  std::unique_ptr\u003cFrameDependencyStructure\u003e structure_if_key_frame;\n};\n\nstd::unique_ptr\u003cFrameDependencyStructure\u003e TransforambleVideoFrame::FetchStructure() { return std::move(impl_-\u003estructure_if_key_frame);\n\n\nprivate, modules/rtp_rtcp/transformable_video_frame_accessor.h\n\nclass TransormableVideoFrameAccessor {\n public:\n  TransormableVideoFrameAccessor(TransforambleVideoFrame\u0026 video_frame) : ref(video_frame) {}\n  \n  std::unique_ptr\u003cFrameDependencyStructure\u003e FetchStructure() {\n    return video_frame_.FetchStructure();\n  }\n\n private:\n  TransforambleVideoFrame\u0026 video_frame_;\n}\n\nuser, modules/rtp_rtcp/video_frame_transformer.cc\n\nSendTranformer::Do(TransformableVideoFrame video_frame) {\n  if (video_frame.IsKeyFrame()) {\n    video_sender_-\u003eSetVideoStructure(\n      TransormableVideoFrameAccessor(video_frame).FetchStructure());\n  }\n  video_sender_-\u003eSendVideo(\n     TransormableVideoFrameAccessor(video_frame).ExtractEverytingForSending());\n}\n\n\n```\nand expand Tranformer interface to work separately on Audio and Video frames.\n\nIt might help to cleanup how tranformer is integrated into pipeline (e.g. do something like in this dirty draft: https://webrtc-review.googlesource.com/c/src/+/350121 )\nThough that is not directly related to what you are doing, it might make it easier to follow code around.",
      "parentUuid": "44c98e73_686a1e87",
      "range": {
        "startLine": 246,
        "startChar": 8,
        "endLine": 246,
        "endChar": 61
      },
      "revId": "83af5a0a4d4797863a5eb766ddaec7b379d42638",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ce79fc8f_e2e89699",
        "filename": "modules/rtp_rtcp/source/rtp_sender_video_frame_transformer_delegate.cc",
        "patchSetId": 13
      },
      "lineNbr": 246,
      "author": {
        "id": 17470
      },
      "writtenOn": "2024-05-10T13:25:06Z",
      "side": 1,
      "message": "Thanks for the ideas! This I would agree with all of them... Trying adding in a passkey in https://webrtc-review.googlesource.com/c/src/+/350361, will rebase this cl onto that if we go with it.\n\nAlso filed https://g-issues.webrtc.org/issues/339815768 to follow up.",
      "parentUuid": "2b6fdc60_77fb3db0",
      "range": {
        "startLine": 246,
        "startChar": 8,
        "endLine": 246,
        "endChar": 61
      },
      "revId": "83af5a0a4d4797863a5eb766ddaec7b379d42638",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "305d54a9_bc1711e4",
        "filename": "modules/rtp_rtcp/source/rtp_sender_video_frame_transformer_delegate.cc",
        "patchSetId": 13
      },
      "lineNbr": 313,
      "author": {
        "id": 5019
      },
      "writtenOn": "2024-05-02T09:53:34Z",
      "side": 1,
      "message": "might be better to avoid calling virtual function twice and assume it returns the same result.\n\nconst FrameDependencyStructure* sturcture \u003d original_frame-\u003eGetFrameDependencyStructure();\nreturn std::make_unique\u003c...\u003e(..., sturcture !\u003d nullptr : std::make_unique\u003cFrameDependencyStructure\u003e(*sturcture) : nullptr);\n\nBut, if you cast not to `TransformableVideoFrameWithDependencies`, but to the original class `TransformableVideoSenderFrame`, then it would be ok to use cheap accessor to the video structure twice and be sure it returns the same.",
      "range": {
        "startLine": 311,
        "startChar": 0,
        "endLine": 313,
        "endChar": 63
      },
      "revId": "83af5a0a4d4797863a5eb766ddaec7b379d42638",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5371af2c_15b576c5",
        "filename": "modules/rtp_rtcp/source/rtp_sender_video_frame_transformer_delegate.cc",
        "patchSetId": 13
      },
      "lineNbr": 313,
      "author": {
        "id": 17470
      },
      "writtenOn": "2024-05-07T10:13:27Z",
      "side": 1,
      "message": "Good point. Done.",
      "parentUuid": "305d54a9_bc1711e4",
      "range": {
        "startLine": 311,
        "startChar": 0,
        "endLine": 313,
        "endChar": 63
      },
      "revId": "83af5a0a4d4797863a5eb766ddaec7b379d42638",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d066013f_309e24c6",
        "filename": "modules/rtp_rtcp/source/rtp_sender_video_frame_transformer_delegate_unittest.cc",
        "patchSetId": 13
      },
      "lineNbr": 376,
      "author": {
        "id": 5019
      },
      "writtenOn": "2024-05-02T09:53:34Z",
      "side": 1,
      "message": "do not use c-cast  https://google.github.io/styleguide/cppguide.html#Casting\n\nmoreover - do not store reference to a temporary: \nEncodedImageBuffer::Create() creates a ref counted object that is then immediately destroyed before next expression, buffer points to dangled memory.\nInstead keep the created image buffer until the end of the test:\n```\nrtc::scoped_refptr\u003cEncodedImageBuffer\u003e image_buffer \u003d EncodedImageBuffer::Create(1);\nrtc::ArrayView\u003cconst uint8_t\u003e buffer_view(*image_buffer);\nON_CALL(....Return(buffer));\n```\n\n(or you may try to skip extra variable and try to write\n`ON_CALL(....Return(*image_buffer));` but I\u0027m not sure that would compile)",
      "range": {
        "startLine": 376,
        "startChar": 6,
        "endLine": 376,
        "endChar": 37
      },
      "revId": "83af5a0a4d4797863a5eb766ddaec7b379d42638",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c4c44174_3c9b0cac",
        "filename": "modules/rtp_rtcp/source/rtp_sender_video_frame_transformer_delegate_unittest.cc",
        "patchSetId": 13
      },
      "lineNbr": 376,
      "author": {
        "id": 17470
      },
      "writtenOn": "2024-05-07T10:13:27Z",
      "side": 1,
      "message": "Ah, well spotted, thanks. Fixed here and in the existing code.",
      "parentUuid": "d066013f_309e24c6",
      "range": {
        "startLine": 376,
        "startChar": 6,
        "endLine": 376,
        "endChar": 37
      },
      "revId": "83af5a0a4d4797863a5eb766ddaec7b379d42638",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "38705ce4_ab2cb019",
        "filename": "video/rtp_video_stream_receiver2.cc",
        "patchSetId": 13
      },
      "lineNbr": 896,
      "author": {
        "id": 5019
      },
      "writtenOn": "2024-05-02T09:53:34Z",
      "side": 1,
      "message": "I read this as \u0027when it is a key frame, pass just the video structure\u0027\nDid you mean\n\u0027Provide the video_structures_ to be copied only on keyframes\u0027 ?",
      "revId": "83af5a0a4d4797863a5eb766ddaec7b379d42638",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    }
  ]
}