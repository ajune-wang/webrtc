{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "9fde3b49_81d70097",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5019
      },
      "writtenOn": "2022-08-09T11:25:24Z",
      "side": 1,
      "message": "cpp part lgtm % one comment",
      "revId": "76bfc6599f350b1fb5185f9c8c2a1862a807f296",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ea60f161_adc127b5",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5634
      },
      "writtenOn": "2022-08-09T11:57:48Z",
      "side": 1,
      "message": "Some commentary.\n",
      "revId": "76bfc6599f350b1fb5185f9c8c2a1862a807f296",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1a91efaf_46bb3f87",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5634
      },
      "writtenOn": "2022-08-10T08:01:53Z",
      "side": 1,
      "message": "Test keys: can we keep them out of production?",
      "revId": "76bfc6599f350b1fb5185f9c8c2a1862a807f296",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9851586a_b68a926d",
        "filename": "BUILD.gn",
        "patchSetId": 2
      },
      "lineNbr": 276,
      "author": {
        "id": 5019
      },
      "writtenOn": "2022-08-09T11:25:24Z",
      "side": 1,
      "message": "I think WEBRTC_ prefix for macros is safer to use.",
      "range": {
        "startLine": 276,
        "startChar": 18,
        "endLine": 276,
        "endChar": 21
      },
      "revId": "76bfc6599f350b1fb5185f9c8c2a1862a807f296",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e1a5cf9c_cfbe1dfc",
        "filename": "BUILD.gn",
        "patchSetId": 2
      },
      "lineNbr": 276,
      "author": {
        "id": 13704
      },
      "writtenOn": "2022-08-09T13:00:11Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9851586a_b68a926d",
      "range": {
        "startLine": 276,
        "startChar": 18,
        "endLine": 276,
        "endChar": 21
      },
      "revId": "76bfc6599f350b1fb5185f9c8c2a1862a807f296",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9772d65e_a68b15f5",
        "filename": "api/DEPS",
        "patchSetId": 2
      },
      "lineNbr": 311,
      "author": {
        "id": 5634
      },
      "writtenOn": "2022-08-09T11:57:48Z",
      "side": 1,
      "message": "from a this-bothers-me viewpoint, #include of a file in tools_webrtc bothers me.\nCan the .h file live elsewhere?\nIf it\u0027s generated every time, it should probably live in out/. If not (if it\u0027s checked in), it should probably live somewhere in the normal source tree.",
      "revId": "76bfc6599f350b1fb5185f9c8c2a1862a807f296",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "40042b9d_5da8891d",
        "filename": "api/DEPS",
        "patchSetId": 2
      },
      "lineNbr": 311,
      "author": {
        "id": 13704
      },
      "writtenOn": "2022-08-09T13:00:11Z",
      "side": 1,
      "message": "It output to `${out}/gen/`. Since the equivalent of `-I\"${out}/gen/\"` is passed to the compiler, hence the weird-looking includes.\n\nI could just generate it to `${out}/gen/api/field_trials_registry.h` instead. One downside with that is that `field_trials.py` would probably live somewhere else.",
      "parentUuid": "9772d65e_a68b15f5",
      "revId": "76bfc6599f350b1fb5185f9c8c2a1862a807f296",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cb799ed8_5bd37753",
        "filename": "tools_webrtc/experiments/field_trials.py",
        "patchSetId": 2
      },
      "lineNbr": 3,
      "author": {
        "id": 5634
      },
      "writtenOn": "2022-08-09T11:57:48Z",
      "side": 1,
      "message": "I don\u0027t think this file should live in experiments/\n\nIf a new directory is needed, it should be field_trials. If not, just let it live in tools_webrtc.",
      "revId": "76bfc6599f350b1fb5185f9c8c2a1862a807f296",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "31859d72_8e075ea9",
        "filename": "tools_webrtc/experiments/field_trials.py",
        "patchSetId": 2
      },
      "lineNbr": 3,
      "author": {
        "id": 13704
      },
      "writtenOn": "2022-08-09T13:00:11Z",
      "side": 1,
      "message": "I don\u0027t have a strong opinion, what do you prefer?",
      "parentUuid": "cb799ed8_5bd37753",
      "revId": "76bfc6599f350b1fb5185f9c8c2a1862a807f296",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b632d469_de745b23",
        "filename": "tools_webrtc/experiments/field_trials.py",
        "patchSetId": 2
      },
      "lineNbr": 3,
      "author": {
        "id": 5087
      },
      "writtenOn": "2022-08-09T14:47:59Z",
      "side": 1,
      "message": "I would be in favour of a top level folder //experiments or //field_trials, this should fix the problem, right?",
      "parentUuid": "31859d72_8e075ea9",
      "revId": "76bfc6599f350b1fb5185f9c8c2a1862a807f296",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a4657ee6_63d60852",
        "filename": "tools_webrtc/experiments/field_trials.py",
        "patchSetId": 2
      },
      "lineNbr": 33,
      "author": {
        "id": 5634
      },
      "writtenOn": "2022-08-09T11:57:48Z",
      "side": 1,
      "message": "Add one field trial here. Otherwise, important parts of the code don\u0027t get exercised.",
      "revId": "76bfc6599f350b1fb5185f9c8c2a1862a807f296",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3104845e_54b162de",
        "filename": "tools_webrtc/experiments/field_trials.py",
        "patchSetId": 2
      },
      "lineNbr": 33,
      "author": {
        "id": 13704
      },
      "writtenOn": "2022-08-09T13:00:11Z",
      "side": 1,
      "message": "It won\u0027t get exercised at all unless the GN flag `rtc_strict_field_trials` is set. I think adding to this list can be done later.",
      "parentUuid": "a4657ee6_63d60852",
      "revId": "76bfc6599f350b1fb5185f9c8c2a1862a807f296",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9fd94fdc_a23089be",
        "filename": "tools_webrtc/experiments/field_trials.py",
        "patchSetId": 2
      },
      "lineNbr": 46,
      "author": {
        "id": 5634
      },
      "writtenOn": "2022-08-09T11:57:48Z",
      "side": 1,
      "message": "Having the pseudo-generated .h file in the function doc is just confusing, I think.",
      "revId": "76bfc6599f350b1fb5185f9c8c2a1862a807f296",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "934b06ed_f0242a87",
        "filename": "tools_webrtc/experiments/field_trials.py",
        "patchSetId": 2
      },
      "lineNbr": 46,
      "author": {
        "id": 13704
      },
      "writtenOn": "2022-08-09T13:00:11Z",
      "side": 1,
      "message": "I\u0027m using doctest to have an inline unittest in the docstring, that\u0027s why the output has to match exactly.",
      "parentUuid": "9fd94fdc_a23089be",
      "revId": "76bfc6599f350b1fb5185f9c8c2a1862a807f296",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d2e3f960_582fb249",
        "filename": "tools_webrtc/experiments/field_trials.py",
        "patchSetId": 2
      },
      "lineNbr": 46,
      "author": {
        "id": 5634
      },
      "writtenOn": "2022-08-10T08:01:53Z",
      "side": 1,
      "message": "Add a comment about doctest somewhere. It is the first time I\u0027ve encountered that beast. When is it run? If not at every checkin, this will drift-break.",
      "parentUuid": "934b06ed_f0242a87",
      "revId": "76bfc6599f350b1fb5185f9c8c2a1862a807f296",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b76413a9_62990a28",
        "filename": "tools_webrtc/experiments/field_trials.py",
        "patchSetId": 2
      },
      "lineNbr": 70,
      "author": {
        "id": 5634
      },
      "writtenOn": "2022-08-10T08:01:53Z",
      "side": 1,
      "message": "I finally \"got\" what was bothering me with this (and the unittest that depends on it).\n\nTest keys shouldn\u0027t be in the registry. That means that for testing, we need the ability to insert valid keys from the test. Which means that it can\u0027t be only a constexpr array.\n\nA better (?) solution would be to have the IsFieldTrialRegistered() function have a non-static lookaside list with a corresponding function InsertFieldTrialNameForTesting. This only needs to be consulted in the failure branch of IsFieldTrialRegistered(), so will not be overhead in normal runtime (where IsFieldTrialRegistered() never fails).",
      "revId": "76bfc6599f350b1fb5185f9c8c2a1862a807f296",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b09dda6d_0d146ecd",
        "filename": "tools_webrtc/experiments/field_trials.py",
        "patchSetId": 2
      },
      "lineNbr": 73,
      "author": {
        "id": 5634
      },
      "writtenOn": "2022-08-09T11:57:48Z",
      "side": 1,
      "message": "You can use a multiline constant to avoid all those quotes and \\n marks.",
      "revId": "76bfc6599f350b1fb5185f9c8c2a1862a807f296",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bb4b3f05_054ea6d9",
        "filename": "tools_webrtc/experiments/field_trials.py",
        "patchSetId": 2
      },
      "lineNbr": 73,
      "author": {
        "id": 13704
      },
      "writtenOn": "2022-08-09T13:00:11Z",
      "side": 1,
      "message": "Does that work with f-strings? AFIK the preferred way to wrap lines is this (verbose) syntax...",
      "parentUuid": "b09dda6d_0d146ecd",
      "revId": "76bfc6599f350b1fb5185f9c8c2a1862a807f296",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5268fead_e2739f51",
        "filename": "tools_webrtc/experiments/field_trials.py",
        "patchSetId": 2
      },
      "lineNbr": 73,
      "author": {
        "id": 5634
      },
      "writtenOn": "2022-08-10T08:01:53Z",
      "side": 1,
      "message": "yes, it does according to https://realpython.com/python-f-strings/#multiline-f-strings - just be aware that indentation is not eaten when using \"\"\"",
      "parentUuid": "bb4b3f05_054ea6d9",
      "revId": "76bfc6599f350b1fb5185f9c8c2a1862a807f296",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "55a9aa62_bf678728",
        "filename": "tools_webrtc/experiments/field_trials_registry.h",
        "patchSetId": 2
      },
      "lineNbr": 22,
      "author": {
        "id": 5634
      },
      "writtenOn": "2022-08-09T11:57:48Z",
      "side": 1,
      "message": "Use std::find for better readability?",
      "revId": "76bfc6599f350b1fb5185f9c8c2a1862a807f296",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "55c6bee0_d74303a2",
        "filename": "tools_webrtc/experiments/field_trials_registry.h",
        "patchSetId": 2
      },
      "lineNbr": 22,
      "author": {
        "id": 13704
      },
      "writtenOn": "2022-08-09T13:00:11Z",
      "side": 1,
      "message": "Ah yes, that one is `constexpr` so that works.",
      "parentUuid": "55a9aa62_bf678728",
      "revId": "76bfc6599f350b1fb5185f9c8c2a1862a807f296",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "11d218be_4b1b503e",
        "filename": "tools_webrtc/experiments/field_trials_registry.h",
        "patchSetId": 2
      },
      "lineNbr": 22,
      "author": {
        "id": 5019
      },
      "writtenOn": "2022-08-09T13:04:08Z",
      "side": 1,
      "message": "std::find is not `constexpr` until c++20\nhttps://en.cppreference.com/w/cpp/algorithm/find",
      "parentUuid": "55c6bee0_d74303a2",
      "revId": "76bfc6599f350b1fb5185f9c8c2a1862a807f296",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c2125b30_9125d1ef",
        "filename": "tools_webrtc/experiments/field_trials_registry.h",
        "patchSetId": 2
      },
      "lineNbr": 22,
      "author": {
        "id": 13704
      },
      "writtenOn": "2022-08-09T13:06:37Z",
      "side": 1,
      "message": "You are of course correct. Let\u0027s hold off on that then.",
      "parentUuid": "11d218be_4b1b503e",
      "revId": "76bfc6599f350b1fb5185f9c8c2a1862a807f296",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "42cb76ae_852aa26c",
        "filename": "webrtc.gni",
        "patchSetId": 2
      },
      "lineNbr": 233,
      "author": {
        "id": 5087
      },
      "writtenOn": "2022-08-09T14:47:59Z",
      "side": 1,
      "message": "I think we can turn this ON on CQ/CI by changing https://source.chromium.org/chromium/chromium/src/+/main:third_party/webrtc/tools_webrtc/mb/mb_config.pyl;l\u003d380;drc\u003d35fc144e01cbff6a5d56cda53d09ca841d7334f2 to:\n\n```\n\u0027debug_bot\u0027: {\n  \u0027mixins\u0027: [\u0027debug\u0027, \u0027goma\u0027, \u0027strict_field_trials\u0027],\n},\n```\n\nAnd here https://source.chromium.org/chromium/chromium/src/+/main:third_party/webrtc/tools_webrtc/mb/mb_config.pyl;l\u003d391;drc\u003d35fc144e01cbff6a5d56cda53d09ca841d7334f2:\n\n```\n\u0027strict_field_trials\u0027: {\n  \u0027gn_args\u0027: \u0027rtc_strict_field_trials\u003dtrue\u0027,\n},\n```",
      "range": {
        "startLine": 233,
        "startChar": 0,
        "endLine": 233,
        "endChar": 33
      },
      "revId": "76bfc6599f350b1fb5185f9c8c2a1862a807f296",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    }
  ]
}