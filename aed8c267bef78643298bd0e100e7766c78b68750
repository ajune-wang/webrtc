{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "b8c23f53_e46320e5",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5234
      },
      "writtenOn": "2021-03-01T13:14:53Z",
      "side": 1,
      "message": "PTAL. Is this the proper way to use ScopedTaskSafety?",
      "revId": "aed8c267bef78643298bd0e100e7766c78b68750",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "476448c7_730006cb",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5112
      },
      "writtenOn": "2021-03-01T13:21:49Z",
      "side": 1,
      "message": "I\u0027m not very familiar with this code. Adding jonaso@ based on commit history",
      "revId": "aed8c267bef78643298bd0e100e7766c78b68750",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "02da9f55_abb4e672",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5019
      },
      "writtenOn": "2021-03-01T13:51:17Z",
      "side": 1,
      "message": "yes, that is how ScopedTaskSafety supposed to be used (except that it itself has a thread check in the destructor, and thus check you\u0027ve added is redundand)\n\nHowever.... it relies on assumption that I\u0027m afraid is not true in this case.",
      "parentUuid": "b8c23f53_e46320e5",
      "revId": "aed8c267bef78643298bd0e100e7766c78b68750",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4df5f295_ea6000e9",
        "filename": "sdk/android/src/jni/android_network_monitor.cc",
        "patchSetId": 2
      },
      "lineNbr": 235,
      "author": {
        "id": 5019
      },
      "writtenOn": "2021-03-01T13:51:17Z",
      "side": 1,
      "message": "I\u0027m not sure this is true.\n\nI remember trying to remove this async_invoker_ and thus checking where the NetworkMonitor is destroyed. The conclusion I got is that it might be destroyed on a different thread.\n\n(Unfortunately I do not remember the details: was is just too many layers and interfaces I failed to unwind, or was it destroyed from java threadpool that is beyond webrtc control and might not be the same thread that created the Monitor)",
      "range": {
        "startLine": 235,
        "startChar": 2,
        "endLine": 235,
        "endChar": 19
      },
      "revId": "aed8c267bef78643298bd0e100e7766c78b68750",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1fb478b4_f094fd25",
        "filename": "sdk/android/src/jni/android_network_monitor.cc",
        "patchSetId": 2
      },
      "lineNbr": 235,
      "author": {
        "id": 5019
      },
      "writtenOn": "2021-03-01T13:56:20Z",
      "side": 1,
      "message": "(I considered using this scenario as motivation to introduce a thread-safe \u0027TaskSafety\u0027 flag: https://webrtc-review.googlesource.com/c/src/+/169341\nbut wasn\u0027t sure it is strong enough motivation to introduce such complicated flag)",
      "parentUuid": "4df5f295_ea6000e9",
      "range": {
        "startLine": 235,
        "startChar": 2,
        "endLine": 235,
        "endChar": 19
      },
      "revId": "aed8c267bef78643298bd0e100e7766c78b68750",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "99dfad09_e9f22d0a",
        "filename": "sdk/android/src/jni/android_network_monitor.cc",
        "patchSetId": 2
      },
      "lineNbr": 235,
      "author": {
        "id": 5234
      },
      "writtenOn": "2021-03-01T14:00:44Z",
      "side": 1,
      "message": "Maybe cancel tasks from the Stop method instead?\n\nI don\u0027t know all the involved layers, but to me it looks like the class is instantiated and owned by BasicNetworkManager (rtc_base/network.cc).",
      "parentUuid": "1fb478b4_f094fd25",
      "range": {
        "startLine": 235,
        "startChar": 2,
        "endLine": 235,
        "endChar": 19
      },
      "revId": "aed8c267bef78643298bd0e100e7766c78b68750",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d899d08e_b43b6d22",
        "filename": "sdk/android/src/jni/android_network_monitor.cc",
        "patchSetId": 2
      },
      "lineNbr": 235,
      "author": {
        "id": 5019
      },
      "writtenOn": "2021-03-01T14:06:39Z",
      "side": 1,
      "message": "Cancelling in Stop might be a good solution (likely you\u0027ll need to use SafetyFlag directly then rather than ScopedSafetyFlag, but that should be easy).\n\nBut.... can NetworkMonitor be reStarted after Stopped? if yes, then it won\u0027t work because SafetyFlag can\u0027t be resurrected (and recreating it would break thread safety of using it in NotifyConnectionTypeChanged)",
      "parentUuid": "99dfad09_e9f22d0a",
      "range": {
        "startLine": 235,
        "startChar": 2,
        "endLine": 235,
        "endChar": 19
      },
      "revId": "aed8c267bef78643298bd0e100e7766c78b68750",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "37415389_d224213b",
        "filename": "sdk/android/src/jni/android_network_monitor.cc",
        "patchSetId": 2
      },
      "lineNbr": 235,
      "author": {
        "id": 5234
      },
      "writtenOn": "2021-03-01T15:48:24Z",
      "side": 1,
      "message": "\u003e But.... can NetworkMonitor be reStarted after Stopped? \n\nNot sure, needs investigation.\n\n\u003e if yes, then it won\u0027t work because SafetyFlag can\u0027t be resurrected (and recreating it would break thread safety of using it in NotifyConnectionTypeChanged)\n\nAs far as I understand, it should work to stop and discard the old safety flag, and create a fresh one to be passed with future tasks. Tasks posted with the old flag will be cancelled, but I think that\u0027s ok if one explicitly stop and restart.",
      "parentUuid": "d899d08e_b43b6d22",
      "range": {
        "startLine": 235,
        "startChar": 2,
        "endLine": 235,
        "endChar": 19
      },
      "revId": "aed8c267bef78643298bd0e100e7766c78b68750",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "992d3eb1_7e9df05f",
        "filename": "sdk/android/src/jni/android_network_monitor.cc",
        "patchSetId": 2
      },
      "lineNbr": 235,
      "author": {
        "id": 5019
      },
      "writtenOn": "2021-03-01T15:58:09Z",
      "side": 1,
      "message": "creating a new flag would create a race with NotifyConnectionTypeChanged where the flag is accessed.\n(making a [shared] copy of the flag is thread-safe, replacing flag with new one is not)",
      "parentUuid": "37415389_d224213b",
      "range": {
        "startLine": 235,
        "startChar": 2,
        "endLine": 235,
        "endChar": 19
      },
      "revId": "aed8c267bef78643298bd0e100e7766c78b68750",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "514fd66b_75f5bda4",
        "filename": "sdk/android/src/jni/android_network_monitor.cc",
        "patchSetId": 2
      },
      "lineNbr": 235,
      "author": {
        "id": 5234
      },
      "writtenOn": "2021-03-01T16:24:08Z",
      "side": 1,
      "message": "I can see two approaches to make it work:\n\n1. Ensure that NotifyConectionTypeChanged won\u0027t be called at the wrong time. Stop calls Java_NetworkMonitor_stopMonitoring, but I\u0027m not sure if it guarantees that there are no ongoing callbacks by the time it returns. I\u0027ve had a quick look at tha java code, and I can\u0027t say for sure it is sufficiently synchronized, but it seems dangerous to me if it isn\u0027t.\n\n2. Ensure that flag pointer can be replaced atomically. I don\u0027t think it matters much if NotifyConnectionTypeChanged gets the old or the new pointer, as long as it gets one of them and nothing else.",
      "parentUuid": "992d3eb1_7e9df05f",
      "range": {
        "startLine": 235,
        "startChar": 2,
        "endLine": 235,
        "endChar": 19
      },
      "revId": "aed8c267bef78643298bd0e100e7766c78b68750",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7d32f4bb_ef8434c2",
        "filename": "sdk/android/src/jni/android_network_monitor.cc",
        "patchSetId": 2
      },
      "lineNbr": 235,
      "author": {
        "id": 5234
      },
      "writtenOn": "2021-03-02T09:20:32Z",
      "side": 1,
      "message": "After pondering a little more, I think the simplest way to support the restart case would be to add a PendingTaskSafetyFlag::SetAlive() method. I\u0027ll try that out, and see what happens to the tests.",
      "parentUuid": "514fd66b_75f5bda4",
      "range": {
        "startLine": 235,
        "startChar": 2,
        "endLine": 235,
        "endChar": 19
      },
      "revId": "aed8c267bef78643298bd0e100e7766c78b68750",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    }
  ]
}