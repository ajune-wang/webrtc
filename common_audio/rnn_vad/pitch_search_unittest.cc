/*
 *  Copyright (c) 2018 The WebRTC project authors. All Rights Reserved.
 *
 *  Use of this source code is governed by a BSD-style license
 *  that can be found in the LICENSE file in the root of the source
 *  tree. An additional intellectual property rights grant can be found
 *  in the file PATENTS.  All contributing project authors may
 *  be found in the AUTHORS file in the root of the source tree.
 */

#include <utility>
#include <vector>

#include "common_audio/rnn_vad/downsample.h"
#include "common_audio/rnn_vad/pitch_search.h"
#include "common_audio/rnn_vad/test_utils.h"
#include "test/gtest.h"
#include "test/testsupport/fileutils.h"

namespace webrtc {
namespace test {

using rnn_vad::ComputePitchGainThreshold;
using rnn_vad::ComputeSlidingFrameSquareEnergies;
using rnn_vad::ComputePitchAutoCorrelation;
using rnn_vad::Decimate2xNoAntiAliasignFilter;
using rnn_vad::FindBestPitchPeriods;
using rnn_vad::kBufSize;
using rnn_vad::kHalfBufSize;
using rnn_vad::kHalfPitchMaxPeriod;
using rnn_vad::kPitchMinPeriod2x;
using rnn_vad::kPitchMaxPeriod2x;
using rnn_vad::RefinePitchPeriod;
using rnn_vad::CheckLowerPitchPeriodsAndComputePitchGain;
using rnn_vad::PitchInfo;
using rnn_vad::PitchSearch;

namespace {

constexpr std::array<float, kBufSize> kPitchBufferData = {
    -35.248100281, -25.836528778, 5.682674408,  2.880297661,  -1.648161888,
    -4.094896793,  -3.500580072,  -0.896141529, -2.989939451, -4.608089447,
    -3.721750736,  -2.290785789,  -3.326566458, -4.370154381, -3.221047878,
    -4.049056530,  -2.846302271,  -1.805017233, -1.547624588, -0.809937477,
    -1.446955442,  -3.258146763,  -1.849959373, 0.005283833,  -0.571619749,
    -0.630573988,  -0.162780523,  -2.699024916, -0.856231451, 2.748089552,
    2.026614428,   -0.474685907,  -0.571918726, 1.186420918,  1.770769954,
    2.017296791,   1.154794335,   1.082345366,  1.954892635,  2.249727726,
    2.643483400,   1.857815385,   0.064472735,  0.015978813,  0.301099658,
    0.478950322,   -0.669701457,  -0.654453993, 1.338572979,  -0.493052602,
    -1.763812065,  0.524392128,   0.010438919,  -1.726593733, -2.866710663,
    -2.065258503,  -3.010460854,  -3.994765282, -4.102010250, -3.135548830,
    -2.597487926,  -2.255330563,  -1.002008915, 0.523116589,  1.430158496,
    -1.655169368,  -2.263641357,  0.766040802,  1.166070461,  0.002490997,
    0.401043415,   -0.158550858,  -0.572042346, 1.365390539,  -1.397871614,
    -2.020734787,  -1.979169965,  -1.025816441, 0.012545407,  -1.042758584,
    -1.206598401,  -1.140330791,  -3.060853720, -3.530077934, -1.774474382,
    -1.342000484,  -3.171817064,  -2.489153862, -1.593364000, -2.552185535,
    -2.899760723,  -4.698278427,  -4.123534203, -2.613421679, -2.061793327,
    -4.113687515,  -3.174087524,  -2.367874622, -4.523970604, -4.250762939,
    -2.752931118,  -1.547106743,  -4.109455109, -3.893044472, -2.348384857,
    -3.194510698,  -3.502159357,  -2.785978794, -1.981978416, -3.279178143,
    -3.007923365,  -1.801304340,  -1.839247227, -1.003675938, -0.985928297,
    -1.647925615,  -2.166392088,  -1.947163343, 0.488545895,  1.567199469,
    -1.179960012,  -2.710370064,  -2.613196850, -3.205850124, -2.796218395,
    -0.715085745,  1.406243801,   -0.779834270, -2.075612307, -0.922246933,
    -1.849850416,  0.979040504,   3.570628166,  0.945924520,  -2.821768284,
    -6.262358189,  -6.154916763,  -0.567943573, 2.386518955,  1.673806906,
    -3.676584721,  -7.129202843,  -3.311969519, 1.126702785,  3.218248606,
    1.600885630,   -1.709451079,  -6.822564125, -6.011950970, -0.671678543,
    1.080205441,   -1.342422366,  -3.589303732, -3.586701870, -3.425134897,
    -1.078015327,  2.556719542,   0.469867468,  0.139251709,  -0.118916273,
    -1.284181952,  0.941113472,   0.550188303,  -1.767568469, -5.429461956,
    -5.065113068,  -2.111886740,  -3.606999397, -2.410579205, 1.013466120,
    1.057218194,   0.305267453,   2.898609161,  5.776575565,  4.792305946,
    -0.863526106,  -2.439013481,  -0.825202525, -2.297998428, -0.520106375,
    -0.653605103,  -3.204111576,  -2.455038786, -2.160304308, 0.622359931,
    3.803062916,   4.340928555,   2.390868664,  1.645600080,  0.405841053,
    -0.153203994,  3.438643217,   4.752261162,  1.552502871,  1.947945356,
    0.856451511,   -0.606808305,  -1.223945618, -1.845071912, -0.204472303,
    1.750840783,   2.435559034,   -1.253612280, -2.675215721, 1.614801407,
    3.002861023,   1.743503809,   3.409059286,  4.303173542,  2.441751957,
    1.752274275,   1.874113560,   2.070837736,  1.401355743,  -0.330647945,
    -0.664121151,  1.196543574,   1.506967187,  0.985752344,  -1.265938520,
    -1.433794141,  0.380195618,   0.061504841,  1.079771042,  1.773771763,
    3.226663589,   4.170571804,   4.220288277,  3.619904041,  2.316211224,
    2.012817860,   0.370972633,   0.517094851,  1.869508862,  0.357770681,
    -2.991472483,  -3.216646433,  0.232109070,  1.803660274,  2.928784370,
    4.909455776,   5.913621426,   4.653719902,  4.387111187,  4.793289661,
    4.744520187,   5.214610100,   3.996322632,  2.619040728,  0.758128643,
    -0.092789888,  0.070066452,   0.704165459,  2.042234898,  2.768569231,
    3.340583324,   3.212181091,   2.748130322,  3.077554941,  2.189792156,
    2.646749735,   2.817450523,   1.611892223,  1.981805444,  -1.088236094,
    -2.187484741,  -0.654897690,  -0.900939941, 0.148309708,  1.498139143,
    -0.261296749,  -3.220157146,  -1.727450609, 0.807144105,  -0.809251904,
    -2.361308336,  -1.421746969,  -0.793132067, -0.313778281, -0.641793191,
    -0.999286890,  0.219423503,   0.976444781,  0.152786255,  -0.405437022,
    0.120257735,   -0.392024517,  -0.019678771, 1.492373466,  0.926774263,
    0.566291928,   1.307234287,   1.496955752,  1.448441863,  2.212901354,
    1.314700723,   0.213681281,   1.011370897,  1.827155828,  0.250772655,
    -0.429592669,  0.435638547,   1.506532907,  1.350761652,  -0.387142301,
    -1.770648122,  -2.690037489,  -1.788924456, -2.023291588, -2.354584694,
    -2.587521076,  -2.002159595,  -0.355855435, 0.825611115,  3.075081587,
    2.687968254,   0.074088633,   0.439936757,  1.214704275,  2.670343399,
    1.567362547,   -1.573154926,  -3.216549397, -3.596383333, -3.893716335,
    -2.456265688,  -4.313135624,  -5.783064842, -5.344826221, -3.484399319,
    -2.235594273,  -3.568959475,  -2.447141886, -0.755384564, -1.178364277,
    1.034289122,   1.746821165,   -1.159413576, -2.569937706, -1.742212296,
    -0.270784855,  1.886857986,   0.831889153,  0.636521816,  -0.067433357,
    -0.256595969,  0.907287478,   1.575596929,  0.393882513,  -0.510042071,
    0.507258415,   0.059408009,   1.776192427,  1.664948106,  -0.341539711,
    -0.072047889,  -0.795555651,  0.704908550,  2.127685547,  1.486027241,
    1.973046541,   2.456688404,   2.871328354,  4.989626408,  5.076294422,
    4.262395859,   3.622689009,   3.241683960,  4.222597599,  3.575423479,
    1.997965097,   1.391216874,   2.329971790,  2.898612261,  3.871258736,
    2.857767582,   2.960238218,   3.047467470,  2.790968180,  2.183730364,
    1.991029263,   2.727865934,   1.561259747,  0.787606239,  3.036532879,
    2.430759192,   1.475822210,   2.307994127,  1.857011318,  1.538355589,
    2.320549965,   3.305005074,   2.554165363,  2.630100727,  3.506094217,
    4.454113483,   2.894124269,   4.061129570,  4.425602436,  3.218537807,
    2.712452173,   5.546891212,   6.138017654,  5.897895813,  5.698192596,
    4.096743584,   2.661385298,   3.646550655,  4.626225948,  5.025664330,
    3.861543894,   4.374861717,   5.388185978,  3.376737356,  2.751175404,
    3.299628258,   2.025987387,   1.094563961,  0.128147125,  -4.321690559,
    -6.165239811,  -4.245608330,  -2.974690914, -5.110438824, -6.619713306,
    -6.594148636,  -7.972207069,  -8.034727097, -7.296438217, -6.822746754,
    -6.375267029,  -7.629575729,  -8.404177666, -5.002337456, -7.024040699,
    -7.799823761,  -5.423873901,  -4.861459732, -2.772324085, 0.002551556,
    -1.445306778,  -1.726813316,  0.889497757,  1.760663986,  2.722227097,
    4.755805969,   4.188167572,   1.547533512,  2.444593906,  1.612852097,
    -0.508655310,  0.046535015,   1.720140934,  1.265070438,  0.976964772,
    2.446830273,   6.308787823,   7.798269272,  5.347163200,  3.540414810,
    3.510186911,   4.305843830,   5.957427025,  7.200410843,  7.049768448,
    7.179680824,   8.508881569,   9.094768524,  12.307214737, 14.215225220,
    11.316717148,  8.660657883,   7.528784275,  7.616339207,  6.968524933,
    4.246424198,   0.214603424,   0.449179649,  1.695000648,  0.110423088,
    -0.304885864,  -2.038585663,  -5.223299980, -5.486608505, -5.728059292,
    -4.866038799,  -2.678806305,  -3.464673519, -3.407086372, -2.490849733,
    -0.161162257,  0.118952155,   0.312392950,  -0.341049194, 0.013419867,
    3.722306252,   3.901551247,   1.781876802,  2.446551561,  3.659160852,
    2.530288696,   3.577404499,   3.201550961,  0.281389952,  -0.291333675,
    1.386508465,   2.181721210,   -2.802821159, -1.531007886, 1.608560324,
    -0.523656845,  -0.281057000,  0.571323991,  0.668095112,  -1.637194037,
    -2.756963253,  -1.340666890,  -2.180127621, -1.874165773, 0.660111070,
    0.197176635,   0.781580091,   1.749967933,  0.674724638,  -2.082683325,
    -3.159717083,  -2.898023844,  -4.691623211, -5.614190102, -6.157790661,
    -7.776132584,  -8.029224396,  -6.940879345, -7.065263271, -7.003522396,
    -5.691181183,  -7.872379780,  -7.614178658, -5.778759003, -4.605045319,
    -4.695390224,  -5.865473270,  -5.825413227, -4.648111820, -2.193091869,
    -0.172003269,  1.482686043,   -0.915655136, -2.626194954, 1.852293015,
    4.184171677,   4.083235264,   1.048256874,  -1.361350536, 0.438748837,
    1.716395378,   2.916294813,   2.639499664,  0.059617281,  -1.883811951,
    2.136622429,   6.641947269,   5.951328754,  3.875293493,  3.003573895,
    2.687273264,   4.843512535,   6.420391560,  6.014624596,  3.444208860,
    0.717782736,   2.659932613,   5.204012871,  5.516477585,  3.315031528,
    0.454023123,   -0.026421070,  0.802503586,  2.606507778,  1.679640770,
    -1.917723656,  -3.348850250,  -2.580049515, -1.783200264, -0.810425520,
    -0.374402523,  -3.705567360,  -5.367071629, -4.344952106, -0.968293428,
    1.147591949,   -1.240655184,  -2.621209621, -2.452539444, -1.543132067,
    0.422753096,   1.026433110,   0.858573675,  -0.695377707, -0.242624998,
    3.892488956,   4.100893021,   3.498974323,  1.744507313,  -0.912925899,
    0.929271877,   3.531583786,   4.938030243,  4.081199646,  0.061933577,
    -2.232783318,  -1.356980443,  1.794556737,  3.510458231,  1.323192716,
    -0.505770206,  2.126557350,   2.507567406,  2.232018232,  1.872283101,
    1.265762568,   0.577634692,   0.021484375,  3.114191532,  1.579384208,
    0.930754900,   0.308351398,   -0.425426602, 3.359810352,  2.437057972,
    1.210662127,   0.708607912,   -1.576705575, 0.007833481,  -0.178357601,
    -0.880272985,  0.078738928,   0.339336634,  -0.763550043, -1.669098496,
    -2.083987713,  -1.946106076,  -0.953974366, -0.856883168, -1.282670021,
    -1.551425457,  -2.249363184,  -2.555188894, -1.254808664, -1.368662596,
    -1.839509130,  -0.839046180,  -0.452676475, 0.721064806,  1.988085508,
    0.456556678,   -0.255003691,  0.384676337,  1.075410485,  0.617453933,
    1.470067143,   1.493275523,   0.954153359,  1.027234554,  -0.434967309,
    -0.694453120,  0.477285773,   0.436861426,  1.486879349,  -0.158989906,
    0.361879885,   3.234876394,   1.105287671,  -0.982552111, 1.514200211,
    0.821707547,   -1.142312169,  1.845819831,  3.934516191,  2.251807690,
    0.530044913,   -1.043874860,  -0.891365111, -0.264675498, 0.288083673,
    0.606682122,   -1.132072091,  -3.530973911, -2.005296707, 0.335011721,
    -0.240332901,  -2.763209343,  -2.148519516, -1.864180326, -0.814615071,
    -1.589591861,  -2.455522776,  -0.756391644, 0.689822078,  0.171640277,
    -0.225937843,  0.363246441,   0.098157287,  -1.638891220, -0.400456548,
    1.076233864,   2.288599968,   2.716089964,  1.585703373,  0.846301913,
    0.887506902,   -0.439320147,  -0.823126972, 0.712436378,  1.027045608,
    0.360925227,   -2.289939404,  -1.035227180, 0.931313038,  -0.133454978,
    0.160856903,   0.700653732,   0.817580283,  -0.223383546, 0.713623106,
    1.327106714,   1.558022618,   1.346337557,  -0.661301017, 0.707845926,
    2.435726643,   0.763329387,   0.485213757,  2.295393229,  4.525130272,
    2.354229450,   -0.043517172,  1.635316610,  1.651852608,  1.240020633,
    0.320237398,   -0.571269870,  -0.686546564, -1.796948791, -0.966899753,
    -0.404109240,  -1.295783877,  -2.058131218, -2.279026985, -2.183017731,
    -2.516988277,  -0.276667058,  -0.475267202, -2.645681143, -0.504431605,
    -1.031255722,  -3.401877880,  -1.075011969, -0.667404234, -2.419279575,
    -1.230643749,  1.151491284,   0.374734998,  -2.004124880, -1.923788905,
    -0.767004371,  0.512374282,   2.254727125,  1.373157024,  0.633022547,
    0.194831967,   0.226476192,   1.294842482,  0.838023365,  1.291390896,
    0.128176212,   -1.109287858,  0.166733295,  0.847469866,  -0.662097514,
    -0.489783406,  1.523754478,   1.903803706,  -0.748670340, 0.721136212,
    1.627746105,   -0.731291413,  0.646574259,  1.722917080,  0.372141778,
    -0.063563704,  0.916404963,   2.092662811,  1.699481010,  0.181074798,
    -1.361395121,  0.581034362,   1.451567292,  0.526586652,  1.206429839,
    -1.041464567,  -2.891606331,  0.638695598,  1.198848009,  -0.771047413,
    -1.074250221,  -0.500067651,  0.308775485,  0.552724898,  1.083443999,
    1.371356130,   0.360372365,   3.391613960,  2.896605730,  0.799045980,
    0.922905385,   3.240214348,   4.740911484,  2.945639610,  2.544054747,
    3.048654795,   3.541822433,   4.390746117,  5.632675171,  7.721554756,
    6.390114784,   5.962307930,   5.873732567,  5.625522137,  4.857854843,
    3.148367405,   3.966898203,   4.309705257,  3.543770313,  2.427399397,
    0.324177742,   -1.809771061,  -2.191485405, 0.006873131,  -0.876847267,
    -0.928904057,  0.889565945,   -0.127671242, -1.695463657, -1.193793774,
    -1.452976227,  -3.406696558,  -2.564189196, -2.136555195, -2.374645710,
    -3.230790854,  -3.076714516,  -3.245117664, -2.254387617, -0.245034039,
    -1.072510719,  -1.887740970,  0.431427240,  1.132410765,  -1.015120149,
    -0.274977922,  -1.910447717,  -2.865208864, -0.131696820};

constexpr std::array<float, 385> kPitchBufferFrameSquareEnergies = {
    5150.291992188, 5150.894531250, 5145.122558594, 5148.914062500,
    5152.802734375, 5156.541015625, 5163.048339844, 5172.149414062,
    5177.349121094, 5184.365722656, 5199.292480469, 5202.612304688,
    5197.510253906, 5189.979492188, 5183.533203125, 5190.677734375,
    5203.943359375, 5207.876464844, 5209.395019531, 5225.451660156,
    5249.794921875, 5271.816894531, 5280.045410156, 5285.289062500,
    5288.319335938, 5289.758789062, 5294.285644531, 5289.979980469,
    5287.337402344, 5287.237792969, 5281.462402344, 5271.676269531,
    5256.257324219, 5240.524414062, 5230.869628906, 5207.531250000,
    5176.040039062, 5144.021484375, 5109.295410156, 5068.527832031,
    5008.909667969, 4977.587890625, 4959.000976562, 4950.016601562,
    4940.795410156, 4937.358398438, 4935.286132812, 4914.154296875,
    4906.706542969, 4906.924804688, 4907.674804688, 4899.855468750,
    4894.340820312, 4906.948242188, 4910.065429688, 4921.032714844,
    4949.294433594, 4982.643066406, 5000.996093750, 5005.875488281,
    5020.441894531, 5031.938964844, 5041.877441406, 5035.990722656,
    5037.362792969, 5043.038085938, 5044.236328125, 5042.322753906,
    5041.990722656, 5047.362304688, 5056.785644531, 5054.579101562,
    5050.326171875, 5053.495117188, 5060.186523438, 5065.591796875,
    5066.717285156, 5069.499511719, 5076.201171875, 5076.687011719,
    5076.316894531, 5077.581054688, 5076.226074219, 5074.094238281,
    5074.039062500, 5073.663574219, 5076.283691406, 5077.278808594,
    5076.094238281, 5077.806152344, 5081.035644531, 5082.431640625,
    5082.995605469, 5084.653320312, 5084.936035156, 5085.394042969,
    5085.735351562, 5080.651855469, 5080.542968750, 5079.969238281,
    5076.432617188, 5072.439453125, 5073.252441406, 5071.974609375,
    5071.458496094, 5066.017578125, 5065.670898438, 5065.144042969,
    5055.592773438, 5060.104980469, 5060.505371094, 5054.157226562,
    5056.915039062, 5067.208007812, 5060.940917969, 5058.419921875,
    5053.248046875, 5049.823730469, 5048.573242188, 5053.195312500,
    5053.444335938, 5054.143066406, 5056.270019531, 5063.881835938,
    5070.784667969, 5074.042480469, 5080.785156250, 5085.663085938,
    5095.979003906, 5101.596191406, 5088.784667969, 5087.686523438,
    5087.946777344, 5087.369140625, 5081.445312500, 5081.519042969,
    5087.940917969, 5102.099121094, 5126.864257812, 5147.613281250,
    5170.079589844, 5189.276367188, 5210.265136719, 5244.745117188,
    5268.821777344, 5277.381835938, 5279.768066406, 5278.750000000,
    5283.853027344, 5292.671386719, 5291.744628906, 5294.732421875,
    5294.322265625, 5294.267089844, 5297.530761719, 5302.179199219,
    5312.768066406, 5323.202148438, 5335.357910156, 5344.610839844,
    5347.597167969, 5346.077148438, 5346.071289062, 5346.083984375,
    5348.088378906, 5349.661621094, 5350.157226562, 5351.855957031,
    5347.257812500, 5345.171875000, 5344.617675781, 5343.106445312,
    5342.778808594, 5338.655761719, 5341.668457031, 5347.518066406,
    5362.014160156, 5361.167968750, 5362.926269531, 5371.575195312,
    5374.099609375, 5381.186523438, 5381.963867188, 5386.806152344,
    5389.590820312, 5384.562011719, 5372.485839844, 5370.576660156,
    5369.640136719, 5369.698242188, 5371.199707031, 5372.644531250,
    5394.006835938, 5395.366699219, 5395.259277344, 5395.398437500,
    5395.895507812, 5401.420898438, 5420.036621094, 5434.017578125,
    5434.215820312, 5437.827636719, 5442.944335938, 5450.980468750,
    5449.246582031, 5449.135742188, 5453.259765625, 5453.792968750,
    5459.676757812, 5460.213867188, 5479.227539062, 5512.076171875,
    5520.272949219, 5519.662109375, 5517.395996094, 5516.550292969,
    5520.786621094, 5527.268066406, 5526.668457031, 5549.916992188,
    5577.750976562, 5580.141113281, 5579.533691406, 5576.632324219,
    5573.938476562, 5571.166503906, 5570.603027344, 5570.708496094,
    5577.238769531, 5577.625976562, 5589.325683594, 5602.189941406,
    5612.587402344, 5613.887695312, 5613.588867188, 5608.100585938,
    5632.956054688, 5679.322265625, 5682.149414062, 5683.846191406,
    5691.708496094, 5683.279785156, 5694.248535156, 5744.740722656,
    5756.655761719, 5755.952148438, 5756.665527344, 5750.700195312,
    5784.060546875, 5823.021972656, 5829.233398438, 5817.804687500,
    5827.333984375, 5826.451171875, 5824.887695312, 5825.734375000,
    5813.386230469, 5789.609863281, 5779.115234375, 5778.762695312,
    5785.748046875, 5792.981933594, 5787.567871094, 5778.096679688,
    5764.337402344, 5766.734375000, 5766.489746094, 5769.543945312,
    5773.183593750, 5775.720703125, 5774.311523438, 5769.303710938,
    5765.815917969, 5767.521484375, 5775.251953125, 5785.067382812,
    5770.117187500, 5749.073242188, 5747.606933594, 5757.671875000,
    5762.530273438, 5774.506347656, 5784.737304688, 5775.916015625,
    5779.816894531, 5795.064453125, 5808.736816406, 5813.699707031,
    5823.773925781, 5840.490234375, 5833.751953125, 5810.150390625,
    5800.072265625, 5815.070800781, 5822.964355469, 5817.615234375,
    5783.978027344, 5748.952636719, 5735.553710938, 5730.132812500,
    5724.260253906, 5721.703613281, 5695.653808594, 5652.838867188,
    5649.729980469, 5647.268554688, 5647.265136719, 5641.350585938,
    5636.762695312, 5637.900390625, 5639.662109375, 5639.672851562,
    5638.901367188, 5622.253417969, 5604.906738281, 5601.475585938,
    5595.938476562, 5595.687011719, 5598.612792969, 5601.322753906,
    5598.558593750, 5577.227050781, 5544.295410156, 5514.978027344,
    5499.678222656, 5488.303222656, 5471.735839844, 5429.718261719,
    5376.806640625, 5348.682128906, 5307.851074219, 5260.914062500,
    5212.738281250, 5148.544921875, 5091.187500000, 5053.512207031,
    5023.785156250, 5002.202148438, 4994.252441406, 4984.498046875,
    4980.251464844, 4979.796875000, 4976.738769531, 4979.579589844,
    4986.528320312, 4991.153808594, 4991.462890625, 4987.881347656,
    4987.417480469, 4983.885742188, 4984.341308594, 4985.302734375,
    4985.303710938, 4985.449707031, 4989.282226562, 4994.246582031,
    4992.635742188, 4992.064453125, 4987.331054688, 4985.806152344,
    4986.047851562, 4985.968750000, 4979.141113281, 4976.958984375,
    4972.650390625, 4959.916503906, 4956.325683594, 4956.408691406,
    4949.288085938, 4951.827636719, 4962.202636719, 4981.184570312,
    4992.152832031, 4997.386230469, 5011.211914062, 5026.242187500,
    5023.573730469, 5012.373046875, 5017.451171875, 5010.541015625,
    4980.446777344, 4958.639648438, 4963.649902344, 5627.020507812,
    6869.356445312};

constexpr std::array<float, 147> kPitchBufferAutoCorrCoeffs = {
    -423.526794434, -260.724456787, -173.558380127, -71.720344543,
    -1.149698257,   71.451370239,   71.455848694,   149.755233765,
    199.401885986,  243.961334229,  269.339721680,  243.776992798,
    294.753814697,  209.465484619,  139.224700928,  131.474136353,
    42.872886658,   -32.431114197,  -90.191261292,  -94.912338257,
    -172.627227783, -138.089843750, -89.236648560,  -69.348426819,
    25.044368744,   44.184486389,   61.602676392,   150.157394409,
    185.254760742,  233.352676392,  296.255371094,  292.464141846,
    256.903472900,  250.926574707,  174.207122803,  130.214172363,
    65.655899048,   -68.448402405,  -147.239669800, -230.553405762,
    -311.217895508, -447.173889160, -509.306060791, -551.155822754,
    -580.678405762, -658.902709961, -697.141967773, -751.233032227,
    -690.860351562, -571.689575195, -521.124572754, -429.477294922,
    -375.685913086, -277.387329102, -154.100753784, -105.723197937,
    117.502632141,  219.290512085,  255.376770020,  444.264831543,
    470.727416992,  460.139129639,  494.179931641,  389.801116943,
    357.082763672,  222.748138428,  179.100601196,  -26.893497467,
    -85.033767700,  -223.577529907, -247.136367798, -223.011428833,
    -292.724914551, -246.538131714, -247.388458252, -228.452484131,
    -30.476575851,  4.652336121,    64.730491638,   156.081161499,
    177.569305420,  261.671569824,  336.274414062,  424.203369141,
    564.190734863,  608.841796875,  671.252136230,  712.249877930,
    623.135498047,  564.775695801,  576.405639648,  380.181854248,
    306.687164307,  180.344757080,  -41.317466736,  -183.548736572,
    -223.835021973, -273.299652100, -235.727813721, -276.899627686,
    -302.224975586, -349.227142334, -370.935058594, -364.022613525,
    -287.682952881, -273.828704834, -156.869720459, -88.654510498,
    14.299798012,   137.048034668,  260.182342529,  423.380767822,
    591.277282715,  581.151306152,  643.898864746,  547.919006348,
    355.534271240,  238.222915649,  4.463035583,    -193.763305664,
    -281.212432861, -546.399353027, -615.602600098, -574.225891113,
    -726.701843262, -564.840942383, -588.488037109, -651.052551270,
    -453.769104004, -502.886627197, -463.373016357, -291.709564209,
    -288.857421875, -152.114242554, 105.401855469,  211.479980469,
    468.501983643,  796.984985352,  880.254089355,  1114.614379883,
    1219.664794922, 1093.687377930, 1125.042602539, 1020.942382812,
    794.315246582,  772.126831055,  447.410736084};

// Given a vector of N set sizes {s_i}, compute the product of the sets S_i
// which are defined as {0, ..., s_i - 1}. It returns a vector having size equal
// to s_0*s_1*...*s_n-1 and each element of that vector is a N elements list of
// indexes.
// Example: ComputeIndexSetsProduct({3, 2}) returns
// {{0, 0}, {0, 1}, {1, 0}, {1, 1}, {2, 0}, {2, 1}}.
std::vector<std::vector<size_t>> ComputeIndexSetsProduct(
    const std::vector<size_t> set_sizes) {
  std::vector<std::vector<size_t>> prod = {{}};
  for (const size_t s : set_sizes) {
    std::vector<std::vector<size_t>> tmp;
    for (const auto& list : prod) {
      for (size_t i = 0; i < s; ++i) {
        tmp.push_back(list);
        tmp.back().push_back(i);  // Append |i| at the end of the copy |list|.
      }
    }
    prod = std::move(tmp);
  }
  return prod;
}

}  // namespace

TEST(RnnVad, ComputePitchGainThresholdBitExactness) {
  // Input.
  constexpr size_t t1s[7] = {31, 113, 63, 30, 76, 31, 78};
  constexpr size_t ks[7] = {7, 2, 2, 5, 2, 5, 2};
  constexpr size_t t0s[7] = {219, 226, 126, 152, 151, 153, 156};
  constexpr float g0s[7] = {0.45649201, 0.20967799, 0.210788,  0.82356697,
                            0.79522997, 0.85069299, 0.72750503};
  constexpr size_t t_prevs[7] = {199, 219, 364, 149, 151, 150, 153};
  constexpr float g_prevs[7] = {0.604747,   0.40392199, 0.098519,  0.55535901,
                                0.82356697, 0.79073799, 0.85069299};
  // Expected output.
  constexpr float thresholds[7] = {0.40000001, 0.30000001, 0.40000001, 0.700032,
                                   0.675946,   0.72308898, 0.618379};
  for (size_t i = 0; i < 7; ++i) {
    EXPECT_NEAR(thresholds[i],
                ComputePitchGainThreshold(t1s[i], ks[i], t0s[i], g0s[i],
                                          t_prevs[i], g_prevs[i]),
                kExpectNearTolerance);
  }
}

TEST(RnnVad, ComputeSlidingFrameSquareEnergiesBitExactness) {
  std::array<float, kPitchBufferFrameSquareEnergies.size()> computed_output;
  ComputeSlidingFrameSquareEnergies(
      {kPitchBufferData.data(), kPitchBufferData.size()},
      {computed_output.data(), computed_output.size()});
  ExpectNear({kPitchBufferFrameSquareEnergies.data(),
              kPitchBufferFrameSquareEnergies.size()},
             {computed_output.data(), computed_output.size()}, 3e-2);
}

TEST(RnnVad, ComputePitchAutoCorrelationBitExactness) {
  // Downsample the pitch buffer.
  std::array<float, kHalfBufSize> pitch_buf_decimated;
  Decimate2xNoAntiAliasignFilter({kPitchBufferData}, {pitch_buf_decimated});
  // Test ComputePitchAutoCorrelation().
  std::array<float, kPitchBufferAutoCorrCoeffs.size()> computed_output;
  ComputePitchAutoCorrelation(
      {pitch_buf_decimated.data(), pitch_buf_decimated.size()},
      kHalfPitchMaxPeriod, {computed_output.data(), computed_output.size()});
  ExpectNear(
      {kPitchBufferAutoCorrCoeffs.data(), kPitchBufferAutoCorrCoeffs.size()},
      {computed_output.data(), computed_output.size()}, 3e-3);
}

TEST(RnnVad, FindBestPitchPeriodsBitExactness) {
  // Downsample the pitch buffer.
  std::array<float, kHalfBufSize> pitch_buf_decimated;
  Decimate2xNoAntiAliasignFilter({kPitchBufferData}, {pitch_buf_decimated});
  // Test FindBestPitchPeriods().
  const auto pitch_candidates_inv_lags = FindBestPitchPeriods(
      {kPitchBufferAutoCorrCoeffs}, {pitch_buf_decimated}, kHalfPitchMaxPeriod);
  const std::array<size_t, 2> expected_output = {140, 142};
  EXPECT_EQ(expected_output, pitch_candidates_inv_lags);
}

TEST(RnnVad, RefinePitchPeriodBitExactness) {
  // Downsample the pitch buffer.
  std::array<float, kHalfBufSize> pitch_buf_decimated;
  Decimate2xNoAntiAliasignFilter({kPitchBufferData}, {pitch_buf_decimated});
  // Test RefinePitchPeriod().
  const std::array<size_t, 2> pitch_candidates_inv_lags = {280, 284};
  const auto pitch_inv_lag = RefinePitchPeriod(
      {kPitchBufferData.data(), kPitchBufferData.size()},
      {pitch_candidates_inv_lags.data(), pitch_candidates_inv_lags.size()});
  EXPECT_EQ(560u, pitch_inv_lag);
}

TEST(RnnVad, CheckLowerPitchPeriodsAndComputePitchGainBitExactness) {
  constexpr std::array<size_t, 2> kPitchPeriods = {
      3 * kPitchMinPeriod2x / 2,
      (3 * kPitchMinPeriod2x + kPitchMaxPeriod2x) / 2,
  };
  constexpr std::array<float, 2> kPitchGains = {0.35f, 0.75f};
  const auto input_data_index_lists = ComputeIndexSetsProduct({
      kPitchPeriods.size(),  // Initial pitch periods.
      kPitchPeriods.size(),  // Previous pitch periods.
      kPitchGains.size(),    // Previous pitch gains.
  });

  constexpr size_t num_test_cases = 8;
  RTC_CHECK_EQ(num_test_cases, input_data_index_lists.size());
  constexpr std::array<size_t, num_test_cases> kExpectedPitchPeriods = {
      91, 91, 91, 91, 475, 475, 475, 475,
  };
  constexpr std::array<float, num_test_cases> kExpectedPitchGains = {
      -0.0188608f, -0.0188608f, -0.0188608f, -0.0188608f,
      -0.0904344f, -0.0904344f, -0.0904344f, -0.0904344f,
  };

  for (size_t i = 0; i < num_test_cases; ++i) {
    const auto& indexes = input_data_index_lists[i];
    const size_t initial_pitch_period = kPitchPeriods[indexes[0]];
    const size_t prev_pitch_period = kPitchPeriods[indexes[1]];
    const float prev_pitch_gain = kPitchGains[indexes[2]];
    std::ostringstream ss;
    ss << "#" << i << " " << initial_pitch_period << " " << prev_pitch_period
       << " " << prev_pitch_gain;
    SCOPED_TRACE(ss.str());

    const auto computed_output = CheckLowerPitchPeriodsAndComputePitchGain(
        {kPitchBufferData.data(), kPitchBufferData.size()},
        initial_pitch_period, {prev_pitch_period, prev_pitch_gain});
    EXPECT_EQ(kExpectedPitchPeriods[i], computed_output.period);
    EXPECT_NEAR(kExpectedPitchGains[i], computed_output.gain, 1e-6);
  }
}

TEST(RnnVad, PitchSearchBitExactness) {
  // LP residual and pitch information reader.
  BinaryFileReader<float, 864> data_reader(
      test::ResourcePath("common_audio/rnn_vad/lp_res", "dat"));
  // Buffers.
  std::array<float, 864> lp_residual;
  float expected_pitch_period, expected_pitch_gain;

  PitchInfo last_pitch;
  const size_t num_frames = 25;  // data_reader.data_length() / 866;
  for (size_t i = 0; i < num_frames; ++i) {
    SCOPED_TRACE(i);
    data_reader.ReadChunk({lp_residual.data(), lp_residual.size()});
    data_reader.ReadValue(&expected_pitch_period);
    data_reader.ReadValue(&expected_pitch_gain);
    last_pitch =
        PitchSearch({lp_residual.data(), lp_residual.size()}, last_pitch);
    EXPECT_EQ(static_cast<size_t>(expected_pitch_period), last_pitch.period);
    EXPECT_NEAR(expected_pitch_gain, last_pitch.gain, 1e-6);
  }
}

}  // namespace test
}  // namespace webrtc
