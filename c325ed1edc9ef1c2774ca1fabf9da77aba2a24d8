{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "ae94232c_7777ab95",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 5023
      },
      "writtenOn": "2023-04-26T11:07:59Z",
      "side": 1,
      "message": "As per offline discussion, Danil will do OWNERS review. Thanks!\n\n-- \nlgtm from me, but please address Danil\u0027s comments too.",
      "revId": "c325ed1edc9ef1c2774ca1fabf9da77aba2a24d8",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e60edcb3_47c9ed25",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 5019
      },
      "writtenOn": "2023-04-26T11:15:42Z",
      "side": 1,
      "message": "few more nits,\notherwise lg",
      "revId": "c325ed1edc9ef1c2774ca1fabf9da77aba2a24d8",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "220b1ec1_5439a901",
        "filename": "modules/rtp_rtcp/source/forward_error_correction.cc",
        "patchSetId": 6
      },
      "lineNbr": 410,
      "author": {
        "id": 5019
      },
      "writtenOn": "2023-04-26T11:15:42Z",
      "side": 1,
      "message": "when comparing for equality, prefer to put variable 1st, constant - 2nd\ni.e. \nRTC_CHECK_EQ(fec_packet-\u003eprotected_ssrcs.size(), 1);\nsame as you would write\nif (fec_packet-\u003eprotected_ssrcs.size() \u003d\u003d 1) {... }",
      "revId": "c325ed1edc9ef1c2774ca1fabf9da77aba2a24d8",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7f669276_2fcb66e0",
        "filename": "modules/rtp_rtcp/source/forward_error_correction.cc",
        "patchSetId": 6
      },
      "lineNbr": 410,
      "author": {
        "id": 20714
      },
      "writtenOn": "2023-04-27T19:11:46Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "220b1ec1_5439a901",
      "revId": "c325ed1edc9ef1c2774ca1fabf9da77aba2a24d8",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7a5c00e2_ac4eb912",
        "filename": "modules/rtp_rtcp/source/forward_error_correction.cc",
        "patchSetId": 6
      },
      "lineNbr": 411,
      "author": {
        "id": 5019
      },
      "writtenOn": "2023-04-26T11:15:42Z",
      "side": 1,
      "message": "I think RTC_CHECK_EQ uses compare that is safe when comparing signed and unsigned integers (and as fast), i.e. no need to convert constant to the [U]nsigned.\n\n[unlike EXPECT_EQ - that macro is outside of control of webrtc developers]",
      "range": {
        "startLine": 411,
        "startChar": 15,
        "endLine": 411,
        "endChar": 17
      },
      "revId": "c325ed1edc9ef1c2774ca1fabf9da77aba2a24d8",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "56c38096_790ab5a3",
        "filename": "modules/rtp_rtcp/source/forward_error_correction.h",
        "patchSetId": 6
      },
      "lineNbr": 139,
      "author": {
        "id": 5019
      },
      "writtenOn": "2023-04-26T08:13:48Z",
      "side": 1,
      "message": "2nd parameter isn\u0027t \u0027max size\u0027,  but \u0027max number of elements to store inline\u0027\n\nInlinedVector would store up to \u003c2nd paramter\u003e elements inline, and would become an std::vector underneath if there are more entries.\n\nSo, to avoid spending too much memory here it might be better to use smaller size, so that vector would be inlined in a typical use case and allocate in a rare case when lots of SSRCs are protected.\n\nhttps://source.chromium.org/chromium/chromium/src/+/main:third_party/abseil-cpp/absl/container/inlined_vector.h;l\u003d65-67;drc\u003d24b05ec85c4ff3834f894322d1478d2df19d0635\n\n(or do not worry, picking right container might be premature optimization)",
      "range": {
        "startLine": 139,
        "startChar": 34,
        "endLine": 139,
        "endChar": 46
      },
      "revId": "c325ed1edc9ef1c2774ca1fabf9da77aba2a24d8",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2571f90e_3d33aa0f",
        "filename": "modules/rtp_rtcp/source/forward_error_correction.h",
        "patchSetId": 6
      },
      "lineNbr": 139,
      "author": {
        "id": 20714
      },
      "writtenOn": "2023-04-27T19:11:46Z",
      "side": 1,
      "message": "Ah OK I see. Changed it for now to 4, we can change this in the future for optimization.",
      "parentUuid": "56c38096_790ab5a3",
      "range": {
        "startLine": 139,
        "startChar": 34,
        "endLine": 139,
        "endChar": 46
      },
      "revId": "c325ed1edc9ef1c2774ca1fabf9da77aba2a24d8",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b36b1604_3aa00d0d",
        "filename": "modules/rtp_rtcp/source/forward_error_correction.h",
        "patchSetId": 6
      },
      "lineNbr": 143,
      "author": {
        "id": 5019
      },
      "writtenOn": "2023-04-26T11:20:41Z",
      "side": 1,
      "message": "The size of the 4 new vector, will they always be the same?\n\nIf yes, then it might be safer/cleaner to add single vector,\nsomething like\n\n```\nstruct PickAGoodNameMaybeProtectedStream {\n  uint32_t ssrc;\n  uint16_t seq_num_base;\n  size_t packet_mask_offset;\n  size_t packet_mask_size;\n};\nabsl::InlinedVector\u003cProtectedStream, 2\u003e protected_streams;\n...\n\n.protected_streams \u003d {{.ssrc \u003d fec_packet-\u003essrc,  // Due to RED.\n  .seq_num_base \u003d seq_num_base,\n  .packet_mask_offset \u003d kPacketMaskOffset,\n  .packet_mask_size \u003d packet_mask_size}};\n```",
      "range": {
        "startLine": 143,
        "startChar": 46,
        "endLine": 143,
        "endChar": 63
      },
      "revId": "c325ed1edc9ef1c2774ca1fabf9da77aba2a24d8",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dcc8116a_361b3697",
        "filename": "modules/rtp_rtcp/source/forward_error_correction.h",
        "patchSetId": 6
      },
      "lineNbr": 143,
      "author": {
        "id": 20714
      },
      "writtenOn": "2023-04-27T19:11:46Z",
      "side": 1,
      "message": "Since in the updated flexfec we are going to populate the \"protected_ssrcs\" elsewhere (in the RTP header parsing), didn\u0027t want to put all of these in the same struct for now. it\u0027s possible to put seq_num_base, packet_mask_offset and packet_mask_size in a separate struct as they will be populated in the same FEC header reader function, WDYT?",
      "parentUuid": "b36b1604_3aa00d0d",
      "range": {
        "startLine": 143,
        "startChar": 46,
        "endLine": 143,
        "endChar": 63
      },
      "revId": "c325ed1edc9ef1c2774ca1fabf9da77aba2a24d8",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7f7a3287_9ffef7c7",
        "filename": "modules/rtp_rtcp/source/forward_error_correction.h",
        "patchSetId": 6
      },
      "lineNbr": 143,
      "author": {
        "id": 5019
      },
      "writtenOn": "2023-04-28T09:02:38Z",
      "side": 1,
      "message": "personally I prefer less duplication in data structures: if number of ssrcs has to be the same as number of other properties, I would prefer the single vector, single place that contains the size.\nFirst it would be created and filled with ssrcs, leaving other fields to some default values, then it would be udpdated to fill those other fields.\n\nTo be safer though this extra fields still better be initialized:\n```\nstruct PickAGoodNameMaybeProtectedStream {\n  uint32_t ssrc \u003d 0;\n  uint16_t seq_num_base \u003d 0;\n  size_t packet_mask_offset \u003d 0;\n  size_t packet_mask_size \u003d 0;\n};\n```\n\nbut if you think having two vectors would be cleaner overall, I won\u0027t mind.\nwith two vectors it is easier to check when data is in inconsistent state.",
      "parentUuid": "dcc8116a_361b3697",
      "range": {
        "startLine": 143,
        "startChar": 46,
        "endLine": 143,
        "endChar": 63
      },
      "revId": "c325ed1edc9ef1c2774ca1fabf9da77aba2a24d8",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "581cbc80_63083c4c",
        "filename": "modules/rtp_rtcp/source/ulpfec_header_reader_writer_unittest.cc",
        "patchSetId": 6
      },
      "lineNbr": 82,
      "author": {
        "id": 5019
      },
      "writtenOn": "2023-04-26T08:17:11Z",
      "side": 1,
      "message": "or\nusing ::testing::SizeIs;\n...\nASSERT_THAT(read_packet.protected_ssrcs, SizeIs(1));\n\nthen in case of error the message would include the full array, including its values instead or printing just it\u0027s size.\n\nbetter yet - you can combine Size matcher and element value matcher:\n\nEXPECT_THAT(read_packet.protected_ssrcs, ElementsAre(kMediaSsrc));\n\ninstead of having two matchers:\nASSERT_EQ(read_packet.protected_ssrcs.size(), 1U);\nEXPECT_EQ(kMediaSsrc, read_packet.protected_ssrcs[0]);",
      "revId": "c325ed1edc9ef1c2774ca1fabf9da77aba2a24d8",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "83b0504d_8abdf41d",
        "filename": "modules/rtp_rtcp/source/ulpfec_header_reader_writer_unittest.cc",
        "patchSetId": 6
      },
      "lineNbr": 82,
      "author": {
        "id": 20714
      },
      "writtenOn": "2023-04-27T19:11:46Z",
      "side": 1,
      "message": "Done.",
      "parentUuid": "581cbc80_63083c4c",
      "revId": "c325ed1edc9ef1c2774ca1fabf9da77aba2a24d8",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    }
  ]
}