{
  "comments": [
    {
      "key": {
        "uuid": "ce2a255a_00b70a14",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 10798
      },
      "writtenOn": "2020-09-08T07:57:54Z",
      "side": 1,
      "message": "You should probably unit test UntypedFunction directly; most of the complicated things that can happen are in there, and it\u0027s simpler than the full CSC.",
      "revId": "cc648a454833716224b2c7e40fd4a4dbbedca0df",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d2e31e49_8e0a204f",
        "filename": "rtc_base/cancer_stick_castle_unittest.cc",
        "patchSetId": 4
      },
      "lineNbr": 2,
      "author": {
        "id": 5087
      },
      "writtenOn": "2020-09-08T06:46:27Z",
      "side": 1,
      "message": "2020",
      "range": {
        "startLine": 2,
        "startChar": 14,
        "endLine": 2,
        "endChar": 18
      },
      "revId": "cc648a454833716224b2c7e40fd4a4dbbedca0df",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a1379ca8_e7c95d2d",
        "filename": "rtc_base/cancer_stick_castle_unittest.cc",
        "patchSetId": 4
      },
      "lineNbr": 2,
      "author": {
        "id": 13719
      },
      "writtenOn": "2020-09-10T21:05:31Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d2e31e49_8e0a204f",
      "range": {
        "startLine": 2,
        "startChar": 14,
        "endLine": 2,
        "endChar": 18
      },
      "revId": "cc648a454833716224b2c7e40fd4a4dbbedca0df",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f51451da_f197d05f",
        "filename": "rtc_base/cancer_stick_castle_unittest.cc",
        "patchSetId": 4
      },
      "lineNbr": 23,
      "author": {
        "id": 5087
      },
      "writtenOn": "2020-09-08T06:46:27Z",
      "side": 1,
      "message": "a",
      "range": {
        "startLine": 23,
        "startChar": 44,
        "endLine": 23,
        "endChar": 45
      },
      "revId": "cc648a454833716224b2c7e40fd4a4dbbedca0df",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "405a436b_951165a9",
        "filename": "rtc_base/cancer_stick_castle_unittest.cc",
        "patchSetId": 4
      },
      "lineNbr": 23,
      "author": {
        "id": 13719
      },
      "writtenOn": "2020-09-10T21:05:31Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f51451da_f197d05f",
      "range": {
        "startLine": 23,
        "startChar": 44,
        "endLine": 23,
        "endChar": 45
      },
      "revId": "cc648a454833716224b2c7e40fd4a4dbbedca0df",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "511cd20d_3b2d745c",
        "filename": "rtc_base/cancer_stick_castle_unittest.cc",
        "patchSetId": 4
      },
      "lineNbr": 24,
      "author": {
        "id": 10798
      },
      "writtenOn": "2020-09-08T07:57:54Z",
      "side": 1,
      "message": "Why this particular name? I would suggest either something meaningful (e.g. \"csc\" or \"callbacks\") or a much shorter nonsense name (e.g. \"a\").",
      "range": {
        "startLine": 24,
        "startChar": 41,
        "endLine": 24,
        "endChar": 45
      },
      "revId": "cc648a454833716224b2c7e40fd4a4dbbedca0df",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8b25c9b7_57a79899",
        "filename": "rtc_base/cancer_stick_castle_unittest.cc",
        "patchSetId": 4
      },
      "lineNbr": 24,
      "author": {
        "id": 13719
      },
      "writtenOn": "2020-09-10T21:05:31Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "511cd20d_3b2d745c",
      "range": {
        "startLine": 24,
        "startChar": 41,
        "endLine": 24,
        "endChar": 45
      },
      "revId": "cc648a454833716224b2c7e40fd4a4dbbedca0df",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1794c1ff_17b56cee",
        "filename": "rtc_base/cancer_stick_castle_unittest.cc",
        "patchSetId": 4
      },
      "lineNbr": 26,
      "author": {
        "id": 5087
      },
      "writtenOn": "2020-09-08T06:46:27Z",
      "side": 1,
      "message": "a",
      "range": {
        "startLine": 26,
        "startChar": 17,
        "endLine": 26,
        "endChar": 18
      },
      "revId": "cc648a454833716224b2c7e40fd4a4dbbedca0df",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2857e509_980c5027",
        "filename": "rtc_base/cancer_stick_castle_unittest.cc",
        "patchSetId": 4
      },
      "lineNbr": 26,
      "author": {
        "id": 13719
      },
      "writtenOn": "2020-09-10T21:05:31Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1794c1ff_17b56cee",
      "range": {
        "startLine": 26,
        "startChar": 17,
        "endLine": 26,
        "endChar": 18
      },
      "revId": "cc648a454833716224b2c7e40fd4a4dbbedca0df",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d54b7cd7_208053a8",
        "filename": "rtc_base/cancer_stick_castle_unittest.cc",
        "patchSetId": 4
      },
      "lineNbr": 29,
      "author": {
        "id": 5087
      },
      "writtenOn": "2020-09-08T06:46:27Z",
      "side": 1,
      "message": "I would say \"MultipleParametersMessage\" in this case where we have two params for CSC.\n\nSingle message sounds like \"single .Send\" more than single parameter.",
      "range": {
        "startLine": 29,
        "startChar": 42,
        "endLine": 29,
        "endChar": 49
      },
      "revId": "cc648a454833716224b2c7e40fd4a4dbbedca0df",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5e76efb3_50960925",
        "filename": "rtc_base/cancer_stick_castle_unittest.cc",
        "patchSetId": 4
      },
      "lineNbr": 29,
      "author": {
        "id": 13719
      },
      "writtenOn": "2020-09-10T21:05:31Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d54b7cd7_208053a8",
      "range": {
        "startLine": 29,
        "startChar": 42,
        "endLine": 29,
        "endChar": 49
      },
      "revId": "cc648a454833716224b2c7e40fd4a4dbbedca0df",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "52a362f4_34889760",
        "filename": "rtc_base/cancer_stick_castle_unittest.cc",
        "patchSetId": 4
      },
      "lineNbr": 33,
      "author": {
        "id": 10798
      },
      "writtenOn": "2020-09-08T07:57:54Z",
      "side": 1,
      "message": "Also test the zero argument case?",
      "revId": "cc648a454833716224b2c7e40fd4a4dbbedca0df",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9eb738a6_cc748414",
        "filename": "rtc_base/cancer_stick_castle_unittest.cc",
        "patchSetId": 4
      },
      "lineNbr": 33,
      "author": {
        "id": 13719
      },
      "writtenOn": "2020-09-10T21:05:31Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "52a362f4_34889760",
      "revId": "cc648a454833716224b2c7e40fd4a4dbbedca0df",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c79aa53c_7c637718",
        "filename": "rtc_base/cancer_stick_castle_unittest.cc",
        "patchSetId": 4
      },
      "lineNbr": 37,
      "author": {
        "id": 10798
      },
      "writtenOn": "2020-09-08T07:57:54Z",
      "side": 1,
      "message": "This doesn\u0027t work---FunctionView doesn\u0027t own the callable it points to, so as soon as this statement is finished, the lambda (which is a temporary) is destroyed, and the FunctionView now has a dangling pointer.\n\nJust like string_view, FunctionView is most useful as a function argument type; other good use cases are rare. Here, you should just store the lambda type directly:\n\n  auto fvTest \u003d [](int\u0026 index) { index++; };\n\nor even simpler, just pass it directly without binding it to a local variable:\n\n  c.AddReceiver([](int\u0026 index) { index++; });",
      "revId": "cc648a454833716224b2c7e40fd4a4dbbedca0df",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fbd9452b_047a25e3",
        "filename": "rtc_base/cancer_stick_castle_unittest.cc",
        "patchSetId": 4
      },
      "lineNbr": 37,
      "author": {
        "id": 13719
      },
      "writtenOn": "2020-09-10T21:05:31Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c79aa53c_7c637718",
      "revId": "cc648a454833716224b2c7e40fd4a4dbbedca0df",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "318d4e94_ec84ff00",
        "filename": "rtc_base/cancer_stick_castle_unittest.cc",
        "patchSetId": 4
      },
      "lineNbr": 57,
      "author": {
        "id": 10798
      },
      "writtenOn": "2020-09-08T07:57:54Z",
      "side": 1,
      "message": "a",
      "range": {
        "startLine": 57,
        "startChar": 35,
        "endLine": 57,
        "endChar": 36
      },
      "revId": "cc648a454833716224b2c7e40fd4a4dbbedca0df",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "988ccc6e_278bc619",
        "filename": "rtc_base/cancer_stick_castle_unittest.cc",
        "patchSetId": 4
      },
      "lineNbr": 57,
      "author": {
        "id": 13719
      },
      "writtenOn": "2020-09-10T21:05:31Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "318d4e94_ec84ff00",
      "range": {
        "startLine": 57,
        "startChar": 35,
        "endLine": 57,
        "endChar": 36
      },
      "revId": "cc648a454833716224b2c7e40fd4a4dbbedca0df",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e35f9d67_cfe53dd4",
        "filename": "rtc_base/cancer_stick_castle_unittest.cc",
        "patchSetId": 4
      },
      "lineNbr": 60,
      "author": {
        "id": 10798
      },
      "writtenOn": "2020-09-08T07:57:54Z",
      "side": 1,
      "message": "This lambda does have some state, but it\u0027s still trivially copyable and trivially destructible. You\u0027d need to use e.g. unique_ptr or std::vector instead of a plain int.\n\nVerify that the lambda is nontrivial in the desired way by testing it with the is_trivially_* functions here: https://en.cppreference.com/w/cpp/types",
      "revId": "cc648a454833716224b2c7e40fd4a4dbbedca0df",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a720fce2_87113061",
        "filename": "rtc_base/cancer_stick_castle_unittest.cc",
        "patchSetId": 4
      },
      "lineNbr": 60,
      "author": {
        "id": 13719
      },
      "writtenOn": "2020-09-10T21:05:31Z",
      "side": 1,
      "message": "Use a struct to test nontrivial case also std::function test also will cover this case.",
      "parentUuid": "e35f9d67_cfe53dd4",
      "revId": "cc648a454833716224b2c7e40fd4a4dbbedca0df",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "895d4da9_8138862e",
        "filename": "rtc_base/cancer_stick_castle_unittest.cc",
        "patchSetId": 4
      },
      "lineNbr": 68,
      "author": {
        "id": 5087
      },
      "writtenOn": "2020-09-08T06:46:27Z",
      "side": 1,
      "message": "a",
      "range": {
        "startLine": 68,
        "startChar": 30,
        "endLine": 68,
        "endChar": 31
      },
      "revId": "cc648a454833716224b2c7e40fd4a4dbbedca0df",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "71a79ba4_6d222153",
        "filename": "rtc_base/cancer_stick_castle_unittest.cc",
        "patchSetId": 4
      },
      "lineNbr": 68,
      "author": {
        "id": 13719
      },
      "writtenOn": "2020-09-10T21:05:31Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "895d4da9_8138862e",
      "range": {
        "startLine": 68,
        "startChar": 30,
        "endLine": 68,
        "endChar": 31
      },
      "revId": "cc648a454833716224b2c7e40fd4a4dbbedca0df",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0615dc5f_946c53c0",
        "filename": "rtc_base/cancer_stick_castle_unittest.cc",
        "patchSetId": 4
      },
      "lineNbr": 72,
      "author": {
        "id": 10798
      },
      "writtenOn": "2020-09-08T07:57:54Z",
      "side": 1,
      "message": "Test this by storing the lambda in a local variable and using sizeof on it. (Hint: As is, this test will fail, because the lambda\u0027s state is a single int.)",
      "revId": "cc648a454833716224b2c7e40fd4a4dbbedca0df",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e4e3d9db_7189a5ca",
        "filename": "rtc_base/cancer_stick_castle_unittest.cc",
        "patchSetId": 4
      },
      "lineNbr": 72,
      "author": {
        "id": 13719
      },
      "writtenOn": "2020-09-10T21:05:31Z",
      "side": 1,
      "message": "You are right created a function outside the test and used std::function for clarity and made sure the test is hitting the else condition.\nThanks for catching this.",
      "parentUuid": "0615dc5f_946c53c0",
      "revId": "cc648a454833716224b2c7e40fd4a4dbbedca0df",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "48e15583_b766c9b5",
        "filename": "rtc_base/cancer_stick_castle_unittest.cc",
        "patchSetId": 4
      },
      "lineNbr": 83,
      "author": {
        "id": 5087
      },
      "writtenOn": "2020-09-08T06:46:27Z",
      "side": 1,
      "message": "We might also want to add tests for:\n\n* multiple receivers and multiple send, actually you might want to take the previous tests and parametrize them to let\u0027s say work with 0..N receivers (see https://chromium.googlesource.com/external/github.com/google/googletest/+/HEAD/googletest/docs/advanced.md#value_parameterized-tests or just use a for loop if that is more readable).\n\n* something similar to production examples, see for example https://source.chromium.org/chromium/chromium/src/+/master:third_party/webrtc/p2p/base/port_interface.h;l\u003d98-104 where we have a mixture of references, pointers, value parameters, etc... But let\u0027s try to be sure that things work well with const parameters in the mix.\n\n* I forgot to ask Karl last time but the rtc::bind might be something we need to support, let me ask it on our chat.",
      "range": {
        "startLine": 83,
        "startChar": 3,
        "endLine": 83,
        "endChar": 16
      },
      "revId": "cc648a454833716224b2c7e40fd4a4dbbedca0df",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9a28c1d2_63edda6e",
        "filename": "rtc_base/cancer_stick_castle_unittest.cc",
        "patchSetId": 4
      },
      "lineNbr": 83,
      "author": {
        "id": 13719
      },
      "writtenOn": "2020-09-10T21:05:31Z",
      "side": 1,
      "message": "1. Since the handling receivers is fairly simple did the following for multiReceiverSendTest\naddReceiver\n...\nSend\n...\n\nAssert\n2. Updated the MultipleParameterMessageTest to hold different types.\n\n3. for now added a todo for rtc:Bind.",
      "parentUuid": "48e15583_b766c9b5",
      "range": {
        "startLine": 83,
        "startChar": 3,
        "endLine": 83,
        "endChar": 16
      },
      "revId": "cc648a454833716224b2c7e40fd4a4dbbedca0df",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    }
  ]
}