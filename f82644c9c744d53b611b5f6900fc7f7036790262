{
  "comments": [
    {
      "key": {
        "uuid": "6d673369_d0df48fa",
        "filename": "p2p/base/port.cc",
        "patchSetId": 4
      },
      "lineNbr": 1139,
      "author": {
        "id": 5053
      },
      "writtenOn": "2018-04-17T15:38:54Z",
      "side": 1,
      "message": "Sorry for taking so long to look at this (I\u0027ve been behind in code reviews), but it doesn\u0027t appear it will solve the problem. As soon as a backup candidate pair sends a ping, the state will briefly go to \"not receiving\" (next time it\u0027s updated) because last_ping_sent() will become greater than last_ping_response_received().\n\nAlso: what about a test?",
      "revId": "f82644c9c744d53b611b5f6900fc7f7036790262",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fd2ca145_010b668b",
        "filename": "p2p/base/port.cc",
        "patchSetId": 4
      },
      "lineNbr": 1139,
      "author": {
        "id": 5887
      },
      "writtenOn": "2018-04-17T18:52:26Z",
      "side": 1,
      "message": "I agree there will still be an 1-RTT period that the backup candidate pair turns to \"not receiving\". Assuming the backup ping interval is X seconds and a network switching request happens uniformly and randomly on the timeline, we would have the probability that a network switching request happens and finds this backup candidate pair is \"not receiving\" is about rtt/X. For use cases when the backup candidate pair has indeed good connection, this probability is very low to give a false alarm on the receiving state, given X is typically very large for battery preservation. That was my thought on the problem. What do you think?\n\nSure, I should have added a test for this behavioral change, and will follow up with a CL. Thanks!",
      "parentUuid": "6d673369_d0df48fa",
      "revId": "f82644c9c744d53b611b5f6900fc7f7036790262",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e3949f98_04d0155e",
        "filename": "p2p/base/port.cc",
        "patchSetId": 4
      },
      "lineNbr": 1139,
      "author": {
        "id": 5053
      },
      "writtenOn": "2018-04-17T22:42:14Z",
      "side": 1,
      "message": "You\u0027re right, but 0 probability of a false alarm is better than rtt/X, and I don\u0027t think it would be hard to accomplish.\n\nThough, if this is being done for the \"networkPreference\" use case, maybe a better solution would be to make the network preference higher priority (above the receiving state)? That would avoid changing the meaning of \"receiving\", which may have some undesirable effect we haven\u0027t considered. honghaiz@ would probably know better than me.",
      "parentUuid": "fd2ca145_010b668b",
      "revId": "f82644c9c744d53b611b5f6900fc7f7036790262",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3e38c317_a48f497c",
        "filename": "p2p/base/port.cc",
        "patchSetId": 4
      },
      "lineNbr": 1139,
      "author": {
        "id": 6252
      },
      "writtenOn": "2018-04-17T22:52:48Z",
      "side": 1,
      "message": "We kept the receiving state to have a higher priority than network type/preference to allow fast switching between Wifi/Cellular.",
      "parentUuid": "e3949f98_04d0155e",
      "revId": "f82644c9c744d53b611b5f6900fc7f7036790262",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    }
  ]
}