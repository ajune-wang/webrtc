{
  "comments": [
    {
      "key": {
        "uuid": "a87421da_133c5be4",
        "filename": "modules/desktop_capture/mac/screen_capturer_mac_base.h",
        "patchSetId": 2
      },
      "lineNbr": 47,
      "author": {
        "id": 5029
      },
      "writtenOn": "2018-03-22T02:47:19Z",
      "side": 1,
      "message": "super::ScreenConfigurationChanged() has been called by every derived class. So maybe we can use vector\u003cFunctionView\u003e as an event / delegate pattern.\nBut it\u0027s up to you.",
      "range": {
        "startLine": 47,
        "startChar": 15,
        "endLine": 47,
        "endChar": 41
      },
      "revId": "77e7a9db836d13a43d7db61678f70864db77c5b4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "74559a4f_6347227d",
        "filename": "modules/desktop_capture/mac/screen_capturer_mac_base.h",
        "patchSetId": 2
      },
      "lineNbr": 85,
      "author": {
        "id": 5029
      },
      "writtenOn": "2018-03-22T02:47:19Z",
      "side": 1,
      "message": "I think in general, you do not want to change these variables in the sub classes. So maybe privatize them and add protected getters.",
      "range": {
        "startLine": 72,
        "startChar": 0,
        "endLine": 85,
        "endChar": 0
      },
      "revId": "77e7a9db836d13a43d7db61678f70864db77c5b4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e016c513_f4633c90",
        "filename": "modules/desktop_capture/mac/screen_capturer_mac_cgimage.mm",
        "patchSetId": 2
      },
      "lineNbr": 140,
      "author": {
        "id": 5029
      },
      "writtenOn": "2018-03-22T02:47:19Z",
      "side": 1,
      "message": "In general, we do not use abort(). Use RTC_DCHECK() instead.",
      "range": {
        "startLine": 140,
        "startChar": 22,
        "endLine": 140,
        "endChar": 30
      },
      "revId": "77e7a9db836d13a43d7db61678f70864db77c5b4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "79582d53_c3c2ce97",
        "filename": "modules/desktop_capture/mac/screen_capturer_mac_iosurface.mm",
        "patchSetId": 2
      },
      "lineNbr": 34,
      "author": {
        "id": 5029
      },
      "writtenOn": "2018-03-22T02:47:19Z",
      "side": 1,
      "message": "RTC_DCHECK(IsSupported());  // Consumers should check the availability before using this class.",
      "range": {
        "startLine": 34,
        "startChar": 0,
        "endLine": 34,
        "endChar": 30
      },
      "revId": "77e7a9db836d13a43d7db61678f70864db77c5b4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a07d570b_0c479f63",
        "filename": "modules/desktop_capture/mac/screen_capturer_mac_iosurface.mm",
        "patchSetId": 2
      },
      "lineNbr": 46,
      "author": {
        "id": 5029
      },
      "writtenOn": "2018-03-22T02:47:19Z",
      "side": 1,
      "message": "I think you do not need the lock here, if all the functions are running in the same thread, which I think is true.",
      "range": {
        "startLine": 46,
        "startChar": 2,
        "endLine": 46,
        "endChar": 62
      },
      "revId": "77e7a9db836d13a43d7db61678f70864db77c5b4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4b629d1c_bdb894aa",
        "filename": "modules/desktop_capture/mac/screen_capturer_mac_iosurface.mm",
        "patchSetId": 2
      },
      "lineNbr": 67,
      "author": {
        "id": 5029
      },
      "writtenOn": "2018-03-22T02:47:19Z",
      "side": 1,
      "message": "It looks like the lock is unnecessary. But I am not sure.",
      "range": {
        "startLine": 67,
        "startChar": 4,
        "endLine": 67,
        "endChar": 19
      },
      "revId": "77e7a9db836d13a43d7db61678f70864db77c5b4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cd4249ef_6d630990",
        "filename": "modules/desktop_capture/mac/screen_capturer_mac_iosurface.mm",
        "patchSetId": 2
      },
      "lineNbr": 76,
      "author": {
        "id": 5029
      },
      "writtenOn": "2018-03-22T02:47:19Z",
      "side": 1,
      "message": "Here, the FallbackDesktopCapturerWrapper can help you to avoid this logic.",
      "range": {
        "startLine": 76,
        "startChar": 37,
        "endLine": 76,
        "endChar": 55
      },
      "revId": "77e7a9db836d13a43d7db61678f70864db77c5b4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f818c318_3549a34f",
        "filename": "modules/desktop_capture/screen_capturer_mac.mm",
        "patchSetId": 2
      },
      "lineNbr": 38,
      "author": {
        "id": 5029
      },
      "writtenOn": "2018-03-22T02:47:19Z",
      "side": 1,
      "message": "I think you may want to use FallbackDesktopCapturerWrapper to avoid potential break.",
      "range": {
        "startLine": 30,
        "startChar": 0,
        "endLine": 38,
        "endChar": 3
      },
      "revId": "77e7a9db836d13a43d7db61678f70864db77c5b4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    }
  ]
}