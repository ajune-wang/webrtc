{
  "comments": [
    {
      "key": {
        "uuid": "527c6c98_67003bb4",
        "filename": "api/rtp_packet_info.h",
        "patchSetId": 14
      },
      "lineNbr": 15,
      "author": {
        "id": 7015
      },
      "writtenOn": "2019-05-31T08:32:23Z",
      "side": 1,
      "message": "where are these needed?",
      "range": {
        "startLine": 14,
        "startChar": 0,
        "endLine": 15,
        "endChar": 18
      },
      "revId": "e3c39c4d38f26c046f43660a639ee6510c655ff9",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9ad022f5_6a58b687",
        "filename": "api/rtp_packet_info.h",
        "patchSetId": 14
      },
      "lineNbr": 15,
      "author": {
        "id": 8392
      },
      "writtenOn": "2019-05-31T11:36:58Z",
      "side": 1,
      "message": "They are from iwyu linters warnings:\n\ncstdint \u003d uint32_t\nutility \u003d std::move()",
      "parentUuid": "527c6c98_67003bb4",
      "range": {
        "startLine": 14,
        "startChar": 0,
        "endLine": 15,
        "endChar": 18
      },
      "revId": "e3c39c4d38f26c046f43660a639ee6510c655ff9",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "06fab6ad_502cbf66",
        "filename": "api/rtp_packet_info.h",
        "patchSetId": 14
      },
      "lineNbr": 15,
      "author": {
        "id": 7015
      },
      "writtenOn": "2019-05-31T12:52:20Z",
      "side": 1,
      "message": "I see that move() now. sorry for missing it. IMO, it is better to be\n\nvoid set_csrcs(const std::vector\u003cuint32_t\u003e\u0026 value) { csrcs_ \u003d value; }\n\nYes, it does copying, but it avoids the caller to copy.",
      "parentUuid": "9ad022f5_6a58b687",
      "range": {
        "startLine": 14,
        "startChar": 0,
        "endLine": 15,
        "endChar": 18
      },
      "revId": "e3c39c4d38f26c046f43660a639ee6510c655ff9",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ac9511e2_73201c06",
        "filename": "api/rtp_packet_info.h",
        "patchSetId": 14
      },
      "lineNbr": 15,
      "author": {
        "id": 8392
      },
      "writtenOn": "2019-05-31T14:04:00Z",
      "side": 1,
      "message": "Callers may also do `std::move()` and avoid the copy altogether. I think that it just boils down to preference here.",
      "parentUuid": "06fab6ad_502cbf66",
      "range": {
        "startLine": 14,
        "startChar": 0,
        "endLine": 15,
        "endChar": 18
      },
      "revId": "e3c39c4d38f26c046f43660a639ee6510c655ff9",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cbbee013_af186e94",
        "filename": "api/rtp_packet_info.h",
        "patchSetId": 14
      },
      "lineNbr": 62,
      "author": {
        "id": 7015
      },
      "writtenOn": "2019-05-31T08:32:23Z",
      "side": 1,
      "message": "remove extra spaces, or are they intended?",
      "range": {
        "startLine": 62,
        "startChar": 5,
        "endLine": 62,
        "endChar": 7
      },
      "revId": "e3c39c4d38f26c046f43660a639ee6510c655ff9",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6a23f32b_c406717f",
        "filename": "api/rtp_packet_info.h",
        "patchSetId": 14
      },
      "lineNbr": 62,
      "author": {
        "id": 8392
      },
      "writtenOn": "2019-05-31T11:36:58Z",
      "side": 1,
      "message": "The indentation was intended but we can make due without it.",
      "parentUuid": "cbbee013_af186e94",
      "range": {
        "startLine": 62,
        "startChar": 5,
        "endLine": 62,
        "endChar": 7
      },
      "revId": "e3c39c4d38f26c046f43660a639ee6510c655ff9",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "54a11216_4b7406d7",
        "filename": "api/rtp_packet_info.h",
        "patchSetId": 14
      },
      "lineNbr": 68,
      "author": {
        "id": 7015
      },
      "writtenOn": "2019-05-31T08:32:23Z",
      "side": 1,
      "message": "a plural here, does it suggest more (e.g. v-bit) to be added?",
      "range": {
        "startLine": 68,
        "startChar": 5,
        "endLine": 68,
        "endChar": 11
      },
      "revId": "e3c39c4d38f26c046f43660a639ee6510c655ff9",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ebc2c430_9d9efa1b",
        "filename": "api/rtp_packet_info.h",
        "patchSetId": 14
      },
      "lineNbr": 68,
      "author": {
        "id": 8392
      },
      "writtenOn": "2019-05-31T11:36:58Z",
      "side": 1,
      "message": "It\u0027s plural because the comment is meant to say \"the following line(s) all come from the Audio Level header extension\". It just happens to only be one of them right now.",
      "parentUuid": "54a11216_4b7406d7",
      "range": {
        "startLine": 68,
        "startChar": 5,
        "endLine": 68,
        "endChar": 11
      },
      "revId": "e3c39c4d38f26c046f43660a639ee6510c655ff9",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "73cd176e_1bbdc9f7",
        "filename": "api/rtp_packet_info.h",
        "patchSetId": 14
      },
      "lineNbr": 68,
      "author": {
        "id": 7015
      },
      "writtenOn": "2019-05-31T12:52:20Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "ebc2c430_9d9efa1b",
      "range": {
        "startLine": 68,
        "startChar": 5,
        "endLine": 68,
        "endChar": 11
      },
      "revId": "e3c39c4d38f26c046f43660a639ee6510c655ff9",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "93602f4f_564bfe04",
        "filename": "api/rtp_packet_info.h",
        "patchSetId": 14
      },
      "lineNbr": 69,
      "author": {
        "id": 7015
      },
      "writtenOn": "2019-05-31T08:32:23Z",
      "side": 1,
      "message": "same",
      "range": {
        "startLine": 69,
        "startChar": 5,
        "endLine": 69,
        "endChar": 7
      },
      "revId": "e3c39c4d38f26c046f43660a639ee6510c655ff9",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ee697e94_0f88f53f",
        "filename": "api/rtp_packet_info.h",
        "patchSetId": 14
      },
      "lineNbr": 69,
      "author": {
        "id": 8392
      },
      "writtenOn": "2019-05-31T11:36:58Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "93602f4f_564bfe04",
      "range": {
        "startLine": 69,
        "startChar": 5,
        "endLine": 69,
        "endChar": 7
      },
      "revId": "e3c39c4d38f26c046f43660a639ee6510c655ff9",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "eb3b3764_9c832e6d",
        "filename": "api/rtp_packet_info.h",
        "patchSetId": 14
      },
      "lineNbr": 72,
      "author": {
        "id": 7015
      },
      "writtenOn": "2019-05-31T08:32:23Z",
      "side": 1,
      "message": "where is |Clock|?, should maybe reword and clarify.",
      "range": {
        "startLine": 72,
        "startChar": 11,
        "endLine": 72,
        "endChar": 24
      },
      "revId": "e3c39c4d38f26c046f43660a639ee6510c655ff9",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "088db19d_5a5adf63",
        "filename": "api/rtp_packet_info.h",
        "patchSetId": 14
      },
      "lineNbr": 72,
      "author": {
        "id": 8392
      },
      "writtenOn": "2019-05-31T11:36:58Z",
      "side": 1,
      "message": "Changed to `webrtc::Clock` to clarify that its referring to that class. This is meant as a hint. `RtpPacketInfo` doesn\u0027t actually know which precise instance of the clock that the timestamp is coming from (that\u0027s up to the caller to decide).",
      "parentUuid": "eb3b3764_9c832e6d",
      "range": {
        "startLine": 72,
        "startChar": 11,
        "endLine": 72,
        "endChar": 24
      },
      "revId": "e3c39c4d38f26c046f43660a639ee6510c655ff9",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9a9f3c75_ad68b8ab",
        "filename": "api/rtp_packet_info.h",
        "patchSetId": 14
      },
      "lineNbr": 72,
      "author": {
        "id": 7015
      },
      "writtenOn": "2019-05-31T12:52:20Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "088db19d_5a5adf63",
      "range": {
        "startLine": 72,
        "startChar": 11,
        "endLine": 72,
        "endChar": 24
      },
      "revId": "e3c39c4d38f26c046f43660a639ee6510c655ff9",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "83d9894e_b2f468b6",
        "filename": "api/rtp_packet_info_unittest.cc",
        "patchSetId": 14
      },
      "lineNbr": 31,
      "author": {
        "id": 7015
      },
      "writtenOn": "2019-05-31T08:32:23Z",
      "side": 1,
      "message": "Is there any benefit of using EXPECT_THAT(..., IsTrue()) in comparison to\nEXPECT_EQ / EXPECT_NE / EXPECT_TRUE",
      "range": {
        "startLine": 31,
        "startChar": 2,
        "endLine": 31,
        "endChar": 36
      },
      "revId": "e3c39c4d38f26c046f43660a639ee6510c655ff9",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "716fcaba_1eb84d68",
        "filename": "api/rtp_packet_info_unittest.cc",
        "patchSetId": 14
      },
      "lineNbr": 31,
      "author": {
        "id": 8392
      },
      "writtenOn": "2019-05-31T11:36:58Z",
      "side": 1,
      "message": "There seem to be two advantages to it:\n\n1. Consistency. The \"expected\" value all line up perfectly under each other.\n2. It better handles type mismatches like `size_t` vs `int`. `EXPECT_THAT(v.size(), 2)` works just fine while `EXPECT_EQ(v.size(), 2)` results in a build error (due to signed/unsigned mismatch).",
      "parentUuid": "83d9894e_b2f468b6",
      "range": {
        "startLine": 31,
        "startChar": 2,
        "endLine": 31,
        "endChar": 36
      },
      "revId": "e3c39c4d38f26c046f43660a639ee6510c655ff9",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "51063ac3_e21c9e42",
        "filename": "api/rtp_packet_info_unittest.cc",
        "patchSetId": 14
      },
      "lineNbr": 31,
      "author": {
        "id": 7015
      },
      "writtenOn": "2019-05-31T12:52:20Z",
      "side": 1,
      "message": "AFAIK, type matching issue on EXPECT_EQ has been resolved.\n\nAnyway, it is fine as long as it is consistent in this test.\n\nBut it would be good to put Eq(value) to avoid implying equality matching.",
      "parentUuid": "716fcaba_1eb84d68",
      "range": {
        "startLine": 31,
        "startChar": 2,
        "endLine": 31,
        "endChar": 36
      },
      "revId": "e3c39c4d38f26c046f43660a639ee6510c655ff9",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1c75d830_e8139416",
        "filename": "api/rtp_packet_info_unittest.cc",
        "patchSetId": 14
      },
      "lineNbr": 31,
      "author": {
        "id": 8392
      },
      "writtenOn": "2019-05-31T14:04:00Z",
      "side": 1,
      "message": "\u003e AFAIK, type matching issue on EXPECT_EQ has been resolved.\n\nIt doesn\u0027t seem so:\n\n    error: comparison of integers of different signs: \u0027const unsigned long\u0027 and \u0027const int\u0027 [-Werror,-Wsign-compare]\n\n\u003e But it would be good to put Eq(value) to avoid implying equality matching.\n\nI don\u0027t think that doing so would improve readability. There\u0027s also the fact that `EXPECT_THAT(v.size(), 2)` and `EXPECT_THAT(v.size(), Not(2))` work best if we don\u0027t wrap them as `Eq(2)` (it causes a similar type mismatch problem for the matcher).",
      "parentUuid": "51063ac3_e21c9e42",
      "range": {
        "startLine": 31,
        "startChar": 2,
        "endLine": 31,
        "endChar": 36
      },
      "revId": "e3c39c4d38f26c046f43660a639ee6510c655ff9",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    }
  ]
}