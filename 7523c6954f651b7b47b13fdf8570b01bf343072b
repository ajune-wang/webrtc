{
  "comments": [
    {
      "key": {
        "uuid": "c01620e6_a080dd88",
        "filename": "modules/congestion_controller/goog_cc/delay_based_bwe.cc",
        "patchSetId": 3
      },
      "lineNbr": 183,
      "author": {
        "id": 5531
      },
      "writtenOn": "2019-11-15T13:08:02Z",
      "side": 1,
      "message": "nit: double called is large depending on implicit cast from bool, IMO it\u0027s more readable to do explicit conversion from bool (is it even guaranteed to be \u003d\u003d 1?):\ndouble is_large \u003d packet_size \u003e\u003d ignore_small_.large_threshold ? 1:0;\n\nor better:\n\nbool is_large \u003d ...;\n\n    fraction_large_packets_ +\u003d\n        ignore_small_.smoothing_factor * ((is_large?1:0) - fraction_large_packets_);",
      "range": {
        "startLine": 183,
        "startChar": 11,
        "endLine": 183,
        "endChar": 19
      },
      "revId": "7523c6954f651b7b47b13fdf8570b01bf343072b",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3471cf89_41fdb952",
        "filename": "modules/congestion_controller/goog_cc/delay_based_bwe.cc",
        "patchSetId": 3
      },
      "lineNbr": 183,
      "author": {
        "id": 5531
      },
      "writtenOn": "2019-11-15T13:08:02Z",
      "side": 1,
      "message": "nit: redundant ()",
      "range": {
        "startLine": 183,
        "startChar": 67,
        "endLine": 183,
        "endChar": 68
      },
      "revId": "7523c6954f651b7b47b13fdf8570b01bf343072b",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8421f47a_02fa679d",
        "filename": "modules/congestion_controller/goog_cc/delay_based_bwe.cc",
        "patchSetId": 3
      },
      "lineNbr": 183,
      "author": {
        "id": 5150
      },
      "writtenOn": "2019-11-15T13:31:29Z",
      "side": 1,
      "message": "Yes, it is guaranteed. From https://en.cppreference.com/w/cpp/language/implicit_conversion\n\n\"A prvalue of integer or unscoped enumeration type can be converted to a prvalue of any floating-point type. If the value cannot be represented correctly, it is implementation defined whether the closest higher or the closest lower representable value will be selected, although if IEEE arithmetic is supported, rounding defaults to nearest. If the value cannot fit into the destination type, the behavior is undefined. If the source type is bool, the value false is converted to zero, and the value true is converted to one.\"\n\nChanged to explicit cast.",
      "parentUuid": "c01620e6_a080dd88",
      "range": {
        "startLine": 183,
        "startChar": 11,
        "endLine": 183,
        "endChar": 19
      },
      "revId": "7523c6954f651b7b47b13fdf8570b01bf343072b",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "80d22af3_6900f53a",
        "filename": "modules/congestion_controller/goog_cc/delay_based_bwe.cc",
        "patchSetId": 3
      },
      "lineNbr": 183,
      "author": {
        "id": 5150
      },
      "writtenOn": "2019-11-15T13:31:29Z",
      "side": 1,
      "message": "It was actually deliberate. ðŸ˜Š\nI think a redundant parenthesis improves readability when using a boolean expression in an arithmetic context.",
      "parentUuid": "3471cf89_41fdb952",
      "range": {
        "startLine": 183,
        "startChar": 67,
        "endLine": 183,
        "endChar": 68
      },
      "revId": "7523c6954f651b7b47b13fdf8570b01bf343072b",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    }
  ]
}