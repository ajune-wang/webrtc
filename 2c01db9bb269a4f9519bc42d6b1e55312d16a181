{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "f9ec02fc_f6f0b009",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 14
      },
      "lineNbr": 0,
      "author": {
        "id": 5142
      },
      "writtenOn": "2024-10-02T11:43:59Z",
      "side": 1,
      "message": "Looks good! Just nits",
      "revId": "2c01db9bb269a4f9519bc42d6b1e55312d16a181",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "eb1dc5f9_c57fe0e9",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 14
      },
      "lineNbr": 0,
      "author": {
        "id": 5634
      },
      "writtenOn": "2024-10-02T12:01:26Z",
      "side": 1,
      "message": "Commenting on overall logic in the middle of the CL.",
      "revId": "2c01db9bb269a4f9519bc42d6b1e55312d16a181",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "471ae850_0708079d",
        "filename": "api/peer_connection_interface.h",
        "patchSetId": 14
      },
      "lineNbr": 354,
      "author": {
        "id": 7641
      },
      "writtenOn": "2024-10-02T12:59:36Z",
      "side": 1,
      "message": "Here and in a few other places: Missing n in environment",
      "range": {
        "startLine": 354,
        "startChar": 30,
        "endLine": 354,
        "endChar": 40
      },
      "revId": "2c01db9bb269a4f9519bc42d6b1e55312d16a181",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4438ce70_f2ca3f71",
        "filename": "media/base/media_config.h",
        "patchSetId": 14
      },
      "lineNbr": 35,
      "author": {
        "id": 5142
      },
      "writtenOn": "2024-10-02T11:43:59Z",
      "side": 1,
      "message": "I suggest rephrasing this as:\n```\n// If true, RTCStats timestamps are sourced from the monotonically increasing\n// environment Clock, where the epoch is unspecified (i.e. up to the Clock\n// implementation). If false, RTCStats timestamps are sourced from system clock\n// via rtc::TimeUTCMicros() which is relative to 1970 but not necessarily\n// monotonically increasing.\n// TODO(webrtc:370535296): Change default value to true and delete this flag\n// once downstream projects have migrated.\n```",
      "revId": "2c01db9bb269a4f9519bc42d6b1e55312d16a181",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "30e3653e_9bede1db",
        "filename": "media/base/media_config.h",
        "patchSetId": 14
      },
      "lineNbr": 35,
      "author": {
        "id": 7641
      },
      "writtenOn": "2024-10-02T12:59:36Z",
      "side": 1,
      "message": "Isn\u0027t there a mixture of timestamps for \"If false\"?",
      "parentUuid": "4438ce70_f2ca3f71",
      "revId": "2c01db9bb269a4f9519bc42d6b1e55312d16a181",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a24e96f3_ada8f431",
        "filename": "pc/rtc_stats_collector.cc",
        "patchSetId": 14
      },
      "lineNbr": 1192,
      "author": {
        "id": 5142
      },
      "writtenOn": "2024-10-02T11:43:59Z",
      "side": 1,
      "message": "The pc\u0027s config can change throughout its lifetime - don\u0027t worry, it can\u0027t change in any way that we care about - but for this reason I don\u0027t want us to keep copies of configs around outside of the pc object without good reason. And here we only care about a const bool, not the rest of the config.\n\nCan we instead of passing down the entire config just set a `const bool stats_timestamp_with_environment_clock_` at construction time?",
      "revId": "2c01db9bb269a4f9519bc42d6b1e55312d16a181",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "974f4d79_353e8b08",
        "filename": "pc/rtc_stats_collector.cc",
        "patchSetId": 14
      },
      "lineNbr": 1192,
      "author": {
        "id": 5634
      },
      "writtenOn": "2024-10-02T12:01:26Z",
      "side": 1,
      "message": "According to the logic in webrtc-stats the API, the PC should take a timestamp as an initialization parameter, read the monotonic clock at startup, store the difference and always timestamp things as \"monotonic clock at startup + offset\".",
      "parentUuid": "a24e96f3_ada8f431",
      "revId": "2c01db9bb269a4f9519bc42d6b1e55312d16a181",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5b0a482a_36b3537b",
        "filename": "pc/rtc_stats_collector.cc",
        "patchSetId": 14
      },
      "lineNbr": 1192,
      "author": {
        "id": 7641
      },
      "writtenOn": "2024-10-02T12:59:36Z",
      "side": 1,
      "message": "CurrentTime() in combination with MonotonicTimeToPseudoWallTime() as is done [here](https://source.chromium.org/chromium/chromium/src/+/main:third_party/blink/renderer/modules/peerconnection/rtp_contributing_source_cache.cc;l\u003d76) will give a timestamp relative to Performance.timeOrigin + Performance.now(). Is that what you mean?",
      "parentUuid": "974f4d79_353e8b08",
      "revId": "2c01db9bb269a4f9519bc42d6b1e55312d16a181",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0ac653f3_15b8cc9b",
        "filename": "pc/rtc_stats_collector.cc",
        "patchSetId": 14
      },
      "lineNbr": 1192,
      "author": {
        "id": 5142
      },
      "writtenOn": "2024-10-02T13:18:52Z",
      "side": 1,
      "message": "What Harald describes is what \"performance.timeOrigin + performace.now()\" does.\n\nIn the perfect world, `env_.clock().CurrentTime()` would give us this value directly. But as per Chrome\u0027s implementation of the Clock, it only gives us the \"monotonically increasing\" part with some unknown offset that has to be converted as per Johannes comment.\n\nSadly WebRTC is currently a mix of global function clock (`rtc::TimeMicros()`) and Environment clock time and I don\u0027t think its safe to change them to have different offsets because then different parts of the code will have different offsets. And the global clock can\u0027t be relative to \"performance.timeOrigin\" because the blink process could contain multiple Documents using webrtc.\n\nTo fix https://crbug.com/369369568, the plan is to use the environment clock\u0027s current time and to convert it using `time_converter.MonotonicTimeToPseudoWallTime()` as part of exposing this to JS as is done for RTCRtpContributingSources timestamps.\n\nThe bridge from C++ to JS is here:\nhttps://source.chromium.org/chromium/chromium/src/+/main:third_party/blink/renderer/modules/peerconnection/rtc_stats_report.cc;l\u003d1003;drc\u003d60703ec6d9524e35dc25f8133fefa2ebb518fdf2",
      "parentUuid": "5b0a482a_36b3537b",
      "revId": "2c01db9bb269a4f9519bc42d6b1e55312d16a181",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    }
  ]
}