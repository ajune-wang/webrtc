{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "c72ced7b_590115e2",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5234
      },
      "writtenOn": "2022-02-24T14:04:15Z",
      "side": 1,
      "message": "PTAL.",
      "revId": "deba153f7e0303234792b2f2417a3fb61f4dd1b9",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "50f69e81_b99fd0fb",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5634
      },
      "writtenOn": "2022-02-24T14:26:10Z",
      "side": 1,
      "message": "Seems like a good idea. Surprised the CL was this small.\n",
      "revId": "deba153f7e0303234792b2f2417a3fb61f4dd1b9",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "52222ac3_3ade9eee",
        "filename": "modules/desktop_capture/linux/wayland/mouse_cursor_monitor_pipewire.h",
        "patchSetId": 1
      },
      "lineNbr": 23,
      "author": {
        "id": 5234
      },
      "writtenOn": "2022-02-24T14:04:15Z",
      "side": 1,
      "message": "Unrelated change, but needed for my build to not break. Intend to land separately, as https://webrtc-review.googlesource.com/c/src/+/252440",
      "range": {
        "startLine": 23,
        "startChar": 0,
        "endLine": 23,
        "endChar": 46
      },
      "revId": "deba153f7e0303234792b2f2417a3fb61f4dd1b9",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f03139a0_48bfc818",
        "filename": "pc/proxy.h",
        "patchSetId": 1
      },
      "lineNbr": 297,
      "author": {
        "id": 5508
      },
      "writtenOn": "2022-02-25T12:02:09Z",
      "side": 1,
      "message": "should we be explicit about std::move?",
      "revId": "deba153f7e0303234792b2f2417a3fb61f4dd1b9",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9986bfb8_2ef9c08a",
        "filename": "pc/proxy.h",
        "patchSetId": 1
      },
      "lineNbr": 297,
      "author": {
        "id": 5234
      },
      "writtenOn": "2022-02-25T12:21:11Z",
      "side": 1,
      "message": "Not sure what change you are suggesting. \n\nOne could probably add std::move in (some) callers, to avoid some ref count updates. And one could add std::move(c) in the line below where c is passed to the constructor, but maybe the compiler can infer move in the latter case, as part of tail-call optimization?",
      "parentUuid": "f03139a0_48bfc818",
      "revId": "deba153f7e0303234792b2f2417a3fb61f4dd1b9",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0e3d9477_ab706efb",
        "filename": "pc/proxy.h",
        "patchSetId": 1
      },
      "lineNbr": 297,
      "author": {
        "id": 5508
      },
      "writtenOn": "2022-02-25T12:35:40Z",
      "side": 1,
      "message": "yes maybe, but also it doesn\u0027t hurt to be explicit?\n\nit\u0027s not entirely clear to me when one can rely on the compiler doing that, so it can be helpful to the reader to communicate the intent explicitly as well as to not assume that it will happen and then learn that it doesn\u0027t",
      "parentUuid": "9986bfb8_2ef9c08a",
      "revId": "deba153f7e0303234792b2f2417a3fb61f4dd1b9",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2187fc0f_aa491608",
        "filename": "pc/proxy.h",
        "patchSetId": 1
      },
      "lineNbr": 307,
      "author": {
        "id": 5634
      },
      "writtenOn": "2022-02-24T14:26:10Z",
      "side": 1,
      "message": "This changes the create method for all proxies. I\u0027m surprised that you were able to make all that work with this short CL.",
      "revId": "deba153f7e0303234792b2f2417a3fb61f4dd1b9",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d18b8c8c_a93b2abb",
        "filename": "pc/proxy.h",
        "patchSetId": 1
      },
      "lineNbr": 309,
      "author": {
        "id": 5508
      },
      "writtenOn": "2022-02-25T12:02:09Z",
      "side": 1,
      "message": "and here",
      "revId": "deba153f7e0303234792b2f2417a3fb61f4dd1b9",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a6420878_aac11245",
        "filename": "pc/sctp_data_channel.cc",
        "patchSetId": 1
      },
      "lineNbr": 164,
      "author": {
        "id": 5634
      },
      "writtenOn": "2022-02-24T14:26:10Z",
      "side": 1,
      "message": "Since you\u0027re now using a scoped_refptr argument, can you update or delete the TODO above?",
      "revId": "deba153f7e0303234792b2f2417a3fb61f4dd1b9",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cc6ee645_68e5cf2b",
        "filename": "pc/sctp_data_channel.cc",
        "patchSetId": 1
      },
      "lineNbr": 164,
      "author": {
        "id": 5234
      },
      "writtenOn": "2022-02-25T08:52:48Z",
      "side": 1,
      "message": "Now I\u0027m getting unsure if these changes are consistent; I was under the impression that proxies always own the internal object, if some proxies in fact hold raw unowned pointers, this needs to be revisited.\n\nBut it looks like in this case, we use BEGIN_PRIMARY_PROXY_MAP, which uses a refcounted internal object. Deleted the TODO comments on ownership.",
      "parentUuid": "a6420878_aac11245",
      "revId": "deba153f7e0303234792b2f2417a3fb61f4dd1b9",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    }
  ]
}