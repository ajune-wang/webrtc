{
  "comments": [
    {
      "key": {
        "uuid": "4cbaa71e_acf83f9c",
        "filename": "api/audio_codecs/audio_codec_pair_id.cc",
        "patchSetId": 2
      },
      "lineNbr": 25,
      "author": {
        "id": 5399
      },
      "writtenOn": "2018-02-27T13:18:50Z",
      "side": 1,
      "message": "Is std::atomic\u003c\u003e ok to use now? To me it is, and from what I understand it\u0027s already used in Chromium, but I thought I\u0027d check. :)",
      "revId": "a6875f492d5583f280b5fd13ed8c341ba2f8bc97",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "60416a33_c75a701a",
        "filename": "api/audio_codecs/audio_codec_pair_id.cc",
        "patchSetId": 2
      },
      "lineNbr": 25,
      "author": {
        "id": 5126
      },
      "writtenOn": "2018-02-27T13:45:05Z",
      "side": 1,
      "message": "Yes. See https://chromium-cpp.appspot.com/#library-whitelist.",
      "parentUuid": "4cbaa71e_acf83f9c",
      "revId": "a6875f492d5583f280b5fd13ed8c341ba2f8bc97",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7758d26f_48e49f66",
        "filename": "api/audio_codecs/audio_codec_pair_id.cc",
        "patchSetId": 2
      },
      "lineNbr": 36,
      "author": {
        "id": 5399
      },
      "writtenOn": "2018-02-27T13:18:50Z",
      "side": 1,
      "message": "1\u003c\u003c63 isn\u0027t the absolute maximum, is it? It\u0027s (1\u003c\u003c64)-1. Although, I don\u0027t really think anyone should rely on the exact limit of this anyways.",
      "revId": "a6875f492d5583f280b5fd13ed8c341ba2f8bc97",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "adf64c33_6ebf8921",
        "filename": "api/audio_codecs/audio_codec_pair_id.cc",
        "patchSetId": 2
      },
      "lineNbr": 36,
      "author": {
        "id": 5126
      },
      "writtenOn": "2018-02-27T13:45:05Z",
      "side": 1,
      "message": "This is on purpose. With no sentinel value, if two threads race through GetNextId(), one of them could exit with a reused ID before the other one has time to trigger the DCHECK. With N sentinel values, N+1 threads have to race this way in order to slip past the DCHECK.\n\nI\u0027ve picked N \u003d 2^63.",
      "parentUuid": "7758d26f_48e49f66",
      "revId": "a6875f492d5583f280b5fd13ed8c341ba2f8bc97",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "12e06088_69384323",
        "filename": "api/audio_codecs/audio_codec_pair_id.cc",
        "patchSetId": 2
      },
      "lineNbr": 36,
      "author": {
        "id": 5399
      },
      "writtenOn": "2018-03-01T10:45:48Z",
      "side": 1,
      "message": "Got it!",
      "parentUuid": "adf64c33_6ebf8921",
      "revId": "a6875f492d5583f280b5fd13ed8c341ba2f8bc97",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7b841f9d_bd6779cb",
        "filename": "api/audio_codecs/audio_codec_pair_id.cc",
        "patchSetId": 2
      },
      "lineNbr": 53,
      "author": {
        "id": 5399
      },
      "writtenOn": "2018-02-27T13:18:50Z",
      "side": 1,
      "message": "There\u0027s no way I can check these. I\u0027ll have to take your word for it. :)",
      "revId": "a6875f492d5583f280b5fd13ed8c341ba2f8bc97",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "46fd310e_56de5ada",
        "filename": "api/audio_codecs/audio_codec_pair_id.cc",
        "patchSetId": 2
      },
      "lineNbr": 53,
      "author": {
        "id": 5126
      },
      "writtenOn": "2018-02-27T13:45:05Z",
      "side": 1,
      "message": "They\u0027re just random numbers, and the second one has to be odd like the comment says. I verified the nonpredictability by printing out the first ~1000 numbers with a Python program.",
      "parentUuid": "7b841f9d_bd6779cb",
      "revId": "a6875f492d5583f280b5fd13ed8c341ba2f8bc97",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4a191068_c9d2c229",
        "filename": "api/audio_codecs/audio_codec_pair_id.cc",
        "patchSetId": 2
      },
      "lineNbr": 53,
      "author": {
        "id": 5399
      },
      "writtenOn": "2018-03-01T10:45:48Z",
      "side": 1,
      "message": "Have I gone crazy, or are neither of these odd? Or do you mean \"strange\" and not \"not even\"? :)",
      "parentUuid": "46fd310e_56de5ada",
      "revId": "a6875f492d5583f280b5fd13ed8c341ba2f8bc97",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5633b068_528b17b0",
        "filename": "api/audio_codecs/audio_codec_pair_id.cc",
        "patchSetId": 2
      },
      "lineNbr": 65,
      "author": {
        "id": 5399
      },
      "writtenOn": "2018-02-27T13:18:50Z",
      "side": 1,
      "message": "Is there a #pragma you could use for Visual C++ to disable that warning for this block?\nI guess it\u0027s not critical to run these, but could be nice to have if they were to actually trigger a problem on a Windows compiler.\n\nActually, wouldn\u0027t the warning have to be disabled for ObfuscateId? Otherwise it might explode when used.",
      "revId": "a6875f492d5583f280b5fd13ed8c341ba2f8bc97",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4ab1de9e_6cfdc089",
        "filename": "api/audio_codecs/audio_codec_pair_id.cc",
        "patchSetId": 2
      },
      "lineNbr": 65,
      "author": {
        "id": 5126
      },
      "writtenOn": "2018-02-27T13:45:05Z",
      "side": 1,
      "message": "It looks like it may be possible. I\u0027ll try it.",
      "parentUuid": "5633b068_528b17b0",
      "revId": "a6875f492d5583f280b5fd13ed8c341ba2f8bc97",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1c0d915c_2623d380",
        "filename": "api/audio_codecs/audio_codec_pair_id.cc",
        "patchSetId": 2
      },
      "lineNbr": 81,
      "author": {
        "id": 5399
      },
      "writtenOn": "2018-02-27T13:18:50Z",
      "side": 1,
      "message": "This is a bit bonkers, but I do like that we hand out something unpredictable. If it were just a consecutive sequence, someone _would_ rely on it starting at zero or one, etc., and things would magically break sometime in the future.",
      "revId": "a6875f492d5583f280b5fd13ed8c341ba2f8bc97",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bedf17c1_30253b0c",
        "filename": "api/audio_codecs/audio_codec_pair_id.cc",
        "patchSetId": 2
      },
      "lineNbr": 81,
      "author": {
        "id": 5126
      },
      "writtenOn": "2018-02-27T13:45:05Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "1c0d915c_2623d380",
      "revId": "a6875f492d5583f280b5fd13ed8c341ba2f8bc97",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "24276260_6dff63ea",
        "filename": "api/audio_codecs/audio_codec_pair_id.h",
        "patchSetId": 2
      },
      "lineNbr": 20,
      "author": {
        "id": 5399
      },
      "writtenOn": "2018-02-27T13:18:50Z",
      "side": 1,
      "message": "Welcome to my bikeshed! Should it be called AudioCodecPairingId instead?",
      "range": {
        "startLine": 20,
        "startChar": 6,
        "endLine": 20,
        "endChar": 22
      },
      "revId": "a6875f492d5583f280b5fd13ed8c341ba2f8bc97",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ba2ebb5e_9b11792b",
        "filename": "api/audio_codecs/audio_codec_pair_id.h",
        "patchSetId": 2
      },
      "lineNbr": 20,
      "author": {
        "id": 5126
      },
      "writtenOn": "2018-02-27T13:45:05Z",
      "side": 1,
      "message": "I\u0027d prefer not. It\u0027s already a long name as it is.\n\n(I\u0027m thinking that we might generalize this in the future, turning this into a template with a tag type argument; this type would then be called Id\u003cAudioCodecPair\u003e or similar.)",
      "parentUuid": "24276260_6dff63ea",
      "range": {
        "startLine": 20,
        "startChar": 6,
        "endLine": 20,
        "endChar": 22
      },
      "revId": "a6875f492d5583f280b5fd13ed8c341ba2f8bc97",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "beba5aae_7cfd42b2",
        "filename": "api/audio_codecs/audio_codec_pair_id.h",
        "patchSetId": 2
      },
      "lineNbr": 20,
      "author": {
        "id": 5399
      },
      "writtenOn": "2018-03-01T10:45:48Z",
      "side": 1,
      "message": "sgtm",
      "parentUuid": "ba2ebb5e_9b11792b",
      "range": {
        "startLine": 20,
        "startChar": 6,
        "endLine": 20,
        "endChar": 22
      },
      "revId": "a6875f492d5583f280b5fd13ed8c341ba2f8bc97",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4ef3bf41_3be16a1f",
        "filename": "api/audio_codecs/audio_decoder_factory.h",
        "patchSetId": 2
      },
      "lineNbr": 42,
      "author": {
        "id": 5399
      },
      "writtenOn": "2018-02-27T13:18:50Z",
      "side": 1,
      "message": "IIRC, this causes warnings about shadowing when a subclass implements one of these but not the other. I think I got hit with that when trying to change the AudioEncoder interface a couple of years back.",
      "revId": "a6875f492d5583f280b5fd13ed8c341ba2f8bc97",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "984ab294_c9c148ca",
        "filename": "api/audio_codecs/audio_decoder_factory.h",
        "patchSetId": 2
      },
      "lineNbr": 42,
      "author": {
        "id": 5126
      },
      "writtenOn": "2018-02-27T13:45:05Z",
      "side": 1,
      "message": "Hmm. Strange---I didn\u0027t see any such warnings, and the current state of affairs as of this CL is that all subclasses implements just the old one without the new ID argument. And a couple of steps ahead, in this CL [https://webrtc-review.googlesource.com/c/src/+/58089], I switch them all to implement just the new method, and again see no warnings.\n\nMaybe contemporary compilers don\u0027t behave the same as ye olde ones?",
      "parentUuid": "4ef3bf41_3be16a1f",
      "revId": "a6875f492d5583f280b5fd13ed8c341ba2f8bc97",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0af9fe4a_cde5c765",
        "filename": "api/audio_codecs/audio_decoder_factory.h",
        "patchSetId": 2
      },
      "lineNbr": 42,
      "author": {
        "id": 5399
      },
      "writtenOn": "2018-03-01T10:45:48Z",
      "side": 1,
      "message": "It might just have been a similar but not exactly the same situation. I think you had to add a using statement to bring the hidden overload into the subclass. Perhaps there\u0027s just no code yet that implements this in a way where it\u0027s a problem? Or perhaps this code just haven\u0027t run against that code yet.",
      "parentUuid": "984ab294_c9c148ca",
      "revId": "a6875f492d5583f280b5fd13ed8c341ba2f8bc97",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    }
  ]
}