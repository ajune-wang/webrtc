{
  "comments": [
    {
      "key": {
        "uuid": "59c749f3_1c776df2",
        "filename": "modules/rtp_rtcp/source/rtp_packet_history.cc",
        "patchSetId": 5
      },
      "lineNbr": 61,
      "author": {
        "id": 5019
      },
      "writtenOn": "2019-05-27T14:14:55Z",
      "side": 1,
      "message": "I\u0027m worried that sort relies on mutable state of the StoredPacket*\nit seems too easy to update times_retransmitted and forget that padding_priority_ should be updated because of that.\n\nI\u0027m not sure though how to make it safer though.\nmay be using std::map\u003cstruct {times_retransmitted, insert_order}, StoredPacket*\u003e\nwould make it safer, but that makes erasing packet less safe.\nanother option is to use\nstd::map\u003cstruct {times_retransmit, insert_order}, uint16_t sequence_number\u003e\nfor a price of an extra lookup in the main map.\nor may be make StoredPacket a class and allow to update times_retransmitted only through accessor that would also updates the padding_priority index.\nOne more option to feel safer is to make some fuzzer that would insert/lookup/update packets in random order.",
      "range": {
        "startLine": 61,
        "startChar": 45,
        "endLine": 61,
        "endChar": 64
      },
      "revId": "95b16d012db4ac3de03c52f08155f39364ffcbe5",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "538691c7_b4f419a5",
        "filename": "modules/rtp_rtcp/source/rtp_packet_history.cc",
        "patchSetId": 5
      },
      "lineNbr": 61,
      "author": {
        "id": 5524
      },
      "writtenOn": "2019-05-27T16:59:53Z",
      "side": 1,
      "message": "Agree that this makes it a bit fragile.\n\nAdding an accessor that forces update to the map sounds reasonable to me.\n\nA potentially less efficient but clearly safer approach would be to have a vector of StoredPacket* and simply sort them in GetPayloadPaddingPacket().\n\nWhile this may seem crude, it might actually save resources if padding is not utilized, and would likely still be reasonably fast since the array would probably be \"mostly sorted\" (and internet seems to think it\u0027s \"common\" that mostly sorted collections are faster to sort, quick-sort based etc?). The history should also be pretty short thanks to the time-based packet timeout and ack-based culling.\n\nwdyt?",
      "parentUuid": "59c749f3_1c776df2",
      "range": {
        "startLine": 61,
        "startChar": 45,
        "endLine": 61,
        "endChar": 64
      },
      "revId": "95b16d012db4ac3de03c52f08155f39364ffcbe5",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "193ce220_d8271ce9",
        "filename": "modules/rtp_rtcp/source/rtp_packet_history.cc",
        "patchSetId": 5
      },
      "lineNbr": 61,
      "author": {
        "id": 5019
      },
      "writtenOn": "2019-05-28T08:28:20Z",
      "side": 1,
      "message": "not sure why you would need a vector and why would you need to sort it then:\nyou already have packet_history_\nall you would need to do in that case is search for a \u0027minimum\u0027 element in it. That is linear. sort can\u0027t be faster.\n(btw, I haven\u0027t found any promises that std::sort or std::stable_sort would work linearly fast on mostly sorted vector)\n\nI would probably leave it as is for now or go for accessor (just to feel safer).\nAnd search for run-time optimized solution in a separate, dedicated change.",
      "parentUuid": "538691c7_b4f419a5",
      "range": {
        "startLine": 61,
        "startChar": 45,
        "endLine": 61,
        "endChar": 64
      },
      "revId": "95b16d012db4ac3de03c52f08155f39364ffcbe5",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c18090fe_0f994e09",
        "filename": "modules/rtp_rtcp/source/rtp_packet_history.cc",
        "patchSetId": 5
      },
      "lineNbr": 61,
      "author": {
        "id": 5524
      },
      "writtenOn": "2019-05-28T09:20:35Z",
      "side": 1,
      "message": "Updated with helper method. Also protected effectively const fields by making them private and adding const getter methods. Making them actual const makes it difficult to move them around withing the std collections.",
      "parentUuid": "193ce220_d8271ce9",
      "range": {
        "startLine": 61,
        "startChar": 45,
        "endLine": 61,
        "endChar": 64
      },
      "revId": "95b16d012db4ac3de03c52f08155f39364ffcbe5",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a7581d8e_daa0e5d6",
        "filename": "modules/rtp_rtcp/source/rtp_packet_history.cc",
        "patchSetId": 5
      },
      "lineNbr": 265,
      "author": {
        "id": 5019
      },
      "writtenOn": "2019-05-27T14:14:55Z",
      "side": 1,
      "message": "nit.\nmay be\nreturn nullptr;\n\ncurrent kind of spelling looks a bit too similar to\nreturn std::make_unique\u003cRtpPacketToSend\u003e();\nthat means something else.\n(side note: though for now we are still using absl::make_unique, it won\u0027t be that long until we switch to c++14 and thus to std::make_unique)",
      "range": {
        "startLine": 265,
        "startChar": 11,
        "endLine": 265,
        "endChar": 45
      },
      "revId": "95b16d012db4ac3de03c52f08155f39364ffcbe5",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "46c5a3e7_7c2aed45",
        "filename": "modules/rtp_rtcp/source/rtp_packet_history.cc",
        "patchSetId": 5
      },
      "lineNbr": 265,
      "author": {
        "id": 5524
      },
      "writtenOn": "2019-05-27T16:59:53Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a7581d8e_daa0e5d6",
      "range": {
        "startLine": 265,
        "startChar": 11,
        "endLine": 265,
        "endChar": 45
      },
      "revId": "95b16d012db4ac3de03c52f08155f39364ffcbe5",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0ceaaa7b_ce39c246",
        "filename": "modules/rtp_rtcp/source/rtp_packet_history.cc",
        "patchSetId": 5
      },
      "lineNbr": 279,
      "author": {
        "id": 5019
      },
      "writtenOn": "2019-05-27T14:14:55Z",
      "side": 1,
      "message": "since newest packets are preferred, I guess it is \"priority stack\" :)",
      "range": {
        "startLine": 279,
        "startChar": 49,
        "endLine": 279,
        "endChar": 54
      },
      "revId": "95b16d012db4ac3de03c52f08155f39364ffcbe5",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "82e6ca63_fc95af23",
        "filename": "modules/rtp_rtcp/source/rtp_packet_history.cc",
        "patchSetId": 5
      },
      "lineNbr": 279,
      "author": {
        "id": 5524
      },
      "writtenOn": "2019-05-27T16:59:53Z",
      "side": 1,
      "message": "Somewhat :)\nBut number of retransmissions has priority over age, and packets can be removed out of order, so an actual priority queue won\u0027t work :/",
      "parentUuid": "0ceaaa7b_ce39c246",
      "range": {
        "startLine": 279,
        "startChar": 49,
        "endLine": 279,
        "endChar": 54
      },
      "revId": "95b16d012db4ac3de03c52f08155f39364ffcbe5",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "36c943c6_7289b980",
        "filename": "modules/rtp_rtcp/source/rtp_packet_history.cc",
        "patchSetId": 5
      },
      "lineNbr": 279,
      "author": {
        "id": 5019
      },
      "writtenOn": "2019-05-28T08:28:20Z",
      "side": 1,
      "message": "when I read \"priority queue\" my first action was to recommend to use std::priority_queue.\nBut, for the reason you mention, it doesn\u0027t fit well here.\nSo may be avoid using this well-known term to avoid confusion (or rearrange words so that \u0027priority\u0027 and \u0027queue\u0027 wouldn\u0027t stand next to each other).",
      "parentUuid": "82e6ca63_fc95af23",
      "range": {
        "startLine": 279,
        "startChar": 49,
        "endLine": 279,
        "endChar": 54
      },
      "revId": "95b16d012db4ac3de03c52f08155f39364ffcbe5",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0937e8c6_ae815c65",
        "filename": "modules/rtp_rtcp/source/rtp_packet_history.cc",
        "patchSetId": 5
      },
      "lineNbr": 279,
      "author": {
        "id": 5524
      },
      "writtenOn": "2019-05-28T09:20:35Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "36c943c6_7289b980",
      "range": {
        "startLine": 279,
        "startChar": 49,
        "endLine": 279,
        "endChar": 54
      },
      "revId": "95b16d012db4ac3de03c52f08155f39364ffcbe5",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "59b94922_e6b49b30",
        "filename": "modules/rtp_rtcp/source/rtp_packet_history.h",
        "patchSetId": 5
      },
      "lineNbr": 166,
      "author": {
        "id": 5019
      },
      "writtenOn": "2019-05-27T14:14:55Z",
      "side": 1,
      "message": "it might be better to avoid std::function abstraction and pass proper functor directly.\n\nprivate:\n struct StoredPacket {...}\n struct MoreUseful {\n   bool operator()(StoredPacket* lhs, StoredPacket* rhs) const;\n };\n\n ...\n std::set\u003cSoredPacket*, MoreUseful\u003e padding_priority_",
      "range": {
        "startLine": 166,
        "startChar": 26,
        "endLine": 166,
        "endChar": 75
      },
      "revId": "95b16d012db4ac3de03c52f08155f39364ffcbe5",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "07803e70_cac39064",
        "filename": "modules/rtp_rtcp/source/rtp_packet_history.h",
        "patchSetId": 5
      },
      "lineNbr": 166,
      "author": {
        "id": 5524
      },
      "writtenOn": "2019-05-27T16:59:53Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "59b94922_e6b49b30",
      "range": {
        "startLine": 166,
        "startChar": 26,
        "endLine": 166,
        "endChar": 75
      },
      "revId": "95b16d012db4ac3de03c52f08155f39364ffcbe5",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3f355748_3ce0a8b7",
        "filename": "modules/rtp_rtcp/source/rtp_packet_history_unittest.cc",
        "patchSetId": 5
      },
      "lineNbr": 748,
      "author": {
        "id": 5019
      },
      "writtenOn": "2019-05-27T14:14:55Z",
      "side": 1,
      "message": "may be keep EXPECT_EQ(value_under_test, kConstant);\norder, like in the expectations above.",
      "revId": "95b16d012db4ac3de03c52f08155f39364ffcbe5",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "568fb7c9_47d73754",
        "filename": "modules/rtp_rtcp/source/rtp_packet_history_unittest.cc",
        "patchSetId": 5
      },
      "lineNbr": 748,
      "author": {
        "id": 5524
      },
      "writtenOn": "2019-05-27T16:59:53Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3f355748_3ce0a8b7",
      "revId": "95b16d012db4ac3de03c52f08155f39364ffcbe5",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    }
  ]
}