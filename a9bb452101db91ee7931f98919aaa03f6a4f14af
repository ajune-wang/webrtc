{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "e92ef48d_72e39e08",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5634
      },
      "writtenOn": "2020-10-16T08:15:26Z",
      "side": 1,
      "message": "Following up on a suggestion made during an earlier code review.\n",
      "revId": "a9bb452101db91ee7931f98919aaa03f6a4f14af",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "272accd8_2f104d0a",
        "filename": "pc/connection_context.cc",
        "patchSetId": 2
      },
      "lineNbr": 120,
      "author": {
        "id": 5234
      },
      "writtenOn": "2020-10-16T08:25:34Z",
      "side": 1,
      "message": "A somewhat different approach is to make the constructor private, and add a public static Create method returning a rtc::scoped_refptr\u003cConnectionContext\u003e\n\nThen move this logic, as well as the MaybeWrapThread and MaybeStartThread logic, to the Create function. If anything fails, return null, otherwise invoke the constructor and pass it everything it needs to successfully initialize itself. Constructor would basically just assign arguments to members.\n\nIs that doable? The main drawback with the current approach is that we end up with the Initialized() method, used to check if construction was successful.",
      "range": {
        "startLine": 94,
        "startChar": 0,
        "endLine": 120,
        "endChar": 42
      },
      "revId": "a9bb452101db91ee7931f98919aaa03f6a4f14af",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7282b8fd_b82190e7",
        "filename": "pc/connection_context.cc",
        "patchSetId": 2
      },
      "lineNbr": 120,
      "author": {
        "id": 5634
      },
      "writtenOn": "2020-10-16T09:19:13Z",
      "side": 1,
      "message": "The advantage of doing \"everything\" in the constructor is that it allows us to mark even more fields const (I didn\u0027t do that here, but it\u0027s obvious how to do it, unless there are ordering constraints I\u0027m not seeing). I like the idea of having a ready-to-use object when the constructor is finished.\n\nBoth approaches are doable. I can see arguments on either side, but I don\u0027t feel like the arguments are compelling for the Create function.",
      "parentUuid": "272accd8_2f104d0a",
      "range": {
        "startLine": 94,
        "startChar": 0,
        "endLine": 120,
        "endChar": 42
      },
      "revId": "a9bb452101db91ee7931f98919aaa03f6a4f14af",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cfc7419d_423d376f",
        "filename": "pc/connection_context.cc",
        "patchSetId": 2
      },
      "lineNbr": 120,
      "author": {
        "id": 5234
      },
      "writtenOn": "2020-10-16T09:30:24Z",
      "side": 1,
      "message": "I think the Create approach would also make it easy to const declare more or less all members, and it might make the optional thread wrapping logic a bit simpler if it\u0027s done prior to invoking the formal constructor.\n\nReplacing Initialize() with Initialized() is an improvement in that it allows you to make more things const, but it may still leave you with an object that is constructed but unusable, which isn\u0027t so nice.\n\nI don\u0027t have that strong an opinion, and I\u0027m not owner of any of this code. Let\u0027s see what other reviewers think.",
      "parentUuid": "7282b8fd_b82190e7",
      "range": {
        "startLine": 94,
        "startChar": 0,
        "endLine": 120,
        "endChar": 42
      },
      "revId": "a9bb452101db91ee7931f98919aaa03f6a4f14af",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    }
  ]
}