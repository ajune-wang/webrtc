{
  "comments": [
    {
      "key": {
        "uuid": "e8515359_ea44ee21",
        "filename": "rtc_base/logging.h",
        "patchSetId": 17
      },
      "lineNbr": 173,
      "author": {
        "id": 5399
      },
      "writtenOn": "2018-05-22T12:44:03Z",
      "side": 1,
      "message": "Do std::strings need their own arg type, or could they be secretly converted to kCharP by calling c_str()? Hmm... probably more expensive to do that at the callsite. Nvm. :)",
      "revId": "31505ae36ecf15e00450050d4a474846828fd1c8",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "560ee4d8_2420f884",
        "filename": "rtc_base/logging.h",
        "patchSetId": 17
      },
      "lineNbr": 173,
      "author": {
        "id": 5126
      },
      "writtenOn": "2018-05-23T10:02:39Z",
      "side": 1,
      "message": "Yes, that\u0027s exactly the reason---any conversion at the call site will cost additional instructions there. We want to pass arguments in the form the caller already has available whenever possible, and do any conversion in the callee.",
      "parentUuid": "e8515359_ea44ee21",
      "revId": "31505ae36ecf15e00450050d4a474846828fd1c8",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "94713a9d_2e1f2501",
        "filename": "rtc_base/logging.h",
        "patchSetId": 17
      },
      "lineNbr": 183,
      "author": {
        "id": 5399
      },
      "writtenOn": "2018-05-22T12:44:03Z",
      "side": 1,
      "message": "Wonder if this can be enforced by hiding the constructor and using a templated friend declaration. Probably not worth it, tbh.",
      "revId": "31505ae36ecf15e00450050d4a474846828fd1c8",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e0719e5b_fcae2216",
        "filename": "rtc_base/logging.h",
        "patchSetId": 17
      },
      "lineNbr": 183,
      "author": {
        "id": 5126
      },
      "writtenOn": "2018-05-23T10:02:39Z",
      "side": 1,
      "message": "Yes, that was my sense too, but I haven\u0027t actually tried. But templates make friend declarations complicated, and this function is hidden in a private namespace, which is why I felt the comment ought to suffice.",
      "parentUuid": "94713a9d_2e1f2501",
      "revId": "31505ae36ecf15e00450050d4a474846828fd1c8",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d350482a_79719e2a",
        "filename": "rtc_base/logging.h",
        "patchSetId": 17
      },
      "lineNbr": 290,
      "author": {
        "id": 5399
      },
      "writtenOn": "2018-05-22T12:44:03Z",
      "side": 1,
      "message": "What\u0027s the significance of separating arithmetic from non-arithmetic types for these calls (and the ones below)?",
      "revId": "31505ae36ecf15e00450050d4a474846828fd1c8",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8298a205_890a3e8e",
        "filename": "rtc_base/logging.h",
        "patchSetId": 17
      },
      "lineNbr": 290,
      "author": {
        "id": 5126
      },
      "writtenOn": "2018-05-23T10:02:39Z",
      "side": 1,
      "message": "In theory, we should need only the overload that takes a const U\u0026 argument. But we call this with a bunch of declared-but-not-defined numerical constants, so if we do that we get linker errors. Rather than chase down all of those (which I\u0027d prefer to wait with until we can use inline variables in C++17), I worked around the problem.",
      "parentUuid": "d350482a_79719e2a",
      "revId": "31505ae36ecf15e00450050d4a474846828fd1c8",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a73fd9f2_4f1cc7ec",
        "filename": "rtc_base/logging.h",
        "patchSetId": 17
      },
      "lineNbr": 290,
      "author": {
        "id": 5399
      },
      "writtenOn": "2018-05-23T10:35:47Z",
      "side": 1,
      "message": "Ah, ok. That makes sense.",
      "parentUuid": "8298a205_890a3e8e",
      "revId": "31505ae36ecf15e00450050d4a474846828fd1c8",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "61c86e1f_9543215f",
        "filename": "rtc_base/logging.h",
        "patchSetId": 17
      },
      "lineNbr": 340,
      "author": {
        "id": 5399
      },
      "writtenOn": "2018-05-22T12:44:03Z",
      "side": 1,
      "message": "Why is the base case Call static but the other ones not?",
      "revId": "31505ae36ecf15e00450050d4a474846828fd1c8",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "80b21c20_f05b9984",
        "filename": "rtc_base/logging.h",
        "patchSetId": 17
      },
      "lineNbr": 340,
      "author": {
        "id": 5126
      },
      "writtenOn": "2018-05-23T10:02:39Z",
      "side": 1,
      "message": "The base case Call() doesn\u0027t need to access any member variables, but the others do.",
      "parentUuid": "61c86e1f_9543215f",
      "revId": "31505ae36ecf15e00450050d4a474846828fd1c8",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "72b5f0ab_0233aeec",
        "filename": "rtc_base/logging.h",
        "patchSetId": 17
      },
      "lineNbr": 340,
      "author": {
        "id": 5399
      },
      "writtenOn": "2018-05-23T10:35:47Z",
      "side": 1,
      "message": "But doesn\u0027t prior_-\u003eCall then eventually resolve to calling a static function as if it were a method? The compiler doesn\u0027t seem to mind in this case (probably b/c of templates), but IIRC, it usually complains when you call static functions like that.",
      "parentUuid": "80b21c20_f05b9984",
      "revId": "31505ae36ecf15e00450050d4a474846828fd1c8",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1d1f522b_e5772a40",
        "filename": "rtc_base/logging.h",
        "patchSetId": 17
      },
      "lineNbr": 340,
      "author": {
        "id": 5126
      },
      "writtenOn": "2018-05-23T10:47:53Z",
      "side": 1,
      "message": "Yes, it calls it as if it were a method. Is that not allowed? Our compilers seem to handle it just fine, in any case: https://godbolt.org/g/f8RV81",
      "parentUuid": "72b5f0ab_0233aeec",
      "revId": "31505ae36ecf15e00450050d4a474846828fd1c8",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0b29b5f4_dc2fc8ed",
        "filename": "rtc_base/logging.h",
        "patchSetId": 17
      },
      "lineNbr": 340,
      "author": {
        "id": 5126
      },
      "writtenOn": "2018-05-23T10:51:03Z",
      "side": 1,
      "message": "This text [http://en.cppreference.com/w/cpp/language/static] seems to imply that you can use either the Foo::Meth() or the foo.Meth() syntax when calling static member functions.",
      "parentUuid": "1d1f522b_e5772a40",
      "revId": "31505ae36ecf15e00450050d4a474846828fd1c8",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5553e0b5_b2c97fa7",
        "filename": "rtc_base/logging.h",
        "patchSetId": 17
      },
      "lineNbr": 340,
      "author": {
        "id": 5399
      },
      "writtenOn": "2018-05-23T10:58:55Z",
      "side": 1,
      "message": "Great! Must\u0027ve been some old compiler experience rattling around in my brain.",
      "parentUuid": "0b29b5f4_dc2fc8ed",
      "revId": "31505ae36ecf15e00450050d4a474846828fd1c8",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    }
  ]
}