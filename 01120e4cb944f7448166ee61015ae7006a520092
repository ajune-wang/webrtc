{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "2b69c0c4_78b096c3",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 16,
      "author": {
        "id": 9816
      },
      "writtenOn": "2024-08-08T13:01:07Z",
      "side": 1,
      "message": "Hmm, that covers the case when the node is removed on the server, while we still keep track of it.\n\nBut what about the happens when the node still exists, when we shut down our end of the connection and destroy all objects? Are you sure that the core destroys all proxy objects?",
      "revId": "01120e4cb944f7448166ee61015ae7006a520092",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a50f375a_e572e4f3",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 16,
      "author": {
        "id": 8046
      },
      "writtenOn": "2024-08-08T14:51:50Z",
      "side": 1,
      "message": "The way I can trigger this crash is with https://webrtc-review.googlesource.com/c/src/+/358864.\n\nWhen I remove the unsupported camera (node), it calls the `pw_proxy_destroy()` in `~PipeWireNode()` and then closing Firefox it apparently tries to destroy it again and hits the assert.",
      "parentUuid": "2b69c0c4_78b096c3",
      "revId": "01120e4cb944f7448166ee61015ae7006a520092",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "988cecc1_dcc5abc6",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 16,
      "author": {
        "id": 8046
      },
      "writtenOn": "2024-08-08T15:12:38Z",
      "side": 1,
      "message": "Actually, it looks it\u0027s vice versa, as adding breaks to `pw_proxy_destroy()` in gdb it says that:\n1) `pw_core_disconnect()` calls `pw_proxy_destroy()` first\n2) and `~PipeWireNode()` calls it again and hits the assert\n\nSee https://gitlab.freedesktop.org/pipewire/pipewire/-/blob/master/src/pipewire/core.c#L492.",
      "parentUuid": "a50f375a_e572e4f3",
      "revId": "01120e4cb944f7448166ee61015ae7006a520092",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d5bd6e97_26157039",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 8046
      },
      "writtenOn": "2024-08-08T15:17:58Z",
      "side": 1,
      "message": "We also have same issue in xdg-desktop-portal, where I proposed same fix: https://github.com/flatpak/xdg-desktop-portal/pull/1414.\n\nLet\u0027s put this on hold until we figure out what is correct.",
      "revId": "01120e4cb944f7448166ee61015ae7006a520092",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "At least one maximum vote for label \u0027Code-Review\u0027 is required"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader AND -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1 AND -label:Code-Review\u003dMIN"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader AND -label:Code-Review=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Code-Review=MAX,user=non_uploader"],"failingAtoms":["label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1 AND -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1","label:Code-Review=MIN"]}
      },
      "patchSetCommitId": "01120e4cb944f7448166ee61015ae7006a520092",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforced_gerrit"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforcement-satisfied_gerrit"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "01120e4cb944f7448166ee61015ae7006a520092",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}