{
  "comments": [
    {
      "key": {
        "uuid": "543230c7_354cb758",
        "filename": "api/rtptransceiverinterface.h",
        "patchSetId": 2
      },
      "lineNbr": 115,
      "author": {
        "id": 5142
      },
      "writtenOn": "2018-07-17T08:41:49Z",
      "side": 1,
      "message": "Can you add a default implementation returning nullopt as to not break chrome on import having fake/mock implementations of this interface?",
      "revId": "fda65c2adf163d707af2ca2f4e1df9749ae683e1",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "204bdb1a_1357c235",
        "filename": "api/rtptransceiverinterface.h",
        "patchSetId": 2
      },
      "lineNbr": 115,
      "author": {
        "id": 5142
      },
      "writtenOn": "2018-07-17T08:57:56Z",
      "side": 1,
      "message": "Oh awesome it now compiles chromium automatically as part of the CQ. It complained about this.",
      "parentUuid": "543230c7_354cb758",
      "revId": "fda65c2adf163d707af2ca2f4e1df9749ae683e1",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1091ea2b_4cab8ad5",
        "filename": "pc/peerconnection.cc",
        "patchSetId": 2
      },
      "lineNbr": 2607,
      "author": {
        "id": 5142
      },
      "writtenOn": "2018-07-17T08:41:49Z",
      "side": 1,
      "message": "This might not matter because it\u0027s an edge-case spec detail about streams, which are implemented in Chrome and not affected by how this is handled natively, and natively streams are going away, so whatever -- but:\n\nIn the spec, tracks are added/removed from the stream after all transceivers have been updated when looping through the addList/removeList (when firing the events). The observable difference is if you have a stream with multiple tracks and you observe stream.getTracks() inside of the events firing. With the current code, when the first event fires the stream will already be empty. In spec, when the first even fires only the first track has been removed, not until the second one fires has both been removed.\n\nJust wanted to call that out. I would not bother fixing it since it\u0027s native-only and change of behavior, but if I did I would fix it in a separate CL.",
      "revId": "fda65c2adf163d707af2ca2f4e1df9749ae683e1",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "330f92c8_8af88cc9",
        "filename": "pc/peerconnection.cc",
        "patchSetId": 2
      },
      "lineNbr": 2607,
      "author": {
        "id": 5142
      },
      "writtenOn": "2018-07-17T08:45:27Z",
      "side": 1,
      "message": "(Not an edge-case whether it would happen: usually you would have a stream with two tracks, but edge-case in the sense that you would care about the difference. It might arguably be more useful that the stream is in a complete state when the event fires - something I suggested on the spec, but consensus was that it should only be added and fired iteratively.)",
      "parentUuid": "1091ea2b_4cab8ad5",
      "revId": "fda65c2adf163d707af2ca2f4e1df9749ae683e1",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ceed5a25_ddc25404",
        "filename": "pc/peerconnection.cc",
        "patchSetId": 2
      },
      "lineNbr": 2607,
      "author": {
        "id": 5634
      },
      "writtenOn": "2018-07-17T11:58:49Z",
      "side": 1,
      "message": "Removing them one at a time is consistent with the logic that says that an event handler only sees the changes that it has seen the events for. (cf multi-hop state changes).\nIt\u0027s a PITA to keep straight, but the alternative is somewhat confusing.",
      "parentUuid": "330f92c8_8af88cc9",
      "revId": "fda65c2adf163d707af2ca2f4e1df9749ae683e1",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "181dc11f_5c758136",
        "filename": "pc/peerconnection_rtp_unittest.cc",
        "patchSetId": 2
      },
      "lineNbr": 706,
      "author": {
        "id": 5039
      },
      "writtenOn": "2018-07-16T23:09:43Z",
      "side": 1,
      "message": "This test was passing before unintentionally because the SRDs with no answer would cause the track to be added twice which updates the remote streams (in the \"add remote track\" step). Now, the track is only added the first time and there is no language in the specification to update the streams each time SRD is called. So for now I\u0027ve commented it out and will revisit once the spec bug is resolved.",
      "revId": "fda65c2adf163d707af2ca2f4e1df9749ae683e1",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7f9d2956_097fd773",
        "filename": "pc/peerconnection_rtp_unittest.cc",
        "patchSetId": 2
      },
      "lineNbr": 706,
      "author": {
        "id": 5142
      },
      "writtenOn": "2018-07-17T08:41:49Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "181dc11f_5c758136",
      "revId": "fda65c2adf163d707af2ca2f4e1df9749ae683e1",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3fae05d5_2d81ca62",
        "filename": "pc/peerconnection_rtp_unittest.cc",
        "patchSetId": 2
      },
      "lineNbr": 708,
      "author": {
        "id": 5634
      },
      "writtenOn": "2018-07-17T11:58:49Z",
      "side": 1,
      "message": "Can you use DISABLED in the test name to disable it instead of commenting it out? This makes it easier to put back in, and guards against compiler error-causing bitrot.",
      "revId": "fda65c2adf163d707af2ca2f4e1df9749ae683e1",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    }
  ]
}