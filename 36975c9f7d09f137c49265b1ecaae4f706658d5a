{
  "comments": [
    {
      "key": {
        "uuid": "a056b8dc_064d5996",
        "filename": "api/video_codecs/video_encoder.h",
        "patchSetId": 3
      },
      "lineNbr": 319,
      "author": {
        "id": 5524
      },
      "writtenOn": "2019-04-03T15:17:34Z",
      "side": 1,
      "message": "I think it would make sense to collect these into a struct. Would mean less boilerplate per encoder/temporal layer implementation and simplifies updates to these parameters in the future if needed.\nwdyt?",
      "range": {
        "startLine": 316,
        "startChar": 0,
        "endLine": 319,
        "endChar": 53
      },
      "revId": "36975c9f7d09f137c49265b1ecaae4f706658d5a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fb8d9898_c0584fa8",
        "filename": "api/video_codecs/video_encoder.h",
        "patchSetId": 3
      },
      "lineNbr": 319,
      "author": {
        "id": 5147
      },
      "writtenOn": "2019-04-03T15:26:03Z",
      "side": 1,
      "message": "These values mutate in form several times as they flow from the point of ingress (an RTCP message) to the encoder. I wouldn\u0027t want multiple similar structs. Not all CLs are up yet, so it\u0027s not yet visible, but I can describe the process in general:\n1. The RTCP message refers to sequence numbers rather than timestamps. Also, it has a single \"decodability flag\" rather than these two optionals.\n2. At a certain point in the pipeline (RTPSenderVideo according to current plan) we poll for the seq_num-\u003etimestamp mapping. We also get information about whether the packet with the given sequence number was first and/or last in the frame.\n3. Later we take the information from #2 (first and/or last, once per RTP sequence number, of which we have two). We combine that information with the decodability flag (from the RTCP message) to get these two optionals.",
      "parentUuid": "a056b8dc_064d5996",
      "range": {
        "startLine": 316,
        "startChar": 0,
        "endLine": 319,
        "endChar": 53
      },
      "revId": "36975c9f7d09f137c49265b1ecaae4f706658d5a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "432fb85a_6d31c354",
        "filename": "api/video_codecs/video_encoder.h",
        "patchSetId": 3
      },
      "lineNbr": 319,
      "author": {
        "id": 5524
      },
      "writtenOn": "2019-04-04T08:17:14Z",
      "side": 1,
      "message": "Right, but here it has boiled down to just what the encoder is interested in, so we could create a struct within the VideoEncoder interface just like ScalingSettings above for instance.\nAny potential update to the members there would then be much easier than changing the signature of the methods in the interface, and allows just passing one variable through to each frame buffer controller.\n\nIf you disagree I\u0027ll be ok with that too.",
      "parentUuid": "fb8d9898_c0584fa8",
      "range": {
        "startLine": 316,
        "startChar": 0,
        "endLine": 319,
        "endChar": 53
      },
      "revId": "36975c9f7d09f137c49265b1ecaae4f706658d5a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "19029a43_37914f2d",
        "filename": "api/video_codecs/video_encoder.h",
        "patchSetId": 3
      },
      "lineNbr": 319,
      "author": {
        "id": 5147
      },
      "writtenOn": "2019-04-04T10:30:47Z",
      "side": 1,
      "message": "I am a bit concerned about us having multiple LossNotification structs with slightly different members, but I guess that\u0027s not worse than having many different OnLossNotification() functions with slightly different parameters.\nDone.",
      "parentUuid": "432fb85a_6d31c354",
      "range": {
        "startLine": 316,
        "startChar": 0,
        "endLine": 319,
        "endChar": 53
      },
      "revId": "36975c9f7d09f137c49265b1ecaae4f706658d5a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    }
  ]
}