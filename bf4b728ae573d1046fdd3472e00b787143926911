{
  "comments": [
    {
      "key": {
        "uuid": "c1109223_9310872a",
        "filename": "sdk/android/api/org/webrtc/YuvHelper.java",
        "patchSetId": 14
      },
      "lineNbr": 122,
      "author": {
        "id": 5112
      },
      "writtenOn": "2018-03-01T10:56:36Z",
      "side": 1,
      "message": "Could you add a simple test for this method? You can copy and modify one of the existing tests in YuvHelperTest.",
      "range": {
        "startLine": 122,
        "startChar": 27,
        "endLine": 122,
        "endChar": 44
      },
      "revId": "bf4b728ae573d1046fdd3472e00b787143926911",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fe0f8041_e77f87e8",
        "filename": "sdk/android/api/org/webrtc/YuvHelper.java",
        "patchSetId": 14
      },
      "lineNbr": 122,
      "author": {
        "id": 5656
      },
      "writtenOn": "2018-03-01T17:35:30Z",
      "side": 1,
      "message": "Leave this open. As the other comment seems a big conflict with current alpha channel storage on C++ side.",
      "parentUuid": "c1109223_9310872a",
      "range": {
        "startLine": 122,
        "startChar": 27,
        "endLine": 122,
        "endChar": 44
      },
      "revId": "bf4b728ae573d1046fdd3472e00b787143926911",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7c6bae64_9a53fde1",
        "filename": "sdk/android/src/jni/videoframe.cc",
        "patchSetId": 14
      },
      "lineNbr": 454,
      "author": {
        "id": 5112
      },
      "writtenOn": "2018-03-01T10:56:36Z",
      "side": 1,
      "message": "This is not allowed. ToI420 should not return I420A buffers. Could you maybe point us to a design doc so we could better understand how you plan to use this.",
      "range": {
        "startLine": 447,
        "startChar": 0,
        "endLine": 454,
        "endChar": 3
      },
      "revId": "bf4b728ae573d1046fdd3472e00b787143926911",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "76d7cfa2_09c6d972",
        "filename": "sdk/android/src/jni/videoframe.cc",
        "patchSetId": 14
      },
      "lineNbr": 454,
      "author": {
        "id": 5656
      },
      "writtenOn": "2018-03-01T17:35:30Z",
      "side": 1,
      "message": "On C++ side emircan@ made I420ABufferInterface as an extension of I420BufferInterface, it is distinguished in the MultiplexEncoderAdapter by reading its type(). We do this because the encoder needs to handle the case the frame has no alpha channel, and we do not have knowledge whether a handler-based frame has alpha channel or not before we visualize the data out through ToI420(), and thus adding a function ToI420A() is kind of hard.\n\nOr maybe we should do the same to make I420ABuffer as an extension of interface I420Buffer for consistency?\nIf you insist splitting these two apart on C++ side, then I think that will incur somewhat big structural change, which is definitely out of this CL scope, and we need to wrap emircan@ in.\n\n[1] https://docs.google.com/document/d/1jpe8qnRLYH7pIygEgsOnm6CdAxlXPR_jFB4FpbpRwk8/edit#heading\u003dh.xgjl2srtytjt",
      "parentUuid": "7c6bae64_9a53fde1",
      "range": {
        "startLine": 447,
        "startChar": 0,
        "endLine": 454,
        "endChar": 3
      },
      "revId": "bf4b728ae573d1046fdd3472e00b787143926911",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "261f4afe_4306242b",
        "filename": "sdk/android/src/jni/videoframe.cc",
        "patchSetId": 14
      },
      "lineNbr": 454,
      "author": {
        "id": 5682
      },
      "writtenOn": "2018-03-01T18:11:12Z",
      "side": 1,
      "message": "In MultiplexEncoderAdapter, we are using GetI420A() to return the class instance[1]. We didn\u0027t need native to CPU buffer conversion so far, therefore it was enough. I don\u0027t think it is necessary to add a ToI420A() method seperately. I420ABufferInterface extends I420BufferInterface, so it wouldn\u0027t be wrong to return that from this class. I420ABufferInterface still contains a memory-backed frame buffer in I420 format, and other SW encoders can use that.\n\n[0] https://cs.chromium.org/chromium/src/third_party/webrtc/api/video/video_frame_buffer.h?rcl\u003d12c8110e8c717b7f0f87615d3b99caac2a69fa6c\u0026l\u003d72\n[1] https://cs.chromium.org/chromium/src/third_party/webrtc/api/video/video_frame_buffer.h?rcl\u003d12c8110e8c717b7f0f87615d3b99caac2a69fa6c\u0026l\u003d72",
      "parentUuid": "76d7cfa2_09c6d972",
      "range": {
        "startLine": 447,
        "startChar": 0,
        "endLine": 454,
        "endChar": 3
      },
      "revId": "bf4b728ae573d1046fdd3472e00b787143926911",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a8aec491_8645e2aa",
        "filename": "sdk/android/src/jni/videoframe.cc",
        "patchSetId": 14
      },
      "lineNbr": 454,
      "author": {
        "id": 5098
      },
      "writtenOn": "2018-03-02T09:20:02Z",
      "side": 1,
      "message": "I agree with Sami that we shouldn\u0027t rely on I420A extending I420. The fact that you can upcast the result from ToI420 is kind of a hack. ToI420 is supposed to be a fallback for SW encoders that know nothing about specific Java buffers, like textures. Now you are using ToI420 as a way to send custom Java frames to a custom C++ encoder. Whenever someone wants to use a combination of custom frames and custom encoder they should inject these into WebRTC, and WebRTC shouldn\u0027t have to know anything about them. I get the feeling now that none of you the code you are trying to land here actually needs to go into WebRTC and you can do everything externally instead.\n\nIt\u0027s still not clear to me how you plan to use this. The document you link to is about Alpha support in general, and nothing about how this will be exposed in the Android API. If your plan is to use MultiplexEncoderFactory, which is an external encoder, you need to inject it into PeerConnectionFactory. How are you planning to do that through the Android API? Can you write up some brief explanation or doc what your proposed extended Android API is and how an app will use it? With this CL, it\u0027s still impossible to use alpha support through the Android API, something is missing.",
      "parentUuid": "261f4afe_4306242b",
      "range": {
        "startLine": 447,
        "startChar": 0,
        "endLine": 454,
        "endChar": 3
      },
      "revId": "bf4b728ae573d1046fdd3472e00b787143926911",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cbcb7cad_9af461de",
        "filename": "sdk/android/src/jni/videoframe.cc",
        "patchSetId": 14
      },
      "lineNbr": 454,
      "author": {
        "id": 5656
      },
      "writtenOn": "2018-03-02T17:24:48Z",
      "side": 1,
      "message": "The hook up point of MultiplexEncoderFactory is at[1], where one should wrap the encoder_factory and decoder_factory into the MultiplexXXXFactory before creating the peerconnection. Is there a way we can make this available to the caller? (Our current experimental code just hardcoded modify the code at [1] to do a hook up by force)\n\nTo avoid using ToI420() converting a general buffer to AndroidI420ABuffer, the way I can think of is to do a check at [2], if the |j_video_frame_buffer| is of type JavaI420ABuffer, we wrap it into an instance of AndroidI420ABuffer, rather than a general AndroidVideoBuffer. What do you think?\n\n[1] https://cs.chromium.org/chromium/src/third_party/webrtc/sdk/android/src/jni/pc/peerconnectionfactory.cc?type\u003dcs\u0026q\u003dpeerconnectionfactory_jni\u0026l\u003d263\n\n[2]\nhttps://cs.chromium.org/chromium/src/third_party/webrtc/sdk/android/src/jni/androidvideotracksource.cc?type\u003dcs\u0026q\u003dAndroidVideoBuffer\u0026ssfr\u003d1\u0026l\u003d195",
      "parentUuid": "a8aec491_8645e2aa",
      "range": {
        "startLine": 447,
        "startChar": 0,
        "endLine": 454,
        "endChar": 3
      },
      "revId": "bf4b728ae573d1046fdd3472e00b787143926911",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2eb35942_7a6f9326",
        "filename": "sdk/android/src/jni/videoframe.cc",
        "patchSetId": 14
      },
      "lineNbr": 454,
      "author": {
        "id": 5098
      },
      "writtenOn": "2018-03-07T16:24:28Z",
      "side": 1,
      "message": "Ok, so for [1], you shouldn\u0027t edit our internal source files. We want to have the power to refactor our internal source code without breaking external projects. You should think about what API you need to be exposed. I\u0027m still confused what Java components you are actually using from us since you are not using our Java API and are directly modifying the JNI C++ code. Do you even need to use our Java code for this? What Java components do you use from the SDK?\n\nFor [2], the problem with that approach is that we do not want to convert the frames to ordinary C++ buffers since that will give a performance hit in other cases. The consumer of these Java frames are supposed to be a Java encoder and a Java renderer, and for this case we want to pass the jobject all the way through WebRTC since this is the cheapest approach. I know now that you modify our JNI source in order to mix and match Java and C++, but that\u0027s not a valid use case.\n\nOne approach would be to write a Java wrapper around MultiplexEncoderFactory, and in this wrapping convert the frames to I420A, but that will require more work from your side. I don\u0027t want to recommend that approach until I understand what you want to accomplish.\n\nIf you don\u0027t have a document describing what you are doing on the Android side, can you send me a link to a CL showing what you are doing?",
      "parentUuid": "cbcb7cad_9af461de",
      "range": {
        "startLine": 447,
        "startChar": 0,
        "endLine": 454,
        "endChar": 3
      },
      "revId": "bf4b728ae573d1046fdd3472e00b787143926911",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    }
  ]
}