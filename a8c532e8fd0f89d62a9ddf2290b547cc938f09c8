{
  "comments": [
    {
      "key": {
        "uuid": "a162f3a0_1dcae070",
        "filename": "modules/rtp_rtcp/include/rtp_rtcp_defines.h",
        "patchSetId": 6
      },
      "lineNbr": 222,
      "author": {
        "id": 5524
      },
      "writtenOn": "2020-05-10T16:33:36Z",
      "side": 1,
      "message": "Opted to have this outside, rather than a kNumberOfValues inside the enum. This is maybe a bit more brittle, but we avoid updating a bunch of switch statements with an ugly extra case-statement...",
      "range": {
        "startLine": 222,
        "startChar": 24,
        "endLine": 222,
        "endChar": 38
      },
      "revId": "a8c532e8fd0f89d62a9ddf2290b547cc938f09c8",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b569354d_4a28cf23",
        "filename": "modules/rtp_rtcp/include/rtp_rtcp_defines.h",
        "patchSetId": 6
      },
      "lineNbr": 222,
      "author": {
        "id": 5531
      },
      "writtenOn": "2020-05-11T08:47:54Z",
      "side": 1,
      "message": "I agree on the wish to avoid an ugly extra case. I\u0027m a bit weary about the fact that forgetting to update the line would result in an out of bounds write. \n\nI think we can at least add a warning about it. We could also add something like below that would catch the case of adding a value without updating the size:\n\nconstexpr bool validateNumMediaTypes(){\nswitch(static_cast\u003cRtpPacketMediaType\u003e(kNumMediaTypes)){\ncase RtpPacketMediaType::kAudio:\ncase RtpPacketMediaType::kVideo:\ncase RtpPacketMediaType::kRetransmission:\ncase RtpPacketMediaType::kForwardErrorCorrection:\ncase RtpPacketMediaType::kPadding:\nreturn false;\ndefault: return true;\n}\n}\nstatic_assert(validateNumMediaTypes(), \"\");",
      "parentUuid": "a162f3a0_1dcae070",
      "range": {
        "startLine": 222,
        "startChar": 24,
        "endLine": 222,
        "endChar": 38
      },
      "revId": "a8c532e8fd0f89d62a9ddf2290b547cc938f09c8",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "212c5d7d_3f893a36",
        "filename": "modules/rtp_rtcp/include/rtp_rtcp_defines.h",
        "patchSetId": 6
      },
      "lineNbr": 222,
      "author": {
        "id": 5524
      },
      "writtenOn": "2020-05-11T11:19:56Z",
      "side": 1,
      "message": "I\u0027m not sure that check would help. If you add another value without updating kNumMediaTypes, then chances are you don\u0027t remember to add another case here (since there\u0027s a default:, it won\u0027t trigger a compiler error) - and then that check would still pass.\n\nNot perfect either, but I moved kNumMediaTypes to above the enum and set the last value to kNumMediaTypes - 1. If someone tries to add a new value and sets the new last to kNumMediaTypes - 1 wihtout updating the kNumMediaTypes it will trigger a compilation errors since there\u0027s not enough available values between 0 and kNumMediaTypes -1.\nThere\u0027s of course the possibility that someone adds a new enum value with explicit value or sets it to kNumMediaTypes, but I guess there\u0027s a limit to what we can protect against.\nI\u0027ll add another comment to warn people. Hopefully a code-reviewer won\u0027t miss that :)",
      "parentUuid": "b569354d_4a28cf23",
      "range": {
        "startLine": 222,
        "startChar": 24,
        "endLine": 222,
        "endChar": 38
      },
      "revId": "a8c532e8fd0f89d62a9ddf2290b547cc938f09c8",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "76b830e8_471a9c53",
        "filename": "modules/rtp_rtcp/include/rtp_rtcp_defines.h",
        "patchSetId": 6
      },
      "lineNbr": 404,
      "author": {
        "id": 5531
      },
      "writtenOn": "2020-05-11T08:47:54Z",
      "side": 1,
      "message": "Maybe it makes sense to use [] overload here (and below)? Afaict it behaves as expected for e.g. std::map so it would actually be clearer IMO.",
      "range": {
        "startLine": 404,
        "startChar": 2,
        "endLine": 404,
        "endChar": 51
      },
      "revId": "a8c532e8fd0f89d62a9ddf2290b547cc938f09c8",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0786723d_bbe077f3",
        "filename": "modules/rtp_rtcp/include/rtp_rtcp_defines.h",
        "patchSetId": 6
      },
      "lineNbr": 404,
      "author": {
        "id": 5524
      },
      "writtenOn": "2020-05-11T11:19:56Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "76b830e8_471a9c53",
      "range": {
        "startLine": 404,
        "startChar": 2,
        "endLine": 404,
        "endChar": 51
      },
      "revId": "a8c532e8fd0f89d62a9ddf2290b547cc938f09c8",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "accb0921_717ae628",
        "filename": "modules/rtp_rtcp/source/rtp_sender_egress.cc",
        "patchSetId": 6
      },
      "lineNbr": 455,
      "author": {
        "id": 5531
      },
      "writtenOn": "2020-05-11T08:47:54Z",
      "side": 1,
      "message": "nit: there\u0027s a lot of these casts spread out now, maybe we should have a helper to convert between index and enum to keep the \"unsafe\" code at one place?",
      "range": {
        "startLine": 455,
        "startChar": 32,
        "endLine": 455,
        "endChar": 51
      },
      "revId": "a8c532e8fd0f89d62a9ddf2290b547cc938f09c8",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e7d92ce1_3d84cb39",
        "filename": "modules/rtp_rtcp/source/rtp_sender_egress.cc",
        "patchSetId": 6
      },
      "lineNbr": 455,
      "author": {
        "id": 5524
      },
      "writtenOn": "2020-05-11T11:19:56Z",
      "side": 1,
      "message": "It\u0027s only really meant to be an implementation detail inside RtpSendRates, but is used in here too just because we have the vector of RateStatistics matching it. And the two casts in here are in different directions. Not sure it\u0027s worth adding helpers for that.\nI could try replacing the vector with some kind of map\u003cRtpPacketMediaRype, RateStatitistics\u003e but that has other issues...",
      "parentUuid": "accb0921_717ae628",
      "range": {
        "startLine": 455,
        "startChar": 32,
        "endLine": 455,
        "endChar": 51
      },
      "revId": "a8c532e8fd0f89d62a9ddf2290b547cc938f09c8",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    }
  ]
}