{
  "comments": [
    {
      "key": {
        "uuid": "2961fdf7_cf047d34",
        "filename": "api/peerconnectioninterface.h",
        "patchSetId": 1
      },
      "lineNbr": 884,
      "author": {
        "id": 5053
      },
      "writtenOn": "2017-09-29T20:52:18Z",
      "side": 1,
      "message": "I didn\u0027t think we\u0027d need a new event for this. I assumed the new streams would just be announced via OnAddStream, and changes to existing streams via OnChanged (on the stream itself). Maybe that makes it more difficult for the chromium code though.",
      "revId": "4df629688073ad1e62a710361bb5bcbef3287dcb",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f37c8c44_6595afab",
        "filename": "api/peerconnectioninterface.h",
        "patchSetId": 1
      },
      "lineNbr": 884,
      "author": {
        "id": 5142
      },
      "writtenOn": "2017-10-05T13:03:15Z",
      "side": 1,
      "message": "I thought we were moving away from OnAddStream due to OnAddTrack. It\u0027s still a useful callback in case you don\u0027t want to keep track of existing streams, but I wasn\u0027t planning on using it anymore.\n\nYou can wire up a stream\u0027s OnChanged but it makes upstream code more complicated because:\n- You care about streams added/removed from a receiver but you listen to tracks added or removed from a stream, so you have to lookup receivers from tracks in the listener.\n- We have to jump between threads (webrtc signaling, renderer) and one operation (update streams set) becomes multiple operations (one per stream) over two threads. More assumptions and things having to execute together, more risk of bugs. We can\u0027t guarantee the renderer thread doesn\u0027t execute other tasks in-between different callbacks.\n- If we want to have an event that fires when a receiver\u0027s stream set is updated and multiple streams are removed we have to make sure multiple OnChanged events firing result in a single receiver event firing.\n\nWe can get by but I think its simpler to introduce OnAssociatedStreamsUpdated(), it may save us some headaches.",
      "parentUuid": "2961fdf7_cf047d34",
      "revId": "4df629688073ad1e62a710361bb5bcbef3287dcb",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "96c957f3_68e1fed3",
        "filename": "api/peerconnectioninterface.h",
        "patchSetId": 1
      },
      "lineNbr": 890,
      "author": {
        "id": 5053
      },
      "writtenOn": "2017-09-29T20:52:18Z",
      "side": 1,
      "message": "I\u0027d want to clarify a bit further what the switch to unified plan SDP will mean for this API. Since receivers are never truly removed, will this never be called? That seems reasonable to me; the application can just inspect the \"direction\" attribute, listen for stream change events or \"mute\" events, so there are other ways to get the information.\n\nIn other words: I\u0027m suggesting we define this to be something that\u0027s *only* called when a Plan B RtpReceiver is completely removed.",
      "revId": "4df629688073ad1e62a710361bb5bcbef3287dcb",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f96b07a2_a2b8528c",
        "filename": "api/peerconnectioninterface.h",
        "patchSetId": 1
      },
      "lineNbr": 890,
      "author": {
        "id": 5142
      },
      "writtenOn": "2017-10-05T13:03:15Z",
      "side": 1,
      "message": "Agreed.\nWhen we have transceivers I imagine we listen to it changing direction etc, but no removal.\nDepending on how the transceivers are glued, we might get by on mute events or we might want an OnChanged on the transceiver (or similar callback here).\n\nDescription updated.",
      "parentUuid": "96c957f3_68e1fed3",
      "revId": "4df629688073ad1e62a710361bb5bcbef3287dcb",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    }
  ]
}