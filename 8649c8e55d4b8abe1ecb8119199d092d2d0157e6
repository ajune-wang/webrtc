{
  "comments": [
    {
      "key": {
        "uuid": "1ff5e50d_2aa37a13",
        "filename": "rtc_base/logging.h",
        "patchSetId": 3
      },
      "lineNbr": 523,
      "author": {
        "id": 5126
      },
      "writtenOn": "2019-11-25T17:42:33Z",
      "side": 1,
      "message": "Can you follow the example of DCHECK_ALWAYS_ON? I.e., also provide a GN variable? (Does Chromium already have a GN variable that we can use?)",
      "revId": "8649c8e55d4b8abe1ecb8119199d092d2d0157e6",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1d08fde9_2bdd941b",
        "filename": "rtc_base/logging.h",
        "patchSetId": 3
      },
      "lineNbr": 523,
      "author": {
        "id": 5087
      },
      "writtenOn": "2019-11-26T09:20:37Z",
      "side": 1,
      "message": "\u003e Does Chromium already have a GN variable that we can use?\n\nI am not aware of anything like this in Chromium but maybe let\u0027s double check https://cs.chromium.org/chromium/src/base/logging.h. I would say it is ok to define a new WebRTC only variable + macro.",
      "parentUuid": "1ff5e50d_2aa37a13",
      "revId": "8649c8e55d4b8abe1ecb8119199d092d2d0157e6",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "79d5a6e0_588f1c1d",
        "filename": "rtc_base/logging.h",
        "patchSetId": 3
      },
      "lineNbr": 523,
      "author": {
        "id": 6337
      },
      "writtenOn": "2019-11-26T09:30:05Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1d08fde9_2bdd941b",
      "revId": "8649c8e55d4b8abe1ecb8119199d092d2d0157e6",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ed81e9db_3bd8b7d2",
        "filename": "rtc_base/logging.h",
        "patchSetId": 3
      },
      "lineNbr": 530,
      "author": {
        "id": 5126
      },
      "writtenOn": "2019-11-25T17:42:33Z",
      "side": 1,
      "message": "This will remove the code at the call sites. Could you also remove the code in logging.cc?",
      "revId": "8649c8e55d4b8abe1ecb8119199d092d2d0157e6",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "09affad5_2a43a576",
        "filename": "rtc_base/logging.h",
        "patchSetId": 3
      },
      "lineNbr": 530,
      "author": {
        "id": 6337
      },
      "writtenOn": "2019-11-26T09:30:05Z",
      "side": 1,
      "message": "I didn\u0027t fully understand how code will be removed on calling site, Because as I understand here the code will be in place and will be optimized out during compilation time. But if we will remove code from .cc file, will compilation be broken?",
      "parentUuid": "ed81e9db_3bd8b7d2",
      "revId": "8649c8e55d4b8abe1ecb8119199d092d2d0157e6",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5465527c_f2fabc21",
        "filename": "rtc_base/logging.h",
        "patchSetId": 3
      },
      "lineNbr": 530,
      "author": {
        "id": 5126
      },
      "writtenOn": "2019-11-26T09:47:08Z",
      "side": 1,
      "message": "\u003e I didn\u0027t fully understand how code will be removed on calling site, Because as I understand here the code will be in place and will be optimized out during compilation time.\n\nYes, that\u0027s exactly right---the code will be here but dead, and the compiler will end up not emitting any instructions for it (presumably).\n\n\u003e But if we will remove code from .cc file, will compilation be broken?\n\nIf a function is declared in .h and defined in .cc, the compiler will emit code for it even if no one calls it. The linker will in some cases omit it, but often not. What you can do is something like this:\n\n  #if RTC_LOG_ENABLED()\n  // .h; declare\n  // void Foo();\n  // .cc: define\n  // void Foo() { /* implementation goes here */ }\n  #else\n  // .h; declare + define\n  // inline void Foo() { /* do nothing; no one will call this function */ }\n  #endif",
      "parentUuid": "09affad5_2a43a576",
      "revId": "8649c8e55d4b8abe1ecb8119199d092d2d0157e6",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    }
  ]
}