{
  "comments": [
    {
      "key": {
        "uuid": "281f8e64_d1ab116e",
        "filename": "pc/peer_connection.cc",
        "patchSetId": 1
      },
      "lineNbr": 6782,
      "author": {
        "id": 5142
      },
      "writtenOn": "2019-09-12T17:02:42Z",
      "side": 1,
      "message": "this: Raw pointer used on a different thread later. I don\u0027t think this is safe.\nDo we need to wrap \"this\" in an rtc::scoped_refptr\u003c\u003e?\n\npacket_copy: Is the copy passed by value? Does this end up copying it twice? Internally the buffer is reference counted to it\u0027s probably a cheap copy, but is it possible to do std::move() to the lambda?",
      "revId": "2656160f6389d732135f76dc17801bbd7ead2018",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "549144e5_e143d06e",
        "filename": "pc/peer_connection.cc",
        "patchSetId": 1
      },
      "lineNbr": 6782,
      "author": {
        "id": 5531
      },
      "writtenOn": "2019-09-13T13:15:07Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "281f8e64_d1ab116e",
      "revId": "2656160f6389d732135f76dc17801bbd7ead2018",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1d13273f_4f798d4f",
        "filename": "pc/peer_connection.cc",
        "patchSetId": 1
      },
      "lineNbr": 6784,
      "author": {
        "id": 5142
      },
      "writtenOn": "2019-09-12T17:02:42Z",
      "side": 1,
      "message": "nit: Could std::move(packet_copy) here as well",
      "revId": "2656160f6389d732135f76dc17801bbd7ead2018",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6eaf5a08_74820032",
        "filename": "pc/peer_connection.cc",
        "patchSetId": 1
      },
      "lineNbr": 6784,
      "author": {
        "id": 5531
      },
      "writtenOn": "2019-09-13T13:15:07Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "1d13273f_4f798d4f",
      "revId": "2656160f6389d732135f76dc17801bbd7ead2018",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d2f846af_e1d197e9",
        "filename": "pc/peer_connection.cc",
        "patchSetId": 1
      },
      "lineNbr": 7452,
      "author": {
        "id": 5142
      },
      "writtenOn": "2019-09-12T17:02:42Z",
      "side": 1,
      "message": "Can we do one of these instead?\n\n1) Observer::OnTransportCreated/OnTransportDestroyed that handles connecting and disconnecting.\nThis scales if we want to register different callbacks for different transports, such has having different logic for audio or video or different m\u003d sections.\n\n2) Observer::OnRtcpPacketReceived that handles all packets. An argument should tell which transport the packet received on.",
      "revId": "2656160f6389d732135f76dc17801bbd7ead2018",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "50ba30ae_c23244c5",
        "filename": "pc/peer_connection.cc",
        "patchSetId": 1
      },
      "lineNbr": 7452,
      "author": {
        "id": 5531
      },
      "writtenOn": "2019-09-13T13:15:07Z",
      "side": 1,
      "message": "Did kind of 2, but without information of the source transport since we don\u0027t have a way to handle that currently. If we want to do something with the information later on we can add it then.",
      "parentUuid": "d2f846af_e1d197e9",
      "revId": "2656160f6389d732135f76dc17801bbd7ead2018",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b8db7459_a7f31fab",
        "filename": "pc/peer_connection.h",
        "patchSetId": 1
      },
      "lineNbr": 1345,
      "author": {
        "id": 5142
      },
      "writtenOn": "2019-09-12T17:02:42Z",
      "side": 1,
      "message": "Raw pointer usage: Add a comment explaining what we do to ensure this is safe.\n\nActually can we get rid of this in favor of new callbacks? I don\u0027t think it\u0027s the PC\u0027s job to keep track of transports and mids.",
      "revId": "2656160f6389d732135f76dc17801bbd7ead2018",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8ce964f9_953cc586",
        "filename": "pc/peer_connection.h",
        "patchSetId": 1
      },
      "lineNbr": 1345,
      "author": {
        "id": 5531
      },
      "writtenOn": "2019-09-13T13:15:07Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b8db7459_a7f31fab",
      "revId": "2656160f6389d732135f76dc17801bbd7ead2018",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "66c0c7de_2eac2eb3",
        "filename": "pc/peer_connection.h",
        "patchSetId": 1
      },
      "lineNbr": 1348,
      "author": {
        "id": 5142
      },
      "writtenOn": "2019-09-12T17:02:42Z",
      "side": 1,
      "message": "nit: transports_by_mids_, mids_by_transports_?",
      "revId": "2656160f6389d732135f76dc17801bbd7ead2018",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6e531b54_fde919c1",
        "filename": "pc/peer_connection.h",
        "patchSetId": 1
      },
      "lineNbr": 1348,
      "author": {
        "id": 5531
      },
      "writtenOn": "2019-09-13T13:15:07Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "66c0c7de_2eac2eb3",
      "revId": "2656160f6389d732135f76dc17801bbd7ead2018",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    }
  ]
}