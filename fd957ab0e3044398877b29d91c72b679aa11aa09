{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "f52a6922_34e0622f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 11
      },
      "lineNbr": 0,
      "author": {
        "id": 14134
      },
      "writtenOn": "2022-01-13T00:17:52Z",
      "side": 1,
      "message": "Looks good with one open question about concurrency in the capturer.  Looking forward to chatting more tomorrow!",
      "revId": "fd957ab0e3044398877b29d91c72b679aa11aa09",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8e5196ec_1d3b0e28",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 11
      },
      "lineNbr": 0,
      "author": {
        "id": 14134
      },
      "writtenOn": "2022-01-13T17:50:34Z",
      "side": 1,
      "message": "Tommi, Erik, any comments on this patch?  If I don\u0027t hear back in the next day I\u0027ll CQ+2 this.",
      "revId": "fd957ab0e3044398877b29d91c72b679aa11aa09",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "acd6fb7d_fa01e295",
        "filename": "modules/desktop_capture/linux/wayland/base_capturer_pipewire.cc",
        "patchSetId": 11
      },
      "lineNbr": 60,
      "author": {
        "id": 5508
      },
      "writtenOn": "2022-01-13T20:38:15Z",
      "side": 1,
      "message": "can these be constexpr or do you need to take a reference? I\u0027m assuming this doesn\u0027t require runtime initialization (global construction).",
      "revId": "fd957ab0e3044398877b29d91c72b679aa11aa09",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "44e44b2d_b43e6f7b",
        "filename": "modules/desktop_capture/linux/wayland/base_capturer_pipewire.cc",
        "patchSetId": 11
      },
      "lineNbr": 60,
      "author": {
        "id": 8046
      },
      "writtenOn": "2022-01-14T09:36:39Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "acd6fb7d_fa01e295",
      "revId": "fd957ab0e3044398877b29d91c72b679aa11aa09",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6dd7ec96_82cdcb85",
        "filename": "modules/desktop_capture/linux/wayland/base_capturer_pipewire.cc",
        "patchSetId": 11
      },
      "lineNbr": 170,
      "author": {
        "id": 5508
      },
      "writtenOn": "2022-01-13T20:38:15Z",
      "side": 1,
      "message": "pw_thread_loop* const loop_;\n\n(to make it clear that the value of this pointer will never change)",
      "revId": "fd957ab0e3044398877b29d91c72b679aa11aa09",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a9cfc2a7_e9e12e6d",
        "filename": "modules/desktop_capture/linux/wayland/base_capturer_pipewire.cc",
        "patchSetId": 11
      },
      "lineNbr": 170,
      "author": {
        "id": 8046
      },
      "writtenOn": "2022-01-14T09:36:39Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6dd7ec96_82cdcb85",
      "revId": "fd957ab0e3044398877b29d91c72b679aa11aa09",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9d8f2b72_dcf1ff7a",
        "filename": "modules/desktop_capture/linux/wayland/base_capturer_pipewire.cc",
        "patchSetId": 11
      },
      "lineNbr": 512,
      "author": {
        "id": 14134
      },
      "writtenOn": "2022-01-13T00:17:52Z",
      "side": 1,
      "message": "So it looks like the functions registered via pw_core_events_ and pw_stream_events_ are going to be invoked on the thread created by pw_thread_loop_start, when then call back on |this| and modify its state.\n\nThe documentation here [*] suggests that these callbacks are called with the thread loop lock held, but does there also need to be protection from concurrent access to the capturer state by the Chrome thread that created the capturer?\n\n[*] https://docs.pipewire.org/page_thread_loop.html",
      "revId": "fd957ab0e3044398877b29d91c72b679aa11aa09",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "86deb763_c91ec803",
        "filename": "modules/desktop_capture/linux/wayland/base_capturer_pipewire.cc",
        "patchSetId": 11
      },
      "lineNbr": 512,
      "author": {
        "id": 8046
      },
      "writtenOn": "2022-01-13T07:08:03Z",
      "side": 1,
      "message": "There is a lock for the current frame. We lock it when processing a new PipeWire buffer and we lock it again when Chrome asks this capturer to give us one.\n\n1) https://source.chromium.org/chromium/chromium/src/+/main:third_party/webrtc/modules/desktop_capture/linux/wayland/base_capturer_pipewire.cc;l\u003d630?q\u003dbase_capturer_p\u0026ss\u003dchromium\n\n2) https://source.chromium.org/chromium/chromium/src/+/main:third_party/webrtc/modules/desktop_capture/linux/wayland/base_capturer_pipewire.cc;l\u003d1090?q\u003dbase_capturer_p\u0026ss\u003dchromium",
      "parentUuid": "9d8f2b72_dcf1ff7a",
      "revId": "fd957ab0e3044398877b29d91c72b679aa11aa09",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "817dd2f2_45e03ed9",
        "filename": "modules/desktop_capture/linux/wayland/base_capturer_pipewire.cc",
        "patchSetId": 11
      },
      "lineNbr": 512,
      "author": {
        "id": 14134
      },
      "writtenOn": "2022-01-13T16:53:20Z",
      "side": 1,
      "message": "Makes sense, but that lock isn\u0027t used for the PW callbacks I mentioned above.",
      "parentUuid": "86deb763_c91ec803",
      "revId": "fd957ab0e3044398877b29d91c72b679aa11aa09",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cdedc125_4e7dc13d",
        "filename": "modules/desktop_capture/linux/wayland/base_capturer_pipewire.h",
        "patchSetId": 11
      },
      "lineNbr": 57,
      "author": {
        "id": 5508
      },
      "writtenOn": "2022-01-13T20:38:15Z",
      "side": 1,
      "message": "fyi - I think you could use std::tie() to do this.",
      "revId": "fd957ab0e3044398877b29d91c72b679aa11aa09",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6064253b_bbaa9820",
        "filename": "modules/desktop_capture/linux/wayland/base_capturer_pipewire.h",
        "patchSetId": 11
      },
      "lineNbr": 57,
      "author": {
        "id": 8046
      },
      "writtenOn": "2022-01-14T09:36:39Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "cdedc125_4e7dc13d",
      "revId": "fd957ab0e3044398877b29d91c72b679aa11aa09",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "07ba1c4e_737fdbc1",
        "filename": "modules/desktop_capture/linux/wayland/egl_dmabuf.cc",
        "patchSetId": 11
      },
      "lineNbr": 509,
      "author": {
        "id": 5508
      },
      "writtenOn": "2022-01-13T20:38:15Z",
      "side": 1,
      "message": "nit: since both branches of the if/else pair have return statements, suggest to just have a single return statement at the same scope that the if/else is at now:\n\n  return has_image_dma_buf_import_ext_ ?\n      {DRM_FORMAT_MOD_INVALID} : {};",
      "revId": "fd957ab0e3044398877b29d91c72b679aa11aa09",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d6d180c1_31d34453",
        "filename": "modules/desktop_capture/linux/wayland/egl_dmabuf.cc",
        "patchSetId": 11
      },
      "lineNbr": 509,
      "author": {
        "id": 8046
      },
      "writtenOn": "2022-01-14T09:36:39Z",
      "side": 1,
      "message": "error: initializer list cannot be used on the right hand side of operator \u0027?\u0027",
      "parentUuid": "07ba1c4e_737fdbc1",
      "revId": "fd957ab0e3044398877b29d91c72b679aa11aa09",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d0830a80_f62b7258",
        "filename": "modules/desktop_capture/linux/wayland/egl_dmabuf.cc",
        "patchSetId": 11
      },
      "lineNbr": 509,
      "author": {
        "id": 6720
      },
      "writtenOn": "2022-01-14T15:03:59Z",
      "side": 1,
      "message": "ah, you\u0027d have to construct a std::vector explicitly. That shouldn\u0027t be a problem though (and is what happens anyway).",
      "parentUuid": "d6d180c1_31d34453",
      "revId": "fd957ab0e3044398877b29d91c72b679aa11aa09",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a134c7b8_21b698e1",
        "filename": "modules/desktop_capture/linux/wayland/pipewire.sigs",
        "patchSetId": 11
      },
      "lineNbr": 42,
      "author": {
        "id": 5508
      },
      "writtenOn": "2022-01-13T20:38:15Z",
      "side": 1,
      "message": "nit: these should be `pw_thread_loop* loop`",
      "revId": "fd957ab0e3044398877b29d91c72b679aa11aa09",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "92101ef0_f7b33ac1",
        "filename": "modules/desktop_capture/linux/wayland/pipewire.sigs",
        "patchSetId": 11
      },
      "lineNbr": 42,
      "author": {
        "id": 8046
      },
      "writtenOn": "2022-01-14T09:36:39Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a134c7b8_21b698e1",
      "revId": "fd957ab0e3044398877b29d91c72b679aa11aa09",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    }
  ]
}