{
  "comments": [
    {
      "key": {
        "uuid": "a6dc2f60_34700a1e",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 29,
      "author": {
        "id": 5087
      },
      "writtenOn": "2020-07-17T07:48:07Z",
      "side": 1,
      "message": "deadbeef@ are you planning a fresh roll?",
      "range": {
        "startLine": 27,
        "startChar": 0,
        "endLine": 29,
        "endChar": 67
      },
      "revId": "820e40e539f2339eec37b953382d73811ee732c7",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8ca1ad6f_58e6fb29",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 29,
      "author": {
        "id": 5053
      },
      "writtenOn": "2020-07-17T19:12:39Z",
      "side": 1,
      "message": "Of libsrtp? I\u0027m not sure if I\u0027ve updated it before but I can. The last time it was updated it was to a versioned release (2.2.0), and the referenced pull request isn\u0027t in the last release (2.3.0). Shall I update to 2.3.0 and then cherry pick the pull request?",
      "parentUuid": "a6dc2f60_34700a1e",
      "range": {
        "startLine": 27,
        "startChar": 0,
        "endLine": 29,
        "endChar": 67
      },
      "revId": "820e40e539f2339eec37b953382d73811ee732c7",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "12048557_c7272ffd",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 29,
      "author": {
        "id": 5087
      },
      "writtenOn": "2020-07-20T07:38:16Z",
      "side": 1,
      "message": "\u003e Of libsrtp? I\u0027m not sure if I\u0027ve updated it before but I can. The last time it was updated it was to a versioned release (2.2.0), and the referenced pull request isn\u0027t in the last release (2.3.0). Shall I update to 2.3.0 and then cherry pick the pull request?\n\nAh, I was too happy trigger and I\u0027ve read libsctp. :) \n\nI can take care of this one as well but I would try to bump the revision to HEAD instead of CP the PR. Even if the PR is really small, having third_party deps cherry picked is not a good long term solution. So I propose to do a full roll. I will reach out to you later.",
      "parentUuid": "8ca1ad6f_58e6fb29",
      "range": {
        "startLine": 27,
        "startChar": 0,
        "endLine": 29,
        "endChar": 67
      },
      "revId": "820e40e539f2339eec37b953382d73811ee732c7",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b09e5105_53564bb7",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 8882
      },
      "writtenOn": "2020-07-14T16:11:15Z",
      "side": 1,
      "message": "Adding some familiar faces.",
      "revId": "820e40e539f2339eec37b953382d73811ee732c7",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ee7c8ff6_cd5b6c47",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 12216
      },
      "writtenOn": "2020-07-15T13:26:48Z",
      "side": 1,
      "message": "Adding a few more people who could review",
      "revId": "820e40e539f2339eec37b953382d73811ee732c7",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "93cee8b7_cc3ac11c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5508
      },
      "writtenOn": "2020-07-15T20:38:51Z",
      "side": 1,
      "message": "Thanks Huib - adding terelius@ to the list of reviewers and juberti to cc.\n\nBjorn - can you look into the libsrtp update too? mbonadei@ as cc on that too.",
      "revId": "820e40e539f2339eec37b953382d73811ee732c7",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "da8191d4_9c9300e2",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5053
      },
      "writtenOn": "2020-07-16T22:37:12Z",
      "side": 1,
      "message": "api/pc code looks good aside from one minor comment.",
      "revId": "820e40e539f2339eec37b953382d73811ee732c7",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bc0b1bc4_c08e1ec2",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5634
      },
      "writtenOn": "2020-07-24T14:22:33Z",
      "side": 1,
      "message": "The bots found that there is something troubling on Linux, apparently. Lennart, can you check that?\n",
      "revId": "820e40e539f2339eec37b953382d73811ee732c7",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2ce1f567_1e63e86f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 8393
      },
      "writtenOn": "2020-07-24T20:46:57Z",
      "side": 1,
      "message": "How does this change relate to a\u003dextmap-allow-mixed?",
      "revId": "820e40e539f2339eec37b953382d73811ee732c7",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ad6edd52_78061611",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 8882
      },
      "writtenOn": "2020-07-27T08:41:58Z",
      "side": 1,
      "message": "There\u0027s no 1:1 relationship here. Rather, the amount of extensions libwebrtc uses by default multiplied by two due to each of them now having an encrypted variant runs into issues when not using a\u003dextmap-allow-mixed.",
      "parentUuid": "2ce1f567_1e63e86f",
      "revId": "820e40e539f2339eec37b953382d73811ee732c7",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "123c0cf3_5ad01847",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 8882
      },
      "writtenOn": "2020-07-27T08:41:58Z",
      "side": 1,
      "message": "Mh, where? Cant\u0027 find it.",
      "parentUuid": "bc0b1bc4_c08e1ec2",
      "revId": "820e40e539f2339eec37b953382d73811ee732c7",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8abc1ead_0e5b121a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5634
      },
      "writtenOn": "2020-07-27T08:52:27Z",
      "side": 1,
      "message": "https://ci.chromium.org/p/webrtc/builders/try/linux_rel/37893? for example.\n\nIf you view the CL in Gerritt, you should see a bar of red and green boxes - the red ones are failures. Click on the box to get to the errors.",
      "parentUuid": "123c0cf3_5ad01847",
      "revId": "820e40e539f2339eec37b953382d73811ee732c7",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "148f47fa_2892db05",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5634
      },
      "writtenOn": "2020-07-27T08:52:27Z",
      "side": 1,
      "message": "How to see the failing bots...",
      "revId": "820e40e539f2339eec37b953382d73811ee732c7",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cbc8c495_948d7fbb",
        "filename": "api/rtp_parameters.cc",
        "patchSetId": 2
      },
      "lineNbr": 184,
      "author": {
        "id": 5053
      },
      "writtenOn": "2020-07-16T22:39:05Z",
      "side": 1,
      "message": "Would be good for someone more familiar with RTP/media stack to confirm it\u0027s okay to add these.",
      "revId": "820e40e539f2339eec37b953382d73811ee732c7",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "955b0bf0_3cb52ba5",
        "filename": "api/rtp_parameters.cc",
        "patchSetId": 2
      },
      "lineNbr": 184,
      "author": {
        "id": 5019
      },
      "writtenOn": "2020-07-21T08:38:03Z",
      "side": 1,
      "message": "Yes, it should be fine to encrypt those.\n(As I understand this is about P2P encryption, so when SFU is involved, it still can access and add/remove/modify these extensions)",
      "parentUuid": "cbc8c495_948d7fbb",
      "revId": "820e40e539f2339eec37b953382d73811ee732c7",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a3a85493_ce5d3c6c",
        "filename": "api/rtp_parameters.cc",
        "patchSetId": 2
      },
      "lineNbr": 184,
      "author": {
        "id": 5150
      },
      "writtenOn": "2020-07-21T10:22:45Z",
      "side": 1,
      "message": "Let\u0027s double check that the video timing header extension isn\u0027t modified in Chrome like the AbsSendTime extension. +ilnik",
      "parentUuid": "955b0bf0_3cb52ba5",
      "revId": "820e40e539f2339eec37b953382d73811ee732c7",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d7c49f61_b64c4d3d",
        "filename": "api/rtp_parameters.cc",
        "patchSetId": 2
      },
      "lineNbr": 184,
      "author": {
        "id": 5117
      },
      "writtenOn": "2020-07-21T11:12:36Z",
      "side": 1,
      "message": "In chrome it\u0027s only modified in pacer here:\nhttps://source.chromium.org/chromium/chromium/src/+/master:third_party/webrtc/modules/rtp_rtcp/source/rtp_sender_egress.cc;l\u003d228;drc\u003d918c868f6c9f8c79b68f77cf82400c21a0e741c6?originalUrl\u003dhttps:%2F%2Fcs.chromium.org%2F\n\nI believe this is before the encryption.\n\nAbsSendTime is also modified here, but it\u0027s also updated way after the pacer, that\u0027s why it can\u0027t be encrypted.\n\nUpdateRtpAbsSendTimeExtension rewrites it:\nhttps://source.chromium.org/chromium/chromium/src/+/master:third_party/webrtc/media/base/rtp_utils.cc;l\u003d393;drc\u003db3d2b5bc696440cb20bea823f2356d7c90bf7751?originalUrl\u003dhttps:%2F%2Fcs.chromium.org%2F\n\nIt is called from ApplyPacketOptions, which is called in network threads close to sockets:\nhttps://source.chromium.org/chromium/chromium/src/+/master:services/network/p2p/socket_tcp.cc;l\u003d454;drc\u003db3d2b5bc696440cb20bea823f2356d7c90bf7751?originalUrl\u003dhttps:%2F%2Fcs.chromium.org%2F\n\nThis is NOT the case for VideoTimingExtension.",
      "parentUuid": "a3a85493_ce5d3c6c",
      "revId": "820e40e539f2339eec37b953382d73811ee732c7",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3c68d5c5_f4ce3282",
        "filename": "api/rtp_parameters.cc",
        "patchSetId": 2
      },
      "lineNbr": 184,
      "author": {
        "id": 8393
      },
      "writtenOn": "2020-07-24T20:46:57Z",
      "side": 1,
      "message": "I don\u0027t understand these comments. Since auth is applied to the entire packet, doesn\u0027t that mean all extensions can\u0027t be changed later?\n\nAlso, if some can actually not be encrypted, why not just filter them out rather than having an allow list that will have to continually be updated?",
      "parentUuid": "d7c49f61_b64c4d3d",
      "revId": "820e40e539f2339eec37b953382d73811ee732c7",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "769acf27_b5772d5c",
        "filename": "api/rtp_parameters.cc",
        "patchSetId": 2
      },
      "lineNbr": 184,
      "author": {
        "id": 5117
      },
      "writtenOn": "2020-07-27T08:58:07Z",
      "side": 1,
      "message": "After the extension is encrypted, it can\u0027t be updated. AbsSendTime is example of one which is modified at the point after the encryption is applied. Most of the extensions are written at the packetisation phase, before the encryption, and are never modified. There\u0027re few which are modified by the pacer, but it happens before the encryption.\n\nI agree that having a block-list of non-encryptable extensions would be a better approach.",
      "parentUuid": "3c68d5c5_f4ce3282",
      "revId": "820e40e539f2339eec37b953382d73811ee732c7",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "88fb6fa5_75af74f5",
        "filename": "api/rtp_parameters.h",
        "patchSetId": 2
      },
      "lineNbr": 252,
      "author": {
        "id": 8393
      },
      "writtenOn": "2020-07-24T20:46:57Z",
      "side": 1,
      "message": "Is there a reason we would want this policy?",
      "revId": "820e40e539f2339eec37b953382d73811ee732c7",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a948ab6d_61f2e636",
        "filename": "api/rtp_parameters.h",
        "patchSetId": 2
      },
      "lineNbr": 252,
      "author": {
        "id": 8882
      },
      "writtenOn": "2020-07-27T08:41:58Z",
      "side": 1,
      "message": "It is used when RTP header extension encryption is not activated (`enable_encrypted_rtp_header_extensions \u003d false`) which is the default atm. I\u0027m happy if we can invert that behaviour but I assume the option to turn it off should still exist?",
      "parentUuid": "88fb6fa5_75af74f5",
      "revId": "820e40e539f2339eec37b953382d73811ee732c7",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6774ad40_9622a35f",
        "filename": "api/rtp_parameters.h",
        "patchSetId": 2
      },
      "lineNbr": 254,
      "author": {
        "id": 5053
      },
      "writtenOn": "2020-07-16T22:37:12Z",
      "side": 1,
      "message": "nit: comment formatting",
      "revId": "820e40e539f2339eec37b953382d73811ee732c7",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9908514f_a237942c",
        "filename": "api/rtp_parameters.h",
        "patchSetId": 2
      },
      "lineNbr": 257,
      "author": {
        "id": 8393
      },
      "writtenOn": "2020-07-24T20:46:57Z",
      "side": 1,
      "message": "Should we also have a kRequireEncryptedExtension value?",
      "revId": "820e40e539f2339eec37b953382d73811ee732c7",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d2ea7309_21619d0e",
        "filename": "api/rtp_parameters.h",
        "patchSetId": 2
      },
      "lineNbr": 257,
      "author": {
        "id": 8882
      },
      "writtenOn": "2020-07-27T08:41:58Z",
      "side": 1,
      "message": "Interesting. There\u0027s no API for that right now but exposing this policy instead of the boolean `enable_encrypted_rtp_header_extensions` would allow for it. I agree this seems like a good addition. Not entirely sure it should be added in this CL though.",
      "parentUuid": "9908514f_a237942c",
      "revId": "820e40e539f2339eec37b953382d73811ee732c7",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fb724e9b_69e2c62e",
        "filename": "api/rtp_parameters_unittest.cc",
        "patchSetId": 2
      },
      "lineNbr": 56,
      "author": {
        "id": 5053
      },
      "writtenOn": "2020-07-16T22:37:12Z",
      "side": 1,
      "message": "nit: Here and below, may want to put the encrypted extension last to ensure that DeduplicateHeaderExtensions/FindHeaderExtensionByUri doesn\u0027t just return the first uri match.",
      "revId": "820e40e539f2339eec37b953382d73811ee732c7",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "89eb75f3_3aafaca9",
        "filename": "pc/session_description.h",
        "patchSetId": 2
      },
      "lineNbr": 138,
      "author": {
        "id": 8393
      },
      "writtenOn": "2020-07-24T20:46:57Z",
      "side": 1,
      "message": "explain why URIs are not guaranteed to be unique",
      "range": {
        "startLine": 138,
        "startChar": 17,
        "endLine": 138,
        "endChar": 23
      },
      "revId": "820e40e539f2339eec37b953382d73811ee732c7",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7a15d0e4_9201f368",
        "filename": "pc/session_description.h",
        "patchSetId": 2
      },
      "lineNbr": 138,
      "author": {
        "id": 8882
      },
      "writtenOn": "2020-07-27T08:41:58Z",
      "side": 1,
      "message": "In the comment you mean? The answer is: The same URI can appear twice, one of it encrypted and one of it non-encrypted.",
      "parentUuid": "89eb75f3_3aafaca9",
      "range": {
        "startLine": 138,
        "startChar": 17,
        "endLine": 138,
        "endChar": 23
      },
      "revId": "820e40e539f2339eec37b953382d73811ee732c7",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "34a914e5_1ec46a93",
        "filename": "pc/webrtc_sdp.cc",
        "patchSetId": 2
      },
      "lineNbr": 1306,
      "author": {
        "id": 5053
      },
      "writtenOn": "2020-07-16T22:37:12Z",
      "side": 1,
      "message": "If possible, would prefer doing this filtering in media_session. There are some exceptions but our general policy is to just do parsing/encoding here and leave business logic in media_session.",
      "revId": "820e40e539f2339eec37b953382d73811ee732c7",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bcb8a592_496c4494",
        "filename": "pc/webrtc_sdp.cc",
        "patchSetId": 2
      },
      "lineNbr": 1306,
      "author": {
        "id": 8882
      },
      "writtenOn": "2020-07-20T07:57:28Z",
      "side": 1,
      "message": "Can you give me some pointers on where to move it to?",
      "parentUuid": "34a914e5_1ec46a93",
      "revId": "820e40e539f2339eec37b953382d73811ee732c7",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8ca62ade_508f82a2",
        "filename": "pc/webrtc_sdp.cc",
        "patchSetId": 2
      },
      "lineNbr": 1306,
      "author": {
        "id": 5053
      },
      "writtenOn": "2020-07-20T22:04:49Z",
      "side": 1,
      "message": "I think it would be NegotiateRtpHeaderExtensions; when doing this:\n\n    const webrtc::RtpExtension* theirs \u003d\n        webrtc::RtpExtension::FindHeaderExtensionByUri(offered_extensions,\n                                                       ours.uri, filter);\n\nIt should only use the \"prefer encryption\" filter if we support encryption for that particular extension.",
      "parentUuid": "bcb8a592_496c4494",
      "revId": "820e40e539f2339eec37b953382d73811ee732c7",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    }
  ]
}