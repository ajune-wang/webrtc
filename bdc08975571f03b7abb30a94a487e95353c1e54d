{
  "comments": [
    {
      "key": {
        "uuid": "3f9b3606_c40bfc38",
        "filename": "modules/rtp_rtcp/source/rtp_rtcp_impl.cc",
        "patchSetId": 3
      },
      "lineNbr": 702,
      "author": {
        "id": 5531
      },
      "writtenOn": "2020-05-05T07:25:34Z",
      "side": 1,
      "message": "You probably want to keep the cast here and above, it adds a DCHECK",
      "range": {
        "startLine": 702,
        "startChar": 34,
        "endLine": 702,
        "endChar": 39
      },
      "revId": "bdc08975571f03b7abb30a94a487e95353c1e54d",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fc088b6b_fb56ade4",
        "filename": "modules/rtp_rtcp/source/rtp_rtcp_impl.cc",
        "patchSetId": 3
      },
      "lineNbr": 702,
      "author": {
        "id": 5524
      },
      "writtenOn": "2020-05-10T15:19:03Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3f9b3606_c40bfc38",
      "range": {
        "startLine": 702,
        "startChar": 34,
        "endLine": 702,
        "endChar": 39
      },
      "revId": "bdc08975571f03b7abb30a94a487e95353c1e54d",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ea7eb8cb_1062d0f9",
        "filename": "modules/rtp_rtcp/source/rtp_rtcp_impl.cc",
        "patchSetId": 3
      },
      "lineNbr": 804,
      "author": {
        "id": 5531
      },
      "writtenOn": "2020-05-05T07:25:34Z",
      "side": 1,
      "message": "This might seem better, but depending on the rate calculation used might not actually be equivalent to keeping a separate total rate. However, I guess that if we are moving away from the rate stats and to application based rate calculation, it might not matter that much. In that case I think it would be producent to document that choice here.\n\nMaybe something like:\n// This is not guaranteed to be equivalent to a global rate calculation, but this rate statistic is deprecated so we accept that approximation here.",
      "range": {
        "startLine": 802,
        "startChar": 0,
        "endLine": 804,
        "endChar": 3
      },
      "revId": "bdc08975571f03b7abb30a94a487e95353c1e54d",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d576beda_feea2282",
        "filename": "modules/rtp_rtcp/source/rtp_rtcp_impl.cc",
        "patchSetId": 3
      },
      "lineNbr": 804,
      "author": {
        "id": 5524
      },
      "writtenOn": "2020-05-10T15:19:03Z",
      "side": 1,
      "message": "Based on how the rate statics are implemented, I don\u0027t really see how we could end up with a different value now. For each type we have a sliding window kept in sync, and within that window we check how many bytes have been sent. Since the window is one second and we check for bits per second, we don\u0027t truncate the rates either.",
      "parentUuid": "ea7eb8cb_1062d0f9",
      "range": {
        "startLine": 802,
        "startChar": 0,
        "endLine": 804,
        "endChar": 3
      },
      "revId": "bdc08975571f03b7abb30a94a487e95353c1e54d",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cca20470_59041016",
        "filename": "modules/rtp_rtcp/source/rtp_sender_egress.cc",
        "patchSetId": 3
      },
      "lineNbr": 113,
      "author": {
        "id": 5019
      },
      "writtenOn": "2020-05-05T08:57:25Z",
      "side": 1,
      "message": "or\nabsl::c_accumulate(bitrates, DataRate::Zero()\n\nto stress full container is accumlated and make it a bit shorter.",
      "range": {
        "startLine": 112,
        "startChar": 6,
        "endLine": 113,
        "endChar": 44
      },
      "revId": "bdc08975571f03b7abb30a94a487e95353c1e54d",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "97f657cb_04457a05",
        "filename": "modules/rtp_rtcp/source/rtp_sender_egress.cc",
        "patchSetId": 3
      },
      "lineNbr": 115,
      "author": {
        "id": 5019
      },
      "writtenOn": "2020-05-05T08:57:25Z",
      "side": 1,
      "message": "take by const reference (no need to copy that pair)\n(though if you switch to some kind of vector, then full lambda wouldn\u0027t be needed)",
      "range": {
        "startLine": 115,
        "startChar": 14,
        "endLine": 115,
        "endChar": 63
      },
      "revId": "bdc08975571f03b7abb30a94a487e95353c1e54d",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "23082c88_6a1fb192",
        "filename": "modules/rtp_rtcp/source/rtp_sender_egress.cc",
        "patchSetId": 3
      },
      "lineNbr": 115,
      "author": {
        "id": 5524
      },
      "writtenOn": "2020-05-10T15:19:03Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "97f657cb_04457a05",
      "range": {
        "startLine": 115,
        "startChar": 14,
        "endLine": 115,
        "endChar": 63
      },
      "revId": "bdc08975571f03b7abb30a94a487e95353c1e54d",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4b5588d4_9f53972d",
        "filename": "modules/rtp_rtcp/source/rtp_sender_egress.cc",
        "patchSetId": 3
      },
      "lineNbr": 125,
      "author": {
        "id": 5019
      },
      "writtenOn": "2020-05-05T08:57:25Z",
      "side": 1,
      "message": "can it be absent?",
      "range": {
        "startLine": 125,
        "startChar": 17,
        "endLine": 125,
        "endChar": 58
      },
      "revId": "bdc08975571f03b7abb30a94a487e95353c1e54d",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ae762083_6c92dfc0",
        "filename": "modules/rtp_rtcp/source/rtp_sender_egress.cc",
        "patchSetId": 3
      },
      "lineNbr": 125,
      "author": {
        "id": 5524
      },
      "writtenOn": "2020-05-10T15:19:03Z",
      "side": 1,
      "message": "No.",
      "parentUuid": "4b5588d4_9f53972d",
      "range": {
        "startLine": 125,
        "startChar": 17,
        "endLine": 125,
        "endChar": 58
      },
      "revId": "bdc08975571f03b7abb30a94a487e95353c1e54d",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "35acec3a_1ee1c27d",
        "filename": "modules/rtp_rtcp/source/rtp_sender_egress.cc",
        "patchSetId": 3
      },
      "lineNbr": 493,
      "author": {
        "id": 5019
      },
      "writtenOn": "2020-05-05T08:57:25Z",
      "side": 1,
      "message": "RTC_CHECK\n(to crash nicely when it is not true, instead of accessing memory one shouldn\u0027t)",
      "range": {
        "startLine": 493,
        "startChar": 6,
        "endLine": 493,
        "endChar": 7
      },
      "revId": "bdc08975571f03b7abb30a94a487e95353c1e54d",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c43651c5_26d6b853",
        "filename": "modules/rtp_rtcp/source/rtp_sender_egress.cc",
        "patchSetId": 3
      },
      "lineNbr": 493,
      "author": {
        "id": 5524
      },
      "writtenOn": "2020-05-10T15:19:03Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "35acec3a_1ee1c27d",
      "range": {
        "startLine": 493,
        "startChar": 6,
        "endLine": 493,
        "endChar": 7
      },
      "revId": "bdc08975571f03b7abb30a94a487e95353c1e54d",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6a57d341_89de9667",
        "filename": "modules/rtp_rtcp/source/rtp_sender_egress.h",
        "patchSetId": 3
      },
      "lineNbr": 60,
      "author": {
        "id": 5531
      },
      "writtenOn": "2020-05-05T07:25:34Z",
      "side": 1,
      "message": "std::map is quite inefficient as a data type for small data sets and it provides an order that is not obviously meaningful here. I\u0027d consider using unordered_map as a way to signal that the media types don\u0027t have any inherent ordering.\n\nIn this case though, if the usage below is representative there\u0027s two cases, either we are looking for the sum, or we want just one of the metrics. In that case I\u0027d suggest two separate methods, one returning the sum and one that takes the media type as argument.\n\nThe reason why we would want to use a map (or possibly vector\u003cpair\u003e) would be if we want to combine several sender egress rates after the fact.",
      "range": {
        "startLine": 60,
        "startChar": 1,
        "endLine": 60,
        "endChar": 40
      },
      "revId": "bdc08975571f03b7abb30a94a487e95353c1e54d",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4b95ab23_90351856",
        "filename": "modules/rtp_rtcp/source/rtp_sender_egress.h",
        "patchSetId": 3
      },
      "lineNbr": 60,
      "author": {
        "id": 5019
      },
      "writtenOn": "2020-05-05T08:57:25Z",
      "side": 1,
      "message": "+1",
      "parentUuid": "6a57d341_89de9667",
      "range": {
        "startLine": 60,
        "startChar": 1,
        "endLine": 60,
        "endChar": 40
      },
      "revId": "bdc08975571f03b7abb30a94a487e95353c1e54d",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "66b82c9b_40c50fc7",
        "filename": "modules/rtp_rtcp/source/rtp_sender_egress.h",
        "patchSetId": 3
      },
      "lineNbr": 60,
      "author": {
        "id": 5524
      },
      "writtenOn": "2020-05-05T13:13:28Z",
      "side": 1,
      "message": "Upcoming changes will poll different stats, and I didn\u0027t want to add 4 methods or use one of those old-timey-looking GetStats(out1*, out2*, out3*, out4*). And yes - combining them into a total will happen too.\n\nI liked map mostly because it\u0027s intuitive how to use. Originally used an absl::flat_hash_map but got an error that this can\u0027t be used in rtp_rtcp.h interface. Not sure which ones are allowed?\nI tried looking for a map implementation where the key-set is fixed as construction time, but couldn\u0027t find one. Do you know of one?",
      "parentUuid": "4b95ab23_90351856",
      "range": {
        "startLine": 60,
        "startChar": 1,
        "endLine": 60,
        "endChar": 40
      },
      "revId": "bdc08975571f03b7abb30a94a487e95353c1e54d",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "54e8a057_e4375efc",
        "filename": "modules/rtp_rtcp/source/rtp_sender_egress.h",
        "patchSetId": 3
      },
      "lineNbr": 60,
      "author": {
        "id": 5019
      },
      "writtenOn": "2020-05-05T13:59:21Z",
      "side": 1,
      "message": "Yep, absl::flat_hash_map is not in the allowed absl types list because no one yet showed enough evidence its performance outweighs binary cost.\n\nNo, I\u0027m not aware of such map. The closest type I know is a flat_map \n(https://chromium.googlesource.com/chromium/src/+/master/base/containers/flat_map.h) but it is not available in webrtc either.\n\nbut in this cases where keys are numbers in range [0, 4] the best container seems to be std::array\u003cDataRate, RtpPacketMediaType::kCount\u003e\n\nwith a small modification to the enum:\nenum RtpPacketMediaType : int {\n  k...Audio \u003d 0,\n  ...\n  k...Fec,\n  kCount  // must be last, not actual enum value.\n};\n\n\nIt might be possible to wrap such pattern into helper class, but that might be over complication:\n\ntemplate\u003ctypename Value, typename Enum\u003e\nclass EnumMap {\n  static_assert(std::is_enum_v\u003cEnum\u003e, \"\");\n  using Storage \u003d std::array\u003cValue, Enum::kCount\u003e;\n public:\n  using mapped_type \u003d Storage::value_type;\n  using value_type \u003d std::pair\u003cconst Enum, Storage::value_type\u003e;\n  class iterator {\n   public:\n    value_type\u0026 operator*() { return ???; }\n   private: ???\n  };\n\n  Value\u0026 operator[](Enum index) { return storage_[index]; }\n  const Value\u0026 operator[](Enum index) const { return storage_[index]; }\n  iterator begin() { return ???; }\n  const_iterator begin() const { return ??? ;}\n  iterator end() { return ???; }\n  // etc.\n private:\n  Storage storage_;\n}",
      "parentUuid": "66b82c9b_40c50fc7",
      "range": {
        "startLine": 60,
        "startChar": 1,
        "endLine": 60,
        "endChar": 40
      },
      "revId": "bdc08975571f03b7abb30a94a487e95353c1e54d",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c459dba7_43c4b20c",
        "filename": "modules/rtp_rtcp/source/rtp_sender_egress.h",
        "patchSetId": 3
      },
      "lineNbr": 60,
      "author": {
        "id": 5019
      },
      "writtenOn": "2020-05-05T14:01:50Z",
      "side": 1,
      "message": "Alternative (easier to use, more boilplate code to write) is to introduce a new type:\nstruct Bitrates {\n  DataRate video;\n  DataRate audio;\n  ...\n};\nwith a free helper function:\nDataRate TotalRate(const Bitrates\u0026 bitrates);",
      "parentUuid": "54e8a057_e4375efc",
      "range": {
        "startLine": 60,
        "startChar": 1,
        "endLine": 60,
        "endChar": 40
      },
      "revId": "bdc08975571f03b7abb30a94a487e95353c1e54d",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e2c5531a_bc84fb2e",
        "filename": "modules/rtp_rtcp/source/rtp_sender_egress.h",
        "patchSetId": 3
      },
      "lineNbr": 60,
      "author": {
        "id": 5524
      },
      "writtenOn": "2020-05-10T15:19:03Z",
      "side": 1,
      "message": "I added a helper class RtpSendRates.\nptal",
      "parentUuid": "c459dba7_43c4b20c",
      "range": {
        "startLine": 60,
        "startChar": 1,
        "endLine": 60,
        "endChar": 40
      },
      "revId": "bdc08975571f03b7abb30a94a487e95353c1e54d",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4a91c5a8_3a6c416f",
        "filename": "modules/rtp_rtcp/source/rtp_sender_egress.h",
        "patchSetId": 3
      },
      "lineNbr": 134,
      "author": {
        "id": 5019
      },
      "writtenOn": "2020-05-05T08:57:25Z",
      "side": 1,
      "message": "map where key is an integer in a dense range [0, x) probably better represented as a vector (std::array might be even better since number of elements never changes)",
      "range": {
        "startLine": 134,
        "startChar": 2,
        "endLine": 134,
        "endChar": 29
      },
      "revId": "bdc08975571f03b7abb30a94a487e95353c1e54d",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    }
  ]
}