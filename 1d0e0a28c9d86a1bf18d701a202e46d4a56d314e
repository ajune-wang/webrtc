{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "78d5e753_3ef11c11",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 13
      },
      "lineNbr": 0,
      "author": {
        "id": 5634
      },
      "writtenOn": "2022-01-13T13:12:59Z",
      "side": 1,
      "message": "This is a big change, so leaving it open forever is going to cause more work.\nIs it ready? Taylor?\n",
      "revId": "1d0e0a28c9d86a1bf18d701a202e46d4a56d314e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c2b88c67_5b127124",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 13
      },
      "lineNbr": 0,
      "author": {
        "id": 5234
      },
      "writtenOn": "2022-01-13T13:20:09Z",
      "side": 1,
      "message": "Once we can agree that the design and end result is reasonable, we need to have a plan on how to get there. Maybe we can break it down like\n\n1. Add new interface classes.\n\n2. Implement new ListenSocket in the various socket servers.\n\n3. Convert one part at a time to use new interfaces.\n\n4. Delete old interface.\n\nAnd since I can\u0027t allocate that much time for it, it would be good if someone more could commit to drive it to conclusion in a reasonable time.",
      "parentUuid": "78d5e753_3ef11c11",
      "revId": "1d0e0a28c9d86a1bf18d701a202e46d4a56d314e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fc72b608_eaa313a5",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 13
      },
      "lineNbr": 0,
      "author": {
        "id": 5053
      },
      "writtenOn": "2022-01-13T23:45:14Z",
      "side": 1,
      "message": "Sorry, this slipped through the cracks during the holidays.\n\nThe only real remaining issue I see is the additional mutex acquisitions. The new class isn\u0027t doing anything that the existing implementation wasn\u0027t already, so I\u0027d be inclined to get rid of the mutexes and leave a todo to enforce thread safety.\n\nI\u0027m quite sure the WebRTC stack will always use the socket server and it sockets on its parent thread, so it\u0027s a nonissue for us. Maybe we can start enforcing this; we could always add DCHECKs and see if anyone complains.",
      "revId": "1d0e0a28c9d86a1bf18d701a202e46d4a56d314e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "87410864_e0a87747",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 13
      },
      "lineNbr": 0,
      "author": {
        "id": 5634
      },
      "writtenOn": "2022-01-14T06:24:11Z",
      "side": 1,
      "message": "About mutex..",
      "revId": "1d0e0a28c9d86a1bf18d701a202e46d4a56d314e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8f559699_ad9915bd",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 13
      },
      "lineNbr": 0,
      "author": {
        "id": 5634
      },
      "writtenOn": "2022-01-14T06:24:11Z",
      "side": 1,
      "message": "Non-checked structural thinking:\n\nIf the assumption is true, we can make the whole structure guarded by a SequenceChecker (which doesn\u0027t have a performance penalty in non-Debug builds).\nIf necessary (if there are off-thread clients), we can offer a wrapper class that does threadjumps and/or dispatching to the right thread, but keep the core class single-threaded.\n\nNot having to mutex is always nice.",
      "parentUuid": "fc72b608_eaa313a5",
      "revId": "1d0e0a28c9d86a1bf18d701a202e46d4a56d314e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    }
  ]
}