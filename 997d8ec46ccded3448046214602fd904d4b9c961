{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "c2ed5b57_5ac0ca15",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5087
      },
      "writtenOn": "2023-03-17T11:38:02Z",
      "side": 1,
      "message": "philipel@ FYI.\n\nWRT the:\n\n```\n../../rtc_base/synchronization/mutex_benchmark.cc:41:16: error: \u0027DoNotOptimize\u003cint\u003e\u0027 is deprecated: The const-ref version of this method can permit undesired compiler optimizations in benchmarks [-Werror,-Wdeprecated-declarations]\n```\n\nI am not sure how this managed to roll without any issue. Can you fix in a separate CL?",
      "revId": "997d8ec46ccded3448046214602fd904d4b9c961",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "99f8dc53_d1d8ee62",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5527
      },
      "writtenOn": "2023-03-17T12:04:27Z",
      "side": 1,
      "message": "AFAICT this is a step in the wrong director.\n\nWe don\u0027t want to spread the use of RTC_USE_LIBAOM_AV1_ENCODER throughout the code, it should be minimized to where it is (unfortunately) required right now. We will hopefully have a fixit soon to remove a bunch of uses of these deprecated encoder factories, and hopefully they can be completely removed in the not too distant future.",
      "revId": "997d8ec46ccded3448046214602fd904d4b9c961",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "91e8291f_744a2a72",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 12234
      },
      "writtenOn": "2023-03-17T12:06:54Z",
      "side": 1,
      "message": "Here is the context: \nhttps://webrtc-review.googlesource.com/c/src/+/298021/1\nYou suggest we should add RTC_USE_LIBAOM_AV1_ENCODER only for peerconnection_unittests target then ?",
      "parentUuid": "99f8dc53_d1d8ee62",
      "revId": "997d8ec46ccded3448046214602fd904d4b9c961",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "153631b9_203da3b1",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5142
      },
      "writtenOn": "2023-03-17T12:12:57Z",
      "side": 1,
      "message": "Jeremy\u0027s link is to Patch Set 1 which solves the problem my checking if AV1 exists at runtime. What I was attempting to do in Patch Set 2 was to skip the test entirely if AV1 is not supported:\nhttps://webrtc-review.googlesource.com/c/src/+/298021/2\n\nMy thinking was that #if defined(RTC_USE_LIBAOM_AV1_ENCODER) would be better because then the test does not exist when not applicable, as opposed to returning early and PASSING even though we didn\u0027t exercise AV1.\n\nBut either way, I just want the WebRTC importer to be happy. There is an import bot that doesn\u0027t have AV1 causing the test to fail during configuration to use AV1.",
      "parentUuid": "91e8291f_744a2a72",
      "revId": "997d8ec46ccded3448046214602fd904d4b9c961",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "013f3d28_112ee4ad",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5142
      },
      "writtenOn": "2023-03-17T12:14:10Z",
      "side": 1,
      "message": "For reference, the same file is able to exclude H264 for tests when built without H264 by using \"#if defined(WEBRTC_USE_H264)\":\nhttps://source.chromium.org/chromium/chromium/src/+/main:third_party/webrtc/pc/peer_connection_simulcast_unittest.cc;l\u003d1263;drc\u003d9a5de95af91bd5094ecac96d775a11baaa2cb0b3",
      "parentUuid": "153631b9_203da3b1",
      "revId": "997d8ec46ccded3448046214602fd904d4b9c961",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d0d99f70_0b05eee2",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5527
      },
      "writtenOn": "2023-03-17T12:34:54Z",
      "side": 1,
      "message": "The correct way to solve this would be to update https://source.chromium.org/chromium/chromium/src/+/main:third_party/webrtc/pc/peer_connection_simulcast_unittest.cc;l\u003d183;drc\u003d9a5de95af91bd5094ecac96d775a11baaa2cb0b3\n\nfrom \n\n    CreateBuiltinVideoEncoderFactory()\n\nto\n    #include \"api/video_codecs/video_encoder_factory_template.h\"\n    #include \"api/video_codecs/video_encoder_factory_template_libaom_av1_adapter.h\"\n    #include \"api/video_codecs/video_encoder_factory_template_libvpx_vp8_adapter.h\"\n    #include \"api/video_codecs/video_encoder_factory_template_libvpx_vp9_adapter.h\"\n    #include \"api/video_codecs/video_encoder_factory_template_open_h264_adapter.h\"\n\n    std::make_unique\u003cVideoEncoderFactoryTemplate\u003c\n        LibvpxVp8EncoderTemplateAdapter,\n        LibvpxVp9EncoderTemplateAdapter,\n        OpenH264EncoderTemplateAdapter,\n        LibaomAv1EncoderTemplateAdapter\u003e\u003e();\n\nalso add \n\n    \"//api/video_codecs:video_encoder_factory_template\",\n    \"//api/video_codecs:video_encoder_factory_template_libaom_av1_adapter\",\n    \"//api/video_codecs:video_encoder_factory_template_libvpx_vp8_adapter\",\n    \"//api/video_codecs:video_encoder_factory_template_libvpx_vp9_adapter\",\n    \"//api/video_codecs:video_encoder_factory_template_open_h264_adapter\",\n\nto deps. This way the AV1 encoder is always included.\n\nUnfortunately OpenH264 still requires defines throughout the code, so those build flags have to stay around a bit longer. Including it is always fine because it will be null when WebRTC is configured to not use H264: https://source.chromium.org/chromium/chromium/src/+/main:third_party/webrtc/api/video_codecs/video_encoder_factory_template_open_h264_adapter.h;drc\u003df012bfaf96fc3240a839ce16a51844c35d9972b1\n\nIt shouldn\u0027t work that way, but while moving from old to new it kind of have to work like that.",
      "parentUuid": "013f3d28_112ee4ad",
      "revId": "997d8ec46ccded3448046214602fd904d4b9c961",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a21f4500_d0b73dc2",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5527
      },
      "writtenOn": "2023-03-17T12:35:57Z",
      "side": 1,
      "message": "There is also a `VideoDecoderFactoryTemplate` that works in the exact same way, the VideoDecoderFactory should also be replaced.",
      "parentUuid": "d0d99f70_0b05eee2",
      "revId": "997d8ec46ccded3448046214602fd904d4b9c961",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d9612f7a_55545697",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5087
      },
      "writtenOn": "2023-03-17T13:06:10Z",
      "side": 1,
      "message": "+1 to Philip\u0027s suggestion (I was messing up things a bit with my proposal, let\u0027s undo that and do what Philip suggested).",
      "parentUuid": "a21f4500_d0b73dc2",
      "revId": "997d8ec46ccded3448046214602fd904d4b9c961",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    }
  ]
}