{
  "comments": [
    {
      "key": {
        "uuid": "0f62e638_f2e56ee2",
        "filename": "api/rtc_event_log/rtc_event_log.h",
        "patchSetId": 1
      },
      "lineNbr": 37,
      "author": {
        "id": 5087
      },
      "writtenOn": "2019-01-21T08:42:05Z",
      "side": 1,
      "message": "I am wondering if it makes sense to move https://cs.chromium.org/chromium/src/third_party/webrtc/logging/rtc_event_log/rtc_event_log_impl.cc?l\u003d370-379\u0026rcl\u003d10542f21c8e4e2d60b136fab45338f2b1e132dde to API in this CL.",
      "range": {
        "startLine": 36,
        "startChar": 2,
        "endLine": 37,
        "endChar": 73
      },
      "revId": "2e870290bce05060441f4ac92530cb06b0567c89",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9f960d5d_062a2b4b",
        "filename": "api/rtc_event_log/rtc_event_log.h",
        "patchSetId": 1
      },
      "lineNbr": 37,
      "author": {
        "id": 5150
      },
      "writtenOn": "2019-01-21T10:10:26Z",
      "side": 1,
      "message": "I think the default factory should be moved, but I don\u0027t see a reason for moving the implementation to api/. I\u0027d rather get rid of the Create method instead.",
      "parentUuid": "0f62e638_f2e56ee2",
      "range": {
        "startLine": 36,
        "startChar": 2,
        "endLine": 37,
        "endChar": 73
      },
      "revId": "2e870290bce05060441f4ac92530cb06b0567c89",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cff8ae92_43ffee32",
        "filename": "api/rtc_event_log/rtc_event_log.h",
        "patchSetId": 1
      },
      "lineNbr": 37,
      "author": {
        "id": 5087
      },
      "writtenOn": "2019-01-21T10:24:37Z",
      "side": 1,
      "message": "SGTM, I would like to avoid to have the declaration in one build target and the definition in another one because it can cause weird maintenance problems (the common case I have to deal with every now and then is: a dependency changes somewhere in the build graph and the build system doesn\u0027t pass the .o with the definition to the linker anymore).\n\nCan we delete RtcEventLog::Create before landing this? How hard it is to get rid of it?",
      "parentUuid": "9f960d5d_062a2b4b",
      "range": {
        "startLine": 36,
        "startChar": 2,
        "endLine": 37,
        "endChar": 73
      },
      "revId": "2e870290bce05060441f4ac92530cb06b0567c89",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fd850fd0_9aed93a9",
        "filename": "api/rtc_event_log/rtc_event_log.h",
        "patchSetId": 1
      },
      "lineNbr": 37,
      "author": {
        "id": 5150
      },
      "writtenOn": "2019-01-21T13:52:27Z",
      "side": 1,
      "message": "I agree that having the declaration and definition in different build targets is weird. However, this is already the case so it doesn\u0027t become worse with this CL. It seems more natural to me, to clean this up as part of moving the default factory (which would involve splitting the _impl build target anyway).\n\nBtw, this pattern (or anti-pattern) of having the declaration and definition in different targets occurs in other WebRTC factories as well. For example, api/call/call_factory_interface.h declares \nstd::unique_ptr\u003cCallFactoryInterface\u003e CreateCallFactory();\nwhereas it is defined in call/call_factory.cc which is part of the call build target.",
      "parentUuid": "cff8ae92_43ffee32",
      "range": {
        "startLine": 36,
        "startChar": 2,
        "endLine": 37,
        "endChar": 73
      },
      "revId": "2e870290bce05060441f4ac92530cb06b0567c89",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "93818f8a_af8a5bf9",
        "filename": "api/rtc_event_log/rtc_event_log.h",
        "patchSetId": 1
      },
      "lineNbr": 37,
      "author": {
        "id": 5126
      },
      "writtenOn": "2019-01-21T14:37:00Z",
      "side": 1,
      "message": "+1 to not defining functions in other build targets, as Mirko said. It has caused enough problems that we\u0027ve written a style rule about it: https://webrtc.googlesource.com/src/+/master/style-guide.md#h-cc-pairs",
      "parentUuid": "fd850fd0_9aed93a9",
      "range": {
        "startLine": 36,
        "startChar": 2,
        "endLine": 37,
        "endChar": 73
      },
      "revId": "2e870290bce05060441f4ac92530cb06b0567c89",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "363b1470_8282c20d",
        "filename": "api/rtc_event_log/rtc_event_log.h",
        "patchSetId": 1
      },
      "lineNbr": 37,
      "author": {
        "id": 5087
      },
      "writtenOn": "2019-01-22T07:56:33Z",
      "side": 1,
      "message": "I agree that the situation is already sub-optimal but I think we can do something in this CL to make our life easier going forward (or at least agree on a plan and see if there are other problems ahead).\n\nHere is another proposal, which also covers what kwiberg@ wrote on line 62:\n\n1. If RtcEventLogNullImpl should never be handled directly (but always through a pointer to an RtcEventLog), we can move this into rtc_event_log.cc, if instead we need it (a quick code search shows we are referring to webrtc::RtcEventLogNullImpl in some places I am not sure this is what we want, though) we have to keep the declaration in the header.\n\n2. We can move RtcEventLog::Create to api/rtc_event_log/rtc_event_log.cc and include logging/rtc_event_log_impl.h (we need to split decl and def in that case). It is OK to #include a non API header from a .cc file in api/.\n\nWhat is strange from the current approach is that RtcEventLog::Create is declared in api/, but defined in logging/, while the RtcEventLog::Create itself needs both RtcEventLogNullImpl (which is declared and defined in api/) and RtcEventLogImpl (declared and defined in logging/) based on the preprocessor macro ENABLE_RTC_EVENT_LOG.\n\nEven if we are going to remove RtcEventLog::Create in the future, I would like to simplify the current approach and I think the plan in point (2) fixes the problem while maintaining the implementation of RtcEventLog private.",
      "parentUuid": "93818f8a_af8a5bf9",
      "range": {
        "startLine": 36,
        "startChar": 2,
        "endLine": 37,
        "endChar": 73
      },
      "revId": "2e870290bce05060441f4ac92530cb06b0567c89",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b7e90037_0f4df39e",
        "filename": "api/rtc_event_log/rtc_event_log.h",
        "patchSetId": 1
      },
      "lineNbr": 37,
      "author": {
        "id": 5150
      },
      "writtenOn": "2019-01-22T10:15:11Z",
      "side": 1,
      "message": "Moving the event log isn\u0027t really part of what I\u0027m working on, so I can\u0027t spend too much time on this right now.\n\nHow are you with going back to a single massive CL instead of trying to split it up into parts? The approach we previously discussed was 1) moving the event log API to api/ and insert forwarding header 2) update all WebRTC includes the use api/ instead of the forwarding header 3) splitting the _impl target into a factory that\u0027s moved to api and deprecating the Create method",
      "parentUuid": "363b1470_8282c20d",
      "range": {
        "startLine": 36,
        "startChar": 2,
        "endLine": 37,
        "endChar": 73
      },
      "revId": "2e870290bce05060441f4ac92530cb06b0567c89",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    }
  ]
}