{
  "comments": [
    {
      "key": {
        "uuid": "86755e82_25dc9e57",
        "filename": "modules/congestion_controller/pcc/utility_function.cc",
        "patchSetId": 1
      },
      "lineNbr": 13,
      "author": {
        "id": 5150
      },
      "writtenOn": "2018-07-10T23:17:36Z",
      "side": 1,
      "message": "Please remove the unused header includes.",
      "range": {
        "startLine": 13,
        "startChar": 0,
        "endLine": 13,
        "endChar": 20
      },
      "revId": "791700b736e4c016eb3edd8349a9be73a2dff9bf",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "91d04d12_03047ab4",
        "filename": "modules/congestion_controller/pcc/utility_function.cc",
        "patchSetId": 1
      },
      "lineNbr": 50,
      "author": {
        "id": 7332
      },
      "writtenOn": "2018-07-10T12:21:41Z",
      "side": 1,
      "message": "Do we want to copy the vectors? A const reference could do the job.\n\nThere might be an ever better solution: move this computation to MonitorInterval class. This would reduce coupling. E.g. if MonitorInterval changes its data structures, this class won\u0027t have to be updated.",
      "revId": "791700b736e4c016eb3edd8349a9be73a2dff9bf",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "333e872f_191fb635",
        "filename": "modules/congestion_controller/pcc/utility_function.cc",
        "patchSetId": 1
      },
      "lineNbr": 60,
      "author": {
        "id": 7332
      },
      "writtenOn": "2018-07-10T12:21:41Z",
      "side": 1,
      "message": "What if packets_sent_times has less items than packets_rtts?",
      "revId": "791700b736e4c016eb3edd8349a9be73a2dff9bf",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dc07f45a_3548deb3",
        "filename": "modules/congestion_controller/pcc/utility_function.h",
        "patchSetId": 1
      },
      "lineNbr": 14,
      "author": {
        "id": 7332
      },
      "writtenOn": "2018-07-10T12:21:41Z",
      "side": 1,
      "message": "Please only include what is strictly necessary, especially in header files. \nDead includes clutter the file, give wrong hints about dependencies and increase build time.\n\nEven MonitorInterval *could* be forward declared.",
      "revId": "791700b736e4c016eb3edd8349a9be73a2dff9bf",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0b143a52_c834b184",
        "filename": "modules/congestion_controller/pcc/utility_function.h",
        "patchSetId": 1
      },
      "lineNbr": 14,
      "author": {
        "id": 5150
      },
      "writtenOn": "2018-07-10T23:17:36Z",
      "side": 1,
      "message": "I agree with the first points, but I don\u0027t think MonitorInterval should be forward declared. MonitorInterval is a relatively small class without a lot of other dependencies. The benefits don\u0027t seem to outweigh the downsides imo.  https://google.github.io/styleguide/cppguide.html#Forward_Declarations",
      "parentUuid": "dc07f45a_3548deb3",
      "revId": "791700b736e4c016eb3edd8349a9be73a2dff9bf",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "523b70f6_e332abb5",
        "filename": "modules/congestion_controller/pcc/utility_function.h",
        "patchSetId": 1
      },
      "lineNbr": 14,
      "author": {
        "id": 7332
      },
      "writtenOn": "2018-07-11T13:26:09Z",
      "side": 1,
      "message": "There is no such thing as \"small\" in C++ :)\nmonitor_interval.h depends on 193 distinct headers (even when #includes are cleaned up), none of which would be included here with a forward declaration.\n\nAbout the guideline: none of the cons seems to apply here.\n\nI\u0027m really in favor of maximal decoupling, but I happily leave the final call to the owner!",
      "parentUuid": "0b143a52_c834b184",
      "revId": "791700b736e4c016eb3edd8349a9be73a2dff9bf",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1b7f4e23_7bf60b82",
        "filename": "modules/congestion_controller/pcc/utility_function.h",
        "patchSetId": 1
      },
      "lineNbr": 26,
      "author": {
        "id": 5531
      },
      "writtenOn": "2018-07-09T10:46:26Z",
      "side": 1,
      "message": "There are reasons why one might want to avoid adding namespaces: https://abseil.io/tips/130",
      "range": {
        "startLine": 26,
        "startChar": 10,
        "endLine": 26,
        "endChar": 13
      },
      "revId": "791700b736e4c016eb3edd8349a9be73a2dff9bf",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cd132677_6f460030",
        "filename": "modules/congestion_controller/pcc/utility_function.h",
        "patchSetId": 1
      },
      "lineNbr": 28,
      "author": {
        "id": 5531
      },
      "writtenOn": "2018-07-09T10:46:26Z",
      "side": 1,
      "message": "This name is a bit generic. A good practice is to name things as if you don\u0027t have any namespace protection (other that webrtc::). I could imaging this name being used in other contexts as well.\n\nMaybe PccUtilityFunctionInterface?\n\nInterface is optional to add, see: https://google.github.io/styleguide/cppguide.html#Interfaces\n\nWill we have more than one utility function? Otherwise you cold simplify the code by not having any generic interface. An interface adds costs in terms of increased boilerplate. increased binary size and increased run time overhead.",
      "range": {
        "startLine": 28,
        "startChar": 6,
        "endLine": 28,
        "endChar": 21
      },
      "revId": "791700b736e4c016eb3edd8349a9be73a2dff9bf",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "71c9c06e_2c889875",
        "filename": "modules/congestion_controller/pcc/utility_function.h",
        "patchSetId": 1
      },
      "lineNbr": 28,
      "author": {
        "id": 5150
      },
      "writtenOn": "2018-07-10T23:17:36Z",
      "side": 1,
      "message": "We plan to experiment with other utility functions, yes.",
      "parentUuid": "cd132677_6f460030",
      "range": {
        "startLine": 28,
        "startChar": 6,
        "endLine": 28,
        "endChar": 21
      },
      "revId": "791700b736e4c016eb3edd8349a9be73a2dff9bf",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7c1bc5d9_808d956e",
        "filename": "modules/congestion_controller/pcc/utility_function.h",
        "patchSetId": 1
      },
      "lineNbr": 35,
      "author": {
        "id": 5531
      },
      "writtenOn": "2018-07-09T10:46:26Z",
      "side": 1,
      "message": "Add a short description. Just referencing the paper is probably enough. But a short summary of the concept would be nice.",
      "range": {
        "startLine": 35,
        "startChar": 6,
        "endLine": 35,
        "endChar": 27
      },
      "revId": "791700b736e4c016eb3edd8349a9be73a2dff9bf",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    }
  ]
}