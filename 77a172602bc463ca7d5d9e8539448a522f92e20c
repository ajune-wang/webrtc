{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "cfa77b3f_1cc2d608",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 19
      },
      "lineNbr": 0,
      "author": {
        "id": 6305
      },
      "writtenOn": "2021-12-06T13:24:26Z",
      "side": 1,
      "message": "Hello Henrik and KÃ¡ri.\n\nCould you please review this CL? In this CL I\u0027m trying to fix microphone recording indicator on iOS 13+ in scenarios, where microphone recording is not required by host application, or required only on demand (more details can be found in bug description). I\u0027m sorry this CL is big and will require time for review, but I hope with your help and feedback it will be possible to make this CL accepted.\n\nThanks a lot in advance,\nYury.",
      "revId": "77a172602bc463ca7d5d9e8539448a522f92e20c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ea6a7ab7_90d45b31",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 19
      },
      "lineNbr": 0,
      "author": {
        "id": 5091
      },
      "writtenOn": "2021-12-06T13:43:13Z",
      "side": 1,
      "message": "Thanks for your contributions. It looks very impressive and I am sure it is good stuff but I am currently unable to invest time into reviewing this complex change since I have not actively been working on iOS for a long time. Hence, there is a big risk that I miss some detail that might break existing clients using the iOS implementation in sdk/objc.\n\nHave you verified that all existing unittests work and that the WebRTC Mobile test client can be build based on these changes?\n\nI have seen other changes in this area where users who needs separate control of Playout and Recording instead injects their own ADM implementation into PeerConnection. That way, you can work on an independent ADM implementation without any risk of breaking existing clients. ",
      "revId": "77a172602bc463ca7d5d9e8539448a522f92e20c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b3b53beb_3007f9cf",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 19
      },
      "lineNbr": 0,
      "author": {
        "id": 6305
      },
      "writtenOn": "2021-12-06T15:10:46Z",
      "side": 1,
      "message": "\u003e Have you verified that all existing unittests work and that the WebRTC Mobile test client can be build based on these changes?\n\nNot sure which exact tests do you mean, but this CL is passing dry run, which I suppose execute all the unit tests presented in code base.\nI\u0027ve also manually checked AppRTCMobile still works fine.\nIn addition to that I\u0027ve tested WebRTC.xcframework with these changes in context of another large proprietary application which has CallKit based 1-on-1 calls, group calls and kind of streaming over WebRTC. I\u0027ve checked how WebRTC in app works in background/foreground, when different BT devices connected/disconneced, when speaker is on/off. Everything seems to work fine.\n\n\u003e I have seen other changes in this area where users who needs separate control of Playout and Recording instead injects their own ADM implementation into PeerConnection. That way, you can work on an independent ADM implementation without any risk of breaking existing clients.\n\nYeah, I also considered this option. But the problem is that I\u0027m trying to avoid having custom WebRTC builds and I rely heavily on public API of WebRTC SDK. Currently replacing ADM is only possible by patching WebRTC code, there is no build in means in public API of SDK to replace ADM.\nIn near future I consider working on CL which will allow injecting custom ADM represented by newly added ADM protocol. So any user of SDK could replace default ADM with custom implementation.\n\nBut I believe that this CL still has value, because for most of the users it will fix the playout/recording separation out of the box of SDK, so they will not need to be bothered with complicated ways to implement and substitute their own ADM.",
      "parentUuid": "ea6a7ab7_90d45b31",
      "revId": "77a172602bc463ca7d5d9e8539448a522f92e20c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f5b1f265_e9c2bb73",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 19
      },
      "lineNbr": 0,
      "author": {
        "id": 5091
      },
      "writtenOn": "2021-12-06T15:58:28Z",
      "side": 1,
      "message": "\"Currently replacing ADM is only possible by patching WebRTC code, there is no build in means in public API of SDK to replace ADM.\"\n\nThat is simply not true and I am aware of several clients which injects their own ADM today. Even the WebRTC Mobile sample injects an external ADM and that ADM can be replaced by your version as an example.\n\nsee https://bugs.chromium.org/p/webrtc/issues/detail?id\u003d7452 for details.\n\nI am not saying that you CL does not add value but my point is that it is better if each client with special requirements maintain their ADM locally and injects since there is risk of breaking millions of existing clients otherwise.\n\nTo land a large CL like this should preferable be done in several small steps using experiments where each step must be carefully monitored for regressions. And to launch such an activity, the owners of this code path must see a need for said changes.",
      "parentUuid": "b3b53beb_3007f9cf",
      "revId": "77a172602bc463ca7d5d9e8539448a522f92e20c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ef4a2f7c_cbcb096a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 19
      },
      "lineNbr": 0,
      "author": {
        "id": 5091
      },
      "writtenOn": "2021-12-06T16:17:36Z",
      "side": 1,
      "message": "Today, the external ADM is injected here [1] in the test client and any new ADM which implements the interface can be injected the same way. This is for Java but same goes for iOS (I am less familiar with that code path).\n\nTo summarize my standpoint:\n\n- Lot\u0027s of work has been done to break out the ADM and to make it injectable for Android and iOS clients.\n- Each client has their own unique requirements and to avoid breaking clients that uses the default ADM, I recommend maintaining these changes locally instead.\n\n[1] https://source.chromium.org/chromium/chromium/src/+/main:third_party/webrtc/examples/androidapp/src/org/appspot/apprtc/PeerConnectionClient.java;l\u003d451;drc\u003df9e502d935fa9ca8d9cc7540680021b93d285f28",
      "parentUuid": "f5b1f265_e9c2bb73",
      "revId": "77a172602bc463ca7d5d9e8539448a522f92e20c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    }
  ]
}