{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "988a4018_b35ea326",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 5634
      },
      "writtenOn": "2024-04-18T16:54:38Z",
      "side": 1,
      "message": "Looks like a nice first step - add TODO(11943) at appropriate points in case you have to drop this and someone else picks it up.",
      "revId": "8ea00f39b2a233dde922bbc5811a6ab560dbfe7d",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "107a796c_3225b889",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 5634
      },
      "writtenOn": "2024-04-19T09:47:11Z",
      "side": 1,
      "message": "Only two things are hard in computing: Naming, inheritance and off-by-one errors...",
      "revId": "8ea00f39b2a233dde922bbc5811a6ab560dbfe7d",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "de77d617_c9f28438",
        "filename": "rtc_base/stream.h",
        "patchSetId": 3
      },
      "lineNbr": 128,
      "author": {
        "id": 5634
      },
      "writtenOn": "2024-04-18T16:54:38Z",
      "side": 1,
      "message": "Can we use the name \"SendStreamEvent\" for this rather than introducing a new term \"Fire\"? See go/sigslot-to-callback-list for name suggestions.",
      "revId": "8ea00f39b2a233dde922bbc5811a6ab560dbfe7d",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "410dc3cb_62f0f227",
        "filename": "rtc_base/stream.h",
        "patchSetId": 3
      },
      "lineNbr": 128,
      "author": {
        "id": 5508
      },
      "writtenOn": "2024-04-19T09:30:20Z",
      "side": 1,
      "message": "Good point. I guess that since the method\u0027s name contains \"Event\", I\u0027m accustomed to use terms \"fire an event\". To that point, go/sigslot-to-callback-list does even talk about \"firing\" events fwiw. But I subjectively find \"Send\" to be a bit unexpected choice for callbacks even though we already have it in CallbackList.\n\nA concern I have with the \"Send\" prefix however is that we use Send/Post so commonly and there\u0027s an implied message queue. For events, how about using \"Notify\", e.g. `NotifyStreamEvent`? \"Issue\" could also be used together with an event or callback concept.\n\nI figure that should be familiar api language since we have `NotifierInterface` already.",
      "parentUuid": "de77d617_c9f28438",
      "revId": "8ea00f39b2a233dde922bbc5811a6ab560dbfe7d",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a3433613_44fdefb7",
        "filename": "rtc_base/stream.h",
        "patchSetId": 3
      },
      "lineNbr": 128,
      "author": {
        "id": 5634
      },
      "writtenOn": "2024-04-19T09:47:11Z",
      "side": 1,
      "message": "I think the guidance needs to be consistent with what we\u0027re doing ... would like to do this thing only one way. Sigslot was called a signal, not an event, which led me to think of it as being \"sent\", not \"fired\". But the callback is called synchronously, not asynchronously, which is consistent with WebIDL \"events\" (that continue to astonish me) but not consistent with common use of terms like \"send\".\n\nThe confusion here is that we have two levels of naming - one is the sigslot \"signal\" abstraction, the other is the term \"event\" used in \"stream_events\". \"FireStreamEvent\" seems to be indicating that you fire the stream event, which I don\u0027t think is true - it\u0027s a notification that the event has already happened.\n\nPerhaps SendStreamEventNotification is both consistent with old guidance and descriptive of what we\u0027re doing here? Or should we change the guidance?",
      "parentUuid": "410dc3cb_62f0f227",
      "revId": "8ea00f39b2a233dde922bbc5811a6ab560dbfe7d",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "67cce5d3_9aa81e21",
        "filename": "rtc_base/stream.h",
        "patchSetId": 3
      },
      "lineNbr": 128,
      "author": {
        "id": 5508
      },
      "writtenOn": "2024-04-19T10:14:40Z",
      "side": 1,
      "message": "/bikesheddingtime!\n\n\u003csomewhat off the naming topic but looking at the StreamInterface itself\u003e\n\nThis event/callback firing method is only exposed to subclasses to get them to stop touching the sigslot variable directly - outside of webrtc, there are only test classes that inherit from the interface. In production in webrtc, there\u0027s then only one class that in practice inherits from the stream interface - `OpenSSLStreamAdapter`. `OpenSSLStreamAdapter` is also the only class that extends the `SSLStreamAdapter` interface (which inherits from StreamInterface).\n\nSo, it\u0027s even debatable if we need this level of abstraction and all the other classes that inherit from StreamInterface, aren\u0027t substituting OpenSSLStreamAdapter. OpenSSLStreamAdapter could actually be a simpler non-virtual class. So this complexity/interaction between that class and the other StreamInterface implementations, is possibly something we don\u0027t need or want.\n\nAnyway, back on topic ðŸ˜Š\n\nWe actually do have `FireOnChanged` already in the api as part of the `Notifier` class. That\u0027s been around for ages (as old as PeerConnectionInterface basically).\n\nBut since the name of the interface is StreamInterface, do we need to repeat \"Stream\" in the utility function? (`SendStreamEventNotification` seems a bit long so I\u0027m wondering how we could shorten it)\n\nIf \"Stream\" isn\u0027t necessary then I think we could pick between \"Event\" and \"Notification\". I.e. \"SendEvent\" or \"SendNotification\". Alternatively could also use the \"On\" prefix, e.g. `OnStreamEvent`?\n\nOr we could live with \"fire\", remove \"stream\" and go with a generic `FireEvent`, which replaces the sigslot `SignalEvent` language?",
      "parentUuid": "a3433613_44fdefb7",
      "revId": "8ea00f39b2a233dde922bbc5811a6ab560dbfe7d",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "683de322_a6dd1025",
        "filename": "rtc_base/stream.h",
        "patchSetId": 3
      },
      "lineNbr": 128,
      "author": {
        "id": 5634
      },
      "writtenOn": "2024-04-22T07:47:36Z",
      "side": 1,
      "message": "I think the current naming suggestion was written for the case where a class had multiple signals, so the function of the signal needed to be in the name.\nFor this class, there seems to be only one, so \"FireEvent\" may be adequate - \"stream\" is in the name of the class.\n\nMy main worry is that we should make sure our guidance to implementors (the go/ link) and what we\u0027re doing is consistent as far as possible - so if we are changing what we think people should do, we should change the guidance too.",
      "parentUuid": "67cce5d3_9aa81e21",
      "revId": "8ea00f39b2a233dde922bbc5811a6ab560dbfe7d",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "635bc0eb_5e68e454",
        "filename": "rtc_base/stream.h",
        "patchSetId": 3
      },
      "lineNbr": 128,
      "author": {
        "id": 5508
      },
      "writtenOn": "2024-04-22T14:50:39Z",
      "side": 1,
      "message": "Assuming we\u0027ll want to move away from the \"signals and slots\" names from the sigslot implementation, I think the best precedent for what this particular method is, is `Notifier\u003cT\u003e::FireOnChanged()`, since it\u0027s the same situation here.\n\nWhat I wanted to do but had to back out of due to downstream problems, was to split the implementation away from the interface so that it could be pure virtual. Alas, that\u0027ll have to wait.\n\nBut, we can document such cases - I can update the above doc - e.g. naming of utility methods specifically offered for purposes of firing events, I can make that change.\n\nChanged the name to FireEvent in this CL.",
      "parentUuid": "683de322_a6dd1025",
      "revId": "8ea00f39b2a233dde922bbc5811a6ab560dbfe7d",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    }
  ]
}