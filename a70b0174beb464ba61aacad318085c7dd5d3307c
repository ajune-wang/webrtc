{
  "comments": [
    {
      "key": {
        "uuid": "7d729214_212c1a9f",
        "filename": "api/test/peerconnection_quality_test_fixture.h",
        "patchSetId": 1
      },
      "lineNbr": 172,
      "author": {
        "id": 5027
      },
      "writtenOn": "2019-11-12T08:32:12Z",
      "side": 1,
      "message": "You can specify one of .... If none of them are specified....",
      "range": {
        "startLine": 171,
        "startChar": 7,
        "endLine": 172,
        "endChar": 49
      },
      "revId": "a70b0174beb464ba61aacad318085c7dd5d3307c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3dc4af10_ea836221",
        "filename": "api/test/peerconnection_quality_test_fixture.h",
        "patchSetId": 1
      },
      "lineNbr": 172,
      "author": {
        "id": 6337
      },
      "writtenOn": "2019-11-12T15:34:45Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7d729214_212c1a9f",
      "range": {
        "startLine": 171,
        "startChar": 7,
        "endLine": 172,
        "endChar": 49
      },
      "revId": "a70b0174beb464ba61aacad318085c7dd5d3307c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2867e7b7_cd2d517b",
        "filename": "api/test/peerconnection_quality_test_fixture.h",
        "patchSetId": 1
      },
      "lineNbr": 297,
      "author": {
        "id": 5027
      },
      "writtenOn": "2019-11-12T08:32:12Z",
      "side": 1,
      "message": "Can\u0027t the source just be a property of the video config? Also, isn\u0027t the concept of a source kind of overlapping with the concept of a generator? What happens if I specify an i420 generator in the video config and pass in a source?",
      "range": {
        "startLine": 297,
        "startChar": 63,
        "endLine": 297,
        "endChar": 69
      },
      "revId": "a70b0174beb464ba61aacad318085c7dd5d3307c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9c197252_830eebec",
        "filename": "api/test/peerconnection_quality_test_fixture.h",
        "patchSetId": 1
      },
      "lineNbr": 297,
      "author": {
        "id": 6337
      },
      "writtenOn": "2019-11-12T15:34:45Z",
      "side": 1,
      "message": "Video generators is WebRTC private API, it is why rtc::VideoSourceInterface is used here. If you will specify some other source in config, then validation error will be raised.\n\nI can\u0027t put source into video config because video config is assumed copyable structure and source can\u0027t be copyable by default.",
      "parentUuid": "2867e7b7_cd2d517b",
      "range": {
        "startLine": 297,
        "startChar": 63,
        "endLine": 297,
        "endChar": 69
      },
      "revId": "a70b0174beb464ba61aacad318085c7dd5d3307c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5158087c_93ac4e61",
        "filename": "api/test/peerconnection_quality_test_fixture.h",
        "patchSetId": 1
      },
      "lineNbr": 297,
      "author": {
        "id": 5027
      },
      "writtenOn": "2019-11-12T16:02:40Z",
      "side": 1,
      "message": "All right. It feels like you should either pass in one or zero video sources (if zero, use some default). There should be one interface for a video source (videosourceinterface with videosinkinterface looks excellent) and your frame generators should implement videosourceinterface. Then you just hand a video source to the test rather than having the videogeneratortype. It\u0027s clunky with several mechanism for choosing a video source.\n\nI don\u0027t know how to best deal with the ownership of the video sink, I guess either absl::optional\u003crtc::VideoSourceInterface\u003cVideoFrame\u003e*\u003e and the caller makes sure the source outlives the test, or use a refptr. Then it\u0027s fine that params gets copied.\n\nYou do have a good mechanism for checking the params at least, so this is fine. I would like to see the refactoring suggested above or something like it later.",
      "parentUuid": "9c197252_830eebec",
      "range": {
        "startLine": 297,
        "startChar": 63,
        "endLine": 297,
        "endChar": 69
      },
      "revId": "a70b0174beb464ba61aacad318085c7dd5d3307c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ccc0d0ce_e0c15347",
        "filename": "test/pc/e2e/peer_connection_quality_test.h",
        "patchSetId": 1
      },
      "lineNbr": 253,
      "author": {
        "id": 5027
      },
      "writtenOn": "2019-11-12T08:32:12Z",
      "side": 1,
      "message": "Ok, so you create a meta struct out of another param struct and your new parameter. Err. Params is already quite general, so can we just move the video sources into the params struct? It appears Params is audio/video parameters for the peer connection, so maybe not (but Params should get a better name, like PeerConnectionMediaParams?)\n\nI think I would prefer void SetDefaultValuesForMissingParams(std::vector\u003cParams*\u003e params, std::vector\u003cstd::unique_ptr\u003crtc::VideoSourceInterface\u003cVideoFrame\u003e\u003e\u003e*\u003e video_sources) rather than klutzing it all together in this struct. This struct has a kind of weak motivation for existence in the first place (\"parameters that can be validated\").",
      "range": {
        "startLine": 253,
        "startChar": 9,
        "endLine": 253,
        "endChar": 26
      },
      "revId": "a70b0174beb464ba61aacad318085c7dd5d3307c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dd3ceeef_11b53a6e",
        "filename": "test/pc/e2e/peer_connection_quality_test.h",
        "patchSetId": 1
      },
      "lineNbr": 253,
      "author": {
        "id": 6337
      },
      "writtenOn": "2019-11-12T15:34:45Z",
      "side": 1,
      "message": "I told in previous comment why I can\u0027t put source into params, but I\u0027m OK to change signature. I was thinking about it, but initially decided that it will look a bit too ugly.\n\nI hope to refactor it a bit more to make it clearer in the future.",
      "parentUuid": "ccc0d0ce_e0c15347",
      "range": {
        "startLine": 253,
        "startChar": 9,
        "endLine": 253,
        "endChar": 26
      },
      "revId": "a70b0174beb464ba61aacad318085c7dd5d3307c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f42b321e_26a65aec",
        "filename": "test/pc/e2e/video_source_based_video_capturer.h",
        "patchSetId": 1
      },
      "lineNbr": 23,
      "author": {
        "id": 5027
      },
      "writtenOn": "2019-11-12T08:32:12Z",
      "side": 1,
      "message": "What does this wrapper actually do? It forwards from a videosourceinterface to a videosinkinterface?",
      "range": {
        "startLine": 23,
        "startChar": 6,
        "endLine": 23,
        "endChar": 35
      },
      "revId": "a70b0174beb464ba61aacad318085c7dd5d3307c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ecac1ffb_c1243d85",
        "filename": "test/pc/e2e/video_source_based_video_capturer.h",
        "patchSetId": 1
      },
      "lineNbr": 23,
      "author": {
        "id": 6337
      },
      "writtenOn": "2019-11-12T15:34:45Z",
      "side": 1,
      "message": "This one ensure that frames from provided source will be forwarded into video quality analyzer and also will be processed by VideoAdapter according to the requirements.",
      "parentUuid": "f42b321e_26a65aec",
      "range": {
        "startLine": 23,
        "startChar": 6,
        "endLine": 23,
        "endChar": 35
      },
      "revId": "a70b0174beb464ba61aacad318085c7dd5d3307c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    }
  ]
}