{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "7276cc84_514504dd",
        "filename": "g3doc/implementation_basics.md",
        "patchSetId": 1
      },
      "lineNbr": 40,
      "author": {
        "id": 5019
      },
      "writtenOn": "2022-06-15T17:55:31Z",
      "side": 1,
      "message": "suffixes",
      "range": {
        "startLine": 40,
        "startChar": 18,
        "endLine": 40,
        "endChar": 23
      },
      "revId": "0ce60f93d69733c42e2bdfbb80fb857726231106",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e8f48c53_94d7286b",
        "filename": "g3doc/implementation_basics.md",
        "patchSetId": 1
      },
      "lineNbr": 48,
      "author": {
        "id": 5019
      },
      "writtenOn": "2022-06-15T17:55:31Z",
      "side": 1,
      "message": "why limit how Foo is wrapped?\nfactory may also return optional\u003cFoo\u003e and plain Foo\n\nhttps://abseil.io/tips/11",
      "range": {
        "startLine": 48,
        "startChar": 41,
        "endLine": 48,
        "endChar": 96
      },
      "revId": "0ce60f93d69733c42e2bdfbb80fb857726231106",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7ffa7bf0_a3251d63",
        "filename": "g3doc/implementation_basics.md",
        "patchSetId": 1
      },
      "lineNbr": 48,
      "author": {
        "id": 5019
      },
      "writtenOn": "2022-06-15T17:55:31Z",
      "side": 1,
      "message": "alternativly \nFooFactory might be just a function:\n\n.h\n  Foo DefaultFooFactory(); \n  \n\n.cc  \n  Foo DefaultFooFactory() {\n    return Foo(kDefaultParam);\n  }",
      "range": {
        "startLine": 48,
        "startChar": 2,
        "endLine": 48,
        "endChar": 35
      },
      "revId": "0ce60f93d69733c42e2bdfbb80fb857726231106",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7bab865f_dad29193",
        "filename": "g3doc/implementation_basics.md",
        "patchSetId": 1
      },
      "lineNbr": 50,
      "author": {
        "id": 5087
      },
      "writtenOn": "2022-06-15T14:12:11Z",
      "side": 1,
      "message": "Is this mandatory?\n\nCan we have a builder that builds a complex object (no heap allocation) and just returns it by value?\n\nThis is probably rare but I would not be surprised by such behaviour for a *Builder.",
      "range": {
        "startLine": 50,
        "startChar": 48,
        "endLine": 50,
        "endChar": 84
      },
      "revId": "0ce60f93d69733c42e2bdfbb80fb857726231106",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6b5a87b3_348af18f",
        "filename": "g3doc/implementation_basics.md",
        "patchSetId": 1
      },
      "lineNbr": 50,
      "author": {
        "id": 5019
      },
      "writtenOn": "2022-06-15T17:55:31Z",
      "side": 1,
      "message": "instead/in addition to name convention, it is possible to ask c++ to help with that:\n\n  class FooBuilder {\n   public:\n    SetA(...);\n    SetB(...);\n  \n    Foo Build() \u0026\u0026;\n  };\n\n  FooBuilder builder;\n  builder.SetA();\n  // builder.Builder(); \u003c- won\u0027t compile\n  Foo foo \u003d std::move(builder).Build();\n  // builder.SetB(); \u003c- compiler would generate \u0027use after move\u0027 warning.\n\n\nhttp://go/totw/203#using-qualifiers-to-express-api-semantics",
      "range": {
        "startLine": 50,
        "startChar": 86,
        "endLine": 50,
        "endChar": 119
      },
      "revId": "0ce60f93d69733c42e2bdfbb80fb857726231106",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "05acaae3_318b96c1",
        "filename": "g3doc/implementation_basics.md",
        "patchSetId": 1
      },
      "lineNbr": 52,
      "author": {
        "id": 5019
      },
      "writtenOn": "2022-06-15T17:55:31Z",
      "side": 1,
      "message": "or Foo, but Foo contains pointers to FooManager members, i.e.\nFooManager has to outlive all usage of objects it creates.\nor Foo\u0026 (returning Foo* suggests it might be nullptr. Returning Foo\u0026 guarantees Create always successed)\n\nReference qualifies once again can help, though not as much as for Builder pattern:\n\n class FooManager {\n  public:\n   Foo Create() \u0026;\n };\n \n // Foo foo \u003d FooManager().Create(); \u003c- won\u0027t compile.\n optional\u003cFooManager\u003e manager(in_place);\n Foo foo \u003d manager-\u003eCreate();\n manager \u003d nullopt; // This is an error, but compiler won\u0027t hint that foo shouldn\u0027t outlive its manager.",
      "range": {
        "startLine": 52,
        "startChar": 101,
        "endLine": 52,
        "endChar": 108
      },
      "revId": "0ce60f93d69733c42e2bdfbb80fb857726231106",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "291008dc_8608c08f",
        "filename": "g3doc/implementation_basics.md",
        "patchSetId": 1
      },
      "lineNbr": 52,
      "author": {
        "id": 5634
      },
      "writtenOn": "2022-06-16T06:39:44Z",
      "side": 1,
      "message": "Wonder if I should add some words like \"If a Manager keeps track of objects of class Foo and Bar, the name should be suitably generic (probably not FooAndBarManager), and the Create functions should be named CreateFoo, CreateBar and so on\".",
      "revId": "0ce60f93d69733c42e2bdfbb80fb857726231106",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    }
  ]
}