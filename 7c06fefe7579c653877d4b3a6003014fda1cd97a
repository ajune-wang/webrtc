{
  "comments": [
    {
      "key": {
        "uuid": "7c1ee8e2_e654422c",
        "filename": "api/rtp_transceiver_interface.h",
        "patchSetId": 8
      },
      "lineNbr": 140,
      "author": {
        "id": 5019
      },
      "writtenOn": "2020-06-08T13:52:58Z",
      "side": 1,
      "message": "should it be \u003cconst RtpHeaderExtensionCapability\u003e?\n(i.e. is header_extensions_to_offer input-only parameter, or is it input-output parameter?)",
      "range": {
        "startLine": 140,
        "startChar": 21,
        "endLine": 140,
        "endChar": 49
      },
      "revId": "7c06fefe7579c653877d4b3a6003014fda1cd97a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5cbb7f20_d5e71576",
        "filename": "api/rtp_transceiver_interface.h",
        "patchSetId": 8
      },
      "lineNbr": 140,
      "author": {
        "id": 9515
      },
      "writtenOn": "2020-06-08T18:09:41Z",
      "side": 1,
      "message": "Input-only. Fixed.",
      "parentUuid": "7c1ee8e2_e654422c",
      "range": {
        "startLine": 140,
        "startChar": 21,
        "endLine": 140,
        "endChar": 49
      },
      "revId": "7c06fefe7579c653877d4b3a6003014fda1cd97a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f806096e_a3712f83",
        "filename": "pc/media_session.cc",
        "patchSetId": 8
      },
      "lineNbr": 59,
      "author": {
        "id": 5019
      },
      "writtenOn": "2020-06-08T13:52:58Z",
      "side": 1,
      "message": "rtc::ArrayView\u003cconst T\u003e is often better parameter type than const std::vector\u003cT\u003e\u0026\n(the function only traverse the array)",
      "range": {
        "startLine": 59,
        "startChar": 4,
        "endLine": 59,
        "endChar": 60
      },
      "revId": "7c06fefe7579c653877d4b3a6003014fda1cd97a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b1e3f70f_2b4cfdb2",
        "filename": "pc/media_session.cc",
        "patchSetId": 8
      },
      "lineNbr": 65,
      "author": {
        "id": 5634
      },
      "writtenOn": "2020-06-08T07:24:09Z",
      "side": 1,
      "message": "any reason to allocate the extra variable instead of just wrapping push_back() around the constructor call? This is pass-by-value storage, no lifetime considerations.",
      "revId": "7c06fefe7579c653877d4b3a6003014fda1cd97a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5644e5fe_e70f36a1",
        "filename": "pc/media_session.cc",
        "patchSetId": 8
      },
      "lineNbr": 65,
      "author": {
        "id": 5019
      },
      "writtenOn": "2020-06-08T13:52:58Z",
      "side": 1,
      "message": "or\nexts.emplace_back(extension_with_direction.uri, extension_with_direction.preferred_id.value_or(1));\n\n(to also avoid extra move on the webrtc::RtpExtension)",
      "parentUuid": "b1e3f70f_2b4cfdb2",
      "revId": "7c06fefe7579c653877d4b3a6003014fda1cd97a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d4774d2e_fcebf371",
        "filename": "pc/media_session.cc",
        "patchSetId": 8
      },
      "lineNbr": 65,
      "author": {
        "id": 9515
      },
      "writtenOn": "2020-06-08T18:09:41Z",
      "side": 1,
      "message": "Fixed.",
      "parentUuid": "5644e5fe_e70f36a1",
      "revId": "7c06fefe7579c653877d4b3a6003014fda1cd97a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "947ad902_ef934a16",
        "filename": "pc/media_session.cc",
        "patchSetId": 8
      },
      "lineNbr": 71,
      "author": {
        "id": 5634
      },
      "writtenOn": "2020-06-08T07:24:09Z",
      "side": 1,
      "message": "\"Unstopped\" is an ugly word, though. Can you call it DesiredRtpHeaderExtensionCapabilities?",
      "revId": "7c06fefe7579c653877d4b3a6003014fda1cd97a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "141149de_3800a572",
        "filename": "pc/media_session.cc",
        "patchSetId": 8
      },
      "lineNbr": 71,
      "author": {
        "id": 9515
      },
      "writtenOn": "2020-06-08T18:09:41Z",
      "side": 1,
      "message": "Hm. I\u0027m not sure I agree with that one. Why would \"not stopped\" be equal to \"desired\"? On the other hand, \"unstopped\" is in the thesaurus, and sings better than \"NotStopped\" IMO.\nAs a backup I could be strong-armed to accept \"negotiable\", what do you think about that?",
      "parentUuid": "947ad902_ef934a16",
      "revId": "7c06fefe7579c653877d4b3a6003014fda1cd97a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0c4c32bc_e334fef5",
        "filename": "pc/media_session.cc",
        "patchSetId": 8
      },
      "lineNbr": 71,
      "author": {
        "id": 5634
      },
      "writtenOn": "2020-06-10T09:37:00Z",
      "side": 1,
      "message": "I think of \"stopped\" as the mechanism, \"desired\" as what we want to have - the result of applying the mechanism. But I\u0027m willing to grant you this one.",
      "parentUuid": "141149de_3800a572",
      "revId": "7c06fefe7579c653877d4b3a6003014fda1cd97a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0f703371_43bade4b",
        "filename": "pc/media_session.cc",
        "patchSetId": 8
      },
      "lineNbr": 73,
      "author": {
        "id": 5634
      },
      "writtenOn": "2020-06-08T07:24:09Z",
      "side": 1,
      "message": "I think you can do this in one line or so using \"return std::filter(capabilities,\n  [](cap) { return cap.direction \u003d\u003d RtpTransceiverDirection::kStopped; })\" or something magical like that. Passing vectors by value is usually a Bad Habit.",
      "revId": "7c06fefe7579c653877d4b3a6003014fda1cd97a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f0a09ffa_6701bc63",
        "filename": "pc/media_session.cc",
        "patchSetId": 8
      },
      "lineNbr": 73,
      "author": {
        "id": 5019
      },
      "writtenOn": "2020-06-08T13:52:58Z",
      "side": 1,
      "message": "in modern c++ passing (vector) by value is a good habit,\nmostly thanks to copy elision (https://abseil.io/tips/117),\nbut also thanks to cheap move constructor.\n\npassing by value is recommended by style guide\nhttps://google.github.io/styleguide/cppguide.html#Inputs_and_Outputs\n\n\"Prefer using return values over output parameters: they improve readability, and often provide the same or better performance.\"\n\n\nOn the other side, the magic for removing elements from the vector (without multiple shifting) is\n\ncapabilities.erase(std::remove_if(capabilities.begin(), capabilities.end(), [](const webrtc::RtpHeaderExtensionCapability\u0026 capability) {\n  return capability.direction \u003d\u003d RTPTransceiverDirection::kStopped;\n}), capabilities.end());\n\nhttps://en.cppreference.com/w/cpp/algorithm/remove",
      "parentUuid": "0f703371_43bade4b",
      "revId": "7c06fefe7579c653877d4b3a6003014fda1cd97a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "94951451_ee18c337",
        "filename": "pc/media_session.cc",
        "patchSetId": 8
      },
      "lineNbr": 73,
      "author": {
        "id": 9515
      },
      "writtenOn": "2020-06-08T18:09:41Z",
      "side": 1,
      "message": "Thanks - put your snippet in Danil.",
      "parentUuid": "f0a09ffa_6701bc63",
      "revId": "7c06fefe7579c653877d4b3a6003014fda1cd97a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2a8c5882_1b24ff65",
        "filename": "pc/media_session.h",
        "patchSetId": 8
      },
      "lineNbr": 208,
      "author": {
        "id": 5634
      },
      "writtenOn": "2020-06-08T07:24:09Z",
      "side": 1,
      "message": "I know it\u0027s a pain to wirite, but can we call this GetOfferedRtpHeaderExtensionsWithIds?",
      "revId": "7c06fefe7579c653877d4b3a6003014fda1cd97a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e126937d_d88ae3e8",
        "filename": "pc/media_session.h",
        "patchSetId": 8
      },
      "lineNbr": 208,
      "author": {
        "id": 9515
      },
      "writtenOn": "2020-06-08T18:09:41Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "2a8c5882_1b24ff65",
      "revId": "7c06fefe7579c653877d4b3a6003014fda1cd97a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a50b18f3_5970a1d0",
        "filename": "pc/media_session_unittest.cc",
        "patchSetId": 8
      },
      "lineNbr": 1989,
      "author": {
        "id": 5634
      },
      "writtenOn": "2020-06-08T07:24:09Z",
      "side": 1,
      "message": "can you make the extension IDs slightly less regular?\nIf something at some point assumes that the numbers are 1, 2, 3, 4 - the test should fail.",
      "revId": "7c06fefe7579c653877d4b3a6003014fda1cd97a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c3a58a02_48cfc094",
        "filename": "pc/media_session_unittest.cc",
        "patchSetId": 8
      },
      "lineNbr": 1989,
      "author": {
        "id": 9515
      },
      "writtenOn": "2020-06-08T18:09:41Z",
      "side": 1,
      "message": "Done.",
      "parentUuid": "a50b18f3_5970a1d0",
      "revId": "7c06fefe7579c653877d4b3a6003014fda1cd97a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b62593a2_19d3c762",
        "filename": "pc/rtp_transceiver.cc",
        "patchSetId": 8
      },
      "lineNbr": 374,
      "author": {
        "id": 5634
      },
      "writtenOn": "2020-06-08T07:24:09Z",
      "side": 1,
      "message": "MID for unified-plan is the only mandatory-to-use extension I know of.\n\nThis is already done below - you call it \"step 2.5\", but it\u0027s actually step 2.4.\n\nThe other mandatory-to-use extension is video orientation, referenced in https://tools.ietf.org/html/draft-ietf-rtcweb-video-06#section-4; only applicable to video.",
      "revId": "7c06fefe7579c653877d4b3a6003014fda1cd97a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "eaa6deb2_86ede7c1",
        "filename": "pc/rtp_transceiver.cc",
        "patchSetId": 8
      },
      "lineNbr": 374,
      "author": {
        "id": 9515
      },
      "writtenOn": "2020-06-08T18:09:41Z",
      "side": 1,
      "message": "Thanks, added video orientation.\nChanged to handle both 2.4 and 2.5 in the same if statement.\nI reordered the 2.2 section before the old 2.5 section. That will treat the unsupported direction for video orientation only when it\u0027s in the transceiver for video transceivers.\n\nAs a transceiver can send and/or receive video, to avoid coupling the logic here with the transceiver direction (which can change), I interpret https://tools.ietf.org/html/draft-ietf-rtcweb-rtp-usage-26#page-17 section 5.2.4 and 5.2.5 as that the extensions need to be kSendRecv, or we throw an error. Otherwise strangeties like\n\n  transceiver.setDirection(sendrecv)\n  transceiver.setOffered(orientation:sendonly) -\u003e ok\n  transceiver.setDirection(recvonly)\n  transceiver.setOffered(orientation:sendonly) -\u003e exception\n\nare possible. Wdyt?",
      "parentUuid": "b62593a2_19d3c762",
      "revId": "7c06fefe7579c653877d4b3a6003014fda1cd97a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1c73d8a1_b35a58a3",
        "filename": "pc/rtp_transceiver.cc",
        "patchSetId": 8
      },
      "lineNbr": 374,
      "author": {
        "id": 5634
      },
      "writtenOn": "2020-06-10T09:37:00Z",
      "side": 1,
      "message": "Let\u0027s make them sendrecv for now. If someone wants directional, they can try to convince us they know what it means.\n(directional capabilities are kind of silly anyway. Overengineered.)",
      "parentUuid": "eaa6deb2_86ede7c1",
      "revId": "7c06fefe7579c653877d4b3a6003014fda1cd97a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a208f3a6_3dab18b9",
        "filename": "pc/rtp_transceiver_unittest.cc",
        "patchSetId": 8
      },
      "lineNbr": 157,
      "author": {
        "id": 5634
      },
      "writtenOn": "2020-06-08T07:24:09Z",
      "side": 1,
      "message": "Here you could add a comment - it\u0027s hard to see when reading it that extensions[2] is the MID extension, and without that, you can\u0027t see the difference between this and AcceptsStoppedExtension.",
      "revId": "7c06fefe7579c653877d4b3a6003014fda1cd97a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3d432e40_0bafefd5",
        "filename": "pc/rtp_transceiver_unittest.cc",
        "patchSetId": 8
      },
      "lineNbr": 157,
      "author": {
        "id": 9515
      },
      "writtenOn": "2020-06-08T18:09:41Z",
      "side": 1,
      "message": "Good point - added, and also a case for the video orientation.",
      "parentUuid": "a208f3a6_3dab18b9",
      "revId": "7c06fefe7579c653877d4b3a6003014fda1cd97a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    }
  ]
}