{
  "comments": [
    {
      "key": {
        "uuid": "78e8e034_5d5a44cf",
        "filename": "api/transport/network_types.h",
        "patchSetId": 1
      },
      "lineNbr": 133,
      "author": {
        "id": 5150
      },
      "writtenOn": "2018-10-25T09:45:44Z",
      "side": 1,
      "message": "nit: received",
      "range": {
        "startLine": 133,
        "startChar": 31,
        "endLine": 133,
        "endChar": 39
      },
      "revId": "1251898c2cc51238b292e14650e67e97aec42971",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8e2456cb_a6c107d4",
        "filename": "api/transport/network_types.h",
        "patchSetId": 1
      },
      "lineNbr": 133,
      "author": {
        "id": 5531
      },
      "writtenOn": "2018-10-25T10:02:31Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "78e8e034_5d5a44cf",
      "range": {
        "startLine": 133,
        "startChar": 31,
        "endLine": 133,
        "endChar": 39
      },
      "revId": "1251898c2cc51238b292e14650e67e97aec42971",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ad174a3a_9332f4db",
        "filename": "modules/congestion_controller/goog_cc/delay_based_bwe.cc",
        "patchSetId": 1
      },
      "lineNbr": 168,
      "author": {
        "id": 5150
      },
      "writtenOn": "2018-10-25T09:45:44Z",
      "side": 1,
      "message": "As a followup, you might want to merge OnLongFeedback into this function.",
      "range": {
        "startLine": 168,
        "startChar": 11,
        "endLine": 168,
        "endChar": 30
      },
      "revId": "1251898c2cc51238b292e14650e67e97aec42971",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e97f445f_40c4c6c8",
        "filename": "modules/congestion_controller/goog_cc/delay_based_bwe.cc",
        "patchSetId": 1
      },
      "lineNbr": 168,
      "author": {
        "id": 5531
      },
      "writtenOn": "2018-10-25T10:02:31Z",
      "side": 1,
      "message": "It\u0027s currently used by the legacy send side congestion controller. But yes, when we get rid of that it can be removed.",
      "parentUuid": "ad174a3a_9332f4db",
      "range": {
        "startLine": 168,
        "startChar": 11,
        "endLine": 168,
        "endChar": 30
      },
      "revId": "1251898c2cc51238b292e14650e67e97aec42971",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f8640078_50f2ebce",
        "filename": "modules/congestion_controller/rtp/transport_feedback_adapter.cc",
        "patchSetId": 1
      },
      "lineNbr": 169,
      "author": {
        "id": 5150
      },
      "writtenOn": "2018-10-25T09:45:44Z",
      "side": 1,
      "message": "Should sendless_arrival_times only be set if there are no packets with send time? What if there are both packets with and without send times?",
      "range": {
        "startLine": 169,
        "startChar": 8,
        "endLine": 169,
        "endChar": 30
      },
      "revId": "1251898c2cc51238b292e14650e67e97aec42971",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f29b58d2_21e20456",
        "filename": "modules/congestion_controller/rtp/transport_feedback_adapter.cc",
        "patchSetId": 1
      },
      "lineNbr": 169,
      "author": {
        "id": 5531
      },
      "writtenOn": "2018-10-25T10:02:31Z",
      "side": 1,
      "message": "We currently don\u0027t handle that case (we ignore packets without send time history if we have packet with valid history).\n\nI think it\u0027s exceptional enough that we might want to signal even less, or even ignore it. But for now I just chose to preserve current behavior in a way that is easy to ignore. That\u0027s why I want to separate the two cases. It makes it easier to reason about the code (either we had only late packets, and do recovery, or we do normal operation)",
      "parentUuid": "f8640078_50f2ebce",
      "range": {
        "startLine": 169,
        "startChar": 8,
        "endLine": 169,
        "endChar": 30
      },
      "revId": "1251898c2cc51238b292e14650e67e97aec42971",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "16561294_786637d7",
        "filename": "modules/congestion_controller/rtp/transport_feedback_adapter.cc",
        "patchSetId": 1
      },
      "lineNbr": 169,
      "author": {
        "id": 5150
      },
      "writtenOn": "2018-10-25T11:17:28Z",
      "side": 1,
      "message": "It is not clear to me that we want to remove it.\n\nIn the case of the analyzer, we want to plot feedback that arrives too late. One could also imagine estimators where one would increase the \"uncertainty\" of the estimate if packets arrive too late, or print warning about late feedback.",
      "parentUuid": "f29b58d2_21e20456",
      "range": {
        "startLine": 169,
        "startChar": 8,
        "endLine": 169,
        "endChar": 30
      },
      "revId": "1251898c2cc51238b292e14650e67e97aec42971",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "30b7db59_56d31b90",
        "filename": "modules/congestion_controller/rtp/transport_feedback_adapter.cc",
        "patchSetId": 1
      },
      "lineNbr": 169,
      "author": {
        "id": 5531
      },
      "writtenOn": "2018-10-25T13:04:34Z",
      "side": 1,
      "message": "If feedback commonly arrives late, I think we should increase the feedback history to avoid the problem, the cost of maintaining a longer send time history is low compared to the extra complexity of such handling code. As I see it, we should handle the event gracefully, but not optimally, since the optimal way to handle it would be to maintain a longer history.\n\nAnd given that we avoid this happening commonly, the analyzer wont need detailed information about, just a simple event would be enough.\n\nOs is there a good reason why we would not want to save a long enough send time history?",
      "parentUuid": "16561294_786637d7",
      "range": {
        "startLine": 169,
        "startChar": 8,
        "endLine": 169,
        "endChar": 30
      },
      "revId": "1251898c2cc51238b292e14650e67e97aec42971",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2b5a25bb_e406ff81",
        "filename": "modules/congestion_controller/rtp/transport_feedback_adapter.cc",
        "patchSetId": 1
      },
      "lineNbr": 169,
      "author": {
        "id": 5150
      },
      "writtenOn": "2018-10-26T09:20:00Z",
      "side": 1,
      "message": "In the analyzer, this happens a lot. Not sure why. It\u0027s probably not actual delay, so let\u0027s ignore that for the moment.\n\nImo, it is surprising and possibly error prone to have a struct that\u0027s meant to convey information about events A and B, but then it turns out that B might not be set even if B occurs but only if A also occurs and the struct is created in a special way. When someone refactors the code in the future, they might not be aware of the special conditions required to set the fields.\n\nI think the natural way is; A is set is A occurs, B is set if B occurs, A and B are set if A and B occurs. In this case, I don\u0027t think there is any significant cost to setting both the normal packet feedback and the late feedback vector, and let the consumer decide which is interesting.",
      "parentUuid": "30b7db59_56d31b90",
      "range": {
        "startLine": 169,
        "startChar": 8,
        "endLine": 169,
        "endChar": 30
      },
      "revId": "1251898c2cc51238b292e14650e67e97aec42971",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    }
  ]
}