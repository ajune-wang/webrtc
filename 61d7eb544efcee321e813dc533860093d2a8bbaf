{
  "comments": [
    {
      "key": {
        "uuid": "1769ee13_b440dc91",
        "filename": "api/candidate.h",
        "patchSetId": 1
      },
      "lineNbr": 128,
      "author": {
        "id": 5039
      },
      "writtenOn": "2018-06-25T22:16:21Z",
      "side": 1,
      "message": "Add a brief comment.",
      "revId": "61d7eb544efcee321e813dc533860093d2a8bbaf",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a9aec7cd_1796acae",
        "filename": "api/candidate.h",
        "patchSetId": 1
      },
      "lineNbr": 128,
      "author": {
        "id": 6646
      },
      "writtenOn": "2018-06-26T00:46:36Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1769ee13_b440dc91",
      "revId": "61d7eb544efcee321e813dc533860093d2a8bbaf",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "22aa17a3_51d03ad3",
        "filename": "p2p/base/stun.h",
        "patchSetId": 1
      },
      "lineNbr": 597,
      "author": {
        "id": 5887
      },
      "writtenOn": "2018-06-25T21:59:34Z",
      "side": 1,
      "message": "I have a couple of questions regarding the attribute type values:\n1. How is this number determined? In addition to the ICE and STUN RFCs, are there other (maybe internal) references I should be aware of to make sure the numeric value below does not conflict with some other extended attributes?\n2. Do I need any public announcement of the new field so that there is no conflict in the future from endpoints with different implementation?",
      "range": {
        "startLine": 597,
        "startChar": 27,
        "endLine": 597,
        "endChar": 33
      },
      "revId": "61d7eb544efcee321e813dc533860093d2a8bbaf",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "253ee5d8_12500cd0",
        "filename": "p2p/base/stun.h",
        "patchSetId": 1
      },
      "lineNbr": 597,
      "author": {
        "id": 5039
      },
      "writtenOn": "2018-06-25T22:16:21Z",
      "side": 1,
      "message": "1. If I understand correctly, the IETF is ultimately responsible for standardizing the number. Here\u0027s a page with all the currently assigned numbers: https://www.iana.org/assignments/stun-parameters/stun-parameters.xhtml\n\nOf course there\u0027s already some non-standard numbers here, so maybe that list is not super useful.\n\n2. I\u0027ll defer to Taylor/Peter who may know more here.",
      "parentUuid": "22aa17a3_51d03ad3",
      "range": {
        "startLine": 597,
        "startChar": 27,
        "endLine": 597,
        "endChar": 33
      },
      "revId": "61d7eb544efcee321e813dc533860093d2a8bbaf",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "855b9f56_76449fa7",
        "filename": "p2p/base/stun.h",
        "patchSetId": 1
      },
      "lineNbr": 597,
      "author": {
        "id": 6646
      },
      "writtenOn": "2018-06-26T00:46:36Z",
      "side": 1,
      "message": "Thanks for the pointer to the list! At least, it seems numbers above 0xC003 is unassigned in the standard space",
      "parentUuid": "253ee5d8_12500cd0",
      "range": {
        "startLine": 597,
        "startChar": 27,
        "endLine": 597,
        "endChar": 33
      },
      "revId": "61d7eb544efcee321e813dc533860093d2a8bbaf",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0cbf005a_83519911",
        "filename": "rtc_base/network.cc",
        "patchSetId": 1
      },
      "lineNbr": 344,
      "author": {
        "id": 5039
      },
      "writtenOn": "2018-06-25T22:16:21Z",
      "side": 1,
      "message": "This could change the interface_ids for existing networks (if net-\u003ename() is \u003c an existing network). Is that ok?",
      "revId": "61d7eb544efcee321e813dc533860093d2a8bbaf",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2f712410_dc61800c",
        "filename": "rtc_base/network.cc",
        "patchSetId": 1
      },
      "lineNbr": 344,
      "author": {
        "id": 6646
      },
      "writtenOn": "2018-06-25T22:28:06Z",
      "side": 1,
      "message": "Hmm, good catch, and I realize this is problematic. The std::set::insert seems to reorder elements after insertion: \"Internally, set containers keep all their elements sorted following the criterion specified by its comparison object.\" (http://www.cplusplus.com/reference/set/set/insert/)",
      "parentUuid": "0cbf005a_83519911",
      "revId": "61d7eb544efcee321e813dc533860093d2a8bbaf",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "198d199b_1c281b58",
        "filename": "rtc_base/network.cc",
        "patchSetId": 1
      },
      "lineNbr": 344,
      "author": {
        "id": 6646
      },
      "writtenOn": "2018-06-26T00:46:36Z",
      "side": 1,
      "message": "Thought std::unordered_set has the desired behavior in a previous patch but it turns out using it is still wrong. The interface ids are explicitly stored instead in the new patch.",
      "parentUuid": "2f712410_dc61800c",
      "revId": "61d7eb544efcee321e813dc533860093d2a8bbaf",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c84db206_8758f583",
        "filename": "rtc_base/network.cc",
        "patchSetId": 1
      },
      "lineNbr": 344,
      "author": {
        "id": 5039
      },
      "writtenOn": "2018-06-26T04:09:27Z",
      "side": 1,
      "message": "An alternative is to use a std::vector and manually check if the network already exists before adding it. But the solution you have now works, so up to you which one you prefer.",
      "parentUuid": "198d199b_1c281b58",
      "revId": "61d7eb544efcee321e813dc533860093d2a8bbaf",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    }
  ]
}