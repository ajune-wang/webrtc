{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "4cc9fa3e_f5f83af5",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5963
      },
      "writtenOn": "2021-01-25T11:15:29Z",
      "side": 1,
      "message": "Probably it is not the best way of dealing with the root cause, but at least it prevents the seg faults. ",
      "revId": "472fb90fcd927e4bb3b0deefc818b8edcf19564d",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1df2a786_a4f61af2",
        "filename": "video/encoder_bitrate_adjuster.cc",
        "patchSetId": 1
      },
      "lineNbr": 90,
      "author": {
        "id": 5019
      },
      "writtenOn": "2021-01-25T16:23:59Z",
      "side": 1,
      "message": "This block of code is responsible for creating overshoot detectors for all active layers.\nWhat scenario does it fail to do it\u0027s job that you want to add extra checks below?\nCan you add such scenario to the encoder_bitrate_adjuster unittests?\n\n(I think the bug is not below, but somewhere in this block. \nOr, more likely, this class makes some assumptions about the `rates` that in some new scenario become false)",
      "revId": "472fb90fcd927e4bb3b0deefc818b8edcf19564d",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d0b146d5_d4cbf146",
        "filename": "video/encoder_bitrate_adjuster.cc",
        "patchSetId": 1
      },
      "lineNbr": 90,
      "author": {
        "id": 5963
      },
      "writtenOn": "2021-01-25T17:00:32Z",
      "side": 1,
      "message": "As explained on thye bug, I have been experiencing random crashes due to  overshoot_detectors_[si][ti] and  overshoot_detectors_[si][0] being null (as explained on the bug).\n\nI am not sure what is the underlying cause, but at least this checks prevents chrome from crashing.",
      "parentUuid": "1df2a786_a4f61af2",
      "revId": "472fb90fcd927e4bb3b0deefc818b8edcf19564d",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6275695d_f9aa6479",
        "filename": "video/encoder_bitrate_adjuster.cc",
        "patchSetId": 1
      },
      "lineNbr": 90,
      "author": {
        "id": 5524
      },
      "writtenOn": "2021-01-26T10:58:27Z",
      "side": 1,
      "message": "The only way I can see that would trigger this is if the active temporal layers aren\u0027t continuous, which this code is assuming.\nE.g. if tl0 has no bitrate or fps, but tl1 and tl2 do - which is what your comment in the bug suggests.\nThat sounds like a bug in bps/fps allocation, or is that somehow valid for av1?\nIn any case, need to think about how to validate that condition better here.",
      "parentUuid": "d0b146d5_d4cbf146",
      "revId": "472fb90fcd927e4bb3b0deefc818b8edcf19564d",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "At least one maximum vote for label \u0027Code-Review\u0027 is required"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader AND -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader AND -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Code-Review=MAX,user=non_uploader","label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1"]}
      },
      "patchSetCommitId": "472fb90fcd927e4bb3b0deefc818b8edcf19564d",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}