{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "ee4a4cb6_59ddc710",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 7
      },
      "lineNbr": 0,
      "author": {
        "id": 5087
      },
      "writtenOn": "2022-10-12T13:03:19Z",
      "side": 1,
      "message": "I see the bot_update continues, I will follow up later on that",
      "revId": "3a13d4219d3b904c318260be3e336988a3d43b38",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "eeb4a035_6264c5cb",
        "filename": "api/test/peerconnection_quality_test_fixture.cc",
        "patchSetId": 7
      },
      "lineNbr": 158,
      "author": {
        "id": 5019
      },
      "writtenOn": "2022-10-12T12:46:57Z",
      "side": 1,
      "message": "personally I like to combine initialization with checking it is valid to reduce scope of the optional to when it always has value, but afaik there are no official recommendation either way. Pick one you find nicer.\n\ni.e. may be.\nif (absl::optional\u003cstd::string\u003e frame_ids_file \u003d\n      GetInputFrameIdsDumpFileName(stream_label)) {\n  writer \u003d CreateVideoFrameWithIdsWriter(std::move(writer), *frame_ids_file);\n}\n\nor, if you like to be explicit\nif (absl::optional\u003cstd::string\u003e frame_ids_file \u003d\n      GetInputFrameIdsDumpFileName(stream_label); frame_ids_file.has_value()) {\n  writer \u003d CreateVideoFrameWithIdsWriter(std::move(writer), *frame_ids_file);\n}",
      "range": {
        "startLine": 156,
        "startChar": 0,
        "endLine": 158,
        "endChar": 35
      },
      "revId": "3a13d4219d3b904c318260be3e336988a3d43b38",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "18683b80_fd2dc4fd",
        "filename": "test/pc/e2e/analyzer/video/video_dumping.cc",
        "patchSetId": 7
      },
      "lineNbr": 110,
      "author": {
        "id": 5019
      },
      "writtenOn": "2022-10-12T12:46:57Z",
      "side": 1,
      "message": "or \nstd::vector\u003cstd::unique_ptr\u003ctest::VideoFrameWriter\u003e\u003e requested_writers \u003d {\n  std::move(video_writer_delegate),\n  std::make_unique\u003cVideoFrameIdsWriter\u003e(frame_ids_dump_file_name)};",
      "range": {
        "startLine": 107,
        "startChar": 2,
        "endLine": 110,
        "endChar": 71
      },
      "revId": "3a13d4219d3b904c318260be3e336988a3d43b38",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "057c5804_366e4389",
        "filename": "test/pc/e2e/analyzer/video/video_dumping_test.cc",
        "patchSetId": 7
      },
      "lineNbr": 156,
      "author": {
        "id": 5019
      },
      "writtenOn": "2022-10-12T12:46:57Z",
      "side": 1,
      "message": "There no longer need to wrap frame_writer into unique_ptr\n\nhttps://abseil.io/tips/187\n\ni.e. \n```\ntest::Y4mVideoFrameWriterImpl frame_writer(\n            std::string(video_filename_),\n            /*width\u003d*/2, /*height\u003d*/2, /*fps\u003d*/2);\nVideoWriter writer(\u0026frame_writer, /*sampling_modulo\u003d*/1);\n...\nframe_writer.Close();\n```",
      "revId": "3a13d4219d3b904c318260be3e336988a3d43b38",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0508dc5d_f182f0fa",
        "filename": "test/pc/e2e/analyzer/video/video_dumping_test.cc",
        "patchSetId": 7
      },
      "lineNbr": 156,
      "author": {
        "id": 6337
      },
      "writtenOn": "2022-10-12T13:04:27Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "057c5804_366e4389",
      "revId": "3a13d4219d3b904c318260be3e336988a3d43b38",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    }
  ]
}