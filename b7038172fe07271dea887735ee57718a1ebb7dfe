{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "c49b7258_079590c9",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 18
      },
      "lineNbr": 0,
      "author": {
        "id": 5125
      },
      "writtenOn": "2024-05-06T17:39:37Z",
      "side": 1,
      "message": "Thanks for this CL.\nI agree that this is quite an improvement from prior code and you definitely convinced me of the value of this approach.\n\nI have only some minor comments, where the largest one probably is the question about the stride parameter.",
      "revId": "b7038172fe07271dea887735ee57718a1ebb7dfe",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7687feb0_c80f4a17",
        "filename": "api/audio/audio_view.h",
        "patchSetId": 18
      },
      "lineNbr": 116,
      "author": {
        "id": 5125
      },
      "writtenOn": "2024-05-06T17:39:37Z",
      "side": 1,
      "message": "For audio frames, it would be nice to store them as int\u0027s since that\u0027d cover any number of samples used in practice and avoid issues with signed, unsigned arithmetics",
      "range": {
        "startLine": 114,
        "startChar": 2,
        "endLine": 116,
        "endChar": 18
      },
      "revId": "b7038172fe07271dea887735ee57718a1ebb7dfe",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8752aa3e_6cc6c342",
        "filename": "api/audio/audio_view.h",
        "patchSetId": 18
      },
      "lineNbr": 116,
      "author": {
        "id": 5508
      },
      "writtenOn": "2024-05-13T07:51:10Z",
      "side": 1,
      "message": "OK, going through the code I got the impression that more recent code was using `size_t` for values that should never be negative - is that not the case perhaps?\n\nAlso, I was thinking that making that distinction between a specific value (e.g. sample or channel count vs an error value) also reduces cases where we use a return value to be two things. There are several cases of \"int GetMyValue()\" where the caller is forced to also check for negative values (which are illegal). If we stick to `int`, it seems to me that we leave more room for ambiguity. Wdyt?",
      "parentUuid": "7687feb0_c80f4a17",
      "range": {
        "startLine": 114,
        "startChar": 2,
        "endLine": 116,
        "endChar": 18
      },
      "revId": "b7038172fe07271dea887735ee57718a1ebb7dfe",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "94601141_f164ef03",
        "filename": "api/audio/audio_view.h",
        "patchSetId": 18
      },
      "lineNbr": 116,
      "author": {
        "id": 5125
      },
      "writtenOn": "2024-05-13T18:12:19Z",
      "side": 1,
      "message": "Good points!\nLet\u0027s go with size_t, at least for now.",
      "parentUuid": "8752aa3e_6cc6c342",
      "range": {
        "startLine": 114,
        "startChar": 2,
        "endLine": 116,
        "endChar": 18
      },
      "revId": "b7038172fe07271dea887735ee57718a1ebb7dfe",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ad85d885_f4fabfec",
        "filename": "api/audio/audio_view.h",
        "patchSetId": 18
      },
      "lineNbr": 116,
      "author": {
        "id": 5125
      },
      "writtenOn": "2024-05-24T12:08:42Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "94601141_f164ef03",
      "range": {
        "startLine": 114,
        "startChar": 2,
        "endLine": 116,
        "endChar": 18
      },
      "revId": "b7038172fe07271dea887735ee57718a1ebb7dfe",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ce381cde_38bfb1f1",
        "filename": "api/audio/audio_view.h",
        "patchSetId": 18
      },
      "lineNbr": 132,
      "author": {
        "id": 5125
      },
      "writtenOn": "2024-05-06T17:39:37Z",
      "side": 1,
      "message": "Do we have any examples in the code where stride would not match the number of channels?",
      "range": {
        "startLine": 131,
        "startChar": 5,
        "endLine": 132,
        "endChar": 69
      },
      "revId": "b7038172fe07271dea887735ee57718a1ebb7dfe",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e10b6c7d_894f86f7",
        "filename": "api/audio/audio_view.h",
        "patchSetId": 18
      },
      "lineNbr": 132,
      "author": {
        "id": 5508
      },
      "writtenOn": "2024-05-13T07:51:10Z",
      "side": 1,
      "message": "I\u0027m not sure. There is some code that manages these buffers as a `std::vector\u003c\u003e` of pointers to discrete buffer allocations per channel. What I was thinking here was to have the concept of a stride which could allow channels to be shrunk without the channel pointers having to change, but perhaps that\u0027s not a practical use case. \n\nActually, storing pointers to such channels rather than indices should probably be an anti pattern.\n\nShould I remove the stride related member and method?",
      "parentUuid": "ce381cde_38bfb1f1",
      "range": {
        "startLine": 131,
        "startChar": 5,
        "endLine": 132,
        "endChar": 69
      },
      "revId": "b7038172fe07271dea887735ee57718a1ebb7dfe",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d7cbcdb8_bb4f2a5d",
        "filename": "api/audio/audio_view.h",
        "patchSetId": 18
      },
      "lineNbr": 132,
      "author": {
        "id": 5125
      },
      "writtenOn": "2024-05-13T18:12:19Z",
      "side": 1,
      "message": "Ah, good point! I\u0027ve not thought about that way of reducing channels.\nIt is a bit restrictive though (requires the reduction to be map to a stride factor) so I\u0027m not sure about how many current usecases there are.\n\nRegarding storing stacked (non-interleaved) buffers as pointers to pointers (I think the vectors of pointers are mainly in test code, right?) is definitely a tricky aspect and I too think it is an anti-pattern. From what I know that type of audio is fairly well contained within the AudioBuffer type (that neither being perfect but still better than pointers to pointers) so I don\u0027t see an immediate use of the stride there.\n\nYes, my suggestion would be to remove the stride related member and method and reintroduce it when a clear usecase is identified.",
      "parentUuid": "e10b6c7d_894f86f7",
      "range": {
        "startLine": 131,
        "startChar": 5,
        "endLine": 132,
        "endChar": 69
      },
      "revId": "b7038172fe07271dea887735ee57718a1ebb7dfe",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4408da21_19c10254",
        "filename": "api/audio/audio_view.h",
        "patchSetId": 18
      },
      "lineNbr": 132,
      "author": {
        "id": 5125
      },
      "writtenOn": "2024-05-24T12:08:42Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "d7cbcdb8_bb4f2a5d",
      "range": {
        "startLine": 131,
        "startChar": 5,
        "endLine": 132,
        "endChar": 69
      },
      "revId": "b7038172fe07271dea887735ee57718a1ebb7dfe",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d89f2bc8_1ae92079",
        "filename": "api/audio/audio_view.h",
        "patchSetId": 18
      },
      "lineNbr": 175,
      "author": {
        "id": 5125
      },
      "writtenOn": "2024-05-06T17:39:37Z",
      "side": 1,
      "message": "+1\nAlso please see above regarding option to change these to ints.",
      "range": {
        "startLine": 174,
        "startChar": 0,
        "endLine": 175,
        "endChar": 79
      },
      "revId": "b7038172fe07271dea887735ee57718a1ebb7dfe",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ff97194f_9eefda5a",
        "filename": "api/audio/audio_view.h",
        "patchSetId": 18
      },
      "lineNbr": 175,
      "author": {
        "id": 5125
      },
      "writtenOn": "2024-05-13T18:12:19Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "d89f2bc8_1ae92079",
      "range": {
        "startLine": 174,
        "startChar": 0,
        "endLine": 175,
        "endChar": 79
      },
      "revId": "b7038172fe07271dea887735ee57718a1ebb7dfe",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8076db36_149f5cb8",
        "filename": "api/audio/audio_view.h",
        "patchSetId": 18
      },
      "lineNbr": 245,
      "author": {
        "id": 5125
      },
      "writtenOn": "2024-05-06T17:39:37Z",
      "side": 1,
      "message": "I\u0027m not convinced the naming is optimal here.\nThe name \"CopyView\" to me indicates that the view is copied, but this instead copies the underlying data.\n\nWould it be possible to name this differently to avoid that ambiguity?",
      "range": {
        "startLine": 245,
        "startChar": 5,
        "endLine": 245,
        "endChar": 13
      },
      "revId": "b7038172fe07271dea887735ee57718a1ebb7dfe",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "78b324d9_3d3403c1",
        "filename": "api/audio/audio_view.h",
        "patchSetId": 18
      },
      "lineNbr": 245,
      "author": {
        "id": 5508
      },
      "writtenOn": "2024-05-13T07:51:10Z",
      "side": 1,
      "message": "Would `CopySamples()` be better?",
      "parentUuid": "8076db36_149f5cb8",
      "range": {
        "startLine": 245,
        "startChar": 5,
        "endLine": 245,
        "endChar": 13
      },
      "revId": "b7038172fe07271dea887735ee57718a1ebb7dfe",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4e3ed28b_f9bfeb70",
        "filename": "api/audio/audio_view.h",
        "patchSetId": 18
      },
      "lineNbr": 245,
      "author": {
        "id": 5125
      },
      "writtenOn": "2024-05-13T18:12:19Z",
      "side": 1,
      "message": "Nice! Yes, that is spot on I think!",
      "parentUuid": "78b324d9_3d3403c1",
      "range": {
        "startLine": 245,
        "startChar": 5,
        "endLine": 245,
        "endChar": 13
      },
      "revId": "b7038172fe07271dea887735ee57718a1ebb7dfe",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7ce356d0_3d537f79",
        "filename": "api/audio/audio_view.h",
        "patchSetId": 18
      },
      "lineNbr": 245,
      "author": {
        "id": 5508
      },
      "writtenOn": "2024-05-21T09:09:48Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4e3ed28b_f9bfeb70",
      "range": {
        "startLine": 245,
        "startChar": 5,
        "endLine": 245,
        "endChar": 13
      },
      "revId": "b7038172fe07271dea887735ee57718a1ebb7dfe",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    }
  ]
}