{
  "comments": [
    {
      "key": {
        "uuid": "8d326ecc_2bd17b96",
        "filename": "modules/audio_coding/neteq/include/neteq.h",
        "patchSetId": 13
      },
      "lineNbr": 153,
      "author": {
        "id": 7015
      },
      "writtenOn": "2019-06-26T12:59:35Z",
      "side": 1,
      "message": "const Clock*",
      "range": {
        "startLine": 153,
        "startChar": 6,
        "endLine": 153,
        "endChar": 11
      },
      "revId": "8665f18c4a20a144ab373b860af688d6b0a85ecf",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "451eed95_d0c9c9f2",
        "filename": "modules/audio_coding/neteq/include/neteq.h",
        "patchSetId": 13
      },
      "lineNbr": 153,
      "author": {
        "id": 8392
      },
      "writtenOn": "2019-06-26T13:56:45Z",
      "side": 1,
      "message": "`Clock` can\u0027t be `const` or we won\u0027t be able to read from it:\n\nhttps://cs.chromium.org/chromium/src/third_party/webrtc/system_wrappers/include/clock.h?l\u003d37\u0026rcl\u003df97f342fd352633ef1b2ced5cf1b340f994be515",
      "parentUuid": "8d326ecc_2bd17b96",
      "range": {
        "startLine": 153,
        "startChar": 6,
        "endLine": 153,
        "endChar": 11
      },
      "revId": "8665f18c4a20a144ab373b860af688d6b0a85ecf",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3397a596_40fe8bd0",
        "filename": "modules/audio_coding/neteq/neteq.cc",
        "patchSetId": 13
      },
      "lineNbr": 42,
      "author": {
        "id": 7015
      },
      "writtenOn": "2019-06-26T12:59:35Z",
      "side": 1,
      "message": "const Clock*",
      "range": {
        "startLine": 42,
        "startChar": 4,
        "endLine": 42,
        "endChar": 9
      },
      "revId": "8665f18c4a20a144ab373b860af688d6b0a85ecf",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "541ac4f6_d53bd2bd",
        "filename": "modules/audio_coding/neteq/neteq.cc",
        "patchSetId": 13
      },
      "lineNbr": 42,
      "author": {
        "id": 8392
      },
      "writtenOn": "2019-06-26T13:56:45Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "3397a596_40fe8bd0",
      "range": {
        "startLine": 42,
        "startChar": 4,
        "endLine": 42,
        "endChar": 9
      },
      "revId": "8665f18c4a20a144ab373b860af688d6b0a85ecf",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "358a3ef2_900fab78",
        "filename": "modules/audio_coding/neteq/neteq_impl.cc",
        "patchSetId": 13
      },
      "lineNbr": 898,
      "author": {
        "id": 7015
      },
      "writtenOn": "2019-06-26T12:59:35Z",
      "side": 1,
      "message": "why do we need this intermediate variable?",
      "range": {
        "startLine": 898,
        "startChar": 17,
        "endLine": 898,
        "endChar": 29
      },
      "revId": "8665f18c4a20a144ab373b860af688d6b0a85ecf",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e53f46fa_d9b05fbd",
        "filename": "modules/audio_coding/neteq/neteq_impl.cc",
        "patchSetId": 13
      },
      "lineNbr": 898,
      "author": {
        "id": 8392
      },
      "writtenOn": "2019-06-26T13:56:45Z",
      "side": 1,
      "message": "Note that `packet_infos` and `last_decoded_packet_infos_` have different types. `packet_infos` is an immutable/internally-ref-counted `RtpPacketInfos` while `last_decoded_packet_infos_` is a `std::vector\u003cRtpPacketInfo\u003e`.",
      "parentUuid": "358a3ef2_900fab78",
      "range": {
        "startLine": 898,
        "startChar": 17,
        "endLine": 898,
        "endChar": 29
      },
      "revId": "8665f18c4a20a144ab373b860af688d6b0a85ecf",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bc04388f_5220bda5",
        "filename": "modules/audio_coding/neteq/neteq_impl.cc",
        "patchSetId": 13
      },
      "lineNbr": 898,
      "author": {
        "id": 7015
      },
      "writtenOn": "2019-06-26T20:03:29Z",
      "side": 1,
      "message": "Right, I indeed missed that. But shouldn\u0027t your approach in patchset 8 be slightly better, I mean\n\naudio_frame-\u003epacket_infos_ \u003d RtpPacketInfos(std::move(last_decoded_packet_infos_))",
      "parentUuid": "e53f46fa_d9b05fbd",
      "range": {
        "startLine": 898,
        "startChar": 17,
        "endLine": 898,
        "endChar": 29
      },
      "revId": "8665f18c4a20a144ab373b860af688d6b0a85ecf",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b68ceeb1_184197fd",
        "filename": "modules/audio_coding/neteq/neteq_impl.cc",
        "patchSetId": 13
      },
      "lineNbr": 898,
      "author": {
        "id": 8392
      },
      "writtenOn": "2019-06-26T20:29:49Z",
      "side": 1,
      "message": "I think that the temp variable increases clarity after we reshuffled the lines. The final implementation should look like:\n\n  // We treat it as if all packets referenced to by |last_decoded_packet_infos_|\n  // were mashed together when creating the samples in |algorithm_buffer_|.\n  RtpPacketInfos packet_infos(std::move(last_decoded_packet_infos_));\n  last_decoded_packet_infos_.clear();\n\n  // Copy samples from |algorithm_buffer_| to |sync_buffer_|.\n  sync_buffer_-\u003ePushBack(*algorithm_buffer_, std::move(packet_infos));\n  packet_infos \u003d {};\n\n  ...\n\n  // Extract data from |sync_buffer_| to |output|.\n  sync_buffer_-\u003eGetNextAudioInterleaved(num_output_samples_per_channel,\n                                        audio_frame,\n                                        \u0026packet_infos);\n  audio_frame-\u003esample_rate_hz_ \u003d fs_hz_;\n  audio_frame-\u003epacket_infos_ \u003d std::move(packet_infos);",
      "parentUuid": "bc04388f_5220bda5",
      "range": {
        "startLine": 898,
        "startChar": 17,
        "endLine": 898,
        "endChar": 29
      },
      "revId": "8665f18c4a20a144ab373b860af688d6b0a85ecf",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "105e0cec_30a29714",
        "filename": "modules/audio_coding/neteq/neteq_impl.h",
        "patchSetId": 13
      },
      "lineNbr": 103,
      "author": {
        "id": 7015
      },
      "writtenOn": "2019-06-26T12:59:35Z",
      "side": 1,
      "message": "const Clock*",
      "range": {
        "startLine": 103,
        "startChar": 8,
        "endLine": 103,
        "endChar": 13
      },
      "revId": "8665f18c4a20a144ab373b860af688d6b0a85ecf",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dd3437b4_fb4e3ead",
        "filename": "modules/audio_coding/neteq/neteq_impl.h",
        "patchSetId": 13
      },
      "lineNbr": 103,
      "author": {
        "id": 8392
      },
      "writtenOn": "2019-06-26T13:56:45Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "105e0cec_30a29714",
      "range": {
        "startLine": 103,
        "startChar": 8,
        "endLine": 103,
        "endChar": 13
      },
      "revId": "8665f18c4a20a144ab373b860af688d6b0a85ecf",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ace88b43_945031f0",
        "filename": "modules/audio_coding/neteq/neteq_impl.h",
        "patchSetId": 13
      },
      "lineNbr": 107,
      "author": {
        "id": 7015
      },
      "writtenOn": "2019-06-26T12:59:35Z",
      "side": 1,
      "message": "const Clock* const",
      "range": {
        "startLine": 107,
        "startChar": 4,
        "endLine": 107,
        "endChar": 9
      },
      "revId": "8665f18c4a20a144ab373b860af688d6b0a85ecf",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d0834cbb_4c216622",
        "filename": "modules/audio_coding/neteq/neteq_impl.h",
        "patchSetId": 13
      },
      "lineNbr": 107,
      "author": {
        "id": 8392
      },
      "writtenOn": "2019-06-26T13:56:45Z",
      "side": 1,
      "message": "Each dependency in this structure is meant to be replaceable by the caller (see the comment for the struct).",
      "parentUuid": "ace88b43_945031f0",
      "range": {
        "startLine": 107,
        "startChar": 4,
        "endLine": 107,
        "endChar": 9
      },
      "revId": "8665f18c4a20a144ab373b860af688d6b0a85ecf",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e8994a10_15e25e75",
        "filename": "modules/audio_coding/neteq/neteq_impl.h",
        "patchSetId": 13
      },
      "lineNbr": 107,
      "author": {
        "id": 7015
      },
      "writtenOn": "2019-06-26T20:03:29Z",
      "side": 1,
      "message": "Sure, but const Clock* should still be fine, right? if I don\u0027t miss anything.",
      "parentUuid": "d0834cbb_4c216622",
      "range": {
        "startLine": 107,
        "startChar": 4,
        "endLine": 107,
        "endChar": 9
      },
      "revId": "8665f18c4a20a144ab373b860af688d6b0a85ecf",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "77ffcb76_8272946b",
        "filename": "modules/audio_coding/neteq/neteq_impl.h",
        "patchSetId": 13
      },
      "lineNbr": 107,
      "author": {
        "id": 8392
      },
      "writtenOn": "2019-06-26T20:29:49Z",
      "side": 1,
      "message": "We can\u0027t do `const Clock*` since `Clock::TimeInMilliseconds()` is non-const.",
      "parentUuid": "e8994a10_15e25e75",
      "range": {
        "startLine": 107,
        "startChar": 4,
        "endLine": 107,
        "endChar": 9
      },
      "revId": "8665f18c4a20a144ab373b860af688d6b0a85ecf",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8bd6736d_86120c4b",
        "filename": "modules/audio_coding/neteq/neteq_impl.h",
        "patchSetId": 13
      },
      "lineNbr": 349,
      "author": {
        "id": 7015
      },
      "writtenOn": "2019-06-26T12:59:35Z",
      "side": 1,
      "message": "const",
      "range": {
        "startLine": 349,
        "startChar": 2,
        "endLine": 349,
        "endChar": 7
      },
      "revId": "8665f18c4a20a144ab373b860af688d6b0a85ecf",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0153c824_01fa9008",
        "filename": "modules/audio_coding/neteq/neteq_impl.h",
        "patchSetId": 13
      },
      "lineNbr": 349,
      "author": {
        "id": 8392
      },
      "writtenOn": "2019-06-26T13:56:45Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "8bd6736d_86120c4b",
      "range": {
        "startLine": 349,
        "startChar": 2,
        "endLine": 349,
        "endChar": 7
      },
      "revId": "8665f18c4a20a144ab373b860af688d6b0a85ecf",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    }
  ]
}