{
  "comments": [
    {
      "key": {
        "uuid": "6e9b1f42_77b0da3a",
        "filename": "api/media_transport_interface.cc",
        "patchSetId": 1
      },
      "lineNbr": 84,
      "author": {
        "id": 5126
      },
      "writtenOn": "2018-11-23T14:06:15Z",
      "side": 1,
      "message": "The best of both worlds!",
      "range": {
        "startLine": 84,
        "startChar": 34,
        "endLine": 84,
        "endChar": 36
      },
      "revId": "34385ac4d903d46c25df4f31e3ee327361cc740a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0f18b77a_0f2e6001",
        "filename": "api/media_transport_interface.cc",
        "patchSetId": 1
      },
      "lineNbr": 98,
      "author": {
        "id": 5126
      },
      "writtenOn": "2018-11-23T14:06:15Z",
      "side": 1,
      "message": "Here too.",
      "range": {
        "startLine": 98,
        "startChar": 53,
        "endLine": 98,
        "endChar": 55
      },
      "revId": "34385ac4d903d46c25df4f31e3ee327361cc740a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d2ed020a_8f95e937",
        "filename": "api/media_transport_interface.cc",
        "patchSetId": 1
      },
      "lineNbr": 100,
      "author": {
        "id": 5126
      },
      "writtenOn": "2018-11-23T14:06:15Z",
      "side": 1,
      "message": "Why is this necessary?",
      "range": {
        "startLine": 100,
        "startChar": 0,
        "endLine": 100,
        "endChar": 39
      },
      "revId": "34385ac4d903d46c25df4f31e3ee327361cc740a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2134ef10_d6411234",
        "filename": "api/media_transport_interface.h",
        "patchSetId": 1
      },
      "lineNbr": 228,
      "author": {
        "id": 5234
      },
      "writtenOn": "2018-11-23T13:47:19Z",
      "side": 1,
      "message": "Not sure this is right, but it should be consistent with SendVideoFrame.",
      "range": {
        "startLine": 228,
        "startChar": 22,
        "endLine": 228,
        "endChar": 72
      },
      "revId": "34385ac4d903d46c25df4f31e3ee327361cc740a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4d06264e_da5a95f8",
        "filename": "api/test/loopback_media_transport.h",
        "patchSetId": 1
      },
      "lineNbr": 170,
      "author": {
        "id": 5234
      },
      "writtenOn": "2018-11-23T13:47:19Z",
      "side": 1,
      "message": "This capture implies an extra copy. And same for SendAudioFrame. Is there any easy way to use AsyncInvoke with moved arguments? Would it help replacing it by a task queue?",
      "range": {
        "startLine": 170,
        "startChar": 53,
        "endLine": 170,
        "endChar": 63
      },
      "revId": "34385ac4d903d46c25df4f31e3ee327361cc740a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "da3bfe65_656334d1",
        "filename": "api/test/loopback_media_transport.h",
        "patchSetId": 1
      },
      "lineNbr": 170,
      "author": {
        "id": 5126
      },
      "writtenOn": "2018-11-23T14:06:15Z",
      "side": 1,
      "message": "In C++11, you can\u0027t move-capture stuff into a lambda; you need to make a struct. E.g.\n\n  struct {\n    unique_ptr\u003cPoo\u003e p;\n    void operator()() { p-\u003eZoo(); }\n  } foo \u003d {std::move(my_p)};\n\nDoes AsyncInvoke copy the callable, or does it just move it? In the former case, you\u0027ll have another copy...",
      "parentUuid": "4d06264e_da5a95f8",
      "range": {
        "startLine": 170,
        "startChar": 53,
        "endLine": 170,
        "endChar": 63
      },
      "revId": "34385ac4d903d46c25df4f31e3ee327361cc740a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    }
  ]
}