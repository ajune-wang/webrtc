{
  "comments": [
    {
      "key": {
        "uuid": "6d5bc7cd_b61dc0cc",
        "filename": "api/frame_transformer_interface.h",
        "patchSetId": 3
      },
      "lineNbr": 30,
      "author": {
        "id": 5126
      },
      "writtenOn": "2020-03-27T11:35:19Z",
      "side": 1,
      "message": "Please return an ArrayView\u003cconst uint8_t\u003e instead. https://webrtc.googlesource.com/src/+/master/style-guide.md#arrayview\n\nAlso, document how long the returned pointer is valid. Until the next call to a non-const method?",
      "revId": "4d229970504a1d66f1d61e885bc37f9ca6a61bb4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4b1a01e0_5a5958d6",
        "filename": "api/frame_transformer_interface.h",
        "patchSetId": 3
      },
      "lineNbr": 30,
      "author": {
        "id": 8594
      },
      "writtenOn": "2020-03-29T23:51:32Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6d5bc7cd_b61dc0cc",
      "revId": "4d229970504a1d66f1d61e885bc37f9ca6a61bb4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "20bbeeb8_aae04536",
        "filename": "api/frame_transformer_interface.h",
        "patchSetId": 3
      },
      "lineNbr": 33,
      "author": {
        "id": 5019
      },
      "writtenOn": "2020-03-27T11:13:22Z",
      "side": 1,
      "message": "this two fields can be joined into rtc::ArrayView\u003cconst uint8_t\u003e data\nhttps://chromium.googlesource.com/external/webrtc/+/refs/heads/master/style-guide.md#arrayview",
      "range": {
        "startLine": 33,
        "startChar": 23,
        "endLine": 33,
        "endChar": 55
      },
      "revId": "4d229970504a1d66f1d61e885bc37f9ca6a61bb4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b29bd3a2_3e1fa3a6",
        "filename": "api/frame_transformer_interface.h",
        "patchSetId": 3
      },
      "lineNbr": 33,
      "author": {
        "id": 5126
      },
      "writtenOn": "2020-03-27T11:35:19Z",
      "side": 1,
      "message": "ArrayView\u003cconst uint8_t\u003e here too.",
      "revId": "4d229970504a1d66f1d61e885bc37f9ca6a61bb4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3756ea73_b4063cc4",
        "filename": "api/frame_transformer_interface.h",
        "patchSetId": 3
      },
      "lineNbr": 33,
      "author": {
        "id": 8594
      },
      "writtenOn": "2020-03-29T23:51:32Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "20bbeeb8_aae04536",
      "range": {
        "startLine": 33,
        "startChar": 23,
        "endLine": 33,
        "endChar": 55
      },
      "revId": "4d229970504a1d66f1d61e885bc37f9ca6a61bb4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "763a47ff_5ff515c1",
        "filename": "api/frame_transformer_interface.h",
        "patchSetId": 3
      },
      "lineNbr": 33,
      "author": {
        "id": 8594
      },
      "writtenOn": "2020-03-29T23:51:32Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b29bd3a2_3e1fa3a6",
      "revId": "4d229970504a1d66f1d61e885bc37f9ca6a61bb4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "74d93476_9a4c6486",
        "filename": "api/frame_transformer_interface.h",
        "patchSetId": 3
      },
      "lineNbr": 35,
      "author": {
        "id": 5019
      },
      "writtenOn": "2020-03-27T11:13:22Z",
      "side": 1,
      "message": "if you want this interface to behave like a buffer, rename GetData to just data()\n(e.g. then it will be implicitly convertable to rtc::ArrayView and similar)\nif not - rename this to Size()\n\ni.e. use consistent names for Data() and Size()\n\nor... may be better to merge them into single function:\nvirtual rtc::ArrayView\u003cconst uint8_t\u003e Data() const \u003d 0;",
      "range": {
        "startLine": 35,
        "startChar": 17,
        "endLine": 35,
        "endChar": 21
      },
      "revId": "4d229970504a1d66f1d61e885bc37f9ca6a61bb4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "162e62fb_beeea6eb",
        "filename": "api/frame_transformer_interface.h",
        "patchSetId": 3
      },
      "lineNbr": 35,
      "author": {
        "id": 5126
      },
      "writtenOn": "2020-03-27T11:35:19Z",
      "side": 1,
      "message": "Not necessary when GetData() returns an ArrayView?",
      "revId": "4d229970504a1d66f1d61e885bc37f9ca6a61bb4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c1f1e2a7_6412f6ba",
        "filename": "api/frame_transformer_interface.h",
        "patchSetId": 3
      },
      "lineNbr": 35,
      "author": {
        "id": 8594
      },
      "writtenOn": "2020-03-29T23:51:32Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "162e62fb_beeea6eb",
      "revId": "4d229970504a1d66f1d61e885bc37f9ca6a61bb4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "10800797_8ee34b27",
        "filename": "api/frame_transformer_interface.h",
        "patchSetId": 3
      },
      "lineNbr": 35,
      "author": {
        "id": 8594
      },
      "writtenOn": "2020-03-29T23:51:32Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "74d93476_9a4c6486",
      "range": {
        "startLine": 35,
        "startChar": 17,
        "endLine": 35,
        "endChar": 21
      },
      "revId": "4d229970504a1d66f1d61e885bc37f9ca6a61bb4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "36aa7c6e_d1ecfe3f",
        "filename": "api/frame_transformer_interface.h",
        "patchSetId": 3
      },
      "lineNbr": 36,
      "author": {
        "id": 5019
      },
      "writtenOn": "2020-03-27T11:13:22Z",
      "side": 1,
      "message": "Timestamp (or may be RtpTimestamp)\nwould recommend regular function name for virtual functions.\n(https://google.github.io/styleguide/cppguide.html#Function_Names)\n\nwhile lowcase names are allowed for accessors, personally I find it questionable if virtual function can be counted as one. accessor gives impression that it is extremely cheap to call, it is usually inlined. When unsure, regular naming style is preferred.\n(same for other virtual lowcase functions in these interfaces)",
      "range": {
        "startLine": 36,
        "startChar": 19,
        "endLine": 36,
        "endChar": 28
      },
      "revId": "4d229970504a1d66f1d61e885bc37f9ca6a61bb4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ddc6684e_47948a5d",
        "filename": "api/frame_transformer_interface.h",
        "patchSetId": 3
      },
      "lineNbr": 36,
      "author": {
        "id": 8594
      },
      "writtenOn": "2020-03-29T23:51:32Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "36aa7c6e_d1ecfe3f",
      "range": {
        "startLine": 36,
        "startChar": 19,
        "endLine": 36,
        "endChar": 28
      },
      "revId": "4d229970504a1d66f1d61e885bc37f9ca6a61bb4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3c9b292f_ba3d17fd",
        "filename": "api/frame_transformer_interface.h",
        "patchSetId": 3
      },
      "lineNbr": 38,
      "author": {
        "id": 5126
      },
      "writtenOn": "2020-03-27T11:35:19Z",
      "side": 1,
      "message": "On naming: snake_case is allowed for accessors and mutators [https://google.github.io/styleguide/cppguide.html#Function_Names], but it is somewhat dodgy for an interface to impose such restrictions on how subclasses implement their methods. I would suggest that you use CamelCase for all method names.",
      "revId": "4d229970504a1d66f1d61e885bc37f9ca6a61bb4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "01f604ca_183a6f99",
        "filename": "api/frame_transformer_interface.h",
        "patchSetId": 3
      },
      "lineNbr": 38,
      "author": {
        "id": 8594
      },
      "writtenOn": "2020-03-29T23:51:32Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3c9b292f_ba3d17fd",
      "revId": "4d229970504a1d66f1d61e885bc37f9ca6a61bb4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "358994bd_c8fca110",
        "filename": "api/frame_transformer_interface.h",
        "patchSetId": 3
      },
      "lineNbr": 50,
      "author": {
        "id": 5019
      },
      "writtenOn": "2020-03-27T11:13:22Z",
      "side": 1,
      "message": "remove one",
      "range": {
        "startLine": 50,
        "startChar": 9,
        "endLine": 50,
        "endChar": 11
      },
      "revId": "4d229970504a1d66f1d61e885bc37f9ca6a61bb4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "94fe3474_b6bfedae",
        "filename": "api/frame_transformer_interface.h",
        "patchSetId": 3
      },
      "lineNbr": 50,
      "author": {
        "id": 8594
      },
      "writtenOn": "2020-03-29T23:51:32Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "358994bd_c8fca110",
      "range": {
        "startLine": 50,
        "startChar": 9,
        "endLine": 50,
        "endChar": 11
      },
      "revId": "4d229970504a1d66f1d61e885bc37f9ca6a61bb4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "64211839_40c8cc43",
        "filename": "api/frame_transformer_interface.h",
        "patchSetId": 3
      },
      "lineNbr": 52,
      "author": {
        "id": 5126
      },
      "writtenOn": "2020-03-27T11:35:19Z",
      "side": 1,
      "message": "ArrayView\u003cconst uint8_t\u003e? Or is there a particular reason to want a vector here?",
      "range": {
        "startLine": 52,
        "startChar": 10,
        "endLine": 52,
        "endChar": 30
      },
      "revId": "4d229970504a1d66f1d61e885bc37f9ca6a61bb4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f9c488bf_2a245163",
        "filename": "api/frame_transformer_interface.h",
        "patchSetId": 3
      },
      "lineNbr": 52,
      "author": {
        "id": 8594
      },
      "writtenOn": "2020-03-29T23:51:32Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "64211839_40c8cc43",
      "range": {
        "startLine": 52,
        "startChar": 10,
        "endLine": 52,
        "endChar": 30
      },
      "revId": "4d229970504a1d66f1d61e885bc37f9ca6a61bb4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8951ab64_a34cf832",
        "filename": "api/frame_transformer_interface.h",
        "patchSetId": 3
      },
      "lineNbr": 62,
      "author": {
        "id": 5019
      },
      "writtenOn": "2020-03-27T11:13:22Z",
      "side": 1,
      "message": "ditto",
      "range": {
        "startLine": 62,
        "startChar": 9,
        "endLine": 62,
        "endChar": 11
      },
      "revId": "4d229970504a1d66f1d61e885bc37f9ca6a61bb4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "839301eb_28671923",
        "filename": "api/frame_transformer_interface.h",
        "patchSetId": 3
      },
      "lineNbr": 62,
      "author": {
        "id": 8594
      },
      "writtenOn": "2020-03-29T23:51:32Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "8951ab64_a34cf832",
      "range": {
        "startLine": 62,
        "startChar": 9,
        "endLine": 62,
        "endChar": 11
      },
      "revId": "4d229970504a1d66f1d61e885bc37f9ca6a61bb4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7ce3c19e_df045075",
        "filename": "modules/rtp_rtcp/source/rtp_sender_video_frame_transformer_delegate.cc",
        "patchSetId": 3
      },
      "lineNbr": 46,
      "author": {
        "id": 5508
      },
      "writtenOn": "2020-03-28T02:03:50Z",
      "side": 1,
      "message": "would prefer to be able to set this variable in an initializer list instead of like this (e.g. by passing |fragmentation| to a parent ctor that handles the conditional).\n\ni.e. a pattern along the lines of:\n\nnamespace {\nT CreateFragmentationHeader(F* fragment) {\n  if (!fragment)\n    return nullptr;\n  auto ret \u003d std::make_unique\u003cT\u003e();\n  ret-\u003eCopyFrom(*fragment);  // BTW: Is this CopyFrom step necessary? Could fragment be passed to a ctor?\n  return ret;\n}\n}\n\nclass Parent {\n public:\n  Parent(F* fragment) : fragmentation_header_(CreateFragmentationHeader(fragment) {}\n protected:\n  T const fragmentation_header_;\n};\n\nclass Derived : public Parent {\n public:\n  Derived(F* fragment) : Parent(f) {}\n};",
      "revId": "4d229970504a1d66f1d61e885bc37f9ca6a61bb4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f896601e_6f0faa06",
        "filename": "modules/rtp_rtcp/source/rtp_sender_video_frame_transformer_delegate.cc",
        "patchSetId": 3
      },
      "lineNbr": 46,
      "author": {
        "id": 8594
      },
      "writtenOn": "2020-03-29T23:51:32Z",
      "side": 1,
      "message": "Done - initialized the fragmentation header in the initializer list. Why add a parent class though and not call CreateFragmentationHeader in Derived ctor\u0027s initializer list?",
      "parentUuid": "7ce3c19e_df045075",
      "revId": "4d229970504a1d66f1d61e885bc37f9ca6a61bb4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f1a5a463_f952ad94",
        "filename": "modules/rtp_rtcp/source/rtp_sender_video_frame_transformer_delegate.cc",
        "patchSetId": 3
      },
      "lineNbr": 90,
      "author": {
        "id": 5019
      },
      "writtenOn": "2020-03-27T11:13:22Z",
      "side": 1,
      "message": "why? \n\nYou set all the fields in the constructor anyway.\nbesides, default constructor for optional sets it to nullopt anyway,\nso if you want it to be safer, support more constructors, it might be better to initialise other, primitive fields instead.",
      "range": {
        "startLine": 90,
        "startChar": 44,
        "endLine": 90,
        "endChar": 60
      },
      "revId": "4d229970504a1d66f1d61e885bc37f9ca6a61bb4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3324e986_27100683",
        "filename": "modules/rtp_rtcp/source/rtp_sender_video_frame_transformer_delegate.cc",
        "patchSetId": 3
      },
      "lineNbr": 90,
      "author": {
        "id": 8594
      },
      "writtenOn": "2020-03-29T23:51:32Z",
      "side": 1,
      "message": "Oversight, this class is a copy of modules/rtp_rtcp/source/transformable_encoded_frame.h removed in follow-up CL https://webrtc-review.googlesource.com/c/src/+/171864. Removed initialization.",
      "parentUuid": "f1a5a463_f952ad94",
      "range": {
        "startLine": 90,
        "startChar": 44,
        "endLine": 90,
        "endChar": 60
      },
      "revId": "4d229970504a1d66f1d61e885bc37f9ca6a61bb4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b41a2214_4528580d",
        "filename": "modules/rtp_rtcp/source/rtp_sender_video_frame_transformer_delegate.cc",
        "patchSetId": 3
      },
      "lineNbr": 94,
      "author": {
        "id": 5126
      },
      "writtenOn": "2020-03-27T11:35:19Z",
      "side": 1,
      "message": "It looks like a number of these could be const.",
      "revId": "4d229970504a1d66f1d61e885bc37f9ca6a61bb4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "830bdd6d_3849668b",
        "filename": "modules/rtp_rtcp/source/rtp_sender_video_frame_transformer_delegate.cc",
        "patchSetId": 3
      },
      "lineNbr": 94,
      "author": {
        "id": 8594
      },
      "writtenOn": "2020-03-29T23:51:32Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b41a2214_4528580d",
      "revId": "4d229970504a1d66f1d61e885bc37f9ca6a61bb4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7d0dde3a_a2aa5b73",
        "filename": "modules/rtp_rtcp/source/rtp_sender_video_frame_transformer_delegate.cc",
        "patchSetId": 3
      },
      "lineNbr": 95,
      "author": {
        "id": 5126
      },
      "writtenOn": "2020-03-27T11:35:19Z",
      "side": 1,
      "message": "Can you change this to `const std::unique_ptr\u003cRTPFragmentationHeader\u003e`? Looks like a small change in the constructor is all that\u0027s needed.",
      "range": {
        "startLine": 95,
        "startChar": 2,
        "endLine": 95,
        "endChar": 41
      },
      "revId": "4d229970504a1d66f1d61e885bc37f9ca6a61bb4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "92da71fe_bcc0b4cf",
        "filename": "modules/rtp_rtcp/source/rtp_sender_video_frame_transformer_delegate.cc",
        "patchSetId": 3
      },
      "lineNbr": 95,
      "author": {
        "id": 5508
      },
      "writtenOn": "2020-03-28T02:03:50Z",
      "side": 1,
      "message": "+1",
      "parentUuid": "7d0dde3a_a2aa5b73",
      "range": {
        "startLine": 95,
        "startChar": 2,
        "endLine": 95,
        "endChar": 41
      },
      "revId": "4d229970504a1d66f1d61e885bc37f9ca6a61bb4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "619ebaef_303ed0cc",
        "filename": "modules/rtp_rtcp/source/rtp_sender_video_frame_transformer_delegate.cc",
        "patchSetId": 3
      },
      "lineNbr": 95,
      "author": {
        "id": 8594
      },
      "writtenOn": "2020-03-29T23:51:32Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "92da71fe_bcc0b4cf",
      "range": {
        "startLine": 95,
        "startChar": 2,
        "endLine": 95,
        "endChar": 41
      },
      "revId": "4d229970504a1d66f1d61e885bc37f9ca6a61bb4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b4bf84f5_4d9abbdb",
        "filename": "modules/rtp_rtcp/source/rtp_sender_video_frame_transformer_delegate.cc",
        "patchSetId": 3
      },
      "lineNbr": 137,
      "author": {
        "id": 5508
      },
      "writtenOn": "2020-03-28T02:03:50Z",
      "side": 1,
      "message": "Do you know why this lock is needed? Seems like a flaky optimisation to me if a lock is really needed, and potentially racy :-/",
      "revId": "4d229970504a1d66f1d61e885bc37f9ca6a61bb4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2983e4cf_84d4fad2",
        "filename": "modules/rtp_rtcp/source/rtp_sender_video_frame_transformer_delegate.cc",
        "patchSetId": 3
      },
      "lineNbr": 137,
      "author": {
        "id": 8594
      },
      "writtenOn": "2020-03-29T23:51:32Z",
      "side": 1,
      "message": "Essentially this lock implements a thread-safe weak ptr to the sender. RTPSenderVideoFrameTransformerDelegate implements the TransformedFrameCallback interface which is refcounted, one ref is held in Blink and one in webrtc by RTPSenderVideo. The lock ensures that when the sender is destroyed, the sender raw pointer held by the delegate is reset (using Reset() called from sender dtor) while holding the lock, so that if a OnTransformedFrame() callback arrives from blink, it doesn\u0027t end up using a dangling pointer.\n\nCalling SetVideoStructureUnderLock under lock as well has been a side effect of making RTPSenderVideo::SendVideo asynchronous, as needed for insertable streams. Before, SetVideoStructureUnderLock and SendVideo were serialized; making SendVideo async made SetVideoStructureUnderLock racey, so I moved it under lock as well. SetVideoStructureUnderLock is called under lock only when insertable streams are used though: https://source.chromium.org/chromium/chromium/src/+/master:third_party/webrtc/modules/rtp_rtcp/source/rtp_sender_video.cc;drc\u003d5efb02b1c6539e2bf1c9cbaf930c3199a69380fd;l\u003d239?originalUrl\u003dhttps:%2F%2Fcs.chromium.org%2F",
      "parentUuid": "b4bf84f5_4d9abbdb",
      "revId": "4d229970504a1d66f1d61e885bc37f9ca6a61bb4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "53f6d405_dd3a4378",
        "filename": "modules/rtp_rtcp/source/rtp_sender_video_frame_transformer_delegate.cc",
        "patchSetId": 3
      },
      "lineNbr": 169,
      "author": {
        "id": 5126
      },
      "writtenOn": "2020-03-27T11:35:19Z",
      "side": 1,
      "message": "It looks like you convert a unique_ptr to an owning raw pointer, and then forget to manually delete it? Consider using a unique_ptr instead by passing the current rhs to WrapUnique.",
      "revId": "4d229970504a1d66f1d61e885bc37f9ca6a61bb4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c1f84ee7_c838177f",
        "filename": "modules/rtp_rtcp/source/rtp_sender_video_frame_transformer_delegate.cc",
        "patchSetId": 3
      },
      "lineNbr": 169,
      "author": {
        "id": 5508
      },
      "writtenOn": "2020-03-28T02:03:50Z",
      "side": 1,
      "message": "perhaps .get() was intended here?",
      "parentUuid": "53f6d405_dd3a4378",
      "revId": "4d229970504a1d66f1d61e885bc37f9ca6a61bb4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f4b3fca1_2c19fa3e",
        "filename": "modules/rtp_rtcp/source/rtp_sender_video_frame_transformer_delegate.cc",
        "patchSetId": 3
      },
      "lineNbr": 169,
      "author": {
        "id": 8594
      },
      "writtenOn": "2020-03-29T23:51:32Z",
      "side": 1,
      "message": "Exactly, get() was intended here, fixed.",
      "parentUuid": "c1f84ee7_c838177f",
      "revId": "4d229970504a1d66f1d61e885bc37f9ca6a61bb4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "abb921bc_f2404344",
        "filename": "modules/rtp_rtcp/source/rtp_sender_video_frame_transformer_delegate.cc",
        "patchSetId": 3
      },
      "lineNbr": 185,
      "author": {
        "id": 5019
      },
      "writtenOn": "2020-03-27T11:13:22Z",
      "side": 1,
      "message": "may be \u0027video_frame\u0027\nto make the upcast more visible here",
      "range": {
        "startLine": 185,
        "startChar": 8,
        "endLine": 185,
        "endChar": 25
      },
      "revId": "4d229970504a1d66f1d61e885bc37f9ca6a61bb4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a7449aff_26214bb3",
        "filename": "modules/rtp_rtcp/source/rtp_sender_video_frame_transformer_delegate.cc",
        "patchSetId": 3
      },
      "lineNbr": 185,
      "author": {
        "id": 8594
      },
      "writtenOn": "2020-03-29T23:51:32Z",
      "side": 1,
      "message": "I think it\u0027s more relevant that the frame is transformed than that it\u0027s a video frame. Added _video to the name.",
      "parentUuid": "abb921bc_f2404344",
      "range": {
        "startLine": 185,
        "startChar": 8,
        "endLine": 185,
        "endChar": 25
      },
      "revId": "4d229970504a1d66f1d61e885bc37f9ca6a61bb4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "faa95be2_226a30c3",
        "filename": "modules/rtp_rtcp/source/rtp_sender_video_frame_transformer_delegate.cc",
        "patchSetId": 3
      },
      "lineNbr": 185,
      "author": {
        "id": 5019
      },
      "writtenOn": "2020-03-30T07:29:52Z",
      "side": 1,
      "message": "Now it is clear, thank you!\n(before when name changed from frame to transformed_frame while type changed from TransformedFrame to TransformedVideoFrame, it was confusing).\nnow change in name align with the actual transformation.",
      "parentUuid": "a7449aff_26214bb3",
      "range": {
        "startLine": 185,
        "startChar": 8,
        "endLine": 185,
        "endChar": 25
      },
      "revId": "4d229970504a1d66f1d61e885bc37f9ca6a61bb4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ad7a4f8e_72698bd8",
        "filename": "modules/rtp_rtcp/source/rtp_sender_video_frame_transformer_delegate.cc",
        "patchSetId": 3
      },
      "lineNbr": 186,
      "author": {
        "id": 5126
      },
      "writtenOn": "2020-03-27T11:35:19Z",
      "side": 1,
      "message": "Same problem here?",
      "revId": "4d229970504a1d66f1d61e885bc37f9ca6a61bb4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "31619883_90f3c489",
        "filename": "modules/rtp_rtcp/source/rtp_sender_video_frame_transformer_delegate.cc",
        "patchSetId": 3
      },
      "lineNbr": 186,
      "author": {
        "id": 5508
      },
      "writtenOn": "2020-03-28T02:03:50Z",
      "side": 1,
      "message": "using .get() here not .release(), in case you\u0027re comparing to line 169 (looks like there\u0027s a bug there)",
      "parentUuid": "ad7a4f8e_72698bd8",
      "revId": "4d229970504a1d66f1d61e885bc37f9ca6a61bb4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e46b2c05_adf2701d",
        "filename": "modules/rtp_rtcp/source/rtp_sender_video_frame_transformer_delegate.cc",
        "patchSetId": 3
      },
      "lineNbr": 186,
      "author": {
        "id": 8594
      },
      "writtenOn": "2020-03-29T23:51:32Z",
      "side": 1,
      "message": "What Tommi said :)",
      "parentUuid": "31619883_90f3c489",
      "revId": "4d229970504a1d66f1d61e885bc37f9ca6a61bb4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9d59db62_8ae54f32",
        "filename": "modules/rtp_rtcp/source/rtp_sender_video_frame_transformer_delegate.cc",
        "patchSetId": 3
      },
      "lineNbr": 190,
      "author": {
        "id": 5019
      },
      "writtenOn": "2020-03-27T11:13:22Z",
      "side": 1,
      "message": "or rtc::MakeArrayView(transformed_frame-\u003eGetData(), transformed_frame-\u003esize());",
      "range": {
        "startLine": 190,
        "startChar": 6,
        "endLine": 190,
        "endChar": 35
      },
      "revId": "4d229970504a1d66f1d61e885bc37f9ca6a61bb4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d8751a6f_75541309",
        "filename": "modules/rtp_rtcp/source/rtp_sender_video_frame_transformer_delegate.cc",
        "patchSetId": 3
      },
      "lineNbr": 200,
      "author": {
        "id": 5508
      },
      "writtenOn": "2020-03-28T02:03:50Z",
      "side": 1,
      "message": "fwiw it would be great if we could limit use of sender_ to the encoder_queue_ and get rid of the sender_lock_. The lock seems to be conflicting with the queue in any case and using the sender purely from there, might simplify the sender implementation itself.",
      "revId": "4d229970504a1d66f1d61e885bc37f9ca6a61bb4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f7cf277f_a09b4f39",
        "filename": "modules/rtp_rtcp/source/rtp_sender_video_frame_transformer_delegate.cc",
        "patchSetId": 3
      },
      "lineNbr": 200,
      "author": {
        "id": 8594
      },
      "writtenOn": "2020-03-29T23:51:32Z",
      "side": 1,
      "message": "Covered by the explanation on why the lock is needed in a comment above.",
      "parentUuid": "d8751a6f_75541309",
      "revId": "4d229970504a1d66f1d61e885bc37f9ca6a61bb4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e38ecf6f_1ffae643",
        "filename": "modules/rtp_rtcp/source/rtp_sender_video_frame_transformer_delegate.cc",
        "patchSetId": 3
      },
      "lineNbr": 208,
      "author": {
        "id": 5508
      },
      "writtenOn": "2020-03-28T02:03:50Z",
      "side": 1,
      "message": "here, we could just post the null-ing to the encoder queue",
      "revId": "4d229970504a1d66f1d61e885bc37f9ca6a61bb4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "62d47d56_563adeea",
        "filename": "modules/rtp_rtcp/source/rtp_sender_video_frame_transformer_delegate.cc",
        "patchSetId": 3
      },
      "lineNbr": 208,
      "author": {
        "id": 8594
      },
      "writtenOn": "2020-03-29T23:51:32Z",
      "side": 1,
      "message": "No because the sender is destroyed on some other thread than the encoder queue. The encoder queue is used for sending frames, but creation and destruction of the sender happens on some other thread - the network thread iirc.",
      "parentUuid": "e38ecf6f_1ffae643",
      "revId": "4d229970504a1d66f1d61e885bc37f9ca6a61bb4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "76a9190e_11f43bbe",
        "filename": "video/rtp_video_stream_receiver_frame_transformer_delegate.cc",
        "patchSetId": 3
      },
      "lineNbr": 28,
      "author": {
        "id": 5019
      },
      "writtenOn": "2020-03-27T11:13:22Z",
      "side": 1,
      "message": "I think common verb for this kind of method (destructive getter) is \u0027Extract\u0027.\ne.g. \nhttps://en.cppreference.com/w/cpp/container/map/extract",
      "range": {
        "startLine": 28,
        "startChar": 55,
        "endLine": 28,
        "endChar": 77
      },
      "revId": "4d229970504a1d66f1d61e885bc37f9ca6a61bb4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b43f6d76_b1d9d202",
        "filename": "video/rtp_video_stream_receiver_frame_transformer_delegate.cc",
        "patchSetId": 3
      },
      "lineNbr": 28,
      "author": {
        "id": 5019
      },
      "writtenOn": "2020-03-27T11:13:22Z",
      "side": 1,
      "message": "put it after constructor/destructor.\n\nonly factory function suppose to be placed before the constructors.\nhttps://google.github.io/styleguide/cppguide.html#Declaration_Order",
      "range": {
        "startLine": 28,
        "startChar": 2,
        "endLine": 28,
        "endChar": 8
      },
      "revId": "4d229970504a1d66f1d61e885bc37f9ca6a61bb4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4d49007f_0de26ff6",
        "filename": "video/rtp_video_stream_receiver_frame_transformer_delegate.cc",
        "patchSetId": 3
      },
      "lineNbr": 28,
      "author": {
        "id": 8594
      },
      "writtenOn": "2020-03-29T23:51:32Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b43f6d76_b1d9d202",
      "range": {
        "startLine": 28,
        "startChar": 2,
        "endLine": 28,
        "endChar": 8
      },
      "revId": "4d229970504a1d66f1d61e885bc37f9ca6a61bb4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b5ded7ac_4e57af57",
        "filename": "video/rtp_video_stream_receiver_frame_transformer_delegate.cc",
        "patchSetId": 3
      },
      "lineNbr": 28,
      "author": {
        "id": 8594
      },
      "writtenOn": "2020-03-29T23:51:32Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "76a9190e_11f43bbe",
      "range": {
        "startLine": 28,
        "startChar": 55,
        "endLine": 28,
        "endChar": 77
      },
      "revId": "4d229970504a1d66f1d61e885bc37f9ca6a61bb4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6c5946a7_f5274bf8",
        "filename": "video/rtp_video_stream_receiver_frame_transformer_delegate.cc",
        "patchSetId": 3
      },
      "lineNbr": 31,
      "author": {
        "id": 5019
      },
      "writtenOn": "2020-03-27T11:13:22Z",
      "side": 1,
      "message": "not needed: since unique_ptr passed by value it will be destroyed when function returns anyway.",
      "range": {
        "startLine": 31,
        "startChar": 4,
        "endLine": 31,
        "endChar": 32
      },
      "revId": "4d229970504a1d66f1d61e885bc37f9ca6a61bb4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "499f6a34_e225478a",
        "filename": "video/rtp_video_stream_receiver_frame_transformer_delegate.cc",
        "patchSetId": 3
      },
      "lineNbr": 31,
      "author": {
        "id": 8594
      },
      "writtenOn": "2020-03-29T23:51:32Z",
      "side": 1,
      "message": "Agree, though this was intentional - to make it explicit that the object is reset as the function name claims, at the cost of an almost noop unique_ptr destructor.",
      "parentUuid": "6c5946a7_f5274bf8",
      "range": {
        "startLine": 31,
        "startChar": 4,
        "endLine": 31,
        "endChar": 32
      },
      "revId": "4d229970504a1d66f1d61e885bc37f9ca6a61bb4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c693f133_b3f4eea3",
        "filename": "video/rtp_video_stream_receiver_frame_transformer_delegate.cc",
        "patchSetId": 3
      },
      "lineNbr": 65,
      "author": {
        "id": 5019
      },
      "writtenOn": "2020-03-27T11:47:18Z",
      "side": 1,
      "message": "there is alternative to making it private.\nThere was recent change to style guide (so recent it is not yet in the public version) that allows to use \u0026\u0026 qualifier for this case:\n\n public:\n  std::unique_ptr\u003cvideo_codeing::RtpFrameObject\u003e ExtractFrame() \u0026\u0026 {\n    return std::move(frame_);\n  }\n\n\"You may use them to define \u0026\u0026-qualified methods that logically \"consume\" *this, leaving it in an unusable or empty state. Note that this applies only to method qualifiers (which come after the closing parenthesis of the function signature); if you want to \"consume\" an ordinary function parameter, prefer to pass it by value.\"",
      "range": {
        "startLine": 65,
        "startChar": 48,
        "endLine": 65,
        "endChar": 57
      },
      "revId": "4d229970504a1d66f1d61e885bc37f9ca6a61bb4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e40a69ef_587287c7",
        "filename": "video/rtp_video_stream_receiver_frame_transformer_delegate.cc",
        "patchSetId": 3
      },
      "lineNbr": 65,
      "author": {
        "id": 8594
      },
      "writtenOn": "2020-03-29T23:51:32Z",
      "side": 1,
      "message": "Cool! Thanks for the tip.",
      "parentUuid": "c693f133_b3f4eea3",
      "range": {
        "startLine": 65,
        "startChar": 48,
        "endLine": 65,
        "endChar": 57
      },
      "revId": "4d229970504a1d66f1d61e885bc37f9ca6a61bb4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7f3f22de_2f291e5f",
        "filename": "video/rtp_video_stream_receiver_frame_transformer_delegate.cc",
        "patchSetId": 3
      },
      "lineNbr": 148,
      "author": {
        "id": 5126
      },
      "writtenOn": "2020-03-27T11:35:19Z",
      "side": 1,
      "message": "Exactly this is what I was expecting to see in the two places I flagged for possible leaks above.",
      "revId": "4d229970504a1d66f1d61e885bc37f9ca6a61bb4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1b68c59c_ce74e355",
        "filename": "video/rtp_video_stream_receiver_frame_transformer_delegate.cc",
        "patchSetId": 3
      },
      "lineNbr": 148,
      "author": {
        "id": 8594
      },
      "writtenOn": "2020-03-29T23:51:32Z",
      "side": 1,
      "message": "Here the object ownership is transferred. In the other two places I only needed a const\u0026 to the cast object for the SendVideo() call, and then the frame can be destroyed when the unique_ptr goes out of scope; didn\u0027t see the need to wrap the object in another unique_ptr of the cast type.",
      "parentUuid": "7f3f22de_2f291e5f",
      "revId": "4d229970504a1d66f1d61e885bc37f9ca6a61bb4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    }
  ]
}