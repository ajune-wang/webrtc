{
  "comments": [
    {
      "key": {
        "uuid": "c8560f97_69b75196",
        "filename": "modules/video_coding/codecs/test/stats.cc",
        "patchSetId": 2
      },
      "lineNbr": 192,
      "author": {
        "id": 5023
      },
      "writtenOn": "2017-11-14T09:58:59Z",
      "side": 1,
      "message": "I think it would be nicer to use std::accumulate here, and then not do the summing on L107-110. WDYT?",
      "range": {
        "startLine": 192,
        "startChar": 31,
        "endLine": 192,
        "endChar": 65
      },
      "revId": "4e7c99365c409034c738a5b25ac1a9b7f7d38428",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "664defdb_2849c540",
        "filename": "modules/video_coding/codecs/test/stats.cc",
        "patchSetId": 2
      },
      "lineNbr": 192,
      "author": {
        "id": 5825
      },
      "writtenOn": "2017-11-15T12:20:04Z",
      "side": 1,
      "message": "I tried, but it doesn\u0027t look nice:\nint total_psnr \u003d std::accumulate(\n        decoded_frames.begin(), decoded_frames.end(), 0,\n        [](int acc, const FrameStatistic\u0026 s) { return acc + s.psnr; });\n\nif you have more nice looking idea please share. Otherwise I would prefer to keep it as it is.",
      "parentUuid": "c8560f97_69b75196",
      "range": {
        "startLine": 192,
        "startChar": 31,
        "endLine": 192,
        "endChar": 65
      },
      "revId": "4e7c99365c409034c738a5b25ac1a9b7f7d38428",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9f6db86a_4c7880ab",
        "filename": "modules/video_coding/codecs/test/stats.cc",
        "patchSetId": 2
      },
      "lineNbr": 192,
      "author": {
        "id": 5023
      },
      "writtenOn": "2017-11-16T10:02:20Z",
      "side": 1,
      "message": "Yes, it\u0027s nicer as is.",
      "parentUuid": "664defdb_2849c540",
      "range": {
        "startLine": 192,
        "startChar": 31,
        "endLine": 192,
        "endChar": 65
      },
      "revId": "4e7c99365c409034c738a5b25ac1a9b7f7d38428",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2beb4e33_9c55af30",
        "filename": "modules/video_coding/codecs/test/stats.cc",
        "patchSetId": 2
      },
      "lineNbr": 198,
      "author": {
        "id": 5023
      },
      "writtenOn": "2017-11-14T09:58:59Z",
      "side": 1,
      "message": "Same here.",
      "range": {
        "startLine": 198,
        "startChar": 31,
        "endLine": 198,
        "endChar": 65
      },
      "revId": "4e7c99365c409034c738a5b25ac1a9b7f7d38428",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c30e1e5b_26afca17",
        "filename": "modules/video_coding/codecs/test/stats.cc",
        "patchSetId": 2
      },
      "lineNbr": 198,
      "author": {
        "id": 5023
      },
      "writtenOn": "2017-11-16T10:02:20Z",
      "side": 1,
      "message": "Resolved.",
      "parentUuid": "2beb4e33_9c55af30",
      "range": {
        "startLine": 198,
        "startChar": 31,
        "endLine": 198,
        "endChar": 65
      },
      "revId": "4e7c99365c409034c738a5b25ac1a9b7f7d38428",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "50320712_e846fd80",
        "filename": "modules/video_coding/codecs/test/videoprocessor.cc",
        "patchSetId": 2
      },
      "lineNbr": 171,
      "author": {
        "id": 5023
      },
      "writtenOn": "2017-11-14T09:58:59Z",
      "side": 1,
      "message": "Not needed?",
      "range": {
        "startLine": 171,
        "startChar": 42,
        "endLine": 171,
        "endChar": 57
      },
      "revId": "4e7c99365c409034c738a5b25ac1a9b7f7d38428",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6f6a28f1_c21f5d10",
        "filename": "modules/video_coding/codecs/test/videoprocessor.h",
        "patchSetId": 2
      },
      "lineNbr": 201,
      "author": {
        "id": 5023
      },
      "writtenOn": "2017-11-14T09:58:59Z",
      "side": 1,
      "message": "For async encoders, would this be \"in flight frames\"?",
      "range": {
        "startLine": 201,
        "startChar": 5,
        "endLine": 201,
        "endChar": 24
      },
      "revId": "4e7c99365c409034c738a5b25ac1a9b7f7d38428",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ba6e5978_d438e107",
        "filename": "modules/video_coding/codecs/test/videoprocessor.h",
        "patchSetId": 2
      },
      "lineNbr": 201,
      "author": {
        "id": 5825
      },
      "writtenOn": "2017-11-15T12:20:04Z",
      "side": 1,
      "message": "That\u0027s correct. I updated comment.",
      "parentUuid": "6f6a28f1_c21f5d10",
      "range": {
        "startLine": 201,
        "startChar": 5,
        "endLine": 201,
        "endChar": 24
      },
      "revId": "4e7c99365c409034c738a5b25ac1a9b7f7d38428",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "29eb8e5a_23d0cfb0",
        "filename": "modules/video_coding/codecs/test/videoprocessor.h",
        "patchSetId": 2
      },
      "lineNbr": 203,
      "author": {
        "id": 5023
      },
      "writtenOn": "2017-11-14T09:58:59Z",
      "side": 1,
      "message": "This shouldn\u0027t be needed, because webrtc::VideoFrame has a refcounted webrtc::VideoFrameBuffer: https://cs.chromium.org/chromium/src/third_party/webrtc/api/video/video_frame.h?l\u003d106\u0026rcl\u003dcba3d274daaf57b3c6e8bc6cd10b959cf2ec73bf. So just copying the VideoFrame should be fine.",
      "range": {
        "startLine": 203,
        "startChar": 21,
        "endLine": 203,
        "endChar": 36
      },
      "revId": "4e7c99365c409034c738a5b25ac1a9b7f7d38428",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0e57b1ef_6ae0efc1",
        "filename": "modules/video_coding/codecs/test/videoprocessor.h",
        "patchSetId": 2
      },
      "lineNbr": 203,
      "author": {
        "id": 5825
      },
      "writtenOn": "2017-11-15T12:20:04Z",
      "side": 1,
      "message": "I tried to store VideoFrame object instead of pointer in the map. But it didn\u0027t work. It requires object to have default constructor which VideoFrame doesn\u0027t have. I would prefer to keep pointers if there is no strong objection.",
      "parentUuid": "29eb8e5a_23d0cfb0",
      "range": {
        "startLine": 203,
        "startChar": 21,
        "endLine": 203,
        "endChar": 36
      },
      "revId": "4e7c99365c409034c738a5b25ac1a9b7f7d38428",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cfb1a6b8_cb5c19a8",
        "filename": "modules/video_coding/codecs/test/videoprocessor.h",
        "patchSetId": 2
      },
      "lineNbr": 203,
      "author": {
        "id": 5023
      },
      "writtenOn": "2017-11-16T10:02:20Z",
      "side": 1,
      "message": "You could probably use std::map::emplace to avoid calling the default ctor of VideoFrame. But that method seems to have different semantics than std::map::operator[]: if the key already exists in the map, emplace will throw away the new value whereas operator[] will overwrite the old value. The operator[] semantics seem more natural to me, so probably better to use that.\n\nhttp://en.cppreference.com/w/cpp/container/map/emplace\nThe element may be constructed even if there already is an element with the key in the container, in which case the newly constructed element will be destroyed immediately.\n\nhttp://en.cppreference.com/w/cpp/container/map/operator_at\nReturns a reference to the value that is mapped to a key equivalent to key, performing an insertion if such key does not already exist.",
      "parentUuid": "0e57b1ef_6ae0efc1",
      "range": {
        "startLine": 203,
        "startChar": 21,
        "endLine": 203,
        "endChar": 36
      },
      "revId": "4e7c99365c409034c738a5b25ac1a9b7f7d38428",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    }
  ]
}