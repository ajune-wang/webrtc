{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "7026c234_ddcb584f",
        "filename": "sdk/android/src/java/org/webrtc/audio/WebRtcAudioRecord.java",
        "patchSetId": 6
      },
      "lineNbr": 148,
      "author": {
        "id": 5091
      },
      "writtenOn": "2022-02-01T11:04:07Z",
      "side": 1,
      "message": "You are doing this on a real-time audio thread. Is it required to update at 100Hz? If so, have you checked if the API can cause any regression in terms of added latency or complexity?\n\nIdeally, the audio thread should be as thin as possible and doing heap allocations in each callback is not desirable.",
      "revId": "977cf7ec25893414cb77b6062fb1bae231ebe241",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ba80700a_ab8e7ac0",
        "filename": "sdk/android/src/java/org/webrtc/audio/WebRtcAudioRecord.java",
        "patchSetId": 6
      },
      "lineNbr": 148,
      "author": {
        "id": 7255
      },
      "writtenOn": "2022-02-01T11:21:04Z",
      "side": 1,
      "message": "I made the timestamp object a member of the class and reuse the memory. That way we no longer make a heap allocation here.",
      "parentUuid": "7026c234_ddcb584f",
      "revId": "977cf7ec25893414cb77b6062fb1bae231ebe241",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b17faa5d_1a9a7153",
        "filename": "sdk/android/src/java/org/webrtc/audio/WebRtcAudioRecord.java",
        "patchSetId": 6
      },
      "lineNbr": 148,
      "author": {
        "id": 5091
      },
      "writtenOn": "2022-02-01T11:56:49Z",
      "side": 1,
      "message": "Is it possible to check if the new API comes with a cost (e.g. by measuring the time it takes to process)? The getter is most likely cheap but the aligner might not be. Is it needed? If so, why?",
      "parentUuid": "ba80700a_ab8e7ac0",
      "revId": "977cf7ec25893414cb77b6062fb1bae231ebe241",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5b81b25b_e83beb8d",
        "filename": "sdk/android/src/java/org/webrtc/audio/WebRtcAudioRecord.java",
        "patchSetId": 6
      },
      "lineNbr": 148,
      "author": {
        "id": 7255
      },
      "writtenOn": "2022-02-01T12:48:23Z",
      "side": 1,
      "message": "The aligner do \n* a JNI call\n* an integer division with a constant divider\n* an integer division between two variables\n* three if-statements\n* dozens of add and subtract \nI don\u0027t know what is too much.\n\nI was told to use the aligner. I will ask why it\u0027s needed.",
      "parentUuid": "b17faa5d_1a9a7153",
      "revId": "977cf7ec25893414cb77b6062fb1bae231ebe241",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "729824f9_f247ff87",
        "filename": "sdk/android/src/java/org/webrtc/audio/WebRtcAudioRecord.java",
        "patchSetId": 6
      },
      "lineNbr": 148,
      "author": {
        "id": 5091
      },
      "writtenOn": "2022-02-01T12:51:01Z",
      "side": 1,
      "message": "We should NOT do JNI in this callback. Sorry but you can\u0027t land this. The audio path must be super clean. A getter on AudioRecord is fine.",
      "parentUuid": "5b81b25b_e83beb8d",
      "revId": "977cf7ec25893414cb77b6062fb1bae231ebe241",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "795ffec7_56589f7e",
        "filename": "sdk/android/src/java/org/webrtc/audio/WebRtcAudioRecord.java",
        "patchSetId": 6
      },
      "lineNbr": 148,
      "author": {
        "id": 5091
      },
      "writtenOn": "2022-02-01T13:12:39Z",
      "side": 1,
      "message": "Basic ideas can be seen in https://developer.android.com/ndk/guides/audio/opensl/opensl-prog-notes. This is for OpenSL-ES but same goes for other APIs.\n\nCallback handlers are called from internal non-application threads that are not attached to the Android runtime, so they are ineligible to use JNI. Because these internal threads are critical to the integrity of the OpenSL ES implementation, a callback handler should also not block or perform excessive work.\n\nIf your callback handler needs to use JNI or execute work that is not proportional to the callback, the handler should instead post an event for another thread to process. Examples of acceptable callback workload include rendering and enqueuing the next output buffer (for an AudioPlayer), processing the just-filled input buffer and enqueueing the next empty buffer (for an AudioRecorder), or simple APIs such as most of the Get family. See the Performance section below regarding the workload.",
      "parentUuid": "729824f9_f247ff87",
      "revId": "977cf7ec25893414cb77b6062fb1bae231ebe241",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    }
  ]
}