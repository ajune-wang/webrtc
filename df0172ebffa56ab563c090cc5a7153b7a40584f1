{
  "comments": [
    {
      "key": {
        "uuid": "5f0873cf_528daa84",
        "filename": "call/adaptation/video_source_restrictions.h",
        "patchSetId": 8
      },
      "lineNbr": 69,
      "author": {
        "id": 5142
      },
      "writtenOn": "2020-04-08T10:03:02Z",
      "side": 1,
      "message": "Self-review: Add video_source_restrictions_unittest.cc to cover this.",
      "revId": "df0172ebffa56ab563c090cc5a7153b7a40584f1",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0e64374b_0fd61f5b",
        "filename": "video/adaptation/resource_adaptation_processor.cc",
        "patchSetId": 8
      },
      "lineNbr": 166,
      "author": {
        "id": 5142
      },
      "writtenOn": "2020-04-08T10:03:02Z",
      "side": 1,
      "message": "I wonder if this \"is kQuality or is kCpu\" special logic is going to bite us later when we have new input signals...",
      "revId": "df0172ebffa56ab563c090cc5a7153b7a40584f1",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "88692a3d_6d44e396",
        "filename": "video/adaptation/resource_adaptation_processor.cc",
        "patchSetId": 8
      },
      "lineNbr": 166,
      "author": {
        "id": 5117
      },
      "writtenOn": "2020-04-14T10:54:37Z",
      "side": 1,
      "message": "I agree, this should be made generic. I think it\u0027s like that because of the legacy. First we have CPU adaptation, and the logic was simple: if we adapted down, we can always adapt up.\nThen quality scaler came into existence. There, we can adapt up if quality is good enough and we have enough bandwidth available. And here a weird proxy is used: instead of bwe we take current encoder target bitrate.",
      "parentUuid": "0e64374b_0fd61f5b",
      "revId": "df0172ebffa56ab563c090cc5a7153b7a40584f1",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "98171f74_7307f2b7",
        "filename": "video/adaptation/resource_adaptation_processor.cc",
        "patchSetId": 8
      },
      "lineNbr": 166,
      "author": {
        "id": 5142
      },
      "writtenOn": "2020-04-17T11:50:12Z",
      "side": 1,
      "message": "Ack.",
      "parentUuid": "88692a3d_6d44e396",
      "revId": "df0172ebffa56ab563c090cc5a7153b7a40584f1",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dc79395c_ba83b586",
        "filename": "video/adaptation/resource_adaptation_processor.cc",
        "patchSetId": 8
      },
      "lineNbr": 199,
      "author": {
        "id": 8683
      },
      "writtenOn": "2020-04-16T08:05:19Z",
      "side": 1,
      "message": "This line is repeated in all of the classes here. Is this something that could be removed somehow? Perhaps reason_resource should be a reference instead?",
      "range": {
        "startLine": 198,
        "startChar": 0,
        "endLine": 199,
        "endChar": 16
      },
      "revId": "df0172ebffa56ab563c090cc5a7153b7a40584f1",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "55bca492_04dc6ea1",
        "filename": "video/adaptation/resource_adaptation_processor.cc",
        "patchSetId": 8
      },
      "lineNbr": 199,
      "author": {
        "id": 5142
      },
      "writtenOn": "2020-04-17T11:50:12Z",
      "side": 1,
      "message": "You made me realize this code is never used with a null resource, so I made it const\u0026 instead :)",
      "parentUuid": "dc79395c_ba83b586",
      "range": {
        "startLine": 198,
        "startChar": 0,
        "endLine": 199,
        "endChar": 16
      },
      "revId": "df0172ebffa56ab563c090cc5a7153b7a40584f1",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "67f91413_b1e47572",
        "filename": "video/adaptation/resource_adaptation_processor.cc",
        "patchSetId": 8
      },
      "lineNbr": 530,
      "author": {
        "id": 8683
      },
      "writtenOn": "2020-04-14T11:51:45Z",
      "side": 1,
      "message": "optional: Can use std::all_of()\n\n  if (!absl::c_all_of(resources_, [input_state, restriction_before, resrictions_after, reason_resource](ReasonAndResource r) {\n    return rr.resource-\u003eIsAdaptationUpAllowed(input_state, restriction_before, \u0026reason_resource);\n  }) retrun;",
      "range": {
        "startLine": 519,
        "startChar": 0,
        "endLine": 530,
        "endChar": 3
      },
      "revId": "df0172ebffa56ab563c090cc5a7153b7a40584f1",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d3dcdc8a_54b98f49",
        "filename": "video/adaptation/resource_adaptation_processor.cc",
        "patchSetId": 8
      },
      "lineNbr": 530,
      "author": {
        "id": 5142
      },
      "writtenOn": "2020-04-17T11:50:12Z",
      "side": 1,
      "message": "Done.",
      "parentUuid": "67f91413_b1e47572",
      "range": {
        "startLine": 519,
        "startChar": 0,
        "endLine": 530,
        "endChar": 3
      },
      "revId": "df0172ebffa56ab563c090cc5a7153b7a40584f1",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a1a2d3fa_a340ffad",
        "filename": "video/adaptation/resource_adaptation_processor.h",
        "patchSetId": 8
      },
      "lineNbr": 199,
      "author": {
        "id": 5142
      },
      "writtenOn": "2020-04-08T10:03:02Z",
      "side": 1,
      "message": "Self-review: Move all \"preventive resources\" to separate files. They can be tested separately, and in the future if they need to handle thread-jumping (encoder queue vs processor queue) it\u0027s good if this logic is separated from the rest of the code.",
      "revId": "df0172ebffa56ab563c090cc5a7153b7a40584f1",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    }
  ]
}