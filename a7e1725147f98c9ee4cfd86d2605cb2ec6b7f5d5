{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "139a1007_085bc8d0",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 14
      },
      "lineNbr": 0,
      "author": {
        "id": 5524
      },
      "writtenOn": "2021-09-14T13:24:06Z",
      "side": 1,
      "message": "I like this much better, thanks!\nQuestion: do we know we support all scalability modes for av1/vp9?\nor should we e.g. query the svc controller?\nhttps://source.chromium.org/chromium/chromium/src/+/main:third_party/webrtc/modules/video_coding/svc/",
      "revId": "a7e1725147f98c9ee4cfd86d2605cb2ec6b7f5d5",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2537a12b_b887ba40",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 14
      },
      "lineNbr": 0,
      "author": {
        "id": 7641
      },
      "writtenOn": "2021-09-14T13:42:14Z",
      "side": 1,
      "message": "Do you mean that we for each potentially supported scalability mode try to create a scalability structure config using ScalabilityStructureConfig(absl::string_view name):\nhttps://source.chromium.org/chromium/chromium/src/+/main:third_party/webrtc/modules/video_coding/svc/create_scalability_structure.cc;drc\u003d5d3bf6ae2aea1c6c72f995ba6d29220e6605b323;l\u003d148",
      "parentUuid": "139a1007_085bc8d0",
      "revId": "a7e1725147f98c9ee4cfd86d2605cb2ec6b7f5d5",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b625da75_35abe8bc",
        "filename": "media/engine/internal_encoder_factory.cc",
        "patchSetId": 14
      },
      "lineNbr": 67,
      "author": {
        "id": 5524
      },
      "writtenOn": "2021-09-14T13:24:06Z",
      "side": 1,
      "message": "nit: Add {} for all these if/else",
      "revId": "a7e1725147f98c9ee4cfd86d2605cb2ec6b7f5d5",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bd108e1e_0b757f80",
        "filename": "media/engine/internal_encoder_factory.cc",
        "patchSetId": 14
      },
      "lineNbr": 67,
      "author": {
        "id": 5019
      },
      "writtenOn": "2021-09-14T13:39:15Z",
      "side": 1,
      "message": "https://google.github.io/styleguide/cppguide.html#Conditionals",
      "parentUuid": "b625da75_35abe8bc",
      "revId": "a7e1725147f98c9ee4cfd86d2605cb2ec6b7f5d5",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8dc90ed3_0a54677b",
        "filename": "media/engine/internal_encoder_factory_unittest.cc",
        "patchSetId": 14
      },
      "lineNbr": 74,
      "author": {
        "id": 5019
      },
      "writtenOn": "2021-09-14T13:39:15Z",
      "side": 1,
      "message": "implicit cast should work here:\n  EXPECT_TRUE(encoder);\nOr you can be more explicit:\n  EXPECT_THAT(encoder, NotNull());",
      "range": {
        "startLine": 74,
        "startChar": 4,
        "endLine": 74,
        "endChar": 44
      },
      "revId": "a7e1725147f98c9ee4cfd86d2605cb2ec6b7f5d5",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1215c6cd_6f44d0ac",
        "filename": "modules/video_coding/codecs/av1/libaom_av1_encoder.cc",
        "patchSetId": 14
      },
      "lineNbr": 56,
      "author": {
        "id": 5019
      },
      "writtenOn": "2021-09-14T13:39:15Z",
      "side": 1,
      "message": "may be\n  constexpr absl::string_view kSupportedScalabilityModes[] \u003d {\n    \"L1T2\", ...\n  };",
      "range": {
        "startLine": 56,
        "startChar": 0,
        "endLine": 56,
        "endChar": 25
      },
      "revId": "a7e1725147f98c9ee4cfd86d2605cb2ec6b7f5d5",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "755f39ff_f75fffa5",
        "filename": "modules/video_coding/codecs/av1/libaom_av1_encoder.cc",
        "patchSetId": 14
      },
      "lineNbr": 826,
      "author": {
        "id": 5019
      },
      "writtenOn": "2021-09-14T13:39:15Z",
      "side": 1,
      "message": "may be add RTC_DCHECK(ScalabilityStructureConfig(scalability_mode).has_value());\nor (which suppose to be the same, may be clearer, but slower):\nRTC_DCHECK(CreateScalabilityStructure(scalability_mode));",
      "revId": "a7e1725147f98c9ee4cfd86d2605cb2ec6b7f5d5",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a0347a80_6fb6215c",
        "filename": "modules/video_coding/codecs/av1/libaom_av1_encoder.h",
        "patchSetId": 14
      },
      "lineNbr": 24,
      "author": {
        "id": 5019
      },
      "writtenOn": "2021-09-14T13:39:15Z",
      "side": 1,
      "message": "may be clarify in the name it is\nLibaomAv1Encoder\n\nto be consistent with the function and constant above.\nAnd to avoid confusion later with hardware, or some other av1 encoder",
      "range": {
        "startLine": 24,
        "startChar": 5,
        "endLine": 24,
        "endChar": 15
      },
      "revId": "a7e1725147f98c9ee4cfd86d2605cb2ec6b7f5d5",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e485ae1a_14c27883",
        "filename": "modules/video_coding/codecs/h264/h264.cc",
        "patchSetId": 14
      },
      "lineNbr": 110,
      "author": {
        "id": 5524
      },
      "writtenOn": "2021-09-14T13:24:06Z",
      "side": 1,
      "message": "I think this should be the same as vp8: {{\"L1T2\"}, {\"L1T3\"}};\n\nSee e.g. https://source.chromium.org/chromium/chromium/src/+/main:third_party/webrtc/modules/video_coding/codecs/h264/h264_encoder_impl.cc;l\u003d244",
      "range": {
        "startLine": 109,
        "startChar": 2,
        "endLine": 110,
        "endChar": 34
      },
      "revId": "a7e1725147f98c9ee4cfd86d2605cb2ec6b7f5d5",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    }
  ]
}