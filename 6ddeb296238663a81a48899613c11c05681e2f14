{
  "comments": [
    {
      "key": {
        "uuid": "5dfebcd5_df1dd8d9",
        "filename": "modules/audio_coding/neteq/neteq_impl.cc",
        "patchSetId": 6
      },
      "lineNbr": 1990,
      "author": {
        "id": 5126
      },
      "writtenOn": "2020-03-10T18:47:31Z",
      "side": 1,
      "message": "RTC_DCHECK(controller_);\n\nAlthough since you dereference it immediately after this, maybe don\u0027t assert at all?",
      "range": {
        "startLine": 1990,
        "startChar": 4,
        "endLine": 1990,
        "endChar": 10
      },
      "revId": "6ddeb296238663a81a48899613c11c05681e2f14",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "84c45132_989668a0",
        "filename": "modules/audio_coding/neteq/neteq_impl.cc",
        "patchSetId": 6
      },
      "lineNbr": 1990,
      "author": {
        "id": 6337
      },
      "writtenOn": "2020-03-11T10:27:29Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5dfebcd5_df1dd8d9",
      "range": {
        "startLine": 1990,
        "startChar": 4,
        "endLine": 1990,
        "endChar": 10
      },
      "revId": "6ddeb296238663a81a48899613c11c05681e2f14",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7213e8a2_05abf105",
        "filename": "modules/audio_coding/neteq/neteq_unittest.cc",
        "patchSetId": 6
      },
      "lineNbr": 1032,
      "author": {
        "id": 5126
      },
      "writtenOn": "2020-03-10T18:47:31Z",
      "side": 1,
      "message": "Casting from uint64_t to int? Can expected_target_delay be uint64_t instead? Or, if you do need to cast, use checked_cast. (More cases of this below.)",
      "range": {
        "startLine": 1032,
        "startChar": 12,
        "endLine": 1032,
        "endChar": 28
      },
      "revId": "6ddeb296238663a81a48899613c11c05681e2f14",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7904c783_59de430b",
        "filename": "modules/audio_coding/neteq/neteq_unittest.cc",
        "patchSetId": 6
      },
      "lineNbr": 1032,
      "author": {
        "id": 6337
      },
      "writtenOn": "2020-03-11T10:27:29Z",
      "side": 1,
      "message": "As I see in this file they usually assert on controller to be sure. So I want to keep it to be on a safe side. Better check, than SIGSEGV IMHO",
      "parentUuid": "7213e8a2_05abf105",
      "range": {
        "startLine": 1032,
        "startChar": 12,
        "endLine": 1032,
        "endChar": 28
      },
      "revId": "6ddeb296238663a81a48899613c11c05681e2f14",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1b0fb12d_e2cdbbdd",
        "filename": "modules/audio_coding/neteq/neteq_unittest.cc",
        "patchSetId": 6
      },
      "lineNbr": 1032,
      "author": {
        "id": 5126
      },
      "writtenOn": "2020-03-11T10:37:22Z",
      "side": 1,
      "message": "What I meant is that we want two things: (1) verify that the two numbers are indeed equal, and (2) get nice error messages in case they aren\u0027t. A good way to accomplish that is to use large enough types that no narrowing conversion is necessary, because that way EXPECT_EQ will succeed if and only if the numbers are indeed equal, and i they aren\u0027t equal, it\u0027ll be relatively easy to debug.\n\nUsing checked_cast like you did is almost as good.",
      "parentUuid": "7904c783_59de430b",
      "range": {
        "startLine": 1032,
        "startChar": 12,
        "endLine": 1032,
        "endChar": 28
      },
      "revId": "6ddeb296238663a81a48899613c11c05681e2f14",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    }
  ]
}