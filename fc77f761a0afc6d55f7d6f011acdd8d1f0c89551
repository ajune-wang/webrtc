{
  "comments": [
    {
      "key": {
        "uuid": "af6537eb_1dea4aaa",
        "filename": "api/ice_transport_interface.h",
        "patchSetId": 3
      },
      "lineNbr": 34,
      "author": {
        "id": 5142
      },
      "writtenOn": "2019-01-21T16:50:10Z",
      "side": 1,
      "message": "Any reason not to make the IceTransportInterface correct from the start?",
      "revId": "fc77f761a0afc6d55f7d6f011acdd8d1f0c89551",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "91b7a676_8375d379",
        "filename": "api/ice_transport_interface.h",
        "patchSetId": 3
      },
      "lineNbr": 34,
      "author": {
        "id": 5634
      },
      "writtenOn": "2019-01-21T17:57:43Z",
      "side": 1,
      "message": "Unlike dtlstransport, this is not a greenfield, it\u0027s a redesign of the existing implementation of blink::RTCIceTransport.\n\nI want to have the objects\u0027 creation, deletion and ownership clear in this CL, and do the exposure of more accessor functions in a next step.",
      "parentUuid": "af6537eb_1dea4aaa",
      "revId": "fc77f761a0afc6d55f7d6f011acdd8d1f0c89551",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "20eed11f_efe55f0c",
        "filename": "pc/ice_transport.cc",
        "patchSetId": 3
      },
      "lineNbr": 28,
      "author": {
        "id": 5142
      },
      "writtenOn": "2019-01-21T16:50:10Z",
      "side": 1,
      "message": "Shouldn\u0027t a class named \"WithTransportChannel\" have an explicit P2PTransportChannel reference? This is the same as IceTransportWithPointer except it has ownership, there doesn\u0027t seem to be anything inherently about P2PTransportChannel here except for the constructor.\n\n- Should it be renamed or should the reference be explicitly to P2PTransportChannel?\n- Do we really need two implementations of the interface? Why? Can we merge them?",
      "revId": "fc77f761a0afc6d55f7d6f011acdd8d1f0c89551",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1259cd91_50501ef3",
        "filename": "pc/ice_transport.cc",
        "patchSetId": 3
      },
      "lineNbr": 28,
      "author": {
        "id": 5634
      },
      "writtenOn": "2019-01-21T17:57:43Z",
      "side": 1,
      "message": "I can rename it to IceTransportOwningInternalTransport, would that be better?\nIt turns out we have two usage patterns - one where the accessor in Blink owns the transport (and where I want to slot in this version), and one where the primary ownership is with another entity (JsepTransport), and where I want to wrap it in the other one.\n\nI want a common interface that I can use in the rest of the Blink code. This split was the cleanest way I could see to achieve that without significant refactoring in one of the two places.",
      "parentUuid": "20eed11f_efe55f0c",
      "revId": "fc77f761a0afc6d55f7d6f011acdd8d1f0c89551",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1d369213_29afb5c0",
        "filename": "pc/ice_transport.cc",
        "patchSetId": 3
      },
      "lineNbr": 28,
      "author": {
        "id": 5142
      },
      "writtenOn": "2019-01-22T08:02:51Z",
      "side": 1,
      "message": "Is IceTransportOwningInternalTransport the one to be used when RTCIceTransport is constructed independently of a PC (QUIC use case), and IceTransportWithPointer the one to be used when RTCIceTransport represents a transport constructed by the PC (webrtc-pc use case)?",
      "parentUuid": "1259cd91_50501ef3",
      "revId": "fc77f761a0afc6d55f7d6f011acdd8d1f0c89551",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "af8a75aa_814b433c",
        "filename": "pc/ice_transport.cc",
        "patchSetId": 3
      },
      "lineNbr": 28,
      "author": {
        "id": 5634
      },
      "writtenOn": "2019-01-22T11:51:54Z",
      "side": 1,
      "message": "Yes, IceTransportOwningInternalTransport is for use with the present Blink allocation method (QUIC use case). IceTransportWithPointer is intended to fit with the current JsepTransport\u0027s usage of cricket::IceTransportInternal.\n\nI hope a next step is to refactor JsepTransport so that it can use an IceTransportOwningInternalTransport instead of a std::unique_pointer\u003ccricket::IceTransportInternal\u003e. One step at a time.",
      "parentUuid": "1d369213_29afb5c0",
      "revId": "fc77f761a0afc6d55f7d6f011acdd8d1f0c89551",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6ddcc808_c05d2238",
        "filename": "pc/ice_transport.cc",
        "patchSetId": 3
      },
      "lineNbr": 34,
      "author": {
        "id": 5142
      },
      "writtenOn": "2019-01-21T16:50:10Z",
      "side": 1,
      "message": "These should be in an anonymous namespace webrtc::(anonymous), and since it\u0027s all in the .cc file you can inline the constructor for readability.",
      "revId": "fc77f761a0afc6d55f7d6f011acdd8d1f0c89551",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d8cc7fcb_d075a080",
        "filename": "pc/ice_transport.cc",
        "patchSetId": 3
      },
      "lineNbr": 34,
      "author": {
        "id": 5634
      },
      "writtenOn": "2019-01-22T11:51:54Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6ddcc808_c05d2238",
      "revId": "fc77f761a0afc6d55f7d6f011acdd8d1f0c89551",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0bc93b3e_889fadbd",
        "filename": "pc/ice_transport.cc",
        "patchSetId": 3
      },
      "lineNbr": 40,
      "author": {
        "id": 5142
      },
      "writtenOn": "2019-01-21T16:50:10Z",
      "side": 1,
      "message": "These arguments don\u0027t look like anything real. In practice we do need to set transport_name and component (they\u0027re used in getStats amongst other things). What is the plan for this?",
      "revId": "fc77f761a0afc6d55f7d6f011acdd8d1f0c89551",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cf014436_179db97b",
        "filename": "pc/ice_transport.cc",
        "patchSetId": 3
      },
      "lineNbr": 40,
      "author": {
        "id": 5634
      },
      "writtenOn": "2019-01-21T17:57:43Z",
      "side": 1,
      "message": "It\u0027s exactly the parameters that are presently used for the IceTransport in the blink layer.",
      "parentUuid": "0bc93b3e_889fadbd",
      "revId": "fc77f761a0afc6d55f7d6f011acdd8d1f0c89551",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bdd6f4ee_4e65b235",
        "filename": "pc/ice_transport.cc",
        "patchSetId": 3
      },
      "lineNbr": 45,
      "author": {
        "id": 5142
      },
      "writtenOn": "2019-01-21T16:50:10Z",
      "side": 1,
      "message": "What is the threading model supposed to be?",
      "revId": "fc77f761a0afc6d55f7d6f011acdd8d1f0c89551",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "713f9769_90701e32",
        "filename": "pc/ice_transport.cc",
        "patchSetId": 3
      },
      "lineNbr": 45,
      "author": {
        "id": 5634
      },
      "writtenOn": "2019-01-21T17:57:43Z",
      "side": 1,
      "message": "All manipulation on the thread that created it. The code for checking that is boilerplate.",
      "parentUuid": "bdd6f4ee_4e65b235",
      "revId": "fc77f761a0afc6d55f7d6f011acdd8d1f0c89551",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "72835f93_3e174068",
        "filename": "pc/ice_transport.h",
        "patchSetId": 3
      },
      "lineNbr": 25,
      "author": {
        "id": 5142
      },
      "writtenOn": "2019-01-21T16:50:10Z",
      "side": 1,
      "message": "nit:\n  : internal_(internal) {}\n\nI think constructors should be in the .cc.",
      "revId": "fc77f761a0afc6d55f7d6f011acdd8d1f0c89551",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "909584ca_7f9fa9df",
        "filename": "pc/ice_transport.h",
        "patchSetId": 3
      },
      "lineNbr": 25,
      "author": {
        "id": 5126
      },
      "writtenOn": "2019-01-22T00:46:05Z",
      "side": 1,
      "message": "We have a style checker (borrowed from Chromium) that asks for complex constructors to be non-inlined. If it doesn\u0027t complain, feel free to keep it in the .h file.",
      "parentUuid": "72835f93_3e174068",
      "revId": "fc77f761a0afc6d55f7d6f011acdd8d1f0c89551",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c49f8351_94194014",
        "filename": "pc/ice_transport.h",
        "patchSetId": 3
      },
      "lineNbr": 25,
      "author": {
        "id": 5634
      },
      "writtenOn": "2019-01-22T11:51:54Z",
      "side": 1,
      "message": "Did the init thing, style checker doesn\u0027t complain, and body\u0027s now empty.",
      "parentUuid": "909584ca_7f9fa9df",
      "revId": "fc77f761a0afc6d55f7d6f011acdd8d1f0c89551",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    }
  ]
}