{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "65d43f79_6d947dfd",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5122
      },
      "writtenOn": "2022-10-19T13:06:26Z",
      "side": 1,
      "message": "Thanks Per!",
      "revId": "c56b82418a83cbff8bb4afe0ea7249ce7bc55635",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "13fe9551_a198c71b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5122
      },
      "writtenOn": "2022-10-19T15:20:56Z",
      "side": 1,
      "message": "Thanks Sam!",
      "revId": "c56b82418a83cbff8bb4afe0ea7249ce7bc55635",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3347b4b5_18a47d96",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5122
      },
      "writtenOn": "2022-10-21T08:51:47Z",
      "side": 1,
      "message": "Thanks for your comments. Two follow-up questions; Per could you also check the thread started by Sam on the ProcessStream() alternative with optional arguments for key_press and applied/recommended input volume?",
      "revId": "c56b82418a83cbff8bb4afe0ea7249ce7bc55635",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "321a9d41_d4f634ac",
        "filename": "modules/audio_processing/include/audio_processing.h",
        "patchSetId": 2
      },
      "lineNbr": 575,
      "author": {
        "id": 6641
      },
      "writtenOn": "2022-10-19T15:13:45Z",
      "side": 1,
      "message": "What is a client supposed to do if they want transient suppression but not analog AGC, or vice versa? And if they need to support analog AGC disable and enabled, do they have to if-switch between which interface to call?\n\nThe proposal we discussed over email made the new parameters optional.",
      "range": {
        "startLine": 569,
        "startChar": 0,
        "endLine": 575,
        "endChar": 50
      },
      "revId": "c56b82418a83cbff8bb4afe0ea7249ce7bc55635",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c7ffc845_4bdd7466",
        "filename": "modules/audio_processing/include/audio_processing.h",
        "patchSetId": 2
      },
      "lineNbr": 575,
      "author": {
        "id": 5122
      },
      "writtenOn": "2022-10-19T15:20:56Z",
      "side": 1,
      "message": "\u003e What is a client supposed to do if they want transient suppression but not analog AGC\n\nThen just use the existing `ProcessStream()` overload.\n\n\u003e, or vice versa?\n\nThen just use the newly added `ProcessStream()` overload.\n\n\u003e And if they need to support analog AGC disable and enabled, do they have to if-switch between which interface to call?\n\nNo. When the input volume controller is disabled, the recommended volume equals the applied one. See line 566:\n\n```\n// If input volume adjustment is disabled, recommends `applied_input_volume`.\n```\n\n\u003e \n\u003e The proposal we discussed over email made the new parameters optional.\n\nNot the last version; see https://bugs.chromium.org/p/webrtc/issues/detail?id\u003d14581, the description mentions what we agreed on offline (unless I\u0027m wrong).",
      "parentUuid": "321a9d41_d4f634ac",
      "range": {
        "startLine": 569,
        "startChar": 0,
        "endLine": 575,
        "endChar": 50
      },
      "revId": "c56b82418a83cbff8bb4afe0ea7249ce7bc55635",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c795d829_b91b56d3",
        "filename": "modules/audio_processing/include/audio_processing.h",
        "patchSetId": 2
      },
      "lineNbr": 575,
      "author": {
        "id": 6280
      },
      "writtenOn": "2022-10-20T15:55:45Z",
      "side": 1,
      "message": "\u003e \u003e What is a client supposed to do if they want transient suppression but not analog AGC\n\u003e Then just use the existing ProcessStream() overload.\n\nHmm, I don\u0027t follow. The existing overload doesn\u0027t support key_press signaling, right?",
      "parentUuid": "c7ffc845_4bdd7466",
      "range": {
        "startLine": 569,
        "startChar": 0,
        "endLine": 575,
        "endChar": 50
      },
      "revId": "c56b82418a83cbff8bb4afe0ea7249ce7bc55635",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "335b1827_7edb6c06",
        "filename": "modules/audio_processing/include/audio_processing.h",
        "patchSetId": 2
      },
      "lineNbr": 575,
      "author": {
        "id": 5122
      },
      "writtenOn": "2022-10-21T08:51:47Z",
      "side": 1,
      "message": "My bad. I now see what you mean.\n\nGood point on thinking what would happen for a setup with no input volume, but with keyboard. Having one single ProcessStream() method with optionals for key_pressed and applied input volume is what I initially proposed to have one single method and avoid combinatorial explosion (namely, {int, float} x {keyboard, no keyboard} x {input volume, no input volume}).\n\nPer noted that in practice (i) input volume and keyboard activity detection are either both available or unavailable and (ii) input volume is only available on platforms where we use the float processing. For this reason, it makes sense to restrict the API to the setups we support. I therefore designed the current option, with two overloads of `ProcessStream()`:\n- One for platforms with neither input volume nor keyboard\n- Another one for platforms with both\nOne advantage of this solution is that the API clearly indicates what setups are supported, but on the other hand, as your comment hints, we restrict the possibility to open up to other setups. For example, to support keyboard activity-informed TS without input volume, we would need to change the API again (undesired).\n\nI am absolutely open to deprecate the existing `ProcessStream()` methods (both int and float) and add optional arguments, namely:\n\n```\nint ProcessStream(const T* const* src,\n                  const StreamConfig\u0026 input_config,\n                  const StreamConfig\u0026 output_config,\n                  T* const* dest,\n                  absl::optional\u003cbool\u003e key_pressed \u003d absl::nullopt,\n                  absl::optional\u003cint\u003e applied_input_volume \u003d absl::nullopt,\n                  int* recommended_input_volume \u003d nullptr);\n```\n\nThis is for sure a more flexible option that eliminates the combinatorial explosion problem and thanks to which the API doesn\u0027t limit the supported APM config (better decoupling).\n\nI would lean towards the option with optional arguments as I believe the API shouldn\u0027t be used to add config constraints that might change in the future. Maybe Per can add more details on his proposals.",
      "parentUuid": "c795d829_b91b56d3",
      "range": {
        "startLine": 569,
        "startChar": 0,
        "endLine": 575,
        "endChar": 50
      },
      "revId": "c56b82418a83cbff8bb4afe0ea7249ce7bc55635",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0a0157db_44b896fa",
        "filename": "modules/audio_processing/include/audio_processing.h",
        "patchSetId": 2
      },
      "lineNbr": 575,
      "author": {
        "id": 5125
      },
      "writtenOn": "2022-10-21T09:40:30Z",
      "side": 1,
      "message": "What I like with the above suggestion, using optional values, is that it only requires one ProcessStream API.\n\nWhat I don\u0027t like about it is that I think it becomes confusing and harder to use for the users, and more difficult to maintain for APM.\n\nSome aspects for that are\n-Users of non-chrome platforms would have to know/understand the extra arguments. I.e., they\u0027d have to know that they shouldn\u0027t specify the extra parameters.\n\n-The interaction between the configs and the parameters becomes (IMO) a bit unintuitive in that both provide optional  optional parameters that needs to together be properly specified to get the right effect.\n\n-The API opens up for non-allowed parameter combinations, and parameter combinations that never are used in practice. Somehow that would, however, have to be maintained in the code. E.g.\n--The API allows for key_pressed to be specified, but not applied_input_volume, which is something that never occurs in practice.\n--The API allows for applied_input_volume to be specified, but recommended_input_volume to be nullptr, which does not at all work.\n--The API allows for recommended_input_volume to !\u003d nullptr, while applied_input_volume is nullopt, which does not work.\n\n\nTo conclude, I think it is much easier and clearer to have two separate ProcessStream APIs, both for the users, as well for the APM code implementing those.",
      "parentUuid": "335b1827_7edb6c06",
      "range": {
        "startLine": 569,
        "startChar": 0,
        "endLine": 575,
        "endChar": 50
      },
      "revId": "c56b82418a83cbff8bb4afe0ea7249ce7bc55635",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4729a7cb_19e5087b",
        "filename": "modules/audio_processing/include/audio_processing.h",
        "patchSetId": 2
      },
      "lineNbr": 575,
      "author": {
        "id": 6280
      },
      "writtenOn": "2022-10-25T12:31:55Z",
      "side": 1,
      "message": "I don\u0027t have a strong opinion about which of the APIs we choose, so let\u0027s go with the current function definition (but clarify the docstring).\n\nI have an opinion that we should know and document what the API is. Neither proposal does this. The current proposal implicitly:\n- stops supporting transient suppression without analog AGC, or\n- promises not to use the keypress or input volume if the correponding module is disabled, or\n- has magic values for these parameters that should be used when the corresponding module is disabled.\n\nIf the docstring is updated to tell the user what to do with `key_pressed` and `applied_input_volume` if the corresponding submodule is disabled, or that they cannot use the API if either is disabled, then I\u0027m happy. Example:\n\n```\n  // Accepts deinterleaved float audio with the range [-1, 1]. Each element of\n  // `src` points to a channel buffer, arranged according to `input_stream`. At\n  // output, the channels will be arranged according to `output_stream` in\n  // `dest`.\n  //\n  // The output must have one channel or as many channels as the input. `src`\n  // and `dest` may use the same memory, if desired.\n  //\n  // `applied_input_volume` is the known input volume used when the\n  // audio content in `src` was acquired should be provided.\n  // `recommended_input_volume` will be populated with a recommended new input\n  // volume.\n  // If input volume adjustment is disabled, `applied_input_volume` has no effect\n  // and is copied into `recommended_input_volume`.\n  //\n  // `key_pressed` specifies whether one or more key press events occurred while\n  // the audio content in `src` was acquired. If transient suppression is disabled,\n  // this value is ignored.\n```\n\n\n\n```\n-Users of non-chrome platforms would have to know/understand the extra arguments. I.e., they\u0027d have to know that they shouldn\u0027t specify the extra parameters.\n```\nOptional parameters define multiple overloaded versions of the function, and it a common pattern that params with default values are safe to ignore unless you want something special. Not specifying default values is the same as using the current ProcessStream API.\n\nOne may just as well argue that the users need to understand the parameters with any of our API proposals. \"Who doesn\u0027t want an input volume on their audio? My application for sure doesn\u0027t want zero volume, I\u0027d better use this API.\" etc.\n\n```\n-The API opens up for non-allowed parameter combinations, and parameter combinations that never are used in practice. \n```\nSo does the current API, until we clearly state how key_pressed and applied_input_volume do and when they are safe to ignore.\n\n\nI don\u0027t mind either API, as long as it is possible to understand for a user without reading audio_processing_impl.cc.",
      "parentUuid": "0a0157db_44b896fa",
      "range": {
        "startLine": 569,
        "startChar": 0,
        "endLine": 575,
        "endChar": 50
      },
      "revId": "c56b82418a83cbff8bb4afe0ea7249ce7bc55635",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8e648b1b_cfb78002",
        "filename": "modules/audio_processing/include/audio_processing.h",
        "patchSetId": 2
      },
      "lineNbr": 575,
      "author": {
        "id": 5122
      },
      "writtenOn": "2022-11-01T13:20:59Z",
      "side": 1,
      "message": "After the offline discussion, part of the issues discussed in this thread are not relevant anymore. We decided to leave `set_stream_key_pressed()` unchanged and not to add `key_pressed` as argument in the newly added overload of `ProcessStream()`. Because of this, the preference is to add a `ProcessStream()` overload instead of adding optional arguments to the existing method; in this way, we don\u0027t have to handle the case where, for example, the applied input volume is not passed and a non-null pointer to write the recommended input volume is passed.",
      "parentUuid": "4729a7cb_19e5087b",
      "range": {
        "startLine": 569,
        "startChar": 0,
        "endLine": 575,
        "endChar": 50
      },
      "revId": "c56b82418a83cbff8bb4afe0ea7249ce7bc55635",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    }
  ]
}