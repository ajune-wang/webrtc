{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "21d050a5_dc54b750",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5234
      },
      "writtenOn": "2020-11-02T14:36:10Z",
      "side": 1,
      "message": "PTAL. Is this a sensible use of atomics?",
      "revId": "84ca64687efcd1c7ee8a7c0b9684314d195a3302",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "30a1e9f9_19ea3252",
        "filename": "system_wrappers/include/clock.h",
        "patchSetId": 1
      },
      "lineNbr": 84,
      "author": {
        "id": 5234
      },
      "writtenOn": "2020-11-02T14:36:10Z",
      "side": 1,
      "message": "Can this be replaced with a sequence checker?",
      "range": {
        "startLine": 82,
        "startChar": 0,
        "endLine": 84,
        "endChar": 15
      },
      "revId": "84ca64687efcd1c7ee8a7c0b9684314d195a3302",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7580fb35_b66b7e23",
        "filename": "system_wrappers/include/clock.h",
        "patchSetId": 1
      },
      "lineNbr": 88,
      "author": {
        "id": 5126
      },
      "writtenOn": "2020-11-02T14:51:17Z",
      "side": 1,
      "message": "corresponds to",
      "range": {
        "startLine": 88,
        "startChar": 54,
        "endLine": 88,
        "endChar": 65
      },
      "revId": "84ca64687efcd1c7ee8a7c0b9684314d195a3302",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "90f7f676_fcb72949",
        "filename": "system_wrappers/include/clock.h",
        "patchSetId": 1
      },
      "lineNbr": 88,
      "author": {
        "id": 5126
      },
      "writtenOn": "2020-11-02T14:51:17Z",
      "side": 1,
      "message": "monotonically",
      "range": {
        "startLine": 88,
        "startChar": 66,
        "endLine": 88,
        "endChar": 78
      },
      "revId": "84ca64687efcd1c7ee8a7c0b9684314d195a3302",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "80a2f0ff_61a66a15",
        "filename": "system_wrappers/include/clock.h",
        "patchSetId": 1
      },
      "lineNbr": 88,
      "author": {
        "id": 5234
      },
      "writtenOn": "2020-11-02T14:58:16Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "90f7f676_fcb72949",
      "range": {
        "startLine": 88,
        "startChar": 66,
        "endLine": 88,
        "endChar": 78
      },
      "revId": "84ca64687efcd1c7ee8a7c0b9684314d195a3302",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fb7672d1_117374c4",
        "filename": "system_wrappers/include/clock.h",
        "patchSetId": 1
      },
      "lineNbr": 88,
      "author": {
        "id": 5234
      },
      "writtenOn": "2020-11-02T14:58:16Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7580fb35_b66b7e23",
      "range": {
        "startLine": 88,
        "startChar": 54,
        "endLine": 88,
        "endChar": 65
      },
      "revId": "84ca64687efcd1c7ee8a7c0b9684314d195a3302",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "24cc3f61_b4aa61e5",
        "filename": "system_wrappers/include/clock.h",
        "patchSetId": 1
      },
      "lineNbr": 90,
      "author": {
        "id": 5234
      },
      "writtenOn": "2020-11-02T14:36:10Z",
      "side": 1,
      "message": "I wish there were something similar to guarded_by that only requires locking for modification, but there seems to be nothing like that.",
      "range": {
        "startLine": 90,
        "startChar": 0,
        "endLine": 90,
        "endChar": 31
      },
      "revId": "84ca64687efcd1c7ee8a7c0b9684314d195a3302",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "30e8cd15_fc96a320",
        "filename": "system_wrappers/include/clock.h",
        "patchSetId": 1
      },
      "lineNbr": 90,
      "author": {
        "id": 5126
      },
      "writtenOn": "2020-11-02T14:51:17Z",
      "side": 1,
      "message": "You can probably use the system\u0027s support for RW locks make a mutex class whose read lock method is a no-op, if you want this enough...",
      "parentUuid": "24cc3f61_b4aa61e5",
      "range": {
        "startLine": 90,
        "startChar": 0,
        "endLine": 90,
        "endChar": 31
      },
      "revId": "84ca64687efcd1c7ee8a7c0b9684314d195a3302",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5d23f762_184b590b",
        "filename": "system_wrappers/include/clock.h",
        "patchSetId": 1
      },
      "lineNbr": 90,
      "author": {
        "id": 5234
      },
      "writtenOn": "2020-11-03T09:23:05Z",
      "side": 1,
      "message": "Not now. Maybe later, if we end up with this access pattern in more places.",
      "parentUuid": "30e8cd15_fc96a320",
      "range": {
        "startLine": 90,
        "startChar": 0,
        "endLine": 90,
        "endChar": 31
      },
      "revId": "84ca64687efcd1c7ee8a7c0b9684314d195a3302",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5330cbc3_a92564a0",
        "filename": "system_wrappers/source/clock.cc",
        "patchSetId": 1
      },
      "lineNbr": 248,
      "author": {
        "id": 5234
      },
      "writtenOn": "2020-11-02T14:58:16Z",
      "side": 1,
      "message": "Compiler error says that this needs a default constructor for the Timestamp() class. As far as I understand, this is with GNU g++, but with the atomic template defined by clang\u0027s libc++, not the GNU libstdc++.",
      "range": {
        "startLine": 248,
        "startChar": 0,
        "endLine": 248,
        "endChar": 47
      },
      "revId": "84ca64687efcd1c7ee8a7c0b9684314d195a3302",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ed2d830e_f59b4fea",
        "filename": "system_wrappers/source/clock.cc",
        "patchSetId": 1
      },
      "lineNbr": 273,
      "author": {
        "id": 5126
      },
      "writtenOn": "2020-11-02T14:51:17Z",
      "side": 1,
      "message": "Why is it not sufficient to do a relaxed atomic increment?",
      "revId": "84ca64687efcd1c7ee8a7c0b9684314d195a3302",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5cf6c59b_66022916",
        "filename": "system_wrappers/source/clock.cc",
        "patchSetId": 1
      },
      "lineNbr": 273,
      "author": {
        "id": 5234
      },
      "writtenOn": "2020-11-02T14:58:16Z",
      "side": 1,
      "message": "I tried .fetch_add, and it failed because the compiler didn\u0027t think the Timestamp type was Integral enough. So no such method.\n\nIs there any other way to do atomic increment?\n\nThis (as well as the compile error) could be fixed by making the member an atomic\u003cint64_t\u003e, and converting to and from Timestamp for all public methods. But it would be nicer if we didn\u0027t have to.",
      "parentUuid": "ed2d830e_f59b4fea",
      "revId": "84ca64687efcd1c7ee8a7c0b9684314d195a3302",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a6df6c56_7bc33119",
        "filename": "system_wrappers/source/clock.cc",
        "patchSetId": 1
      },
      "lineNbr": 273,
      "author": {
        "id": 5126
      },
      "writtenOn": "2020-11-03T09:46:37Z",
      "side": 1,
      "message": "You can use std::atomic_compare_exchange_weak_explicit; that will likely result in worse code than if you used std::atomic_fetch_add_explicit, but (1) the latter appears to only be usable with built-in and standard library integer types, and (2) it wouldn\u0027t work with TimeStamp\u0027s saturating arithmetic anyway.",
      "parentUuid": "5cf6c59b_66022916",
      "revId": "84ca64687efcd1c7ee8a7c0b9684314d195a3302",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    }
  ]
}