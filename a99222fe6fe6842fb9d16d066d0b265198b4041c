{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "2bc1b3a3_aceec78a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 5634
      },
      "writtenOn": "2023-02-27T09:41:43Z",
      "side": 1,
      "message": "Agree with Danil\u0027s comments, otherwise looks good to me.",
      "revId": "a99222fe6fe6842fb9d16d066d0b265198b4041c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a33e78d8_a5b76128",
        "filename": "modules/rtp_rtcp/source/rtp_packet_unittest.cc",
        "patchSetId": 3
      },
      "lineNbr": 1042,
      "author": {
        "id": 5019
      },
      "writtenOn": "2023-02-27T09:21:43Z",
      "side": 1,
      "message": "nit: you may skip Optional matcher, operator\u003d\u003d is well defined between optional\u003cT\u003e and T\n\ni.e. you may write\nEXPECT_THAT(packet.GetXtension...(), Eq(kAbsoluteCapturetime));\nor\nEXPECT_THAT(packet.GetXtension...(), kAbsoluteCapturetime);\nor\nEXPECT_EQ(packet.GetXtension...(), kAbsoluteCapturetime);\n\n(out of these 3 forms I would prefer 1st or 3rd, choose whatever you like more, including leaving as is to stress GetExtension returns optional)",
      "range": {
        "startLine": 1042,
        "startChar": 14,
        "endLine": 1042,
        "endChar": 50
      },
      "revId": "a99222fe6fe6842fb9d16d066d0b265198b4041c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "57b43e54_2a3bacee",
        "filename": "modules/rtp_rtcp/source/rtp_packet_unittest.cc",
        "patchSetId": 3
      },
      "lineNbr": 1046,
      "author": {
        "id": 5019
      },
      "writtenOn": "2023-02-27T09:21:43Z",
      "side": 1,
      "message": "I still find the test name misleading - it doesn\u0027t test anything specific to AbsoluteCaptureTime, it tests that using id \u003e 14 requires two byte header (extmap_allow_mixed set to true).\n\nThat is true for any rtp header extension",
      "range": {
        "startLine": 1046,
        "startChar": 14,
        "endLine": 1046,
        "endChar": 33
      },
      "revId": "a99222fe6fe6842fb9d16d066d0b265198b4041c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "981fbae2_b7a5a83c",
        "filename": "modules/rtp_rtcp/source/rtp_packet_unittest.cc",
        "patchSetId": 3
      },
      "lineNbr": 1046,
      "author": {
        "id": 5122
      },
      "writtenOn": "2023-02-27T10:05:09Z",
      "side": 1,
      "message": "Good point. I removed these tests and added `CreateTwoByteHeaderSupportedIfExtmapAllowMixed` close to where two bytes header extensions are tested.",
      "parentUuid": "57b43e54_2a3bacee",
      "range": {
        "startLine": 1046,
        "startChar": 14,
        "endLine": 1046,
        "endChar": 33
      },
      "revId": "a99222fe6fe6842fb9d16d066d0b265198b4041c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    }
  ]
}