{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "2b4e129b_1fc6e5a2",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5634
      },
      "writtenOn": "2022-06-20T08:05:16Z",
      "side": 1,
      "message": "Commentary. Update coming.\n",
      "revId": "0ce60f93d69733c42e2bdfbb80fb857726231106",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7276cc84_514504dd",
        "filename": "g3doc/implementation_basics.md",
        "patchSetId": 1
      },
      "lineNbr": 40,
      "author": {
        "id": 5019
      },
      "writtenOn": "2022-06-15T17:55:31Z",
      "side": 1,
      "message": "suffixes",
      "range": {
        "startLine": 40,
        "startChar": 18,
        "endLine": 40,
        "endChar": 23
      },
      "revId": "0ce60f93d69733c42e2bdfbb80fb857726231106",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e8f48c53_94d7286b",
        "filename": "g3doc/implementation_basics.md",
        "patchSetId": 1
      },
      "lineNbr": 48,
      "author": {
        "id": 5019
      },
      "writtenOn": "2022-06-15T17:55:31Z",
      "side": 1,
      "message": "why limit how Foo is wrapped?\nfactory may also return optional\u003cFoo\u003e and plain Foo\n\nhttps://abseil.io/tips/11",
      "range": {
        "startLine": 48,
        "startChar": 41,
        "endLine": 48,
        "endChar": 96
      },
      "revId": "0ce60f93d69733c42e2bdfbb80fb857726231106",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7ffa7bf0_a3251d63",
        "filename": "g3doc/implementation_basics.md",
        "patchSetId": 1
      },
      "lineNbr": 48,
      "author": {
        "id": 5019
      },
      "writtenOn": "2022-06-15T17:55:31Z",
      "side": 1,
      "message": "alternativly \nFooFactory might be just a function:\n\n.h\n  Foo DefaultFooFactory(); \n  \n\n.cc  \n  Foo DefaultFooFactory() {\n    return Foo(kDefaultParam);\n  }",
      "range": {
        "startLine": 48,
        "startChar": 2,
        "endLine": 48,
        "endChar": 35
      },
      "revId": "0ce60f93d69733c42e2bdfbb80fb857726231106",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "12ebeb75_9142d3bd",
        "filename": "g3doc/implementation_basics.md",
        "patchSetId": 1
      },
      "lineNbr": 48,
      "author": {
        "id": 5634
      },
      "writtenOn": "2022-06-20T08:05:16Z",
      "side": 1,
      "message": "We use a thundering lot of Factory classes today, I don\u0027t see that changing. I think we usually use Foo::Create() for the equivalent of a free function factory.",
      "parentUuid": "7ffa7bf0_a3251d63",
      "range": {
        "startLine": 48,
        "startChar": 2,
        "endLine": 48,
        "endChar": 35
      },
      "revId": "0ce60f93d69733c42e2bdfbb80fb857726231106",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6e1bf071_516b05df",
        "filename": "g3doc/implementation_basics.md",
        "patchSetId": 1
      },
      "lineNbr": 48,
      "author": {
        "id": 5634
      },
      "writtenOn": "2022-06-20T08:05:16Z",
      "side": 1,
      "message": "What I wanted to say is that a factory should NOT return a raw pointer. Will rephrase.",
      "parentUuid": "e8f48c53_94d7286b",
      "range": {
        "startLine": 48,
        "startChar": 41,
        "endLine": 48,
        "endChar": 96
      },
      "revId": "0ce60f93d69733c42e2bdfbb80fb857726231106",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f2a3d962_82db2dc5",
        "filename": "g3doc/implementation_basics.md",
        "patchSetId": 1
      },
      "lineNbr": 48,
      "author": {
        "id": 5234
      },
      "writtenOn": "2022-06-20T09:38:26Z",
      "side": 1,
      "message": "I think the reason factory classes are so common in C++ (and java) is that unlike many other OO languages, classes aren\u0027t a first class type; i.e., you can\u0027t pass a reference to a class, and let other code create instances of it. However, these days we do have convenient lambdas (unnamed functions with state), which are perfectly fine for this common use case.\n\nSo I think it would make some sense to add a note here that new code should consider using a function (e.g., represented as an absl::AnyInvocable which is just being released), instead of defining additional factory interface classes.",
      "parentUuid": "12ebeb75_9142d3bd",
      "range": {
        "startLine": 48,
        "startChar": 2,
        "endLine": 48,
        "endChar": 35
      },
      "revId": "0ce60f93d69733c42e2bdfbb80fb857726231106",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b687d5d7_c9e63616",
        "filename": "g3doc/implementation_basics.md",
        "patchSetId": 1
      },
      "lineNbr": 48,
      "author": {
        "id": 5019
      },
      "writtenOn": "2022-06-20T10:02:34Z",
      "side": 1,
      "message": "In webrtc we usually do, but such pattern (class with single static Create method) is against style guide:\n\nhttps://google.github.io/styleguide/cppguide.html#Nonmember,_Static_Member,_and_Global_Functions\n“Do not use a class simply to group static members.”\n\n(I do use a factory function in such case, and would recommend factory to be a function rather than class)",
      "parentUuid": "12ebeb75_9142d3bd",
      "range": {
        "startLine": 48,
        "startChar": 2,
        "endLine": 48,
        "endChar": 35
      },
      "revId": "0ce60f93d69733c42e2bdfbb80fb857726231106",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7bab865f_dad29193",
        "filename": "g3doc/implementation_basics.md",
        "patchSetId": 1
      },
      "lineNbr": 50,
      "author": {
        "id": 5087
      },
      "writtenOn": "2022-06-15T14:12:11Z",
      "side": 1,
      "message": "Is this mandatory?\n\nCan we have a builder that builds a complex object (no heap allocation) and just returns it by value?\n\nThis is probably rare but I would not be surprised by such behaviour for a *Builder.",
      "range": {
        "startLine": 50,
        "startChar": 48,
        "endLine": 50,
        "endChar": 84
      },
      "revId": "0ce60f93d69733c42e2bdfbb80fb857726231106",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6b5a87b3_348af18f",
        "filename": "g3doc/implementation_basics.md",
        "patchSetId": 1
      },
      "lineNbr": 50,
      "author": {
        "id": 5019
      },
      "writtenOn": "2022-06-15T17:55:31Z",
      "side": 1,
      "message": "instead/in addition to name convention, it is possible to ask c++ to help with that:\n\n  class FooBuilder {\n   public:\n    SetA(...);\n    SetB(...);\n  \n    Foo Build() \u0026\u0026;\n  };\n\n  FooBuilder builder;\n  builder.SetA();\n  // builder.Builder(); \u003c- won\u0027t compile\n  Foo foo \u003d std::move(builder).Build();\n  // builder.SetB(); \u003c- compiler would generate \u0027use after move\u0027 warning.\n\n\nhttp://go/totw/203#using-qualifiers-to-express-api-semantics",
      "range": {
        "startLine": 50,
        "startChar": 86,
        "endLine": 50,
        "endChar": 119
      },
      "revId": "0ce60f93d69733c42e2bdfbb80fb857726231106",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d298fb48_2702062e",
        "filename": "g3doc/implementation_basics.md",
        "patchSetId": 1
      },
      "lineNbr": 50,
      "author": {
        "id": 5634
      },
      "writtenOn": "2022-06-20T08:05:16Z",
      "side": 1,
      "message": "the additional std::move is visual noise, but may be good to make people think about when to use std::move more. Open issue.\n\nThe use of reference qualifications is rather new, isn\u0027t it?",
      "parentUuid": "6b5a87b3_348af18f",
      "range": {
        "startLine": 50,
        "startChar": 86,
        "endLine": 50,
        "endChar": 119
      },
      "revId": "0ce60f93d69733c42e2bdfbb80fb857726231106",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "627fbfcf_8547d67c",
        "filename": "g3doc/implementation_basics.md",
        "patchSetId": 1
      },
      "lineNbr": 50,
      "author": {
        "id": 5234
      },
      "writtenOn": "2022-06-20T09:38:26Z",
      "side": 1,
      "message": "Makes sense to me, and it\u0027s what VideoFrame::Builder::build() does.",
      "parentUuid": "7bab865f_dad29193",
      "range": {
        "startLine": 50,
        "startChar": 48,
        "endLine": 50,
        "endChar": 84
      },
      "revId": "0ce60f93d69733c42e2bdfbb80fb857726231106",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ba81d407_25adebde",
        "filename": "g3doc/implementation_basics.md",
        "patchSetId": 1
      },
      "lineNbr": 50,
      "author": {
        "id": 5019
      },
      "writtenOn": "2022-06-20T10:02:34Z",
      "side": 1,
      "message": "It is available since c++11, but wasn\u0027t advertised previously.\n\nI do not find std::move() to be noise - it is a signal Build() is destructive function, object shouldn\u0027t be used after Build is called.",
      "parentUuid": "d298fb48_2702062e",
      "range": {
        "startLine": 50,
        "startChar": 86,
        "endLine": 50,
        "endChar": 119
      },
      "revId": "0ce60f93d69733c42e2bdfbb80fb857726231106",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5ac8f16a_c1f6688b",
        "filename": "g3doc/implementation_basics.md",
        "patchSetId": 1
      },
      "lineNbr": 50,
      "author": {
        "id": 5634
      },
      "writtenOn": "2022-06-21T07:33:39Z",
      "side": 1,
      "message": "Added text about invocation and that C++ will police the \"once\" requirement for you.",
      "parentUuid": "ba81d407_25adebde",
      "range": {
        "startLine": 50,
        "startChar": 86,
        "endLine": 50,
        "endChar": 119
      },
      "revId": "0ce60f93d69733c42e2bdfbb80fb857726231106",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "05acaae3_318b96c1",
        "filename": "g3doc/implementation_basics.md",
        "patchSetId": 1
      },
      "lineNbr": 52,
      "author": {
        "id": 5019
      },
      "writtenOn": "2022-06-15T17:55:31Z",
      "side": 1,
      "message": "or Foo, but Foo contains pointers to FooManager members, i.e.\nFooManager has to outlive all usage of objects it creates.\nor Foo\u0026 (returning Foo* suggests it might be nullptr. Returning Foo\u0026 guarantees Create always successed)\n\nReference qualifies once again can help, though not as much as for Builder pattern:\n\n class FooManager {\n  public:\n   Foo Create() \u0026;\n };\n \n // Foo foo \u003d FooManager().Create(); \u003c- won\u0027t compile.\n optional\u003cFooManager\u003e manager(in_place);\n Foo foo \u003d manager-\u003eCreate();\n manager \u003d nullopt; // This is an error, but compiler won\u0027t hint that foo shouldn\u0027t outlive its manager.",
      "range": {
        "startLine": 52,
        "startChar": 101,
        "endLine": 52,
        "endChar": 108
      },
      "revId": "0ce60f93d69733c42e2bdfbb80fb857726231106",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "291008dc_8608c08f",
        "filename": "g3doc/implementation_basics.md",
        "patchSetId": 1
      },
      "lineNbr": 52,
      "author": {
        "id": 5634
      },
      "writtenOn": "2022-06-16T06:39:44Z",
      "side": 1,
      "message": "Wonder if I should add some words like \"If a Manager keeps track of objects of class Foo and Bar, the name should be suitably generic (probably not FooAndBarManager), and the Create functions should be named CreateFoo, CreateBar and so on\".",
      "revId": "0ce60f93d69733c42e2bdfbb80fb857726231106",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8fbc6612_a3eea4e8",
        "filename": "g3doc/implementation_basics.md",
        "patchSetId": 1
      },
      "lineNbr": 52,
      "author": {
        "id": 5634
      },
      "writtenOn": "2022-06-20T08:05:16Z",
      "side": 1,
      "message": "This is a case where the \u0026 annotation serves to call out the need, but doesn\u0027t protect against the most common form of error - documentation needed.\n\nI\u0027m skeptical of using Manager for something that is only tied to the Foo object by incoming pointers - seems like this should be called FooResourceContainer or something like that. It seems like an intermediate point between Factory and Manager that I\u0027m not comfortable with. Let\u0027s leave this open.",
      "parentUuid": "05acaae3_318b96c1",
      "range": {
        "startLine": 52,
        "startChar": 101,
        "endLine": 52,
        "endChar": 108
      },
      "revId": "0ce60f93d69733c42e2bdfbb80fb857726231106",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "18fb316a_3d44eefa",
        "filename": "g3doc/implementation_basics.md",
        "patchSetId": 1
      },
      "lineNbr": 52,
      "author": {
        "id": 5019
      },
      "writtenOn": "2022-06-20T10:02:34Z",
      "side": 1,
      "message": "at least add an option to return Foo\u0026 (as an indication Create function can\u0027t fail)",
      "parentUuid": "8fbc6612_a3eea4e8",
      "range": {
        "startLine": 52,
        "startChar": 101,
        "endLine": 52,
        "endChar": 108
      },
      "revId": "0ce60f93d69733c42e2bdfbb80fb857726231106",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "10fdc797_81ca8e86",
        "filename": "g3doc/implementation_basics.md",
        "patchSetId": 1
      },
      "lineNbr": 52,
      "author": {
        "id": 5634
      },
      "writtenOn": "2022-06-21T07:33:39Z",
      "side": 1,
      "message": "Added option (with caveat).",
      "parentUuid": "18fb316a_3d44eefa",
      "range": {
        "startLine": 52,
        "startChar": 101,
        "endLine": 52,
        "endChar": 108
      },
      "revId": "0ce60f93d69733c42e2bdfbb80fb857726231106",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    }
  ]
}