{
  "comments": [
    {
      "key": {
        "uuid": "68ff1817_43cba89b",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 7,
      "author": {
        "id": 5142
      },
      "writtenOn": "2018-06-11T09:56:07Z",
      "side": 1,
      "message": "Was this CL for demonstration purposes or actually up for review?\n\nThe technical side of this is that simple. However, it needs to be added to the spec first to be allowed exposure (https://github.com/w3c/webrtc-stats/issues), or it must be placed behind Origin Trial or C++-only exposure (requires some additional wiring that has not been done before but shouldn\u0027t be difficult).\n\n\"Echo likelihood\" is tricky to standardize without a widely applicable and precise definition of what \"echo likelihood\" means. Our echo detector is an implementation detail. Would the value 0.8 mean the same thing in Chrome as it does in Firefox/Safari/Edge/etc, were they to implement it? This might be something we ship by describing it in the provisional stats spec (it has not been used yet, but the repo is set up: https://github.com/henbos/webrtc-provisional-stats). That would be an acceptable compromises: We intend to standardize and we provide a working definition, but perhaps one not precise enough to meet the W3C standards bar, and one that would need revisiting if the stat proves useful. If on the other hand we do not intend for it to be standardized, then this is a \"goog stat\" not to see the light of day in the new API.\n\nCC hta@ in case this leads to a discussion.",
      "revId": "cf185e5c9d0f052e450d3166cd2a665a5fc1d713",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2d34614b_19318f22",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 7,
      "author": {
        "id": 5053
      },
      "writtenOn": "2018-06-13T23:50:14Z",
      "side": 1,
      "message": "\u003e Was this CL for demonstration purposes or actually up for review?\n\nMostly demonstration purposes, but with the ability to be finished and landed if there are no fundamental objections.\n\n\u003e However, it needs to be added to the spec first to be allowed exposure (https://github.com/w3c/webrtc-stats/issues), or it must be placed behind Origin Trial or C++-only exposure (requires some additional wiring that has not been done before but shouldn\u0027t be difficult).\n\nI thought stats had to be whitelisted before they appeared in chromium, meaning \"C++ only\" was the default, but I didn\u0027t realize we whitelisted whole types, not individual members: https://cs.chromium.org/chromium/src/content/renderer/media/webrtc/rtc_stats.cc?dr\u0026g\u003d0\u0026l\u003d19\n\nAny objection to changing this to whitelist individual members as well?\n\nWe need some way to add implementation-specific stats, for the benefit of native applications that only use one implementation of WebRTC and want the extra information without having to go through the legacy stats API.",
      "parentUuid": "68ff1817_43cba89b",
      "revId": "cf185e5c9d0f052e450d3166cd2a665a5fc1d713",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7ac5f8d9_3ed01443",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 7,
      "author": {
        "id": 5142
      },
      "writtenOn": "2018-06-14T06:53:33Z",
      "side": 1,
      "message": "Chromium has two guards against surfacing non-standard stuff:\n1. The filter, ignoring any unrecognized dictionary types. This is not as powerful as checking individual members but better than nothing. I didn\u0027t want to end up doing string comparisons for a hundred members for performance reasons.\n2. The integrationtest with withelist. There is a browsertest performing a call between two tabs and does getStats(), if any stats show up that are not whitelisted the test will fail. This is done on a per-member basis, but this will only catch stats that are surfaced in the test\u0027s scenario.\n\nI think the right approach is to add a new category of stats members:\nRTCExperimentalStatsMember\u003cT\u003e\n\nWith RTCStatsMemberInterface::is_experimental() returning true for those and false for RTCStatsMember\u003cT\u003e.\n\nThe RTCStatsReport iterator could then easily skip or include experimental stats, perhaps a switch report-\u003eExposeExperimentalStats(true);\n\nI proposed this here:\nhttps://docs.google.com/document/d/17FyH5Oeslk2fF66AOqwUALnDX1bCPrxI8zU3bJXHA08/edit?usp\u003dsharing\nThe document also discusses how experimental stats might be tied to Origin Trial and specific \"experiments\" in Chrome, but it is not up-to-date, I think we decided to control experimentation differently, to be decided when we actually run an experiment.\n\nIn any case, C++ land should have experimental stats that are not exposed to Chrome by default, and RTCExperimentalStatsMember\u003cT\u003e sounds good to me. Thoughts?",
      "parentUuid": "2d34614b_19318f22",
      "revId": "cf185e5c9d0f052e450d3166cd2a665a5fc1d713",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "54943d2c_db017ed9",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 7,
      "author": {
        "id": 5142
      },
      "writtenOn": "2018-06-14T06:59:16Z",
      "side": 1,
      "message": "Hierarchy:\nRTCExperimentalStatsMember\u003cT\u003e -\u003e RTCStatsMember\u003cT\u003e -\u003e RTCStatsMemberInterface\n\nThis way you can do member-\u003ecast_to\u003cRTCStatsMember\u003cuint32_t\u003e() whether or not the member is experimental or non-experimental.",
      "parentUuid": "7ac5f8d9_3ed01443",
      "revId": "cf185e5c9d0f052e450d3166cd2a665a5fc1d713",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "beee956b_5a09245f",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 7,
      "author": {
        "id": 5053
      },
      "writtenOn": "2018-06-14T22:50:59Z",
      "side": 1,
      "message": "How\u0027s this? https://webrtc-review.googlesource.com/c/src/+/83743\n\nI opted to not use inheritance since that seemed to just make things more complex. And I called it \"is_standardized\" instead of \"is_experimental\" since I\u0027d expect this to be used for things that aren\u0027t quite \"experimental,\" but still won\u0027t be standardized because they\u0027re specific to our implementation (like the NetEQ stats).",
      "parentUuid": "54943d2c_db017ed9",
      "revId": "cf185e5c9d0f052e450d3166cd2a665a5fc1d713",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1e042722_e788b99b",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 7,
      "author": {
        "id": 5142
      },
      "writtenOn": "2018-06-15T08:13:58Z",
      "side": 1,
      "message": "Commented on it. I still prefer a stats hierarchy because I want \"experimental\" to be called out in rtcstats_objects.h header file since I view this as a document describing the state of getStats() and I think experimental and non-experimental are categorically different, that this deserves more attention than a parameter passed to constructors in rtcstats_object.cc.\n\nWith regards to \"is_standardized\" vs \"is_experimental\" I have no strong opinion.\n\nWe could have kStandardized, kExperimental and kImplementationSpecific, or we could go with just standard and non-standard.",
      "parentUuid": "beee956b_5a09245f",
      "revId": "cf185e5c9d0f052e450d3166cd2a665a5fc1d713",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "028d48f7_eee774ed",
        "filename": "pc/rtcstats_integrationtest.cc",
        "patchSetId": 1
      },
      "lineNbr": 677,
      "author": {
        "id": 5142
      },
      "writtenOn": "2018-06-11T09:56:07Z",
      "side": 1,
      "message": "There is also rtcstats_unittest.cc which verifies the plumbing with fake lower layers.",
      "revId": "cf185e5c9d0f052e450d3166cd2a665a5fc1d713",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "61f98a8d_04e4b8f0",
        "filename": "pc/rtcstats_integrationtest.cc",
        "patchSetId": 1
      },
      "lineNbr": 677,
      "author": {
        "id": 5053
      },
      "writtenOn": "2018-06-13T23:50:14Z",
      "side": 1,
      "message": "I\u0027ll update that too if we move forward with this, thanks for reminding me.",
      "parentUuid": "028d48f7_eee774ed",
      "revId": "cf185e5c9d0f052e450d3166cd2a665a5fc1d713",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    }
  ]
}