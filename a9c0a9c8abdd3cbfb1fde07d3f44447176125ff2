{
  "comments": [
    {
      "key": {
        "uuid": "b4841c37_45fd2774",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 12
      },
      "lineNbr": 0,
      "author": {
        "id": 5087
      },
      "writtenOn": "2020-07-12T11:24:32Z",
      "side": 1,
      "message": "I didn\u0027t have time to go through the CL yet but I will do it this week.\n\nAn early question, I was expecting some binary size reduction but instead I see binary size going up so I suspect the linker is not yet able to remove x509 related code.\n\nDavid, is there a macro to define or something like that to cause x509 code to be stripped or are we still depending on it in this CL?",
      "revId": "a9c0a9c8abdd3cbfb1fde07d3f44447176125ff2",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b8294e4e_b61a3b1c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 12
      },
      "lineNbr": 0,
      "author": {
        "id": 5053
      },
      "writtenOn": "2020-07-13T23:10:12Z",
      "side": 1,
      "message": "We are still depending on it, specifically in LoadBuiltinSSLRootCertificates. Which isn\u0027t required by chromium at least, but is for native apps.\n\nI plan to try moving the code for using the system certificate stores from chromium to webrtc for this and other reasons.",
      "parentUuid": "b4841c37_45fd2774",
      "revId": "a9c0a9c8abdd3cbfb1fde07d3f44447176125ff2",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4b0e37d5_9b48e7b9",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 12
      },
      "lineNbr": 0,
      "author": {
        "id": 5053
      },
      "writtenOn": "2020-07-13T23:10:12Z",
      "side": 1,
      "message": "Note that review for this is not a high priority, its on the backburner for me right now.",
      "revId": "a9c0a9c8abdd3cbfb1fde07d3f44447176125ff2",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "842529de_5458b19d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 12
      },
      "lineNbr": 0,
      "author": {
        "id": 5087
      },
      "writtenOn": "2020-07-14T07:58:19Z",
      "side": 1,
      "message": "\u003e We are still depending on it, specifically in LoadBuiltinSSLRootCertificates. Which isn\u0027t required by chromium at least, but is for native apps.\n\u003e \n\u003e I plan to try moving the code for using the system certificate stores from chromium to webrtc for this and other reasons.\n\nOk, now I remember. Thanks.",
      "parentUuid": "b8294e4e_b61a3b1c",
      "revId": "a9c0a9c8abdd3cbfb1fde07d3f44447176125ff2",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c1eb6506_f2e363bb",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 12
      },
      "lineNbr": 0,
      "author": {
        "id": 5087
      },
      "writtenOn": "2020-07-14T07:58:19Z",
      "side": 1,
      "message": "SG, but I think it is an important (and awaited, since it comes back every few months) change so I think it would be nice to keep moving this. Maybe slowly but since you have already done part of the work it would be nice to get the benefits.",
      "parentUuid": "4b0e37d5_9b48e7b9",
      "revId": "a9c0a9c8abdd3cbfb1fde07d3f44447176125ff2",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b239cfac_628aa5c0",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 12
      },
      "lineNbr": 0,
      "author": {
        "id": 5634
      },
      "writtenOn": "2020-07-27T10:27:21Z",
      "side": 1,
      "message": "I am not enamored of the type hierarchy proposed here.\n\nWe have SSLCertificate, with sublcasses BoringSSLCertificate and OpenSSLCertificate (and similar things in other places, I think). Then we have parts of the implementation of OpenSSLCertificate calling into BoringSSLCertificate depending on a compile-time flag (if I read it rightly).\n\nThis is not going to be easy to maintain, because it\u0027s not easy to explain.\n\nI would be happier if the SSLCertificate API was fully implemented by each of the subclasses, without cross-references between them, and the common code was extracted to shared utilities.\n\nThat might be a larger CL, but might get us to a better place in the end.\n\nBTW: The presubmit error is because of the blank line between Bug: and Change-Id, I think.",
      "revId": "a9c0a9c8abdd3cbfb1fde07d3f44447176125ff2",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "54aaf7a4_911e19d9",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 12
      },
      "lineNbr": 0,
      "author": {
        "id": 5053
      },
      "writtenOn": "2020-07-27T22:42:48Z",
      "side": 1,
      "message": "\u003e Then we have parts of the implementation of OpenSSLCertificate calling into BoringSSLCertificate depending on a compile-time flag (if I read it rightly).\n\nWhere are you seeing that? This CL doesn\u0027t even modify OpenSSLCertificate. Are you talking about OpenSSLStreamAdapter? It\u0027s really \"OpenSSLOrBoringSSLStreamAdapter\" but that name seems unwieldy.",
      "parentUuid": "b239cfac_628aa5c0",
      "revId": "a9c0a9c8abdd3cbfb1fde07d3f44447176125ff2",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2df85efa_3e35640e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 12
      },
      "lineNbr": 0,
      "author": {
        "id": 5634
      },
      "writtenOn": "2020-07-28T14:58:12Z",
      "side": 1,
      "message": "Yes, it\u0027s OpenSSLStreamAdapter that is the confused object. We could rename it to SSLStreamAdapterImpl, or we could complete the job of separation.",
      "parentUuid": "54aaf7a4_911e19d9",
      "revId": "a9c0a9c8abdd3cbfb1fde07d3f44447176125ff2",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c539e8d9_269155c1",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 12
      },
      "lineNbr": 0,
      "author": {
        "id": 5634
      },
      "writtenOn": "2020-07-28T14:58:12Z",
      "side": 1,
      "message": "You\u0027re right.\n",
      "revId": "a9c0a9c8abdd3cbfb1fde07d3f44447176125ff2",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8f45811b_e01c4bd6",
        "filename": "rtc_base/BUILD.gn",
        "patchSetId": 12
      },
      "lineNbr": 886,
      "author": {
        "id": 5602
      },
      "writtenOn": "2020-06-04T22:18:51Z",
      "side": 1,
      "message": "Just to confirm: Are there scenarios where folks use BoringSSL without rtc_build_ssl if it\u0027s external?",
      "range": {
        "startLine": 886,
        "startChar": 6,
        "endLine": 886,
        "endChar": 19
      },
      "revId": "a9c0a9c8abdd3cbfb1fde07d3f44447176125ff2",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6c60c202_2769c284",
        "filename": "rtc_base/BUILD.gn",
        "patchSetId": 12
      },
      "lineNbr": 886,
      "author": {
        "id": 5087
      },
      "writtenOn": "2020-07-12T11:21:19Z",
      "side": 1,
      "message": "Not that I am aware of but it is hard to say.\n\nIn general, we might want to avid supporting that case hence assuming always BoringSSL if rtc_build_ssl and OpenSSL if !rtc_build_sll. I am saying this because from the BoringSSL documentation I see:\n\n  Although BoringSSL is an open source project, it is not intended for general use, as OpenSSL \n  is. We don\u0027t recommend that third parties depend upon it. Doing so is likely to be \n  frustrating because there are no guarantees of API or ABI stability.\n\nSo I think it is good to assume that WebRTC clients should build with OpenSSL (rtc_build_sll\u003dfalse and https://source.chromium.org/chromium/chromium/src/+/master:third_party/webrtc/webrtc.gni;l\u003d84-86;drc\u003d5fbd758b880d70488d0616c88999eedc3274c2ee.\n\nDoes this make sense?",
      "parentUuid": "8f45811b_e01c4bd6",
      "range": {
        "startLine": 886,
        "startChar": 6,
        "endLine": 886,
        "endChar": 19
      },
      "revId": "a9c0a9c8abdd3cbfb1fde07d3f44447176125ff2",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "35ddefa8_5835524f",
        "filename": "rtc_base/boringssl_certificate.cc",
        "patchSetId": 12
      },
      "lineNbr": 304,
      "author": {
        "id": 5087
      },
      "writtenOn": "2020-07-14T10:47:49Z",
      "side": 1,
      "message": "Is this true all the times of only when BORINGSSL_NO_STATIC_INITIALIZER is defined?\n\nIIRC from davidben@ BoringSSL should not need initialize/cleanup but maybe I am referring to another thing.",
      "range": {
        "startLine": 303,
        "startChar": 0,
        "endLine": 304,
        "endChar": 25
      },
      "revId": "a9c0a9c8abdd3cbfb1fde07d3f44447176125ff2",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "34274020_d9c6e371",
        "filename": "rtc_base/openssl_adapter.cc",
        "patchSetId": 12
      },
      "lineNbr": 27,
      "author": {
        "id": 5087
      },
      "writtenOn": "2020-07-14T10:47:49Z",
      "side": 1,
      "message": "I know this is a .cc file so this should be ok but let\u0027s prefix this one with WEBRTC_.",
      "range": {
        "startLine": 27,
        "startChar": 8,
        "endLine": 27,
        "endChar": 34
      },
      "revId": "a9c0a9c8abdd3cbfb1fde07d3f44447176125ff2",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7a26a8ee_c6ca6b5e",
        "filename": "rtc_base/openssl_adapter.cc",
        "patchSetId": 12
      },
      "lineNbr": 830,
      "author": {
        "id": 5602
      },
      "writtenOn": "2020-06-04T22:18:51Z",
      "side": 1,
      "message": "Optional: Not sure what WebRTC\u0027s preferences are, but I think this would be easier to read with early returns. Perhaps:\n\n  OpenSSLAdapter* stream \u003d\n      reinterpret_cast\u003cOpenSSLAdapter*\u003e(SSL_get_app_data(ssl));\n  if (stream-\u003essl_cert_verifier_ \u003d\u003d nullptr) {\n    RTC_LOG(LS_WARNING) \u003c\u003c \"Built-in trusted root certificates disabled but no \"\n                           \"SSL verify callback provided.\";\n    return ssl_verify_invalid;\n  }\n\n  const STACK_OF(CRYPTO_BUFFER)* chain \u003d SSL_get0_peer_certificates(ssl);\n  if (sk_CRYPTO_BUFFER_num(chain) \u003d\u003d 0) {\n    RTC_LOG(LS_ERROR) \u003c\u003c \"Peer certificate chain empty?\";\n    return ssl_verify_invalid;\n  }\n\n  BoringSSLCertificate cert(bssl::UpRef(sk_CRYPTO_BUFFER_value(chain, 0)));\n  if (stream-\u003essl_cert_verifier_-\u003eVerify(cert)) {\n    stream-\u003ecustom_cert_verifier_status_ \u003d true;\n    RTC_LOG(LS_INFO) \u003c\u003c \"Validated certificate using custom callback\";\n    return ssl_verify_ok;\n  }\n\n  RTC_LOG(LS_WARNING) \u003c\u003c \"Failed to verify certificate using custom callback\";\n  if (stream-\u003eignore_bad_cert_) {\n    RTC_DLOG(LS_WARNING) \u003c\u003c \"Ignoring cert error while verifying cert chain\";\n    return ssl_verify_ok;\n  }\n\n  return ssl_verify_invalid;\n\n(FWIW, the peer certificate chain should never be empty.) You could also move the bottom half of the function to some helper (would return a bool that this converts to the enum) shared with the OpenSSL version, though I guess it\u0027s also not very long.",
      "revId": "a9c0a9c8abdd3cbfb1fde07d3f44447176125ff2",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "257f1549_c43cdfdc",
        "filename": "rtc_base/openssl_adapter.cc",
        "patchSetId": 12
      },
      "lineNbr": 830,
      "author": {
        "id": 5087
      },
      "writtenOn": "2020-07-14T10:47:49Z",
      "side": 1,
      "message": "+1 for early returns.",
      "parentUuid": "7a26a8ee_c6ca6b5e",
      "revId": "a9c0a9c8abdd3cbfb1fde07d3f44447176125ff2",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9d44645a_c7020382",
        "filename": "rtc_base/openssl_key_pair.cc",
        "patchSetId": 12
      },
      "lineNbr": 56,
      "author": {
        "id": 5602
      },
      "writtenOn": "2020-06-04T22:18:51Z",
      "side": 1,
      "message": "I take it you all can\u0027t use bssl::UniquePtr here and don\u0027t have your own version? :-(",
      "revId": "a9c0a9c8abdd3cbfb1fde07d3f44447176125ff2",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6380ffc7_7303c697",
        "filename": "rtc_base/openssl_key_pair.cc",
        "patchSetId": 12
      },
      "lineNbr": 65,
      "author": {
        "id": 5602
      },
      "writtenOn": "2020-06-04T22:18:51Z",
      "side": 1,
      "message": "Not that malloc ever fails, but this should come after checking !ec_key.",
      "range": {
        "startLine": 65,
        "startChar": 6,
        "endLine": 65,
        "endChar": 26
      },
      "revId": "a9c0a9c8abdd3cbfb1fde07d3f44447176125ff2",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e0f53c7e_a1b1cbae",
        "filename": "rtc_base/openssl_key_pair.cc",
        "patchSetId": 12
      },
      "lineNbr": 98,
      "author": {
        "id": 5602
      },
      "writtenOn": "2020-06-04T22:18:51Z",
      "side": 1,
      "message": "OpenSSLKeyPair is public, so can this be absl::make_unique? Ditto throughout the file.",
      "range": {
        "startLine": 98,
        "startChar": 9,
        "endLine": 98,
        "endChar": 44
      },
      "revId": "a9c0a9c8abdd3cbfb1fde07d3f44447176125ff2",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f8813903_4a6a57a3",
        "filename": "rtc_base/openssl_key_pair.cc",
        "patchSetId": 12
      },
      "lineNbr": 103,
      "author": {
        "id": 5602
      },
      "writtenOn": "2020-06-04T22:18:51Z",
      "side": 1,
      "message": "Nit: One hopes pem_string has no embedded NULs, but in case it does, I\u0027d pass pem_string.size() instead of -1.\n\n(From there, a super nitpicky optional nitpick would be to use pem_string.data() instead of pem_string.c_str(). They\u0027re guaranteed to be the same as of C++11, but I tend to use c_str() when I\u0027m relying on NUL termination and data() when I\u0027m pairing with size().)",
      "revId": "a9c0a9c8abdd3cbfb1fde07d3f44447176125ff2",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "12283f45_2d4a55b8",
        "filename": "rtc_base/openssl_key_pair.cc",
        "patchSetId": 12
      },
      "lineNbr": 155,
      "author": {
        "id": 5602
      },
      "writtenOn": "2020-06-04T22:18:51Z",
      "side": 1,
      "message": "This works, but rather than writing a \\0  and relying on the NUL terminator, BIO_get_mem_data returns the length of the buffer. (Probably prudent to reject \u003c\u003d 0, though I believe it can only fail if you have the wrong kind of BIO.)\n\nDitto below.",
      "revId": "a9c0a9c8abdd3cbfb1fde07d3f44447176125ff2",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4acca7f8_1652c943",
        "filename": "rtc_base/openssl_key_pair.h",
        "patchSetId": 12
      },
      "lineNbr": 25,
      "author": {
        "id": 5602
      },
      "writtenOn": "2020-06-04T22:18:51Z",
      "side": 1,
      "message": "Not sure what to call this instead, but a comment if you can come up with something better. OpenSSL doesn\u0027t really distinguish public keys vs public/private pairs at the type system. Actually I\u0027m not sure if you can even query if an EVP_PKEY is a private key, which is weird. If it\u0027s a public key, the private operations just fail.\n\nEdit: Ah, I see you just extracted this out of openssl_identity.h. Well, have a pile of comments on it, but I recognize none of this code is new with this CL.",
      "range": {
        "startLine": 25,
        "startChar": 52,
        "endLine": 25,
        "endChar": 59
      },
      "revId": "a9c0a9c8abdd3cbfb1fde07d3f44447176125ff2",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b553d095_35a0bd94",
        "filename": "rtc_base/openssl_key_pair.h",
        "patchSetId": 12
      },
      "lineNbr": 29,
      "author": {
        "id": 5602
      },
      "writtenOn": "2020-06-04T22:18:51Z",
      "side": 1,
      "message": "Probably worth documenting whether this takes ownership of pkey or not. (Looks like it\u0027s meant to takes ownership.)",
      "revId": "a9c0a9c8abdd3cbfb1fde07d3f44447176125ff2",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c196dac3_bf30d1c3",
        "filename": "rtc_base/openssl_key_pair.h",
        "patchSetId": 12
      },
      "lineNbr": 39,
      "author": {
        "id": 5602
      },
      "writtenOn": "2020-06-04T22:18:51Z",
      "side": 1,
      "message": "Does making ~OpenSSLKeyPair() and Clone() virtual do anything when it\u0027s final anyway?",
      "range": {
        "startLine": 39,
        "startChar": 2,
        "endLine": 39,
        "endChar": 9
      },
      "revId": "a9c0a9c8abdd3cbfb1fde07d3f44447176125ff2",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bb4d0750_1f2c8ee1",
        "filename": "rtc_base/openssl_session_cache_unittest.cc",
        "patchSetId": 12
      },
      "lineNbr": 23,
      "author": {
        "id": 5602
      },
      "writtenOn": "2020-06-04T22:18:51Z",
      "side": 1,
      "message": "Nit: Maybe X509 objects? This is still using X.509 certificates, so \"avoid X509 certificates\" is a little confusing.",
      "range": {
        "startLine": 23,
        "startChar": 26,
        "endLine": 23,
        "endChar": 43
      },
      "revId": "a9c0a9c8abdd3cbfb1fde07d3f44447176125ff2",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "51c9d6e8_706b8178",
        "filename": "rtc_base/openssl_stream_adapter.cc",
        "patchSetId": 12
      },
      "lineNbr": 975,
      "author": {
        "id": 5087
      },
      "writtenOn": "2020-07-14T10:47:49Z",
      "side": 1,
      "message": "According to a previous comment, should this be \"objects\"?",
      "range": {
        "startLine": 975,
        "startChar": 13,
        "endLine": 975,
        "endChar": 25
      },
      "revId": "a9c0a9c8abdd3cbfb1fde07d3f44447176125ff2",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    }
  ]
}