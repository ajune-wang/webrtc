{
  "comments": [
    {
      "key": {
        "uuid": "615b2b17_0912888f",
        "filename": "test/pc/e2e/api/peerconnection_quality_test_fixture.h",
        "patchSetId": 3
      },
      "lineNbr": 215,
      "author": {
        "id": 5117
      },
      "writtenOn": "2019-03-11T09:17:27Z",
      "side": 1,
      "message": "This is just too powerful of a tool. If the intent is only to configure the network, more fine grained interface is desirable. Maybe some set-up call which takes an array of events, where each one has a timestamp and network settings to be set at that time?",
      "range": {
        "startLine": 215,
        "startChar": 25,
        "endLine": 215,
        "endChar": 38
      },
      "revId": "8a31dc1df817627e6bc6699a14516898f4bc5b79",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8d4c4e5c_0b8b6bad",
        "filename": "test/pc/e2e/api/peerconnection_quality_test_fixture.h",
        "patchSetId": 3
      },
      "lineNbr": 215,
      "author": {
        "id": 6337
      },
      "writtenOn": "2019-03-11T09:21:01Z",
      "side": 1,
      "message": "I didn\u0027t want to strict only to network changes. Also the way, how network will be changed is also unpredictable. Framework itself has no knowledge about network layer, so it can\u0027t provide API for it. And the way of network configuration depends on network emulation implementation.",
      "parentUuid": "615b2b17_0912888f",
      "range": {
        "startLine": 215,
        "startChar": 25,
        "endLine": 215,
        "endChar": 38
      },
      "revId": "8a31dc1df817627e6bc6699a14516898f4bc5b79",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "279285ef_db7c4994",
        "filename": "test/pc/e2e/api/peerconnection_quality_test_fixture.h",
        "patchSetId": 3
      },
      "lineNbr": 215,
      "author": {
        "id": 5087
      },
      "writtenOn": "2019-03-11T09:47:49Z",
      "side": 1,
      "message": "Yes, I agree it is too powerful of a tool. On the other hand, as Artem has written I am not sure there is another way to achieve this (if we want the framework to be in control of these actions). The framework basically executes actions on behalf of the test writer. Artem, do we you have other examples of \"environment changing\" actions?",
      "parentUuid": "8d4c4e5c_0b8b6bad",
      "range": {
        "startLine": 215,
        "startChar": 25,
        "endLine": 215,
        "endChar": 38
      },
      "revId": "8a31dc1df817627e6bc6699a14516898f4bc5b79",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2d8afceb_1136ff54",
        "filename": "test/pc/e2e/api/peerconnection_quality_test_fixture.h",
        "patchSetId": 3
      },
      "lineNbr": 215,
      "author": {
        "id": 6337
      },
      "writtenOn": "2019-03-11T10:28:23Z",
      "side": 1,
      "message": "I didn\u0027t have any concrete ones, but as I told even network ones are specific for each network implementation, so we can\u0027t provide single interface there, even in network layer framework. Also I can imagine cases where you can measure something specific during the call, especially in the injectable components",
      "parentUuid": "279285ef_db7c4994",
      "range": {
        "startLine": 215,
        "startChar": 25,
        "endLine": 215,
        "endChar": 38
      },
      "revId": "8a31dc1df817627e6bc6699a14516898f4bc5b79",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8919c3cc_eb5e8cf7",
        "filename": "test/pc/e2e/api/peerconnection_quality_test_fixture.h",
        "patchSetId": 3
      },
      "lineNbr": 215,
      "author": {
        "id": 5117
      },
      "writtenOn": "2019-03-11T10:46:20Z",
      "side": 1,
      "message": "Then suggestion: move it to the network implementation. Currently we have only one, right?\n\nIf someone re-implements the network, they also would have to implement a scenario behavior there.\n\nWhy can\u0027t you add this to SimulatedNetwork? It already has SecConfig, add a SetConfigAfter(.., delay_ms). Then you don\u0027t even need any task queue, just update the config each time in |SimulatedNetwork::GetConfigState|. Have a priority queue there or something.\n\nAssuming the network config won\u0027t be changing for every other packet, it should work great.",
      "parentUuid": "2d8afceb_1136ff54",
      "range": {
        "startLine": 215,
        "startChar": 25,
        "endLine": 215,
        "endChar": 38
      },
      "revId": "8a31dc1df817627e6bc6699a14516898f4bc5b79",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a14f6d98_4f98ba62",
        "filename": "test/pc/e2e/api/peerconnection_quality_test_fixture.h",
        "patchSetId": 3
      },
      "lineNbr": 215,
      "author": {
        "id": 6337
      },
      "writtenOn": "2019-03-11T11:08:11Z",
      "side": 1,
      "message": "Basically because SimulatedNetwork is only one implementation of network simulation and we can have other with different APIs. Also in the test there are multiple nodes usually, so it will be better to manage all of them from single place.",
      "parentUuid": "8919c3cc_eb5e8cf7",
      "range": {
        "startLine": 215,
        "startChar": 25,
        "endLine": 215,
        "endChar": 38
      },
      "revId": "8a31dc1df817627e6bc6699a14516898f4bc5b79",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "10cc13d8_f3a886ed",
        "filename": "test/pc/e2e/api/peerconnection_quality_test_fixture.h",
        "patchSetId": 3
      },
      "lineNbr": 215,
      "author": {
        "id": 5117
      },
      "writtenOn": "2019-03-11T11:40:21Z",
      "side": 1,
      "message": "\u003e Basically because SimulatedNetwork is only one implementation of network simulation and we can have other with different APIs. \n\nIf there\u0027s no common API for different network implementations, instead of embedding arbitrary code in the framework, that same arbitrary code can be implemented in each separate network implementation. \n\nBasically, the framework doesn\u0027t support network manipulation at all. Manipulation is done by user externally. You\u0027ve implemented a helper wrapper around a task queue for scheduling user\u0027s code. Then you embedded that helper in the test framework. At the very least, the wrapper should be separated from the test framework, as it\u0027s a general class which isn\u0027t interacting with the framework at all.\n\n\u003e Also in the test there are multiple nodes usually, so it will be better to manage all of them from single place.\n\nThe code you pass to ExecuteAt(), will reference all the nodes individually either way, as i see in the smoke_test. So for the user there\u0027s no difference. Instead of calling ExecuteAt with a reference to some node, they would just call SetConfigAt() at the same node.\n\nIn the end, both the code to use the SimulcatedNetwork in tests and the code in this CL would be simpler and shorter, if you implement this in SimulatedNetwork instead.",
      "parentUuid": "a14f6d98_4f98ba62",
      "range": {
        "startLine": 215,
        "startChar": 25,
        "endLine": 215,
        "endChar": 38
      },
      "revId": "8a31dc1df817627e6bc6699a14516898f4bc5b79",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2dcaae4f_e9f6372e",
        "filename": "test/pc/e2e/api/peerconnection_quality_test_fixture.h",
        "patchSetId": 3
      },
      "lineNbr": 215,
      "author": {
        "id": 5117
      },
      "writtenOn": "2019-03-11T12:25:00Z",
      "side": 1,
      "message": "After offline discussion with Artem I see the important argument in favor of this approach:\n\nThe scheduled activities can be used also to poll injectable custom components for stats. And this must be synchronized with the call start and absolutely must not be executed after the call has ended and the test framework has destroyed the components.",
      "parentUuid": "10cc13d8_f3a886ed",
      "range": {
        "startLine": 215,
        "startChar": 25,
        "endLine": 215,
        "endChar": 38
      },
      "revId": "8a31dc1df817627e6bc6699a14516898f4bc5b79",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c85bc765_0e8c689b",
        "filename": "test/pc/e2e/peer_connection_e2e_smoke_test.cc",
        "patchSetId": 3
      },
      "lineNbr": 128,
      "author": {
        "id": 5117
      },
      "writtenOn": "2019-03-11T13:00:02Z",
      "side": 1,
      "message": "Nit: 50% is basically a dysfunctional network. Maybe choose some smaller value.",
      "range": {
        "startLine": 128,
        "startChar": 45,
        "endLine": 128,
        "endChar": 47
      },
      "revId": "8a31dc1df817627e6bc6699a14516898f4bc5b79",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ec4fc8f0_c64c0e16",
        "filename": "test/pc/e2e/peer_connection_quality_test.cc",
        "patchSetId": 3
      },
      "lineNbr": 151,
      "author": {
        "id": 5117
      },
      "writtenOn": "2019-03-11T13:00:02Z",
      "side": 1,
      "message": "Since the interface accepts time since start, but PostTask accepts delay since the current time, you need to adjust the initial delay here. E.g. if 10second after the call start, the user request to execute something at 20 seconds after the call start, here you should post the task with 10 seconds delay.\n\nAlso, drop old tasks and reschedule repeating tasks accordingly to the repeat period.\n\nAlternatively, Don\u0027t allow scheduling any tasks after the call have started.",
      "range": {
        "startLine": 151,
        "startChar": 9,
        "endLine": 151,
        "endChar": 10
      },
      "revId": "8a31dc1df817627e6bc6699a14516898f4bc5b79",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0c44faa8_62f6a916",
        "filename": "test/pc/e2e/peer_connection_quality_test.cc",
        "patchSetId": 3
      },
      "lineNbr": 158,
      "author": {
        "id": 5117
      },
      "writtenOn": "2019-03-11T13:00:02Z",
      "side": 1,
      "message": "Does absolute time make any sense to the function? You should subtract the start_time_ here.",
      "range": {
        "startLine": 158,
        "startChar": 67,
        "endLine": 158,
        "endChar": 72
      },
      "revId": "8a31dc1df817627e6bc6699a14516898f4bc5b79",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1041f8db_35ad6e56",
        "filename": "test/pc/e2e/peer_connection_quality_test.cc",
        "patchSetId": 3
      },
      "lineNbr": 165,
      "author": {
        "id": 5117
      },
      "writtenOn": "2019-03-11T13:00:02Z",
      "side": 1,
      "message": "Ditto.",
      "range": {
        "startLine": 165,
        "startChar": 24,
        "endLine": 165,
        "endChar": 29
      },
      "revId": "8a31dc1df817627e6bc6699a14516898f4bc5b79",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3b40e6bc_164f2ae6",
        "filename": "test/pc/e2e/peer_connection_quality_test.cc",
        "patchSetId": 3
      },
      "lineNbr": 174,
      "author": {
        "id": 5117
      },
      "writtenOn": "2019-03-11T13:00:02Z",
      "side": 1,
      "message": "Ditto.",
      "range": {
        "startLine": 174,
        "startChar": 22,
        "endLine": 174,
        "endChar": 27
      },
      "revId": "8a31dc1df817627e6bc6699a14516898f4bc5b79",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a9f81589_bfdb8224",
        "filename": "test/pc/e2e/peer_connection_quality_test.cc",
        "patchSetId": 3
      },
      "lineNbr": 587,
      "author": {
        "id": 5117
      },
      "writtenOn": "2019-03-11T13:00:02Z",
      "side": 1,
      "message": "The main argument in favor of this approach was that no task is scheduled then custom injectable components are destroyed.\n\nThis is not true here. Then you tear the call down you don\u0027t destroy or stop the task_queue_, but remove the peers. So, if an unlucky task is scheduled to be executed exactly after TearDownCall() is called but before the task queue is destroyed, you will get segfault.\n\nOne solution is to have the task_queue_ as an unique_pointer and destroy it first.\nNote, that destruction and creation of the queue should be done from the same thread.",
      "range": {
        "startLine": 587,
        "startChar": 35,
        "endLine": 587,
        "endChar": 47
      },
      "revId": "8a31dc1df817627e6bc6699a14516898f4bc5b79",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    }
  ]
}