{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "230afdab_166c123f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5634
      },
      "writtenOn": "2023-06-03T09:22:04Z",
      "side": 1,
      "message": "I would like to have a second pair of eyes on this. To me it looks reasonable, assuming that the performance impact of absl::optional is negligible.",
      "revId": "3bb220924976ca40d4756ded9763a8137400aefa",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3bfc511e_cde756ff",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 7036
      },
      "writtenOn": "2023-06-04T23:32:12Z",
      "side": 1,
      "message": "An alternative way would be to have a separate \"is set\" boolean and a union to prevent the default constructor to construct objects of type T.\nThe union itself is not sufficient as it doesn\u0027t keep track of \"moved out\" values and it could end up double destructing values.\nBut an optional element does it all for us by design and it\u0027s a lot simpler for us. Later C++ versions will allow us to use std::expected directly which takes care of those details for us.",
      "parentUuid": "230afdab_166c123f",
      "revId": "3bb220924976ca40d4756ded9763a8137400aefa",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f6fb2d4b_a7b4ed64",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5634
      },
      "writtenOn": "2023-06-05T06:01:34Z",
      "side": 1,
      "message": "To make it clear - I think this is probably the right choice.\nMy fear is that the overhead of absl::optional is big enough that it\u0027s worth avoiding this optimization for inner loops, and whether this happens enough that we need to consider it for WebRTC.\n\nOne alternative (if it\u0027s possible, and if it\u0027s necessary) would be to template ErrorOr\u003c\u003e on whether or not the T is default constructible, and go for the absl::optional if it isn\u0027t. This may be problematic - first hit on Google / Stackoverflow was https://stackoverflow.com/questions/4669131/how-to-check-if-a-template-argument-is-default-constructible \n\nBut I hope Tommi says \"I think it is OK\" and lets us land this.",
      "parentUuid": "3bfc511e_cde756ff",
      "revId": "3bb220924976ca40d4756ded9763a8137400aefa",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3b29898f_b6c41928",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5634
      },
      "writtenOn": "2023-06-05T06:15:37Z",
      "side": 1,
      "message": "https://stackoverflow.com/questions/23523184/overhead-of-stdoptionalt claims that the overhead is \"usually negligible\" - we don\u0027t do arrays of ErrorOr, so the case of looping over arrays of them isn\u0027t applicable.",
      "revId": "3bb220924976ca40d4756ded9763a8137400aefa",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "231ccda6_50066fa8",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5508
      },
      "writtenOn": "2023-06-05T11:02:24Z",
      "side": 1,
      "message": "I think it is OK",
      "parentUuid": "f6fb2d4b_a7b4ed64",
      "revId": "3bb220924976ca40d4756ded9763a8137400aefa",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f7a14063_c0c5de7a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5634
      },
      "writtenOn": "2023-06-05T11:08:40Z",
      "side": 1,
      "message": "Let\u0027s do it this way.",
      "revId": "3bb220924976ca40d4756ded9763a8137400aefa",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "At least one maximum vote for label \u0027Code-Review\u0027 is required"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader AND -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1 AND -label:Code-Review\u003dMIN"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader AND -label:Code-Review=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Code-Review=MAX,user=non_uploader"],"failingAtoms":["label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1 AND -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1","label:Code-Review=MIN"]}
      },
      "patchSetCommitId": "3bb220924976ca40d4756ded9763a8137400aefa",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["is:review-enforced_gerrit"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforcement-satisfied_gerrit"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforcement-satisfied_gerrit"]}
      },
      "patchSetCommitId": "3bb220924976ca40d4756ded9763a8137400aefa",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {
        "value": true
      }
    }
  ]
}