{
  "comments": [
    {
      "key": {
        "uuid": "15a9028e_3a844ef4",
        "filename": "api/media_transport_interface.h",
        "patchSetId": 1
      },
      "lineNbr": 101,
      "author": {
        "id": 7565
      },
      "writtenOn": "2018-09-10T22:44:52Z",
      "side": 1,
      "message": "I think we agreed on samples_per_channel_ in previous CL which created media_transport_interface?",
      "revId": "ac9552343c37f0a7d282961e747ee8cca99aa528",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5d0d0745_bdf376b6",
        "filename": "api/media_transport_interface.h",
        "patchSetId": 1
      },
      "lineNbr": 101,
      "author": {
        "id": 7704
      },
      "writtenOn": "2018-09-11T14:44:08Z",
      "side": 1,
      "message": "Yes. Done. Accidentally changed to previous version.",
      "parentUuid": "15a9028e_3a844ef4",
      "revId": "ac9552343c37f0a7d282961e747ee8cca99aa528",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "133055a6_b2e588cb",
        "filename": "api/media_transport_interface.h",
        "patchSetId": 1
      },
      "lineNbr": 128,
      "author": {
        "id": 5234
      },
      "writtenOn": "2018-09-11T08:46:14Z",
      "side": 1,
      "message": "It\u0027s unfortunate to have yet another class for this. But I can understand that you want to use the same for send and receive. Are you confident you can create one from the information available on the send side (EncodedImage + CodecSpecificInfo), and create a EncodedVideoFrame to pass to the jitterbuffer on the receive side?",
      "range": {
        "startLine": 128,
        "startChar": 6,
        "endLine": 128,
        "endChar": 37
      },
      "revId": "ac9552343c37f0a7d282961e747ee8cca99aa528",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5f031f17_12959035",
        "filename": "api/media_transport_interface.h",
        "patchSetId": 1
      },
      "lineNbr": 128,
      "author": {
        "id": 7704
      },
      "writtenOn": "2018-09-11T14:44:08Z",
      "side": 1,
      "message": "Fairly confident. We will need to add things for SVC and Simulcast (spatial index for example) later. Also, \u0027CodecSpecificInfo\u0027 itself is not sufficient: we need frame_id and referenced_frame_ids (which are assigned in the rtp path for some codecs), in order to have the right ordering in the jitter buffer. Hence these two are explicitly mentioned here.\n\nIn the last meeting (the one where it was kicking you out of the call) we decided that\n1) we need to be able to make rapid changes, so if this turns out to be missing something, we will change it\n2) we will start with a separate class, because non of the existing classes fits right away. Later on, if you will be able to create an EncodedFrame in the sender, we can change this interface to get EncodedFrame and return EncodedFrame.",
      "parentUuid": "133055a6_b2e588cb",
      "range": {
        "startLine": 128,
        "startChar": 6,
        "endLine": 128,
        "endChar": 37
      },
      "revId": "ac9552343c37f0a7d282961e747ee8cca99aa528",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "71ff484f_f402d2f1",
        "filename": "api/media_transport_interface.h",
        "patchSetId": 1
      },
      "lineNbr": 150,
      "author": {
        "id": 5234
      },
      "writtenOn": "2018-09-11T08:46:14Z",
      "side": 1,
      "message": "Using EncodedImage implies that this class doesn\u0027t own the buffer with the actual bits. I think that\u0027s worth a comment. And it will likely require an extra copy on the receive side, when creating an EncodedFrame.",
      "range": {
        "startLine": 150,
        "startChar": 23,
        "endLine": 150,
        "endChar": 37
      },
      "revId": "ac9552343c37f0a7d282961e747ee8cca99aa528",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e59f8e04_d80807ab",
        "filename": "api/media_transport_interface.h",
        "patchSetId": 1
      },
      "lineNbr": 150,
      "author": {
        "id": 7704
      },
      "writtenOn": "2018-09-11T14:44:08Z",
      "side": 1,
      "message": "On receiver, we can create a SelfDisposingEncodedImage, move the buffer and avoid extra copies, but in general you are right.\n\nGet in touch with me for more details.",
      "parentUuid": "71ff484f_f402d2f1",
      "range": {
        "startLine": 150,
        "startChar": 23,
        "endLine": 150,
        "endChar": 37
      },
      "revId": "ac9552343c37f0a7d282961e747ee8cca99aa528",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b336461c_deb90b44",
        "filename": "api/media_transport_interface.h",
        "patchSetId": 1
      },
      "lineNbr": 154,
      "author": {
        "id": 5234
      },
      "writtenOn": "2018-09-11T08:46:14Z",
      "side": 1,
      "message": "Not sure what the expectations are for this one. Will it increase by one for each frame? Are there any cases where it may jump? Do you expect it to ever wrap around (if so, it should be an unsigned type)? For 100 fps stream a 32-bit signed int overflows in 248 days, if I get the numbers right.\n\nIn practice, I would expect that a *unique* identifier isn\u0027t needed, it\u0027s sufficient if it takes a minimum of a minutes or two until an id is reused.",
      "range": {
        "startLine": 154,
        "startChar": 6,
        "endLine": 154,
        "endChar": 15
      },
      "revId": "ac9552343c37f0a7d282961e747ee8cca99aa528",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0946ba7f_9b3ae713",
        "filename": "api/media_transport_interface.h",
        "patchSetId": 1
      },
      "lineNbr": 154,
      "author": {
        "id": 7704
      },
      "writtenOn": "2018-09-11T14:44:08Z",
      "side": 1,
      "message": "We got feedback earlier to not use uint32_t and prefer int, see https://webrtc-review.googlesource.com/c/src/+/95960/8/api/media_transport_interface.h#64\n\nAs to frame_id, I was hoping you will give me a better guidance of what it should be, because it\u0027s a concept already present in WebRTC -- EncodedFrame::id. As far as I understand jitter buffer needs frame_ids and dependencies. In our prototype integration, frame ids were increasing by 1 for every frame.\n\nAs far as I can tell, jitter buffer (modules/video_coding/frame_buffer2.cc) requires\n1) rtp timestamps (monotonic) to determine ordering\n2) frame ids and dependencies to make sure where the frame should be released, and what dependencies does it have\n\nbut it does not require frame_id to be monotonic or in any particular order.\n\nUnforuntately, EncodedFrame::id does not have any comments, and neither has VideoLayerFrameId::picture_id; could you add them there?\n\nFor now I am just stating that it\u0027s the same as EncodedFrame::id::picture_id\n\nComment improved.",
      "parentUuid": "b336461c_deb90b44",
      "range": {
        "startLine": 154,
        "startChar": 6,
        "endLine": 154,
        "endChar": 15
      },
      "revId": "ac9552343c37f0a7d282961e747ee8cca99aa528",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "af551c40_50969d85",
        "filename": "api/media_transport_interface.h",
        "patchSetId": 1
      },
      "lineNbr": 177,
      "author": {
        "id": 7565
      },
      "writtenOn": "2018-09-10T22:44:52Z",
      "side": 1,
      "message": "Should we do state change as a separate CL?\n\nAnother option is to have explicit Connect() method on MediaTransportInterface with a sink / callback. \n\nI also want to understand what happens on close, should we have explcit Close() or have destructor to close connection?",
      "revId": "ac9552343c37f0a7d282961e747ee8cca99aa528",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "37e75843_e53b2f7c",
        "filename": "api/media_transport_interface.h",
        "patchSetId": 1
      },
      "lineNbr": 177,
      "author": {
        "id": 5234
      },
      "writtenOn": "2018-09-11T08:46:14Z",
      "side": 1,
      "message": "I\u0027d prefer a separate cl. I don\u0027t understand the usecase for this one, and I suspect this isn\u0027t the right place.\n\nI\u0027m thinking of the MediaTransportInterface as an interface belonging to the media pipeline or \"data plane\", providing service for send and receive streams. While reporting connection events belongs to the \"signalling plane\".",
      "parentUuid": "af551c40_50969d85",
      "revId": "ac9552343c37f0a7d282961e747ee8cca99aa528",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "24357577_9ed2c606",
        "filename": "api/media_transport_interface.h",
        "patchSetId": 1
      },
      "lineNbr": 177,
      "author": {
        "id": 7704
      },
      "writtenOn": "2018-09-11T14:44:08Z",
      "side": 1,
      "message": "Removed, but it\u0027s needed. let\u0027s discuss on the next syncup. MediaTransport may establish its own security, and you should know when you can give the first keyframe (when the connection is established).",
      "parentUuid": "37e75843_e53b2f7c",
      "revId": "ac9552343c37f0a7d282961e747ee8cca99aa528",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4a13a62c_eea49874",
        "filename": "api/media_transport_interface.h",
        "patchSetId": 1
      },
      "lineNbr": 177,
      "author": {
        "id": 7565
      },
      "writtenOn": "2018-09-13T01:19:46Z",
      "side": 1,
      "message": "Did you upload changes? State sink and SetStateSink are still here.",
      "parentUuid": "24357577_9ed2c606",
      "revId": "ac9552343c37f0a7d282961e747ee8cca99aa528",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ef1080d1_96d81468",
        "filename": "api/media_transport_interface.h",
        "patchSetId": 1
      },
      "lineNbr": 177,
      "author": {
        "id": 7704
      },
      "writtenOn": "2018-09-13T14:16:48Z",
      "side": 1,
      "message": "You are looking at patchset 1 I think. Take a look at patchset 2 -- I think comment thread is associated with patchset 1.",
      "parentUuid": "4a13a62c_eea49874",
      "revId": "ac9552343c37f0a7d282961e747ee8cca99aa528",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa94897e_c297c924",
        "filename": "api/media_transport_interface.h",
        "patchSetId": 1
      },
      "lineNbr": 177,
      "author": {
        "id": 7704
      },
      "writtenOn": "2018-09-13T14:17:40Z",
      "side": 1,
      "message": "If you look at comments history, it says PS1, 177, and automatically takes you to patchset 1 -- because this code is removed from patchset 2 ;)",
      "parentUuid": "ef1080d1_96d81468",
      "revId": "ac9552343c37f0a7d282961e747ee8cca99aa528",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "32462913_e4f81c78",
        "filename": "api/media_transport_interface.h",
        "patchSetId": 1
      },
      "lineNbr": 198,
      "author": {
        "id": 5234
      },
      "writtenOn": "2018-09-11T08:46:14Z",
      "side": 1,
      "message": "If it\u0027s asynchronous, is there any good reason to have a return value? Same applies to SendAudioFrame and RequestKeyFrame.",
      "range": {
        "startLine": 198,
        "startChar": 10,
        "endLine": 198,
        "endChar": 18
      },
      "revId": "ac9552343c37f0a7d282961e747ee8cca99aa528",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b3117ca3_00f61edc",
        "filename": "api/media_transport_interface.h",
        "patchSetId": 1
      },
      "lineNbr": 198,
      "author": {
        "id": 7704
      },
      "writtenOn": "2018-09-11T14:44:08Z",
      "side": 1,
      "message": "Yes -- you may want to do packetization in a synchronous manner (or serialization and packetization), but put it on the wire asynchronously. In such case we can report serialization issues right away.\n\nModified comment.",
      "parentUuid": "32462913_e4f81c78",
      "range": {
        "startLine": 198,
        "startChar": 10,
        "endLine": 198,
        "endChar": 18
      },
      "revId": "ac9552343c37f0a7d282961e747ee8cca99aa528",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a0b99004_4d14cb4f",
        "filename": "api/media_transport_interface.h",
        "patchSetId": 1
      },
      "lineNbr": 198,
      "author": {
        "id": 7565
      },
      "writtenOn": "2018-09-13T01:19:46Z",
      "side": 1,
      "message": "Yep at least basic error checking will be done synchronously. \n\nWe also consider doing serialization on the caller thread, because it\u0027s cheap.\n\nIf we need status from network / packetization stack we can add status callback, but I do not think it\u0027s necessary at this point.",
      "parentUuid": "b3117ca3_00f61edc",
      "range": {
        "startLine": 198,
        "startChar": 10,
        "endLine": 198,
        "endChar": 18
      },
      "revId": "ac9552343c37f0a7d282961e747ee8cca99aa528",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "eb54a1f6_1b7b8e94",
        "filename": "api/media_transport_interface.h",
        "patchSetId": 1
      },
      "lineNbr": 198,
      "author": {
        "id": 5234
      },
      "writtenOn": "2018-09-17T06:55:44Z",
      "side": 1,
      "message": "\u003e Yep at least basic error checking will be done synchronously. \n\nWhat error handling do you expect callers to do, in case the method returns failure?",
      "parentUuid": "a0b99004_4d14cb4f",
      "range": {
        "startLine": 198,
        "startChar": 10,
        "endLine": 198,
        "endChar": 18
      },
      "revId": "ac9552343c37f0a7d282961e747ee8cca99aa528",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    }
  ]
}