{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "1bd74cfe_88d26ef1",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 9
      },
      "lineNbr": 0,
      "author": {
        "id": 5019
      },
      "writtenOn": "2021-08-13T10:02:13Z",
      "side": 1,
      "message": "I\u0027m ok with removing the mutex.\n\nbut I find confusing this way of treating thread checker. To me it feels better to just remove the mutex and postpone describing threading until later (e.g. when deferred_sequencing_ would always be true, some code would disappear and thread check would look more natural)",
      "revId": "f48db71da2bd98b8683b7638e87ad4ab70b94bc0",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8f9e7d16_5d9cb53b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 9
      },
      "lineNbr": 0,
      "author": {
        "id": 5524
      },
      "writtenOn": "2021-08-13T12:37:29Z",
      "side": 1,
      "message": "The threading is the same with or without deferred sequencing. I\u0027ll move the DCHECK up one level where I had it in an if (deferred_sequencing_) since that was misleading.\n\nI\u0027m sort of hesitant to remove the lock without adding other safety barriers.",
      "parentUuid": "1bd74cfe_88d26ef1",
      "revId": "f48db71da2bd98b8683b7638e87ad4ab70b94bc0",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "10931e22_bfa104d8",
        "filename": "call/rtp_video_sender.cc",
        "patchSetId": 9
      },
      "lineNbr": 459,
      "author": {
        "id": 5019
      },
      "writtenOn": "2021-08-13T10:02:13Z",
      "side": 1,
      "message": "may be it is better to create pacer_thread_checker_ in the RtpRtcp module initially detached",
      "range": {
        "startLine": 454,
        "startChar": 0,
        "endLine": 459,
        "endChar": 3
      },
      "revId": "f48db71da2bd98b8683b7638e87ad4ab70b94bc0",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8f4ea008_c8b22e91",
        "filename": "call/rtp_video_sender.cc",
        "patchSetId": 9
      },
      "lineNbr": 459,
      "author": {
        "id": 5524
      },
      "writtenOn": "2021-08-13T12:37:29Z",
      "side": 1,
      "message": "The problem I faced was that if modules were never attached then we\u0027d crash because construction happens on the worker queue by destruction happens on the transport queue... :/\nI\u0027ll update the comment.",
      "parentUuid": "10931e22_bfa104d8",
      "range": {
        "startLine": 454,
        "startChar": 0,
        "endLine": 459,
        "endChar": 3
      },
      "revId": "f48db71da2bd98b8683b7638e87ad4ab70b94bc0",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3498c4b4_07102b42",
        "filename": "call/rtp_video_sender.cc",
        "patchSetId": 9
      },
      "lineNbr": 459,
      "author": {
        "id": 5019
      },
      "writtenOn": "2021-08-13T13:52:55Z",
      "side": 1,
      "message": "I do not understand that... if modules were never attached, why thread checker would become attached then?\nand when tread checker is not attached, then it shouldn\u0027t crash during destruction.",
      "parentUuid": "8f4ea008_c8b22e91",
      "range": {
        "startLine": 454,
        "startChar": 0,
        "endLine": 459,
        "endChar": 3
      },
      "revId": "f48db71da2bd98b8683b7638e87ad4ab70b94bc0",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6c53cc53_2fb5ead6",
        "filename": "call/rtp_video_sender.cc",
        "patchSetId": 9
      },
      "lineNbr": 459,
      "author": {
        "id": 5524
      },
      "writtenOn": "2021-08-13T14:16:22Z",
      "side": 1,
      "message": "During construction, SetRtpState() is called, so the thread checker is assigned.\nMy initial idea was to just use PacketRouter.Register... as a point to detach the thread checker, and then on PacketRouter.Remove... we\u0027d detach the thread checker again so that on destruction, GetRtpState() can be called.\n\nThe problem is that for video, the construction happens on the worker queue and the destruction happens on the transport queue. If an RTP module is never set to active, it won\u0027t be registered on the PacketRouter so the thread checker was never detached and we crash on the GetRtpState().\n\nThat\u0027s why I added this extra call to always detach it after construction. Could maybe have piggy backed on the last config-call e.g. SetSendingMedia() or something instead, but that seems more fragile that this explicit call.\n\nI also had a look at changing where we create the RTP modules (would make more sense to me if that was done on the network queue) but that seems non-trivial to accomplish.\n\nDoes that explain it?",
      "parentUuid": "3498c4b4_07102b42",
      "range": {
        "startLine": 454,
        "startChar": 0,
        "endLine": 459,
        "endChar": 3
      },
      "revId": "f48db71da2bd98b8683b7638e87ad4ab70b94bc0",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "976cae51_ae829e67",
        "filename": "modules/pacing/packet_router.cc",
        "patchSetId": 9
      },
      "lineNbr": 74,
      "author": {
        "id": 5019
      },
      "writtenOn": "2021-08-13T10:02:13Z",
      "side": 1,
      "message": "why is this needed? \nshouldn\u0027t new (and removed) modules already have thread checker detached?",
      "range": {
        "startLine": 72,
        "startChar": 0,
        "endLine": 74,
        "endChar": 0
      },
      "revId": "f48db71da2bd98b8683b7638e87ad4ab70b94bc0",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "398ac1c8_4e6deaf6",
        "filename": "modules/pacing/packet_router.cc",
        "patchSetId": 9
      },
      "lineNbr": 74,
      "author": {
        "id": 5524
      },
      "writtenOn": "2021-08-13T12:37:29Z",
      "side": 1,
      "message": "Not for audio at the moment (it doesn\u0027t have the same construction/destruction thread issue as video). It could fix that, or I\u0027ll add the is_attached flag back.",
      "parentUuid": "976cae51_ae829e67",
      "range": {
        "startLine": 72,
        "startChar": 0,
        "endLine": 74,
        "endChar": 0
      },
      "revId": "f48db71da2bd98b8683b7638e87ad4ab70b94bc0",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ed7028a4_2f528c93",
        "filename": "modules/rtp_rtcp/source/rtp_rtcp_impl2.cc",
        "patchSetId": 9
      },
      "lineNbr": 227,
      "author": {
        "id": 5019
      },
      "writtenOn": "2021-08-13T10:02:13Z",
      "side": 1,
      "message": "this looks misleading: GetRtpState may be called on construction, not pacer thread.\nmay it would be clearer to have extra boolean \u0027attached_\u0027 (or may be rtp_sender_-\u003epacket_generator.SendingMedia() can be reused)\nand have have here checks like\n  if (attached_) {\n    RTC_DCHECK_RUN_ON(\u0026pacer_thread_checker_);\n  } else {\n    RTC_DCHECK_RUN_ON(\u0026contruction_thread_cheker_);\n  }\n\n  ...::SetAttached(bool value) override {\n    RTC_DCHECK_RUN_ON(\u0026construction_thread_checker_); // is it construction thread?\n    attached_ \u003d value;\n  }\n\n  ...::SequenceNumber() {\n    RTC_DCHECK(attached_);\n    RTC_DCHECK_RUN_ON(\u0026pacer_thread_checker_);\n  }\n\nThough that still leaves a question: can be there a race between detaching module and handling a packet?",
      "range": {
        "startLine": 227,
        "startChar": 21,
        "endLine": 227,
        "endChar": 42
      },
      "revId": "f48db71da2bd98b8683b7638e87ad4ab70b94bc0",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c1ff03ab_e4add82f",
        "filename": "modules/rtp_rtcp/source/rtp_rtcp_impl2.cc",
        "patchSetId": 9
      },
      "lineNbr": 227,
      "author": {
        "id": 5524
      },
      "writtenOn": "2021-08-13T12:37:29Z",
      "side": 1,
      "message": "I thought about this but decided against it:\n* guarding updates to attached_ would be tricky\n* the race that was fixed wouldn\u0027t necessarily be caught: packet sending happened on the pacer thread and GetState() on the transport thread - but we also need to guarantee that only one of the threads \"owns\" the state at a time.\n\nMay be clearer if we change the name of the thread checker to not mention a thread name but instead what is intended to be accesses on it. Eg. packet_state_thread_checker_\n\nI had an attached_ flag in an earlier code base but found that it didn\u0027t really add much value. It would be perfectly fine to call these methods on any thread (can be same for TrySendPacket() and GetRtpState() or two different ones) - as long as it\u0027s only one thread at a time.\nThe only extra we would get is that e.g. TrySendPacket() is only called while not attached to a packet sender (pacer or NonPacedPacketSender)",
      "parentUuid": "ed7028a4_2f528c93",
      "range": {
        "startLine": 227,
        "startChar": 21,
        "endLine": 227,
        "endChar": 42
      },
      "revId": "f48db71da2bd98b8683b7638e87ad4ab70b94bc0",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a7bc50e2_0309e0ba",
        "filename": "modules/rtp_rtcp/source/rtp_rtcp_impl2.cc",
        "patchSetId": 9
      },
      "lineNbr": 227,
      "author": {
        "id": 5019
      },
      "writtenOn": "2021-08-13T13:52:55Z",
      "side": 1,
      "message": "changing name of the sequence checkers is imho better.\n(if e.g. we decide to handle rtcp packets on a different thread, then this class doesn\u0027t need to change, checker wouldn\u0027t need a rename)\n\nclass that \"perfectly fine to call these methods on any thread as long as it\u0027s only one thread at a time.\"\nis called http://go/thread-compatible \nUsually that imply that synchronisation (with a mutex or a thread) is up to the caller class, while class itself doesn\u0027t have any internal checks how exactly it is synchronised.\n\nIf you tried to have attached_ flag and didn\u0027t find it nicer, I trust it is not.\n(though issue of not synchronizing attached_ flag is the same as not synchronysing Detaching thread checker. With current threading model I do not see how it can be expressed nicely)",
      "parentUuid": "c1ff03ab_e4add82f",
      "range": {
        "startLine": 227,
        "startChar": 21,
        "endLine": 227,
        "endChar": 42
      },
      "revId": "f48db71da2bd98b8683b7638e87ad4ab70b94bc0",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "42bc6916_868d8fd6",
        "filename": "modules/rtp_rtcp/source/rtp_rtcp_impl2.cc",
        "patchSetId": 9
      },
      "lineNbr": 227,
      "author": {
        "id": 5524
      },
      "writtenOn": "2021-08-13T14:16:22Z",
      "side": 1,
      "message": "Right, the sequencing will be thread compatible when deferred.\nThere\u0027s plenty more shared mutable state here in the RTP code though so the whole of TrySendPacket() is not yet that...",
      "parentUuid": "a7bc50e2_0309e0ba",
      "range": {
        "startLine": 227,
        "startChar": 21,
        "endLine": 227,
        "endChar": 42
      },
      "revId": "f48db71da2bd98b8683b7638e87ad4ab70b94bc0",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5e476360_5c94ca95",
        "filename": "modules/rtp_rtcp/source/rtp_rtcp_impl2.cc",
        "patchSetId": 9
      },
      "lineNbr": 482,
      "author": {
        "id": 5019
      },
      "writtenOn": "2021-08-13T10:02:13Z",
      "side": 1,
      "message": "so ModuleRtpRtcpImpl2 aware how it is used by PacketRouter.\nThat would make it harder to use with anything else, or even used it differently by PacketRouter",
      "range": {
        "startLine": 482,
        "startChar": 2,
        "endLine": 482,
        "endChar": 72
      },
      "revId": "f48db71da2bd98b8683b7638e87ad4ab70b94bc0",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "64d967ed_60f35dc7",
        "filename": "modules/rtp_rtcp/source/rtp_rtcp_impl2.cc",
        "patchSetId": 9
      },
      "lineNbr": 482,
      "author": {
        "id": 5524
      },
      "writtenOn": "2021-08-13T12:37:29Z",
      "side": 1,
      "message": "We\u0027re really only explicitly verifying the current expected behavior.\nIf we want to change to a different threading model, it\u0027d be a good idea to change the checks too, no?",
      "parentUuid": "5e476360_5c94ca95",
      "range": {
        "startLine": 482,
        "startChar": 2,
        "endLine": 482,
        "endChar": 72
      },
      "revId": "f48db71da2bd98b8683b7638e87ad4ab70b94bc0",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c5655fce_6459bf2e",
        "filename": "modules/rtp_rtcp/source/rtp_rtcp_impl2.cc",
        "patchSetId": 9
      },
      "lineNbr": 482,
      "author": {
        "id": 5019
      },
      "writtenOn": "2021-08-13T13:52:55Z",
      "side": 1,
      "message": "I just do not link reverse dependency (ModuleRtpRtcpImpl2 \u0027depends\u0027 on PacketRouter).\nNot that a bit issue for documentation \"dependency\".",
      "parentUuid": "64d967ed_60f35dc7",
      "range": {
        "startLine": 482,
        "startChar": 2,
        "endLine": 482,
        "endChar": 72
      },
      "revId": "f48db71da2bd98b8683b7638e87ad4ab70b94bc0",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "05664ff8_80fd95af",
        "filename": "modules/rtp_rtcp/source/rtp_rtcp_impl2.cc",
        "patchSetId": 9
      },
      "lineNbr": 482,
      "author": {
        "id": 5524
      },
      "writtenOn": "2021-08-13T14:16:22Z",
      "side": 1,
      "message": "Ah, yes that\u0027s true.",
      "parentUuid": "c5655fce_6459bf2e",
      "range": {
        "startLine": 482,
        "startChar": 2,
        "endLine": 482,
        "endChar": 72
      },
      "revId": "f48db71da2bd98b8683b7638e87ad4ab70b94bc0",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    }
  ]
}