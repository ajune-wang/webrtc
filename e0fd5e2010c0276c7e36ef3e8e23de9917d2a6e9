{
  "comments": [
    {
      "key": {
        "uuid": "b545028e_2a74e2ee",
        "filename": "pc/peer_connection.cc",
        "patchSetId": 2
      },
      "lineNbr": 3247,
      "author": {
        "id": 5142
      },
      "writtenOn": "2019-11-19T15:41:44Z",
      "side": 1,
      "message": "Idea for a test (which I believe this will pass considering not inserting if we already have a value): multiple remote offers in a row without an answer in-between should still revert to the stable stream set.\n\nE.g.\nInitially stream A\nRemote offer for stream B -\u003e have-remote-offer (but don\u0027t answer)\nRemote offer for stream C -\u003e have-remote-offer (but don\u0027t answer)\nRollback\nEXPECT stream A",
      "revId": "e0fd5e2010c0276c7e36ef3e8e23de9917d2a6e9",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "03bb0d64_dc513181",
        "filename": "pc/peer_connection.cc",
        "patchSetId": 2
      },
      "lineNbr": 3254,
      "author": {
        "id": 5142
      },
      "writtenOn": "2019-11-19T15:41:44Z",
      "side": 1,
      "message": "Shouldn\u0027t this be \"transceiver_stream_ids_by_transceivers_[transceiver] \u003d transceiver-\u003ereceiver()-\u003estream_ids()\"? remote_streams_ is a collection of all remote streams, not just the remote streams associated with this receiver.\n\nE.g.\nIf I have trackA: [streamA] and trackB: [streamB] then rollback should not cause trackA: [streamA, streamB]",
      "revId": "e0fd5e2010c0276c7e36ef3e8e23de9917d2a6e9",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "398ec658_61581568",
        "filename": "pc/peer_connection.cc",
        "patchSetId": 2
      },
      "lineNbr": 3254,
      "author": {
        "id": 9279
      },
      "writtenOn": "2019-11-20T09:21:34Z",
      "side": 1,
      "message": "Yes, that was a bug.",
      "parentUuid": "03bb0d64_dc513181",
      "revId": "e0fd5e2010c0276c7e36ef3e8e23de9917d2a6e9",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "07777ab0_b15e013f",
        "filename": "pc/peer_connection.h",
        "patchSetId": 2
      },
      "lineNbr": 1371,
      "author": {
        "id": 5142
      },
      "writtenOn": "2019-11-19T15:41:44Z",
      "side": 1,
      "message": "Can we move the stream ID list to TransceiverStableState?\nAlso these are remote streams, i.e. associated streams of the transceiver.receiver. Should we rename it receiver_stream_ids or remote_stream_ids?",
      "revId": "e0fd5e2010c0276c7e36ef3e8e23de9917d2a6e9",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f19c97f9_9e9b9035",
        "filename": "pc/peer_connection.h",
        "patchSetId": 2
      },
      "lineNbr": 1371,
      "author": {
        "id": 9279
      },
      "writtenOn": "2019-11-20T09:21:34Z",
      "side": 1,
      "message": "\u003eTransceiverStableState?\n\nIt is possible. But doesn\u0027t come for free. Testing gets more complicated because of the coupling. Probably need to add tests in combined scenarios rather than testing both things separately.",
      "parentUuid": "07777ab0_b15e013f",
      "revId": "e0fd5e2010c0276c7e36ef3e8e23de9917d2a6e9",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "43d7f022_6b170047",
        "filename": "pc/peer_connection.h",
        "patchSetId": 2
      },
      "lineNbr": 1371,
      "author": {
        "id": 5142
      },
      "writtenOn": "2019-11-20T09:54:05Z",
      "side": 1,
      "message": "Can you elaborate? I view this as a snapshot to go back to, so it would make sense that when we take the snapshot we store all relevant pieces of information rather than maintaining multiple independent snapshots that stitched together make up the one we really care about.\n\nIs the lifetime of the receiver\u0027s associated streams somehow different from the other part of the snapshot?",
      "parentUuid": "f19c97f9_9e9b9035",
      "revId": "e0fd5e2010c0276c7e36ef3e8e23de9917d2a6e9",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "973bb39a_77730c00",
        "filename": "pc/rtp_transceiver.h",
        "patchSetId": 2
      },
      "lineNbr": 212,
      "author": {
        "id": 5142
      },
      "writtenOn": "2019-11-19T15:50:32Z",
      "side": 1,
      "message": "Don\u0027t we want a single bool for \"has been used by addTrack\"?\nIf I understand the spec correctly, the point is that if addTrack() was called then the user of the API expects the returned sender object to be reliable. So if the transceiver.sender was ever used then that transceiver is permanently blessed. Is any other code path needed? Why differentiate between \"created_by\" and \"reused\"?",
      "revId": "e0fd5e2010c0276c7e36ef3e8e23de9917d2a6e9",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f9d24c9b_3fdfd746",
        "filename": "pc/rtp_transceiver.h",
        "patchSetId": 2
      },
      "lineNbr": 212,
      "author": {
        "id": 9279
      },
      "writtenOn": "2019-11-20T09:21:34Z",
      "side": 1,
      "message": "I don\u0027t quite understand how single bool can do. Otherwise I could have just use the created_by_addtrack in the first place. Or what you are suspecting is that maybe existing behavior of https://cs.chromium.org/search/?q\u003dcreated_by_addtrack\u0026type\u003dcs is not exactly spec compliant and the flag could be set always in PeerConnection::AddTrackUnifiedPlan even when new transceiver was not created?",
      "parentUuid": "973bb39a_77730c00",
      "revId": "e0fd5e2010c0276c7e36ef3e8e23de9917d2a6e9",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "66be3d12_03322e10",
        "filename": "pc/rtp_transceiver.h",
        "patchSetId": 2
      },
      "lineNbr": 212,
      "author": {
        "id": 5142
      },
      "writtenOn": "2019-11-20T09:54:05Z",
      "side": 1,
      "message": "I imagine you can always set the one and only flag in AddTrackUnifiedPlan(). If AddTrack() has \"blessed\" the transceiver, it must not be removed. This is what we care about, not how the transceiver was created per-se, only if addTrack() was involved - before or after its creation.\n\nIt might create a transceiver or it might reuse one that is currently on offer, but if I as an API user invoke addTrack() I know that the returned sender is mine to keep.\n\nAt least that is my understanding, I might be missing something.",
      "parentUuid": "f9d24c9b_3fdfd746",
      "revId": "e0fd5e2010c0276c7e36ef3e8e23de9917d2a6e9",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    }
  ]
}