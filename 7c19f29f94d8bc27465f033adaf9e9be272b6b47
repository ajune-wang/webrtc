{
  "comments": [
    {
      "key": {
        "uuid": "30c6420a_0783b0e9",
        "filename": "modules/rtp_rtcp/source/rtp_depacketizer_av1.cc",
        "patchSetId": 3
      },
      "lineNbr": 85,
      "author": {
        "id": 5527
      },
      "writtenOn": "2019-11-13T11:55:39Z",
      "side": 1,
      "message": "Copy pasted comment from the sketch CL, even though there is no WriteLeb128:\n\nI think the code would be simpler if you just had these two functions:\n  Leb128Value Uint64ToLeb128(uint64_t value);\n  uint64_t Leb128ToUint64(Leb128Value value);\nI also think having a class kind of like this could help:\n  class RtpPayloadReader {\n   private:\n    RtpPayloadReader(rtc::ArrayView\u003cconst rtc::ArrayView\u003cconst uint8_t\u003e\u003e rtp_payloads);\n    uint64_t ReadBytes(size_t offset, size_t num_bytes);\n    void CopyBytesTo(size_t offset, size_t num_bytes, uint8_t* destination);\n  };",
      "range": {
        "startLine": 85,
        "startChar": 12,
        "endLine": 85,
        "endChar": 22
      },
      "revId": "7c19f29f94d8bc27465f033adaf9e9be272b6b47",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4d08a14f_382f48f1",
        "filename": "modules/rtp_rtcp/source/rtp_depacketizer_av1.cc",
        "patchSetId": 3
      },
      "lineNbr": 85,
      "author": {
        "id": 5019
      },
      "writtenOn": "2019-11-13T13:16:58Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "30c6420a_0783b0e9",
      "range": {
        "startLine": 85,
        "startChar": 12,
        "endLine": 85,
        "endChar": 22
      },
      "revId": "7c19f29f94d8bc27465f033adaf9e9be272b6b47",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2c3dada6_3cfdada2",
        "filename": "modules/rtp_rtcp/source/rtp_depacketizer_av1.cc",
        "patchSetId": 3
      },
      "lineNbr": 134,
      "author": {
        "id": 5527
      },
      "writtenOn": "2019-11-13T11:55:39Z",
      "side": 1,
      "message": "I don\u0027t like this at all...\n\nWhy not look at the marker bit (other than it not yet being specified to end a frame).",
      "range": {
        "startLine": 126,
        "startChar": 0,
        "endLine": 134,
        "endChar": 47
      },
      "revId": "7c19f29f94d8bc27465f033adaf9e9be272b6b47",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bc9c87dc_e5e41d72",
        "filename": "modules/rtp_rtcp/source/rtp_depacketizer_av1.cc",
        "patchSetId": 3
      },
      "lineNbr": 134,
      "author": {
        "id": 5019
      },
      "writtenOn": "2019-11-13T13:16:58Z",
      "side": 1,
      "message": "e.g. because marker bit is not available here (only rtp_payload is passed).\n\nAre you aware of any place in pipeline that would definitely break when \u0027subframe\u0027 are passed?\nI would prefer to postpone implementing better logic until finding out this simple one doesn\u0027t work.\n\nReasons better logic is far from trivial are current interfaces: there is no way to say \u0027may be first packet in frame or may be last packet in frame\u0027. PacketBuffer also doesn\u0027t have codec-agnostic logic to detect frame boundaries (specially beginning of the frame).\n\nWhen that logic is in place, when interface changed so that this [kind] of class can pass \u0027may be first packet in frame\u0027, Then yes, then there will be no need to rely so heavily on these two flags.",
      "parentUuid": "2c3dada6_3cfdada2",
      "range": {
        "startLine": 126,
        "startChar": 0,
        "endLine": 134,
        "endChar": 47
      },
      "revId": "7c19f29f94d8bc27465f033adaf9e9be272b6b47",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "371cd021_de967c56",
        "filename": "modules/rtp_rtcp/source/rtp_depacketizer_av1.cc",
        "patchSetId": 3
      },
      "lineNbr": 134,
      "author": {
        "id": 5527
      },
      "writtenOn": "2019-11-14T14:14:31Z",
      "side": 1,
      "message": "I would expect that it could break stats, such as frames decoded. I also wouldn\u0027t be surprised if some decoders would complain if a decode invocation didn\u0027t generate any spatial output.",
      "parentUuid": "bc9c87dc_e5e41d72",
      "range": {
        "startLine": 126,
        "startChar": 0,
        "endLine": 134,
        "endChar": 47
      },
      "revId": "7c19f29f94d8bc27465f033adaf9e9be272b6b47",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "16f04bdc_574d5fb0",
        "filename": "modules/rtp_rtcp/source/rtp_depacketizer_av1.cc",
        "patchSetId": 3
      },
      "lineNbr": 134,
      "author": {
        "id": 5019
      },
      "writtenOn": "2019-11-14T16:34:35Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "371cd021_de967c56",
      "range": {
        "startLine": 126,
        "startChar": 0,
        "endLine": 134,
        "endChar": 47
      },
      "revId": "7c19f29f94d8bc27465f033adaf9e9be272b6b47",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "72798d71_116efad3",
        "filename": "modules/rtp_rtcp/source/rtp_depacketizer_av1.cc",
        "patchSetId": 3
      },
      "lineNbr": 147,
      "author": {
        "id": 5527
      },
      "writtenOn": "2019-11-14T14:14:31Z",
      "side": 1,
      "message": "Maybe add something like:\n\n  // If |obu_index| \u003e 0 the last OBU is not preceded by a fragment size field.",
      "range": {
        "startLine": 147,
        "startChar": 11,
        "endLine": 147,
        "endChar": 28
      },
      "revId": "7c19f29f94d8bc27465f033adaf9e9be272b6b47",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "73847218_178bc2e3",
        "filename": "modules/rtp_rtcp/source/rtp_depacketizer_av1.cc",
        "patchSetId": 3
      },
      "lineNbr": 147,
      "author": {
        "id": 5019
      },
      "writtenOn": "2019-11-14T16:34:35Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "72798d71_116efad3",
      "range": {
        "startLine": 147,
        "startChar": 11,
        "endLine": 147,
        "endChar": 28
      },
      "revId": "7c19f29f94d8bc27465f033adaf9e9be272b6b47",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "83a95748_6dcb5d12",
        "filename": "modules/rtp_rtcp/source/rtp_depacketizer_av1.cc",
        "patchSetId": 3
      },
      "lineNbr": 155,
      "author": {
        "id": 5527
      },
      "writtenOn": "2019-11-14T14:14:31Z",
      "side": 1,
      "message": "It\u0027s a bit weird how subviews are used to advance the offset when reading the payload...",
      "range": {
        "startLine": 155,
        "startChar": 20,
        "endLine": 155,
        "endChar": 37
      },
      "revId": "7c19f29f94d8bc27465f033adaf9e9be272b6b47",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0d62ce06_4106ef9e",
        "filename": "modules/rtp_rtcp/source/rtp_depacketizer_av1.cc",
        "patchSetId": 3
      },
      "lineNbr": 155,
      "author": {
        "id": 5019
      },
      "writtenOn": "2019-11-14T16:34:35Z",
      "side": 1,
      "message": "Hm, it is.... \nswitched from rtc::ArrayView to rtc::ByteBufferReader.\nthat one seems more appropriate (the only caveat - it expects bytes to be chars rather than uint8_t)",
      "parentUuid": "83a95748_6dcb5d12",
      "range": {
        "startLine": 155,
        "startChar": 20,
        "endLine": 155,
        "endChar": 37
      },
      "revId": "7c19f29f94d8bc27465f033adaf9e9be272b6b47",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "79ef7453_4343d41f",
        "filename": "modules/rtp_rtcp/source/rtp_depacketizer_av1.cc",
        "patchSetId": 3
      },
      "lineNbr": 168,
      "author": {
        "id": 5527
      },
      "writtenOn": "2019-11-14T14:14:31Z",
      "side": 1,
      "message": "Should probably add an RTC_WARNING when this happens, for debugging purposes.",
      "range": {
        "startLine": 168,
        "startChar": 10,
        "endLine": 168,
        "endChar": 28
      },
      "revId": "7c19f29f94d8bc27465f033adaf9e9be272b6b47",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "061a7c67_62fca997",
        "filename": "modules/rtp_rtcp/source/rtp_depacketizer_av1.cc",
        "patchSetId": 3
      },
      "lineNbr": 168,
      "author": {
        "id": 5019
      },
      "writtenOn": "2019-11-14T16:34:35Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "79ef7453_4343d41f",
      "range": {
        "startLine": 168,
        "startChar": 10,
        "endLine": 168,
        "endChar": 28
      },
      "revId": "7c19f29f94d8bc27465f033adaf9e9be272b6b47",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "76f806c7_1bd8a465",
        "filename": "modules/rtp_rtcp/source/rtp_depacketizer_av1.cc",
        "patchSetId": 3
      },
      "lineNbr": 176,
      "author": {
        "id": 5527
      },
      "writtenOn": "2019-11-14T14:14:31Z",
      "side": 1,
      "message": "Like beginning/end of frame this is is temporary to right? Until we have the keyframe bit in the payload descriptor.",
      "range": {
        "startLine": 176,
        "startChar": 8,
        "endLine": 176,
        "endChar": 40
      },
      "revId": "7c19f29f94d8bc27465f033adaf9e9be272b6b47",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "462bfa31_5caec2a7",
        "filename": "modules/rtp_rtcp/source/rtp_depacketizer_av1.cc",
        "patchSetId": 3
      },
      "lineNbr": 176,
      "author": {
        "id": 5019
      },
      "writtenOn": "2019-11-14T16:34:35Z",
      "side": 1,
      "message": "yep, it is temporary. it is good first approximation that works in all practical case I\u0027m currently aware about.\nBut it will change.\nEither when spec changed to have a bit in the aggregation_header,\nor when webrtc refactored to detect if frame is key frame after it is assembled.\nor when TODO comment is resolved: in practice sequence header together with metadata obus shouldn\u0027t be that large to push frame header or frame OBU to the next packet.",
      "parentUuid": "76f806c7_1bd8a465",
      "range": {
        "startLine": 176,
        "startChar": 8,
        "endLine": 176,
        "endChar": 40
      },
      "revId": "7c19f29f94d8bc27465f033adaf9e9be272b6b47",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e05845d2_6656dc7a",
        "filename": "modules/rtp_rtcp/source/rtp_depacketizer_av1.h",
        "patchSetId": 3
      },
      "lineNbr": 21,
      "author": {
        "id": 5527
      },
      "writtenOn": "2019-11-13T11:55:39Z",
      "side": 1,
      "message": "WDYT about instead of implementing an RtpDepacketizer, we implement a \"RtpPayloadFrameBoundFinder\" or something like that. It\u0027s only purpose is to figure out if:\n1. There is a start bit.\n2. If so, what the value of the start bit is.\n3. What the value of the end bit is (always assume M bit is used for this).",
      "range": {
        "startLine": 21,
        "startChar": 34,
        "endLine": 21,
        "endChar": 49
      },
      "revId": "7c19f29f94d8bc27465f033adaf9e9be272b6b47",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "977fcfd0_f5c9d969",
        "filename": "modules/rtp_rtcp/source/rtp_depacketizer_av1.h",
        "patchSetId": 3
      },
      "lineNbr": 21,
      "author": {
        "id": 5019
      },
      "writtenOn": "2019-11-13T13:16:58Z",
      "side": 1,
      "message": "I agree that would be nicer in the end, I have some ideas how to move into that direction,\nbut I do not see how to integrate such a class into current pipeline (without adding many hacks).",
      "parentUuid": "e05845d2_6656dc7a",
      "range": {
        "startLine": 21,
        "startChar": 34,
        "endLine": 21,
        "endChar": 49
      },
      "revId": "7c19f29f94d8bc27465f033adaf9e9be272b6b47",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    }
  ]
}