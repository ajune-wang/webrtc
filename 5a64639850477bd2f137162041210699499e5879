{
  "comments": [
    {
      "key": {
        "uuid": "f93d1d00_31b7617b",
        "filename": "api/video/encoded_image.h",
        "patchSetId": 10
      },
      "lineNbr": 157,
      "author": {
        "id": 5234
      },
      "writtenOn": "2019-12-03T11:39:37Z",
      "side": 1,
      "message": "Consider adding RTC_DCHECK_EQ(buffer_, nullptr);",
      "range": {
        "startLine": 157,
        "startChar": 1,
        "endLine": 157,
        "endChar": 25
      },
      "revId": "5a64639850477bd2f137162041210699499e5879",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "04c3d23f_faab316c",
        "filename": "api/video/encoded_image.h",
        "patchSetId": 10
      },
      "lineNbr": 157,
      "author": {
        "id": 9515
      },
      "writtenOn": "2019-12-03T12:55:14Z",
      "side": 1,
      "message": "Hope you\u0027re satisfied with my alternative.\nActually both RTC_DCHECK_EQ(buffer_, nullptr) and RTC_DCHECK_EQ(buffer_.get(), nullptr) gives compiler errors.",
      "parentUuid": "f93d1d00_31b7617b",
      "range": {
        "startLine": 157,
        "startChar": 1,
        "endLine": 157,
        "endChar": 25
      },
      "revId": "5a64639850477bd2f137162041210699499e5879",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e109161b_c733822d",
        "filename": "api/video/encoded_image.h",
        "patchSetId": 10
      },
      "lineNbr": 157,
      "author": {
        "id": 5234
      },
      "writtenOn": "2019-12-03T13:07:20Z",
      "side": 1,
      "message": "That\u0027s fine. (I forgot that the _EQ versions don\u0027t work well with ponters).",
      "parentUuid": "04c3d23f_faab316c",
      "range": {
        "startLine": 157,
        "startChar": 1,
        "endLine": 157,
        "endChar": 25
      },
      "revId": "5a64639850477bd2f137162041210699499e5879",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "69dcd0e6_fa205f78",
        "filename": "call/video_receive_stream.h",
        "patchSetId": 10
      },
      "lineNbr": 58,
      "author": {
        "id": 5234
      },
      "writtenOn": "2019-12-03T11:39:37Z",
      "side": 1,
      "message": "You probably considered that already, but does it work to make this (and the below) member private (without friend declarations or the like)?",
      "range": {
        "startLine": 57,
        "startChar": 50,
        "endLine": 58,
        "endChar": 42
      },
      "revId": "5a64639850477bd2f137162041210699499e5879",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5a396cab_bc850c0c",
        "filename": "call/video_receive_stream.h",
        "patchSetId": 10
      },
      "lineNbr": 58,
      "author": {
        "id": 9515
      },
      "writtenOn": "2019-12-03T12:55:14Z",
      "side": 1,
      "message": "Not without heap allocation and virtual calls which is overkill. I spoke to Danil over lunch and what you see in the new iteration is acceptable to him, would you agree?\nFriend declaration is not okay to him in this case because call/VRS.h and video/VRS.cc are in different build targets.",
      "parentUuid": "69dcd0e6_fa205f78",
      "range": {
        "startLine": 57,
        "startChar": 50,
        "endLine": 58,
        "endChar": 42
      },
      "revId": "5a64639850477bd2f137162041210699499e5879",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "315b6324_2a14af45",
        "filename": "call/video_receive_stream.h",
        "patchSetId": 10
      },
      "lineNbr": 58,
      "author": {
        "id": 5234
      },
      "writtenOn": "2019-12-03T13:07:20Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "5a396cab_bc850c0c",
      "range": {
        "startLine": 57,
        "startChar": 50,
        "endLine": 58,
        "endChar": 42
      },
      "revId": "5a64639850477bd2f137162041210699499e5879",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5ec971c5_8a071d4f",
        "filename": "call/video_receive_stream.h",
        "patchSetId": 10
      },
      "lineNbr": 59,
      "author": {
        "id": 5234
      },
      "writtenOn": "2019-12-03T11:39:37Z",
      "side": 1,
      "message": "And expected to be false on the first call to SetAndGetRecordingState?\n\nCould setting this on first call replace the additional |generate_key_frame| argument? In the input to SetAndGetRecordingState, there are for possible combinations for key_frame_needed and generate_key_frame. Is that reasonable? It\u0027s not obvious to me what the intended behavior is in each of the four cases.",
      "range": {
        "startLine": 59,
        "startChar": 0,
        "endLine": 59,
        "endChar": 25
      },
      "revId": "5a64639850477bd2f137162041210699499e5879",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "792b8a0f_08e69fe9",
        "filename": "call/video_receive_stream.h",
        "patchSetId": 10
      },
      "lineNbr": 59,
      "author": {
        "id": 9515
      },
      "writtenOn": "2019-12-03T12:55:14Z",
      "side": 1,
      "message": "If |generate_key_frame| is true, this attribute isn\u0027t used.\nIf |generate_key_frame| is false, this attribute is used to initialize internal::VRS::keyframe_generation_requested_.\n\nBut this an internal detail in the VRS::GetAndSet method.",
      "parentUuid": "5ec971c5_8a071d4f",
      "range": {
        "startLine": 59,
        "startChar": 0,
        "endLine": 59,
        "endChar": 25
      },
      "revId": "5a64639850477bd2f137162041210699499e5879",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2a2f4dbd_5d207540",
        "filename": "call/video_receive_stream.h",
        "patchSetId": 10
      },
      "lineNbr": 59,
      "author": {
        "id": 5234
      },
      "writtenOn": "2019-12-03T13:07:20Z",
      "side": 1,
      "message": "Ok, thanks for the clarification. I think this could be made slightly cleaner without the |generate_key_frame| argument, but it\u0027s good enough as is.",
      "parentUuid": "792b8a0f_08e69fe9",
      "range": {
        "startLine": 59,
        "startChar": 0,
        "endLine": 59,
        "endChar": 25
      },
      "revId": "5a64639850477bd2f137162041210699499e5879",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fe5b8ee8_6a9773bb",
        "filename": "call/video_receive_stream.h",
        "patchSetId": 10
      },
      "lineNbr": 62,
      "author": {
        "id": 5234
      },
      "writtenOn": "2019-12-03T11:39:37Z",
      "side": 1,
      "message": "Type looks odd. I had expected absl::optional\u003cint64_t\u003e or so.",
      "range": {
        "startLine": 62,
        "startChar": 0,
        "endLine": 62,
        "endChar": 34
      },
      "revId": "5a64639850477bd2f137162041210699499e5879",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7a53d03b_b4214a63",
        "filename": "call/video_receive_stream.h",
        "patchSetId": 10
      },
      "lineNbr": 62,
      "author": {
        "id": 9515
      },
      "writtenOn": "2019-12-03T12:55:14Z",
      "side": 1,
      "message": "Oops. Sorry about that. Fixing.",
      "parentUuid": "fe5b8ee8_6a9773bb",
      "range": {
        "startLine": 62,
        "startChar": 0,
        "endLine": 62,
        "endChar": 34
      },
      "revId": "5a64639850477bd2f137162041210699499e5879",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    }
  ]
}