{
  "comments": [
    {
      "key": {
        "uuid": "a4a21d79_0afcfe88",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 5524
      },
      "writtenOn": "2020-07-12T17:46:27Z",
      "side": 1,
      "message": "Cursory look, seems fine. However:\n1. I\u0027m OOO, so I\u0027ll let philipel@ handle this.\n2. FrameEncodeMetadataWriter::UpdateBitstream() seems to still use the fragmentation header?\n3. See webrtc:11639, in case it is relevant.",
      "revId": "cf1d65f313c75b9177f17d07fe589a070778a13b",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1f3990fe_c741daea",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 5019
      },
      "writtenOn": "2020-07-13T09:28:51Z",
      "side": 1,
      "message": "1. no rush. this cleanup can easily wait an extra month\n2. yep, UpdateBitstream updates fragmentation. after this change it would be possible to alter UpdateBitstream not to update fragmentation (and also infer it from bitstream rather than from passed struct). The cost is yet another  traverse through the frame to find the nalu bindings.\n3. This (or rather followup CL that cleans up SpsVuiRewrite) will make this bug obsolete. I guess one of the reason to get rid of the RTPFragmentationHeader is because it is a source of potential security bugs (another example is bugs.webrtc.org/11739 )\n\n(I\u0027ve also explored a bit how code can look without the RTPFragmentationHeader:\nhttps://webrtc-review.googlesource.com/c/src/+/179091)",
      "parentUuid": "a4a21d79_0afcfe88",
      "revId": "cf1d65f313c75b9177f17d07fe589a070778a13b",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0d2651c8_69fa0566",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 5019
      },
      "writtenOn": "2020-07-16T14:29:51Z",
      "side": 1,
      "message": "Nisse, can you please take a look as bug owner and as test/ owner",
      "revId": "cf1d65f313c75b9177f17d07fe589a070778a13b",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa907914_571f845c",
        "filename": "modules/rtp_rtcp/source/rtp_format_h264_unittest.cc",
        "patchSetId": 3
      },
      "lineNbr": 85,
      "author": {
        "id": 5527
      },
      "writtenOn": "2020-07-16T13:09:50Z",
      "side": 1,
      "message": "Interesting, in H264SpsPpsTracker we insert a 4 byte startcode: https://source.chromium.org/chromium/chromium/src/+/master:third_party/webrtc/modules/video_coding/h264_sps_pps_tracker.cc;l\u003d29;drc\u003dafdbf8e6f881bda6cfe8c8c8c46f2167db8b0b05?originalUrl\u003dhttps:%2F%2Fcs.chromium.org%2F\n\nBut reading 3.163 in the ITU-T H264 spec it says that it should be 3 bytes. \n\nhmmm...",
      "range": {
        "startLine": 83,
        "startChar": 0,
        "endLine": 85,
        "endChar": 26
      },
      "revId": "cf1d65f313c75b9177f17d07fe589a070778a13b",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "34886785_a989e357",
        "filename": "modules/rtp_rtcp/source/rtp_format_h264_unittest.cc",
        "patchSetId": 3
      },
      "lineNbr": 85,
      "author": {
        "id": 5019
      },
      "writtenOn": "2020-07-16T13:53:17Z",
      "side": 1,
      "message": "sections B.1.1/B.1.2 in the same spec notes that it can be either.\n\n\"the fourbyte sequence 0x00000001 (which is to be interpreted as a zero_byte followed by a start_code_prefix_one_3bytes)\"\n\nH264::FindNaluIndices supports both.",
      "parentUuid": "fa907914_571f845c",
      "range": {
        "startLine": 83,
        "startChar": 0,
        "endLine": 85,
        "endChar": 26
      },
      "revId": "cf1d65f313c75b9177f17d07fe589a070778a13b",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    }
  ]
}