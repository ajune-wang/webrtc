{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "ce1c327b_39dcde60",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 5634
      },
      "writtenOn": "2021-06-29T07:16:26Z",
      "side": 1,
      "message": "If integration tests are needed, they need to cover negotiation - an incoming offer SDP with \"a\u003drtcp-fb:nack\" (https://datatracker.ietf.org/doc/html/rfc4585#section-9) should be the remote side asking for nack support; the responding answer should indicate nack support.\n\nI\u0027m not sure integration tests are needed here; it may be sufficient to use lower level structures to set up a transport and an RTP session, and fire a nack across the wire, in which case this CL doesn\u0027t need to do SDP.\n\nBut I do think there should be at least one unit test actually receiving a nack, and verifying that the counter is incremented.",
      "revId": "6b776527bab815335f9973b45335d29d3e52f290",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "24d4bec6_457108d5",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 8038
      },
      "writtenOn": "2021-06-29T08:28:33Z",
      "side": 1,
      "message": "Any pointers to where one could add such a test? Note that this is metric counts number of nack packets sent.",
      "parentUuid": "ce1c327b_39dcde60",
      "revId": "6b776527bab815335f9973b45335d29d3e52f290",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0d3352b0_20e8932d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 5634
      },
      "writtenOn": "2021-06-29T09:16:34Z",
      "side": 1,
      "message": "it SHOULD be in audio/channel_receive_unittest.cc, but that file does not exist (problematic...). Creating that file might be a Good Thing, even for this single function; then the next person to come along will know where to add more unit tests.\n\naudio_receive_stream_unittest.cc uses a mock ChannelReceive, so isn\u0027t useful.\n\nAnother possibility is to add something to modules/rtp_rtcp/source/rtp_sender_unittest that uses a real audio ChannelReceive.",
      "parentUuid": "24d4bec6_457108d5",
      "revId": "6b776527bab815335f9973b45335d29d3e52f290",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1bb1b5c3_b39dabdb",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 5077
      },
      "writtenOn": "2021-06-29T10:41:06Z",
      "side": 1,
      "message": "Hello! channel_receive (and channel_send) are actually leftovers from the time we had but one single, duplex, voice_channel class. New functionality should ideally go in audio_*_stream, which have their associated *_unittest files. I would suggest not creating a new _unittest file for the channel class as that would cement its existence.\n\nIn this case that looks like a possibility (if I\u0027m not mistaken AudioReceiveStream could implement the callback and send over \"this\" to the channel class\u0027 c-tor to set up the rtprtcp module\u0027s config.\n\nCaveat: I didn\u0027t look through the whole CL yet...",
      "parentUuid": "0d3352b0_20e8932d",
      "revId": "6b776527bab815335f9973b45335d29d3e52f290",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3e9d690e_cce178b1",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 8038
      },
      "writtenOn": "2021-06-29T12:08:06Z",
      "side": 1,
      "message": "But channel_receive is mocked in audio_receive_stream so wouldn\u0027t make sense to test that..\n\nIs there any reason why we don\u0027t merge these classes?",
      "parentUuid": "1bb1b5c3_b39dabdb",
      "revId": "6b776527bab815335f9973b45335d29d3e52f290",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5920c058_652bc1d5",
        "filename": "pc/rtc_stats_integrationtest.cc",
        "patchSetId": 4
      },
      "lineNbr": 815,
      "author": {
        "id": 5634
      },
      "writtenOn": "2021-06-29T07:16:26Z",
      "side": 1,
      "message": "If Nack support has not been negotiated, nackCount SHOULD be missing. See https://w3c.github.io/webrtc-stats/#guidelines-for-implementing-stats-objects\n\nHave we negotiated Nack support in this test?",
      "revId": "6b776527bab815335f9973b45335d29d3e52f290",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d4a1317a_59771f80",
        "filename": "pc/rtc_stats_integrationtest.cc",
        "patchSetId": 4
      },
      "lineNbr": 815,
      "author": {
        "id": 8038
      },
      "writtenOn": "2021-06-29T08:28:33Z",
      "side": 1,
      "message": "For video, not for audio. I\u0027ll make it optional then (conditioned on nack enabled) and revert the changes to this test.",
      "parentUuid": "5920c058_652bc1d5",
      "revId": "6b776527bab815335f9973b45335d29d3e52f290",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    }
  ]
}