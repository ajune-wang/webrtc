{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "9f79f335_f851a102",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 14874
      },
      "writtenOn": "2021-06-29T12:05:08Z",
      "side": 1,
      "message": "Harald, another one for you to enjoy :)",
      "revId": "fae7b96c3eecd2e4a980d8e95ecee719b4f18c89",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9bc84255_93a55080",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5634
      },
      "writtenOn": "2021-06-29T12:42:19Z",
      "side": 1,
      "message": "Looks better than the original mess, but I think you can do even better.\n",
      "revId": "fae7b96c3eecd2e4a980d8e95ecee719b4f18c89",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "19baa9c0_ebec7e74",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5634
      },
      "writtenOn": "2021-06-30T06:28:30Z",
      "side": 1,
      "message": "More explanations....\n",
      "revId": "fae7b96c3eecd2e4a980d8e95ecee719b4f18c89",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "84409f59_9389c0eb",
        "filename": "rtc_base/openssl_adapter.cc",
        "patchSetId": 1
      },
      "lineNbr": 300,
      "author": {
        "id": 5634
      },
      "writtenOn": "2021-06-29T12:42:19Z",
      "side": 1,
      "message": "1) cleanup_war? there\u0027s no war going on here?\ndo you mean cleanup_variables_lambda?\n\n2) You can make this simpler. You have cleanup_war() calling dealloc_func calling Cleanup(). Make a Context object that calls Cleanup() in its destructor and make an instance of that.",
      "revId": "fae7b96c3eecd2e4a980d8e95ecee719b4f18c89",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0cea2f5e_e5056ec7",
        "filename": "rtc_base/openssl_adapter.cc",
        "patchSetId": 1
      },
      "lineNbr": 300,
      "author": {
        "id": 17619
      },
      "writtenOn": "2021-06-29T18:35:48Z",
      "side": 1,
      "message": "To do this I can go about 2 ways:\n1) use std::bind to get function bound to Cleanup() which I can pass as a deleter function\n2) use lambdas same as now\n\nAs far as I know lambdas are bit more performant than std::bind.\nIn both scenarios I would create a local SSL_CTX which I would release to ssl_ctx_ at the end of happy path.",
      "parentUuid": "84409f59_9389c0eb",
      "revId": "fae7b96c3eecd2e4a980d8e95ecee719b4f18c89",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "44118d8d_a2c37855",
        "filename": "rtc_base/openssl_adapter.cc",
        "patchSetId": 1
      },
      "lineNbr": 300,
      "author": {
        "id": 5634
      },
      "writtenOn": "2021-06-30T06:28:30Z",
      "side": 1,
      "message": "The \"war\" was a tongue-in-cheek reference to https://google.github.io/styleguide/cppguide.html#General_Naming_Rules - \"don\u0027t use abbreviations\".\n\nThe 3 variables with non-obvious linkages make this code hard to read.\nSomething like this should do it and be more readable:\n\nclass EarlyExitCatcher {\n   void disable() { disabled_ \u003d true; }\n  ~EarlyExitCatcher() {\n     if (!disabled_) {\n        Cleanup();\n     }\n   }\n   bool disabled_ \u003d false;\n};\n\n{  // whatever scope you like\n   EarlyExitCatcher catcher;\n   .... lots of code with returns ...\n   catcher.disable();\n}\n\nI think this is more readable than the 3-variable structure using decltype and dealloc functions you have set up above. I always worry about readability; this code is executed once per SSL context (usually once per program), so performance isn\u0027t a primary concern.",
      "parentUuid": "0cea2f5e_e5056ec7",
      "revId": "fae7b96c3eecd2e4a980d8e95ecee719b4f18c89",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1187de0c_f08d5e07",
        "filename": "rtc_base/openssl_adapter.cc",
        "patchSetId": 1
      },
      "lineNbr": 319,
      "author": {
        "id": 5634
      },
      "writtenOn": "2021-06-29T12:42:19Z",
      "side": 1,
      "message": "You don\u0027t need bio until you get down here, which means that you can make it const.",
      "revId": "fae7b96c3eecd2e4a980d8e95ecee719b4f18c89",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "aa02c1b0_3e535fcb",
        "filename": "rtc_base/openssl_adapter.cc",
        "patchSetId": 1
      },
      "lineNbr": 319,
      "author": {
        "id": 17619
      },
      "writtenOn": "2021-06-29T13:51:27Z",
      "side": 1,
      "message": "What do you mean by this?\nI tried doing this with const but .release() after SSL_set_bio to transfer ownership of bio to ssl can\u0027t be called on const uniqe_ptr.",
      "parentUuid": "1187de0c_f08d5e07",
      "revId": "fae7b96c3eecd2e4a980d8e95ecee719b4f18c89",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "48431f3b_126451e8",
        "filename": "rtc_base/openssl_adapter.cc",
        "patchSetId": 1
      },
      "lineNbr": 319,
      "author": {
        "id": 5634
      },
      "writtenOn": "2021-06-30T06:28:30Z",
      "side": 1,
      "message": "Ah, the .release destroys the possibility of using const. Thanks for catching my error. But if you move the declaration down to here, you can write \"std::unique_ptr\u003cBIO, decltype(\u0026::BIO_free)\u003e bio{nullptr, ::BIO_free} \u003d BIO_new_socket(socket_)\", so that you have no code that can ever see a null bio.\n\nhttps://google.github.io/styleguide/cppguide.html#Local_Variables - \"we encourage you to declare them ... as close to the first use as possible.\"",
      "parentUuid": "aa02c1b0_3e535fcb",
      "revId": "fae7b96c3eecd2e4a980d8e95ecee719b4f18c89",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    }
  ]
}