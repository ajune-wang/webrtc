{
  "comments": [
    {
      "key": {
        "uuid": "94363b36_6d075cbc",
        "filename": "p2p/base/sessiondescription.h",
        "patchSetId": 2
      },
      "lineNbr": 72,
      "author": {
        "id": 5126
      },
      "writtenOn": "2017-10-31T12:58:12Z",
      "side": 1,
      "message": "This class contains a std::string and a std::vector\u003cstd::string\u003e, meaning that before this change, moving was considerably cheaper than copying. After this change, move isn\u0027t available so we\u0027ll fall back to copying.\n\nIn cases like this, seriously consider adding a move constructor as well.",
      "revId": "5e22c7d69fb519d16f0d0e872cbe61b9daeec6cf",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ecc1df42_f5f5644f",
        "filename": "p2p/base/sessiondescription.h",
        "patchSetId": 2
      },
      "lineNbr": 72,
      "author": {
        "id": 5039
      },
      "writtenOn": "2017-10-31T17:23:53Z",
      "side": 1,
      "message": "One unfortunate side effect of providing a move constructor is that it deletes the implicit copy-assignment operator, so then that has to be specified explicitly. We end up with:\n\n  explicit ContentGroup(const std::string\u0026 semantics);\n  ContentGroup(const ContentGroup\u0026);\n  ContentGroup(ContentGroup\u0026\u0026);\n  ContentGroup\u0026 operator\u003d(const ContentGroup\u0026);\n  ContentGroup\u0026 operator\u003d(ContentGroup\u0026\u0026);\n  ~ContentGroup();\n\nTo get everything that was included implicitly before. I went ahead and added all of those, but it is quite wordy :(",
      "parentUuid": "94363b36_6d075cbc",
      "revId": "5e22c7d69fb519d16f0d0e872cbe61b9daeec6cf",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d9de72c5_184a9ff2",
        "filename": "p2p/base/sessiondescription.h",
        "patchSetId": 2
      },
      "lineNbr": 72,
      "author": {
        "id": 5126
      },
      "writtenOn": "2017-10-31T19:05:22Z",
      "side": 1,
      "message": "Yes, but it follows the common advice that if you need to manually define at least one of those five (copy/move construction/assignment and destructor), you should define (or delete) all five. Usually that\u0027s in the context of writing non-default implementations, but I find that the advice works just as well when you just want the default implementations non-inlined.",
      "parentUuid": "ecc1df42_f5f5644f",
      "revId": "5e22c7d69fb519d16f0d0e872cbe61b9daeec6cf",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "79668c42_751a7fda",
        "filename": "p2p/base/sessiondescription.h",
        "patchSetId": 2
      },
      "lineNbr": 72,
      "author": {
        "id": 5039
      },
      "writtenOn": "2017-10-31T19:38:44Z",
      "side": 1,
      "message": "OK, sounds good.",
      "parentUuid": "d9de72c5_184a9ff2",
      "revId": "5e22c7d69fb519d16f0d0e872cbe61b9daeec6cf",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4150c65c_34dcf782",
        "filename": "p2p/base/sessiondescription.h",
        "patchSetId": 2
      },
      "lineNbr": 174,
      "author": {
        "id": 5126
      },
      "writtenOn": "2017-10-31T12:58:12Z",
      "side": 1,
      "message": "Hmm. Why a private copy constructor?",
      "revId": "5e22c7d69fb519d16f0d0e872cbe61b9daeec6cf",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1a2e452b_d8792d7b",
        "filename": "p2p/base/sessiondescription.h",
        "patchSetId": 2
      },
      "lineNbr": 174,
      "author": {
        "id": 5039
      },
      "writtenOn": "2017-10-31T17:23:53Z",
      "side": 1,
      "message": "There\u0027s a |Copy| method in this class which does a deep copy of the SessionDescription. It uses the copy constructor to do a shallow copy, then goes through and makes clones of the heap-allocated pointers (see sessiondescription.cc:116).",
      "parentUuid": "4150c65c_34dcf782",
      "revId": "5e22c7d69fb519d16f0d0e872cbe61b9daeec6cf",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8b9e4d02_afbc754b",
        "filename": "p2p/base/sessiondescription.h",
        "patchSetId": 2
      },
      "lineNbr": 174,
      "author": {
        "id": 5126
      },
      "writtenOn": "2017-10-31T19:05:22Z",
      "side": 1,
      "message": "OK---but why private? The copy constructor used to be implicit (and thus public), but you\u0027re changing it to private.",
      "parentUuid": "1a2e452b_d8792d7b",
      "revId": "5e22c7d69fb519d16f0d0e872cbe61b9daeec6cf",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ecc8f269_6cc4be10",
        "filename": "p2p/base/sessiondescription.h",
        "patchSetId": 2
      },
      "lineNbr": 174,
      "author": {
        "id": 5039
      },
      "writtenOn": "2017-10-31T19:38:44Z",
      "side": 1,
      "message": "I suppose this is a small breaking change for anyone who relied on it being public. It would be incorrect to have used the implicit copy constructor since it doesn\u0027t do a deep copy of the ContentInfo objects so would get a double free when the SessionDescription destructor is called. I think having the implicit copy constructor public was probably an oversight, and making it private now is more correct.",
      "parentUuid": "8b9e4d02_afbc754b",
      "revId": "5e22c7d69fb519d16f0d0e872cbe61b9daeec6cf",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ac9850e7_7c4faa74",
        "filename": "p2p/base/sessiondescription.h",
        "patchSetId": 2
      },
      "lineNbr": 174,
      "author": {
        "id": 5126
      },
      "writtenOn": "2017-10-31T20:51:04Z",
      "side": 1,
      "message": "Oh. No, if using that constructor caused crashes, making it unavailable doesn\u0027t count as a breaking change, I\u0027d say. :-)\n\nHmm. The bug isn\u0027t really in this class, is it? It\u0027s ContentInfos that shouldn\u0027t be copyable either. Maybe post a bug about it?\n\nEither way, this is good for this CL.",
      "parentUuid": "ecc8f269_6cc4be10",
      "revId": "5e22c7d69fb519d16f0d0e872cbe61b9daeec6cf",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    }
  ]
}