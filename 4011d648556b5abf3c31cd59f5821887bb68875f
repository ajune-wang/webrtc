{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "baffc22a_d9e78004",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 3350241
      },
      "writtenOn": "2024-05-07T23:46:19Z",
      "side": 1,
      "message": "davidben: can you please confirm this is no longer needed as of... 2017 ;-)\nI wonder about the RAND_poll() call...\n\nDiscovered \"by chance\" while trying to break up the \"ssl\" target which is depended on by Chromium: https://source.chromium.org/chromium/chromium/src/+/main:third_party/blink/renderer/modules/peerconnection/peer_connection_dependency_factory.cc;l\u003d551;drc\u003d0561e2c98b7e4033b14c97dd34d4768306be2f29;bpv\u003d1;bpt\u003d1 (which is going away next)",
      "revId": "4011d648556b5abf3c31cd59f5821887bb68875f",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ffccaa65_bb5ab3f1",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5634
      },
      "writtenOn": "2024-05-08T11:28:39Z",
      "side": 1,
      "message": "Will approve as soon as @davidben says it\u0027s OK. (second pair of eyes, not first)",
      "revId": "4011d648556b5abf3c31cd59f5821887bb68875f",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b66510a4_d3c2ada1",
        "filename": "rtc_base/openssl_adapter.cc",
        "patchSetId": 2
      },
      "lineNbr": 175,
      "author": {
        "id": 5602
      },
      "writtenOn": "2024-05-08T14:59:11Z",
      "side": 1,
      "message": "So, this is slightly complicated. ðŸ˜ž\n\nI\u0027m not sure where the situation is in OpenSSL, but looking at their internals, I\u0027m fairly sure not all APIs will behave correctly if you omit the initialization. E.g. the \"low-level\" SHA256 APIs don\u0027t seem to initialize the CPU capabilities vector. I\u0027m a little perplexed to see that they don\u0027t think applications need to call the init function. I guess they fixed the other cases?\n\nHistorically, some applications would use `RAND_poll` to prime the PRNG, e.g. before entering a sandbox. I\u0027ve no idea what the history is here, but BoringSSL does not need this, so I\u0027ve no objections to removing that. In BoringSSL, `SSL_load_error_strings`, `ERR_load_BIO_strings`, `OpenSSL_add_all_algorithms`, and `RAND_poll` are all unnecessary. In fact, they all do nothing. ðŸ˜Š\n\n`SSL_library_init` is a bit trickier. The one piece of state that BoringSSL needs to initialize is the CPU capabilities vector. By default, we just use a static initializer to initialize this to avoid worrying about this. However, Chromium (and thus, by extension, WebRTC\u0027s GN build) turns off the static initializer.\n\nBecause that value is read very deep in the library, even from assembly, it was difficult to attach it to a `pthread_once`. So our story, for the longest time, was that you had to either use the default static initializer, OR call one of the many initialization functions first. (OpenSSL has dozens of spellings for it. We wire them all to the same thing, so feel free to spell it `SSL_library_init` or `OPENSSL_init_ssl` or `CRYPTO_library_init` or `OPENSSL_init_crypto` or whatever. We don\u0027t care.)\n\nThat said, this is unfriendly, so we\u0027ve been fixing this up by moving the accesses out of assembly and are nearly done. (Finally!) The tracking bug is https://bugs.chromium.org/p/boringssl/issues/detail?id\u003d35, though most of the work is in https://bugs.chromium.org/p/boringssl/issues/detail?id\u003d673\n\nOnce that\u0027s done, it will unambiguously be OK to do this for BoringSSL. If this is a blocker for something, happy to prioritize that, or just land a simpler fix for the remaining bits, and then do the more involved fix as a follow-up. (This hasn\u0027t been a huge blocker thus far, so we\u0027ve been taking the scenic route and getting the accesses out of the assembly.)\n\nFor OpenSSL, I don\u0027t know for sure since we\u0027ve diverged from them a lot.",
      "revId": "4011d648556b5abf3c31cd59f5821887bb68875f",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3c8e2a8b_8cc31c5b",
        "filename": "rtc_base/openssl_adapter.cc",
        "patchSetId": 2
      },
      "lineNbr": 175,
      "author": {
        "id": 3350241
      },
      "writtenOn": "2024-05-08T19:45:02Z",
      "side": 1,
      "message": "Thank you for explaining (and good thing I asked)! This looked like something that should have happened years ago but it seems more complicated. And I hoped removing this would simplify splitting up rtc_base/:ssl which is a convoluted target but...\n\nI checked RAND_POLL and OpenSSL docs say it is not necessary: https://www.openssl.org/docs/man1.1.1/man3/RAND_bytes.html\nIt seems this was done in the past to avoid blocking reading the system random source. We do check the return value of RAND_BYTES which is good!\n\nAdded a TODO referencing the boringssl work, removed the extra OpenSSL stuff (which is no longer necessary there too as of 1.1.0) and then we wait a bit longer (at least the end is in sight!)",
      "parentUuid": "b66510a4_d3c2ada1",
      "revId": "4011d648556b5abf3c31cd59f5821887bb68875f",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    }
  ]
}