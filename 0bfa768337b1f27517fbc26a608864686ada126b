{
  "comments": [
    {
      "key": {
        "uuid": "438509c3_f963e442",
        "filename": "video/rtp_video_stream_receiver.cc",
        "patchSetId": 5
      },
      "lineNbr": 170,
      "author": {
        "id": 5524
      },
      "writtenOn": "2018-08-07T09:39:03Z",
      "side": 1,
      "message": "RtpPayloadRegistry currently seems to do some additional checks, to see if updated mapping is compatible. Is it safe to get rid of? Maybe ping magjed@ who it seems was involved in some of those checks.",
      "range": {
        "startLine": 169,
        "startChar": 0,
        "endLine": 170,
        "endChar": 31
      },
      "revId": "0bfa768337b1f27517fbc26a608864686ada126b",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "991d3973_75274eb1",
        "filename": "video/rtp_video_stream_receiver.cc",
        "patchSetId": 5
      },
      "lineNbr": 170,
      "author": {
        "id": 5234
      },
      "writtenOn": "2018-08-07T10:46:46Z",
      "side": 1,
      "message": "Magnus, can you explain?\n\nI note that the only call of this method, in VideoReceiveStream::Start, wraps it in an RTC_CHECK. So we\u0027ll crash if this method ever fails.",
      "parentUuid": "438509c3_f963e442",
      "range": {
        "startLine": 169,
        "startChar": 0,
        "endLine": 170,
        "endChar": 31
      },
      "revId": "0bfa768337b1f27517fbc26a608864686ada126b",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "687d3a02_0a08978b",
        "filename": "video/rtp_video_stream_receiver.cc",
        "patchSetId": 5
      },
      "lineNbr": 170,
      "author": {
        "id": 5098
      },
      "writtenOn": "2018-08-07T14:14:54Z",
      "side": 1,
      "message": "I just remember I had to touch RtpPayloadRegistry when adding support for H264 High Profile, and that the code was kind of messy. Most of the bad code was there for a good reason though, so be careful removing things even when they look unnecessary.",
      "parentUuid": "991d3973_75274eb1",
      "range": {
        "startLine": 169,
        "startChar": 0,
        "endLine": 170,
        "endChar": 31
      },
      "revId": "0bfa768337b1f27517fbc26a608864686ada126b",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3eff17b6_646c14c2",
        "filename": "video/rtp_video_stream_receiver.cc",
        "patchSetId": 5
      },
      "lineNbr": 170,
      "author": {
        "id": 5234
      },
      "writtenOn": "2018-08-07T15:01:04Z",
      "side": 1,
      "message": "As far as I see, this method is called for each configured decoder in VideoReceiveStream::Start, which in turn is called only once over the lifetime of the VideoReceiveStream, by WebRtcVideoChannel::WebRtcVideoReceiveStream::RecreateWebRtcVideoStream.\n\nThe checks in RTPPayloadRegistry apply only if the same payload type is registered twice, then if payloads are considered \"compatible\", the latter is silently ignored, otherwise, it returns an error. And it case it returns error, code will crash in caller\u0027s RTC_CHECK. And \"compatible\" seems to really mean identical: same payload name, in in the case of h.264, same profile.\n\nSo the case that could possibly matter is if the vector webrtc::VideoReceiveStream::Config::decoders contains duplicates. Is that something that we need to handle?\n\nNote that RTPPayloadRegistry is used on the send side as well.",
      "parentUuid": "687d3a02_0a08978b",
      "range": {
        "startLine": 169,
        "startChar": 0,
        "endLine": 170,
        "endChar": 31
      },
      "revId": "0bfa768337b1f27517fbc26a608864686ada126b",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "28848367_187eff55",
        "filename": "video/rtp_video_stream_receiver.cc",
        "patchSetId": 5
      },
      "lineNbr": 170,
      "author": {
        "id": 5234
      },
      "writtenOn": "2018-08-08T14:54:30Z",
      "side": 1,
      "message": "Dropping return value. In case there multiple decoders with the same payload type in the configuration, behavior with this cl is to use the first one and silently ignore any other entry with the same payload type. Responsibility for proper error reporting should belong to the SDP code.",
      "parentUuid": "3eff17b6_646c14c2",
      "range": {
        "startLine": 169,
        "startChar": 0,
        "endLine": 170,
        "endChar": 31
      },
      "revId": "0bfa768337b1f27517fbc26a608864686ada126b",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e4d607e2_d1c0f28f",
        "filename": "video/rtp_video_stream_receiver.cc",
        "patchSetId": 5
      },
      "lineNbr": 302,
      "author": {
        "id": 5234
      },
      "writtenOn": "2018-08-06T14:54:37Z",
      "side": 1,
      "message": "See cl https://webrtc-review.googlesource.com/c/src/+/92621/1",
      "range": {
        "startLine": 301,
        "startChar": 11,
        "endLine": 302,
        "endChar": 78
      },
      "revId": "0bfa768337b1f27517fbc26a608864686ada126b",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8ef5f0c6_60a5bcda",
        "filename": "video/rtp_video_stream_receiver.cc",
        "patchSetId": 5
      },
      "lineNbr": 313,
      "author": {
        "id": 5524
      },
      "writtenOn": "2018-08-07T09:39:03Z",
      "side": 1,
      "message": "why not just\n header.payload_type_frequency \u003d packet.payload_type_frequency() ?",
      "range": {
        "startLine": 310,
        "startChar": 1,
        "endLine": 313,
        "endChar": 63
      },
      "revId": "0bfa768337b1f27517fbc26a608864686ada126b",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a80776f7_f6545f7b",
        "filename": "video/rtp_video_stream_receiver.cc",
        "patchSetId": 5
      },
      "lineNbr": 313,
      "author": {
        "id": 5234
      },
      "writtenOn": "2018-08-07T10:46:46Z",
      "side": 1,
      "message": "GetHeader does that for us. Problem is that packet_payload_type_frequency() isn\u0027t set properly.\n\nI\u0027m adding code in Call to set it when parsing video packets, see discussion on https://webrtc-review.googlesource.com/c/src/+/92621",
      "parentUuid": "8ef5f0c6_60a5bcda",
      "range": {
        "startLine": 310,
        "startChar": 1,
        "endLine": 313,
        "endChar": 63
      },
      "revId": "0bfa768337b1f27517fbc26a608864686ada126b",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    }
  ]
}