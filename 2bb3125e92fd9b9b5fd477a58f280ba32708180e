{
  "comments": [
    {
      "key": {
        "uuid": "d14f92ca_bb079d7d",
        "filename": "modules/rtp_rtcp/source/rtp_sender_video.cc",
        "patchSetId": 3
      },
      "lineNbr": 283,
      "author": {
        "id": 5019
      },
      "writtenOn": "2020-02-27T12:20:29Z",
      "side": 1,
      "message": "this uses an assumption RTPSenderVideo created on the same TaskQueue where SendVideo is called.\nlooking at the RTPSenderVideo::send_checker_ I\u0027m not sure it can be relied on:\nsend_checker_ is RaceChecker, which validates only very weak synchronization (caller can use any synchronization, e.g. lock. It doesn\u0027t have to use the same task queue).\n\nIt might good idea first to try replace RaceChecker with a stricter SequenceChecker (rtc_base/syncrhonization/sequence_checker.h)\nand see if it still works.\n\nIf it does, good. Then may capture current task queue, but still it might be better to create delegate_ on first use rather in constructor: constructor doesn\u0027t use send_checker_ and thus not guaranteed to use same TaskQueue as SendVideo.\nOr add send_checker to the constructor too if you are sure how it is used.",
      "range": {
        "startLine": 283,
        "startChar": 14,
        "endLine": 283,
        "endChar": 38
      },
      "revId": "2bb3125e92fd9b9b5fd477a58f280ba32708180e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d72a62f0_a12f5cf8",
        "filename": "modules/rtp_rtcp/source/rtp_sender_video.cc",
        "patchSetId": 3
      },
      "lineNbr": 283,
      "author": {
        "id": 8594
      },
      "writtenOn": "2020-02-28T09:52:10Z",
      "side": 1,
      "message": "You\u0027re right, the sender is not created on the encoder queue. I changed the delegate to get the queue on first transformed frame, now it should be correct. I also moved the frame transformer into the delegate to keep the sender cleaner and to have the delegate create the TransformableEncodedFrame, as it\u0027s the delegate doing the downcast in OnTransformedFrame.\n(Note I haven\u0027t renamed the delegate file yet to match the new class name because gerrit doesn\u0027t handle file renames very well, I\u0027ll rename it when we\u0027re done with the review.)\n\nI tried replacing the RaceChecker with a SequenceChecker on top of master (without my changes) but it crashes in SetVideoStructure, which apparently is called from some other sequence. I\u0027ll see if I figure out how to fix this, alternatively we can do this change in another CL if it turns out to be too convoluted.",
      "parentUuid": "d14f92ca_bb079d7d",
      "range": {
        "startLine": 283,
        "startChar": 14,
        "endLine": 283,
        "endChar": 38
      },
      "revId": "2bb3125e92fd9b9b5fd477a58f280ba32708180e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7c36b2a5_4ab4b6f6",
        "filename": "modules/rtp_rtcp/source/rtp_sender_video.cc",
        "patchSetId": 3
      },
      "lineNbr": 283,
      "author": {
        "id": 5019
      },
      "writtenOn": "2020-02-28T12:52:08Z",
      "side": 1,
      "message": "SetVideoStructure is called for a key frame just before call to SendVideo.\n\nfact that it crash when you replace RaceChecker with a SequenceChecker means that SendVideo is called on different sequences. That mean posting SendTask to the encoder_queue_ is not enough, it introduces a potential race.\n\nReading RtpVideoSender::OnEncodedImage I see that access to the SendVideo is actually protected by a critical section, not by a sequence.\n\n(I\u0027m not sure why different sequences are used. Might be related how encoders callback with a frame, might be test specific thing, may be something else).\n\nOne solution can be to wire SetVideoStructure (sure only when transform is used) through the new (in rtp_rtcp) RTPSenderVideoDelegate where calls to SendVideo are protected with a critical section. That might be the smallest change.\n\nAlternative solution might be to change (in call) RtpVideoSender to serialize calls to rtp_sender_video to some task queue. That might be better long-term, but that change is likely far from trivial.",
      "parentUuid": "d72a62f0_a12f5cf8",
      "range": {
        "startLine": 283,
        "startChar": 14,
        "endLine": 283,
        "endChar": 38
      },
      "revId": "2bb3125e92fd9b9b5fd477a58f280ba32708180e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e08f0f81_55c99991",
        "filename": "modules/rtp_rtcp/source/rtp_sender_video.cc",
        "patchSetId": 3
      },
      "lineNbr": 283,
      "author": {
        "id": 8594
      },
      "writtenOn": "2020-02-28T14:26:57Z",
      "side": 1,
      "message": "I realized that SequenceChecker doesn\u0027t work because the encoder_queue is a pool of threads, and OnEncodedImage gets called on any of the threads in the pool, so SendVideo and SetVideoStruct are not called on the same sequence; but because SendVideo was synchronous, it would finish before calling SetVideoStruct.\n\nI think synchronizing access to SetVideoStruct in the delegate makes sense, implemented it.",
      "parentUuid": "7c36b2a5_4ab4b6f6",
      "range": {
        "startLine": 283,
        "startChar": 14,
        "endLine": 283,
        "endChar": 38
      },
      "revId": "2bb3125e92fd9b9b5fd477a58f280ba32708180e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "072da520_c1214c32",
        "filename": "modules/rtp_rtcp/source/rtp_sender_video.cc",
        "patchSetId": 3
      },
      "lineNbr": 493,
      "author": {
        "id": 5019
      },
      "writtenOn": "2020-02-27T12:20:29Z",
      "side": 1,
      "message": "if you shifted #if, shift the #endif too (or undo #if shifting as unrelated)",
      "range": {
        "startLine": 493,
        "startChar": 0,
        "endLine": 493,
        "endChar": 8
      },
      "revId": "2bb3125e92fd9b9b5fd477a58f280ba32708180e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "389ce24b_fda59638",
        "filename": "modules/rtp_rtcp/source/rtp_sender_video.cc",
        "patchSetId": 3
      },
      "lineNbr": 493,
      "author": {
        "id": 8594
      },
      "writtenOn": "2020-02-28T09:52:10Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "072da520_c1214c32",
      "range": {
        "startLine": 493,
        "startChar": 0,
        "endLine": 493,
        "endChar": 8
      },
      "revId": "2bb3125e92fd9b9b5fd477a58f280ba32708180e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8002e9fd_206a6b9f",
        "filename": "modules/rtp_rtcp/source/rtp_sender_video.cc",
        "patchSetId": 3
      },
      "lineNbr": 803,
      "author": {
        "id": 5019
      },
      "writtenOn": "2020-02-28T12:52:08Z",
      "side": 1,
      "message": "I\u0027m a bit worried RTPVideoHeader is now copied several times.\n(where before, thanks to RVO, copy was avoided).\nsince this structure is huge may be it would be good idea to pass it by unique_ptr.\nLet me look into that.",
      "range": {
        "startLine": 803,
        "startChar": 4,
        "endLine": 803,
        "endChar": 31
      },
      "revId": "2bb3125e92fd9b9b5fd477a58f280ba32708180e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "65e9ce77_678c2894",
        "filename": "modules/rtp_rtcp/source/rtp_sender_video_delegate.cc",
        "patchSetId": 3
      },
      "lineNbr": 24,
      "author": {
        "id": 5019
      },
      "writtenOn": "2020-02-27T12:20:29Z",
      "side": 1,
      "message": "may be set in the intializer list too",
      "range": {
        "startLine": 24,
        "startChar": 2,
        "endLine": 24,
        "endChar": 19
      },
      "revId": "2bb3125e92fd9b9b5fd477a58f280ba32708180e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7249b4d3_497c3818",
        "filename": "modules/rtp_rtcp/source/rtp_sender_video_delegate.cc",
        "patchSetId": 3
      },
      "lineNbr": 24,
      "author": {
        "id": 8594
      },
      "writtenOn": "2020-02-28T09:52:10Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "65e9ce77_678c2894",
      "range": {
        "startLine": 24,
        "startChar": 2,
        "endLine": 24,
        "endChar": 19
      },
      "revId": "2bb3125e92fd9b9b5fd477a58f280ba32708180e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c2a43696_aa4ced67",
        "filename": "modules/rtp_rtcp/source/rtp_sender_video_delegate.cc",
        "patchSetId": 3
      },
      "lineNbr": 34,
      "author": {
        "id": 5019
      },
      "writtenOn": "2020-02-27T12:20:29Z",
      "side": 1,
      "message": "may be absl::WrapUnique(static_cast\u003cT...\u003e(frame.release());\n\nto stress something suspicious is going here.",
      "range": {
        "startLine": 34,
        "startChar": 22,
        "endLine": 34,
        "endChar": 64
      },
      "revId": "2bb3125e92fd9b9b5fd477a58f280ba32708180e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "27c3703a_9c6bce9f",
        "filename": "modules/rtp_rtcp/source/rtp_sender_video_delegate.cc",
        "patchSetId": 3
      },
      "lineNbr": 34,
      "author": {
        "id": 8594
      },
      "writtenOn": "2020-02-28T09:52:10Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c2a43696_aa4ced67",
      "range": {
        "startLine": 34,
        "startChar": 22,
        "endLine": 34,
        "endChar": 64
      },
      "revId": "2bb3125e92fd9b9b5fd477a58f280ba32708180e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "14956b2a_450a1f14",
        "filename": "modules/rtp_rtcp/source/rtp_sender_video_delegate.cc",
        "patchSetId": 3
      },
      "lineNbr": 35,
      "author": {
        "id": 5019
      },
      "writtenOn": "2020-02-27T12:20:29Z",
      "side": 1,
      "message": "why this upcast is safe?\nDoes transform frame interface guarantee to pass exactly the same object back?",
      "range": {
        "startLine": 34,
        "startChar": 2,
        "endLine": 35,
        "endChar": 64
      },
      "revId": "2bb3125e92fd9b9b5fd477a58f280ba32708180e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "79efed92_eb2dcdbb",
        "filename": "modules/rtp_rtcp/source/rtp_sender_video_delegate.cc",
        "patchSetId": 3
      },
      "lineNbr": 35,
      "author": {
        "id": 8594
      },
      "writtenOn": "2020-02-28T09:52:10Z",
      "side": 1,
      "message": "Now that I moved the creation of TransformableEncodedFrame passed in TransformFrame into the delegate it should be more obvious that the upcast is safe. The interface does not enforce passing the exact same object at the moment, I added a comment in the interface to make it part of its contract. I\u0027ll think of ways to enforce this programmatically in next iteration, I might need to split FrameTranformerInterface in different interfaces for the sender and receiver.",
      "parentUuid": "14956b2a_450a1f14",
      "range": {
        "startLine": 34,
        "startChar": 2,
        "endLine": 35,
        "endChar": 64
      },
      "revId": "2bb3125e92fd9b9b5fd477a58f280ba32708180e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3078b019_530bd80b",
        "filename": "modules/rtp_rtcp/source/rtp_sender_video_delegate.cc",
        "patchSetId": 3
      },
      "lineNbr": 35,
      "author": {
        "id": 8594
      },
      "writtenOn": "2020-02-28T14:26:57Z",
      "side": 1,
      "message": "Moving the api/ comment to a separate CL",
      "parentUuid": "79efed92_eb2dcdbb",
      "range": {
        "startLine": 34,
        "startChar": 2,
        "endLine": 35,
        "endChar": 64
      },
      "revId": "2bb3125e92fd9b9b5fd477a58f280ba32708180e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "195a19d1_4b571b21",
        "filename": "modules/rtp_rtcp/source/rtp_sender_video_delegate.cc",
        "patchSetId": 3
      },
      "lineNbr": 39,
      "author": {
        "id": 5019
      },
      "writtenOn": "2020-02-27T12:20:29Z",
      "side": 1,
      "message": "frame_object \u003d std::move(frame_object) or\ntransformed_frame \u003d std::move(transformed_frame)\n\nhttps://google.github.io/styleguide/cppguide.html#Lambda_expressions\n\"Do not use captures with initializers to introduce new names\"",
      "range": {
        "startLine": 39,
        "startChar": 20,
        "endLine": 39,
        "endChar": 63
      },
      "revId": "2bb3125e92fd9b9b5fd477a58f280ba32708180e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "281d0a02_81df7c1e",
        "filename": "modules/rtp_rtcp/source/rtp_sender_video_delegate.cc",
        "patchSetId": 3
      },
      "lineNbr": 39,
      "author": {
        "id": 8594
      },
      "writtenOn": "2020-02-28T09:52:10Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "195a19d1_4b571b21",
      "range": {
        "startLine": 39,
        "startChar": 20,
        "endLine": 39,
        "endChar": 63
      },
      "revId": "2bb3125e92fd9b9b5fd477a58f280ba32708180e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5674f247_fbc7a98f",
        "filename": "modules/rtp_rtcp/source/rtp_sender_video_delegate.cc",
        "patchSetId": 3
      },
      "lineNbr": 45,
      "author": {
        "id": 5019
      },
      "writtenOn": "2020-02-27T12:20:29Z",
      "side": 1,
      "message": "why pass by pointer rather by const\u0026\nor did you plan to move some members?",
      "range": {
        "startLine": 45,
        "startChar": 4,
        "endLine": 45,
        "endChar": 31
      },
      "revId": "2bb3125e92fd9b9b5fd477a58f280ba32708180e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d50bf020_6ccaa2c8",
        "filename": "modules/rtp_rtcp/source/rtp_sender_video_delegate.cc",
        "patchSetId": 3
      },
      "lineNbr": 45,
      "author": {
        "id": 8594
      },
      "writtenOn": "2020-02-28T09:52:10Z",
      "side": 1,
      "message": "No you\u0027re right, it can be const\u0026.",
      "parentUuid": "5674f247_fbc7a98f",
      "range": {
        "startLine": 45,
        "startChar": 4,
        "endLine": 45,
        "endChar": 31
      },
      "revId": "2bb3125e92fd9b9b5fd477a58f280ba32708180e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2328b2ed_f50907a0",
        "filename": "modules/rtp_rtcp/source/rtp_sender_video_delegate.cc",
        "patchSetId": 3
      },
      "lineNbr": 47,
      "author": {
        "id": 5019
      },
      "writtenOn": "2020-02-27T12:20:29Z",
      "side": 1,
      "message": "if all calls to the SendVideo are protected with this lock, then it might be possible to avoid hop back to the encoder_queue_\n(just make sure SetVideoStructure also goes through this delegate when frame transformation is used)\n\nOn the other side you still might want to keep the hop if OnTransformedFrame callback should be fast.",
      "range": {
        "startLine": 47,
        "startChar": 0,
        "endLine": 47,
        "endChar": 37
      },
      "revId": "2bb3125e92fd9b9b5fd477a58f280ba32708180e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "17b66099_b2a90e7c",
        "filename": "modules/rtp_rtcp/source/rtp_sender_video_delegate.cc",
        "patchSetId": 3
      },
      "lineNbr": 47,
      "author": {
        "id": 8594
      },
      "writtenOn": "2020-02-28T09:52:10Z",
      "side": 1,
      "message": "It would be good to hop to the encoder_queue_ because the OnTransformedFrame callback come on Chrome main thread and don\u0027t want to keep it busy with sending the frame.",
      "parentUuid": "2328b2ed_f50907a0",
      "range": {
        "startLine": 47,
        "startChar": 0,
        "endLine": 47,
        "endChar": 37
      },
      "revId": "2bb3125e92fd9b9b5fd477a58f280ba32708180e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "55595f7d_cf20ed15",
        "filename": "modules/rtp_rtcp/source/rtp_sender_video_delegate.h",
        "patchSetId": 3
      },
      "lineNbr": 17,
      "author": {
        "id": 5019
      },
      "writtenOn": "2020-02-27T12:20:29Z",
      "side": 1,
      "message": "not used",
      "range": {
        "startLine": 17,
        "startChar": 0,
        "endLine": 17,
        "endChar": 30
      },
      "revId": "2bb3125e92fd9b9b5fd477a58f280ba32708180e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b612c469_1503dffb",
        "filename": "modules/rtp_rtcp/source/rtp_sender_video_delegate.h",
        "patchSetId": 3
      },
      "lineNbr": 17,
      "author": {
        "id": 8594
      },
      "writtenOn": "2020-02-28T09:52:10Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "55595f7d_cf20ed15",
      "range": {
        "startLine": 17,
        "startChar": 0,
        "endLine": 17,
        "endChar": 30
      },
      "revId": "2bb3125e92fd9b9b5fd477a58f280ba32708180e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ebf0050a_0f5a7fa5",
        "filename": "modules/rtp_rtcp/source/rtp_sender_video_delegate.h",
        "patchSetId": 3
      },
      "lineNbr": 21,
      "author": {
        "id": 5019
      },
      "writtenOn": "2020-02-27T12:20:29Z",
      "side": 1,
      "message": "avoid forward declaration",
      "range": {
        "startLine": 21,
        "startChar": 0,
        "endLine": 21,
        "endChar": 32
      },
      "revId": "2bb3125e92fd9b9b5fd477a58f280ba32708180e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "33ac0e8d_69e79f1d",
        "filename": "modules/rtp_rtcp/source/rtp_sender_video_delegate.h",
        "patchSetId": 3
      },
      "lineNbr": 21,
      "author": {
        "id": 8594
      },
      "writtenOn": "2020-02-28T09:52:10Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ebf0050a_0f5a7fa5",
      "range": {
        "startLine": 21,
        "startChar": 0,
        "endLine": 21,
        "endChar": 32
      },
      "revId": "2bb3125e92fd9b9b5fd477a58f280ba32708180e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c7b232aa_a041059b",
        "filename": "modules/rtp_rtcp/source/rtp_sender_video_delegate.h",
        "patchSetId": 3
      },
      "lineNbr": 22,
      "author": {
        "id": 5019
      },
      "writtenOn": "2020-02-27T12:20:29Z",
      "side": 1,
      "message": "This is one is hard to avoid, keep it.\nthis one has obvious close relation with the RTPSenderVideoDelegate.",
      "range": {
        "startLine": 22,
        "startChar": 0,
        "endLine": 22,
        "endChar": 21
      },
      "revId": "2bb3125e92fd9b9b5fd477a58f280ba32708180e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3a83237b_467106ad",
        "filename": "modules/rtp_rtcp/source/rtp_sender_video_delegate.h",
        "patchSetId": 3
      },
      "lineNbr": 22,
      "author": {
        "id": 8594
      },
      "writtenOn": "2020-02-28T09:52:10Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "c7b232aa_a041059b",
      "range": {
        "startLine": 22,
        "startChar": 0,
        "endLine": 22,
        "endChar": 21
      },
      "revId": "2bb3125e92fd9b9b5fd477a58f280ba32708180e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "09e86eae_25bfe4c5",
        "filename": "modules/rtp_rtcp/source/transformable_encoded_frame.cc",
        "patchSetId": 3
      },
      "lineNbr": 17,
      "author": {
        "id": 5019
      },
      "writtenOn": "2020-02-27T12:20:29Z",
      "side": 1,
      "message": "this type is huge (~1800 bytes). prefer to pass it by const\u0026",
      "range": {
        "startLine": 17,
        "startChar": 4,
        "endLine": 17,
        "endChar": 18
      },
      "revId": "2bb3125e92fd9b9b5fd477a58f280ba32708180e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "63188232_cfa73c95",
        "filename": "modules/rtp_rtcp/source/transformable_encoded_frame.cc",
        "patchSetId": 3
      },
      "lineNbr": 17,
      "author": {
        "id": 8594
      },
      "writtenOn": "2020-02-28T09:52:10Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "09e86eae_25bfe4c5",
      "range": {
        "startLine": 17,
        "startChar": 4,
        "endLine": 17,
        "endChar": 18
      },
      "revId": "2bb3125e92fd9b9b5fd477a58f280ba32708180e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5d57abf2_00937c9e",
        "filename": "modules/rtp_rtcp/source/transformable_encoded_frame.cc",
        "patchSetId": 3
      },
      "lineNbr": 32,
      "author": {
        "id": 5019
      },
      "writtenOn": "2020-02-27T12:20:29Z",
      "side": 1,
      "message": "where is it created?",
      "range": {
        "startLine": 32,
        "startChar": 4,
        "endLine": 32,
        "endChar": 25
      },
      "revId": "2bb3125e92fd9b9b5fd477a58f280ba32708180e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "071a1f37_1d2d1f36",
        "filename": "modules/rtp_rtcp/source/transformable_encoded_frame.cc",
        "patchSetId": 3
      },
      "lineNbr": 32,
      "author": {
        "id": 8594
      },
      "writtenOn": "2020-02-28T09:52:10Z",
      "side": 1,
      "message": "This is created in the encoder (in some encoders, VP9 for ex[1]), and passed as a raw pointer to to RtpVideoSender::OnEncodedImange -\u003e RTPSendVideo::SendEncodedImage. It goes out of scope when SendEncodedImage execution is done, so I\u0027m making a copy of it here to use it when we get the frame back in OnTransformedFrame.\n\n[1] https://source.chromium.org/chromium/chromium/src/+/master:third_party/webrtc/modules/video_coding/codecs/vp9/vp9_impl.cc;drc\u003d7e3843b722bda29c236e9cb49111f3296dc2ce20;l\u003d1510?originalUrl\u003dhttps:%2F%2Fcs.chromium.org%2F",
      "parentUuid": "5d57abf2_00937c9e",
      "range": {
        "startLine": 32,
        "startChar": 4,
        "endLine": 32,
        "endChar": 25
      },
      "revId": "2bb3125e92fd9b9b5fd477a58f280ba32708180e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "de1256f5_ddb26848",
        "filename": "modules/rtp_rtcp/source/transformable_encoded_frame.cc",
        "patchSetId": 3
      },
      "lineNbr": 32,
      "author": {
        "id": 5019
      },
      "writtenOn": "2020-02-28T12:52:08Z",
      "side": 1,
      "message": "I mean where fragmentation_header_ member is constructed? (can\u0027t find that, which mean you are calling CopyFrom on a null object when fragmentation is used).",
      "parentUuid": "071a1f37_1d2d1f36",
      "range": {
        "startLine": 32,
        "startChar": 4,
        "endLine": 32,
        "endChar": 25
      },
      "revId": "2bb3125e92fd9b9b5fd477a58f280ba32708180e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fad990c6_c1b2487d",
        "filename": "modules/rtp_rtcp/source/transformable_encoded_frame.cc",
        "patchSetId": 3
      },
      "lineNbr": 32,
      "author": {
        "id": 8594
      },
      "writtenOn": "2020-02-28T14:26:57Z",
      "side": 1,
      "message": "Aah sorry I misread that. Good point, I fixed it now.",
      "parentUuid": "de1256f5_ddb26848",
      "range": {
        "startLine": 32,
        "startChar": 4,
        "endLine": 32,
        "endChar": 25
      },
      "revId": "2bb3125e92fd9b9b5fd477a58f280ba32708180e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "794aca7c_a7254939",
        "filename": "modules/rtp_rtcp/source/transformable_encoded_frame.cc",
        "patchSetId": 3
      },
      "lineNbr": 35,
      "author": {
        "id": 5019
      },
      "writtenOn": "2020-02-27T12:20:29Z",
      "side": 1,
      "message": "nit: \"Prefer \u003ddefault\"\n\nhttps://abseil.io/tips/131#recommendations",
      "range": {
        "startLine": 35,
        "startChar": 56,
        "endLine": 35,
        "endChar": 58
      },
      "revId": "2bb3125e92fd9b9b5fd477a58f280ba32708180e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "73d71af0_3614bb03",
        "filename": "modules/rtp_rtcp/source/transformable_encoded_frame.cc",
        "patchSetId": 3
      },
      "lineNbr": 35,
      "author": {
        "id": 8594
      },
      "writtenOn": "2020-02-28T09:52:10Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "794aca7c_a7254939",
      "range": {
        "startLine": 35,
        "startChar": 56,
        "endLine": 35,
        "endChar": 58
      },
      "revId": "2bb3125e92fd9b9b5fd477a58f280ba32708180e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8a1747d6_0826a67c",
        "filename": "modules/rtp_rtcp/source/transformable_encoded_frame.h",
        "patchSetId": 3
      },
      "lineNbr": 35,
      "author": {
        "id": 5019
      },
      "writtenOn": "2020-02-27T12:20:29Z",
      "side": 1,
      "message": "nit: may be have an empty line between destructor and accessors [instead of empty line between constructor and destructor]",
      "range": {
        "startLine": 34,
        "startChar": 0,
        "endLine": 35,
        "endChar": 40
      },
      "revId": "2bb3125e92fd9b9b5fd477a58f280ba32708180e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "741c74a6_f6816008",
        "filename": "modules/rtp_rtcp/source/transformable_encoded_frame.h",
        "patchSetId": 3
      },
      "lineNbr": 35,
      "author": {
        "id": 8594
      },
      "writtenOn": "2020-02-28T09:52:10Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "8a1747d6_0826a67c",
      "range": {
        "startLine": 34,
        "startChar": 0,
        "endLine": 35,
        "endChar": 40
      },
      "revId": "2bb3125e92fd9b9b5fd477a58f280ba32708180e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fba91b76_b5e6621c",
        "filename": "modules/rtp_rtcp/source/transformable_encoded_frame.h",
        "patchSetId": 3
      },
      "lineNbr": 36,
      "author": {
        "id": 5019
      },
      "writtenOn": "2020-02-27T12:20:29Z",
      "side": 1,
      "message": "prefer to return const reference to the RTPVideoHeader (and mark the accessor const)",
      "range": {
        "startLine": 36,
        "startChar": 2,
        "endLine": 36,
        "endChar": 16
      },
      "revId": "2bb3125e92fd9b9b5fd477a58f280ba32708180e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "079de9ae_16ad0147",
        "filename": "modules/rtp_rtcp/source/transformable_encoded_frame.h",
        "patchSetId": 3
      },
      "lineNbr": 36,
      "author": {
        "id": 8594
      },
      "writtenOn": "2020-02-28T09:52:10Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "fba91b76_b5e6621c",
      "range": {
        "startLine": 36,
        "startChar": 2,
        "endLine": 36,
        "endChar": 16
      },
      "revId": "2bb3125e92fd9b9b5fd477a58f280ba32708180e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f387b772_0e358ccc",
        "filename": "modules/rtp_rtcp/source/transformable_encoded_frame.h",
        "patchSetId": 3
      },
      "lineNbr": 37,
      "author": {
        "id": 5019
      },
      "writtenOn": "2020-02-27T12:20:29Z",
      "side": 1,
      "message": "this type small enough, so feel free to return it by value.\n(same for the expected_retransmission_time)",
      "range": {
        "startLine": 37,
        "startChar": 2,
        "endLine": 37,
        "endChar": 39
      },
      "revId": "2bb3125e92fd9b9b5fd477a58f280ba32708180e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8fc3f3bf_9f11f23f",
        "filename": "modules/rtp_rtcp/source/transformable_encoded_frame.h",
        "patchSetId": 3
      },
      "lineNbr": 37,
      "author": {
        "id": 8594
      },
      "writtenOn": "2020-02-28T09:52:10Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f387b772_0e358ccc",
      "range": {
        "startLine": 37,
        "startChar": 2,
        "endLine": 37,
        "endChar": 39
      },
      "revId": "2bb3125e92fd9b9b5fd477a58f280ba32708180e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a6d3b0b1_19c63f6b",
        "filename": "modules/rtp_rtcp/source/transformable_encoded_frame.h",
        "patchSetId": 3
      },
      "lineNbr": 40,
      "author": {
        "id": 5019
      },
      "writtenOn": "2020-02-27T12:20:29Z",
      "side": 1,
      "message": "feel free to inline the accessors.",
      "range": {
        "startLine": 36,
        "startChar": 1,
        "endLine": 40,
        "endChar": 73
      },
      "revId": "2bb3125e92fd9b9b5fd477a58f280ba32708180e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4eb36dbd_146b8101",
        "filename": "modules/rtp_rtcp/source/transformable_encoded_frame.h",
        "patchSetId": 3
      },
      "lineNbr": 40,
      "author": {
        "id": 8594
      },
      "writtenOn": "2020-02-28T09:52:10Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a6d3b0b1_19c63f6b",
      "range": {
        "startLine": 36,
        "startChar": 1,
        "endLine": 40,
        "endChar": 73
      },
      "revId": "2bb3125e92fd9b9b5fd477a58f280ba32708180e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    }
  ]
}