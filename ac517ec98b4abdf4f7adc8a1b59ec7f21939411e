{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "75aa65f7_0ea6b2a5",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 18
      },
      "lineNbr": 0,
      "author": {
        "id": 5634
      },
      "writtenOn": "2023-03-16T10:25:03Z",
      "side": 1,
      "message": "Sorry, wrong check.\nYou have to check controller-\u003edata_channel_transport() in order to figure out if transport is connected or not. Prenegotiated channels will have their ID set at creation time, even though the transport doesn\u0027t exist yet.\n\nTHis probably indicates stronly that we don\u0027t hav eadequate testing of the prenegotiated case at this level!",
      "revId": "ac517ec98b4abdf4f7adc8a1b59ec7f21939411e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "03783c44_b8fbacb2",
        "filename": "pc/data_channel_unittest.cc",
        "patchSetId": 18
      },
      "lineNbr": 76,
      "author": {
        "id": 5634
      },
      "writtenOn": "2023-03-16T10:25:03Z",
      "side": 1,
      "message": "Please delete this comment - I disagree with it.\nIntegration tests are integration tests, which test both the controller and the datachannel; these are unit tests.",
      "revId": "ac517ec98b4abdf4f7adc8a1b59ec7f21939411e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d2e6a275_d190ddce",
        "filename": "pc/data_channel_unittest.cc",
        "patchSetId": 18
      },
      "lineNbr": 76,
      "author": {
        "id": 5508
      },
      "writtenOn": "2023-03-18T13:54:40Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "03783c44_b8fbacb2",
      "revId": "ac517ec98b4abdf4f7adc8a1b59ec7f21939411e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8fec98bf_2f45fdf1",
        "filename": "pc/sctp_data_channel.cc",
        "patchSetId": 18
      },
      "lineNbr": 209,
      "author": {
        "id": 5634
      },
      "writtenOn": "2023-03-16T10:25:03Z",
      "side": 1,
      "message": "This test is wrong for prenegotiated channel IDs - they will have an ID value assigned when created.",
      "revId": "ac517ec98b4abdf4f7adc8a1b59ec7f21939411e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0a4eaa25_7fe75b45",
        "filename": "pc/sctp_data_channel.cc",
        "patchSetId": 18
      },
      "lineNbr": 209,
      "author": {
        "id": 5508
      },
      "writtenOn": "2023-03-18T13:54:40Z",
      "side": 1,
      "message": "Done - to make this explicit in the ctor case, I added a bool to the internal init struct that indicates whether or not we have a transport.",
      "parentUuid": "8fec98bf_2f45fdf1",
      "revId": "ac517ec98b4abdf4f7adc8a1b59ec7f21939411e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "53ba28e4_977be64c",
        "filename": "pc/sctp_data_channel.cc",
        "patchSetId": 18
      },
      "lineNbr": 371,
      "author": {
        "id": 5634
      },
      "writtenOn": "2023-03-16T10:25:03Z",
      "side": 1,
      "message": "Wrong for prenegotiated.",
      "revId": "ac517ec98b4abdf4f7adc8a1b59ec7f21939411e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c54db1ed_d9f75c57",
        "filename": "pc/sctp_data_channel.cc",
        "patchSetId": 18
      },
      "lineNbr": 371,
      "author": {
        "id": 5508
      },
      "writtenOn": "2023-03-18T13:54:40Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "53ba28e4_977be64c",
      "revId": "ac517ec98b4abdf4f7adc8a1b59ec7f21939411e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d8c2fb7b_3c3eed7f",
        "filename": "pc/sctp_data_channel.cc",
        "patchSetId": 18
      },
      "lineNbr": 556,
      "author": {
        "id": 5634
      },
      "writtenOn": "2023-03-20T05:10:02Z",
      "side": 1,
      "message": "Don\u0027t delete this DCHECK. It guards against the misconfiguration when someone preconfigures the channel ID and somehow still manages to enter kConnecting state.",
      "revId": "ac517ec98b4abdf4f7adc8a1b59ec7f21939411e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2ab655cc_8edc32f6",
        "filename": "pc/sctp_data_channel.cc",
        "patchSetId": 18
      },
      "lineNbr": 556,
      "author": {
        "id": 5508
      },
      "writtenOn": "2023-03-20T09:21:07Z",
      "side": 1,
      "message": "hmm... I removed it because `kConnecting` is the first state. When the channel id is preconfigured, the state will always be `kConnecting`. I can re-introduce it but do you think that logic does not make sense?",
      "parentUuid": "d8c2fb7b_3c3eed7f",
      "revId": "ac517ec98b4abdf4f7adc8a1b59ec7f21939411e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6751716c_34bf24dd",
        "filename": "pc/sctp_data_channel.cc",
        "patchSetId": 18
      },
      "lineNbr": 556,
      "author": {
        "id": 5634
      },
      "writtenOn": "2023-03-20T10:07:00Z",
      "side": 1,
      "message": "That logic depends on multiple assumptions that are very far apart in the code (that initial state is kConnecting, and that handshake state will jump straight to kHandshakeReady in cosntructor if the role is kNone, which is from base.negotiated in InternalDataChannelInit constructor - if anyone modifies any of these places,it is good to have a DCHECK that breaks if they did not connect all the dots.\n\nFrankly, I don\u0027t understand why this does not fail for any reasonable use case - if we have a prenegotiated channel and call UpdateState before we\u0027re connected to transport, it SHOULD fail.\n\nBut perhaps connecting to transport is the first event that causes UpdateState() to be called.",
      "parentUuid": "2ab655cc_8edc32f6",
      "revId": "ac517ec98b4abdf4f7adc8a1b59ec7f21939411e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1999af46_1702f681",
        "filename": "pc/sctp_data_channel.h",
        "patchSetId": 18
      },
      "lineNbr": 40,
      "author": {
        "id": 5634
      },
      "writtenOn": "2023-03-16T10:25:03Z",
      "side": 1,
      "message": "Disagree with this TODO too.",
      "revId": "ac517ec98b4abdf4f7adc8a1b59ec7f21939411e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c6eb6fe1_970590f8",
        "filename": "pc/sctp_data_channel.h",
        "patchSetId": 18
      },
      "lineNbr": 40,
      "author": {
        "id": 5508
      },
      "writtenOn": "2023-03-18T13:54:40Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1999af46_1702f681",
      "revId": "ac517ec98b4abdf4f7adc8a1b59ec7f21939411e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    }
  ]
}