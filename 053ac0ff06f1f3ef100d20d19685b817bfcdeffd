{
  "comments": [
    {
      "key": {
        "uuid": "0616e25b_f618e8a0",
        "filename": "call/call_perf_tests.cc",
        "patchSetId": 7
      },
      "lineNbr": 839,
      "author": {
        "id": 5234
      },
      "writtenOn": "2017-11-16T08:48:55Z",
      "side": 1,
      "message": "I think the code could be simplified slightly by leaving allocation_strategy_ as nullptr when use_bitrate_allocation is false, and delete the use_bitrate_allocation_ member variable.",
      "range": {
        "startLine": 836,
        "startChar": 0,
        "endLine": 839,
        "endChar": 76
      },
      "revId": "053ac0ff06f1f3ef100d20d19685b817bfcdeffd",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d187deea_6fdcbcd2",
        "filename": "call/call_perf_tests.cc",
        "patchSetId": 7
      },
      "lineNbr": 839,
      "author": {
        "id": 5619
      },
      "writtenOn": "2017-11-16T15:10:29Z",
      "side": 1,
      "message": "I\u0027d prefer to keep use_bitrate_allocation_strategy, I think it is easier to read and more straight forward in places like below:\n     if (use_bitrate_allocation_strategy_) {\n        send_config-\u003etrack_id \u003d kAudioTrackId;\n        send_config-\u003emin_bitrate_bps \u003d kOpusMinBitrateBps;\n        send_config-\u003emax_bitrate_bps \u003d kOpusBitrateFbBps;\n      } else {\n        send_config-\u003esend_codec_spec-\u003etarget_bitrate_bps \u003d\n            rtc::Optional\u003cint\u003e(kOpusBitrateFbBps);\n      }",
      "parentUuid": "0616e25b_f618e8a0",
      "range": {
        "startLine": 836,
        "startChar": 0,
        "endLine": 839,
        "endChar": 76
      },
      "revId": "053ac0ff06f1f3ef100d20d19685b817bfcdeffd",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7fcea70f_84ed4369",
        "filename": "call/call_perf_tests.cc",
        "patchSetId": 7
      },
      "lineNbr": 839,
      "author": {
        "id": 5234
      },
      "writtenOn": "2017-11-22T09:47:43Z",
      "side": 1,
      "message": "I disagree, I don\u0027t think that is clearer than just \n\n  if (allocation_strategy_) { ... }\n\nor\n\n  if (allocation_strategy_ !\u003d nullptr) { ... }\n\nHaving two separate variables and an invariant \"use_bitrate_allocation_strategy_ \u003d\u003d true if and only if allocation_strategy_ !\u003d nullptr\" makes the code slightly harder to reason about.\n\nBut if you really want a separate bool, I won\u0027t insist on this point.",
      "parentUuid": "d187deea_6fdcbcd2",
      "range": {
        "startLine": 836,
        "startChar": 0,
        "endLine": 839,
        "endChar": 76
      },
      "revId": "053ac0ff06f1f3ef100d20d19685b817bfcdeffd",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4ca84daa_d2ec07a0",
        "filename": "call/call_perf_tests.cc",
        "patchSetId": 7
      },
      "lineNbr": 937,
      "author": {
        "id": 5234
      },
      "writtenOn": "2017-11-16T08:48:55Z",
      "side": 1,
      "message": "This could be const std::unique_ptr. And similarly for other members which are set at construction and not modified.\n\nFor pointers, note the difference between\n\nconst Foo* foo_;  // Points a a const object, ptr itself isn\u0027t const.\nFoo* const foo_;  // Points to a non-const object, ptr itself is const.\n                  // Similar to a const std::unique_ptr\u003cFoo\u003e foo_;\nconst Foo* const foo_;  // Both pointer and object pointed to are const.",
      "range": {
        "startLine": 937,
        "startChar": 9,
        "endLine": 937,
        "endChar": 19
      },
      "revId": "053ac0ff06f1f3ef100d20d19685b817bfcdeffd",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9275157f_b366235e",
        "filename": "call/call_perf_tests.cc",
        "patchSetId": 7
      },
      "lineNbr": 937,
      "author": {
        "id": 5619
      },
      "writtenOn": "2017-11-16T15:10:29Z",
      "side": 1,
      "message": "const std::unique_ptr is not possible because it does not allow ownership transfer but other members changed.",
      "parentUuid": "4ca84daa_d2ec07a0",
      "range": {
        "startLine": 937,
        "startChar": 9,
        "endLine": 937,
        "endChar": 19
      },
      "revId": "053ac0ff06f1f3ef100d20d19685b817bfcdeffd",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "de803eb8_9e784be3",
        "filename": "call/call_perf_tests.cc",
        "patchSetId": 7
      },
      "lineNbr": 937,
      "author": {
        "id": 5234
      },
      "writtenOn": "2017-11-22T09:47:43Z",
      "side": 1,
      "message": "If it\u0027s assigned only in an initializer expression as part of construction, like on line 836 above, const should work fine. Do you assign (or reset) the unique_ptr anywhere else? What errors do you get if you add const?",
      "parentUuid": "9275157f_b366235e",
      "range": {
        "startLine": 937,
        "startChar": 9,
        "endLine": 937,
        "endChar": 19
      },
      "revId": "053ac0ff06f1f3ef100d20d19685b817bfcdeffd",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    }
  ]
}