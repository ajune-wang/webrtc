{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "6a01ca49_f83c3852",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 5019
      },
      "writtenOn": "2023-06-22T12:31:18Z",
      "side": 1,
      "message": "rs lgtm for call/",
      "revId": "865e43c02c634e1c0fa4f23f37b593fdfac33bb3",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "27f9b0c2_e1f2144f",
        "filename": "call/bitrate_estimator_tests.cc",
        "patchSetId": 6
      },
      "lineNbr": 190,
      "author": {
        "id": 5019
      },
      "writtenOn": "2023-06-22T11:20:56Z",
      "side": 1,
      "message": "where can I find description what `Init` function is doing? in particular why it exists instead of doing all the work in the constructor.\n\nbetter yet - general documentation how frame_generator_capturer_ supposed to be used. Requiring to call both `Init` and `Start` looks confusing.\n\nI\u0027ve checked `FrameGeneratorCapturer` class - `Init` function lacks documentation there.",
      "range": {
        "startLine": 188,
        "startChar": 0,
        "endLine": 190,
        "endChar": 0
      },
      "revId": "865e43c02c634e1c0fa4f23f37b593fdfac33bb3",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "85c2fa62_a67e8b32",
        "filename": "call/bitrate_estimator_tests.cc",
        "patchSetId": 6
      },
      "lineNbr": 190,
      "author": {
        "id": 5019
      },
      "writtenOn": "2023-06-22T11:20:56Z",
      "side": 1,
      "message": "would it be more robust to call frame_generator_capturer_-\u003eStart()\nafter it is passed into send_stream_\nor it doesn\u0027t matter as long as framegenerator_capturer_-\u003eStart() is called before send_stream_-\u003eStart()",
      "revId": "865e43c02c634e1c0fa4f23f37b593fdfac33bb3",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4be1b0df_5bbedadb",
        "filename": "call/bitrate_estimator_tests.cc",
        "patchSetId": 6
      },
      "lineNbr": 190,
      "author": {
        "id": 5117
      },
      "writtenOn": "2023-06-22T12:01:05Z",
      "side": 1,
      "message": "Init() does almost the same things Start() does: https://source.chromium.org/chromium/chromium/src/+/main:third_party/webrtc/test/frame_generator_capturer.cc;l\u003d74;drc\u003d239db68b17aff0280ac6c15720e5fb96de03bdfb\n\nIt also checks that the file is existing. So maybe remove the Init alltogher, copying the missing check to Start()",
      "parentUuid": "27f9b0c2_e1f2144f",
      "range": {
        "startLine": 188,
        "startChar": 0,
        "endLine": 190,
        "endChar": 0
      },
      "revId": "865e43c02c634e1c0fa4f23f37b593fdfac33bb3",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ced3ba63_1e892f45",
        "filename": "call/bitrate_estimator_tests.cc",
        "patchSetId": 6
      },
      "lineNbr": 190,
      "author": {
        "id": 6337
      },
      "writtenOn": "2023-06-22T12:21:43Z",
      "side": 1,
      "message": "Should I do it in this CL or will follow up CL will be better (I prefer the second option)",
      "parentUuid": "4be1b0df_5bbedadb",
      "range": {
        "startLine": 188,
        "startChar": 0,
        "endLine": 190,
        "endChar": 0
      },
      "revId": "865e43c02c634e1c0fa4f23f37b593fdfac33bb3",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "53103fcb_256e025e",
        "filename": "call/bitrate_estimator_tests.cc",
        "patchSetId": 6
      },
      "lineNbr": 190,
      "author": {
        "id": 6337
      },
      "writtenOn": "2023-06-22T12:21:43Z",
      "side": 1,
      "message": "IIRC send_stream_ is production code path and it doesn\u0027t know about frame generator capturer. It accepts `VideoSourceInterface` which doesn\u0027t have start method, so send_stream_ can\u0027t invoke it.",
      "parentUuid": "85c2fa62_a67e8b32",
      "revId": "865e43c02c634e1c0fa4f23f37b593fdfac33bb3",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1185da3d_4acab4ab",
        "filename": "call/bitrate_estimator_tests.cc",
        "patchSetId": 6
      },
      "lineNbr": 190,
      "author": {
        "id": 5117
      },
      "writtenOn": "2023-06-22T12:24:04Z",
      "side": 1,
      "message": "I\u0027m OK with a follow up CL.",
      "parentUuid": "ced3ba63_1e892f45",
      "range": {
        "startLine": 188,
        "startChar": 0,
        "endLine": 190,
        "endChar": 0
      },
      "revId": "865e43c02c634e1c0fa4f23f37b593fdfac33bb3",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e24b0612_ddb77930",
        "filename": "call/bitrate_estimator_tests.cc",
        "patchSetId": 6
      },
      "lineNbr": 190,
      "author": {
        "id": 5019
      },
      "writtenOn": "2023-06-22T12:31:18Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "1185da3d_4acab4ab",
      "range": {
        "startLine": 188,
        "startChar": 0,
        "endLine": 190,
        "endChar": 0
      },
      "revId": "865e43c02c634e1c0fa4f23f37b593fdfac33bb3",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "At least one maximum vote for label \u0027Code-Review\u0027 is required"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader AND -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1 AND -label:Code-Review\u003dMIN"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader AND -label:Code-Review=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Code-Review=MAX,user=non_uploader"],"failingAtoms":["label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1 AND -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1","label:Code-Review=MIN"]}
      },
      "patchSetCommitId": "865e43c02c634e1c0fa4f23f37b593fdfac33bb3",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["is:review-enforced_gerrit"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforcement-satisfied_gerrit"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforcement-satisfied_gerrit"]}
      },
      "patchSetCommitId": "865e43c02c634e1c0fa4f23f37b593fdfac33bb3",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {
        "value": true
      }
    }
  ]
}