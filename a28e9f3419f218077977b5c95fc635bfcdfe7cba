{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "687f0306_b2eee1ec",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 5508
      },
      "writtenOn": "2022-09-26T09:01:35Z",
      "side": 1,
      "message": "lgtm % the name change",
      "revId": "a28e9f3419f218077977b5c95fc635bfcdfe7cba",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7410d166_09a27a2d",
        "filename": "call/degraded_call.cc",
        "patchSetId": 6
      },
      "lineNbr": 29,
      "author": {
        "id": 5508
      },
      "writtenOn": "2022-09-22T08:33:14Z",
      "side": 1,
      "message": "would it make more sense for FakeNetworkPipeOnTaskQueue to have a dedicated safety flag? (as in, scoped).",
      "revId": "a28e9f3419f218077977b5c95fc635bfcdfe7cba",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c3983fd7_7d8d40b4",
        "filename": "call/degraded_call.cc",
        "patchSetId": 6
      },
      "lineNbr": 29,
      "author": {
        "id": 9405
      },
      "writtenOn": "2022-09-22T08:42:28Z",
      "side": 1,
      "message": "Can you tell me why you think so?\nDegradedCall\u0027s destructor cleans up both safety flags and FakeNetworkPipeOnTaskQueue, so I don\u0027t think there\u0027s a problem.",
      "parentUuid": "7410d166_09a27a2d",
      "revId": "a28e9f3419f218077977b5c95fc635bfcdfe7cba",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "198423a7_4b8f8af5",
        "filename": "call/degraded_call.cc",
        "patchSetId": 6
      },
      "lineNbr": 29,
      "author": {
        "id": 5508
      },
      "writtenOn": "2022-09-23T07:36:38Z",
      "side": 1,
      "message": "What I\u0027m thinking is partially from the code readability pov but the design does also tie together the behavior of a few classes and makes the child classes depend on behavior of the parent class to avoid the problems. I.e. the that are posted aren\u0027t really safe in the way the safety flag is used because the tasks that are posted, touch state that is not aligned with the state of the flag. That way, the safety flag, as used, is misleading. Basically\n\n* the name of the flag is `alive_flag_`, which could be understood to match the scope of the class that has that flag as a member variable. In actuality, the flag\u0027s state will not be affected by the state of the owning class.\n\n* It\u0027s not clear just from reading the implementation of `FakeNetworkPipeOnTaskQueue` what state the `alive_flag_` variable provides safety for.\n\nSee other comment for a different potential way of approaching teardown.",
      "parentUuid": "c3983fd7_7d8d40b4",
      "revId": "a28e9f3419f218077977b5c95fc635bfcdfe7cba",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7cc26801_af76a483",
        "filename": "call/degraded_call.cc",
        "patchSetId": 6
      },
      "lineNbr": 29,
      "author": {
        "id": 9405
      },
      "writtenOn": "2022-09-23T08:29:18Z",
      "side": 1,
      "message": "`alive_flag_` is for sharing between `DegradedCall`, `FakeNetworkPipeOnTaskQueue` and `ThreadedPacketReceiver`. These objects are created and destroyed on the worker thread, and any closures posted from the worker thread to the network thread must be protected. So I shared and used the scoped_refptr of one `PendingTaskSafetyFlag`.\n\nIf you think splitting this flag into 3 different flags will increase readability, I will. However, these three classes do not exist independently and they have the same lifecycle, for now.",
      "parentUuid": "198423a7_4b8f8af5",
      "revId": "a28e9f3419f218077977b5c95fc635bfcdfe7cba",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6f5b2b85_6aff84cf",
        "filename": "call/degraded_call.cc",
        "patchSetId": 6
      },
      "lineNbr": 29,
      "author": {
        "id": 5508
      },
      "writtenOn": "2022-09-26T09:01:35Z",
      "side": 1,
      "message": "Yes - how about just renaming the `alive_flag_` to something like `call_alive_` then since the flag itself doesn\u0027t represent the scope of the class that holds on to the reference, but rather the scope of the surrogate DegradedCall instance?",
      "parentUuid": "7cc26801_af76a483",
      "revId": "a28e9f3419f218077977b5c95fc635bfcdfe7cba",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2af0abc2_bb85aee2",
        "filename": "call/degraded_call.cc",
        "patchSetId": 6
      },
      "lineNbr": 224,
      "author": {
        "id": 5508
      },
      "writtenOn": "2022-09-23T07:36:38Z",
      "side": 1,
      "message": "Instead of this approach, can the objects that have these pending tasks (use the flag) simply be deleted on on the network thread?",
      "revId": "a28e9f3419f218077977b5c95fc635bfcdfe7cba",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    }
  ]
}