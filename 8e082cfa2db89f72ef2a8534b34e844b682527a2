{
  "comments": [
    {
      "key": {
        "uuid": "e5e243e8_2e4c3285",
        "filename": "video/video_receive_stream2.h",
        "patchSetId": 10
      },
      "lineNbr": 55,
      "author": {
        "id": 5527
      },
      "writtenOn": "2020-05-06T09:11:30Z",
      "side": 1,
      "message": "Maybe I\u0027m missing something, but it looks like it would make more sense for this struct to live in receive_statistics_proxy2.h, maybe even scoped as ReceiveStatisticsProxy::VideoFrameMetaData? WDYT?",
      "range": {
        "startLine": 55,
        "startChar": 7,
        "endLine": 55,
        "endChar": 25
      },
      "revId": "8e082cfa2db89f72ef2a8534b34e844b682527a2",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b1606404_013b06eb",
        "filename": "video/video_receive_stream2.h",
        "patchSetId": 10
      },
      "lineNbr": 55,
      "author": {
        "id": 5508
      },
      "writtenOn": "2020-05-06T09:49:21Z",
      "side": 1,
      "message": "Moving it to receive_statistics_proxy2.h gets rid of one fwd declaration.\nMoving it to video_quality_observer2.h gets rid of two, so from that standpoint, we could put it there.\n\nHowever it feels a bit weird to me since it\u0027s used in VideoReceiveStream2 first, then ReceiveStatisticsProxy and finally VideoQualityObserver. The relationship between these classes is:\n\nVideoReceiveStream2\n-\u003e ReceiveStatisticsProxy\n  -\u003e VideoQualityObserver\n\nSo from that pov, it feels like a loop to be having the top-most class using an implementation detail of the inner most class in its implementation. I\u0027d rather have the type owned at the top level and then be used in the same way by the downstream classes. Does that make sense?",
      "parentUuid": "e5e243e8_2e4c3285",
      "range": {
        "startLine": 55,
        "startChar": 7,
        "endLine": 55,
        "endChar": 25
      },
      "revId": "8e082cfa2db89f72ef2a8534b34e844b682527a2",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5f82df26_39995cc8",
        "filename": "video/video_receive_stream2.h",
        "patchSetId": 10
      },
      "lineNbr": 55,
      "author": {
        "id": 5527
      },
      "writtenOn": "2020-05-06T10:19:36Z",
      "side": 1,
      "message": "Assuming we don\u0027t want to move VideoFrameMetaData to api/video/video_frame.h to avoid polluting the public API, then I guess the most correct thing would be to create a video/video_frame_meta_data.h to avoid all cycles and fwd declarations, but maybe it\u0027s not worth it...\n\nThis is a borderline nit anyway since it can easily be changed afterwards..",
      "parentUuid": "b1606404_013b06eb",
      "range": {
        "startLine": 55,
        "startChar": 7,
        "endLine": 55,
        "endChar": 25
      },
      "revId": "8e082cfa2db89f72ef2a8534b34e844b682527a2",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b5624c08_df5d196e",
        "filename": "video/video_receive_stream2.h",
        "patchSetId": 10
      },
      "lineNbr": 55,
      "author": {
        "id": 5508
      },
      "writtenOn": "2020-05-06T19:31:38Z",
      "side": 1,
      "message": "Agreed. I think that would be premature at this point, but I do suspect that it will make sense down the line as being able to decouple the metadata from the frame buffer for performance and thread/tq purposes becomes more commonly needed. I agree that we can cross that bridge when we get there.",
      "parentUuid": "5f82df26_39995cc8",
      "range": {
        "startLine": 55,
        "startChar": 7,
        "endLine": 55,
        "endChar": 25
      },
      "revId": "8e082cfa2db89f72ef2a8534b34e844b682527a2",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    }
  ]
}