{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "c849f469_b4b3b170",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 5
      },
      "lineNbr": 0,
      "author": {
        "id": 5234
      },
      "writtenOn": "2021-04-23T09:55:34Z",
      "side": 1,
      "message": "Looks basically good, but some questions on HasOneRef. ",
      "revId": "669cb2c796b8241bfe65fd84ee4fa2f516cda3e7",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d21c3771_a1b5ed7a",
        "filename": "api/ref_counted_base.h",
        "patchSetId": 5
      },
      "lineNbr": 33,
      "author": {
        "id": 5234
      },
      "writtenOn": "2021-04-23T09:55:34Z",
      "side": 1,
      "message": "Use of HasOneRef is somewhat discouraged. It\u0027s subtle, has few uses (in our pool classes), and doesn\u0027t exist on std::shared_ptr (the exclusion is motivated by some subtleties I don\u0027t quite understand).\n\nSo it would be nice if we could avoid exposing it in api/ headers. Or if that is difficult, go halfway and move it to protected (forcing subclasses that want it to to expose it explicitly).",
      "range": {
        "startLine": 33,
        "startChar": 7,
        "endLine": 33,
        "endChar": 16
      },
      "revId": "669cb2c796b8241bfe65fd84ee4fa2f516cda3e7",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ead5033e_662755a5",
        "filename": "api/ref_counted_base.h",
        "patchSetId": 5
      },
      "lineNbr": 33,
      "author": {
        "id": 5019
      },
      "writtenOn": "2021-04-23T10:22:59Z",
      "side": 1,
      "message": "I think one of the reasons std::shared_ptr discourages use of function similar to \u0027HasOneRef\u0027 is support for std::weak_ptr.\nscoped_ptr doesn\u0027t have such feature (and thus issue).\n\nThread1 {\n  auto shared \u003d std::make_shared\u003cFoo\u003e();\n  std::weak_ptr\u003cFoo\u003e weak(shared);\n  assert(shared.use_count() \u003d\u003d 1);\n  PassToThread2(weak);\n  // now use_count may change from 1 to 2 by Thread2 at any time:\n  if (shared.use_count() \u003d\u003d 1) {\n    assert(shared.use_count() \u003d\u003d 1); // may fail.\n  }\n}\n\nThread2(std::weak_ptr\u003cFoo\u003e weak) {\n  if (std::shared_ptr\u003cFoo\u003e shared \u003d weak.lock()) {\n    assert(shared.use_count() \u003d\u003d 2);\n  }\n}",
      "parentUuid": "d21c3771_a1b5ed7a",
      "range": {
        "startLine": 33,
        "startChar": 7,
        "endLine": 33,
        "endChar": 16
      },
      "revId": "669cb2c796b8241bfe65fd84ee4fa2f516cda3e7",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4f6b56c0_70c7852b",
        "filename": "api/ref_counted_base.h",
        "patchSetId": 5
      },
      "lineNbr": 33,
      "author": {
        "id": 5508
      },
      "writtenOn": "2021-04-23T10:25:36Z",
      "side": 1,
      "message": "I agree that for shared objects that implement reference counting, such as shared_ptr or RefCountedBase that it should be considered an exceptional case (and ideally avoided) when information about the reference count itself is needed.\n\nHowever, this does exist for shared_ptr and it\u0027s actually more revealing in terms of details than what the webrtc reference counting classes have:\nhttps://en.cppreference.com/w/cpp/memory/shared_ptr/use_count\n\nThere\u0027s also documentation for use_count() for when it\u0027s needed and one of those motivations is exactly the same as for HasOneRef().\n\nIn this CL, the goal is to make the reference counting implementations more aligned. [Final]RefCountedObject supports HasOneRef(), it\u0027s required for weak ptr implementations and there is code such as I encountered in this CL, that has a valid reason for needing it. So rather than changing that code to use the somewhat more expensive implementation of RefCountedObject, it can use RefCountedNonVirtual and with the changes in this file, the four options, are now feature compatible. That, I hope, will facilitate merging them.",
      "parentUuid": "d21c3771_a1b5ed7a",
      "range": {
        "startLine": 33,
        "startChar": 7,
        "endLine": 33,
        "endChar": 16
      },
      "revId": "669cb2c796b8241bfe65fd84ee4fa2f516cda3e7",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c425db56_f48cbaee",
        "filename": "api/ref_counted_base.h",
        "patchSetId": 5
      },
      "lineNbr": 33,
      "author": {
        "id": 5508
      },
      "writtenOn": "2021-04-23T10:29:30Z",
      "side": 1,
      "message": "Danil beat me to it :) yes, as you can see shared_ptr does have use_count().\n\nBut this is risky business and due to the TOCTOU nature of the interface, the external code that uses the shared ptr (or scoped), must handle the subtleties around threading.",
      "parentUuid": "4f6b56c0_70c7852b",
      "range": {
        "startLine": 33,
        "startChar": 7,
        "endLine": 33,
        "endChar": 16
      },
      "revId": "669cb2c796b8241bfe65fd84ee4fa2f516cda3e7",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6e5c8ac9_d7e16dbc",
        "filename": "api/ref_counted_base.h",
        "patchSetId": 5
      },
      "lineNbr": 33,
      "author": {
        "id": 5234
      },
      "writtenOn": "2021-04-23T10:56:36Z",
      "side": 1,
      "message": "So what do you think is reasonable for this cl? I have no problem with current internal use of HasOneRef, but this is api/ code. Are we ok with webrtc applications depending on HasOneRef as a supported webrtc api? Should there be a discouraging comment? Do you think the protected: hack, as further discouragement, is possible and reasonable?",
      "parentUuid": "c425db56_f48cbaee",
      "range": {
        "startLine": 33,
        "startChar": 7,
        "endLine": 33,
        "endChar": 16
      },
      "revId": "669cb2c796b8241bfe65fd84ee4fa2f516cda3e7",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4fddd726_06a0ae1f",
        "filename": "api/ref_counted_base.h",
        "patchSetId": 5
      },
      "lineNbr": 33,
      "author": {
        "id": 5508
      },
      "writtenOn": "2021-04-23T11:23:26Z",
      "side": 1,
      "message": "Let me try out a different approach to avoid adding the HasOneRef() method. The api/ point is very good.",
      "parentUuid": "6e5c8ac9_d7e16dbc",
      "range": {
        "startLine": 33,
        "startChar": 7,
        "endLine": 33,
        "endChar": 16
      },
      "revId": "669cb2c796b8241bfe65fd84ee4fa2f516cda3e7",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "652bd58b_85409d92",
        "filename": "modules/desktop_capture/shared_desktop_frame.h",
        "patchSetId": 5
      },
      "lineNbr": 55,
      "author": {
        "id": 5234
      },
      "writtenOn": "2021-04-23T09:55:34Z",
      "side": 1,
      "message": "BTW, this looks like the std::shared_ptr move constructor from std::unique_ptr could make things simpler.",
      "range": {
        "startLine": 55,
        "startChar": 10,
        "endLine": 55,
        "endChar": 67
      },
      "revId": "669cb2c796b8241bfe65fd84ee4fa2f516cda3e7",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "012645b7_be0c73e6",
        "filename": "modules/desktop_capture/shared_desktop_frame.h",
        "patchSetId": 5
      },
      "lineNbr": 55,
      "author": {
        "id": 5508
      },
      "writtenOn": "2021-04-23T10:25:36Z",
      "side": 1,
      "message": "Yes this is a bit of a curious construct. I figured I wouldn\u0027t change it significantly in this CL though.\n(and see now that I forgot to delete line 54)",
      "parentUuid": "652bd58b_85409d92",
      "range": {
        "startLine": 55,
        "startChar": 10,
        "endLine": 55,
        "endChar": 67
      },
      "revId": "669cb2c796b8241bfe65fd84ee4fa2f516cda3e7",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "96f195b4_d959c743",
        "filename": "modules/video_coding/codecs/vp9/vp9_frame_buffer_pool.cc",
        "patchSetId": 5
      },
      "lineNbr": 63,
      "author": {
        "id": 5508
      },
      "writtenOn": "2021-04-23T11:04:09Z",
      "side": 1,
      "message": "Here is where HasOneRef() is used (as a public method)",
      "revId": "669cb2c796b8241bfe65fd84ee4fa2f516cda3e7",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    }
  ]
}