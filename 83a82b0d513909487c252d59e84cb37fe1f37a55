{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "efdb8f32_d415d3c1",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 18474
      },
      "writtenOn": "2023-08-23T17:23:38Z",
      "side": 1,
      "message": "+mfoltz as FYI",
      "revId": "83a82b0d513909487c252d59e84cb37fe1f37a55",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cea4c5f8_f3cbb64b",
        "filename": "modules/desktop_capture/desktop_capturer.h",
        "patchSetId": 3
      },
      "lineNbr": 122,
      "author": {
        "id": 18474
      },
      "writtenOn": "2023-08-23T17:23:38Z",
      "side": 1,
      "message": "I\u0027m a little hesitant about this because it implies that we don\u0027t have a mechanism to restrict this; which can result in a lot of wasted work. I think the picker is the only place we\u0027d want to do this so maybe worth a custom design just for it.",
      "range": {
        "startLine": 122,
        "startChar": 43,
        "endLine": 122,
        "endChar": 62
      },
      "revId": "83a82b0d513909487c252d59e84cb37fe1f37a55",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "183d0c04_417d1ac6",
        "filename": "modules/desktop_capture/desktop_capturer.h",
        "patchSetId": 3
      },
      "lineNbr": 122,
      "author": {
        "id": 7641
      },
      "writtenOn": "2023-08-23T21:20:52Z",
      "side": 1,
      "message": "Yes, you\u0027re right about the use case. The motivation for these changes is a Chromium CL that I\u0027m working on where we want to update the picker to use ScreenCaptureKit due to deprecations of the old/legacy capture APIs on macOS.\n\nSo, I\u0027ve been trying to create something that would work with the existing picker implementation. One reason to not make any drastic changes to the picker is that the existing way of calling the capturers will still be in use for other platforms.\n\nWhat do you think of the following change:\n- Add a function `SelectSources(std::vector\u003cSourceId\u003e)` to the interface where the sources to be captured are specified.\n- Maybe, add a parameter \"maximum concurrent capture streams\" to the Start-call. The reason to have this parameter is that it enables a default mode to capture the first N sources before any sources have been selected.",
      "parentUuid": "cea4c5f8_f3cbb64b",
      "range": {
        "startLine": 122,
        "startChar": 43,
        "endLine": 122,
        "endChar": 62
      },
      "revId": "83a82b0d513909487c252d59e84cb37fe1f37a55",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d55698e4_23999d9e",
        "filename": "modules/desktop_capture/desktop_capturer.h",
        "patchSetId": 3
      },
      "lineNbr": 122,
      "author": {
        "id": 7641
      },
      "writtenOn": "2023-08-23T21:24:12Z",
      "side": 1,
      "message": "This is WIP and **not** ready for review yet and of course dependent on the outcome of this review, but here\u0027s the Chromium CL that would use the new interface functions,\n\nhttps://chromium-review.googlesource.com/c/chromium/src/+/4798390",
      "parentUuid": "183d0c04_417d1ac6",
      "range": {
        "startLine": 122,
        "startChar": 43,
        "endLine": 122,
        "endChar": 62
      },
      "revId": "83a82b0d513909487c252d59e84cb37fe1f37a55",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4e4b74c1_3d2b82ba",
        "filename": "modules/desktop_capture/desktop_capturer.h",
        "patchSetId": 3
      },
      "lineNbr": 122,
      "author": {
        "id": 18474
      },
      "writtenOn": "2023-08-23T21:49:12Z",
      "side": 1,
      "message": "SelectSources (only valid for OnDemand perhaps) would seem reasonable; though perhaps the picker could also be updated (feels like it would have to be to handle this anyway) to just create multiple desktop capturers which each would only handle a single source, rather than jamming this paradigm onto the DesktopCapturer interface that now multiple sources are simultaneously capturable? That\u0027s a pretty big change in the usage pattern.",
      "parentUuid": "d55698e4_23999d9e",
      "range": {
        "startLine": 122,
        "startChar": 43,
        "endLine": 122,
        "endChar": 62
      },
      "revId": "83a82b0d513909487c252d59e84cb37fe1f37a55",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3d9ee402_6598df2e",
        "filename": "modules/desktop_capture/desktop_capturer.h",
        "patchSetId": 3
      },
      "lineNbr": 122,
      "author": {
        "id": 5147
      },
      "writtenOn": "2023-08-24T08:21:56Z",
      "side": 1,
      "message": "\u003e to just create multiple desktop capturers which each would only handle a single source\n\nGreat minds think alike - we\u0027ve discussed that possibility yesterday. It sounds like it would be a bit of a big change, though, and might risk the timeline - we want this fix in by m118, as it seems like macOS Sonoma will deprecate the non-SCK APIs the picker currently uses.\n\nI propose that we go with the current approach, but add some TODOs and warnings to discourage anyone relying on the temporary code we introduce. We can proceed with a better way of doing things after we\u0027ve landed a functioning deprecation-proof solution. Wdys?",
      "parentUuid": "4e4b74c1_3d2b82ba",
      "range": {
        "startLine": 122,
        "startChar": 43,
        "endLine": 122,
        "endChar": 62
      },
      "revId": "83a82b0d513909487c252d59e84cb37fe1f37a55",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0d7720c2_11fe7523",
        "filename": "modules/desktop_capture/desktop_capturer.h",
        "patchSetId": 3
      },
      "lineNbr": 122,
      "author": {
        "id": 18474
      },
      "writtenOn": "2023-08-24T17:38:32Z",
      "side": 1,
      "message": "I think you have to make similar changes anyway though to even do this solution? \n\nIf the non-SCK capturers are implemented solely in Chrome, could we subclass and extend the interface there instead (There is some precedence for Mac especially downcasting to their specific interface if needed as well)? At a minimum if this is temporary it needs to also be behind mac buildflags, there\u0027s not a whole lot we can do from stopping others from implementing things on this common shared interface... (This is just proposing other ways that we could help minimize others taking a dependency on it).\n\nThis change to send multiple sources from the Capturer is a pretty big one.",
      "parentUuid": "3d9ee402_6598df2e",
      "range": {
        "startLine": 122,
        "startChar": 43,
        "endLine": 122,
        "endChar": 62
      },
      "revId": "83a82b0d513909487c252d59e84cb37fe1f37a55",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "400eedfe_11a991c0",
        "filename": "modules/desktop_capture/desktop_capturer.h",
        "patchSetId": 3
      },
      "lineNbr": 129,
      "author": {
        "id": 18474
      },
      "writtenOn": "2023-08-23T17:23:38Z",
      "side": 1,
      "message": "I\u0027m not the biggest fan of the \"Recurrent\" terminology as it\u0027s not the most readily apparent. Perhaps a better option would be an option passed in to start that\u0027s an enum like\n\nFrameDeliveryMethod {\n  kOnRequest\n  kOnChanged\n}\n\nand then we just re-use the existing OnCaptureResult method?  (Or do some kind of staggered replacement to add the SourceId if we feel that\u0027s necessary but maybe keep the name the same).\n\nFWIW, for Wayland we\u0027d already introduced a bool that could be set to send frames immediately and just re-uses the existing mechanism after \"Start\": https://source.chromium.org/chromium/chromium/src/+/main:third_party/webrtc/modules/desktop_capture/linux/wayland/base_capturer_pipewire.h;drc\u003d93f41097bb9b07efd4b8e7e4536b8bf920baa915;l\u003d70",
      "range": {
        "startLine": 129,
        "startChar": 20,
        "endLine": 129,
        "endChar": 29
      },
      "revId": "83a82b0d513909487c252d59e84cb37fe1f37a55",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f0d49dd8_2683a434",
        "filename": "modules/desktop_capture/desktop_capturer.h",
        "patchSetId": 3
      },
      "lineNbr": 129,
      "author": {
        "id": 7641
      },
      "writtenOn": "2023-08-23T21:20:52Z",
      "side": 1,
      "message": "What do you think of making FrameDeliveryMethod a static property of the capturer, where the default implementation would return kOnRequest?\n\nThe benefit of having a unique name for the OnChange callback is that the name uniquely identifies the function to be called. I haven\u0027t looked into this in detail, but there was an issue with a previous patch, where I reused the name OnCaptureResult, because it was ambiguous which method that was meant by this. I think that passing on the SourceId together with the frame is necessary to not have to deal with synchronization issues since the frames may arrive in arbitrary order.",
      "parentUuid": "400eedfe_11a991c0",
      "range": {
        "startLine": 129,
        "startChar": 20,
        "endLine": 129,
        "endChar": 29
      },
      "revId": "83a82b0d513909487c252d59e84cb37fe1f37a55",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b7edf272_58963bfc",
        "filename": "modules/desktop_capture/desktop_capturer.h",
        "patchSetId": 3
      },
      "lineNbr": 129,
      "author": {
        "id": 18474
      },
      "writtenOn": "2023-08-23T21:49:12Z",
      "side": 1,
      "message": "We have capturers right now that could work in either mode, so I\u0027d be hesitant in making it look like a capturer could only support a single mode. For instance, the WGC and Wayland capturers are both event-driven by the OS, but we just manage a \"latest available frame\" that can be polled to still support the polling mechanism. \nThe Mac capturers could likely do something like that as well, which wouldn\u0027t require a full re-write of the consumers to manage the event-based API just yet.\n\nI assume the ambiguity with OnCaptureResult largely stems from supporting getting frames from multiple Sources instead of just a single source. If we stick to a single-sourced capturer I think that it is less of an issue.",
      "parentUuid": "f0d49dd8_2683a434",
      "range": {
        "startLine": 129,
        "startChar": 20,
        "endLine": 129,
        "endChar": 29
      },
      "revId": "83a82b0d513909487c252d59e84cb37fe1f37a55",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2fd82127_39f1320e",
        "filename": "modules/desktop_capture/desktop_capturer.h",
        "patchSetId": 3
      },
      "lineNbr": 130,
      "author": {
        "id": 5147
      },
      "writtenOn": "2023-08-23T13:55:17Z",
      "side": 1,
      "message": "For my education - what\u0027s the rationale that led you to prefer Frequency over TimeDelta here? Is it because it\u0027s more descriptive, or...? (I\u0027m not sure the name still matches the type, btw.)",
      "range": {
        "startLine": 130,
        "startChar": 30,
        "endLine": 130,
        "endChar": 62
      },
      "revId": "83a82b0d513909487c252d59e84cb37fe1f37a55",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f3c5f8c6_0dcef2e6",
        "filename": "modules/desktop_capture/desktop_capturer.h",
        "patchSetId": 3
      },
      "lineNbr": 130,
      "author": {
        "id": 7641
      },
      "writtenOn": "2023-08-23T14:08:46Z",
      "side": 1,
      "message": "I guess this is subjective, but to me max_frame_rate is a more intuitive name than min_frame_interval. max_frame_rate is also used further down in this class. The unit for frequency is 1/s so I think the match is reasonable okay.",
      "parentUuid": "2fd82127_39f1320e",
      "range": {
        "startLine": 130,
        "startChar": 30,
        "endLine": 130,
        "endChar": 62
      },
      "revId": "83a82b0d513909487c252d59e84cb37fe1f37a55",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a2b75ae4_d730cfea",
        "filename": "modules/desktop_capture/desktop_capturer.h",
        "patchSetId": 3
      },
      "lineNbr": 130,
      "author": {
        "id": 18474
      },
      "writtenOn": "2023-08-23T17:23:38Z",
      "side": 1,
      "message": "Further, how does this align with SetMaxFrameRate below ?",
      "parentUuid": "f3c5f8c6_0dcef2e6",
      "range": {
        "startLine": 130,
        "startChar": 30,
        "endLine": 130,
        "endChar": 62
      },
      "revId": "83a82b0d513909487c252d59e84cb37fe1f37a55",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5539bd90_207855b8",
        "filename": "modules/desktop_capture/desktop_capturer.h",
        "patchSetId": 3
      },
      "lineNbr": 130,
      "author": {
        "id": 7641
      },
      "writtenOn": "2023-08-23T21:20:52Z",
      "side": 1,
      "message": "Elad, what do you say? Perhaps it\u0027s better to just use the existing SetMaxFrameRate function?",
      "parentUuid": "a2b75ae4_d730cfea",
      "range": {
        "startLine": 130,
        "startChar": 30,
        "endLine": 130,
        "endChar": 62
      },
      "revId": "83a82b0d513909487c252d59e84cb37fe1f37a55",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    }
  ]
}