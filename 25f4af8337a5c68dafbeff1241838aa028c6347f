{
  "comments": [
    {
      "key": {
        "uuid": "3df9e7f2_1660a005",
        "filename": "system_wrappers/include/field_trial.h",
        "patchSetId": 3
      },
      "lineNbr": 98,
      "author": {
        "id": 5087
      },
      "writtenOn": "2019-12-04T16:54:43Z",
      "side": 1,
      "message": "Will these 2 be used from Chromium?\n\nIf yes, then they should be tagged with RTC_EXPORT (see for example: https://cs.chromium.org/chromium/src/third_party/webrtc/api/jsep.h?l\u003d77\u0026rcl\u003d3ac6375bb31f188baf50d1cbf2bd8748f9dd8360).\n\nIt is also possible this code is generic (clients should never override it) so in that case it should be defined all the times.",
      "range": {
        "startLine": 87,
        "startChar": 0,
        "endLine": 98,
        "endChar": 45
      },
      "revId": "25f4af8337a5c68dafbeff1241838aa028c6347f",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a2fbe921_8f8ded02",
        "filename": "system_wrappers/include/field_trial.h",
        "patchSetId": 3
      },
      "lineNbr": 98,
      "author": {
        "id": 8385
      },
      "writtenOn": "2019-12-04T18:59:40Z",
      "side": 1,
      "message": "No, not to be used by Chromium - Chromium doesn\u0027t use any of this (it injects FindFullName to plug it directly into Chromium\u0027s FieldTrial system). \n\nTo be used by the Meet Mobile native apps. \n\nI don\u0027t think it\u0027s generic since it ties to the specific /-separated FieldTrial format used by the default implementation. Clients that don\u0027t use the default implementation but override FindFullName can use whatever format and structure they want.",
      "parentUuid": "3df9e7f2_1660a005",
      "range": {
        "startLine": 87,
        "startChar": 0,
        "endLine": 98,
        "endChar": 45
      },
      "revId": "25f4af8337a5c68dafbeff1241838aa028c6347f",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "55dc323e_61219185",
        "filename": "system_wrappers/include/field_trial.h",
        "patchSetId": 3
      },
      "lineNbr": 98,
      "author": {
        "id": 5234
      },
      "writtenOn": "2019-12-05T09:56:40Z",
      "side": 1,
      "message": "I\u0027d prefer absl::string_view for the input arguments.\n\nFor naming, I don\u0027t think \"WithOverwrite\" is that helpful. The question is which argument takes precedence, as explained in the comment, and \"WithOverwrite\" doesn\u0027t answer that question.",
      "parentUuid": "a2fbe921_8f8ded02",
      "range": {
        "startLine": 87,
        "startChar": 0,
        "endLine": 98,
        "endChar": 45
      },
      "revId": "25f4af8337a5c68dafbeff1241838aa028c6347f",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0f1f91bd_97b78710",
        "filename": "system_wrappers/include/field_trial.h",
        "patchSetId": 3
      },
      "lineNbr": 98,
      "author": {
        "id": 8385
      },
      "writtenOn": "2019-12-05T12:03:58Z",
      "side": 1,
      "message": "Removed \u0027WithOverwrite\u0027. As to what takes precedence, it\u0027s clarified in the docstring.\n\nAs to \"I\u0027d prefer absl::string_view for the input arguments.\" - agree, but I kept const-char* for consistency with the all the other methods exposed in the header file, which are all const-char* based. \n\nIf you think it should still be string_view please reopen the comment and I\u0027ll change it.",
      "parentUuid": "55dc323e_61219185",
      "range": {
        "startLine": 87,
        "startChar": 0,
        "endLine": 98,
        "endChar": 45
      },
      "revId": "25f4af8337a5c68dafbeff1241838aa028c6347f",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "74f9d6d2_92e45f21",
        "filename": "system_wrappers/source/field_trial.cc",
        "patchSetId": 3
      },
      "lineNbr": 82,
      "author": {
        "id": 5234
      },
      "writtenOn": "2019-12-05T09:56:40Z",
      "side": 1,
      "message": "Maybe simpler with\n\nif (!FieldsTrialsStringIsValid(first)) {\n  return second;\n}\n\nand similarly below. Is the behavior for invalid inputs important? \n\nI think it\u0027s important that errors resulting in invalid field trial strings don\u0027t go unnoticed. InitFieldTrialsFromString includes a DCHECK, and I think calls like\n\n  InitFieldTrialsFromString(MergeFieldTrialStringsWithOverwrite(s1, s2));\n\nshould likewise hit some DCHECK on invalid inputs. While with your change as is, errors would be silently ignored by this combination.",
      "range": {
        "startLine": 80,
        "startChar": 1,
        "endLine": 82,
        "endChar": 3
      },
      "revId": "25f4af8337a5c68dafbeff1241838aa028c6347f",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "77f6ea6b_02a60339",
        "filename": "system_wrappers/source/field_trial.cc",
        "patchSetId": 3
      },
      "lineNbr": 82,
      "author": {
        "id": 8385
      },
      "writtenOn": "2019-12-05T12:03:58Z",
      "side": 1,
      "message": "Good point, thanks, done. Added the DCHECK, default-enabled, but needed to make it optional for testability.",
      "parentUuid": "74f9d6d2_92e45f21",
      "range": {
        "startLine": 80,
        "startChar": 1,
        "endLine": 82,
        "endChar": 3
      },
      "revId": "25f4af8337a5c68dafbeff1241838aa028c6347f",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f6a64022_47bcaf59",
        "filename": "system_wrappers/source/field_trial.cc",
        "patchSetId": 3
      },
      "lineNbr": 87,
      "author": {
        "id": 5234
      },
      "writtenOn": "2019-12-05T09:56:40Z",
      "side": 1,
      "message": "Instead of concatenating the input strings, I\u0027d consider a structure like\n\nstd::map\u003cstd::string, std::string\u003e;\n\nInsertOrReplaceStringsInMap(\u0026m, first);\nInsertOrReplaceStringsInMap(\u0026m, second);\n\n// Merge into fieldtrial string.\n...\n\nThe helper function would do the rtc::split and insertions. You could also move the FieldTrialStringIsValid check in there.",
      "range": {
        "startLine": 86,
        "startChar": 0,
        "endLine": 87,
        "endChar": 25
      },
      "revId": "25f4af8337a5c68dafbeff1241838aa028c6347f",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "78ff6655_6e550ad8",
        "filename": "system_wrappers/source/field_trial.cc",
        "patchSetId": 3
      },
      "lineNbr": 87,
      "author": {
        "id": 8385
      },
      "writtenOn": "2019-12-05T12:03:58Z",
      "side": 1,
      "message": "Done, much nicer indeed, thanks!!",
      "parentUuid": "f6a64022_47bcaf59",
      "range": {
        "startLine": 86,
        "startChar": 0,
        "endLine": 87,
        "endChar": 25
      },
      "revId": "25f4af8337a5c68dafbeff1241838aa028c6347f",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    }
  ]
}