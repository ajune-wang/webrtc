{
  "comments": [
    {
      "key": {
        "uuid": "04b8065c_30a2252d",
        "filename": "modules/pacing/packet_router.cc",
        "patchSetId": 14
      },
      "lineNbr": 150,
      "author": {
        "id": 5508
      },
      "writtenOn": "2019-08-16T08:29:26Z",
      "side": 1,
      "message": "From what I can tell, the PacedSender calls this method on a process thread and not on the pacer thread. Is this comment incorrect?",
      "revId": "f6468d2569d3987aba29bdcd1198078cf6ae326c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "720bd122_52f2efc3",
        "filename": "modules/pacing/packet_router.cc",
        "patchSetId": 14
      },
      "lineNbr": 150,
      "author": {
        "id": 5524
      },
      "writtenOn": "2019-08-16T09:21:37Z",
      "side": 1,
      "message": "The each PacedSender has it\u0027s own dedicated ProcessThread. That thread is the only thread that calls this method, and there is exactly one PacketRouter per PacedSender.\nSo just using the lock here is fine.",
      "parentUuid": "04b8065c_30a2252d",
      "revId": "f6468d2569d3987aba29bdcd1198078cf6ae326c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4549a2a5_85843e41",
        "filename": "modules/pacing/packet_router.cc",
        "patchSetId": 14
      },
      "lineNbr": 150,
      "author": {
        "id": 5508
      },
      "writtenOn": "2019-08-16T09:27:19Z",
      "side": 1,
      "message": "I\u0027m running tests, for example PeerConnectionIntegrationTestPlanB.MediaFlowsAfterEarlyWarmupWithCreateSender in peerconnection_unittests, and there I see this get called from two different ProcessThreads, one called PacerThread and another called ModuleProcessThread\n\nBasically, the same PacketRouter instance is getting calls from both of those process threads. Is that a bug in the tests?",
      "parentUuid": "720bd122_52f2efc3",
      "revId": "f6468d2569d3987aba29bdcd1198078cf6ae326c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fde1910b_80610151",
        "filename": "modules/pacing/packet_router.cc",
        "patchSetId": 14
      },
      "lineNbr": 153,
      "author": {
        "id": 5508
      },
      "writtenOn": "2019-08-16T08:29:26Z",
      "side": 1,
      "message": "This seems like a possible bug. Should use an atomic increment operation. There\u0027s also a race between read and write (this line and the preceding one).",
      "revId": "f6468d2569d3987aba29bdcd1198078cf6ae326c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "032908fa_a67205e1",
        "filename": "modules/pacing/packet_router.cc",
        "patchSetId": 14
      },
      "lineNbr": 153,
      "author": {
        "id": 5524
      },
      "writtenOn": "2019-08-16T09:21:37Z",
      "side": 1,
      "message": "This code is now essentially serialized. If the code path is used where this method is called, then the AllocateSequenceNumber() method and the entire SequenceNumberAllocator interface is unused. They will be removed shortly and we\u0027ll stop using atomics (we\u0027re keeping both code paths alive for a transition period with a field trial flag that allows switching between them).",
      "parentUuid": "fde1910b_80610151",
      "revId": "f6468d2569d3987aba29bdcd1198078cf6ae326c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "77946ebc_cc4cac02",
        "filename": "modules/pacing/packet_router.cc",
        "patchSetId": 14
      },
      "lineNbr": 153,
      "author": {
        "id": 5508
      },
      "writtenOn": "2019-08-16T09:27:19Z",
      "side": 1,
      "message": "I thought that the \u0027set\u0027 method for the sequence number, was only used for testing, so I tried renaming it \"ForTesting\", but that caused some trybots to break for external reasons.\n\nI was seeing multiple threads touching this variable (see other comment), which is why I\u0027m wondering if this is actually a problem or if some tests are simply not representative of how this runs in production.",
      "parentUuid": "032908fa_a67205e1",
      "revId": "f6468d2569d3987aba29bdcd1198078cf6ae326c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    }
  ]
}