{
  "comments": [
    {
      "key": {
        "uuid": "368baec1_75266d3b",
        "filename": "pc/peerconnection.cc",
        "patchSetId": 3
      },
      "lineNbr": 1006,
      "author": {
        "id": 5142
      },
      "writtenOn": "2017-12-13T20:03:40Z",
      "side": 1,
      "message": "If we\u0027re moving away from MediaStreamInterface, should we add a TODO to deprecate and remove AddTrack that takes MediaStreamInterface* in favor of a new AddTrack that takes std::vector\u003cstd::string\u003e?",
      "revId": "2f5ad4d6487ed104a40137369ed44a6538d023f1",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "56dff346_1bce6711",
        "filename": "pc/peerconnection.cc",
        "patchSetId": 3
      },
      "lineNbr": 1006,
      "author": {
        "id": 5039
      },
      "writtenOn": "2017-12-13T22:28:48Z",
      "side": 1,
      "message": "Done. Unfortunately, the new method needs to be called something else besides AddTrack (otherwise it conflicts with the current AddTrack). Any suggestions?",
      "parentUuid": "368baec1_75266d3b",
      "revId": "2f5ad4d6487ed104a40137369ed44a6538d023f1",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "da1bf7c0_4817d4cd",
        "filename": "pc/peerconnection.cc",
        "patchSetId": 3
      },
      "lineNbr": 1006,
      "author": {
        "id": 5142
      },
      "writtenOn": "2017-12-14T10:27:37Z",
      "side": 1,
      "message": "I think \"AddTrackWithStreamLabels\" is good. (I thought of that and of \"AddLocalTrack\".) Once the old is deprecated and removed we can rename it to \"AddTrack\" if we like.",
      "parentUuid": "56dff346_1bce6711",
      "revId": "2f5ad4d6487ed104a40137369ed44a6538d023f1",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9c6d3fa6_b22e657c",
        "filename": "pc/peerconnection.cc",
        "patchSetId": 3
      },
      "lineNbr": 1051,
      "author": {
        "id": 5142
      },
      "writtenOn": "2017-12-13T20:03:40Z",
      "side": 1,
      "message": "nit: I think this check and log belongs to AddTrackUnifiedPlan and AddTrackPlanB, rather than the calling place here. Or, if we keep these here, we should DCHECK the same things in the AddTrackUnifiedPlan/PlanB functions.",
      "revId": "2f5ad4d6487ed104a40137369ed44a6538d023f1",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "26f73d6b_ee3afc03",
        "filename": "pc/peerconnection.cc",
        "patchSetId": 3
      },
      "lineNbr": 1051,
      "author": {
        "id": 5039
      },
      "writtenOn": "2017-12-13T22:28:48Z",
      "side": 1,
      "message": "In general I would agree, but these functions are really just the body of an if statement like:\n\nif (IsUnifiedPlan()) { do this.. } else { do that.. }\n\nSo I don\u0027t think it\u0027s worth the repetition to DCHECK in the sub methods.",
      "parentUuid": "9c6d3fa6_b22e657c",
      "revId": "2f5ad4d6487ed104a40137369ed44a6538d023f1",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7e79764e_7f0b1fca",
        "filename": "pc/peerconnection.cc",
        "patchSetId": 3
      },
      "lineNbr": 1051,
      "author": {
        "id": 5142
      },
      "writtenOn": "2017-12-14T10:27:37Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "26f73d6b_ee3afc03",
      "revId": "2f5ad4d6487ed104a40137369ed44a6538d023f1",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "434b35ab_ae5d5279",
        "filename": "pc/peerconnection_rtp_unittest.cc",
        "patchSetId": 3
      },
      "lineNbr": 609,
      "author": {
        "id": 5142
      },
      "writtenOn": "2017-12-13T20:03:40Z",
      "side": 1,
      "message": "nit: If you do \"class PeerConnectionRtpUnifiedPlanTest : public PeerConnectionRtpTest {};\" then you can make \"UnifiedPlan\" part of the test suite name instead of each test name, this is what I did with PeerConnectionRtpCallbacksTest above (same file).",
      "revId": "2f5ad4d6487ed104a40137369ed44a6538d023f1",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "64b59a21_ed70dcd2",
        "filename": "pc/peerconnection_rtp_unittest.cc",
        "patchSetId": 3
      },
      "lineNbr": 609,
      "author": {
        "id": 5039
      },
      "writtenOn": "2017-12-13T22:28:48Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "434b35ab_ae5d5279",
      "revId": "2f5ad4d6487ed104a40137369ed44a6538d023f1",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dbabe7a6_73ce241c",
        "filename": "pc/peerconnection_rtp_unittest.cc",
        "patchSetId": 3
      },
      "lineNbr": 836,
      "author": {
        "id": 5142
      },
      "writtenOn": "2017-12-13T20:03:40Z",
      "side": 1,
      "message": "1. What about a test doing sender-\u003eSetTrack(nullptr); before RemoveTrack? The steps should be aborted before changing the direction of the transceiver.\n\n...hang on that doesn\u0027t make sense? Is this a spec bug or am I confused?\nSo if you s-\u003eSetTrack(nullptr) then RemoveTrack(s) is a NO-OP, and you can start sending again with s-\u003eSetTrack(track). But if you RemoveTrack(s) first and then do s-\u003eSetTrack(track) it doesn\u0027t work because the direction is incorrect and you would have to re-negotiate.\n\nCan you clear up the confusion for me, add a test or TODO, or file a spec bug?\n\n2. Speaking of re-negotiation, can you add tests making sure the negotiationneeded bit is updated on adding and removing tracks?",
      "revId": "2f5ad4d6487ed104a40137369ed44a6538d023f1",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "76236dee_95b13973",
        "filename": "pc/peerconnection_rtp_unittest.cc",
        "patchSetId": 3
      },
      "lineNbr": 836,
      "author": {
        "id": 5039
      },
      "writtenOn": "2017-12-13T22:28:48Z",
      "side": 1,
      "message": "1. I added a test that verifies RemoveTrack on a sender with a null track is a no-op. Regarding your example, I think the problem is that in the first case the direction is not changed (e.g., from sendrecv) but in the second case it is changed (e.g., to recvonly). When the new track is set with SetTrack (or replaceTrack in the spec), the direction is not changed so we end up with a track added on a transceiver that\u0027s configured recvonly. I don\u0027t know what the right answer is here, what do you think @pthatcher?\n\n2. Added expectations to a representative set of tests to check the negotiated needed callback is fired.",
      "parentUuid": "dbabe7a6_73ce241c",
      "revId": "2f5ad4d6487ed104a40137369ed44a6538d023f1",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    }
  ]
}