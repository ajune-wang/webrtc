{
  "comments": [
    {
      "key": {
        "uuid": "e267e3a0_0f0f8488",
        "filename": "pc/peer_connection.cc",
        "patchSetId": 1
      },
      "lineNbr": 6014,
      "author": {
        "id": 5087
      },
      "writtenOn": "2019-01-29T11:29:02Z",
      "side": 0,
      "message": "Hmm, so it seems this is not eligible for RVO with our version of GCC and we need to keep the cast to rvalue in place. WDYT?",
      "range": {
        "startLine": 6014,
        "startChar": 2,
        "endLine": 6014,
        "endChar": 33
      },
      "revId": "649a4c2ea3a9ff1e38c9f84cce51758975604eb7",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a0331fa9_d7d3bf98",
        "filename": "pc/peer_connection.cc",
        "patchSetId": 1
      },
      "lineNbr": 6014,
      "author": {
        "id": 5126
      },
      "writtenOn": "2019-01-29T13:40:24Z",
      "side": 0,
      "message": "`bundle_group` is a raw pointer, so I assume clang-tidy removes the std::move because it\u0027s ~useless for trivially copyable types. IOW, I think clang-tidy does the right thing here.",
      "parentUuid": "e267e3a0_0f0f8488",
      "range": {
        "startLine": 6014,
        "startChar": 2,
        "endLine": 6014,
        "endChar": 33
      },
      "revId": "649a4c2ea3a9ff1e38c9f84cce51758975604eb7",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dd17525a_b6b699e7",
        "filename": "pc/peer_connection.cc",
        "patchSetId": 1
      },
      "lineNbr": 6014,
      "author": {
        "id": 5087
      },
      "writtenOn": "2019-01-29T13:56:58Z",
      "side": 0,
      "message": "Yes, I also think it is doing the right thing. This is the error from GCC:\n\n../../pc/peer_connection.cc:6013:10: error: cannot bind \u0027const cricket::ContentGroup*\u0027 lvalue to \u0027const cricket::ContentGroup*\u0026\u0026\u0027\n   return bundle_group;\n          ^\nIn file included from ../../api/media_transport_interface.h:28:0,\n                 from ../../pc/peer_connection.h:20,\n                 from ../../pc/peer_connection.cc:11:\n../../api/rtc_error.h:223:3: error:   initializing argument 1 of \u0027webrtc::RTCErrorOr\u003cT\u003e::RTCErrorOr(T\u0026\u0026) [with T \u003d const cricket::ContentGroup*]\u0027\n   RTCErrorOr(T\u0026\u0026 value) : value_(std::move(value)) {}  // NOLINT\n\n\nIt looks like GCC requires the cast to rvalue, that\u0027s why I was thinking about RVO not being applied.",
      "parentUuid": "a0331fa9_d7d3bf98",
      "range": {
        "startLine": 6014,
        "startChar": 2,
        "endLine": 6014,
        "endChar": 33
      },
      "revId": "649a4c2ea3a9ff1e38c9f84cce51758975604eb7",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e78b4dd2_ae76750d",
        "filename": "pc/peer_connection.cc",
        "patchSetId": 1
      },
      "lineNbr": 6014,
      "author": {
        "id": 5126
      },
      "writtenOn": "2019-01-29T16:54:31Z",
      "side": 0,
      "message": "Aha. The return statement does an implicit conversion to RTCErrorOr, and there is an RTCErrorOr(T\u0026\u0026) constructor but no RTCErrorOr(const T\u0026) constructor. I would argue that the right fix is to create the latter; it is also what Google\u0027s internal StatusOr does.\n\nSo I rescind my earlier judgment; this one is also a wrong fix. Or, well, it\u0027s a partial fix. Once you add that new constructor, you can also remove the std::move call on this line.",
      "parentUuid": "dd17525a_b6b699e7",
      "range": {
        "startLine": 6014,
        "startChar": 2,
        "endLine": 6014,
        "endChar": 33
      },
      "revId": "649a4c2ea3a9ff1e38c9f84cce51758975604eb7",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    }
  ]
}