{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "02802a47_42693ef6",
        "filename": "logging/rtc_event_log/rtc_event_log_impl.cc",
        "patchSetId": 7
      },
      "lineNbr": 108,
      "author": {
        "id": 5019
      },
      "writtenOn": "2022-11-28T15:48:29Z",
      "side": 1,
      "message": "using InlineTaskQueue would block logging startup on IO. That is likely undesired.",
      "revId": "e7ea8522b35e69f8ff0429172c2f0c0027a305e4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b5821349_f82bcf61",
        "filename": "logging/rtc_event_log/rtc_event_log_impl.cc",
        "patchSetId": 7
      },
      "lineNbr": 108,
      "author": {
        "id": 9515
      },
      "writtenOn": "2022-11-29T20:57:26Z",
      "side": 1,
      "message": "Thanks, not intended. Done by adding PostTaskNoInline.",
      "parentUuid": "02802a47_42693ef6",
      "revId": "e7ea8522b35e69f8ff0429172c2f0c0027a305e4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "336a923e_88d26d80",
        "filename": "logging/rtc_event_log/rtc_event_log_impl.cc",
        "patchSetId": 7
      },
      "lineNbr": 150,
      "author": {
        "id": 5019
      },
      "writtenOn": "2022-11-28T15:48:29Z",
      "side": 1,
      "message": "may be it would be simpler/easier just to eliminate this PostTask:\nassume logging to memory is relatively fast (but has to be thread safe now), \nscheduling output suppose to be fast too,\ntask queue can be used just for logging to the output sink.",
      "range": {
        "startLine": 145,
        "startChar": 0,
        "endLine": 150,
        "endChar": 5
      },
      "revId": "e7ea8522b35e69f8ff0429172c2f0c0027a305e4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b79d7c56_51fe7ffb",
        "filename": "logging/rtc_event_log/rtc_event_log_impl.cc",
        "patchSetId": 7
      },
      "lineNbr": 150,
      "author": {
        "id": 9515
      },
      "writtenOn": "2022-11-29T20:57:26Z",
      "side": 1,
      "message": "Contributions welcome!",
      "parentUuid": "336a923e_88d26d80",
      "range": {
        "startLine": 145,
        "startChar": 0,
        "endLine": 150,
        "endChar": 5
      },
      "revId": "e7ea8522b35e69f8ff0429172c2f0c0027a305e4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "29e0e1b4_0389eadf",
        "filename": "logging/rtc_event_log/rtc_event_log_impl.h",
        "patchSetId": 7
      },
      "lineNbr": 91,
      "author": {
        "id": 5019
      },
      "writtenOn": "2022-11-28T14:30:15Z",
      "side": 1,
      "message": "because InlineTaskQueueAdapter::Delete just calls the destructor, may be allow to use `InlineTaskQueueAdapter` with an extra allocation: expose the destructor as public. Then this line can become `InlineTaskQueueAdapter task_queue_;`",
      "range": {
        "startLine": 91,
        "startChar": 2,
        "endLine": 91,
        "endChar": 72
      },
      "revId": "e7ea8522b35e69f8ff0429172c2f0c0027a305e4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e737eb22_5eaeeb72",
        "filename": "logging/rtc_event_log/rtc_event_log_impl.h",
        "patchSetId": 7
      },
      "lineNbr": 91,
      "author": {
        "id": 9515
      },
      "writtenOn": "2022-11-29T20:57:26Z",
      "side": 1,
      "message": "Done. Removed RtcEventLogImpl\u0027s dtor unique_ptr hack by not touching the task_queue_ member anymore from tasks.",
      "parentUuid": "29e0e1b4_0389eadf",
      "range": {
        "startLine": 91,
        "startChar": 2,
        "endLine": 91,
        "endChar": 72
      },
      "revId": "e7ea8522b35e69f8ff0429172c2f0c0027a305e4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5e91379a_aae86df0",
        "filename": "rtc_base/BUILD.gn",
        "patchSetId": 7
      },
      "lineNbr": 612,
      "author": {
        "id": 5019
      },
      "writtenOn": "2022-11-28T14:30:15Z",
      "side": 1,
      "message": "task_queue/ subfolder seems like a better place for this helper",
      "range": {
        "startLine": 612,
        "startChar": 13,
        "endLine": 612,
        "endChar": 38
      },
      "revId": "e7ea8522b35e69f8ff0429172c2f0c0027a305e4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "210cf612_324c54e3",
        "filename": "rtc_base/BUILD.gn",
        "patchSetId": 7
      },
      "lineNbr": 612,
      "author": {
        "id": 9515
      },
      "writtenOn": "2022-11-29T20:57:26Z",
      "side": 1,
      "message": "Ack. I don\u0027t think this very restricted class is something I want to expose from WebRTC (assuming you mean api/task_queue folder).",
      "parentUuid": "5e91379a_aae86df0",
      "range": {
        "startLine": 612,
        "startChar": 13,
        "endLine": 612,
        "endChar": 38
      },
      "revId": "e7ea8522b35e69f8ff0429172c2f0c0027a305e4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7f7524fe_6de8ba73",
        "filename": "rtc_base/inline_task_queue_adapter.cc",
        "patchSetId": 7
      },
      "lineNbr": 40,
      "author": {
        "id": 5019
      },
      "writtenOn": "2022-11-28T14:30:15Z",
      "side": 1,
      "message": "it it same as?\nPostTask\u003cabsl::AnyInvocable\u003cvoid() \u0026\u0026\u003e\u003e(std::move(task));",
      "range": {
        "startLine": 32,
        "startChar": 2,
        "endLine": 40,
        "endChar": 3
      },
      "revId": "e7ea8522b35e69f8ff0429172c2f0c0027a305e4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d0fe6924_a642637f",
        "filename": "rtc_base/inline_task_queue_adapter.cc",
        "patchSetId": 7
      },
      "lineNbr": 40,
      "author": {
        "id": 9515
      },
      "writtenOn": "2022-11-29T20:57:26Z",
      "side": 1,
      "message": "Yes, let me replace.",
      "parentUuid": "7f7524fe_6de8ba73",
      "range": {
        "startLine": 32,
        "startChar": 2,
        "endLine": 40,
        "endChar": 3
      },
      "revId": "e7ea8522b35e69f8ff0429172c2f0c0027a305e4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d31febd7_3309a612",
        "filename": "rtc_base/inline_task_queue_adapter.cc",
        "patchSetId": 7
      },
      "lineNbr": 80,
      "author": {
        "id": 5019
      },
      "writtenOn": "2022-11-28T14:30:15Z",
      "side": 1,
      "message": "prefer to wrap single line if statment into {} too.\n(this omission is allowed for \"historical reasons\" which I read that it shouldn\u0027t be used in new code)\n\nhttps://google.github.io/styleguide/cppguide.html#Conditionals",
      "range": {
        "startLine": 80,
        "startChar": 4,
        "endLine": 80,
        "endChar": 33
      },
      "revId": "e7ea8522b35e69f8ff0429172c2f0c0027a305e4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a682f936_d85f6a19",
        "filename": "rtc_base/inline_task_queue_adapter.cc",
        "patchSetId": 7
      },
      "lineNbr": 80,
      "author": {
        "id": 9515
      },
      "writtenOn": "2022-11-29T20:57:26Z",
      "side": 1,
      "message": "Done.",
      "parentUuid": "d31febd7_3309a612",
      "range": {
        "startLine": 80,
        "startChar": 4,
        "endLine": 80,
        "endChar": 33
      },
      "revId": "e7ea8522b35e69f8ff0429172c2f0c0027a305e4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a1267a78_4d06748f",
        "filename": "rtc_base/inline_task_queue_adapter.cc",
        "patchSetId": 7
      },
      "lineNbr": 111,
      "author": {
        "id": 5019
      },
      "writtenOn": "2022-11-28T14:30:15Z",
      "side": 1,
      "message": "can you please clarify:\nrealasing lock before decreasing does decrease chance of the contending the lock,\nbut\nreleasing lock before decreasing also increases chance PostTask would allocate WrappedImmediateTask that otherwise would be inlined.\n\nright? (commend doesn\u0027t make it clear if this way it \n\"to decrease chance of something that cause pointless...\"\nor is it\n\"to decrease chance of something, and to cause pointless...\"",
      "range": {
        "startLine": 109,
        "startChar": 27,
        "endLine": 111,
        "endChar": 0
      },
      "revId": "e7ea8522b35e69f8ff0429172c2f0c0027a305e4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fb34b0f2_a58ce6d0",
        "filename": "rtc_base/inline_task_queue_adapter.cc",
        "patchSetId": 7
      },
      "lineNbr": 111,
      "author": {
        "id": 9515
      },
      "writtenOn": "2022-11-29T20:57:26Z",
      "side": 1,
      "message": "Tried to clarify!",
      "parentUuid": "a1267a78_4d06748f",
      "range": {
        "startLine": 109,
        "startChar": 27,
        "endLine": 111,
        "endChar": 0
      },
      "revId": "e7ea8522b35e69f8ff0429172c2f0c0027a305e4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "07f9169a_bee9044e",
        "filename": "rtc_base/inline_task_queue_adapter.h",
        "patchSetId": 7
      },
      "lineNbr": 32,
      "author": {
        "id": 5019
      },
      "writtenOn": "2022-11-28T14:30:15Z",
      "side": 1,
      "message": "why add \u0027Adapter\u0027 suffix?\nName feels good enough without it. (this class is still the TaskQueue because it implements its interface)",
      "range": {
        "startLine": 32,
        "startChar": 6,
        "endLine": 32,
        "endChar": 28
      },
      "revId": "e7ea8522b35e69f8ff0429172c2f0c0027a305e4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "21a92d0c_8b13833d",
        "filename": "rtc_base/inline_task_queue_adapter.h",
        "patchSetId": 7
      },
      "lineNbr": 32,
      "author": {
        "id": 5019
      },
      "writtenOn": "2022-11-28T14:30:15Z",
      "side": 1,
      "message": "drop the namespace",
      "range": {
        "startLine": 32,
        "startChar": 38,
        "endLine": 32,
        "endChar": 47
      },
      "revId": "e7ea8522b35e69f8ff0429172c2f0c0027a305e4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "833b384f_f882f7e2",
        "filename": "rtc_base/inline_task_queue_adapter.h",
        "patchSetId": 7
      },
      "lineNbr": 32,
      "author": {
        "id": 9515
      },
      "writtenOn": "2022-11-29T20:57:26Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "21a92d0c_8b13833d",
      "range": {
        "startLine": 32,
        "startChar": 38,
        "endLine": 32,
        "endChar": 47
      },
      "revId": "e7ea8522b35e69f8ff0429172c2f0c0027a305e4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1117e40d_08639d68",
        "filename": "rtc_base/inline_task_queue_adapter.h",
        "patchSetId": 7
      },
      "lineNbr": 46,
      "author": {
        "id": 5019
      },
      "writtenOn": "2022-11-28T14:30:15Z",
      "side": 1,
      "message": "personally prefer to use keyword \u0027typename\u0027 - prefer not to think about Lambda type as a class.",
      "range": {
        "startLine": 46,
        "startChar": 12,
        "endLine": 46,
        "endChar": 17
      },
      "revId": "e7ea8522b35e69f8ff0429172c2f0c0027a305e4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "36df7881_3dcf7431",
        "filename": "rtc_base/inline_task_queue_adapter.h",
        "patchSetId": 7
      },
      "lineNbr": 46,
      "author": {
        "id": 9515
      },
      "writtenOn": "2022-11-29T20:57:26Z",
      "side": 1,
      "message": "Done.",
      "parentUuid": "1117e40d_08639d68",
      "range": {
        "startLine": 46,
        "startChar": 12,
        "endLine": 46,
        "endChar": 17
      },
      "revId": "e7ea8522b35e69f8ff0429172c2f0c0027a305e4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9a28aff1_831200ce",
        "filename": "rtc_base/inline_task_queue_adapter.h",
        "patchSetId": 7
      },
      "lineNbr": 75,
      "author": {
        "id": 5019
      },
      "writtenOn": "2022-11-28T14:30:15Z",
      "side": 1,
      "message": "you make this class open to all classes that can see it.\nMay be make it a struct then? (or do not befriend and add wrappers to access queue_size_)",
      "range": {
        "startLine": 73,
        "startChar": 0,
        "endLine": 75,
        "endChar": 36
      },
      "revId": "e7ea8522b35e69f8ff0429172c2f0c0027a305e4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "40de3af3_f8d56fbc",
        "filename": "rtc_base/inline_task_queue_adapter.h",
        "patchSetId": 7
      },
      "lineNbr": 75,
      "author": {
        "id": 9515
      },
      "writtenOn": "2022-11-29T20:57:26Z",
      "side": 1,
      "message": "If you\u0027re okay with struct I\u0027m too.",
      "parentUuid": "9a28aff1_831200ce",
      "range": {
        "startLine": 73,
        "startChar": 0,
        "endLine": 75,
        "endChar": 36
      },
      "revId": "e7ea8522b35e69f8ff0429172c2f0c0027a305e4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b6e996bf_ed82d944",
        "filename": "rtc_base/inline_task_queue_adapter.h",
        "patchSetId": 7
      },
      "lineNbr": 80,
      "author": {
        "id": 5019
      },
      "writtenOn": "2022-11-28T14:30:15Z",
      "side": 1,
      "message": "I wonder if atomic can be avoided ( https://abseil.io/docs/cpp/atomic_danger )\nin particular that article mention that atomic with default memory ordering might be less perfomant than lock with a non-atomic integer.\n\nHave you done and benchmark to motivate the need of the atomic?",
      "range": {
        "startLine": 80,
        "startChar": 4,
        "endLine": 80,
        "endChar": 20
      },
      "revId": "e7ea8522b35e69f8ff0429172c2f0c0027a305e4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9ca910b9_ba520afb",
        "filename": "rtc_base/inline_task_queue_adapter.h",
        "patchSetId": 7
      },
      "lineNbr": 80,
      "author": {
        "id": 9515
      },
      "writtenOn": "2022-11-29T20:57:26Z",
      "side": 1,
      "message": "As I wrote the atomic is used to avoid lock inversion between the queue size mutex and the task mutex which was a problem I hit in TSAN.\nThe overhead of the atomic is much less than the saved overhead of PostTasking which is on the order of 200 microseconds on non-Intel according to the Catan team (see https://groups.google.com/a/google.com/g/chrome-catan/c/bcuA7dtO3PM).",
      "parentUuid": "b6e996bf_ed82d944",
      "range": {
        "startLine": 80,
        "startChar": 4,
        "endLine": 80,
        "endChar": 20
      },
      "revId": "e7ea8522b35e69f8ff0429172c2f0c0027a305e4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c4d91e2e_18b27ddd",
        "filename": "rtc_base/inline_task_queue_adapter.h",
        "patchSetId": 7
      },
      "lineNbr": 97,
      "author": {
        "id": 5019
      },
      "writtenOn": "2022-11-28T14:30:15Z",
      "side": 1,
      "message": "do you ever pass \u0027false\u0027 in this parameter?",
      "range": {
        "startLine": 97,
        "startChar": 8,
        "endLine": 97,
        "endChar": 29
      },
      "revId": "e7ea8522b35e69f8ff0429172c2f0c0027a305e4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "668ab9f1_96b66be2",
        "filename": "rtc_base/inline_task_queue_adapter.h",
        "patchSetId": 7
      },
      "lineNbr": 97,
      "author": {
        "id": 9515
      },
      "writtenOn": "2022-11-29T20:57:26Z",
      "side": 1,
      "message": "This was leftover stuff from a previous iteration, but now I am, yes :)",
      "parentUuid": "c4d91e2e_18b27ddd",
      "range": {
        "startLine": 97,
        "startChar": 8,
        "endLine": 97,
        "endChar": 29
      },
      "revId": "e7ea8522b35e69f8ff0429172c2f0c0027a305e4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1ce0dc5f_6cd8e939",
        "filename": "rtc_base/inline_task_queue_adapter.h",
        "patchSetId": 7
      },
      "lineNbr": 121,
      "author": {
        "id": 5019
      },
      "writtenOn": "2022-11-28T14:30:15Z",
      "side": 1,
      "message": "may be `void operator()() \u0026\u0026` to stress it is called at most once and class is not usable afterwards.",
      "range": {
        "startLine": 121,
        "startChar": 4,
        "endLine": 121,
        "endChar": 22
      },
      "revId": "e7ea8522b35e69f8ff0429172c2f0c0027a305e4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "96f08bef_bad0f6fa",
        "filename": "rtc_base/inline_task_queue_adapter_unittest.cc",
        "patchSetId": 7
      },
      "lineNbr": 39,
      "author": {
        "id": 5019
      },
      "writtenOn": "2022-11-28T14:30:15Z",
      "side": 1,
      "message": "would this work?\n\n```\nTEST(InlineTaskQueueAdapterTest, RunsAnyInvocable) {\n  InlineTaskQueueAdapter adapter(\n      CreateDefaultTaskQueueFactory()-\u003eCreateTaskQueue(\n          \"test\", TaskQueueFactory::Priority::NORMAL));\n\n  bool called \u003d false;\n  absl::AnyInvocable\u003cvoid() \u0026\u0026\u003e task \u003d [\u0026] { called \u003d true; };\n  adapter.PostTask(std::move(task));\n  EXPECT_TRUE(called);\n}\n```",
      "range": {
        "startLine": 27,
        "startChar": 0,
        "endLine": 39,
        "endChar": 1
      },
      "revId": "e7ea8522b35e69f8ff0429172c2f0c0027a305e4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9fd9d5fa_8c6d5b06",
        "filename": "rtc_base/inline_task_queue_adapter_unittest.cc",
        "patchSetId": 7
      },
      "lineNbr": 39,
      "author": {
        "id": 9515
      },
      "writtenOn": "2022-11-29T20:57:26Z",
      "side": 1,
      "message": "I would have used a thread checker but somebody deleted it. Used CurrentThreadId from the below suggestion instead.",
      "parentUuid": "96f08bef_bad0f6fa",
      "range": {
        "startLine": 27,
        "startChar": 0,
        "endLine": 39,
        "endChar": 1
      },
      "revId": "e7ea8522b35e69f8ff0429172c2f0c0027a305e4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0fd82eef_b9263875",
        "filename": "rtc_base/inline_task_queue_adapter_unittest.cc",
        "patchSetId": 7
      },
      "lineNbr": 68,
      "author": {
        "id": 5019
      },
      "writtenOn": "2022-11-28T14:30:15Z",
      "side": 1,
      "message": "if the inner task won\u0027t run, this test would hang forever (or rather until test timeout, which would be minutes).\nMay be wait for a shorter time, e.g.\n```\nconstexpr TimeDelta kAlmostForever \u003d TimeDelta::Seconds(1);\n\nASSERT_TRUE(event.Wait(kAlmostForever));\n```",
      "range": {
        "startLine": 68,
        "startChar": 0,
        "endLine": 68,
        "endChar": 35
      },
      "revId": "e7ea8522b35e69f8ff0429172c2f0c0027a305e4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ec74f307_7a3b20a3",
        "filename": "rtc_base/inline_task_queue_adapter_unittest.cc",
        "patchSetId": 7
      },
      "lineNbr": 68,
      "author": {
        "id": 9515
      },
      "writtenOn": "2022-11-29T20:57:26Z",
      "side": 1,
      "message": "Sure, fixed.",
      "parentUuid": "0fd82eef_b9263875",
      "range": {
        "startLine": 68,
        "startChar": 0,
        "endLine": 68,
        "endChar": 35
      },
      "revId": "e7ea8522b35e69f8ff0429172c2f0c0027a305e4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1ecb9001_cb45b153",
        "filename": "rtc_base/inline_task_queue_adapter_unittest.cc",
        "patchSetId": 7
      },
      "lineNbr": 87,
      "author": {
        "id": 5019
      },
      "writtenOn": "2022-11-28T14:30:15Z",
      "side": 1,
      "message": "event.Set() called right after `called` assigned to true, so this looks redundant with the previous expectation.",
      "revId": "e7ea8522b35e69f8ff0429172c2f0c0027a305e4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c5212381_132c0525",
        "filename": "rtc_base/inline_task_queue_adapter_unittest.cc",
        "patchSetId": 7
      },
      "lineNbr": 87,
      "author": {
        "id": 9515
      },
      "writtenOn": "2022-11-29T20:57:26Z",
      "side": 1,
      "message": "Done.",
      "parentUuid": "1ecb9001_cb45b153",
      "revId": "e7ea8522b35e69f8ff0429172c2f0c0027a305e4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9ad50603_ae49255b",
        "filename": "rtc_base/inline_task_queue_adapter_unittest.cc",
        "patchSetId": 7
      },
      "lineNbr": 205,
      "author": {
        "id": 5019
      },
      "writtenOn": "2022-11-28T14:30:15Z",
      "side": 1,
      "message": "I suspect `thread` is null here (rtc::Thread is unused, no code sets Thread::Current)\nso validating inside task below that rtc::Thread::Current is still null doesn\u0027t ensure it is the same thread.\n\nmay be use `PlatformThreadId CurrentThreadId();` from platform_thread_types",
      "range": {
        "startLine": 205,
        "startChar": 0,
        "endLine": 205,
        "endChar": 40
      },
      "revId": "e7ea8522b35e69f8ff0429172c2f0c0027a305e4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "28c058bf_277518d6",
        "filename": "rtc_base/inline_task_queue_adapter_unittest.cc",
        "patchSetId": 7
      },
      "lineNbr": 205,
      "author": {
        "id": 9515
      },
      "writtenOn": "2022-11-29T20:57:26Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9ad50603_ae49255b",
      "range": {
        "startLine": 205,
        "startChar": 0,
        "endLine": 205,
        "endChar": 40
      },
      "revId": "e7ea8522b35e69f8ff0429172c2f0c0027a305e4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "128bdc93_9bf5a8dd",
        "filename": "rtc_base/inline_task_queue_adapter_unittest.cc",
        "patchSetId": 7
      },
      "lineNbr": 216,
      "author": {
        "id": 5019
      },
      "writtenOn": "2022-11-28T14:30:15Z",
      "side": 1,
      "message": "override",
      "range": {
        "startLine": 216,
        "startChar": 2,
        "endLine": 216,
        "endChar": 9
      },
      "revId": "e7ea8522b35e69f8ff0429172c2f0c0027a305e4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d0c62484_70e6dd2a",
        "filename": "rtc_base/inline_task_queue_adapter_unittest.cc",
        "patchSetId": 7
      },
      "lineNbr": 216,
      "author": {
        "id": 9515
      },
      "writtenOn": "2022-11-29T20:57:26Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "128bdc93_9bf5a8dd",
      "range": {
        "startLine": 216,
        "startChar": 2,
        "endLine": 216,
        "endChar": 9
      },
      "revId": "e7ea8522b35e69f8ff0429172c2f0c0027a305e4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    }
  ]
}