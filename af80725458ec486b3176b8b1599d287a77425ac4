{
  "comments": [
    {
      "key": {
        "uuid": "c0cb993e_072253f4",
        "filename": "rtc_base/experiments/field_trial_parser.h",
        "patchSetId": 2
      },
      "lineNbr": 40,
      "author": {
        "id": 5126
      },
      "writtenOn": "2018-10-05T13:38:50Z",
      "side": 1,
      "message": "Allowing copy construction and assignment for a class that\u0027s intended to be subclassed seems like a bad idea.\n\n\"Due to the risk of slicing, prefer to avoid providing a public assignment operator or copy/move constructor for a class that\u0027s intended to be derived from\"\n    -- https://google.github.io/styleguide/cppguide.html#Copyable_Movable_Types\n\nWhat\u0027s the use case?",
      "revId": "af80725458ec486b3176b8b1599d287a77425ac4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cf7e3827_2c66e407",
        "filename": "rtc_base/experiments/field_trial_parser.h",
        "patchSetId": 2
      },
      "lineNbr": 40,
      "author": {
        "id": 5531
      },
      "writtenOn": "2018-10-05T13:49:30Z",
      "side": 1,
      "message": "I want to use it in SendSideBandwidthEstimation. Which is used in copy assignment. I can make the operators protected here and move the public copy and assignment to the child classes if you prefer that?",
      "parentUuid": "c0cb993e_072253f4",
      "revId": "af80725458ec486b3176b8b1599d287a77425ac4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6460cfc8_ff770a60",
        "filename": "rtc_base/experiments/field_trial_parser.h",
        "patchSetId": 2
      },
      "lineNbr": 40,
      "author": {
        "id": 5126
      },
      "writtenOn": "2018-10-05T13:53:55Z",
      "side": 1,
      "message": "Yes, that sounds like it should provide sufficient guard rails. (But making them protected is not a common thing to do, so be sure to explain in a comment that the intended use case is for subclasses to be able to implement their own, public, copy construction/assignment.)\n\n(This is one of the reasons why one should avoid superclasses with state...)",
      "parentUuid": "cf7e3827_2c66e407",
      "revId": "af80725458ec486b3176b8b1599d287a77425ac4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "54915968_4a5ffd20",
        "filename": "rtc_base/experiments/field_trial_parser.h",
        "patchSetId": 2
      },
      "lineNbr": 40,
      "author": {
        "id": 5531
      },
      "writtenOn": "2018-10-05T14:04:20Z",
      "side": 1,
      "message": "Making them protected would be just as required for a class without state, right? If they are deleted from the base class, dervide classes won\u0027t be copyable either? Or is the compiler clever enough to figure out that deleted the copy constructors on a stateless class shouldn\u0027t hinder sub classes from being copied?",
      "parentUuid": "6460cfc8_ff770a60",
      "revId": "af80725458ec486b3176b8b1599d287a77425ac4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "361eac9e_89788287",
        "filename": "rtc_base/experiments/field_trial_parser.h",
        "patchSetId": 2
      },
      "lineNbr": 40,
      "author": {
        "id": 5126
      },
      "writtenOn": "2018-10-06T14:39:57Z",
      "side": 1,
      "message": "Copy constructor and copy assignment are implicitly declared unless something prevents that (user-declared move constructor, for example). Example: https://godbolt.org/z/8qIb_f\n\nSo for a stateless superclass, you don\u0027t have to do anything, since you won\u0027t be doing any of the things that would prevent copy constructor and copy assignment from being implicitly declared.",
      "parentUuid": "54915968_4a5ffd20",
      "revId": "af80725458ec486b3176b8b1599d287a77425ac4",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    }
  ]
}