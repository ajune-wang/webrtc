{
  "comments": [
    {
      "key": {
        "uuid": "e6d6eacc_24128aea",
        "filename": "media/engine/simulcast_encoder_adapter_unittest.cc",
        "patchSetId": 5
      },
      "lineNbr": 58,
      "author": {
        "id": 5098
      },
      "writtenOn": "2018-05-22T09:02:35Z",
      "side": 1,
      "message": "Maybe this logic is still something that should go into a fixture for these tests? So that each test case is only one line of code.",
      "range": {
        "startLine": 39,
        "startChar": 0,
        "endLine": 58,
        "endChar": 71
      },
      "revId": "60ac2611b1ca693c07540525c2d175b6f406a354",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8a7f613b_e58de384",
        "filename": "media/engine/simulcast_encoder_adapter_unittest.cc",
        "patchSetId": 5
      },
      "lineNbr": 58,
      "author": {
        "id": 5023
      },
      "writtenOn": "2018-05-22T12:29:02Z",
      "side": 1,
      "message": "Something like this? I\u0027m not sure it is any cleaner, even though we do save some lines in the test invocations.\n\nclass SimulcastEncoderAdapterSimulcastTest : public ::testing::Gtest {\n public:\n  SimulcastEncoderAdapterSimulcastTest() : encoder_factory_(CreateEncoderFactory()), decoder_factory_(CreateDecoderFactory()), fixture_(std::move(encoder_factory_), std::move(decoder_factory_)) {}\n\n protected:\n  std::unique_ptr\u003cSimulcastTestFixture\u003e fixture_;\n\n private:\n  std::unique_ptr\u003cVideoEncoderFactory\u003e CreateEncoderFactory() {\n  return\n      rtc::MakeUnique\u003cFunctionVideoEncoderFactory\u003e(\n          [internal_encoder_factory_]() {\n            return rtc::MakeUnique\u003cSimulcastEncoderAdapter\u003e(\n                internal_encoder_factory);\n          });\n  };\n\n  std::unique_ptr\u003cVideoDecoderFactory\u003e CreateDecoderFactory() {\n  return\n    rtc::MakeUnique\u003cFunctionVideoDecoderFactory\u003e(\n          []() { return VP8Decoder::Create(); });\n};\n\n  std::unique_ptr\u003cVideoEncoderFactory\u003e encoder_factory_;\n  std::unique_ptr\u003cVideoDecoderFactory\u003e decoder_factory_;\n  InternalEncoderFactory internal_encoder_factory_;\n};\n\nTEST_F(SimulcastEncoderAdapterSimulcastTest, TestPaddingAllStreams) {\n  fixture_-\u003eTestPaddingAllStreams();\n}\n\nTEST_F(SimulcastEncoderAdapterSimulcastTest, TestPaddingTwoStreams) {\n  fixture_-\u003eTestPaddingTwoStreams();\n}",
      "parentUuid": "e6d6eacc_24128aea",
      "range": {
        "startLine": 39,
        "startChar": 0,
        "endLine": 58,
        "endChar": 71
      },
      "revId": "60ac2611b1ca693c07540525c2d175b6f406a354",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b484890b_e17fc3eb",
        "filename": "media/engine/simulcast_encoder_adapter_unittest.cc",
        "patchSetId": 5
      },
      "lineNbr": 58,
      "author": {
        "id": 5023
      },
      "writtenOn": "2018-05-23T07:08:39Z",
      "side": 1,
      "message": "Relevant TotW: https://abseil.io/tips/122.\n\n\"\"\"You can generally improve test clarity by following these steps:\n- Avoid fixtures where reasonable. Sometimes it’s not.\n- If you are using fixtures, try to avoid fixture member variables. It is far too easy to start operating on those in ways akin to globals: data flow is hard to track since absolutely any code path in the fixture may modify the member.\n- If you’ve got variables that need complex initialization that would make each test hard to read, consider a helper function (not part of the fixture) that documents that initialization and returns the object directly.\n- If you must have fixtures that contain member variables, try to avoid methods that operate on those members directly: pass them in as parameters whenever possible to make the dataflow clear.\"\"\"",
      "parentUuid": "8a7f613b_e58de384",
      "range": {
        "startLine": 39,
        "startChar": 0,
        "endLine": 58,
        "endChar": 71
      },
      "revId": "60ac2611b1ca693c07540525c2d175b6f406a354",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bf770a82_cc0508b7",
        "filename": "media/engine/simulcast_encoder_adapter_unittest.cc",
        "patchSetId": 5
      },
      "lineNbr": 58,
      "author": {
        "id": 5098
      },
      "writtenOn": "2018-05-23T14:00:53Z",
      "side": 1,
      "message": "You are already using a fixture in the current code, at least you call it \u0027auto fixture \u003d CreateSimulcastTestFixture()\u0027. Is there any longer discussion around this design that you can point to? It feels like we are violating many test practices already since these tests are completely opaque and just calling into a method in a test fixture.",
      "parentUuid": "b484890b_e17fc3eb",
      "range": {
        "startLine": 39,
        "startChar": 0,
        "endLine": 58,
        "endChar": 71
      },
      "revId": "60ac2611b1ca693c07540525c2d175b6f406a354",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "04948515_e8c97c53",
        "filename": "media/engine/simulcast_encoder_adapter_unittest.cc",
        "patchSetId": 5
      },
      "lineNbr": 58,
      "author": {
        "id": 5023
      },
      "writtenOn": "2018-05-23T14:53:03Z",
      "side": 1,
      "message": "Sure, and that is kind of the reason for the CL: the fixture can be reused between clients, who supply their own encoder factory. The reference to the TotW was about the \"fixture-in-fixture\" type of code in the comment above.\n\nI\u0027ll send you a design doc out-of-band, for some context :)",
      "parentUuid": "bf770a82_cc0508b7",
      "range": {
        "startLine": 39,
        "startChar": 0,
        "endLine": 58,
        "endChar": 71
      },
      "revId": "60ac2611b1ca693c07540525c2d175b6f406a354",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    }
  ]
}