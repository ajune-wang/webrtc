{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "cfa77b3f_1cc2d608",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 19
      },
      "lineNbr": 0,
      "author": {
        "id": 6305
      },
      "writtenOn": "2021-12-06T13:24:26Z",
      "side": 1,
      "message": "Hello Henrik and KÃ¡ri.\n\nCould you please review this CL? In this CL I\u0027m trying to fix microphone recording indicator on iOS 13+ in scenarios, where microphone recording is not required by host application, or required only on demand (more details can be found in bug description). I\u0027m sorry this CL is big and will require time for review, but I hope with your help and feedback it will be possible to make this CL accepted.\n\nThanks a lot in advance,\nYury.",
      "revId": "77a172602bc463ca7d5d9e8539448a522f92e20c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ea6a7ab7_90d45b31",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 19
      },
      "lineNbr": 0,
      "author": {
        "id": 5091
      },
      "writtenOn": "2021-12-06T13:43:13Z",
      "side": 1,
      "message": "Thanks for your contributions. It looks very impressive and I am sure it is good stuff but I am currently unable to invest time into reviewing this complex change since I have not actively been working on iOS for a long time. Hence, there is a big risk that I miss some detail that might break existing clients using the iOS implementation in sdk/objc.\n\nHave you verified that all existing unittests work and that the WebRTC Mobile test client can be build based on these changes?\n\nI have seen other changes in this area where users who needs separate control of Playout and Recording instead injects their own ADM implementation into PeerConnection. That way, you can work on an independent ADM implementation without any risk of breaking existing clients. ",
      "revId": "77a172602bc463ca7d5d9e8539448a522f92e20c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b3b53beb_3007f9cf",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 19
      },
      "lineNbr": 0,
      "author": {
        "id": 6305
      },
      "writtenOn": "2021-12-06T15:10:46Z",
      "side": 1,
      "message": "\u003e Have you verified that all existing unittests work and that the WebRTC Mobile test client can be build based on these changes?\n\nNot sure which exact tests do you mean, but this CL is passing dry run, which I suppose execute all the unit tests presented in code base.\nI\u0027ve also manually checked AppRTCMobile still works fine.\nIn addition to that I\u0027ve tested WebRTC.xcframework with these changes in context of another large proprietary application which has CallKit based 1-on-1 calls, group calls and kind of streaming over WebRTC. I\u0027ve checked how WebRTC in app works in background/foreground, when different BT devices connected/disconneced, when speaker is on/off. Everything seems to work fine.\n\n\u003e I have seen other changes in this area where users who needs separate control of Playout and Recording instead injects their own ADM implementation into PeerConnection. That way, you can work on an independent ADM implementation without any risk of breaking existing clients.\n\nYeah, I also considered this option. But the problem is that I\u0027m trying to avoid having custom WebRTC builds and I rely heavily on public API of WebRTC SDK. Currently replacing ADM is only possible by patching WebRTC code, there is no build in means in public API of SDK to replace ADM.\nIn near future I consider working on CL which will allow injecting custom ADM represented by newly added ADM protocol. So any user of SDK could replace default ADM with custom implementation.\n\nBut I believe that this CL still has value, because for most of the users it will fix the playout/recording separation out of the box of SDK, so they will not need to be bothered with complicated ways to implement and substitute their own ADM.",
      "parentUuid": "ea6a7ab7_90d45b31",
      "revId": "77a172602bc463ca7d5d9e8539448a522f92e20c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f5b1f265_e9c2bb73",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 19
      },
      "lineNbr": 0,
      "author": {
        "id": 5091
      },
      "writtenOn": "2021-12-06T15:58:28Z",
      "side": 1,
      "message": "\"Currently replacing ADM is only possible by patching WebRTC code, there is no build in means in public API of SDK to replace ADM.\"\n\nThat is simply not true and I am aware of several clients which injects their own ADM today. Even the WebRTC Mobile sample injects an external ADM and that ADM can be replaced by your version as an example.\n\nsee https://bugs.chromium.org/p/webrtc/issues/detail?id\u003d7452 for details.\n\nI am not saying that you CL does not add value but my point is that it is better if each client with special requirements maintain their ADM locally and injects since there is risk of breaking millions of existing clients otherwise.\n\nTo land a large CL like this should preferable be done in several small steps using experiments where each step must be carefully monitored for regressions. And to launch such an activity, the owners of this code path must see a need for said changes.",
      "parentUuid": "b3b53beb_3007f9cf",
      "revId": "77a172602bc463ca7d5d9e8539448a522f92e20c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ef4a2f7c_cbcb096a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 19
      },
      "lineNbr": 0,
      "author": {
        "id": 5091
      },
      "writtenOn": "2021-12-06T16:17:36Z",
      "side": 1,
      "message": "Today, the external ADM is injected here [1] in the test client and any new ADM which implements the interface can be injected the same way. This is for Java but same goes for iOS (I am less familiar with that code path).\n\nTo summarize my standpoint:\n\n- Lot\u0027s of work has been done to break out the ADM and to make it injectable for Android and iOS clients.\n- Each client has their own unique requirements and to avoid breaking clients that uses the default ADM, I recommend maintaining these changes locally instead.\n\n[1] https://source.chromium.org/chromium/chromium/src/+/main:third_party/webrtc/examples/androidapp/src/org/appspot/apprtc/PeerConnectionClient.java;l\u003d451;drc\u003df9e502d935fa9ca8d9cc7540680021b93d285f28",
      "parentUuid": "f5b1f265_e9c2bb73",
      "revId": "77a172602bc463ca7d5d9e8539448a522f92e20c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8a5f51af_7835ef8e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 19
      },
      "lineNbr": 0,
      "author": {
        "id": 6305
      },
      "writtenOn": "2021-12-06T18:45:02Z",
      "side": 1,
      "message": "\u003e That is simply not true and I am aware of several clients which injects their own ADM today.\n\nSorry, I was not clear enough in my statement. I mean the following scenario: I have libwebrtc.aar or WebRTC.xcframework artifacts pre-built in advance with build_ios_libs.py [1] and build_aar.py [2]. The host application is pure Java/ObjC/Swift application which references WebRTC as binary pre-built artifact: WebRTC.xcframework or libwebrtc.aar.\nIs there a way to replace ADM in this case? I might be wrong, but from what I\u0027ve seen, it is only possible, if you have an access to WebRTC C++ headers and write custom ADM in C++ and compile it with the rest of WebRTC code, which isn\u0027t the case when you use pre-built SDK compiled from unmodified WebRTC source code. \n\nIdeally, in my opinion, SDK should provide real interface to implement custom ADM in pure Java/Objective-C where it\u0027s possible to pull \u0026 push audio samples from/to WebRTC. Not something which just return pointer to C++ object which implements webrtc::AudioDeviceModule [3]. But maybe I didn\u0027t get the concept behind then ADM injection currently implemented. As I see currently exposed ADM interface from SDK does not solve this problem, because it seems like it\u0027s mandatory to implement somehow webrtc::AudioDeviceModule, which is impossible when you don\u0027t have access to C++ headers.\n\n\u003e To land a large CL like this should preferable be done in several small steps using experiments where each step must be carefully monitored for regressions. \n\nI could try doing this, but seems like anyway the CL with second audio unit added will be relatively large CL. Right now I see that at least extraction of BaseAudioUnit could be done as completely separate CL, which should be medium size, but mostly consist of re-arranging existing code and don\u0027t require much experiments and tests.\nAlternatively, maybe it\u0027s possible to have parallel implementation of audio_device_ios.mm (audio_device_ios_two_units.mm) which is based on 2 audio units? By default old audio_device_ios will be instantiated, but SDK will provide some flag to trigger instantiation 2 audio units ADM? Android has something similar in a sense, that there are multiple ADM implementations based on different Android APIs.\n\n\u003e And to launch such an activity, the owners of this code path must see a need for said changes.\n\nCould you please clarify, which person or persons do you mean here by owners? Maybe some additional persons should be CC\u0027ed...\nWill the need for the change grow if issue in bug tracker will receive more votes?\n\n[1] https://source.chromium.org/chromium/chromium/src/+/main:third_party/webrtc/tools_webrtc/ios/build_ios_libs.py;l\u003d1;drc\u003d9c4e89d302131f0d7cc45e5717a3df3fe359fe09\n[2] https://source.chromium.org/chromium/chromium/src/+/main:third_party/webrtc/tools_webrtc/android/build_aar.py;l\u003d13;drc\u003d686ad4ff064471d1d80292a43bbd3796ec199446\n[3] https://source.chromium.org/chromium/chromium/src/+/main:third_party/webrtc/sdk/android/api/org/webrtc/audio/AudioDeviceModule.java;l\u003d22;drc\u003df9e502d935fa9ca8d9cc7540680021b93d285f28",
      "parentUuid": "ef4a2f7c_cbcb096a",
      "revId": "77a172602bc463ca7d5d9e8539448a522f92e20c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3cdf3749_d9eccf16",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 19
      },
      "lineNbr": 0,
      "author": {
        "id": 5091
      },
      "writtenOn": "2021-12-07T10:19:19Z",
      "side": 1,
      "message": "I will not be able to comment on all details above but will summarize my standpoint instead.\n\n* This CL contains many great ideas and it is of high quality. You seem to know this area well but that is not the issue here. We simply can\u0027t support all possible ideas and proposals of how to implement the native ADMs. That is the main reason why we have invested time on making it injectable.\n* The fact that a change *can* be implemented does not necessarily mean that it is the worth the risk to actually *land* the implementation.  \n* I don\u0027t know the latest status of how well the frameworks are supported for iOS or Android and can\u0027t comment on details related to how to build or use them.\n* There might be ways to improve exactly how the ADM is injected; all I know is that several different clients are using the existing solution and are injecting unique ADM implementations in their applications. I assume they are not using any prebuilt framework.\n* To launch extensive changes like these requires a detailed plan and knowhow of metrics for all clients that are using the default ADM today. This is hard to manage for external users and to avoid issues, we have added the possibility to inject the ADM instead so that each client can implement their own unique support.\n* Feel free to continue the discussion in the issue you have created. I can\u0027t see any other way forward than for you to use the existing pattern and inject your own ADM even if it might either exclude you from using the prebuild or lead to more changes in how the framework is generated.",
      "parentUuid": "8a5f51af_7835ef8e",
      "revId": "77a172602bc463ca7d5d9e8539448a522f92e20c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    }
  ]
}