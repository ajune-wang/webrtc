{
  "comments": [
    {
      "key": {
        "uuid": "e88b6743_dfcf5586",
        "filename": "api/video_codecs/video_encoder.h",
        "patchSetId": 2
      },
      "lineNbr": 134,
      "author": {
        "id": 5023
      },
      "writtenOn": "2018-10-19T09:45:12Z",
      "side": 1,
      "message": "This is outside this CL, but I think we should move to the VideoEncoder being responsible itself to do the ToI420() call, if needed. Then we can get rid of this.",
      "range": {
        "startLine": 132,
        "startChar": 4,
        "endLine": 134,
        "endChar": 32
      },
      "revId": "c5bee91fdc4b30e02d28433dda2ddf2f8383f85c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3d075acb_bbfe4910",
        "filename": "api/video_codecs/video_encoder.h",
        "patchSetId": 2
      },
      "lineNbr": 134,
      "author": {
        "id": 5234
      },
      "writtenOn": "2018-10-22T11:14:09Z",
      "side": 1,
      "message": "Absolutely. A plain encoder that wants only I420 should always call ToI420 to get the pixels. And will then handle native as well as the other formats currently available (besides kNative and kI420, we now have kI420A, kI444, kI010). \n\nSo this should be fairly easy to delete. Any encoders currently using GetI420() have to be changed to ToI420().",
      "parentUuid": "e88b6743_dfcf5586",
      "range": {
        "startLine": 132,
        "startChar": 4,
        "endLine": 134,
        "endChar": 32
      },
      "revId": "c5bee91fdc4b30e02d28433dda2ddf2f8383f85c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0fa25874_28374d12",
        "filename": "api/video_codecs/video_encoder.h",
        "patchSetId": 2
      },
      "lineNbr": 137,
      "author": {
        "id": 5023
      },
      "writtenOn": "2018-10-19T09:45:12Z",
      "side": 1,
      "message": "Would it make sense to change this to a std::string now?",
      "range": {
        "startLine": 137,
        "startChar": 4,
        "endLine": 137,
        "endChar": 15
      },
      "revId": "c5bee91fdc4b30e02d28433dda2ddf2f8383f85c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f2a28041_ded9471b",
        "filename": "api/video_codecs/video_encoder.h",
        "patchSetId": 2
      },
      "lineNbr": 137,
      "author": {
        "id": 5023
      },
      "writtenOn": "2018-10-19T09:45:12Z",
      "side": 1,
      "message": "... and we should probably remove implementation_name from the CodecSpecificInfo callback and only use this one.",
      "range": {
        "startLine": 136,
        "startChar": 4,
        "endLine": 137,
        "endChar": 36
      },
      "revId": "c5bee91fdc4b30e02d28433dda2ddf2f8383f85c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b868cebd_77fe866f",
        "filename": "api/video_codecs/video_encoder.h",
        "patchSetId": 2
      },
      "lineNbr": 220,
      "author": {
        "id": 5524
      },
      "writtenOn": "2018-10-18T16:40:43Z",
      "side": 1,
      "message": "I will clarify this comment a bit. It pertains to \n  virtual ScalingSettings GetScalingSettings() const;\n  virtual bool SupportsNativeHandle() const;\n  virtual const char* ImplementationName() const;",
      "range": {
        "startLine": 220,
        "startChar": 5,
        "endLine": 220,
        "endChar": 64
      },
      "revId": "c5bee91fdc4b30e02d28433dda2ddf2f8383f85c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "47f98da7_3ffdac55",
        "filename": "api/video_codecs/video_encoder_software_fallback_wrapper.cc",
        "patchSetId": 2
      },
      "lineNbr": 307,
      "author": {
        "id": 5234
      },
      "writtenOn": "2018-10-19T08:19:54Z",
      "side": 1,
      "message": "Does this compile? Unless I\u0027m confused, |info| is not in scope here.",
      "range": {
        "startLine": 307,
        "startChar": 48,
        "endLine": 307,
        "endChar": 52
      },
      "revId": "c5bee91fdc4b30e02d28433dda2ddf2f8383f85c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5d68ad6a_c25dd3b6",
        "filename": "api/video_codecs/video_encoder_software_fallback_wrapper.cc",
        "patchSetId": 2
      },
      "lineNbr": 307,
      "author": {
        "id": 5524
      },
      "writtenOn": "2018-10-19T08:52:21Z",
      "side": 1,
      "message": "It is, the else matches the if-statement on line 301, not the one on 297.",
      "parentUuid": "47f98da7_3ffdac55",
      "range": {
        "startLine": 307,
        "startChar": 48,
        "endLine": 307,
        "endChar": 52
      },
      "revId": "c5bee91fdc4b30e02d28433dda2ddf2f8383f85c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4d8757ee_5b0a26ae",
        "filename": "api/video_codecs/video_encoder_software_fallback_wrapper.cc",
        "patchSetId": 2
      },
      "lineNbr": 308,
      "author": {
        "id": 5524
      },
      "writtenOn": "2018-10-18T16:40:43Z",
      "side": 1,
      "message": "This is the place where the scaling settings being const adds most complexity",
      "revId": "c5bee91fdc4b30e02d28433dda2ddf2f8383f85c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "725f3040_23830b73",
        "filename": "api/video_codecs/video_encoder_software_fallback_wrapper.cc",
        "patchSetId": 2
      },
      "lineNbr": 308,
      "author": {
        "id": 5234
      },
      "writtenOn": "2018-10-19T08:19:54Z",
      "side": 1,
      "message": "I don\u0027t quite understand this comment.",
      "parentUuid": "4d8757ee_5b0a26ae",
      "revId": "c5bee91fdc4b30e02d28433dda2ddf2f8383f85c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bd533c1c_3d96e2ce",
        "filename": "api/video_codecs/video_encoder_software_fallback_wrapper.cc",
        "patchSetId": 2
      },
      "lineNbr": 308,
      "author": {
        "id": 5524
      },
      "writtenOn": "2018-10-19T08:52:21Z",
      "side": 1,
      "message": "Since ScalingSettings need to be set at construction time, it means EncoderInfo needs to have all values set at construction time too. If we could instead do:\n\nEncoderInfo info;\n\n[logic related to scaling settings here]\ninfo.scaling_settings ...;\n\ninfo.supports_native_handle \u003d bar;\n\netc\n\nThen we don\u0027t need to mix a bunch of different things into the constructors arguments. This is one the places where the refactoring becomes non-trivial, there are a few others.\nMy question is, is it worth requiring ScalingSettings to be set at construction time? Or could we at least allow a copy assignment operator?",
      "parentUuid": "725f3040_23830b73",
      "revId": "c5bee91fdc4b30e02d28433dda2ddf2f8383f85c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "652217e4_56912b89",
        "filename": "api/video_codecs/video_encoder_software_fallback_wrapper.cc",
        "patchSetId": 2
      },
      "lineNbr": 308,
      "author": {
        "id": 5234
      },
      "writtenOn": "2018-10-19T13:24:31Z",
      "side": 1,
      "message": "\u003e My question is, is it worth requiring ScalingSettings to be set at construction time? Or could we at least allow a copy assignment operator?\n\nOk, I see the const members of ScalingSettings are inconvenient when the struct is a member of a larger struct/class. I have no strong opinion against copy assignment (or general mutating operations, which we\u0027ll allow if we make its member non-const without making them private).",
      "parentUuid": "bd533c1c_3d96e2ce",
      "revId": "c5bee91fdc4b30e02d28433dda2ddf2f8383f85c",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    }
  ]
}