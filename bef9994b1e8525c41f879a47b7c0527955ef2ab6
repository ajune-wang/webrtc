{
  "comments": [
    {
      "key": {
        "uuid": "816434bc_52a1b540",
        "filename": "api/video_codecs/video_encoder.h",
        "patchSetId": 4
      },
      "lineNbr": 181,
      "author": {
        "id": 5524
      },
      "writtenOn": "2017-10-20T17:53:14Z",
      "side": 1,
      "message": "make param const ref\nAlso, add comment describing what\u0027s expected from the implementations here.",
      "range": {
        "startLine": 181,
        "startChar": 73,
        "endLine": 181,
        "endChar": 0
      },
      "revId": "bef9994b1e8525c41f879a47b7c0527955ef2ab6",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "19a68104_25c503c4",
        "filename": "media/engine/simulcast_encoder_adapter.cc",
        "patchSetId": 4
      },
      "lineNbr": 216,
      "author": {
        "id": 5098
      },
      "writtenOn": "2017-10-20T11:23:46Z",
      "side": 1,
      "message": "It\u0027s unfortunate that we need to add a new method in the interface for this as it seems to be a codec specific implementation detail. Would it be possible to check the return value of InitEncode() to determine if the encoder supports multiple numberOfSimulcastStreams instead?",
      "range": {
        "startLine": 216,
        "startChar": 30,
        "endLine": 216,
        "endChar": 47
      },
      "revId": "bef9994b1e8525c41f879a47b7c0527955ef2ab6",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bacb95b1_c9bea641",
        "filename": "media/engine/simulcast_encoder_adapter.cc",
        "patchSetId": 4
      },
      "lineNbr": 216,
      "author": {
        "id": 5117
      },
      "writtenOn": "2017-10-20T14:26:54Z",
      "side": 1,
      "message": "It\u0027s codec specific, yes. For now only VP8 supports it, but there is work ongoing on adding h264 support for simulcast. I believe it\u0027s not so bad adding another query method to the interface. We already have |SupportsNativeHandle| there. It\u0027s also doesn\u0027t affect all the encoders, as they can just not override the method and it will work. \n\nInitEncode approach is very difficult, as we will have to introduce a new return code, what all the encoders (including external one) would have to return if they get several streams.",
      "parentUuid": "19a68104_25c503c4",
      "range": {
        "startLine": 216,
        "startChar": 30,
        "endLine": 216,
        "endChar": 47
      },
      "revId": "bef9994b1e8525c41f879a47b7c0527955ef2ab6",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "96b77e00_0f3bceb0",
        "filename": "media/engine/simulcast_encoder_adapter.cc",
        "patchSetId": 4
      },
      "lineNbr": 216,
      "author": {
        "id": 5098
      },
      "writtenOn": "2017-10-21T14:21:17Z",
      "side": 1,
      "message": "I was planning to reuse WEBRTC_VIDEO_CODEC_ERR_PARAMETER. We would have to update all encoders though like you say. That\u0027s probably something we should do anyway though to catch errors.\n\nWhat I\u0027m concerned about is that the VideoEncoder interface is becoming bloated and I think we can avoid adding this function.\n\nAnother alternative implementation is to NOT wrap libvpx VP8 with SimulcastEncoderAdapter by default and make libvpx responsible for handling simulcast itself in all cases. If it detects in VP8EncoderImpl::InitEncode() it can\u0027t handle simulcast using the built-in functionality, it sets up a SimulcastEncoderAdapter itself.",
      "parentUuid": "bacb95b1_c9bea641",
      "range": {
        "startLine": 216,
        "startChar": 30,
        "endLine": 216,
        "endChar": 47
      },
      "revId": "bef9994b1e8525c41f879a47b7c0527955ef2ab6",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4e0aa32a_5431771e",
        "filename": "media/engine/simulcast_encoder_adapter.h",
        "patchSetId": 4
      },
      "lineNbr": 116,
      "author": {
        "id": 5098
      },
      "writtenOn": "2017-10-20T11:23:46Z",
      "side": 1,
      "message": "The bool here is redundant because it should be true only if |passthrough_encoder_| is non-null.\n\nAll methods now basically do this:\nVP8EncoderImpl::Foo(args) {\n  if (passthrough_encoder_)\n    return passthrough_encoder_-\u003eFoo(args);\n  ...simulcast stuff...\n}\n\nIt feels more natural to do this dispatching with polymorphism instead. Then we would have one SimulcastEncoder that unconditionally creates multiple encoders, and one top-level encoder that decides in InitEncode() if it should just create a passthrough encoder or an actual SimulcastEncoder. The rest of the methods in the top-level encoder would just delegate to this encoder.",
      "range": {
        "startLine": 115,
        "startChar": 0,
        "endLine": 116,
        "endChar": 53
      },
      "revId": "bef9994b1e8525c41f879a47b7c0527955ef2ab6",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "66fc6c9b_e2da17ab",
        "filename": "media/engine/simulcast_encoder_adapter_unittest.cc",
        "patchSetId": 4
      },
      "lineNbr": 851,
      "author": {
        "id": 5524
      },
      "writtenOn": "2017-10-20T17:53:14Z",
      "side": 1,
      "message": "nit: put next to ctor",
      "range": {
        "startLine": 851,
        "startChar": 51,
        "endLine": 851,
        "endChar": 0
      },
      "revId": "bef9994b1e8525c41f879a47b7c0527955ef2ab6",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b35833b9_51919a98",
        "filename": "media/engine/simulcast_encoder_adapter_unittest.cc",
        "patchSetId": 4
      },
      "lineNbr": 866,
      "author": {
        "id": 5524
      },
      "writtenOn": "2017-10-20T17:53:14Z",
      "side": 1,
      "message": "Would it be possible to parameterize the test instead, so that we run the whole test suite twice with passthrough either on or off?",
      "revId": "bef9994b1e8525c41f879a47b7c0527955ef2ab6",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "06edb4f4_3b76a893",
        "filename": "media/engine/webrtcvideoengine.cc",
        "patchSetId": 4
      },
      "lineNbr": 1633,
      "author": {
        "id": 5524
      },
      "writtenOn": "2017-10-20T17:53:14Z",
      "side": 1,
      "message": "With this CL, I\u0027m not sure this is needed anymore.\nShould check or at least add a todo about it.",
      "range": {
        "startLine": 1633,
        "startChar": 51,
        "endLine": 1633,
        "endChar": 0
      },
      "revId": "bef9994b1e8525c41f879a47b7c0527955ef2ab6",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5f1a7c4c_4bb59dcb",
        "filename": "modules/video_coding/codecs/vp8/vp8_impl.cc",
        "patchSetId": 4
      },
      "lineNbr": 182,
      "author": {
        "id": 5524
      },
      "writtenOn": "2017-10-20T17:53:14Z",
      "side": 1,
      "message": "I\u0027m not sure I follow why this is needed.",
      "range": {
        "startLine": 182,
        "startChar": 49,
        "endLine": 182,
        "endChar": 0
      },
      "revId": "bef9994b1e8525c41f879a47b7c0527955ef2ab6",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e36a2947_05d943df",
        "filename": "modules/video_coding/codecs/vp8/vp8_impl.cc",
        "patchSetId": 4
      },
      "lineNbr": 1012,
      "author": {
        "id": 5524
      },
      "writtenOn": "2017-10-20T17:53:14Z",
      "side": 1,
      "message": "Validate the SimulcastStream[] in codec_settings instead. Maybe check with marpan@ what exactly libvpx can do. I think right now we\u0027re assuming each layer should be 2x larger in width/height in order for simulcast to work.",
      "revId": "bef9994b1e8525c41f879a47b7c0527955ef2ab6",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    }
  ]
}