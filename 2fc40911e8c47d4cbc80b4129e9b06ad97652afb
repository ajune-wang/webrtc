{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "d7b05f36_ccccf597",
        "filename": "api/field_trials_unittest.cc",
        "patchSetId": 3
      },
      "lineNbr": 38,
      "author": {
        "id": 5019
      },
      "writtenOn": "2022-09-22T09:08:18Z",
      "side": 1,
      "message": "it looks weird to cleanup in constructor. move it to destructor?\nbetter yet, instead of two functions \nRegisterFieldTrialsForTesting/UnregisterAllFieldTrialsForTesting\nmay be add a RAII type:\n\nclass ScopedFieldTrialsForTesting {\n public: \n  ScopedFieldTrialsForTesting(... fields) { Register(fields); }\n  ~ScopedFieldTrialsForTesting() { Unregister(); }\n}",
      "revId": "2fc40911e8c47d4cbc80b4129e9b06ad97652afb",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ed087c67_898619e6",
        "filename": "api/field_trials_unittest.cc",
        "patchSetId": 3
      },
      "lineNbr": 38,
      "author": {
        "id": 13704
      },
      "writtenOn": "2022-09-26T14:55:46Z",
      "side": 1,
      "message": "We actually have a RAII type for this in test/scoped_key_value_config.h. Do you think it would be better to use is instead? I\u0027m afraid it could test the wrong thing. An added benefit with this though is that the \"registration\" could happen locally and remove the need for adding the global RegisterFieldTrialsForTesting etc. functions.\n\nIf not I\u0027ll change this fixture to a RAII-type instead, agree that\u0027s much cleaner.",
      "parentUuid": "d7b05f36_ccccf597",
      "revId": "2fc40911e8c47d4cbc80b4129e9b06ad97652afb",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "90bab609_98d384ae",
        "filename": "api/field_trials_unittest.cc",
        "patchSetId": 3
      },
      "lineNbr": 38,
      "author": {
        "id": 5019
      },
      "writtenOn": "2022-09-27T07:48:44Z",
      "side": 1,
      "message": "I noticed that line above also clears global state (and that what comment states also). From that comment they way you\u0027re adding is consistent, but I do not think it is a good way to add/clear temporary state for tests.\nRAII type in test/scoped_key_value_config.h may be address existent `InitFieldTrialsFromString`, may be not. That is imho out of scope. It doesn\u0027t address the new global state you\u0027re adding.\n\nI was suggesting to add new RAII type just to manage allowed test keys, instead of introducing RegisterFieldTrialsForTesting function.\nOr at least UnregesterFieldTrialsForTesting in destructor, at the end of each test rather than at the beginning.\ni.e. address just the functionality you\u0027re adding.",
      "parentUuid": "ed087c67_898619e6",
      "revId": "2fc40911e8c47d4cbc80b4129e9b06ad97652afb",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "378909fc_c9365018",
        "filename": "api/field_trials_unittest.cc",
        "patchSetId": 3
      },
      "lineNbr": 38,
      "author": {
        "id": 13704
      },
      "writtenOn": "2022-09-29T14:40:29Z",
      "side": 1,
      "message": "Agreed that a RAAI type is better. I refactored it as such.\n\nHowever, we still need to keep the ForTesting functions since they are used for other unit tests as well.",
      "parentUuid": "90bab609_98d384ae",
      "revId": "2fc40911e8c47d4cbc80b4129e9b06ad97652afb",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "404d669d_574817c6",
        "filename": "api/field_trials_unittest.cc",
        "patchSetId": 3
      },
      "lineNbr": 38,
      "author": {
        "id": 5019
      },
      "writtenOn": "2022-10-03T14:10:02Z",
      "side": 1,
      "message": "is there any test that needs more advance usage than as RAII type\n(in this change I see two usages. one uses the RAII helper, another could use it too)\n\ni.e. \nfield_trial.h\n\nclass ScopedFieldTrialsForTesting {\n public:\n  explicit ScopedFieldTrialsForTesting(flat_set\u003cstd::string\u003e keys);\n  ~ScopedFieldTrialsForTesting();\n};\n\nfield_trial.cc\n\nScopedFieldTrialsForTesting::ScopedFieldTrialsForTesting(flat_set\u003cstd::string\u003e keys) {\n  TestKeys() \u003d std::move(keys);\n}\n\nvoid ScopedFieldTrialsForTesting::~ScopedFieldTrialsForTesting() {\n  TestKeys().clear();\n}\n\n...\nstruct DummyExperiment {\n ...\n field_trial::ScopedFieldTrialsForTesting test_keys({kDummyExperiment});\n};",
      "parentUuid": "378909fc_c9365018",
      "revId": "2fc40911e8c47d4cbc80b4129e9b06ad97652afb",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "389badaa_ad79b54b",
        "filename": "api/field_trials_unittest.cc",
        "patchSetId": 3
      },
      "lineNbr": 43,
      "author": {
        "id": 5019
      },
      "writtenOn": "2022-09-27T07:48:44Z",
      "side": 1,
      "message": "may be kTestKeys",
      "range": {
        "startLine": 43,
        "startChar": 37,
        "endLine": 43,
        "endChar": 42
      },
      "revId": "2fc40911e8c47d4cbc80b4129e9b06ad97652afb",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "72b6f3bb_76fe5b94",
        "filename": "system_wrappers/include/field_trial.h",
        "patchSetId": 3
      },
      "lineNbr": 107,
      "author": {
        "id": 5087
      },
      "writtenOn": "2022-09-22T07:18:19Z",
      "side": 1,
      "message": "Having these ForTesting() functions in a production header is potentially dangerous, is it possible to create them in https://source.chromium.org/chromium/chromium/src/+/main:third_party/webrtc/test/field_trial.h and https://source.chromium.org/chromium/chromium/src/+/main:third_party/webrtc/test/field_trial.cc?\n\nThis way they will be marked testonly.",
      "range": {
        "startLine": 101,
        "startChar": 0,
        "endLine": 107,
        "endChar": 42
      },
      "revId": "2fc40911e8c47d4cbc80b4129e9b06ad97652afb",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "59be70f7_ff461f7b",
        "filename": "system_wrappers/include/field_trial.h",
        "patchSetId": 3
      },
      "lineNbr": 107,
      "author": {
        "id": 13704
      },
      "writtenOn": "2022-09-22T08:19:42Z",
      "side": 1,
      "message": "Yes, since they are global they don\u0027t have to live here. I still see an argument for keeping them close since they should be removed once the global string is removed.",
      "parentUuid": "72b6f3bb_76fe5b94",
      "range": {
        "startLine": 101,
        "startChar": 0,
        "endLine": 107,
        "endChar": 42
      },
      "revId": "2fc40911e8c47d4cbc80b4129e9b06ad97652afb",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4e97e811_b7f82b3a",
        "filename": "system_wrappers/include/field_trial.h",
        "patchSetId": 3
      },
      "lineNbr": 107,
      "author": {
        "id": 5019
      },
      "writtenOn": "2022-09-27T07:48:44Z",
      "side": 1,
      "message": "\"ForTesting\" is the recommended suffix for functions that are too hard to move into test-only target:  https://abseil.io/tips/135\n(These functions are bound to production `FindFullName` function, so imho the fall into such category)",
      "parentUuid": "59be70f7_ff461f7b",
      "range": {
        "startLine": 101,
        "startChar": 0,
        "endLine": 107,
        "endChar": 42
      },
      "revId": "2fc40911e8c47d4cbc80b4129e9b06ad97652afb",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fa1c9555_a0d7a78c",
        "filename": "system_wrappers/source/field_trial.cc",
        "patchSetId": 3
      },
      "lineNbr": 81,
      "author": {
        "id": 5019
      },
      "writtenOn": "2022-09-22T09:08:18Z",
      "side": 1,
      "message": "please avoid unrelated formatting changes.\n(afaik there is no rule that say there should be an empty line before closing namespace)",
      "revId": "2fc40911e8c47d4cbc80b4129e9b06ad97652afb",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3bc964da_6dbbbc45",
        "filename": "system_wrappers/source/field_trial.cc",
        "patchSetId": 3
      },
      "lineNbr": 81,
      "author": {
        "id": 13704
      },
      "writtenOn": "2022-09-29T14:40:29Z",
      "side": 1,
      "message": "I don\u0027t think it\u0027s unrelated since I\u0027m adding things to the anonymous namespace.\n\n\"Blank lines immediately inside a declaration of a namespace or block of namespaces may help readability by visually separating the load-bearing content from the (largely non-semantic) organizational wrapper.\"\n\nhttps://google.github.io/styleguide/cppguide.html#Vertical_Whitespace",
      "parentUuid": "fa1c9555_a0d7a78c",
      "revId": "2fc40911e8c47d4cbc80b4129e9b06ad97652afb",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "73cd676b_7eaa011c",
        "filename": "system_wrappers/source/field_trial.cc",
        "patchSetId": 3
      },
      "lineNbr": 81,
      "author": {
        "id": 5019
      },
      "writtenOn": "2022-10-03T14:10:02Z",
      "side": 1,
      "message": "Ack.",
      "parentUuid": "3bc964da_6dbbbc45",
      "revId": "2fc40911e8c47d4cbc80b4129e9b06ad97652afb",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "74183a5a_4d5efaa3",
        "filename": "system_wrappers/source/field_trial.cc",
        "patchSetId": 3
      },
      "lineNbr": 121,
      "author": {
        "id": 5019
      },
      "writtenOn": "2022-09-22T09:08:18Z",
      "side": 1,
      "message": "may be\nabsl::c_linear_serach(kRegistedFieldTrials, name)",
      "range": {
        "startLine": 120,
        "startChar": 13,
        "endLine": 121,
        "endChar": 75
      },
      "revId": "2fc40911e8c47d4cbc80b4129e9b06ad97652afb",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9fdd90e8_c494e3e9",
        "filename": "system_wrappers/source/field_trial.cc",
        "patchSetId": 3
      },
      "lineNbr": 121,
      "author": {
        "id": 13704
      },
      "writtenOn": "2022-09-29T14:40:29Z",
      "side": 1,
      "message": "Thanks, I always forget about that one...",
      "parentUuid": "74183a5a_4d5efaa3",
      "range": {
        "startLine": 120,
        "startChar": 13,
        "endLine": 121,
        "endChar": 75
      },
      "revId": "2fc40911e8c47d4cbc80b4129e9b06ad97652afb",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bf876717_13276f94",
        "filename": "system_wrappers/source/field_trial.cc",
        "patchSetId": 3
      },
      "lineNbr": 174,
      "author": {
        "id": 5019
      },
      "writtenOn": "2022-09-22T09:08:18Z",
      "side": 1,
      "message": "\"const T\u0026\" or \"T\"\n(string_view is a small type, so I would iterate by value)",
      "range": {
        "startLine": 174,
        "startChar": 7,
        "endLine": 174,
        "endChar": 30
      },
      "revId": "2fc40911e8c47d4cbc80b4129e9b06ad97652afb",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "572d6569_851c938d",
        "filename": "system_wrappers/source/field_trial.cc",
        "patchSetId": 3
      },
      "lineNbr": 174,
      "author": {
        "id": 13704
      },
      "writtenOn": "2022-09-29T14:40:29Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "bf876717_13276f94",
      "range": {
        "startLine": 174,
        "startChar": 7,
        "endLine": 174,
        "endChar": 30
      },
      "revId": "2fc40911e8c47d4cbc80b4129e9b06ad97652afb",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2ab593b5_3ee74577",
        "filename": "system_wrappers/source/field_trial.cc",
        "patchSetId": 3
      },
      "lineNbr": 175,
      "author": {
        "id": 5019
      },
      "writtenOn": "2022-09-22T09:08:18Z",
      "side": 1,
      "message": "or\n.emplace(key)\n\n(I guess .insert(key) doesn\u0027t work because there is no implicit conversion absl::string_view -\u003e std::string, but probably would work for std::string_view -\u003e std::string)",
      "range": {
        "startLine": 175,
        "startChar": 15,
        "endLine": 175,
        "endChar": 40
      },
      "revId": "2fc40911e8c47d4cbc80b4129e9b06ad97652afb",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "88d751ed_2dd37a62",
        "filename": "system_wrappers/source/field_trial.cc",
        "patchSetId": 3
      },
      "lineNbr": 175,
      "author": {
        "id": 13704
      },
      "writtenOn": "2022-09-29T14:40:29Z",
      "side": 1,
      "message": "Yep, thanks",
      "parentUuid": "2ab593b5_3ee74577",
      "range": {
        "startLine": 175,
        "startChar": 15,
        "endLine": 175,
        "endChar": 40
      },
      "revId": "2fc40911e8c47d4cbc80b4129e9b06ad97652afb",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8137f777_cf3e69b7",
        "filename": "webrtc.gni",
        "patchSetId": 3
      },
      "lineNbr": 231,
      "author": {
        "id": 5087
      },
      "writtenOn": "2022-09-22T07:18:19Z",
      "side": 1,
      "message": "since it is a DCHECK, let\u0027s mention this only affects builds with DCHECKs (debug build or builds with dcheck_always_on\u003dtrue)?",
      "range": {
        "startLine": 231,
        "startChar": 33,
        "endLine": 231,
        "endChar": 38
      },
      "revId": "2fc40911e8c47d4cbc80b4129e9b06ad97652afb",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "802e899c_0e0d7681",
        "filename": "webrtc.gni",
        "patchSetId": 3
      },
      "lineNbr": 231,
      "author": {
        "id": 13704
      },
      "writtenOn": "2022-09-29T14:40:29Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "8137f777_cf3e69b7",
      "range": {
        "startLine": 231,
        "startChar": 33,
        "endLine": 231,
        "endChar": 38
      },
      "revId": "2fc40911e8c47d4cbc80b4129e9b06ad97652afb",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    }
  ]
}