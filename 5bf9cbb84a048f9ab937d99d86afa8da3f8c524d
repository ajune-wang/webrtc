{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "c193ab0a_431dc557",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5634
      },
      "writtenOn": "2021-10-19T17:09:07Z",
      "side": 1,
      "message": "Don\u0027t +1 this one (yet). Make commentary on the design choices.\n",
      "revId": "5bf9cbb84a048f9ab937d99d86afa8da3f8c524d",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9107e77b_da5807c8",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 6720
      },
      "writtenOn": "2021-10-19T18:37:51Z",
      "side": 1,
      "message": "adding danilchap@ too for input",
      "revId": "5bf9cbb84a048f9ab937d99d86afa8da3f8c524d",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ee392018_93a4e795",
        "filename": "api/peer_connection_interface.h",
        "patchSetId": 1
      },
      "lineNbr": 183,
      "author": {
        "id": 6720
      },
      "writtenOn": "2021-10-19T18:37:51Z",
      "side": 1,
      "message": "returning a std::string\u0026 seems problematic.\nIt implies a globally constructed object (discouraged or banned), an object that requires synchronization (which global objects partially are too) or an object that may have gone out of scope when returned.\n\nInstead, can we use trivially static string_view objects? (as in, that do not require runtime construction)",
      "revId": "5bf9cbb84a048f9ab937d99d86afa8da3f8c524d",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "76a500ee_ac5d8b30",
        "filename": "api/peer_connection_interface.h",
        "patchSetId": 1
      },
      "lineNbr": 183,
      "author": {
        "id": 5634
      },
      "writtenOn": "2021-10-19T20:26:14Z",
      "side": 1,
      "message": "Yep, a main point of this review is to settle what the best return type is.\n\nreturn an absl::string_view by value, constructing it from a string?\nor find a way to declare a lookup table of string_view valus without requiring a std::map that has to be destructed on program exit? (I tried with a static std::map\u003cPeerConnectionState, std::string\u003e and was told that this required a destructor on program exit, which was a no-no.)",
      "parentUuid": "ee392018_93a4e795",
      "revId": "5bf9cbb84a048f9ab937d99d86afa8da3f8c524d",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8c4f097a_f46ec28c",
        "filename": "api/peer_connection_interface.h",
        "patchSetId": 1
      },
      "lineNbr": 183,
      "author": {
        "id": 5234
      },
      "writtenOn": "2021-10-20T07:02:29Z",
      "side": 1,
      "message": "I think const std::string\u0026 makes sense if\n\n1. It\u0027s convenient for the implementation to back it by a string, e.g.,\n\nstatic const std::string kFoo \u003d \"foo\";  // In local scope\n\nAs far as I\u0027m aware, that kind of globals isn\u0027t discouraged. But not sure if it will be destructed at exit, which we\u0027d like to avoid.\n\n2. Most callers need a std::string, so returning one avoids construction and copy cost.\n\nOtherwise, returning a string_view (with documentation saying that it refers to a data  that lives for ever) is the \"modern\" way.\n\nRegarding avoiding destructors at exit: The standard trick seems to be\n\n// Intentionally leaked\nstatic std::map\u003c...\u003e* map \u003d new std::map\u003c...\u003e ...  // Also in local scope\n\nWill be constructed first time the scope is entered (in a thread-safe way), and never destroyed.",
      "parentUuid": "76a500ee_ac5d8b30",
      "revId": "5bf9cbb84a048f9ab937d99d86afa8da3f8c524d",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ecac4c98_d5a951e5",
        "filename": "api/peer_connection_interface.h",
        "patchSetId": 1
      },
      "lineNbr": 202,
      "author": {
        "id": 6720
      },
      "writtenOn": "2021-10-19T18:37:51Z",
      "side": 1,
      "message": "it would be nice to be consistent with the return type. const char* works with printf() style formatting, but std::string doesn\u0027t, so they could easily be mixed up, but with potentially bad results.",
      "revId": "5bf9cbb84a048f9ab937d99d86afa8da3f8c524d",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c07fe062_f10d0175",
        "filename": "api/peer_connection_interface.h",
        "patchSetId": 1
      },
      "lineNbr": 202,
      "author": {
        "id": 5634
      },
      "writtenOn": "2021-10-19T20:26:14Z",
      "side": 1,
      "message": "Consistency will arrive once we decide what we\u0027re consistent on.",
      "parentUuid": "ecac4c98_d5a951e5",
      "revId": "5bf9cbb84a048f9ab937d99d86afa8da3f8c524d",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    }
  ]
}