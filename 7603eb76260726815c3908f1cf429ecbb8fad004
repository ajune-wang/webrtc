{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "3a3a9aa8_bd3e9557",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 8046
      },
      "writtenOn": "2022-03-21T17:20:07Z",
      "side": 1,
      "message": "Mirko, do you happen to know how can I get pipewire and drm libraries into CI so they can be dlopened and this new test do not fail on that? They are already available in sysroot.",
      "revId": "7603eb76260726815c3908f1cf429ecbb8fad004",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ab9f8a96_4646b3b3",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 14134
      },
      "writtenOn": "2022-03-21T21:13:58Z",
      "side": 1,
      "message": "Tests look good!  Thanks for writing them.\n\nIt is possible to write this test without the timed condition variables, by invoking a lambda or functor that sets a success flag and then calls a function to start the next phase of the test (more of a \"continuation-passing\" style).   The teardown of the entire test verifies that all phases of the test case succeeded.\n\nThe slight advantage is that if the test is running on a slow machine, it won\u0027t fail accidentally if the timeouts were set just a little bit longer.  This removes one risk of the test becoming flaky.  (Of course, there is still an overall test suite timeout which is determined by the CI.)\n\nBut that only works well if the test and the callbacks are running on the same thread, and it looks like the FakeScreenCastStream is running on a pipewire callback thread; in that case, the condition variables are fine to signal test phases between the pipewire thread and the test thread.\n",
      "revId": "7603eb76260726815c3908f1cf429ecbb8fad004",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1ffe119c_eed4043b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 8046
      },
      "writtenOn": "2022-03-22T14:42:26Z",
      "side": 1,
      "message": "Probably some parts can be done this way, but problem is that we have two streams running simultaneously, one is producing and one is consuming and actions in one make reactions in the other so I cannot do something like:\nstream1-\u003eRecordFrame();\nstream2-\u003eReceiveFrame();\n\nBecause this is driven by PipeWire and all the code is asynchronous so I don\u0027t know when PipeWire will invoke the callback letting us process a new buffer. This would require some changes in the existing code and most likely add unnecessary complexity.",
      "parentUuid": "ab9f8a96_4646b3b3",
      "revId": "7603eb76260726815c3908f1cf429ecbb8fad004",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6a70e66b_1b77bdb2",
        "filename": "modules/desktop_capture/BUILD.gn",
        "patchSetId": 4
      },
      "lineNbr": 131,
      "author": {
        "id": 14134
      },
      "writtenOn": "2022-03-21T21:13:58Z",
      "side": 1,
      "message": "Is this necessary even when rtc_use_pipewire is enabled?",
      "revId": "7603eb76260726815c3908f1cf429ecbb8fad004",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fa867009_e967dcb9",
        "filename": "modules/desktop_capture/BUILD.gn",
        "patchSetId": 4
      },
      "lineNbr": 131,
      "author": {
        "id": 8046
      },
      "writtenOn": "2022-03-22T14:42:26Z",
      "side": 1,
      "message": "I just moved it from the bottom to top to have \"public_configs\" defined. X11 code is still needed even with PipeWire, because both backends (capturers) are being build on Linux.",
      "parentUuid": "6a70e66b_1b77bdb2",
      "revId": "7603eb76260726815c3908f1cf429ecbb8fad004",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c8f5d949_8fa9545d",
        "filename": "modules/desktop_capture/linux/wayland/shared_screencast_stream.h",
        "patchSetId": 4
      },
      "lineNbr": 81,
      "author": {
        "id": 14134
      },
      "writtenOn": "2022-03-21T21:13:58Z",
      "side": 1,
      "message": "Nit: single-argument ctors should be marked explicit",
      "revId": "7603eb76260726815c3908f1cf429ecbb8fad004",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "66c99bd5_acea3333",
        "filename": "modules/desktop_capture/linux/wayland/shared_screencast_stream.h",
        "patchSetId": 4
      },
      "lineNbr": 81,
      "author": {
        "id": 8046
      },
      "writtenOn": "2022-03-22T14:42:26Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c8f5d949_8fa9545d",
      "revId": "7603eb76260726815c3908f1cf429ecbb8fad004",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1f369de5_6511b8a5",
        "filename": "modules/desktop_capture/linux/wayland/shared_screencast_stream_unittest.cc",
        "patchSetId": 4
      },
      "lineNbr": 51,
      "author": {
        "id": 14134
      },
      "writtenOn": "2022-03-21T21:13:58Z",
      "side": 1,
      "message": "Instead of delegating to a new mock method, you can also add an action to execute every time the mock is called.\n\nhttps://google.github.io/googletest/reference/actions.html\n\nI don\u0027t feel too strongly, but it does allow the mock statements below to be written against the actual StreamNotifier API.",
      "revId": "7603eb76260726815c3908f1cf429ecbb8fad004",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8e51911f_33a974ba",
        "filename": "modules/desktop_capture/linux/wayland/shared_screencast_stream_unittest.cc",
        "patchSetId": 4
      },
      "lineNbr": 51,
      "author": {
        "id": 8046
      },
      "writtenOn": "2022-03-22T14:42:26Z",
      "side": 1,
      "message": "I see, I will get back to this later.",
      "parentUuid": "1f369de5_6511b8a5",
      "revId": "7603eb76260726815c3908f1cf429ecbb8fad004",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8149d4a6_7295d14c",
        "filename": "modules/desktop_capture/linux/wayland/shared_screencast_stream_unittest.cc",
        "patchSetId": 4
      },
      "lineNbr": 51,
      "author": {
        "id": 8046
      },
      "writtenOn": "2022-03-29T14:47:17Z",
      "side": 1,
      "message": "I would like to push a fix, but from some reason I\u0027m getting:\n\nlucicfg validate \"config.star\"\nlucicfg validate config.star -log-level warning (1.72s) failed\nError: failed to send RPC to LUCI Config - googleapi: got HTTP response code 403 with body: {\"error\": {\"message\": null}}\n\n\nValidation request to luci-config failed\n\n***************\nHTTP Error 403: Forbidden\n***************\n\nPresubmit checks took 5.0s to calculate.\n\nDo you know what might be going on? I already tried to run \"luci-auth login ....\" as it suggested me before, provided the token, but when I try to run \"git cl upload\" it gives me the error above.",
      "parentUuid": "8e51911f_33a974ba",
      "revId": "7603eb76260726815c3908f1cf429ecbb8fad004",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "384a57c0_43ea637b",
        "filename": "modules/desktop_capture/linux/wayland/shared_screencast_stream_unittest.cc",
        "patchSetId": 4
      },
      "lineNbr": 51,
      "author": {
        "id": 14134
      },
      "writtenOn": "2022-03-29T16:12:33Z",
      "side": 1,
      "message": "This looks like a problem with the WebRTC CI.  I filed https://crbug.com/webrtc/13886 to raise visibility, hopefully it will be resolved soon.",
      "parentUuid": "8149d4a6_7295d14c",
      "revId": "7603eb76260726815c3908f1cf429ecbb8fad004",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f85574b2_1190c97f",
        "filename": "modules/desktop_capture/linux/wayland/test_support/fake_screencast_stream.cc",
        "patchSetId": 4
      },
      "lineNbr": 308,
      "author": {
        "id": 14134
      },
      "writtenOn": "2022-03-21T21:13:58Z",
      "side": 1,
      "message": "Remove commented-out code",
      "revId": "7603eb76260726815c3908f1cf429ecbb8fad004",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b87ac865_0ad5af68",
        "filename": "modules/desktop_capture/linux/wayland/test_support/fake_screencast_stream.cc",
        "patchSetId": 4
      },
      "lineNbr": 308,
      "author": {
        "id": 8046
      },
      "writtenOn": "2022-03-22T14:42:26Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f85574b2_1190c97f",
      "revId": "7603eb76260726815c3908f1cf429ecbb8fad004",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    }
  ]
}