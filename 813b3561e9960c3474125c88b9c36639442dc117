{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "5b86edbe_838320f9",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 9
      },
      "lineNbr": 0,
      "author": {
        "id": 5634
      },
      "writtenOn": "2022-05-25T05:59:39Z",
      "side": 1,
      "message": "Let\u0027s land this!\n",
      "revId": "813b3561e9960c3474125c88b9c36639442dc117",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "42616c28_481e9b0d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 9
      },
      "lineNbr": 0,
      "author": {
        "id": 9405
      },
      "writtenOn": "2022-05-25T06:33:36Z",
      "side": 1,
      "message": "Waiting for nisse@\u0027s review :)",
      "parentUuid": "5b86edbe_838320f9",
      "revId": "813b3561e9960c3474125c88b9c36639442dc117",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "58512c7f_c98b4dbc",
        "filename": "p2p/base/p2p_transport_channel_unittest.cc",
        "patchSetId": 9
      },
      "lineNbr": 176,
      "author": {
        "id": 5234
      },
      "writtenOn": "2022-05-25T07:32:12Z",
      "side": 1,
      "message": "Prefer std::make_unique, even if that means we\u0027ll need a allocator.release() in the return statement.",
      "range": {
        "startLine": 176,
        "startChar": 43,
        "endLine": 176,
        "endChar": 74
      },
      "revId": "813b3561e9960c3474125c88b9c36639442dc117",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5b8e038c_27891776",
        "filename": "p2p/base/p2p_transport_channel_unittest.cc",
        "patchSetId": 9
      },
      "lineNbr": 176,
      "author": {
        "id": 9405
      },
      "writtenOn": "2022-05-25T14:43:04Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "58512c7f_c98b4dbc",
      "range": {
        "startLine": 176,
        "startChar": 43,
        "endLine": 176,
        "endChar": 74
      },
      "revId": "813b3561e9960c3474125c88b9c36639442dc117",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "040076ce_37911962",
        "filename": "rtc_base/memory/always_valid_pointer.h",
        "patchSetId": 9
      },
      "lineNbr": 118,
      "author": {
        "id": 5234
      },
      "writtenOn": "2022-05-25T07:32:12Z",
      "side": 1,
      "message": "Can just be pointer_(pointer), since owned_instance.get() will always be null?",
      "range": {
        "startLine": 118,
        "startChar": 8,
        "endLine": 118,
        "endChar": 59
      },
      "revId": "813b3561e9960c3474125c88b9c36639442dc117",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b1764336_baa11ad3",
        "filename": "rtc_base/memory/always_valid_pointer.h",
        "patchSetId": 9
      },
      "lineNbr": 118,
      "author": {
        "id": 9405
      },
      "writtenOn": "2022-05-25T14:43:04Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "040076ce_37911962",
      "range": {
        "startLine": 118,
        "startChar": 8,
        "endLine": 118,
        "endChar": 59
      },
      "revId": "813b3561e9960c3474125c88b9c36639442dc117",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b3c6bf98_a6d34de2",
        "filename": "rtc_base/memory/always_valid_pointer.h",
        "patchSetId": 9
      },
      "lineNbr": 126,
      "author": {
        "id": 5234
      },
      "writtenOn": "2022-05-25T07:32:12Z",
      "side": 1,
      "message": "Use just `std::unique_ptr\u003cInterface\u003e instance`. Style guide discourages use of rvalue reference arguments except in few special cases. See https://google.github.io/styleguide/cppguide.html#Rvalue_references.",
      "range": {
        "startLine": 126,
        "startChar": 30,
        "endLine": 126,
        "endChar": 67
      },
      "revId": "813b3561e9960c3474125c88b9c36639442dc117",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "10b41dce_d348dce7",
        "filename": "rtc_base/memory/always_valid_pointer.h",
        "patchSetId": 9
      },
      "lineNbr": 126,
      "author": {
        "id": 9405
      },
      "writtenOn": "2022-05-25T14:43:04Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b3c6bf98_a6d34de2",
      "range": {
        "startLine": 126,
        "startChar": 30,
        "endLine": 126,
        "endChar": 67
      },
      "revId": "813b3561e9960c3474125c88b9c36639442dc117",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "944bd9d7_894db2c8",
        "filename": "rtc_base/memory/always_valid_pointer.h",
        "patchSetId": 9
      },
      "lineNbr": 127,
      "author": {
        "id": 5234
      },
      "writtenOn": "2022-05-25T07:32:12Z",
      "side": 1,
      "message": "Where is this used? Seems clearer to have use the separate constructor when constructing from an unowned pointer.",
      "range": {
        "startLine": 127,
        "startChar": 30,
        "endLine": 127,
        "endChar": 58
      },
      "revId": "813b3561e9960c3474125c88b9c36639442dc117",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d96a1159_a81e189b",
        "filename": "rtc_base/memory/always_valid_pointer.h",
        "patchSetId": 9
      },
      "lineNbr": 127,
      "author": {
        "id": 9405
      },
      "writtenOn": "2022-05-25T14:43:04Z",
      "side": 1,
      "message": "If a class accepts both a raw pointer (i.e. its lifecycle is longer than constructing class) and a std::unique_ptr in its constructor, it may be useful to create a delegated constructor and use the two parameter version of the constructor of this class.\nFor example, I plan to write something like this:\n```\nThread::Thread(SocketServer* ss, bool do_init) : Thread(ss, nullptr, do_init) {}\n\nThread::Thread(std::unique_ptr\u003cSocketServer\u003e own_ss, bool do_init)\n    : Thread(nullptr, std::move(own_ss), do_init) {}\n\nThread::Thread(rtc::SocketServer* ss,\n               std::unique_ptr\u003crtc::SocketServer\u003e own_ss,\n               bool do_init)\n    : fPeekKeep_(false),\n      ...\n      ss_(std::move(own_ss), ss) {\n  ...\n}\n```",
      "parentUuid": "944bd9d7_894db2c8",
      "range": {
        "startLine": 127,
        "startChar": 30,
        "endLine": 127,
        "endChar": 58
      },
      "revId": "813b3561e9960c3474125c88b9c36639442dc117",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "871bbbaa_e1b9b50e",
        "filename": "rtc_base/memory/always_valid_pointer.h",
        "patchSetId": 9
      },
      "lineNbr": 127,
      "author": {
        "id": 5634
      },
      "writtenOn": "2022-05-25T21:48:12Z",
      "side": 1,
      "message": "The third constructor is an implementation detail, so that can be private, leaving two clearly separate functions in the public API.\n\nLooks good to me.",
      "parentUuid": "d96a1159_a81e189b",
      "range": {
        "startLine": 127,
        "startChar": 30,
        "endLine": 127,
        "endChar": 58
      },
      "revId": "813b3561e9960c3474125c88b9c36639442dc117",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "48e3461d_a1ba4ba4",
        "filename": "rtc_base/memory/always_valid_pointer.h",
        "patchSetId": 9
      },
      "lineNbr": 127,
      "author": {
        "id": 9405
      },
      "writtenOn": "2022-05-30T15:02:03Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "871bbbaa_e1b9b50e",
      "range": {
        "startLine": 127,
        "startChar": 30,
        "endLine": 127,
        "endChar": 58
      },
      "revId": "813b3561e9960c3474125c88b9c36639442dc117",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d7363dee_48e278a8",
        "filename": "rtc_base/memory/always_valid_pointer.h",
        "patchSetId": 9
      },
      "lineNbr": 128,
      "author": {
        "id": 5234
      },
      "writtenOn": "2022-05-25T07:32:12Z",
      "side": 1,
      "message": "Just `owned_instance_(std::move(instance))` should be enough.",
      "range": {
        "startLine": 128,
        "startChar": 8,
        "endLine": 128,
        "endChar": 65
      },
      "revId": "813b3561e9960c3474125c88b9c36639442dc117",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5bae3289_89124f6b",
        "filename": "rtc_base/memory/always_valid_pointer.h",
        "patchSetId": 9
      },
      "lineNbr": 128,
      "author": {
        "id": 9405
      },
      "writtenOn": "2022-05-25T14:43:04Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d7363dee_48e278a8",
      "range": {
        "startLine": 128,
        "startChar": 8,
        "endLine": 128,
        "endChar": 65
      },
      "revId": "813b3561e9960c3474125c88b9c36639442dc117",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    }
  ]
}