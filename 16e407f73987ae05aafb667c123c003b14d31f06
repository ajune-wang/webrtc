{
  "comments": [
    {
      "key": {
        "uuid": "64b7fe3f_bc28b777",
        "filename": "modules/rtp_rtcp/source/source_tracker_unittest.cc",
        "patchSetId": 6
      },
      "lineNbr": 100,
      "author": {
        "id": 5019
      },
      "writtenOn": "2019-06-12T09:15:03Z",
      "side": 1,
      "message": "since param is std::tuple, this probably should be std::get\u003c0\u003e",
      "range": {
        "startLine": 100,
        "startChar": 21,
        "endLine": 100,
        "endChar": 35
      },
      "revId": "16e407f73987ae05aafb667c123c003b14d31f06",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "eb295dac_d1dab6fa",
        "filename": "modules/rtp_rtcp/source/source_tracker_unittest.cc",
        "patchSetId": 6
      },
      "lineNbr": 244,
      "author": {
        "id": 5019
      },
      "writtenOn": "2019-06-12T09:15:03Z",
      "side": 1,
      "message": "may be UnorderedElementsAre\n(I guess for case when timestamp_ms is the same there is no order promises)\n\n(btw, that imply there is more than one correct answer to GetSources in some situation and thus random test above is too strict)",
      "range": {
        "startLine": 244,
        "startChar": 6,
        "endLine": 244,
        "endChar": 17
      },
      "revId": "16e407f73987ae05aafb667c123c003b14d31f06",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "df0d24f9_96cd0b53",
        "filename": "modules/rtp_rtcp/source/source_tracker_unittest.cc",
        "patchSetId": 6
      },
      "lineNbr": 255,
      "author": {
        "id": 5019
      },
      "writtenOn": "2019-06-12T09:15:03Z",
      "side": 1,
      "message": "may be have three kCsrcs constants instead of two arrays\nto avoid relying on assumption kCssrc0[0] \u003d\u003d kCssrc[1]",
      "revId": "16e407f73987ae05aafb667c123c003b14d31f06",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "95ae1cc3_62c3bdd8",
        "filename": "modules/rtp_rtcp/source/source_tracker_unittest.cc",
        "patchSetId": 6
      },
      "lineNbr": 269,
      "author": {
        "id": 5019
      },
      "writtenOn": "2019-06-12T09:15:03Z",
      "side": 1,
      "message": "fyi: alternative (compare to single use constant) way to document parameters:\n,/*sequence_number\u003d*/30, ...\n\nThe potential advantage of that approach is that clang-tidy can spot when parameter name is misspelled and warn about it.\nhttp://clang.llvm.org/extra/clang-tidy/checks/bugprone-argument-comment.html\n\nIn webrtc (presubmit) it is not automatically checked though.",
      "range": {
        "startLine": 269,
        "startChar": 54,
        "endLine": 269,
        "endChar": 70
      },
      "revId": "16e407f73987ae05aafb667c123c003b14d31f06",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6b8d0e55_83bfaa1c",
        "filename": "modules/rtp_rtcp/source/source_tracker_unittest.cc",
        "patchSetId": 6
      },
      "lineNbr": 284,
      "author": {
        "id": 5019
      },
      "writtenOn": "2019-06-12T09:15:03Z",
      "side": 1,
      "message": "ditto, likely still UnorderedElementsAre to avoid forcing order between ssrcs and csrcs for same time point)",
      "range": {
        "startLine": 284,
        "startChar": 6,
        "endLine": 284,
        "endChar": 17
      },
      "revId": "16e407f73987ae05aafb667c123c003b14d31f06",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    }
  ]
}