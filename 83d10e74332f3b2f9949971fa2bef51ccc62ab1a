{
  "comments": [
    {
      "key": {
        "uuid": "bf6ba5ba_506ba394",
        "filename": "logging/rtc_event_log/rtc_event_log_unittest.cc",
        "patchSetId": 3
      },
      "lineNbr": 157,
      "author": {
        "id": 5147
      },
      "writtenOn": "2018-06-08T11:03:08Z",
      "side": 1,
      "message": "1. This bunch of code is duplicated in a few places. Could you put it in a function?\n2. Maybe save the path to the fixture after setting up the file? See comment below where you read the file.",
      "range": {
        "startLine": 151,
        "startChar": 0,
        "endLine": 157,
        "endChar": 67
      },
      "revId": "83d10e74332f3b2f9949971fa2bef51ccc62ab1a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2730cbaf_7112f60b",
        "filename": "logging/rtc_event_log/rtc_event_log_unittest.cc",
        "patchSetId": 3
      },
      "lineNbr": 157,
      "author": {
        "id": 5150
      },
      "writtenOn": "2018-06-15T09:23:20Z",
      "side": 1,
      "message": "Done #2.",
      "parentUuid": "bf6ba5ba_506ba394",
      "range": {
        "startLine": 151,
        "startChar": 0,
        "endLine": 157,
        "endChar": 67
      },
      "revId": "83d10e74332f3b2f9949971fa2bef51ccc62ab1a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f9c86dc4_df9d957a",
        "filename": "logging/rtc_event_log/rtc_event_log_unittest.cc",
        "patchSetId": 3
      },
      "lineNbr": 431,
      "author": {
        "id": 5147
      },
      "writtenOn": "2018-06-08T11:03:08Z",
      "side": 1,
      "message": "Maybe it would be better to keep the file\u0027s full path in the test fixture when you first write to the file?",
      "revId": "83d10e74332f3b2f9949971fa2bef51ccc62ab1a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "188213a0_cd0069da",
        "filename": "logging/rtc_event_log/rtc_event_log_unittest.cc",
        "patchSetId": 3
      },
      "lineNbr": 431,
      "author": {
        "id": 5150
      },
      "writtenOn": "2018-06-15T09:23:20Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f9c86dc4_df9d957a",
      "revId": "83d10e74332f3b2f9949971fa2bef51ccc62ab1a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "23b20af1_d86981ac",
        "filename": "logging/rtc_event_log/rtc_event_log_unittest_helper.cc",
        "patchSetId": 3
      },
      "lineNbr": 324,
      "author": {
        "id": 5147
      },
      "writtenOn": "2018-06-08T11:03:08Z",
      "side": 1,
      "message": "It is not immediately clear from the code why Register is invoked with a random selection out of two values, all values being distinct. One assumes this is a way to get a random selection of (up to) five distinct values, in random order, with simple code. If so, could you comment as much? Or potentially better - would it be overkill to have a proper random selection, and maybe randomize out of the maximum realistic range, rather than only out of twice as many values as there are extensions?",
      "revId": "83d10e74332f3b2f9949971fa2bef51ccc62ab1a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e8f6d0d1_8583f765",
        "filename": "logging/rtc_event_log/rtc_event_log_unittest_helper.cc",
        "patchSetId": 3
      },
      "lineNbr": 324,
      "author": {
        "id": 5150
      },
      "writtenOn": "2018-06-15T09:23:20Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "23b20af1_d86981ac",
      "revId": "83d10e74332f3b2f9949971fa2bef51ccc62ab1a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "aa964b38_22f2d3ab",
        "filename": "logging/rtc_event_log/rtc_event_log_unittest_helper.cc",
        "patchSetId": 3
      },
      "lineNbr": 395,
      "author": {
        "id": 5147
      },
      "writtenOn": "2018-06-08T11:03:08Z",
      "side": 1,
      "message": "1. Would using a random name perhaps provide better coverage?\n2. Longer names, too?\n3. I wonder what happens with the empty string for a name?",
      "revId": "83d10e74332f3b2f9949971fa2bef51ccc62ab1a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "72851de1_caf2143c",
        "filename": "logging/rtc_event_log/rtc_event_log_unittest_helper.cc",
        "patchSetId": 3
      },
      "lineNbr": 395,
      "author": {
        "id": 5150
      },
      "writtenOn": "2018-06-15T09:23:20Z",
      "side": 1,
      "message": "1 and 2. Imo, it doesn\u0027t and the potential benefits does not outweigh the added complexity. We never branch on, or otherwise use, the length or contents of the codec name.\n3. This is outside the scope of the test. (It will work fine though. Protobufs support empty strings and we never use the codec name anyway.)",
      "parentUuid": "aa964b38_22f2d3ab",
      "revId": "83d10e74332f3b2f9949971fa2bef51ccc62ab1a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3ad622e7_25fd71cb",
        "filename": "logging/rtc_event_log/rtc_event_log_unittest_helper.cc",
        "patchSetId": 3
      },
      "lineNbr": 395,
      "author": {
        "id": 5147
      },
      "writtenOn": "2018-06-18T11:06:37Z",
      "side": 1,
      "message": "I\u0027ve in the past seen code (not yours) that strcmp-ed over a hard-coded subset of a string, which presumably was at the time of introduction the entire string, but excluding the terminating null character. That is, \"CODEC_NAME\" would be strcmp-ed with 10 as the hard-coded length. Why the author thought \u0027\\0\u0027 should not also be compared, escaped me, and still does. Without context, you could surmise that he wanted to check one string was a prefix of the other, but as I remember it, this was not the case.\n\nThat kind of thing scars you for life. Some things cannot be unseen.\n\nThough I have no doubt that you would not be so careless as to incorrectly copy a string, perhaps the unit-test should not share my confidence in you? Maybe a test that checks encoding of strings, should cover the edge cases of the lengths of acceptable strings?",
      "parentUuid": "72851de1_caf2143c",
      "revId": "83d10e74332f3b2f9949971fa2bef51ccc62ab1a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ac6c9210_8cef12d6",
        "filename": "logging/rtc_event_log/rtc_event_log_unittest_helper.cc",
        "patchSetId": 3
      },
      "lineNbr": 395,
      "author": {
        "id": 5147
      },
      "writtenOn": "2018-06-21T21:19:30Z",
      "side": 1,
      "message": "Ping",
      "parentUuid": "3ad622e7_25fd71cb",
      "revId": "83d10e74332f3b2f9949971fa2bef51ccc62ab1a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "91bacb51_702fe23e",
        "filename": "logging/rtc_event_log/rtc_event_log_unittest_helper.cc",
        "patchSetId": 3
      },
      "lineNbr": 395,
      "author": {
        "id": 5150
      },
      "writtenOn": "2018-06-25T17:56:41Z",
      "side": 1,
      "message": "This is still outside the scope of the test. If anything, the codec field should be removed or changed to an enum.",
      "parentUuid": "ac6c9210_8cef12d6",
      "revId": "83d10e74332f3b2f9949971fa2bef51ccc62ab1a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "04d7756c_85b167e9",
        "filename": "logging/rtc_event_log/rtc_event_log_unittest_helper.cc",
        "patchSetId": 3
      },
      "lineNbr": 395,
      "author": {
        "id": 5147
      },
      "writtenOn": "2018-06-25T19:03:18Z",
      "side": 1,
      "message": "I disagree, but I guess we can explore this theme again some other time. ;-P",
      "parentUuid": "91bacb51_702fe23e",
      "revId": "83d10e74332f3b2f9949971fa2bef51ccc62ab1a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "158d35c6_237e814e",
        "filename": "logging/rtc_event_log/rtc_event_log_unittest_helper.cc",
        "patchSetId": 3
      },
      "lineNbr": 396,
      "author": {
        "id": 5147
      },
      "writtenOn": "2018-06-08T11:03:08Z",
      "side": 1,
      "message": "The dynamic range is 96-127, IIRC. The legal range in total is 0-127. Should we not use 0-127, then? (Note that 0 is not an unrealistic edge case; it has a proper codec attached.)",
      "revId": "83d10e74332f3b2f9949971fa2bef51ccc62ab1a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c818aeff_e0de899f",
        "filename": "logging/rtc_event_log/rtc_event_log_unittest_helper.cc",
        "patchSetId": 3
      },
      "lineNbr": 396,
      "author": {
        "id": 5150
      },
      "writtenOn": "2018-06-15T09:23:20Z",
      "side": 1,
      "message": "Is 0 legal? If so, then I agree.",
      "parentUuid": "158d35c6_237e814e",
      "revId": "83d10e74332f3b2f9949971fa2bef51ccc62ab1a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b764fe97_049bacb8",
        "filename": "logging/rtc_event_log/rtc_event_log_unittest_helper.cc",
        "patchSetId": 3
      },
      "lineNbr": 396,
      "author": {
        "id": 5150
      },
      "writtenOn": "2018-06-15T09:23:20Z",
      "side": 1,
      "message": "Is 0 legal? If so, then I agree completely.",
      "parentUuid": "158d35c6_237e814e",
      "revId": "83d10e74332f3b2f9949971fa2bef51ccc62ab1a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f9e122bd_23a0fc43",
        "filename": "logging/rtc_event_log/rtc_event_log_unittest_helper.cc",
        "patchSetId": 3
      },
      "lineNbr": 396,
      "author": {
        "id": 5147
      },
      "writtenOn": "2018-06-18T11:06:37Z",
      "side": 1,
      "message": "0 is PCMU, AFAICT.",
      "parentUuid": "c818aeff_e0de899f",
      "revId": "83d10e74332f3b2f9949971fa2bef51ccc62ab1a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4421879b_390a7e7b",
        "filename": "logging/rtc_event_log/rtc_event_log_unittest_helper.cc",
        "patchSetId": 3
      },
      "lineNbr": 396,
      "author": {
        "id": 5147
      },
      "writtenOn": "2018-06-18T11:06:37Z",
      "side": 1,
      "message": "0 is PCMU, AFAICT.",
      "parentUuid": "c818aeff_e0de899f",
      "revId": "83d10e74332f3b2f9949971fa2bef51ccc62ab1a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "423047cc_9c346bb0",
        "filename": "logging/rtc_event_log/rtc_event_log_unittest_helper.cc",
        "patchSetId": 3
      },
      "lineNbr": 396,
      "author": {
        "id": 5147
      },
      "writtenOn": "2018-06-18T11:06:37Z",
      "side": 1,
      "message": "0 is PCMU, AFAICT.",
      "parentUuid": "c818aeff_e0de899f",
      "revId": "83d10e74332f3b2f9949971fa2bef51ccc62ab1a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4d1abbca_923c8b72",
        "filename": "logging/rtc_event_log/rtc_event_log_unittest_helper.cc",
        "patchSetId": 3
      },
      "lineNbr": 396,
      "author": {
        "id": 5147
      },
      "writtenOn": "2018-06-21T21:19:30Z",
      "side": 1,
      "message": "Ping",
      "parentUuid": "f9e122bd_23a0fc43",
      "revId": "83d10e74332f3b2f9949971fa2bef51ccc62ab1a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "221d25c8_9ea8cc51",
        "filename": "logging/rtc_event_log/rtc_event_log_unittest_helper.cc",
        "patchSetId": 3
      },
      "lineNbr": 396,
      "author": {
        "id": 5150
      },
      "writtenOn": "2018-06-25T17:56:41Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4d1abbca_923c8b72",
      "revId": "83d10e74332f3b2f9949971fa2bef51ccc62ab1a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dc310546_172bd640",
        "filename": "logging/rtc_event_log/rtc_event_log_unittest_helper.cc",
        "patchSetId": 3
      },
      "lineNbr": 746,
      "author": {
        "id": 5147
      },
      "writtenOn": "2018-06-08T11:03:08Z",
      "side": 1,
      "message": "nit-of-the-year: This line breaks with the tradition set forth by the previous functions, of explicitly returning false until the very last line, which returns true. :-)\nAnd the following Verify()s also have this new style.",
      "revId": "83d10e74332f3b2f9949971fa2bef51ccc62ab1a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ba043173_b7132259",
        "filename": "logging/rtc_event_log/rtc_event_log_unittest_helper.cc",
        "patchSetId": 3
      },
      "lineNbr": 746,
      "author": {
        "id": 5150
      },
      "writtenOn": "2018-06-15T09:23:20Z",
      "side": 1,
      "message": "Done. Initially did it this way because the config didn\u0027t have a !\u003d operator.",
      "parentUuid": "dc310546_172bd640",
      "revId": "83d10e74332f3b2f9949971fa2bef51ccc62ab1a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    }
  ]
}