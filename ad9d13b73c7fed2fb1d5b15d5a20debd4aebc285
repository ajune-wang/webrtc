{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "065cf34a_c7b84881",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 12
      },
      "lineNbr": 0,
      "author": {
        "id": 20534
      },
      "writtenOn": "2024-01-10T05:48:49Z",
      "side": 1,
      "message": "Resolve comments and fix CQ failure for bitwise operations are deprecated between enumerations of different types.",
      "revId": "ad9d13b73c7fed2fb1d5b15d5a20debd4aebc285",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "102f441a_eb1589c1",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 12
      },
      "lineNbr": 0,
      "author": {
        "id": 18005
      },
      "writtenOn": "2024-01-11T09:30:51Z",
      "side": 1,
      "message": "sprang@ / philipel@ could PTAL?",
      "revId": "ad9d13b73c7fed2fb1d5b15d5a20debd4aebc285",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "df0bc6e4_efe1267a",
        "filename": "modules/rtp_rtcp/source/video_rtp_depacketizer_h265.cc",
        "patchSetId": 12
      },
      "lineNbr": 145,
      "author": {
        "id": 5527
      },
      "writtenOn": "2024-01-17T09:46:19Z",
      "side": 1,
      "message": "Which of these are true keyframes (meaning they require no prior state)? Is it only kIdrNLp?",
      "range": {
        "startLine": 139,
        "startChar": 0,
        "endLine": 145,
        "endChar": 41
      },
      "revId": "ad9d13b73c7fed2fb1d5b15d5a20debd4aebc285",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d5d4cf8e_e21e995a",
        "filename": "modules/rtp_rtcp/source/video_rtp_depacketizer_h265.cc",
        "patchSetId": 12
      },
      "lineNbr": 145,
      "author": {
        "id": 18005
      },
      "writtenOn": "2024-01-17T10:15:13Z",
      "side": 1,
      "message": "all these are IRAP pictures - meaning as long as VPS/SPS/PPS has been sent to decoder, we can start decoding at those pictures without other dependencies.\n\nIf SPS/VPS/PPS has not been sent to decoder, only IdrNlp \u0026 IdrWRadl is seekable to.",
      "parentUuid": "df0bc6e4_efe1267a",
      "range": {
        "startLine": 139,
        "startChar": 0,
        "endLine": 145,
        "endChar": 41
      },
      "revId": "ad9d13b73c7fed2fb1d5b15d5a20debd4aebc285",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8e9bacd8_dcd4f79b",
        "filename": "modules/rtp_rtcp/source/video_rtp_depacketizer_h265.cc",
        "patchSetId": 12
      },
      "lineNbr": 145,
      "author": {
        "id": 5527
      },
      "writtenOn": "2024-01-17T12:24:59Z",
      "side": 1,
      "message": "My understanding is that BLA/CRA are used for B-pictures, which are not supported by WebRTC. I think BLA/CRA/Reserved should be considered unexpected.",
      "parentUuid": "d5d4cf8e_e21e995a",
      "range": {
        "startLine": 139,
        "startChar": 0,
        "endLine": 145,
        "endChar": 41
      },
      "revId": "ad9d13b73c7fed2fb1d5b15d5a20debd4aebc285",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5f7734de_f51b4ca9",
        "filename": "modules/rtp_rtcp/source/video_rtp_depacketizer_h265.cc",
        "patchSetId": 12
      },
      "lineNbr": 147,
      "author": {
        "id": 5825
      },
      "writtenOn": "2024-01-17T09:52:29Z",
      "side": 1,
      "message": "Marking VPS, SPS, PPS packets as keyframe doesn\u0027t look right. Is that intended?",
      "range": {
        "startLine": 146,
        "startChar": 37,
        "endLine": 147,
        "endChar": 42
      },
      "revId": "ad9d13b73c7fed2fb1d5b15d5a20debd4aebc285",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "597c9569_06ec1e5b",
        "filename": "modules/rtp_rtcp/source/video_rtp_depacketizer_h265.cc",
        "patchSetId": 12
      },
      "lineNbr": 147,
      "author": {
        "id": 18005
      },
      "writtenOn": "2024-01-17T10:07:09Z",
      "side": 1,
      "message": "This is implemented intentionally only to mark current packet(payload) as part of a keyframe(i-frame), so if none of them are received, components after depacketizer will be sure that we\u0027re not ready to construct any frame for downlink components.\n\nJitter buffer after the depacketizer will update the frame type at frame level when it has more knowledge of packet receiving history.\n\nTheoretically, all the BLA/CRA/IDR types can be a sync-point if VPS/SPS/PPS has been sent to decoder previously. They\u0027re all intra-coded so not relying other pictures for decoding.\nIf VPS/PPS/SPS has not been sent to decoder, only IDR_N_LP and IDR_W_RADL is decodable(HEVC RTP spec requires VPS/SPS/PPS to be in IDR_N_LP/IDR_W_RADL pictures, but not mandate that for BLA/CRA pictures.",
      "parentUuid": "5f7734de_f51b4ca9",
      "range": {
        "startLine": 146,
        "startChar": 37,
        "endLine": 147,
        "endChar": 42
      },
      "revId": "ad9d13b73c7fed2fb1d5b15d5a20debd4aebc285",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1d9f2306_1175a5a0",
        "filename": "modules/rtp_rtcp/source/video_rtp_depacketizer_h265.cc",
        "patchSetId": 12
      },
      "lineNbr": 147,
      "author": {
        "id": 5825
      },
      "writtenOn": "2024-01-17T10:37:45Z",
      "side": 1,
      "message": "\u003e so if none of them are received, components after depacketizer will be sure that we\u0027re not ready to construct any frame for downlink components.\n\nAre you talking about logic similar to https://source.chromium.org/chromium/chromium/src/+/main:third_party/webrtc/modules/video_coding/packet_buffer.cc;l\u003d294-305 ?\n\nIf yes, then it checks NALU type directly. Marking these packets as keyframe seems unnecessary. If you still believe that that\u0027s necessary, could you please point to 1) downlink component(s) and 2) logic which needs keyframe flag on SPS/PPS and other non-IDR packets in the code?",
      "parentUuid": "597c9569_06ec1e5b",
      "range": {
        "startLine": 146,
        "startChar": 37,
        "endLine": 147,
        "endChar": 42
      },
      "revId": "ad9d13b73c7fed2fb1d5b15d5a20debd4aebc285",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0de46d02_b99c8b0c",
        "filename": "modules/rtp_rtcp/source/video_rtp_depacketizer_h265.cc",
        "patchSetId": 12
      },
      "lineNbr": 147,
      "author": {
        "id": 18005
      },
      "writtenOn": "2024-01-17T11:19:33Z",
      "side": 1,
      "message": "Yes. We\u0027re talking about something similar to what you referenced. \nAgree we don\u0027t need to do the marking here but also the implementation here is similar as https://source.chromium.org/chromium/chromium/src/+/main:third_party/webrtc/modules/rtp_rtcp/source/video_rtp_depacketizer_h264.cc;l\u003d173.",
      "parentUuid": "1d9f2306_1175a5a0",
      "range": {
        "startLine": 146,
        "startChar": 37,
        "endLine": 147,
        "endChar": 42
      },
      "revId": "ad9d13b73c7fed2fb1d5b15d5a20debd4aebc285",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8b6adb94_9b352d85",
        "filename": "modules/rtp_rtcp/source/video_rtp_depacketizer_h265.cc",
        "patchSetId": 12
      },
      "lineNbr": 147,
      "author": {
        "id": 5825
      },
      "writtenOn": "2024-01-17T11:57:32Z",
      "side": 1,
      "message": "Not sure why it marks SPS as keyframe in H264. I would guess that\u0027s not really needed. It doesn\u0027t mark PPS as keyframe.",
      "parentUuid": "0de46d02_b99c8b0c",
      "range": {
        "startLine": 146,
        "startChar": 37,
        "endLine": 147,
        "endChar": 42
      },
      "revId": "ad9d13b73c7fed2fb1d5b15d5a20debd4aebc285",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "44998b6f_0e592c4a",
        "filename": "modules/rtp_rtcp/source/video_rtp_depacketizer_h265_unittest.cc",
        "patchSetId": 12
      },
      "lineNbr": 35,
      "author": {
        "id": 5527
      },
      "writtenOn": "2024-01-17T09:46:19Z",
      "side": 1,
      "message": "Could you add a comment saying how the byte arrays were generated for the various tests?",
      "revId": "ad9d13b73c7fed2fb1d5b15d5a20debd4aebc285",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    }
  ]
}