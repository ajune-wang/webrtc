{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "76f04920_886123e0",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 5508
      },
      "writtenOn": "2023-09-05T12:17:24Z",
      "side": 1,
      "message": "little drive-by change while looking over the code. This value should always be a known constant.",
      "revId": "3e77a7476767d032b2cd0ab7db6dbbc03350a65b",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "df310cb7_70067a40",
        "filename": "p2p/base/port.h",
        "patchSetId": 3
      },
      "lineNbr": 188,
      "author": {
        "id": 5019
      },
      "writtenOn": "2023-09-05T12:32:36Z",
      "side": 1,
      "message": "add\n`ABSL_ATTRIBUTE_LIFETIME_BOUND` attribute\nto stress `type` should outlive created port.\nhttp://go/totw/220",
      "revId": "3e77a7476767d032b2cd0ab7db6dbbc03350a65b",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "855c2783_f56ec6d6",
        "filename": "p2p/base/port.h",
        "patchSetId": 3
      },
      "lineNbr": 485,
      "author": {
        "id": 5019
      },
      "writtenOn": "2023-09-05T12:32:36Z",
      "side": 1,
      "message": "storing absl::string_view is brittle\n\ncode like \n```\nSomeFunction(const std::string\u0026 protocol, const std::string\u0026 direction) {\n  return UDPPort(thread, direction + protocol, ...);\n}\n```\nwould save pointer to temporary string.\n\n`ABSL_ATTRIBUTE_LIFETIME_BOUND` can mitigate the issue (see another comment)\n\nanother option (not sure if feasible, but generally safer)\nis to create enum PortType, and convert enum into absl::string_view inside port itself.",
      "revId": "3e77a7476767d032b2cd0ab7db6dbbc03350a65b",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    }
  ]
}