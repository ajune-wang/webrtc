{
  "comments": [
    {
      "key": {
        "uuid": "ac25ef73_cc827bda",
        "filename": "api/units/data_rate.cc",
        "patchSetId": 5
      },
      "lineNbr": 20,
      "author": {
        "id": 5126
      },
      "writtenOn": "2018-04-28T19:55:58Z",
      "side": 1,
      "message": "RTC_DCHECK_LT\n\nAnd why \u003c and not \u003c\u003d ? The division already rounds towards zero.",
      "range": {
        "startLine": 20,
        "startChar": 2,
        "endLine": 20,
        "endChar": 12
      },
      "revId": "8f864e818f4d60426b950ff82626e6ad65b0dcbc",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "786d3308_8fec4ee0",
        "filename": "api/units/data_rate.cc",
        "patchSetId": 5
      },
      "lineNbr": 20,
      "author": {
        "id": 5531
      },
      "writtenOn": "2018-04-30T12:24:22Z",
      "side": 1,
      "message": "Fixed, though it shouldn\u0027t make much difference considering how large the value would have to be.",
      "parentUuid": "ac25ef73_cc827bda",
      "range": {
        "startLine": 20,
        "startChar": 2,
        "endLine": 20,
        "endChar": 12
      },
      "revId": "8f864e818f4d60426b950ff82626e6ad65b0dcbc",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "01419686_fa84eae5",
        "filename": "api/units/data_rate.h",
        "patchSetId": 5
      },
      "lineNbr": 34,
      "author": {
        "id": 5126
      },
      "writtenOn": "2018-04-28T19:55:58Z",
      "side": 1,
      "message": "It seems much simpler to just promise bps accuracy.",
      "revId": "8f864e818f4d60426b950ff82626e6ad65b0dcbc",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "feeeb9e6_96b994ac",
        "filename": "api/units/data_rate.h",
        "patchSetId": 5
      },
      "lineNbr": 34,
      "author": {
        "id": 5531
      },
      "writtenOn": "2018-04-30T12:24:22Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "01419686_fa84eae5",
      "revId": "8f864e818f4d60426b950ff82626e6ad65b0dcbc",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "75d7ac01_a79c27d5",
        "filename": "api/units/data_rate.h",
        "patchSetId": 5
      },
      "lineNbr": 37,
      "author": {
        "id": 5126
      },
      "writtenOn": "2018-04-28T19:55:58Z",
      "side": 1,
      "message": "I can live with infinity being a possible value, but \"not initialized\"? If you need that, use Optional\u003cDataRate\u003e.",
      "revId": "8f864e818f4d60426b950ff82626e6ad65b0dcbc",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4ab0d300_c721365b",
        "filename": "api/units/data_rate.h",
        "patchSetId": 5
      },
      "lineNbr": 37,
      "author": {
        "id": 5531
      },
      "writtenOn": "2018-04-30T12:24:22Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "75d7ac01_a79c27d5",
      "revId": "8f864e818f4d60426b950ff82626e6ad65b0dcbc",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "15c86321_724ce04a",
        "filename": "api/units/data_rate.h",
        "patchSetId": 5
      },
      "lineNbr": 79,
      "author": {
        "id": 5126
      },
      "writtenOn": "2018-04-28T19:55:58Z",
      "side": 1,
      "message": "It would be more symmetrical to have all operator* overloads as free functions...",
      "revId": "8f864e818f4d60426b950ff82626e6ad65b0dcbc",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "11ccc479_67ae1e30",
        "filename": "api/units/data_rate.h",
        "patchSetId": 5
      },
      "lineNbr": 79,
      "author": {
        "id": 5531
      },
      "writtenOn": "2018-04-30T12:24:22Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "15c86321_724ce04a",
      "revId": "8f864e818f4d60426b950ff82626e6ad65b0dcbc",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "59b1cd40_f0ebb816",
        "filename": "api/units/data_rate.h",
        "patchSetId": 5
      },
      "lineNbr": 82,
      "author": {
        "id": 5126
      },
      "writtenOn": "2018-04-28T19:55:58Z",
      "side": 1,
      "message": "There\u0027s no point in having an int32_t overload---it\u0027ll just be promoted to 64 bits anyway when performing the multiplications.",
      "revId": "8f864e818f4d60426b950ff82626e6ad65b0dcbc",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "57e4a208_8c248923",
        "filename": "api/units/data_rate.h",
        "patchSetId": 5
      },
      "lineNbr": 82,
      "author": {
        "id": 5531
      },
      "writtenOn": "2018-04-30T12:24:22Z",
      "side": 1,
      "message": "It\u0027s required to avoid ambiguity between casting to double or int64_t.",
      "parentUuid": "59b1cd40_f0ebb816",
      "revId": "8f864e818f4d60426b950ff82626e6ad65b0dcbc",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "56470654_8f120ad2",
        "filename": "api/units/data_rate.h",
        "patchSetId": 5
      },
      "lineNbr": 82,
      "author": {
        "id": 5126
      },
      "writtenOn": "2018-04-30T13:09:41Z",
      "side": 1,
      "message": "Ah. But don\u0027t you get the same problem with other integer types as well? IOW, don\u0027t you need something like\n\n  template \u003ctypename T, typename std::enable_if\u003cstd::is_integral\u003cT\u003e::value\u003e::type* \u003d nullptr\u003e\n  friend DataRate operator*(DataRate dr, T scalar) {\n    return DataRate::bytes_per_second(dr.bytes_per_second() * scalar);\n  }\n\n  template \u003ctypename T, typename std::enable_if\u003cstd::is_floating_point\u003cT\u003e::value\u003e::type* \u003d nullptr\u003e\n  friend DataRate operator*(DataRate dr, T scalar) {\n    return DataRate::bytes_per_second(std::llround(dr.bytes_per_second() * scalar));\n  }\n\n  template \u003ctypename T, typename std::enable_if\u003cstd::is_arithmetic\u003cT\u003e::value\u003e::type* \u003d nullptr\u003e\n  friend DataRate operator*(T scalar, DataRate dr) {\n    return dr * scalar;\n  }",
      "parentUuid": "57e4a208_8c248923",
      "revId": "8f864e818f4d60426b950ff82626e6ad65b0dcbc",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "15f52ec5_5c615e37",
        "filename": "api/units/data_rate.h",
        "patchSetId": 5
      },
      "lineNbr": 121,
      "author": {
        "id": 5126
      },
      "writtenOn": "2018-04-28T19:55:58Z",
      "side": 1,
      "message": "Why not inline these? Are they expected to expand to more than 1-3 instructions?",
      "revId": "8f864e818f4d60426b950ff82626e6ad65b0dcbc",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2b95dee0_9edc129b",
        "filename": "api/units/data_rate.h",
        "patchSetId": 5
      },
      "lineNbr": 121,
      "author": {
        "id": 5531
      },
      "writtenOn": "2018-04-30T12:24:22Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "15f52ec5_5c615e37",
      "revId": "8f864e818f4d60426b950ff82626e6ad65b0dcbc",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "62940325_4da5747b",
        "filename": "api/units/data_size.h",
        "patchSetId": 5
      },
      "lineNbr": 30,
      "author": {
        "id": 5126
      },
      "writtenOn": "2018-04-28T19:55:58Z",
      "side": 1,
      "message": "Again, it seems simpler to just promise bit resolution.",
      "revId": "8f864e818f4d60426b950ff82626e6ad65b0dcbc",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "07d01a9a_765a9623",
        "filename": "api/units/data_size.h",
        "patchSetId": 5
      },
      "lineNbr": 30,
      "author": {
        "id": 5531
      },
      "writtenOn": "2018-04-30T12:24:22Z",
      "side": 1,
      "message": "Removed bits constructor/getter as they are not used and I\u0027m not aware of a use case that wouldn\u0027t be better served by using the DataRate class.",
      "parentUuid": "62940325_4da5747b",
      "revId": "8f864e818f4d60426b950ff82626e6ad65b0dcbc",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    }
  ]
}