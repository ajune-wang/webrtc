{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "cfdef0ff_7b65293c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 29
      },
      "lineNbr": 0,
      "author": {
        "id": 8046
      },
      "writtenOn": "2020-10-05T20:26:19Z",
      "side": 1,
      "message": "Alright, I still have no idea what might be wrong.\n\nI have a guess, but correct me please if I say something not making sense.\n\nFrom one of the tests, it says:\n// (shared_x_display.cc:38): Unable to open display\n\nWhen I check the code in shared_x_display.cc, then I see this warning is printed right before a nullptr is returned and assigned to \"scoped_refptr\u003cSharedX1isplay\u003e x_display_\" in DesktopCaptureOptions. However this assignment is made to an uninitialized variable. When I check scoped_refptr code, there is mentioned:\n//     scoped_refptr\u003cMyFoo\u003e foo \u003d new MyFoo();\n//     ...\n//     foo \u003d nullptr;  // explicitly releases |foo|\n\nIs it possible that this assignment makes ASAN to complain? The failure of the tests saying \"Unable to open display\" is probably because of the test environment and it\u0027s definitely not related to my change. It\u0027s the ASAN failure that makes me unhappy.\n\n",
      "revId": "49dd6509e78eaa0a33c35e424ef7f80eebadbcd1",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b91d1789_025d745d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 29
      },
      "lineNbr": 0,
      "author": {
        "id": 8046
      },
      "writtenOn": "2020-10-06T12:34:31Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "cfdef0ff_7b65293c",
      "revId": "49dd6509e78eaa0a33c35e424ef7f80eebadbcd1",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e414cd76_089fd287",
        "filename": "modules/desktop_capture/desktop_capture_options.h",
        "patchSetId": 29
      },
      "lineNbr": 190,
      "author": {
        "id": 5508
      },
      "writtenOn": "2020-10-06T14:50:04Z",
      "side": 1,
      "message": "use std::move?",
      "revId": "49dd6509e78eaa0a33c35e424ef7f80eebadbcd1",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "34304840_353ac682",
        "filename": "modules/desktop_capture/desktop_capture_options.h",
        "patchSetId": 29
      },
      "lineNbr": 190,
      "author": {
        "id": 8046
      },
      "writtenOn": "2020-10-06T16:11:20Z",
      "side": 1,
      "message": "That shouldn\u0027t be needed as you don\u0027t need to pass the ownership like you do with unique_ptr, or am I wrong? It\u0027s not used even above in set_x_display(), which also takes rtc::scoped_refptr.",
      "parentUuid": "e414cd76_089fd287",
      "revId": "49dd6509e78eaa0a33c35e424ef7f80eebadbcd1",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ed7b6fd7_8b32cb11",
        "filename": "modules/desktop_capture/desktop_capture_options.h",
        "patchSetId": 29
      },
      "lineNbr": 190,
      "author": {
        "id": 5508
      },
      "writtenOn": "2020-10-06T17:02:27Z",
      "side": 1,
      "message": "std::move here, would represent transfering ownership of a currently held reference.\nThe difference is an additional set of AddRef/Release operations.",
      "parentUuid": "34304840_353ac682",
      "revId": "49dd6509e78eaa0a33c35e424ef7f80eebadbcd1",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6c99af7f_5f8a4109",
        "filename": "modules/desktop_capture/desktop_capture_options.h",
        "patchSetId": 29
      },
      "lineNbr": 190,
      "author": {
        "id": 8046
      },
      "writtenOn": "2020-10-06T17:54:56Z",
      "side": 1,
      "message": "Done.",
      "parentUuid": "ed7b6fd7_8b32cb11",
      "revId": "49dd6509e78eaa0a33c35e424ef7f80eebadbcd1",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "38392033_b6dc0b36",
        "filename": "modules/desktop_capture/linux/xdg_desktop_portal_base.cc",
        "patchSetId": 29
      },
      "lineNbr": 133,
      "author": {
        "id": 5508
      },
      "writtenOn": "2020-10-06T14:50:04Z",
      "side": 1,
      "message": "if you just construct an instance of ConnectionData and delete it, will all of these be harmless?",
      "revId": "49dd6509e78eaa0a33c35e424ef7f80eebadbcd1",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d4210725_890eef0d",
        "filename": "modules/desktop_capture/linux/xdg_desktop_portal_base.cc",
        "patchSetId": 29
      },
      "lineNbr": 133,
      "author": {
        "id": 8046
      },
      "writtenOn": "2020-10-06T16:11:20Z",
      "side": 1,
      "message": "I think this would lead into leaks.",
      "parentUuid": "38392033_b6dc0b36",
      "revId": "49dd6509e78eaa0a33c35e424ef7f80eebadbcd1",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f31cfee4_29132a85",
        "filename": "modules/desktop_capture/linux/xdg_desktop_portal_base.cc",
        "patchSetId": 29
      },
      "lineNbr": 133,
      "author": {
        "id": 8046
      },
      "writtenOn": "2020-10-06T16:30:29Z",
      "side": 1,
      "message": "I misunderstood your question. It shouldn\u0027t be a problem because g_free() checks for null pointer.",
      "parentUuid": "d4210725_890eef0d",
      "revId": "49dd6509e78eaa0a33c35e424ef7f80eebadbcd1",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f87e2f61_137cd26d",
        "filename": "modules/desktop_capture/linux/xdg_desktop_portal_base.h",
        "patchSetId": 29
      },
      "lineNbr": 33,
      "author": {
        "id": 5508
      },
      "writtenOn": "2020-10-05T20:49:15Z",
      "side": 1,
      "message": "Let\u0027s skip inheriting from RefCountedBase this way. Instead use RefCountedObject\u003c\u003e.",
      "revId": "49dd6509e78eaa0a33c35e424ef7f80eebadbcd1",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6dc99b4f_4badc0c4",
        "filename": "modules/desktop_capture/linux/xdg_desktop_portal_base.h",
        "patchSetId": 29
      },
      "lineNbr": 33,
      "author": {
        "id": 8046
      },
      "writtenOn": "2020-10-05T20:53:45Z",
      "side": 1,
      "message": "What about what I wrote above? Btw. SharedXDisplay also inherits RefCountedBase and is used the same way in DesktopCaptureOptions.",
      "parentUuid": "f87e2f61_137cd26d",
      "revId": "49dd6509e78eaa0a33c35e424ef7f80eebadbcd1",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b06457cc_e8053d22",
        "filename": "modules/desktop_capture/linux/xdg_desktop_portal_base.h",
        "patchSetId": 29
      },
      "lineNbr": 33,
      "author": {
        "id": 8046
      },
      "writtenOn": "2020-10-06T12:34:31Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6dc99b4f_4badc0c4",
      "revId": "49dd6509e78eaa0a33c35e424ef7f80eebadbcd1",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c37da553_4645145b",
        "filename": "modules/desktop_capture/linux/xdg_desktop_portal_base.h",
        "patchSetId": 29
      },
      "lineNbr": 33,
      "author": {
        "id": 5508
      },
      "writtenOn": "2020-10-06T14:50:04Z",
      "side": 1,
      "message": "I still prefer using RefCountedObject. As is, the instance is being deleted from a parent class which can get hairy if this implementation gets more complex down the line. Also, although there are couple of examples of inheriting from RefCountedBase in the source code, it\u0027s much more the rule to use RefCountedObject.",
      "parentUuid": "b06457cc_e8053d22",
      "revId": "49dd6509e78eaa0a33c35e424ef7f80eebadbcd1",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "fa3ee1c3_e8f8a603",
        "filename": "modules/desktop_capture/linux/xdg_desktop_portal_base.h",
        "patchSetId": 29
      },
      "lineNbr": 33,
      "author": {
        "id": 8046
      },
      "writtenOn": "2020-10-06T16:11:20Z",
      "side": 1,
      "message": "Can you guide me how this is supposed to be used? \n\nWill I need to use RefCountedObject in the definition of set_xdp_base() method? WIll users need to pass new rtc::RefCountedObject\u003cXdgDesktopPortalBase\u003e() instead?\n\nIt\u0027s a public method which can be used outside and I use it in Chromium for example.",
      "parentUuid": "c37da553_4645145b",
      "revId": "49dd6509e78eaa0a33c35e424ef7f80eebadbcd1",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c7dc3a19_239e445d",
        "filename": "modules/desktop_capture/linux/xdg_desktop_portal_base.h",
        "patchSetId": 29
      },
      "lineNbr": 33,
      "author": {
        "id": 5508
      },
      "writtenOn": "2020-10-06T17:02:27Z",
      "side": 1,
      "message": "oh, sorry, nevermind this. I was mentally thinking that there was a common ref counted interface that XdgDesktopPortalBase and SharedXDisplay were implementing.\nLooking a bit closer I see that\u0027s not the case. What you have is fine.",
      "parentUuid": "fa3ee1c3_e8f8a603",
      "revId": "49dd6509e78eaa0a33c35e424ef7f80eebadbcd1",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "390768cf_4872c16d",
        "filename": "modules/desktop_capture/linux/xdg_desktop_portal_base.h",
        "patchSetId": 29
      },
      "lineNbr": 83,
      "author": {
        "id": 5508
      },
      "writtenOn": "2020-10-06T14:50:04Z",
      "side": 1,
      "message": "member variables should be below methods",
      "range": {
        "startLine": 83,
        "startChar": 41,
        "endLine": 83,
        "endChar": 42
      },
      "revId": "49dd6509e78eaa0a33c35e424ef7f80eebadbcd1",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b5625d0b_d6c0cc91",
        "filename": "modules/desktop_capture/linux/xdg_desktop_portal_base.h",
        "patchSetId": 29
      },
      "lineNbr": 83,
      "author": {
        "id": 8046
      },
      "writtenOn": "2020-10-06T16:11:20Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "390768cf_4872c16d",
      "range": {
        "startLine": 83,
        "startChar": 41,
        "endLine": 83,
        "endChar": 42
      },
      "revId": "49dd6509e78eaa0a33c35e424ef7f80eebadbcd1",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "eb31fd9e_412cd68b",
        "filename": "modules/desktop_capture/linux/xdg_desktop_portal_base.h",
        "patchSetId": 29
      },
      "lineNbr": 90,
      "author": {
        "id": 5508
      },
      "writtenOn": "2020-10-06T14:50:04Z",
      "side": 1,
      "message": "generally it would also be good to keep the static methods at the top, then non static ones.\nIf there are special reasons to keep them mixed, comments could explain why.",
      "range": {
        "startLine": 90,
        "startChar": 14,
        "endLine": 90,
        "endChar": 30
      },
      "revId": "49dd6509e78eaa0a33c35e424ef7f80eebadbcd1",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8d533318_d89b5ea0",
        "filename": "modules/desktop_capture/linux/xdg_desktop_portal_base.h",
        "patchSetId": 29
      },
      "lineNbr": 90,
      "author": {
        "id": 8046
      },
      "writtenOn": "2020-10-06T16:11:20Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "eb31fd9e_412cd68b",
      "range": {
        "startLine": 90,
        "startChar": 14,
        "endLine": 90,
        "endChar": 30
      },
      "revId": "49dd6509e78eaa0a33c35e424ef7f80eebadbcd1",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4494df30_817169cc",
        "filename": "modules/desktop_capture/linux/xdg_desktop_portal_base.h",
        "patchSetId": 29
      },
      "lineNbr": 148,
      "author": {
        "id": 5508
      },
      "writtenOn": "2020-10-06T14:50:04Z",
      "side": 1,
      "message": "const",
      "revId": "49dd6509e78eaa0a33c35e424ef7f80eebadbcd1",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b0816cc9_e50bee0e",
        "filename": "modules/desktop_capture/linux/xdg_desktop_portal_base.h",
        "patchSetId": 29
      },
      "lineNbr": 148,
      "author": {
        "id": 8046
      },
      "writtenOn": "2020-10-06T16:11:20Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4494df30_817169cc",
      "revId": "49dd6509e78eaa0a33c35e424ef7f80eebadbcd1",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "077791f5_1ab46d1d",
        "filename": "modules/desktop_capture/linux/xdg_desktop_portal_base.h",
        "patchSetId": 29
      },
      "lineNbr": 150,
      "author": {
        "id": 5508
      },
      "writtenOn": "2020-10-06T14:50:04Z",
      "side": 1,
      "message": "lots of public member variables - should this be a struct?",
      "revId": "49dd6509e78eaa0a33c35e424ef7f80eebadbcd1",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e28c01c7_c889e437",
        "filename": "modules/desktop_capture/linux/xdg_desktop_portal_base.h",
        "patchSetId": 29
      },
      "lineNbr": 150,
      "author": {
        "id": 8046
      },
      "writtenOn": "2020-10-06T16:11:20Z",
      "side": 1,
      "message": "Well, this all is already a class because of that.",
      "parentUuid": "077791f5_1ab46d1d",
      "revId": "49dd6509e78eaa0a33c35e424ef7f80eebadbcd1",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "61bc232a_c72bf87b",
        "filename": "modules/desktop_capture/linux/xdg_desktop_portal_base.h",
        "patchSetId": 29
      },
      "lineNbr": 150,
      "author": {
        "id": 5508
      },
      "writtenOn": "2020-10-06T17:02:27Z",
      "side": 1,
      "message": "The convention is for class to default to having member variables be private, whereas if they\u0027re by default public (which appears to be the case here), we use struct.",
      "parentUuid": "e28c01c7_c889e437",
      "revId": "49dd6509e78eaa0a33c35e424ef7f80eebadbcd1",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "31315451_1731e448",
        "filename": "modules/desktop_capture/linux/xdg_desktop_portal_base.h",
        "patchSetId": 29
      },
      "lineNbr": 150,
      "author": {
        "id": 8046
      },
      "writtenOn": "2020-10-06T17:54:56Z",
      "side": 1,
      "message": "Done.",
      "parentUuid": "61bc232a_c72bf87b",
      "revId": "49dd6509e78eaa0a33c35e424ef7f80eebadbcd1",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d993f1ed_55863359",
        "filename": "modules/desktop_capture/linux/xdg_desktop_portal_base.h",
        "patchSetId": 29
      },
      "lineNbr": 170,
      "author": {
        "id": 5508
      },
      "writtenOn": "2020-10-06T14:50:04Z",
      "side": 1,
      "message": "Uninitialized?\nCould it be made const?",
      "revId": "49dd6509e78eaa0a33c35e424ef7f80eebadbcd1",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2d6fdfe1_f3a10756",
        "filename": "modules/desktop_capture/linux/xdg_desktop_portal_base.h",
        "patchSetId": 29
      },
      "lineNbr": 170,
      "author": {
        "id": 8046
      },
      "writtenOn": "2020-10-06T16:11:20Z",
      "side": 1,
      "message": "The id_ is initialized in the constructor:\nConnectionData::ConnectionData(int32_t id) {\n  id_ \u003d id;\n}",
      "parentUuid": "d993f1ed_55863359",
      "revId": "49dd6509e78eaa0a33c35e424ef7f80eebadbcd1",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7ab94bd4_b43723b1",
        "filename": "modules/desktop_capture/linux/xdg_desktop_portal_base.h",
        "patchSetId": 29
      },
      "lineNbr": 170,
      "author": {
        "id": 5508
      },
      "writtenOn": "2020-10-06T17:02:27Z",
      "side": 1,
      "message": "yup, I know. I\u0027d prefer to have it be const so that it\u0027s not possible to forget to initialize it (e.g. if someone adds a default ctor) and that the value never changes.\n\nBtw, can you change the ctor to use an initializer list?",
      "parentUuid": "2d6fdfe1_f3a10756",
      "revId": "49dd6509e78eaa0a33c35e424ef7f80eebadbcd1",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "26d24814_6251e255",
        "filename": "modules/desktop_capture/linux/xdg_desktop_portal_base.h",
        "patchSetId": 29
      },
      "lineNbr": 170,
      "author": {
        "id": 8046
      },
      "writtenOn": "2020-10-06T17:54:56Z",
      "side": 1,
      "message": "Done.",
      "parentUuid": "7ab94bd4_b43723b1",
      "revId": "49dd6509e78eaa0a33c35e424ef7f80eebadbcd1",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "58ef26b4_1bc4ad9f",
        "filename": "modules/desktop_capture/linux/xdg_desktop_portal_base.h",
        "patchSetId": 29
      },
      "lineNbr": 175,
      "author": {
        "id": 5508
      },
      "writtenOn": "2020-10-06T14:50:04Z",
      "side": 1,
      "message": "skip \u003d {}",
      "revId": "49dd6509e78eaa0a33c35e424ef7f80eebadbcd1",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "aa9bf73a_f75a7c17",
        "filename": "modules/desktop_capture/linux/xdg_desktop_portal_base.h",
        "patchSetId": 29
      },
      "lineNbr": 175,
      "author": {
        "id": 8046
      },
      "writtenOn": "2020-10-06T16:11:20Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "58ef26b4_1bc4ad9f",
      "revId": "49dd6509e78eaa0a33c35e424ef7f80eebadbcd1",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    }
  ]
}