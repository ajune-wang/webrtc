{
  "comments": [
    {
      "key": {
        "uuid": "51e5ee08_84ea439d",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 12,
      "author": {
        "id": 5126
      },
      "writtenOn": "2019-03-01T11:29:57Z",
      "side": 1,
      "message": "I agree that centralizing this dangerous practice is useful. It makes it easier to spot and track.",
      "revId": "ca43a255febc0c1c03e1186c124f7bc10b70b8cf",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c70463e6_f0deb83d",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 12,
      "author": {
        "id": 5019
      },
      "writtenOn": "2019-03-01T11:54:06Z",
      "side": 1,
      "message": "there is TaskQueueForTest that is one of the attempts to centralize that.\n\nTaskQueue is by design asynchronous. Introducing blocking method (even though called unsafe) seems like giving up on the main idea of the TaskQueue.\n\nI think it would be helpful to create and discuss a design doc how TaskQueue interface suppose to look like before adding new functions into it.\n\nA different design can produce a plan how to reduce/eliminate number of blocking calls.\nCentralizing that usage can be a step towards that goal, but it is only a step.\nWithout bigger picture it looks harmful.",
      "parentUuid": "51e5ee08_84ea439d",
      "revId": "ca43a255febc0c1c03e1186c124f7bc10b70b8cf",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b9d869a2_ee7332d7",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 20,
      "author": {
        "id": 5126
      },
      "writtenOn": "2019-03-01T11:29:57Z",
      "side": 1,
      "message": "Is the problem that you\u0027re planning to use a pool of size 1 for all task queues in the system, and we have code that makes blocking calls from one task queue to another? And you plan to work around the problem by letting the single, \"blocked\" thread do other work for the pool while it waits?\n\nAn alternative that\u0027s simpler for the TQ implementations would be to have TQBase methods called e.g. StartBlockingOperation() and EndBlockingOperation() that you call around the Wait(). Defaulting to no-ops, but implementations could e.g. use them to temporarily increase their pool size by 1.",
      "revId": "ca43a255febc0c1c03e1186c124f7bc10b70b8cf",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2c69f0c7_8aa5051a",
        "filename": "api/task_queue/task_queue_base.h",
        "patchSetId": 1
      },
      "lineNbr": 63,
      "author": {
        "id": 5126
      },
      "writtenOn": "2019-03-01T11:29:57Z",
      "side": 1,
      "message": "Not sure I agree with this prefix---it seems to imply that there should also be a safe version, which there is not. Just the \"Blocking\" prefix should be enough of a warning flag.\n\nAlso, please document this method here, including the fact that implementations that use real wallclock time should have no need to override it.",
      "range": {
        "startLine": 63,
        "startChar": 15,
        "endLine": 63,
        "endChar": 21
      },
      "revId": "ca43a255febc0c1c03e1186c124f7bc10b70b8cf",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "26d3d697_5b331fd6",
        "filename": "rtc_base/task_queue.h",
        "patchSetId": 1
      },
      "lineNbr": 241,
      "author": {
        "id": 5126
      },
      "writtenOn": "2019-03-01T11:29:57Z",
      "side": 1,
      "message": "We do not in fact want users to avoid this at all costs, so the comment should be moderated. And please also warn against deadlocks---that\u0027s the danger when you call this from a thread instead of a TQ (and it\u0027s also a danger when you call from a TQ).",
      "revId": "ca43a255febc0c1c03e1186c124f7bc10b70b8cf",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    }
  ]
}