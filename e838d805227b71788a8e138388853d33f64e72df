{
  "comments": [
    {
      "key": {
        "uuid": "14a681bf_413c705c",
        "filename": "modules/audio_processing/include/audio_processing.h",
        "patchSetId": 9
      },
      "lineNbr": 305,
      "author": {
        "id": 5125
      },
      "writtenOn": "2018-04-12T14:14:02Z",
      "side": 1,
      "message": "message -\u003e setting",
      "range": {
        "startLine": 305,
        "startChar": 66,
        "endLine": 305,
        "endChar": 73
      },
      "revId": "e838d805227b71788a8e138388853d33f64e72df",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a7629447_aff124ce",
        "filename": "modules/audio_processing/include/audio_processing.h",
        "patchSetId": 9
      },
      "lineNbr": 305,
      "author": {
        "id": 5125
      },
      "writtenOn": "2018-04-12T14:14:02Z",
      "side": 1,
      "message": "I\u0027d rather see a comment about what the class does. The comments that it consists of an ID and a value is redundant, since that is clear from the class declaration.\nE.g.,\nSpecified the properties of a setting for passing to an AudioProcessing object during runtime.",
      "range": {
        "startLine": 305,
        "startChar": 2,
        "endLine": 305,
        "endChar": 18
      },
      "revId": "e838d805227b71788a8e138388853d33f64e72df",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "92c21b98_00f77608",
        "filename": "modules/audio_processing/include/audio_processing.h",
        "patchSetId": 9
      },
      "lineNbr": 305,
      "author": {
        "id": 5122
      },
      "writtenOn": "2018-04-12T16:24:11Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "14a681bf_413c705c",
      "range": {
        "startLine": 305,
        "startChar": 66,
        "endLine": 305,
        "endChar": 73
      },
      "revId": "e838d805227b71788a8e138388853d33f64e72df",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a7030e0c_19a5bbf6",
        "filename": "modules/audio_processing/include/audio_processing.h",
        "patchSetId": 9
      },
      "lineNbr": 305,
      "author": {
        "id": 5122
      },
      "writtenOn": "2018-04-12T16:24:11Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a7629447_aff124ce",
      "range": {
        "startLine": 305,
        "startChar": 2,
        "endLine": 305,
        "endChar": 18
      },
      "revId": "e838d805227b71788a8e138388853d33f64e72df",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8e4db11d_116d6fbc",
        "filename": "modules/audio_processing/include/audio_processing.h",
        "patchSetId": 9
      },
      "lineNbr": 307,
      "author": {
        "id": 5125
      },
      "writtenOn": "2018-04-12T14:14:02Z",
      "side": 1,
      "message": "I\u0027m missing a factory method. What is the reason for skipping that? I think it would be much easier if the user don\u0027t need to state the ID.",
      "range": {
        "startLine": 307,
        "startChar": 8,
        "endLine": 307,
        "endChar": 22
      },
      "revId": "e838d805227b71788a8e138388853d33f64e72df",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "621f2831_3a59919e",
        "filename": "modules/audio_processing/include/audio_processing.h",
        "patchSetId": 9
      },
      "lineNbr": 307,
      "author": {
        "id": 5122
      },
      "writtenOn": "2018-04-12T16:24:11Z",
      "side": 1,
      "message": "Since we only have one type of payload (i.e., float), factory methods would be redundant code that only hides the RuntimeSetting::Id values. It would lead to names duplication, because each factory method should be named after its corresponding entry in RuntimeSetting::Id (so I don\u0027t see a clear advantage for the user).\n\nI would see a valid reason for adding factory methods if we made them responsible for validating the payload (e.g., kUpdateCapturePreGain only accepts \u003e\u003d 1.f). But I don\u0027t like this solution either because it is better that each APM sub-module validates its parameters.\n\nFinally, if we ever need to add payloads of different type, then we could switch to factory methods to make sure that the right payload type is used. The same cannot be done with overloaded ctors since it would require to check that the given ID is compatible with the type but then we have no means to return an error from the ctor.\n\nConclusion: unless we already know that we are going to add other setting types (e.g., int) I would rely on ctors.",
      "parentUuid": "8e4db11d_116d6fbc",
      "range": {
        "startLine": 307,
        "startChar": 8,
        "endLine": 307,
        "endChar": 22
      },
      "revId": "e838d805227b71788a8e138388853d33f64e72df",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c16949fe_bb2dc7f1",
        "filename": "modules/audio_processing/include/audio_processing.h",
        "patchSetId": 9
      },
      "lineNbr": 307,
      "author": {
        "id": 5125
      },
      "writtenOn": "2018-04-13T13:32:21Z",
      "side": 1,
      "message": "I don\u0027t agree. The main purpose of a factory method is to simplify the usage of this class. Furthermore, even though there is only one use of this class now there are plans for using it for passing other values which means that ng  make sense to design for that.\n\nPayload validation is definitely something that should be added. For instance, for the pre-gain, it makes sense to DCHECK if a gain \u003c 1.f is provided. It may make sense to put some of these checks into APM but the ones we can do here we t as this clearly specifies the allowed parameter range close to the parameter definitions.\n\n\nRegarding simplicity:\nWithout factory methods the user must use the pattern\nRuntimeSetting setting(RuntimeSetting::kUpdateCapturePreGain , 0.7f);\n\nWith factory methods the used can use the pattern\nauto setting \u003d RuntimeSetting::CreatePreGainSetting(0.7f); \n\nI would definite argue that the latter is more readable and easier to use.",
      "parentUuid": "621f2831_3a59919e",
      "range": {
        "startLine": 307,
        "startChar": 8,
        "endLine": 307,
        "endChar": 22
      },
      "revId": "e838d805227b71788a8e138388853d33f64e72df",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "36a056ef_6038a2f6",
        "filename": "modules/audio_processing/include/audio_processing.h",
        "patchSetId": 9
      },
      "lineNbr": 307,
      "author": {
        "id": 5122
      },
      "writtenOn": "2018-04-13T15:42:59Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c16949fe_bb2dc7f1",
      "range": {
        "startLine": 307,
        "startChar": 8,
        "endLine": 307,
        "endChar": 22
      },
      "revId": "e838d805227b71788a8e138388853d33f64e72df",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fba4618e_3f92f0fb",
        "filename": "modules/audio_processing/include/audio_processing.h",
        "patchSetId": 9
      },
      "lineNbr": 309,
      "author": {
        "id": 5125
      },
      "writtenOn": "2018-04-12T14:14:02Z",
      "side": 1,
      "message": "Please change kNull to kNotSpecified.",
      "range": {
        "startLine": 309,
        "startChar": 20,
        "endLine": 309,
        "endChar": 25
      },
      "revId": "e838d805227b71788a8e138388853d33f64e72df",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2e34d181_c7e3475d",
        "filename": "modules/audio_processing/include/audio_processing.h",
        "patchSetId": 9
      },
      "lineNbr": 309,
      "author": {
        "id": 5125
      },
      "writtenOn": "2018-04-12T14:14:02Z",
      "side": 1,
      "message": "What about\nId -\u003e Type\n\nTo me, and ID is more of an index into a database such as an SQL id.\n\nWhat I think we are after here is the type of a setting.",
      "range": {
        "startLine": 309,
        "startChar": 15,
        "endLine": 309,
        "endChar": 17
      },
      "revId": "e838d805227b71788a8e138388853d33f64e72df",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "da3d2fbb_1f9cde2c",
        "filename": "modules/audio_processing/include/audio_processing.h",
        "patchSetId": 9
      },
      "lineNbr": 309,
      "author": {
        "id": 5122
      },
      "writtenOn": "2018-04-12T16:24:11Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "2e34d181_c7e3475d",
      "range": {
        "startLine": 309,
        "startChar": 15,
        "endLine": 309,
        "endChar": 17
      },
      "revId": "e838d805227b71788a8e138388853d33f64e72df",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b6b3ace8_74f09ba9",
        "filename": "modules/audio_processing/include/audio_processing.h",
        "patchSetId": 9
      },
      "lineNbr": 309,
      "author": {
        "id": 5122
      },
      "writtenOn": "2018-04-12T16:24:11Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "fba4618e_3f92f0fb",
      "range": {
        "startLine": 309,
        "startChar": 20,
        "endLine": 309,
        "endChar": 25
      },
      "revId": "e838d805227b71788a8e138388853d33f64e72df",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "adf72ca1_7069ca4a",
        "filename": "modules/audio_processing/include/audio_processing.h",
        "patchSetId": 9
      },
      "lineNbr": 316,
      "author": {
        "id": 5125
      },
      "writtenOn": "2018-04-12T14:14:02Z",
      "side": 1,
      "message": "I\u0027d rather change this to\nvoid GetValue(*float) const { RTC_DCHECK(value); *value \u003d value_; }\nas that will scale better when other payloads are added.",
      "range": {
        "startLine": 316,
        "startChar": 10,
        "endLine": 316,
        "endChar": 15
      },
      "revId": "e838d805227b71788a8e138388853d33f64e72df",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5d22a1b9_864c9c87",
        "filename": "modules/audio_processing/include/audio_processing.h",
        "patchSetId": 9
      },
      "lineNbr": 316,
      "author": {
        "id": 5122
      },
      "writtenOn": "2018-04-12T16:24:11Z",
      "side": 1,
      "message": "I think this CL follows the expectation that no new payload type will be added anytime soon. Therefore, the code is written without anticipating future needs and hence, for consistency, I would not do this. Also, if I were to say which payload types we may add, I wouldn\u0027t expect anything that has an expensive copy.",
      "parentUuid": "adf72ca1_7069ca4a",
      "range": {
        "startLine": 316,
        "startChar": 10,
        "endLine": 316,
        "endChar": 15
      },
      "revId": "e838d805227b71788a8e138388853d33f64e72df",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "66789d8f_27881b8f",
        "filename": "modules/audio_processing/include/audio_processing.h",
        "patchSetId": 9
      },
      "lineNbr": 316,
      "author": {
        "id": 5125
      },
      "writtenOn": "2018-04-13T13:32:21Z",
      "side": 1,
      "message": "I don\u0027t think we should write code that we won\u0027t use in the near future but I for sure think that we should write the code in a way that scales for the future. And we should not write code in a way we know we\u0027ll need to change if we have a good alternative to that.\n\nI don\u0027t see how passing the value by reference violates any consistency. The benefit of the construct with returning the values using an output parameter is that we\u0027d not need to annotate the methods by what the return type is.",
      "parentUuid": "5d22a1b9_864c9c87",
      "range": {
        "startLine": 316,
        "startChar": 10,
        "endLine": 316,
        "endChar": 15
      },
      "revId": "e838d805227b71788a8e138388853d33f64e72df",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f0594db6_6d0c2b39",
        "filename": "modules/audio_processing/include/audio_processing.h",
        "patchSetId": 9
      },
      "lineNbr": 316,
      "author": {
        "id": 5122
      },
      "writtenOn": "2018-04-13T15:42:59Z",
      "side": 1,
      "message": "From https://google.github.io/styleguide/cppguide.html#Output_Parameters:\n\"Prefer using return values instead of output parameters since they improve readability and oftentimes provide the same or better performance.\"\n\nAnd from https://google.github.io/styleguide/cppguide.html#Function_Overloading:\n\"Use overloaded functions (including constructors) only if a reader looking at a call site can get a good idea of what is happening without having to first figure out exactly which overload is being called.\"\n\nThese style guide paragraphs are not hard constraints, so we can opt for void GetValue(float*) or alternatively for void GetFloat(float*). My personal preference is to leave as it is now, but feel free to make the final decision.",
      "parentUuid": "66789d8f_27881b8f",
      "range": {
        "startLine": 316,
        "startChar": 10,
        "endLine": 316,
        "endChar": 15
      },
      "revId": "e838d805227b71788a8e138388853d33f64e72df",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d6ba8d8c_a2896c7e",
        "filename": "modules/audio_processing/include/audio_processing.h",
        "patchSetId": 9
      },
      "lineNbr": 316,
      "author": {
        "id": 5125
      },
      "writtenOn": "2018-04-16T07:11:41Z",
      "side": 1,
      "message": "Thanks! I think you are right. Regardless of that the guideline is not strict in this I think the variant you propose is better than the other one in this case.",
      "parentUuid": "f0594db6_6d0c2b39",
      "range": {
        "startLine": 316,
        "startChar": 10,
        "endLine": 316,
        "endChar": 15
      },
      "revId": "e838d805227b71788a8e138388853d33f64e72df",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e595bcbd_1f5be225",
        "filename": "modules/audio_processing/include/audio_processing.h",
        "patchSetId": 9
      },
      "lineNbr": 381,
      "author": {
        "id": 5125
      },
      "writtenOn": "2018-04-12T14:14:02Z",
      "side": 1,
      "message": "mst-\u003esetting",
      "range": {
        "startLine": 381,
        "startChar": 52,
        "endLine": 381,
        "endChar": 55
      },
      "revId": "e838d805227b71788a8e138388853d33f64e72df",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f06a169d_7cb6b078",
        "filename": "modules/audio_processing/include/audio_processing.h",
        "patchSetId": 9
      },
      "lineNbr": 381,
      "author": {
        "id": 5125
      },
      "writtenOn": "2018-04-12T14:14:02Z",
      "side": 1,
      "message": "I\u0027d prefer SetRuntimeSetting.\nThe engueing part is an implementation detail which does not concern the user.",
      "range": {
        "startLine": 381,
        "startChar": 15,
        "endLine": 381,
        "endChar": 36
      },
      "revId": "e838d805227b71788a8e138388853d33f64e72df",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "85b54ab0_8004ac9d",
        "filename": "modules/audio_processing/include/audio_processing.h",
        "patchSetId": 9
      },
      "lineNbr": 381,
      "author": {
        "id": 5122
      },
      "writtenOn": "2018-04-12T16:24:11Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e595bcbd_1f5be225",
      "range": {
        "startLine": 381,
        "startChar": 52,
        "endLine": 381,
        "endChar": 55
      },
      "revId": "e838d805227b71788a8e138388853d33f64e72df",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "532e68cd_140a6ce1",
        "filename": "modules/audio_processing/include/audio_processing.h",
        "patchSetId": 9
      },
      "lineNbr": 381,
      "author": {
        "id": 5122
      },
      "writtenOn": "2018-04-12T16:24:11Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f06a169d_7cb6b078",
      "range": {
        "startLine": 381,
        "startChar": 15,
        "endLine": 381,
        "endChar": 36
      },
      "revId": "e838d805227b71788a8e138388853d33f64e72df",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    }
  ]
}