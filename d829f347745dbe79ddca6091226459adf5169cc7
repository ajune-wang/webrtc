{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "fe9997c2_cbe36c1e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 11
      },
      "lineNbr": 0,
      "author": {
        "id": 3350241
      },
      "writtenOn": "2024-09-04T22:36:38Z",
      "side": 1,
      "message": "davidben: one code question below (and I need a second +1).\n\nLooks like Chrome in general removed 1024 bit RSA key support in 2017 already which should make it easy to justify the removal in WebRTCs generateCertificate.",
      "revId": "d829f347745dbe79ddca6091226459adf5169cc7",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dd48e4fe_3add8f82",
        "filename": "rtc_base/openssl_stream_adapter.cc",
        "patchSetId": 11
      },
      "lineNbr": 1213,
      "author": {
        "id": 5602
      },
      "writtenOn": "2024-09-04T22:58:52Z",
      "side": 1,
      "message": "I mean, this works, but it\u0027s kind of weird that all the other ifdefs use the `TLS1_CK_` constant while this uses the `TLS1_RFC` constant.\n\n```suggestion\n#elif defined(TLS1_CK_ECDHE_ECDSA_WITH_CHACHA20_POLY1305)  // OpenSSL.\n```\n\nAlso, ugh, why did OpenSSL go against the IANA naming convention here? The actual name of the cipher suite is ..._CHACHA20_POLY1305_SHA256, because they put the PRF hashes in.\n\nI mean, I could go define the other one in BoringSSL for OpenSSL compatibility. Probably should. (To that end, that\u0027s why I\u0027m suggesting `#elif`. Otherwise, if BoringSSL defines both, this code will get confused.)",
      "range": {
        "startLine": 1212,
        "startChar": 0,
        "endLine": 1213,
        "endChar": 63
      },
      "revId": "d829f347745dbe79ddca6091226459adf5169cc7",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3255f6af_cc1ddb97",
        "filename": "rtc_base/openssl_stream_adapter.cc",
        "patchSetId": 11
      },
      "lineNbr": 1213,
      "author": {
        "id": 3350241
      },
      "writtenOn": "2024-09-05T17:11:48Z",
      "side": 1,
      "message": "manually applied",
      "parentUuid": "dd48e4fe_3add8f82",
      "range": {
        "startLine": 1212,
        "startChar": 0,
        "endLine": 1213,
        "endChar": 63
      },
      "revId": "d829f347745dbe79ddca6091226459adf5169cc7",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c7fba1c5_9ccbcd3a",
        "filename": "rtc_base/openssl_stream_adapter.cc",
        "patchSetId": 11
      },
      "lineNbr": 1228,
      "author": {
        "id": 5602
      },
      "writtenOn": "2024-09-04T22:58:52Z",
      "side": 1,
      "message": "```suggestion\n#elif defined(TLS1_CK_ECDHE_ECDSA_WITH_CHACHA20_POLY1305)  // OpenSSL.\n```\n\nditto.",
      "range": {
        "startLine": 1227,
        "startChar": 0,
        "endLine": 1228,
        "endChar": 62
      },
      "revId": "d829f347745dbe79ddca6091226459adf5169cc7",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "638f307d_b69309b5",
        "filename": "rtc_base/openssl_stream_adapter.cc",
        "patchSetId": 11
      },
      "lineNbr": 1228,
      "author": {
        "id": 3350241
      },
      "writtenOn": "2024-09-05T17:11:48Z",
      "side": 1,
      "message": "manually applied",
      "parentUuid": "c7fba1c5_9ccbcd3a",
      "range": {
        "startLine": 1227,
        "startChar": 0,
        "endLine": 1228,
        "endChar": 62
      },
      "revId": "d829f347745dbe79ddca6091226459adf5169cc7",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e84dbbc4_3c25938c",
        "filename": "rtc_base/openssl_stream_adapter.cc",
        "patchSetId": 11
      },
      "lineNbr": 1234,
      "author": {
        "id": 5602
      },
      "writtenOn": "2024-09-05T15:35:59Z",
      "side": 1,
      "message": "Better yet, delete all this code and replace it with `SSL_CIPHER_get_auth_nid`.\n\nAlthough there\u0027s a deeper problem here which is that RSA vs ECDSA is much, much more complicated than looking at the cipher suite. In fact this code is already incompatible with (D)TLS 1.3, which you all will need to move to for postquantum. (We\u0027re working on DTLS 1.3 implementation for BoringSSL right now.) (D)TLS 1.3 uses the signature algorithms to negotiate the certificate type.\n\nThough I also see no callers for this, so I\u0027m a little confused what this is for. Is this public API? That may be a problem as this public API will be unsalvageable.\n\nFor dispatching between RSA and ECDSA, BoringSSL has the SSL_CREDENTIAL API:\nhttps://commondatastorage.googleapis.com/chromium-boringssl-docs/ssl.h.html#Credentials\n\nThis API doesn\u0027t exist in OpenSSL, however. OpenSSL has some very weird behavior (that BoringSSL does not have, as it\u0027s kinda broken will things like intermediates and OCSP staples) where you can install one RSA key and one ECDSA key because the APIs to configure things secretly go into different slots. But it\u0027s super buggy because it\u0027s very easy to mix up additional information like the intermediates.",
      "revId": "d829f347745dbe79ddca6091226459adf5169cc7",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "64314e79_de981b95",
        "filename": "rtc_base/openssl_stream_adapter.cc",
        "patchSetId": 11
      },
      "lineNbr": 1234,
      "author": {
        "id": 3350241
      },
      "writtenOn": "2024-09-05T17:11:48Z",
      "side": 1,
      "message": "Even better, delete all this code!\n\nI do not see why WebRTC would restrict the TLS cipher suites in either IETF or W3C specs, it should (and hopefully does) just reference them and then hope the TLS libraries do the right thing.\n\nWill do as a separate CL since there are a few of unit tests that reference it.",
      "parentUuid": "e84dbbc4_3c25938c",
      "revId": "d829f347745dbe79ddca6091226459adf5169cc7",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e804ea58_b6dacd57",
        "filename": "rtc_base/openssl_stream_adapter.cc",
        "patchSetId": 11
      },
      "lineNbr": 1234,
      "author": {
        "id": 5602
      },
      "writtenOn": "2024-09-05T17:21:26Z",
      "side": 1,
      "message": "Ah yeah, I see this is just used in tests. I assumed this was an API for picking RSA vs ECDSA certificates. Yeah, deleting it entirely sounds great!",
      "parentUuid": "64314e79_de981b95",
      "revId": "d829f347745dbe79ddca6091226459adf5169cc7",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e115233f_30d84500",
        "filename": "rtc_base/ssl_stream_adapter_unittest.cc",
        "patchSetId": 11
      },
      "lineNbr": 1173,
      "author": {
        "id": 3350241
      },
      "writtenOn": "2024-09-04T22:36:38Z",
      "side": 1,
      "message": "davidben: maybe you know a better define for this than \"we are using BoringSSL\".",
      "revId": "d829f347745dbe79ddca6091226459adf5169cc7",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "aaaeda44_2cbbd84b",
        "filename": "rtc_base/ssl_stream_adapter_unittest.cc",
        "patchSetId": 11
      },
      "lineNbr": 1173,
      "author": {
        "id": 5602
      },
      "writtenOn": "2024-09-04T22:58:52Z",
      "side": 1,
      "message": "Er, what\u0027s the context here? SHA-1 and SHA-224 are also implemented in OpenSSL...",
      "parentUuid": "e115233f_30d84500",
      "revId": "d829f347745dbe79ddca6091226459adf5169cc7",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a9d854ee_a1114ba4",
        "filename": "rtc_base/ssl_stream_adapter_unittest.cc",
        "patchSetId": 11
      },
      "lineNbr": 1173,
      "author": {
        "id": 3350241
      },
      "writtenOn": "2024-09-05T17:11:48Z",
      "side": 1,
      "message": "These two break in OpenSSL because OpenSSL 3.x deprecates SHA1 for cert signatures. On some Linux distributions (Ubuntu; not Fedora; different \"security levels\" I thnk). Yet  SHA_DIGEST_LENGTH and SHA224_DIGEST_LENGTH are still defined.\n\nI have not yet seen a good define for this and it seems weird that BoringSSL is putting up with it whe OpenSSL no longer does.",
      "parentUuid": "aaaeda44_2cbbd84b",
      "revId": "d829f347745dbe79ddca6091226459adf5169cc7",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e38e0c00_9ce6ce1c",
        "filename": "rtc_base/ssl_stream_adapter_unittest.cc",
        "patchSetId": 11
      },
      "lineNbr": 1173,
      "author": {
        "id": 5602
      },
      "writtenOn": "2024-09-05T17:19:23Z",
      "side": 1,
      "message": "Oh yeah the \"security level\" stuff is kinda incoherent and not very well thought through.\n\nBoringSSL has to put up with it because a bunch of projects, like this one, write tests that assert that they need it to work. :P\n\nIf WebRTC needs these to work, it should presumably configure OpenSSL 3.x with a \"security level\" that makes those work. If WebRTC doesn\u0027t need these to work, it shouldn\u0027t wire it up and test it. Which is it?",
      "parentUuid": "a9d854ee_a1114ba4",
      "revId": "d829f347745dbe79ddca6091226459adf5169cc7",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "1ef86a22_7c3d0aef",
        "filename": "rtc_base/ssl_stream_adapter_unittest.cc",
        "patchSetId": 11
      },
      "lineNbr": 1173,
      "author": {
        "id": 3350241
      },
      "writtenOn": "2024-09-05T17:51:02Z",
      "side": 1,
      "message": "That inconsistency is what I figured out trying to get it to run on different operating systems. What made me discover this particular thing is that we are in the process of adding a bot to run the OpenSSL variant (which as you probably noticed turned out to be quite a rabbithole)\n\nIf BoringSSL provides more test coverage we\u0027ll take that and revisit once it breaks the roll. Added a comment.",
      "parentUuid": "e38e0c00_9ce6ce1c",
      "revId": "d829f347745dbe79ddca6091226459adf5169cc7",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "25ade499_1860a86e",
        "filename": "rtc_base/ssl_stream_adapter_unittest.cc",
        "patchSetId": 11
      },
      "lineNbr": 1173,
      "author": {
        "id": 5602
      },
      "writtenOn": "2024-09-06T19:10:34Z",
      "side": 1,
      "message": "\u003e and revisit once it breaks the roll.\n\nThat is not how we do things. Once we land a change into BoringSSL, the autoroller will pull it into Chromium. If WebRTC breaks, that holds back *all* BoringSSL updates from Chromium.\n\nAs such, for things like this, the expectation is that downstream code\u0027s test accurate reflects what it actually wants. As long as WebRTC has SHA-1 tests here, the interpretation is that WebRTC actively wants to support SHA-1.\n\nSo, again, *what does WebRTC want to support in this context*? You all need to have a clear position here. The choices are:\n\n1. WebRTC wants SHA-1 to work here.\n2. WebRTC does not want SHA-1 to work here.\n\nIf you pick 1, you should remove this ifdef. Rather, the remediation for OpenSSL is to change how you call OpenSSL so that the tests pass.\n\nIF you pick 2, you should remove this ifdef and remove the tests, in both OpenSSL and BoringSSL.",
      "parentUuid": "1ef86a22_7c3d0aef",
      "revId": "d829f347745dbe79ddca6091226459adf5169cc7",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    }
  ]
}