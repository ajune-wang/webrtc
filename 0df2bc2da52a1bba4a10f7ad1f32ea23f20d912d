{
  "comments": [
    {
      "key": {
        "uuid": "27daef66_e688106e",
        "filename": "modules/audio_coding/neteq/decision_logic.cc",
        "patchSetId": 4
      },
      "lineNbr": 174,
      "author": {
        "id": 5607
      },
      "writtenOn": "2019-03-12T09:35:32Z",
      "side": 1,
      "message": "Should we add the contents of the sync buffer here?",
      "range": {
        "startLine": 174,
        "startChar": 6,
        "endLine": 174,
        "endChar": 34
      },
      "revId": "0df2bc2da52a1bba4a10f7ad1f32ea23f20d912d",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ebca9f04_75d854e9",
        "filename": "modules/audio_coding/neteq/decision_logic.cc",
        "patchSetId": 4
      },
      "lineNbr": 174,
      "author": {
        "id": 7015
      },
      "writtenOn": "2019-03-12T09:42:39Z",
      "side": 1,
      "message": "Yes, agree.",
      "parentUuid": "27daef66_e688106e",
      "range": {
        "startLine": 174,
        "startChar": 6,
        "endLine": 174,
        "endChar": 34
      },
      "revId": "0df2bc2da52a1bba4a10f7ad1f32ea23f20d912d",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "90dc85c0_89cc24e8",
        "filename": "modules/audio_coding/neteq/decision_logic.cc",
        "patchSetId": 4
      },
      "lineNbr": 174,
      "author": {
        "id": 8038
      },
      "writtenOn": "2019-03-12T09:54:19Z",
      "side": 1,
      "message": "Do you think changing the call on line 120 would be too big of a change? Meaning that we would update the BufferLevelFilter with this duration as well (that would probably be the correct behavior though).",
      "parentUuid": "ebca9f04_75d854e9",
      "range": {
        "startLine": 174,
        "startChar": 6,
        "endLine": 174,
        "endChar": 34
      },
      "revId": "0df2bc2da52a1bba4a10f7ad1f32ea23f20d912d",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a6fe395f_3f8fabd8",
        "filename": "modules/audio_coding/neteq/decision_logic.cc",
        "patchSetId": 4
      },
      "lineNbr": 174,
      "author": {
        "id": 7015
      },
      "writtenOn": "2019-03-12T11:13:02Z",
      "side": 1,
      "message": "I think we need to take extra caution on that (please add todo there)",
      "parentUuid": "90dc85c0_89cc24e8",
      "range": {
        "startLine": 174,
        "startChar": 6,
        "endLine": 174,
        "endChar": 34
      },
      "revId": "0df2bc2da52a1bba4a10f7ad1f32ea23f20d912d",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e96319a2_0d2e97bd",
        "filename": "modules/audio_coding/neteq/decision_logic.cc",
        "patchSetId": 4
      },
      "lineNbr": 174,
      "author": {
        "id": 8038
      },
      "writtenOn": "2019-03-12T11:40:14Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a6fe395f_3f8fabd8",
      "range": {
        "startLine": 174,
        "startChar": 6,
        "endLine": 174,
        "endChar": 34
      },
      "revId": "0df2bc2da52a1bba4a10f7ad1f32ea23f20d912d",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cc2f2dcf_26f16257",
        "filename": "modules/audio_coding/neteq/packet_buffer.cc",
        "patchSetId": 4
      },
      "lineNbr": 290,
      "author": {
        "id": 7015
      },
      "writtenOn": "2019-03-12T09:15:42Z",
      "side": 1,
      "message": "I think this is similar to NumSamplesInBuffer, and can probably be merged into that by adding \"bool count_gaps\"",
      "range": {
        "startLine": 290,
        "startChar": 21,
        "endLine": 290,
        "endChar": 32
      },
      "revId": "0df2bc2da52a1bba4a10f7ad1f32ea23f20d912d",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "045e25de_2b0778dc",
        "filename": "modules/audio_coding/neteq/packet_buffer.cc",
        "patchSetId": 4
      },
      "lineNbr": 290,
      "author": {
        "id": 8038
      },
      "writtenOn": "2019-03-12T11:40:14Z",
      "side": 1,
      "message": "Merging into NumSamplesInBuffer would be a lot more complicated (what if we have overlapping timestamps?).",
      "parentUuid": "cc2f2dcf_26f16257",
      "range": {
        "startLine": 290,
        "startChar": 21,
        "endLine": 290,
        "endChar": 32
      },
      "revId": "0df2bc2da52a1bba4a10f7ad1f32ea23f20d912d",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c7911985_41422b3f",
        "filename": "modules/audio_coding/neteq/packet_buffer.cc",
        "patchSetId": 4
      },
      "lineNbr": 290,
      "author": {
        "id": 7015
      },
      "writtenOn": "2019-03-12T11:58:34Z",
      "side": 1,
      "message": "I think since the chance is that we merge the two functions, it would be good that we can put them into one, and it does not seem difficult for me. Consider my outlooking of it:\n\n--  for (const Packet\u0026 packet : buffer_) {\n++  for (std::list\u003cPacket\u003e::const_iterator it \u003d buffer_.cbegin(), it !\u003d buffer_.cend(); ++it)\n++  const auto\u0026 packet \u003d *it;\n    if (packet.frame) {\n      // TODO(hlundin): Verify that it\u0027s fine to count all packets and remove\n      // this check.\n      if (packet.priority !\u003d Packet::Priority(0, 0)) {\n        continue;\n      }\n      size_t duration \u003d packet.frame-\u003eDuration();\n      if (duration \u003e 0) {\n        last_duration \u003d duration;  // Save the most up-to-date (valid) duration.\n      }\n    }\n++    num_samples +\u003d last_duration;\n++    if (count_gaps \u0026\u0026 it + 1!\u003d buffer_.cend()) {\n++      int gap \u003d (it + 1)-\u003etimestamp - packet.timestamp - last_duration;\n++      if (gap \u003e 0) {\n++        num_samples +\u003d gap;\n++      }\n++    }\n  }",
      "parentUuid": "045e25de_2b0778dc",
      "range": {
        "startLine": 290,
        "startChar": 21,
        "endLine": 290,
        "endChar": 32
      },
      "revId": "0df2bc2da52a1bba4a10f7ad1f32ea23f20d912d",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "45f36d89_b500a38f",
        "filename": "modules/audio_coding/neteq/packet_buffer.cc",
        "patchSetId": 4
      },
      "lineNbr": 290,
      "author": {
        "id": 8038
      },
      "writtenOn": "2019-03-12T12:11:09Z",
      "side": 1,
      "message": "Sure this looks correct. But if we were to change every caller to use count_gaps then we would not do it this way since iterating over the packets would be unnecessary, right?\n\nI also think this would over count if we have overlapping timestamps, but that shouldn\u0027t be a problem in reality.",
      "parentUuid": "c7911985_41422b3f",
      "range": {
        "startLine": 290,
        "startChar": 21,
        "endLine": 290,
        "endChar": 32
      },
      "revId": "0df2bc2da52a1bba4a10f7ad1f32ea23f20d912d",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7ff29313_1ffa2055",
        "filename": "modules/audio_coding/neteq/packet_buffer.cc",
        "patchSetId": 4
      },
      "lineNbr": 290,
      "author": {
        "id": 7015
      },
      "writtenOn": "2019-03-12T12:20:55Z",
      "side": 1,
      "message": "I think the point of efficient calculation makes good sense.",
      "parentUuid": "45f36d89_b500a38f",
      "range": {
        "startLine": 290,
        "startChar": 21,
        "endLine": 290,
        "endChar": 32
      },
      "revId": "0df2bc2da52a1bba4a10f7ad1f32ea23f20d912d",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c1713d8f_56502ac5",
        "filename": "modules/audio_coding/neteq/packet_buffer.cc",
        "patchSetId": 4
      },
      "lineNbr": 290,
      "author": {
        "id": 8038
      },
      "writtenOn": "2019-03-12T12:39:37Z",
      "side": 1,
      "message": "Did what you suggested and added a TODO to simplify.",
      "parentUuid": "7ff29313_1ffa2055",
      "range": {
        "startLine": 290,
        "startChar": 21,
        "endLine": 290,
        "endChar": 32
      },
      "revId": "0df2bc2da52a1bba4a10f7ad1f32ea23f20d912d",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "19bfefcd_eef417fe",
        "filename": "modules/audio_coding/neteq/packet_buffer.cc",
        "patchSetId": 4
      },
      "lineNbr": 290,
      "author": {
        "id": 7015
      },
      "writtenOn": "2019-03-12T13:59:07Z",
      "side": 1,
      "message": "Did I mislead you? then apologies. I think your thoughts on the computation efficiency for GetSpanSamples make good sense, and it is better to add this other function.",
      "parentUuid": "c1713d8f_56502ac5",
      "range": {
        "startLine": 290,
        "startChar": 21,
        "endLine": 290,
        "endChar": 32
      },
      "revId": "0df2bc2da52a1bba4a10f7ad1f32ea23f20d912d",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a3056359_9dc647bc",
        "filename": "modules/audio_coding/neteq/packet_buffer.cc",
        "patchSetId": 4
      },
      "lineNbr": 292,
      "author": {
        "id": 7015
      },
      "writtenOn": "2019-03-12T09:15:42Z",
      "side": 1,
      "message": "please be noted that Duration() is not always implemented. See a solution in NumSamplesInBuffer",
      "range": {
        "startLine": 292,
        "startChar": 33,
        "endLine": 292,
        "endChar": 41
      },
      "revId": "0df2bc2da52a1bba4a10f7ad1f32ea23f20d912d",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "38aa7c75_f4af9dc0",
        "filename": "modules/audio_coding/neteq/packet_buffer.cc",
        "patchSetId": 4
      },
      "lineNbr": 292,
      "author": {
        "id": 8038
      },
      "writtenOn": "2019-03-12T11:40:14Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a3056359_9dc647bc",
      "range": {
        "startLine": 292,
        "startChar": 33,
        "endLine": 292,
        "endChar": 41
      },
      "revId": "0df2bc2da52a1bba4a10f7ad1f32ea23f20d912d",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e6b97135_e86d494c",
        "filename": "modules/audio_coding/neteq/packet_buffer.h",
        "patchSetId": 4
      },
      "lineNbr": 126,
      "author": {
        "id": 5607
      },
      "writtenOn": "2019-03-12T09:35:32Z",
      "side": 1,
      "message": "The name \u0027Duration\u0027 makes me think this would be measured in time, but it is actually measured in samples. I would suggest renaming to GetDurationSamples or something like GetBufferSpanSamples",
      "range": {
        "startLine": 126,
        "startChar": 17,
        "endLine": 126,
        "endChar": 28
      },
      "revId": "0df2bc2da52a1bba4a10f7ad1f32ea23f20d912d",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7245a106_57b0493e",
        "filename": "modules/audio_coding/neteq/packet_buffer.h",
        "patchSetId": 4
      },
      "lineNbr": 126,
      "author": {
        "id": 8038
      },
      "writtenOn": "2019-03-12T11:40:14Z",
      "side": 1,
      "message": "Renamed to `GetSpanSamples`.",
      "parentUuid": "e6b97135_e86d494c",
      "range": {
        "startLine": 126,
        "startChar": 17,
        "endLine": 126,
        "endChar": 28
      },
      "revId": "0df2bc2da52a1bba4a10f7ad1f32ea23f20d912d",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    }
  ]
}