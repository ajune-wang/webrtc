{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "e5a96e3e_62a7d333",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 8046
      },
      "writtenOn": "2022-08-02T15:24:44Z",
      "side": 1,
      "message": "Keeping this as WIP as I would like to have more confirmations it fixes the issue. I did couple of tries and was not able to reproduce the crash, but I was already having hard times to reproduce it before.",
      "revId": "249e402ddc6bef08db0604db1e7a5506c64db615",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6559eb32_d088e10d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 8046
      },
      "writtenOn": "2022-08-03T09:33:39Z",
      "side": 1,
      "message": "I haven\u0027t been able to reproduce the crash with this fix, but even in case it doesn\u0027t fix the crash it should be correct thing to do.",
      "revId": "249e402ddc6bef08db0604db1e7a5506c64db615",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4dd0b49d_3e9826ca",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 18474
      },
      "writtenOn": "2022-08-03T18:41:29Z",
      "side": 1,
      "message": "LGTM w/one question",
      "revId": "249e402ddc6bef08db0604db1e7a5506c64db615",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ccc4353d_eb154cc7",
        "filename": "modules/desktop_capture/linux/wayland/shared_screencast_stream.cc",
        "patchSetId": 1
      },
      "lineNbr": 450,
      "author": {
        "id": 18474
      },
      "writtenOn": "2022-08-03T18:41:29Z",
      "side": 1,
      "message": "Should we check this for failure?",
      "range": {
        "startLine": 450,
        "startChar": 23,
        "endLine": 450,
        "endChar": 53
      },
      "revId": "249e402ddc6bef08db0604db1e7a5506c64db615",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ead2533c_30cca59a",
        "filename": "modules/desktop_capture/linux/wayland/shared_screencast_stream.cc",
        "patchSetId": 1
      },
      "lineNbr": 450,
      "author": {
        "id": 14134
      },
      "writtenOn": "2022-08-03T21:46:35Z",
      "side": 1,
      "message": "Do you need to assign pw_fd_ to the return value of fcntl?",
      "revId": "249e402ddc6bef08db0604db1e7a5506c64db615",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4b4477b1_c0c4548f",
        "filename": "modules/desktop_capture/linux/wayland/shared_screencast_stream.cc",
        "patchSetId": 1
      },
      "lineNbr": 450,
      "author": {
        "id": 18474
      },
      "writtenOn": "2022-08-03T21:52:04Z",
      "side": 1,
      "message": "It\u0027s worth noting that pw_fd_ may not even be needed at all in this class, as it\u0027s entirely assigned and used in this method (with no guards that it equals -1 at the start or anything).\n\nScreencastPortal is what actually maintains the reference to clean it up later:\nhttps://source.chromium.org/chromium/chromium/src/+/main:third_party/webrtc/modules/desktop_capture/linux/wayland/screencast_portal.cc;drc\u003d93f9db7e8a6f442390bb0ed6a2ffc6fa75b2ae5f;l\u003d70\n\nI wonder if it would be better if it was noted up this call stack somewhere that the function is expected to take ownership of this fd and thus the fcntl call should be at the point where screencast_portal passes it out?\n\nThough there may be some bugs with guarantees that the handle gets closed outside of it being handed directly to this connect method, where we know it will be closed. (I\u0027m not sure e.g. what the remote desktop code does if it extends that observer), so in that case perhaps this is fine as is (though potentially worth removing the member).",
      "parentUuid": "ead2533c_30cca59a",
      "revId": "249e402ddc6bef08db0604db1e7a5506c64db615",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e46a6b3c_14224401",
        "filename": "modules/desktop_capture/linux/wayland/shared_screencast_stream.cc",
        "patchSetId": 1
      },
      "lineNbr": 450,
      "author": {
        "id": 8046
      },
      "writtenOn": "2022-08-04T09:49:23Z",
      "side": 1,
      "message": "I\u0027m not sure if it\u0027s necessary. I believe this will rarely fail and if it does, I think PipeWire will just fail to connect. I also don\u0027t see PipeWire doing this check either in their code when duplicating file descriptors.",
      "parentUuid": "ccc4353d_eb154cc7",
      "range": {
        "startLine": 450,
        "startChar": 23,
        "endLine": 450,
        "endChar": 53
      },
      "revId": "249e402ddc6bef08db0604db1e7a5506c64db615",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9f83af5f_e9ae7a7d",
        "filename": "modules/desktop_capture/linux/wayland/shared_screencast_stream.cc",
        "patchSetId": 1
      },
      "lineNbr": 450,
      "author": {
        "id": 8046
      },
      "writtenOn": "2022-08-04T09:49:23Z",
      "side": 1,
      "message": "It is indeed not needed to store the fd as a member variable so I removed it and also fixed the code to consider \"0\" as a valid fd.",
      "parentUuid": "4b4477b1_c0c4548f",
      "revId": "249e402ddc6bef08db0604db1e7a5506c64db615",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    }
  ]
}