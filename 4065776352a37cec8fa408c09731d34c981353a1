{
  "comments": [
    {
      "key": {
        "uuid": "aab39b4c_34c522aa",
        "filename": "sdk/android/native_api/sdk/jni.cc",
        "patchSetId": 2
      },
      "lineNbr": 29,
      "author": {
        "id": 5098
      },
      "writtenOn": "2018-03-07T15:40:07Z",
      "side": 1,
      "message": "This code is the same as:\nrtc::InitializeSSL();\nwebrtc::InitAndroid(jvm);\n\nI would rather that webrtc::InitAndroid is shared between SDK and NDK users than introducing this new function that only bundles two function calls into one.\n\nOnJniUnLoad() is similar, we shouldn\u0027t even call jni::FreeGlobalClassReferenceHolder() so the function reduces to rtc::CleanupSSL().",
      "range": {
        "startLine": 19,
        "startChar": 0,
        "endLine": 29,
        "endChar": 1
      },
      "revId": "4065776352a37cec8fa408c09731d34c981353a1",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "76179a0d_302b0dd8",
        "filename": "sdk/android/native_api/sdk/jni.cc",
        "patchSetId": 2
      },
      "lineNbr": 29,
      "author": {
        "id": 5112
      },
      "writtenOn": "2018-03-07T16:11:14Z",
      "side": 1,
      "message": "It is true that the approach you suggest would work for now. However, I feel the approach in this CL would be more future-proof.\n\nWe might want to add stuff to OnJniLoad / OnJniUnLoad that we might not want to add to the native API or vice versa. Suppose we bundled some crash reporting framework to the SDK that needs to be initialized at startup but didn\u0027t want to add it for the native API users. Then this would be a natural place to put it. Or we add some component in native API that is not available in the SDK at all. Then we would place it in webrtc::InitAndroid.\n\nAdditionally, it feels unnatural that clients that don\u0027t otherwise use the native API have to use the init method in that is part of the native API. While the include file in this CL is under native_api folder, it is not really part of the native API. It just was the only folder we currently have public available headers in, so I placed it there.",
      "parentUuid": "aab39b4c_34c522aa",
      "range": {
        "startLine": 19,
        "startChar": 0,
        "endLine": 29,
        "endChar": 1
      },
      "revId": "4065776352a37cec8fa408c09731d34c981353a1",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2efa6f68_7b58400f",
        "filename": "sdk/android/native_api/sdk/jni.cc",
        "patchSetId": 2
      },
      "lineNbr": 29,
      "author": {
        "id": 5098
      },
      "writtenOn": "2018-03-08T09:26:22Z",
      "side": 1,
      "message": "We could still put SDK specific init code in PeerConnectionFactory.initialize().\n\nIt feels confusing for me to have two different native (C++) Android init functions. It\u0027s unfortunate that SDK users need to call a C++ Android init function at all, but if they have to, I think it\u0027s better if it\u0027s one common.",
      "parentUuid": "76179a0d_302b0dd8",
      "range": {
        "startLine": 19,
        "startChar": 0,
        "endLine": 29,
        "endChar": 1
      },
      "revId": "4065776352a37cec8fa408c09731d34c981353a1",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e1cf682e_899a4324",
        "filename": "sdk/android/native_api/sdk/jni.cc",
        "patchSetId": 2
      },
      "lineNbr": 29,
      "author": {
        "id": 5112
      },
      "writtenOn": "2018-03-08T10:27:40Z",
      "side": 1,
      "message": "Yes, some stuff could be placed in PeerConnectionFactory.initialize but maybe there might be something that we have to initialize before that. Also this doesn\u0027t address we might have some native only component that we want to initialize in webrtc::InitAndroid.\n\nRegular clients won\u0027t have to call any C++ to use the SDK. This method exists only for clients that want to combine all their libraries into a single shared library.\n\nMy point is there are two non-overlapping sets of clients:\n1. Those that will consume the native API and pick-and-choose components. They are then responsible for initializing those components they decide to include.\n2. Clients that will consume the SDK. They will pull in all the components and should have all of them automatically initialized and ready to use.\n\nTo me it makes sense that these two use cases would also have different entry points. Because we want to minimize the binary size for the native API users, that also places limitations on what we can depend on from the webrtc::InitAndroid method. From this OnJniLoad method, we should be able to depend on all of the components.\n\nMaybe the set of users that want to use the SDK and implement their own shared library becomes empty in the future but as long as those exist, I think providing this helper makes sense.",
      "parentUuid": "2efa6f68_7b58400f",
      "range": {
        "startLine": 19,
        "startChar": 0,
        "endLine": 29,
        "endChar": 1
      },
      "revId": "4065776352a37cec8fa408c09731d34c981353a1",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "38a3a736_1718be22",
        "filename": "sdk/android/native_api/sdk/jni.cc",
        "patchSetId": 2
      },
      "lineNbr": 29,
      "author": {
        "id": 5098
      },
      "writtenOn": "2018-03-08T12:20:11Z",
      "side": 1,
      "message": "I hear your point, but I think you are preparing for a future problem that does not exist today and might not ever exist. And the downside is that we have to introduce this confusing sdk/android/native_api/sdk/jni.h.",
      "parentUuid": "e1cf682e_899a4324",
      "range": {
        "startLine": 19,
        "startChar": 0,
        "endLine": 29,
        "endChar": 1
      },
      "revId": "4065776352a37cec8fa408c09731d34c981353a1",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    }
  ]
}