{
  "comments": [
    {
      "key": {
        "uuid": "0bf5eafd_f8aec470",
        "filename": "/COMMIT_MSG",
        "patchSetId": 18
      },
      "lineNbr": 30,
      "author": {
        "id": 5126
      },
      "writtenOn": "2020-08-18T10:39:55Z",
      "side": 1,
      "message": "This is rather complex (which is costly in terms of dev time, review time, time it takes whenever someone needs to read this code, expected number of bugs, etc.). Would it work to simply use a map (either std::map or absl::flat_hash_map) with uint64_t keys, where keys are simply 0, 1, 2, 3, ...?",
      "revId": "e67fdab334960f7ce5a83320ede0c337e9ff878a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b3ef8ff5_b6e1db70",
        "filename": "/COMMIT_MSG",
        "patchSetId": 18
      },
      "lineNbr": 30,
      "author": {
        "id": 5053
      },
      "writtenOn": "2020-08-19T00:15:04Z",
      "side": 1,
      "message": "I can\u0027t think of any reason why that wouldn\u0027t work. May use more memory on average but worth it in terms of simplicity.",
      "parentUuid": "0bf5eafd_f8aec470",
      "revId": "e67fdab334960f7ce5a83320ede0c337e9ff878a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "da601dae_7b3b1798",
        "filename": "rtc_base/physical_socket_server.cc",
        "patchSetId": 18
      },
      "lineNbr": 110,
      "author": {
        "id": 5126
      },
      "writtenOn": "2020-08-18T10:39:55Z",
      "side": 1,
      "message": "Either check that the old value was false (in the constructor) or reset to the old value regardless of whether it was true or false (in the destructor)?",
      "revId": "e67fdab334960f7ce5a83320ede0c337e9ff878a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "64dc6ea4_63434589",
        "filename": "rtc_base/physical_socket_server.cc",
        "patchSetId": 18
      },
      "lineNbr": 110,
      "author": {
        "id": 5053
      },
      "writtenOn": "2020-08-19T00:15:04Z",
      "side": 1,
      "message": "Done.",
      "parentUuid": "da601dae_7b3b1798",
      "revId": "e67fdab334960f7ce5a83320ede0c337e9ff878a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "015e1590_630841b4",
        "filename": "rtc_base/physical_socket_server.cc",
        "patchSetId": 18
      },
      "lineNbr": 1061,
      "author": {
        "id": 5126
      },
      "writtenOn": "2020-08-18T10:39:55Z",
      "side": 1,
      "message": "If a standard map can\u0027t be used (see my other comment) and the proposed solution is necessary, I would like a cleaner construction of the key type. Something along the lines of\n\n  struct Key {\n    uint32_t id;\n    uint32_t index;\n  };\n\n  uint64_t ToUint64(Key k) {\n    return k.id \u003c\u003c 32 | k.index;\n  }\n\n  optional\u003cKey\u003e FromUint64(uint64_t n) {\n    if (n \u003d\u003d -1) return absl::nullopt;\n    return {n \u003e\u003e 32, static_cast\u003cuint32_t\u003e(n)};\n  }\n\nwith Key used throughout except when you need to store it in the .u64 member.\n\nAnd with better names, obviously...",
      "revId": "e67fdab334960f7ce5a83320ede0c337e9ff878a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4ac642af_854db2c5",
        "filename": "rtc_base/physical_socket_server.cc",
        "patchSetId": 18
      },
      "lineNbr": 1061,
      "author": {
        "id": 5053
      },
      "writtenOn": "2020-08-19T00:15:04Z",
      "side": 1,
      "message": "N/A with latest patchset.",
      "parentUuid": "015e1590_630841b4",
      "revId": "e67fdab334960f7ce5a83320ede0c337e9ff878a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "84b9bb24_357492f7",
        "filename": "rtc_base/physical_socket_server.h",
        "patchSetId": 18
      },
      "lineNbr": 53,
      "author": {
        "id": 5126
      },
      "writtenOn": "2020-08-18T10:39:55Z",
      "side": 1,
      "message": "There\u0027s no reason to use `typedef` in new code; `using` is easier to read.",
      "revId": "e67fdab334960f7ce5a83320ede0c337e9ff878a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9b0d0d34_4950a49b",
        "filename": "rtc_base/physical_socket_server.h",
        "patchSetId": 18
      },
      "lineNbr": 53,
      "author": {
        "id": 5053
      },
      "writtenOn": "2020-08-19T00:15:04Z",
      "side": 1,
      "message": "N/A with latest patchset.",
      "parentUuid": "84b9bb24_357492f7",
      "revId": "e67fdab334960f7ce5a83320ede0c337e9ff878a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "87a6c295_4a987269",
        "filename": "rtc_base/physical_socket_server.h",
        "patchSetId": 18
      },
      "lineNbr": 53,
      "author": {
        "id": 5126
      },
      "writtenOn": "2020-08-20T13:15:33Z",
      "side": 1,
      "message": "No, it\u0027s still there AFAICT. But with the key being a plain int64_t, the key_t alias is probably unnecessary and can be removed.",
      "parentUuid": "9b0d0d34_4950a49b",
      "revId": "e67fdab334960f7ce5a83320ede0c337e9ff878a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6542f5ed_ff4fab4f",
        "filename": "rtc_base/physical_socket_server.h",
        "patchSetId": 18
      },
      "lineNbr": 69,
      "author": {
        "id": 5126
      },
      "writtenOn": "2020-08-18T10:39:55Z",
      "side": 1,
      "message": "You\u0027re adding a mutable data member to an interface. Please avoid this if at all possible.",
      "revId": "e67fdab334960f7ce5a83320ede0c337e9ff878a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e2488441_40d2a009",
        "filename": "rtc_base/physical_socket_server.h",
        "patchSetId": 18
      },
      "lineNbr": 69,
      "author": {
        "id": 5053
      },
      "writtenOn": "2020-08-19T00:15:04Z",
      "side": 1,
      "message": "I didn\u0027t like it either, but we need a way to get the key for calls to Remove. Have any suggestions? Do you just want a virtual getter/setter?",
      "parentUuid": "6542f5ed_ff4fab4f",
      "revId": "e67fdab334960f7ce5a83320ede0c337e9ff878a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "df5cff1e_3f00688a",
        "filename": "rtc_base/physical_socket_server.h",
        "patchSetId": 18
      },
      "lineNbr": 69,
      "author": {
        "id": 5126
      },
      "writtenOn": "2020-08-20T13:15:33Z",
      "side": 1,
      "message": "Yes, it adds an annoying amount of boilerplate, but having data members in an interface is much worse. You could also solve the issue by storing the address -\u003e key mapping in a separate table (IOW, maintain both an ID -\u003e Dispatcher* table and a Dispatcher* -\u003e ID table).\n\nThe more I think about it, the more I prefer the double map solution. It avoids the virtual getter+setter, and it avoids the Dispatcher having to know the ID assigned to it, which is really a property of the container, not the Dispatcher.",
      "parentUuid": "e2488441_40d2a009",
      "revId": "e67fdab334960f7ce5a83320ede0c337e9ff878a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cfb8029b_a31d21ed",
        "filename": "rtc_base/physical_socket_server.h",
        "patchSetId": 18
      },
      "lineNbr": 69,
      "author": {
        "id": 13594
      },
      "writtenOn": "2020-08-20T14:23:37Z",
      "side": 1,
      "message": "Having the key a member of dispatcher is important to maintain constant-time lookup in DispatcherInfoSet.",
      "parentUuid": "df5cff1e_3f00688a",
      "revId": "e67fdab334960f7ce5a83320ede0c337e9ff878a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4db4fea9_01ff0a5d",
        "filename": "rtc_base/physical_socket_server.h",
        "patchSetId": 18
      },
      "lineNbr": 116,
      "author": {
        "id": 5126
      },
      "writtenOn": "2020-08-18T10:39:55Z",
      "side": 1,
      "message": "Are all of these really needed?",
      "revId": "e67fdab334960f7ce5a83320ede0c337e9ff878a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1ba5ff82_74764498",
        "filename": "rtc_base/physical_socket_server.h",
        "patchSetId": 18
      },
      "lineNbr": 116,
      "author": {
        "id": 5053
      },
      "writtenOn": "2020-08-19T00:15:04Z",
      "side": 1,
      "message": "N/A with latest patchset.",
      "parentUuid": "4db4fea9_01ff0a5d",
      "revId": "e67fdab334960f7ce5a83320ede0c337e9ff878a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    }
  ]
}