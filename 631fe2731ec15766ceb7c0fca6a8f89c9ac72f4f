{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "3fddf9c0_2882feca",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5634
      },
      "writtenOn": "2024-04-19T16:24:21Z",
      "side": 1,
      "message": "Needed because there\u0027s a listener to this signal in Chrome-land.",
      "revId": "631fe2731ec15766ceb7c0fca6a8f89c9ac72f4f",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2623e668_4c9c88e1",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5508
      },
      "writtenOn": "2024-04-19T18:03:16Z",
      "side": 1,
      "message": "Are unit tests the reason why there are multiple listeners?\nI\u0027ve seen a few of those and have chosen to change the tests to handle this themselves rather than impose test specific requirements on the production code.\n\nI\u0027m currently fixing ssl_stream_adapter_unittest.cc where this is the case and there, the tests are really the ones doing something unusual.\n\nIf there\u0027s a single callback rather than an unknown number, that makes it simpler to reason about things while debugging.",
      "revId": "631fe2731ec15766ceb7c0fca6a8f89c9ac72f4f",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "963ff091_bc068472",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5634
      },
      "writtenOn": "2024-04-19T18:25:46Z",
      "side": 1,
      "message": "Nope, there is one listener in the transport controller and a completely different listener in Chrome.",
      "parentUuid": "2623e668_4c9c88e1",
      "revId": "631fe2731ec15766ceb7c0fca6a8f89c9ac72f4f",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "48ae87dd_b99f1847",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5634
      },
      "writtenOn": "2024-04-19T18:26:51Z",
      "side": 1,
      "message": "The other listener is addressed in https://chromium-review.googlesource.com/c/chromium/src/+/5318498",
      "revId": "631fe2731ec15766ceb7c0fca6a8f89c9ac72f4f",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b481ac4e_7f73a932",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5508
      },
      "writtenOn": "2024-04-19T18:44:33Z",
      "side": 1,
      "message": "wondering if we\u0027re stuck with that dependency or if we could do something about it (fine if it\u0027s not in this CL)",
      "revId": "631fe2731ec15766ceb7c0fca6a8f89c9ac72f4f",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "eb454f9f_21aa1a50",
        "filename": "p2p/base/ice_transport_internal.h",
        "patchSetId": 1
      },
      "lineNbr": 341,
      "author": {
        "id": 5508
      },
      "writtenOn": "2024-04-19T18:44:33Z",
      "side": 1,
      "message": "can we do something about the code in chrome that\u0027s depending on code in `p2p/base/ice_transport_internal.h` (with emphasis on \"internal\", but the rest of the path isn\u0027t exactly \"api\").",
      "revId": "631fe2731ec15766ceb7c0fca6a8f89c9ac72f4f",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "445f6bea_5feff231",
        "filename": "p2p/base/ice_transport_internal.h",
        "patchSetId": 1
      },
      "lineNbr": 341,
      "author": {
        "id": 5634
      },
      "writtenOn": "2024-04-19T18:53:55Z",
      "side": 1,
      "message": "Chrome needs to fire a signal when this state changes. Once we have it as a function, it\u0027s much easier to move it to an API.\n\nThe class is marked with TODO already:\n// TODO(bugs.webrtc.org/15609): Define a public API for this.\nThere\u0027s 4 more signals to convert before we can drop sigslot from this class.\n\nOne step at a time?",
      "parentUuid": "eb454f9f_21aa1a50",
      "revId": "631fe2731ec15766ceb7c0fca6a8f89c9ac72f4f",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "dd478ec2_fcd36834",
        "filename": "p2p/base/ice_transport_internal.h",
        "patchSetId": 1
      },
      "lineNbr": 341,
      "author": {
        "id": 5508
      },
      "writtenOn": "2024-04-19T19:10:17Z",
      "side": 1,
      "message": "yup, sounds like a plan",
      "parentUuid": "445f6bea_5feff231",
      "revId": "631fe2731ec15766ceb7c0fca6a8f89c9ac72f4f",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "At least one maximum vote for label \u0027Code-Review\u0027 is required"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader AND -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1 AND -label:Code-Review\u003dMIN"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader AND -label:Code-Review=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Code-Review=MAX,user=non_uploader"],"failingAtoms":["label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1 AND -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1","label:Code-Review=MIN"]}
      },
      "patchSetCommitId": "631fe2731ec15766ceb7c0fca6a8f89c9ac72f4f",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["is:review-enforced_gerrit"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforcement-satisfied_gerrit"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforcement-satisfied_gerrit"]}
      },
      "patchSetCommitId": "631fe2731ec15766ceb7c0fca6a8f89c9ac72f4f",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {
        "value": true
      }
    }
  ]
}