{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "483cfccb_d9797727",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 20079
      },
      "writtenOn": "2022-11-12T17:27:36Z",
      "side": 1,
      "message": "I have signed individual CLA and has been added to the corporate cla account (https://groups.google.com/g/canon-google-cla) so CLA checks should now pass.",
      "revId": "d6f4bb523411759e9844c93cf4e5e3b70beeebfb",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f1082020_e2c14f26",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5634
      },
      "writtenOn": "2022-11-14T11:17:37Z",
      "side": 1,
      "message": "Surprised it was not done before if it was this easy ... did something change in the Linux drivers (so that we need to be aware of driver versions), or did it always work?\n\nAre there tests that exercise this functionality?\n\nApproving since I\u0027m the \"second set of eyes\" on this one.",
      "revId": "d6f4bb523411759e9844c93cf4e5e3b70beeebfb",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "31b6b681_e836c6c1",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 20079
      },
      "writtenOn": "2022-11-16T14:49:02Z",
      "side": 1,
      "message": "\u003e Surprised it was not done before if it was this easy ... did something change in the Linux drivers (so that we need to be aware of driver versions), or did it always work?\n\u003e \n\nAs far as I can tell, this has been always the case and is that simple.\n\nDuring the public in-person Ubuntu Summit conference in Prague a few weeks back, I have personally seen rebuilt browsers with similar patch applied to out-of-date/vendored libwebrtc that managed to correctly establish video communication and talk over this protocol with google hangouts and jitsi meet.\n\nObviously these formats are tested for presence with ioctl, and it might be just the case that the original authors of the code didn\u0027t have access to a camera with this format available by default hence this supported case got skipped. Note that all of libwebrtc, kernel, certain webcams support this format.\n\n\n\u003e Are there tests that exercise this functionality?\n\u003e \n\nI have not found any existing tests that excercise via unit or integration tests the modules/video_capture portions of libwebrtc.\n\nIt should be possible to test these with mocks, LD_PRELOAD, and/or something like libcamerify which is a wrapper binary that allows to expose v4l2 compat to underlying apps, entirely in userspace. Or we can use something like v4l2loopback to generate suitable video devices on generic linux.\n\nI do want to add more unit \u0026 integration tests, to ensure these things don\u0027t regress and ensure that all formats remain usable on generic linux.\n\nNote that most distros \u0026 browsers have some excercise/integration tests for this; but not yet for this format type as it hasn\u0027t been yet exposed.\n\n\u003e Approving since I\u0027m the \"second set of eyes\" on this one.",
      "parentUuid": "f1082020_e2c14f26",
      "revId": "d6f4bb523411759e9844c93cf4e5e3b70beeebfb",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a9f40d0f_ae09dfb8",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 20079
      },
      "writtenOn": "2022-11-16T14:49:02Z",
      "side": 1,
      "message": "Answering review comments about this patch series.",
      "revId": "d6f4bb523411759e9844c93cf4e5e3b70beeebfb",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5b6dde73_48194104",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 19369
      },
      "writtenOn": "2022-11-16T15:05:46Z",
      "side": 1,
      "message": "The NV12 support could be validated with \u0027vivid\u0027 (sudo modprobe vivid) .. but I\u0027m not sure how you \u0027enforce\u0027 it to use NV12 here in this layer - you might have to simply build with all the other non-NV12 formats removed to be sure you only support NV12. Vivid test drivers will happily give you NV12 data from the vivid-000-vid-cap device node.\n\nIt should be the first video node reported under vivid in `v4l2-ctl --list-devices`\n\nVivid can be used to test other pixel formats too, and has a very large range of formats it can generate (see `v4l2-ctl -d /dev/video6 --list-formats`, where /dev/video6 is the video node you identify as your vivid-000-vid-cap node).",
      "parentUuid": "31b6b681_e836c6c1",
      "revId": "d6f4bb523411759e9844c93cf4e5e3b70beeebfb",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "At least one maximum vote for label \u0027Code-Review\u0027 is required"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader AND -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1 AND -label:Code-Review\u003dMIN"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader AND -label:Code-Review=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Code-Review=MAX,user=non_uploader"],"failingAtoms":["label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1 AND -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1","label:Code-Review=MIN"]}
      },
      "patchSetCommitId": "d6f4bb523411759e9844c93cf4e5e3b70beeebfb",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["is:review-enforced_gerrit"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforcement-satisfied_gerrit"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforcement-satisfied_gerrit"]}
      },
      "patchSetCommitId": "d6f4bb523411759e9844c93cf4e5e3b70beeebfb",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {
        "value": true
      }
    }
  ]
}