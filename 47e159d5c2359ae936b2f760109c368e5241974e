{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "ae4618c5_596b5fc0",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 20509
      },
      "writtenOn": "2024-02-08T16:16:37Z",
      "side": 1,
      "message": "I tested this fix by:\n1. Simulating the race condition by introducing a `sleep` between the calls to `    getNativeNetworkObserversSync` and the dispatch loop. With the change this is not even possible, but I also verified that adding a `sleep` in every iteration of the loop doesn\u0027t yield major issues\n2. Tested it with a field-trial in our product and observed we no longer detect instances of this crash\n\nI looked into unit-testing it, but couldn\u0027t find a straight-forward way to do it within the context of the current unit-tests, since this requires a test that straddles both the Native and Java code. I\u0027m open to any suggestions on how to test this in unit tests (or if reviewers agree it\u0027s not critical)",
      "revId": "47e159d5c2359ae936b2f760109c368e5241974e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2e42f18c_35a3ec0d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 20509
      },
      "writtenOn": "2024-02-12T09:19:58Z",
      "side": 1,
      "message": "Adding relevant reviewers based on the people who touched this file in the past",
      "revId": "47e159d5c2359ae936b2f760109c368e5241974e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ba554ee1_6660254f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5613
      },
      "writtenOn": "2024-02-13T13:09:56Z",
      "side": 1,
      "message": "ack,\nand agree, the current unit-test situation in webrtc open source is great.\nif android guy (xalep) agrees to this, I\u0027m also ok.\n\ncurious: do you your own network observer, or are you using the WebRTC c++ ones ?\nif only WebRTC c++, then I guess it would also possible to fix there ???",
      "parentUuid": "ae4618c5_596b5fc0",
      "revId": "47e159d5c2359ae936b2f760109c368e5241974e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6ce68813_7eb37651",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 20509
      },
      "writtenOn": "2024-02-19T14:30:55Z",
      "side": 1,
      "message": "We use C++ observers\n\nI\u0027m not 100% sure if this wouldn\u0027t be possible in C++, or just very cumbersome. The problem is that the C++ modules might be torn down while we\u0027re iterating - and in that case, we\u0027re basically trying to dereference a dangling pointer\nIt\u0027s possible that if we make this pointer a weak_ptr we can validate whether it\u0027s still alive on the C++ side, but TBH I haven\u0027t looked into that much, since the Java solution seemed pretty clean\n\nIf you think trying to solve this on the C++ side is better then let me know and I\u0027ll look into it",
      "parentUuid": "ba554ee1_6660254f",
      "revId": "47e159d5c2359ae936b2f760109c368e5241974e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6c4f9062_7f3e1c17",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 7529
      },
      "writtenOn": "2024-02-20T19:05:00Z",
      "side": 1,
      "message": "Just to clarify: We use the default WebRTC C++ observer from sdk/android/src/jni/android_network_monitor.cc, not a custom one.",
      "parentUuid": "6ce68813_7eb37651",
      "revId": "47e159d5c2359ae936b2f760109c368e5241974e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "34d53ca5_b123e671",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 20509
      },
      "writtenOn": "2024-02-26T14:49:47Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "6c4f9062_7f3e1c17",
      "revId": "47e159d5c2359ae936b2f760109c368e5241974e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    }
  ]
}