{
  "comments": [
    {
      "key": {
        "uuid": "c60d6421_ca20ac54",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 31,
      "author": {
        "id": 5142
      },
      "writtenOn": "2019-02-04T16:05:33Z",
      "side": 1,
      "message": "I\u0027ll create a bug before landing this.",
      "revId": "47cdabf1bb8c6a9ece0ad27ed5355a5e65db75fa",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3c446e21_e127d1f2",
        "filename": "rtc_base/BUILD.gn",
        "patchSetId": 1
      },
      "lineNbr": 929,
      "author": {
        "id": 5126
      },
      "writtenOn": "2019-02-05T12:43:49Z",
      "side": 1,
      "message": "Is it possible to put this in a separate build target?",
      "revId": "47cdabf1bb8c6a9ece0ad27ed5355a5e65db75fa",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "667a4d21_5c89711c",
        "filename": "rtc_base/BUILD.gn",
        "patchSetId": 1
      },
      "lineNbr": 929,
      "author": {
        "id": 5142
      },
      "writtenOn": "2019-02-06T10:19:17Z",
      "side": 1,
      "message": "What\u0027s the benefit of putting it in a separate build target? This is the same build target that has message_queue/handler.h/cc, thread.h/cc and async_invoker.h/cc of which I am trying to replace. This is very much a \"rtc_base\" thing, which I think should be available everywhere in our codebase where threads are available (which is everywhere).\n\nI\u0027m tempted to implement rtc::Thread::PostTask() and rtc::Thread::PostTaskAndReply() using it so that rtc::Threads can be used like chromium threads.",
      "parentUuid": "3c446e21_e127d1f2",
      "revId": "47cdabf1bb8c6a9ece0ad27ed5355a5e65db75fa",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "247b8811_0f93939c",
        "filename": "rtc_base/BUILD.gn",
        "patchSetId": 1
      },
      "lineNbr": 929,
      "author": {
        "id": 5126
      },
      "writtenOn": "2019-02-06T10:40:39Z",
      "side": 1,
      "message": "Because of the need to avoid dependency graph cycles, it turns out that large build targets have a sort of \"gravity\" to them: If we add a new thing B that uses C and is used by A, and both A and C are in the same build target, then B is forced to become part of that target as well.\n\nrtc_base is already large enough to have a considerable gravity, so if possible I\u0027d like to not feed it more stuff.",
      "parentUuid": "667a4d21_5c89711c",
      "revId": "47cdabf1bb8c6a9ece0ad27ed5355a5e65db75fa",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "08d358f7_c34757e4",
        "filename": "rtc_base/post_message_with_functor.h",
        "patchSetId": 1
      },
      "lineNbr": 24,
      "author": {
        "id": 5634
      },
      "writtenOn": "2019-02-05T08:55:20Z",
      "side": 1,
      "message": "not sure this is the best namespace name, it seems unusual. But isolating this class inside a namespace is good.",
      "revId": "47cdabf1bb8c6a9ece0ad27ed5355a5e65db75fa",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "609a190d_105df0ce",
        "filename": "rtc_base/post_message_with_functor.h",
        "patchSetId": 1
      },
      "lineNbr": 24,
      "author": {
        "id": 5142
      },
      "writtenOn": "2019-02-05T09:21:42Z",
      "side": 1,
      "message": "I would normally make it private but because of templates it has to be in the header meaning it can end up getting pulled in everywhere. But maybe \"rtc::internal::SingleMessageHandlerWithFunctor\" is fine? I\u0027m not worried about name conflicts in rtc.",
      "parentUuid": "08d358f7_c34757e4",
      "revId": "47cdabf1bb8c6a9ece0ad27ed5355a5e65db75fa",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d600716b_1cbfcccb",
        "filename": "rtc_base/post_message_with_functor.h",
        "patchSetId": 1
      },
      "lineNbr": 24,
      "author": {
        "id": 5126
      },
      "writtenOn": "2019-02-05T12:43:49Z",
      "side": 1,
      "message": "I like the original namespace choice---it\u0027s exactly what I would have recommended. (Basically, you want something that\u0027s unique for this header file and that has \"impl\" or \"internal\" in it.)",
      "parentUuid": "609a190d_105df0ce",
      "revId": "47cdabf1bb8c6a9ece0ad27ed5355a5e65db75fa",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9bbc9cfa_8b91632b",
        "filename": "rtc_base/post_message_with_functor.h",
        "patchSetId": 1
      },
      "lineNbr": 30,
      "author": {
        "id": 5126
      },
      "writtenOn": "2019-02-05T12:43:49Z",
      "side": 1,
      "message": "Use a universal reference and std::forward here, to support copy in addition to move?",
      "revId": "47cdabf1bb8c6a9ece0ad27ed5355a5e65db75fa",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bac325b6_cf0e048f",
        "filename": "rtc_base/post_message_with_functor.h",
        "patchSetId": 1
      },
      "lineNbr": 48,
      "author": {
        "id": 5126
      },
      "writtenOn": "2019-02-05T12:43:49Z",
      "side": 1,
      "message": "Document the call signature for the functor, please.",
      "revId": "47cdabf1bb8c6a9ece0ad27ed5355a5e65db75fa",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3d9c5c9a_aa497a1d",
        "filename": "rtc_base/post_message_with_functor.h",
        "patchSetId": 1
      },
      "lineNbr": 50,
      "author": {
        "id": 5126
      },
      "writtenOn": "2019-02-05T12:43:49Z",
      "side": 1,
      "message": "Don\u0027t declare static free functions in header files.",
      "range": {
        "startLine": 50,
        "startChar": 0,
        "endLine": 50,
        "endChar": 6
      },
      "revId": "47cdabf1bb8c6a9ece0ad27ed5355a5e65db75fa",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ea7f9efc_ac3fd43b",
        "filename": "rtc_base/post_message_with_functor.h",
        "patchSetId": 1
      },
      "lineNbr": 56,
      "author": {
        "id": 5126
      },
      "writtenOn": "2019-02-05T12:43:49Z",
      "side": 1,
      "message": "std::forward, since `functor` is a forwarding reference?",
      "range": {
        "startLine": 56,
        "startChar": 20,
        "endLine": 56,
        "endChar": 29
      },
      "revId": "47cdabf1bb8c6a9ece0ad27ed5355a5e65db75fa",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "931a2478_7c170959",
        "filename": "rtc_base/post_message_with_functor_unittest.cc",
        "patchSetId": 1
      },
      "lineNbr": 49,
      "author": {
        "id": 5039
      },
      "writtenOn": "2019-02-05T01:31:18Z",
      "side": 1,
      "message": "curious: is the static_cast needed?",
      "range": {
        "startLine": 49,
        "startChar": 11,
        "endLine": 49,
        "endChar": 22
      },
      "revId": "47cdabf1bb8c6a9ece0ad27ed5355a5e65db75fa",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bb0290c2_8f3f3a93",
        "filename": "rtc_base/post_message_with_functor_unittest.cc",
        "patchSetId": 1
      },
      "lineNbr": 49,
      "author": {
        "id": 5142
      },
      "writtenOn": "2019-02-05T09:21:42Z",
      "side": 1,
      "message": "Yes, TEST_F creates a subclass of PostMessageWithFunctorTest, so \"this\" here is not of type PostMessageWithFunctorTest but rather a test-specific class. Bind\u0027s template magic expects the pointer to be the same Foo as \u0026Foo::Method and is not smart enough to deduce that Bar : Foo is a Foo.",
      "parentUuid": "931a2478_7c170959",
      "range": {
        "startLine": 49,
        "startChar": 11,
        "endLine": 49,
        "endChar": 22
      },
      "revId": "47cdabf1bb8c6a9ece0ad27ed5355a5e65db75fa",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5bd1d358_7ef692e0",
        "filename": "rtc_base/post_message_with_functor_unittest.cc",
        "patchSetId": 1
      },
      "lineNbr": 49,
      "author": {
        "id": 5126
      },
      "writtenOn": "2019-02-05T12:43:49Z",
      "side": 1,
      "message": "Skip the test fixture, and use a plain utility class instead? This is almost always a good idea, and it would solve your specific problem here. See https://abseil.io/tips/122 for details if you have the time.",
      "parentUuid": "bb0290c2_8f3f3a93",
      "range": {
        "startLine": 49,
        "startChar": 11,
        "endLine": 49,
        "endChar": 22
      },
      "revId": "47cdabf1bb8c6a9ece0ad27ed5355a5e65db75fa",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f54ba08e_c70cd401",
        "filename": "rtc_base/post_message_with_functor_unittest.cc",
        "patchSetId": 1
      },
      "lineNbr": 61,
      "author": {
        "id": 5634
      },
      "writtenOn": "2019-02-05T08:55:20Z",
      "side": 1,
      "message": "All the tests are using PostMessageWithFunctor(...Bind()). Is it possible to give some other examples?\nIn particular, is it possible to somehow do PostMessagewithFunctor(...., [](){}) (lambda)?",
      "revId": "47cdabf1bb8c6a9ece0ad27ed5355a5e65db75fa",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7da659ff_1bc9dc05",
        "filename": "rtc_base/post_message_with_functor_unittest.cc",
        "patchSetId": 1
      },
      "lineNbr": 61,
      "author": {
        "id": 5126
      },
      "writtenOn": "2019-02-05T12:43:49Z",
      "side": 1,
      "message": "+1. I would expect lambdas to work.",
      "parentUuid": "f54ba08e_c70cd401",
      "revId": "47cdabf1bb8c6a9ece0ad27ed5355a5e65db75fa",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7c3009ce_64c6779f",
        "filename": "rtc_base/post_message_with_functor_unittest.cc",
        "patchSetId": 1
      },
      "lineNbr": 77,
      "author": {
        "id": 5634
      },
      "writtenOn": "2019-02-05T08:55:20Z",
      "side": 1,
      "message": "I assume the test will fail with the global timeout if there\u0027s something wrong here. Waiting forever in a test looks iffy, but we have had lots of failures that result in timeout. Still, if it is easy to do ASSERT_EVENT_HAPPENED(fourth, kDefaultTimeout), I\u0027d be happier - better error message.",
      "revId": "47cdabf1bb8c6a9ece0ad27ed5355a5e65db75fa",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "17521ae0_f00fcc26",
        "filename": "rtc_base/post_message_with_functor_unittest.cc",
        "patchSetId": 1
      },
      "lineNbr": 77,
      "author": {
        "id": 5142
      },
      "writtenOn": "2019-02-05T09:21:42Z",
      "side": 1,
      "message": "I don\u0027t know about third_party/webrtc, but test-specific timeouts are generally discouraged in other places (e.g. WPT) due to the possibility of flakiness on slow bots. The benefit of relying on the default is that the slow bots can have a larger default than fast bots based on parameters (or so I believe). This test is something that will either pass or wait forever, and it\u0027s pretty clear from the code that it\u0027s Waiting. I prefer not to introduce kDefaultTimeout constants, but I leave that up to other reviewers to give their opinion.",
      "parentUuid": "7c3009ce_64c6779f",
      "revId": "47cdabf1bb8c6a9ece0ad27ed5355a5e65db75fa",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "846ffa68_819e95e5",
        "filename": "rtc_base/post_message_with_functor_unittest.cc",
        "patchSetId": 1
      },
      "lineNbr": 77,
      "author": {
        "id": 5126
      },
      "writtenOn": "2019-02-05T12:43:49Z",
      "side": 1,
      "message": "Instead of events, could you use a bunch of bools? Initialize them to false, and have each message EXPECT that one bool is true and then set another bool to true.\n\nI guess you\u0027ll still need events for the first and last message in the chain, but there should be no possibility of deadlock.",
      "parentUuid": "17521ae0_f00fcc26",
      "revId": "47cdabf1bb8c6a9ece0ad27ed5355a5e65db75fa",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    }
  ]
}