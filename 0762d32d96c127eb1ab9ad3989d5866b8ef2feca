{
  "comments": [
    {
      "key": {
        "uuid": "a6badc9b_8210f4e5",
        "filename": "style-guide.md",
        "patchSetId": 3
      },
      "lineNbr": 37,
      "author": {
        "id": 5234
      },
      "writtenOn": "2018-03-06T08:08:49Z",
      "side": 1,
      "message": "No mention of link-time injection. Maybe something like \"One example of a questionable practice is declaring the interface for a needed facility, but allowing applications to provide their own implementation at link-time. We currently do this for the TaskQueue. This is a good trade-off only in rare cases, due to the significant additional complexity in build rules for webrtc applications. For most facilities that applications need to replace, run-time injection, e.g, an EncoderFactory, is a better choice.\"",
      "range": {
        "startLine": 37,
        "startChar": 15,
        "endLine": 37,
        "endChar": 50
      },
      "revId": "0762d32d96c127eb1ab9ad3989d5866b8ef2feca",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "476a59cb_ce59face",
        "filename": "style-guide.md",
        "patchSetId": 3
      },
      "lineNbr": 37,
      "author": {
        "id": 5126
      },
      "writtenOn": "2018-03-06T09:41:47Z",
      "side": 1,
      "message": "No, my thought was to not mention it precisely because it\u0027s such a rare beast---if we make the style rules too long by loading them up with exotic examples such as this one, they will become painful to read. I think it\u0027s enough to type out the rule that\u0027ll apply in 99% of cases (and make sure it\u0027s friendly and succinct), and simply not mention the 1%.\n\nWe might put a meta rule somewhere near the top where we explain this, but I seriously doubt it\u0027s a good idea to add words for the 1% cases to individual rules.\n\nDoes that make sense?",
      "parentUuid": "a6badc9b_8210f4e5",
      "range": {
        "startLine": 37,
        "startChar": 15,
        "endLine": 37,
        "endChar": 50
      },
      "revId": "0762d32d96c127eb1ab9ad3989d5866b8ef2feca",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c7a5a78f_5bb49f4f",
        "filename": "style-guide.md",
        "patchSetId": 3
      },
      "lineNbr": 37,
      "author": {
        "id": 5234
      },
      "writtenOn": "2018-03-06T10:01:27Z",
      "side": 1,
      "message": "It makes sense if we think about the document as a *guide*, not a list of rules. \n\nYou could consider adding a bullet under \"General advice\" at the top, saying \"Explaining rare cases where we have reason to violate these guide lines is out of scope for this document.\". But maybe it\u0027s not worth the weight of the additional words.",
      "parentUuid": "476a59cb_ce59face",
      "range": {
        "startLine": 37,
        "startChar": 15,
        "endLine": 37,
        "endChar": 50
      },
      "revId": "0762d32d96c127eb1ab9ad3989d5866b8ef2feca",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "172a3bfc_25a5628e",
        "filename": "style-guide.md",
        "patchSetId": 3
      },
      "lineNbr": 37,
      "author": {
        "id": 5126
      },
      "writtenOn": "2018-03-06T10:22:05Z",
      "side": 1,
      "message": "I think that\u0027s a good way of thinking of it. Take the Google style guide for example: the expectation is that the vast majority of new code will follow all the rules, but you can get a waiver to break a specific rule in a specific instance if you can convince \"your project leads\" (the wording used by the guide) that it would be a net win.\n\nIn other words, we don\u0027t want legalese in the style guide, because if a rule is difficult to interpret or just plain in the way in some case, there is a group of humans that may interpret and/or override the rule as they see fit.",
      "parentUuid": "c7a5a78f_5bb49f4f",
      "range": {
        "startLine": 37,
        "startChar": 15,
        "endLine": 37,
        "endChar": 50
      },
      "revId": "0762d32d96c127eb1ab9ad3989d5866b8ef2feca",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c34dfb17_fb79719b",
        "filename": "style-guide.md",
        "patchSetId": 3
      },
      "lineNbr": 48,
      "author": {
        "id": 5019
      },
      "writtenOn": "2018-03-06T09:05:27Z",
      "side": 1,
      "message": "or foo.h should be split into foo_bar.h and foo_baz.h respectively\n\n(In my practice desire splitting foo.c comes from too big foo, which imply that foo.h probably has too many declarations too)",
      "range": {
        "startLine": 48,
        "startChar": 10,
        "endLine": 48,
        "endChar": 11
      },
      "revId": "0762d32d96c127eb1ab9ad3989d5866b8ef2feca",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4fb18189_da1d59ec",
        "filename": "style-guide.md",
        "patchSetId": 3
      },
      "lineNbr": 48,
      "author": {
        "id": 5126
      },
      "writtenOn": "2018-03-06T09:41:47Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c34dfb17_fb79719b",
      "range": {
        "startLine": 48,
        "startChar": 10,
        "endLine": 48,
        "endChar": 11
      },
      "revId": "0762d32d96c127eb1ab9ad3989d5866b8ef2feca",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    }
  ]
}