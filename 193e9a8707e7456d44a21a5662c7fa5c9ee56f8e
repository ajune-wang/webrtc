{
  "comments": [
    {
      "key": {
        "uuid": "c06aad48_b9cfa761",
        "filename": "pc/dtlssrtptransport.cc",
        "patchSetId": 6
      },
      "lineNbr": 44,
      "author": {
        "id": 5053
      },
      "writtenOn": "2017-10-20T01:09:43Z",
      "side": 1,
      "message": "This isn\u0027t necessarily true... A provisional answer enables RTCP mux but doesn\u0027t remove the RTCP transport yet, correct?",
      "revId": "193e9a8707e7456d44a21a5662c7fa5c9ee56f8e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "35857270_e6f5d5c7",
        "filename": "pc/dtlssrtptransport.cc",
        "patchSetId": 6
      },
      "lineNbr": 44,
      "author": {
        "id": 5080
      },
      "writtenOn": "2017-10-20T23:46:14Z",
      "side": 1,
      "message": "Right, I missed that.",
      "parentUuid": "c06aad48_b9cfa761",
      "revId": "193e9a8707e7456d44a21a5662c7fa5c9ee56f8e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a489edb9_164ecc63",
        "filename": "pc/dtlssrtptransport.cc",
        "patchSetId": 6
      },
      "lineNbr": 52,
      "author": {
        "id": 5053
      },
      "writtenOn": "2017-10-20T01:09:43Z",
      "side": 1,
      "message": "Would \"IsActive\" be a more reliable thing to check here?",
      "revId": "193e9a8707e7456d44a21a5662c7fa5c9ee56f8e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "18f1f126_3266a030",
        "filename": "pc/dtlssrtptransport.cc",
        "patchSetId": 6
      },
      "lineNbr": 52,
      "author": {
        "id": 5080
      },
      "writtenOn": "2017-10-20T23:46:14Z",
      "side": 1,
      "message": "Yep. Done.",
      "parentUuid": "a489edb9_164ecc63",
      "revId": "193e9a8707e7456d44a21a5662c7fa5c9ee56f8e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "79699bdd_46c2a208",
        "filename": "pc/dtlssrtptransport.cc",
        "patchSetId": 6
      },
      "lineNbr": 61,
      "author": {
        "id": 5053
      },
      "writtenOn": "2017-10-20T01:09:43Z",
      "side": 1,
      "message": "nit: Does our style guide allow:\n\nSetDtlsTransport(/*rtcp\u003d*/true, rtcp_dtls_transport)?\n\nI think that would be more clear here.",
      "revId": "193e9a8707e7456d44a21a5662c7fa5c9ee56f8e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "09c5a470_0e390b34",
        "filename": "pc/dtlssrtptransport.cc",
        "patchSetId": 6
      },
      "lineNbr": 61,
      "author": {
        "id": 5080
      },
      "writtenOn": "2017-10-20T23:46:14Z",
      "side": 1,
      "message": "Yes, that\u0027s allowed. https://google.github.io/styleguide/cppguide.html#Variable_Comments",
      "parentUuid": "79699bdd_46c2a208",
      "revId": "193e9a8707e7456d44a21a5662c7fa5c9ee56f8e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a563ae4d_f8832a19",
        "filename": "pc/dtlssrtptransport.cc",
        "patchSetId": 6
      },
      "lineNbr": 83,
      "author": {
        "id": 5053
      },
      "writtenOn": "2017-10-20T01:09:43Z",
      "side": 1,
      "message": "This wouldn\u0027t be necessary if SrtpTransport did it automatically, inside its SetSendEncryptedHeaderExtensionIds. Remind me of the reason why we don\u0027t do that? Is it because, in the case of setting SDP that contains both new header extensions and new keys, this would result in extra libsrtp API calls? If so, it would probably be better to combine the two methods (for setting keys and header extensions IDs). What do you think?",
      "revId": "193e9a8707e7456d44a21a5662c7fa5c9ee56f8e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c63d8bb0_d49c31be",
        "filename": "pc/dtlssrtptransport.cc",
        "patchSetId": 6
      },
      "lineNbr": 83,
      "author": {
        "id": 5080
      },
      "writtenOn": "2017-10-20T23:46:14Z",
      "side": 1,
      "message": "SetSend/RecvEncryptedHeader just caches the new value and doesn\u0027t update the SRTP session until SetRtp/RtcpParams is called.\n\nFor SDES, when setting the header extension IDs, the crypto params may not be available at that moment and the IDs need to be cached somewhere. \n\nAre you suggesting that when setting the header extensions IDs, set the new IDs and RTP/RTCP params at the same time? Then we need to know the new negotiated crypto params before calling this method, correct?",
      "parentUuid": "a563ae4d_f8832a19",
      "revId": "193e9a8707e7456d44a21a5662c7fa5c9ee56f8e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7c6807ff_13d12095",
        "filename": "pc/dtlssrtptransport.cc",
        "patchSetId": 6
      },
      "lineNbr": 83,
      "author": {
        "id": 5053
      },
      "writtenOn": "2017-10-23T16:41:29Z",
      "side": 1,
      "message": "I think we\u0027re describing the same problem. Basically, what we *want* is:\n\n* For SDES, both encrypted header extension IDs and crypto params set at the same time, to save libsrtp calls.\n* For DTLS-SRTP, encrypted header extensions IDs are cached when SDP is first set, then applied once the DTLS handshake is finished. Or applied immediately, if encrypted header IDs change and SRTP is already set up.\n\nWhat\u0027s not ideal is how you need to call \"SetSendEncryptedHeaderExtensionIds\", then later call \"SetRtpParams\" for it to take effect. It\u0027s a larger API surface and it\u0027s not very intuitive. It would be cleaner if the two methods were combined, at least for the \"SrtpTransportInternal\" interface.\n\nIf I\u0027m still not making sense, let\u0027s talk in person. It\u0027s not that important though, it\u0027s something that could be improved later.",
      "parentUuid": "c63d8bb0_d49c31be",
      "revId": "193e9a8707e7456d44a21a5662c7fa5c9ee56f8e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "27c804f1_46cedbd7",
        "filename": "pc/dtlssrtptransport.cc",
        "patchSetId": 6
      },
      "lineNbr": 83,
      "author": {
        "id": 5080
      },
      "writtenOn": "2017-11-01T21:21:55Z",
      "side": 1,
      "message": "Made a separate CL for this. https://webrtc-review.googlesource.com/c/src/+/15860",
      "parentUuid": "7c6807ff_13d12095",
      "revId": "193e9a8707e7456d44a21a5662c7fa5c9ee56f8e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4a96c075_1266a29f",
        "filename": "pc/dtlssrtptransport.cc",
        "patchSetId": 6
      },
      "lineNbr": 243,
      "author": {
        "id": 5053
      },
      "writtenOn": "2017-10-20T01:09:43Z",
      "side": 1,
      "message": "Can you add a comment saying \"This would only be possible if using BUNDLE but not rtcp-mux, which isn\u0027t allowed according to the BUNDLE spec.\"\n\nI always forget why this check exists until I think about it.",
      "revId": "193e9a8707e7456d44a21a5662c7fa5c9ee56f8e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c2038ed5_c60d9180",
        "filename": "pc/dtlssrtptransport.cc",
        "patchSetId": 6
      },
      "lineNbr": 243,
      "author": {
        "id": 5080
      },
      "writtenOn": "2017-10-20T23:46:14Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4a96c075_1266a29f",
      "revId": "193e9a8707e7456d44a21a5662c7fa5c9ee56f8e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9a72e58d_031d2bbf",
        "filename": "pc/dtlssrtptransport.cc",
        "patchSetId": 6
      },
      "lineNbr": 270,
      "author": {
        "id": 5053
      },
      "writtenOn": "2017-10-20T01:09:43Z",
      "side": 1,
      "message": "This could result in multiple SignalWritableState(false)s in a row. Will this cause any issues? May want to at least document in the header that defines the signal that this may happen. Or fix it by doing what BaseChannel currently does, and cache the state.",
      "revId": "193e9a8707e7456d44a21a5662c7fa5c9ee56f8e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "095c4e21_f0df08a6",
        "filename": "pc/dtlssrtptransport.cc",
        "patchSetId": 6
      },
      "lineNbr": 270,
      "author": {
        "id": 5080
      },
      "writtenOn": "2017-10-20T23:46:14Z",
      "side": 1,
      "message": "OK. I\u0027ll cache the writable state of DtlsSrtpTransport and only fire the SignalWritableState(false) when the writable state changes from writable to not-writable. Does it make sense?",
      "parentUuid": "9a72e58d_031d2bbf",
      "revId": "193e9a8707e7456d44a21a5662c7fa5c9ee56f8e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d6af8405_1d5c9e7e",
        "filename": "pc/dtlssrtptransport_unittest.cc",
        "patchSetId": 6
      },
      "lineNbr": 118,
      "author": {
        "id": 5053
      },
      "writtenOn": "2017-10-20T01:09:43Z",
      "side": 1,
      "message": "Just a thought: we probably will want to do the same thing to test SrtpTransport itself. So, at some point, it would probably make sense to move this to a \"test utils\" file.",
      "revId": "193e9a8707e7456d44a21a5662c7fa5c9ee56f8e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dd4a2f1d_ff2346fb",
        "filename": "pc/dtlssrtptransport_unittest.cc",
        "patchSetId": 6
      },
      "lineNbr": 118,
      "author": {
        "id": 5080
      },
      "writtenOn": "2017-10-20T23:46:14Z",
      "side": 1,
      "message": "Yeah, I agree.",
      "parentUuid": "d6af8405_1d5c9e7e",
      "revId": "193e9a8707e7456d44a21a5662c7fa5c9ee56f8e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "26266d7a_64074a92",
        "filename": "pc/dtlssrtptransport_unittest.cc",
        "patchSetId": 6
      },
      "lineNbr": 134,
      "author": {
        "id": 5053
      },
      "writtenOn": "2017-10-20T01:09:43Z",
      "side": 1,
      "message": "nit: Are two variables needed, if they\u0027re \"copy-on-write\" and contain the same data?",
      "revId": "193e9a8707e7456d44a21a5662c7fa5c9ee56f8e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "01d9d34b_b762361d",
        "filename": "pc/dtlssrtptransport_unittest.cc",
        "patchSetId": 6
      },
      "lineNbr": 134,
      "author": {
        "id": 5080
      },
      "writtenOn": "2017-10-20T23:46:14Z",
      "side": 1,
      "message": "It seems that the ProtectRtp/Rtcp would changed the data in the buffer so I made an extra copy.",
      "parentUuid": "26266d7a_64074a92",
      "revId": "193e9a8707e7456d44a21a5662c7fa5c9ee56f8e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7b1ad276_307a379d",
        "filename": "pc/dtlssrtptransport_unittest.cc",
        "patchSetId": 6
      },
      "lineNbr": 134,
      "author": {
        "id": 5053
      },
      "writtenOn": "2017-10-23T16:41:29Z",
      "side": 1,
      "message": "Ah... Because it\u0027s taking the CopyOnWriteBuffer by pointer? That seems like a misuse of the CopyOnWriteBuffer class in the first place. The idea of CopyOnWriteBuffer, as I understood it, is that you can make cheap copies all over the place, and only when the data is modified is a new \"real\" copy made. We should have a TODO and/or bug to fix this, or do it in a quick standalone CL.",
      "parentUuid": "01d9d34b_b762361d",
      "revId": "193e9a8707e7456d44a21a5662c7fa5c9ee56f8e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "de214ddf_1848d500",
        "filename": "pc/dtlssrtptransport_unittest.cc",
        "patchSetId": 6
      },
      "lineNbr": 134,
      "author": {
        "id": 5080
      },
      "writtenOn": "2017-11-01T21:21:55Z",
      "side": 1,
      "message": "Ack. Will do it in a separate CL.",
      "parentUuid": "7b1ad276_307a379d",
      "revId": "193e9a8707e7456d44a21a5662c7fa5c9ee56f8e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "22918a31_255750ed",
        "filename": "pc/dtlssrtptransport_unittest.cc",
        "patchSetId": 6
      },
      "lineNbr": 272,
      "author": {
        "id": 5053
      },
      "writtenOn": "2017-10-20T01:09:43Z",
      "side": 1,
      "message": "I\u0027m confused about this test; it\u0027s setting the same transports it already has, and setting the same mux policy it already had. My intent was for the test to set *different* underlying transports.\n\nThe real world example is the case where the \"video\" channel starts using the \"audio\" transport, which is already writable, because the DTLS handshake finished before the SDP answer (that finishes BUNDLE negotiation) was received.",
      "range": {
        "startLine": 268,
        "startChar": 1,
        "endLine": 272,
        "endChar": 49
      },
      "revId": "193e9a8707e7456d44a21a5662c7fa5c9ee56f8e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c2313670_d2d2a62e",
        "filename": "pc/dtlssrtptransport_unittest.cc",
        "patchSetId": 6
      },
      "lineNbr": 272,
      "author": {
        "id": 5080
      },
      "writtenOn": "2017-10-20T23:46:14Z",
      "side": 1,
      "message": "OK, let me make it less confusing.",
      "parentUuid": "22918a31_255750ed",
      "range": {
        "startLine": 268,
        "startChar": 1,
        "endLine": 272,
        "endChar": 49
      },
      "revId": "193e9a8707e7456d44a21a5662c7fa5c9ee56f8e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "301724ee_60889671",
        "filename": "pc/dtlssrtptransport_unittest.cc",
        "patchSetId": 6
      },
      "lineNbr": 316,
      "author": {
        "id": 5053
      },
      "writtenOn": "2017-10-20T01:09:43Z",
      "side": 1,
      "message": "This should pass in both RTP and RTCP transports. The point of the test is \"if you *have* an RTCP transport, but RTCP muxing is enabled (the pr-answer case), you can set up DTLS-SRTP with just the RTP transport\u0027s handshake finishes\".",
      "revId": "193e9a8707e7456d44a21a5662c7fa5c9ee56f8e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "479dc75d_45312c75",
        "filename": "pc/dtlssrtptransport_unittest.cc",
        "patchSetId": 6
      },
      "lineNbr": 316,
      "author": {
        "id": 5080
      },
      "writtenOn": "2017-10-20T23:46:14Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "301724ee_60889671",
      "revId": "193e9a8707e7456d44a21a5662c7fa5c9ee56f8e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b3f12332_ee2b885e",
        "filename": "pc/dtlssrtptransport_unittest.cc",
        "patchSetId": 6
      },
      "lineNbr": 319,
      "author": {
        "id": 5053
      },
      "writtenOn": "2017-10-20T01:09:43Z",
      "side": 1,
      "message": "Why is calling SetDtlsTransports needed here?",
      "revId": "193e9a8707e7456d44a21a5662c7fa5c9ee56f8e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6a487d62_36b029b1",
        "filename": "pc/dtlssrtptransport_unittest.cc",
        "patchSetId": 6
      },
      "lineNbr": 319,
      "author": {
        "id": 5080
      },
      "writtenOn": "2017-10-20T23:46:14Z",
      "side": 1,
      "message": "Because the MakeDtlsSrtpTransports helper doesn\u0027t set the DTLS transports. The idea was to set the DTLS transports in each test case but that seems to be confusing. I\u0027ll change it.",
      "parentUuid": "b3f12332_ee2b885e",
      "revId": "193e9a8707e7456d44a21a5662c7fa5c9ee56f8e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a40b5ed0_0c5e567d",
        "filename": "pc/dtlssrtptransport_unittest.cc",
        "patchSetId": 6
      },
      "lineNbr": 345,
      "author": {
        "id": 5053
      },
      "writtenOn": "2017-10-20T01:09:43Z",
      "side": 1,
      "message": "Ideally there should be some verification in between these two points, that packets *can\u0027t* be sent/received yet. Just checking IsActive is probably enough.",
      "revId": "193e9a8707e7456d44a21a5662c7fa5c9ee56f8e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "83105580_343547e9",
        "filename": "pc/dtlssrtptransport_unittest.cc",
        "patchSetId": 6
      },
      "lineNbr": 345,
      "author": {
        "id": 5080
      },
      "writtenOn": "2017-10-20T23:46:14Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a40b5ed0_0c5e567d",
      "revId": "193e9a8707e7456d44a21a5662c7fa5c9ee56f8e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "17e51a6f_d9445fbb",
        "filename": "pc/dtlssrtptransport_unittest.cc",
        "patchSetId": 6
      },
      "lineNbr": 403,
      "author": {
        "id": 5053
      },
      "writtenOn": "2017-10-20T01:09:43Z",
      "side": 1,
      "message": "Why are these SetDtlsTransports calls needed?",
      "revId": "193e9a8707e7456d44a21a5662c7fa5c9ee56f8e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9a187d9d_da7d7484",
        "filename": "pc/dtlssrtptransport_unittest.cc",
        "patchSetId": 6
      },
      "lineNbr": 403,
      "author": {
        "id": 5080
      },
      "writtenOn": "2017-10-20T23:46:14Z",
      "side": 1,
      "message": "I\u0027ll move these to the helper function.",
      "parentUuid": "17e51a6f_d9445fbb",
      "revId": "193e9a8707e7456d44a21a5662c7fa5c9ee56f8e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "36a5c655_28106e8a",
        "filename": "pc/dtlssrtptransport_unittest.cc",
        "patchSetId": 6
      },
      "lineNbr": 433,
      "author": {
        "id": 5053
      },
      "writtenOn": "2017-10-20T01:09:43Z",
      "side": 1,
      "message": "I\u0027m assuming the values of 1 and 4 come from kPcmuFrameWithExtensions? If so, they should be in their own constants (or one constant, for the array of extension IDs).",
      "revId": "193e9a8707e7456d44a21a5662c7fa5c9ee56f8e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8c5d58ac_8cf31beb",
        "filename": "pc/dtlssrtptransport_unittest.cc",
        "patchSetId": 6
      },
      "lineNbr": 433,
      "author": {
        "id": 5080
      },
      "writtenOn": "2017-10-20T23:46:14Z",
      "side": 1,
      "message": "This is how we used the header extension id before. Do you want me to make it a constant or something like that?",
      "parentUuid": "36a5c655_28106e8a",
      "revId": "193e9a8707e7456d44a21a5662c7fa5c9ee56f8e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a3808be6_332c6f1b",
        "filename": "pc/dtlssrtptransport_unittest.cc",
        "patchSetId": 6
      },
      "lineNbr": 433,
      "author": {
        "id": 5053
      },
      "writtenOn": "2017-10-23T16:41:29Z",
      "side": 1,
      "message": "That\u0027s what I was thinking. Right now someone reading the test may think \"where do the values of 1 and 4 come from? Are they random?\" But if they were constants, you could look where they\u0027re declared and see that they\u0027re related to kPcmuFrameWithExtensions.",
      "parentUuid": "8c5d58ac_8cf31beb",
      "revId": "193e9a8707e7456d44a21a5662c7fa5c9ee56f8e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c87dd659_64a2d224",
        "filename": "pc/dtlssrtptransport_unittest.cc",
        "patchSetId": 6
      },
      "lineNbr": 433,
      "author": {
        "id": 5080
      },
      "writtenOn": "2017-11-01T21:21:55Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a3808be6_332c6f1b",
      "revId": "193e9a8707e7456d44a21a5662c7fa5c9ee56f8e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "31c5442d_7b185d1f",
        "filename": "pc/rtptransportinternaladapter.h",
        "patchSetId": 6
      },
      "lineNbr": 23,
      "author": {
        "id": 5053
      },
      "writtenOn": "2017-10-20T01:09:43Z",
      "side": 1,
      "message": "\"implementing\"",
      "revId": "193e9a8707e7456d44a21a5662c7fa5c9ee56f8e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "794ff3a7_c1ed03f1",
        "filename": "pc/rtptransportinternaladapter.h",
        "patchSetId": 6
      },
      "lineNbr": 23,
      "author": {
        "id": 5080
      },
      "writtenOn": "2017-10-20T23:46:14Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "31c5442d_7b185d1f",
      "revId": "193e9a8707e7456d44a21a5662c7fa5c9ee56f8e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ab95776e_99d89092",
        "filename": "pc/rtptransportinternaladapter.h",
        "patchSetId": 6
      },
      "lineNbr": 96,
      "author": {
        "id": 5053
      },
      "writtenOn": "2017-10-20T01:09:43Z",
      "side": 1,
      "message": "nit: \"Owned\"",
      "revId": "193e9a8707e7456d44a21a5662c7fa5c9ee56f8e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5015b325_db70b9fc",
        "filename": "pc/rtptransportinternaladapter.h",
        "patchSetId": 6
      },
      "lineNbr": 96,
      "author": {
        "id": 5080
      },
      "writtenOn": "2017-10-20T23:46:14Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ab95776e_99d89092",
      "revId": "193e9a8707e7456d44a21a5662c7fa5c9ee56f8e",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    }
  ]
}