{
  "comments": [
    {
      "key": {
        "uuid": "619d0c7e_bd445915",
        "filename": "audio/audio_send_stream.cc",
        "patchSetId": 4
      },
      "lineNbr": 539,
      "author": {
        "id": 10107
      },
      "writtenOn": "2020-04-21T22:26:59Z",
      "side": 0,
      "message": "My reading of the code is that with the callback implementation, every time an overhead change is detected, we end up calling ConfigureBitrateObserver() (via UpdateOverheadForEncoder()). This in turn calls bitrate_allocator_-\u003eAddObserver(...) which updates the bitrate allocation and calls OnBitrateUpdated().\n\nWith the proposed change, we only poll the overhead when OnBitrateUpdated is called. So if overhead changes, bitrate is not necessarily reallocated. This seems like a big change to me. Is this desired/intentional?",
      "range": {
        "startLine": 534,
        "startChar": 0,
        "endLine": 539,
        "endChar": 1
      },
      "revId": "efdff53176d621ca075f9e9547b248752ff414f9",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c9536349_4850c95e",
        "filename": "audio/audio_send_stream.cc",
        "patchSetId": 4
      },
      "lineNbr": 539,
      "author": {
        "id": 5524
      },
      "writtenOn": "2020-04-22T08:07:37Z",
      "side": 0,
      "message": "At least on the video side, there are regular calls to update bitrate even if bwe is not changed. But might not be the same here.\nThe overhead really is about the amount of header extensions registered, so maybe instead would be better to call this on ConfigureStream(). I\u0027ll make that change.",
      "parentUuid": "619d0c7e_bd445915",
      "range": {
        "startLine": 534,
        "startChar": 0,
        "endLine": 539,
        "endChar": 1
      },
      "revId": "efdff53176d621ca075f9e9547b248752ff414f9",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9be0c974_8e519042",
        "filename": "audio/audio_send_stream.cc",
        "patchSetId": 4
      },
      "lineNbr": 539,
      "author": {
        "id": 5524
      },
      "writtenOn": "2020-04-22T09:58:02Z",
      "side": 0,
      "message": "Actually, header extensions are set in AudioSendStream::ConfigureStream(), and that already\ncalls AudioSendStream::ReconfigureSendCodec() which tries to update the overhead. All that I needed was another poll call to the RTP module.",
      "parentUuid": "c9536349_4850c95e",
      "range": {
        "startLine": 534,
        "startChar": 0,
        "endLine": 539,
        "endChar": 1
      },
      "revId": "efdff53176d621ca075f9e9547b248752ff414f9",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b9414495_d33fa261",
        "filename": "audio/audio_send_stream.cc",
        "patchSetId": 4
      },
      "lineNbr": 539,
      "author": {
        "id": 10107
      },
      "writtenOn": "2020-04-23T11:54:49Z",
      "side": 0,
      "message": "I\u0027m not sure polling for the overhead size right after header extensions have been set in AudioSendStream::ConfigureStream() will give you the new size. Doesn\u0027t a new packet need to be sent first containing the header extensions before the overhead size in RtpSenderEgress is updated? And ReconfigureSendCodec() returns early if certain parts of the new config hasn\u0027t been changed, so I don\u0027t think it will always get to update the overhead if only the headers have changed.\n\nI also looked at the bitrate allocator. From my understanding, AudioSendStream::OnBitrateUpdated() is called by the bitrate allocator only when the target bitrate is changed or if AudioSendStream calls bitrate allocator\u0027s AddObserver().\n\nIn other words, I don\u0027t see how we can be sure that the overhead size does get updated by polling from AudioSendStream, at least not just from reading the code.",
      "parentUuid": "9be0c974_8e519042",
      "range": {
        "startLine": 534,
        "startChar": 0,
        "endLine": 539,
        "endChar": 1
      },
      "revId": "efdff53176d621ca075f9e9547b248752ff414f9",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    }
  ]
}