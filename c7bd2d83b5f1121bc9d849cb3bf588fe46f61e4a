{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "c70d074e_cee35354",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 5634
      },
      "writtenOn": "2023-08-03T13:31:30Z",
      "side": 1,
      "message": "Not happy with the way you create pointers to modifiable attributes with no explicit lifetime contract (or even guidance).\n\nAlso some naming issues.",
      "revId": "c7bd2d83b5f1121bc9d849cb3bf588fe46f61e4a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cee963e6_7804d2e7",
        "filename": "p2p/base/stun_dictionary.cc",
        "patchSetId": 3
      },
      "lineNbr": 34,
      "author": {
        "id": 5634
      },
      "writtenOn": "2023-08-03T13:31:30Z",
      "side": 1,
      "message": "Hm. Messing up the type is a bug, but since this is a network interface and you can\u0027t trust what comes off the wire, it is good not to CHECK on it.\n\nStill, that kind of error seems to me that it deserves a log message.\n\nNon-presence of the attribute is fine to just accept without making a fuss about it.",
      "revId": "c7bd2d83b5f1121bc9d849cb3bf588fe46f61e4a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e724143e_d993cb85",
        "filename": "p2p/base/stun_dictionary.cc",
        "patchSetId": 3
      },
      "lineNbr": 212,
      "author": {
        "id": 5634
      },
      "writtenOn": "2023-08-03T13:31:30Z",
      "side": 1,
      "message": "Should there be a CHECK/DCHECK here when the version_in_delta \u003d\u003d version_per_key[] to enforce the requirement that applying a delta twice requires that the deltas be identical?",
      "revId": "c7bd2d83b5f1121bc9d849cb3bf588fe46f61e4a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "791d1e1a_2706831d",
        "filename": "p2p/base/stun_dictionary.cc",
        "patchSetId": 3
      },
      "lineNbr": 229,
      "author": {
        "id": 5634
      },
      "writtenOn": "2023-08-03T13:31:30Z",
      "side": 1,
      "message": "\u003ddefault?",
      "revId": "c7bd2d83b5f1121bc9d849cb3bf588fe46f61e4a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "83c6a60b_5c897016",
        "filename": "p2p/base/stun_dictionary.cc",
        "patchSetId": 3
      },
      "lineNbr": 235,
      "author": {
        "id": 5634
      },
      "writtenOn": "2023-08-03T13:31:30Z",
      "side": 1,
      "message": "Ugly, for the reasons given in the interface comment.",
      "revId": "c7bd2d83b5f1121bc9d849cb3bf588fe46f61e4a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c2d5ff68_1504fbe9",
        "filename": "p2p/base/stun_dictionary.h",
        "patchSetId": 3
      },
      "lineNbr": 23,
      "author": {
        "id": 5634
      },
      "writtenOn": "2023-08-03T13:31:30Z",
      "side": 1,
      "message": "argue choice of namespace with me....",
      "revId": "c7bd2d83b5f1121bc9d849cb3bf588fe46f61e4a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "57cb18d9_d7f725c1",
        "filename": "p2p/base/stun_dictionary.h",
        "patchSetId": 3
      },
      "lineNbr": 25,
      "author": {
        "id": 5634
      },
      "writtenOn": "2023-08-03T13:31:30Z",
      "side": 1,
      "message": "A good file comment on this file would be to explain the concept of a StunDictionary and that a Writer and a Reader are linked in an 1:1 relationship - there is no concept of one Writer copying to multiple Readers.",
      "revId": "c7bd2d83b5f1121bc9d849cb3bf588fe46f61e4a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4bf6bf09_fd356301",
        "filename": "p2p/base/stun_dictionary.h",
        "patchSetId": 3
      },
      "lineNbr": 32,
      "author": {
        "id": 5634
      },
      "writtenOn": "2023-08-03T13:31:30Z",
      "side": 1,
      "message": "Naming: A Reader is supposed to be a class that reads from an underlying object. This class has a writer (ApplyDelta). Should it be called StunDictionaryCopyStorage?",
      "revId": "c7bd2d83b5f1121bc9d849cb3bf588fe46f61e4a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2f051df9_3dcb38fa",
        "filename": "p2p/base/stun_dictionary.h",
        "patchSetId": 3
      },
      "lineNbr": 69,
      "author": {
        "id": 5634
      },
      "writtenOn": "2023-08-03T13:31:30Z",
      "side": 1,
      "message": "CloneForTesting?",
      "revId": "c7bd2d83b5f1121bc9d849cb3bf588fe46f61e4a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "401f2edc_ee7253ba",
        "filename": "p2p/base/stun_dictionary.h",
        "patchSetId": 3
      },
      "lineNbr": 87,
      "author": {
        "id": 5634
      },
      "writtenOn": "2023-08-03T13:31:30Z",
      "side": 1,
      "message": "Unsure what this should be called - it resembles a builder, but it survives the Build() call equivalent (CreateDelta) and can be used multiple times.\n\nStunDictionaryAuthoritativeStorage?",
      "revId": "c7bd2d83b5f1121bc9d849cb3bf588fe46f61e4a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "870f890c_7ad3b690",
        "filename": "p2p/base/stun_dictionary.h",
        "patchSetId": 3
      },
      "lineNbr": 92,
      "author": {
        "id": 5634
      },
      "writtenOn": "2023-08-03T13:31:30Z",
      "side": 1,
      "message": "This pattern seems error prone to me, because there\u0027s no clear expression of the lifetime of the returned pointer. I assume that SetUint32(5); Delete(5) will invalidate the pointer, but what other operations will invalidate it?\n\nA less error prone pattern (?) would be to have the Set() operations be called Modify*(key) and return a Modification object that has a Commit method - it would be an error to call any modify, delete or other invalidating operation on the StunDictionaryWriter while there were outstanding Modifications.",
      "revId": "c7bd2d83b5f1121bc9d849cb3bf588fe46f61e4a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cb62048c_9c35857f",
        "filename": "p2p/base/stun_dictionary_unittest.cc",
        "patchSetId": 3
      },
      "lineNbr": 47,
      "author": {
        "id": 5634
      },
      "writtenOn": "2023-08-03T13:31:30Z",
      "side": 1,
      "message": "This looks like a debug log while trying to debug XorToggle. Remove?",
      "revId": "c7bd2d83b5f1121bc9d849cb3bf588fe46f61e4a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c961823e_ccf89dcd",
        "filename": "p2p/base/stun_dictionary_unittest.cc",
        "patchSetId": 3
      },
      "lineNbr": 67,
      "author": {
        "id": 5634
      },
      "writtenOn": "2023-08-03T13:31:30Z",
      "side": 1,
      "message": "Not happy with the naming in general - to my mind, it\u0027s best if the name reflects what is supposed to happen when the test passes. in this case, \"CanCreateEmptyWriter\" seems appropriate. But that might be a matter of style.",
      "revId": "c7bd2d83b5f1121bc9d849cb3bf588fe46f61e4a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c71b535b_50a7883a",
        "filename": "p2p/base/stun_dictionary_unittest.cc",
        "patchSetId": 3
      },
      "lineNbr": 205,
      "author": {
        "id": 5634
      },
      "writtenOn": "2023-08-03T13:31:30Z",
      "side": 1,
      "message": "What is being demonstrated here?\n\nOffhand, it looks as if you\u0027re having two authoritative copies updating one non-authoritative copy. That shouldn\u0027t work.",
      "revId": "c7bd2d83b5f1121bc9d849cb3bf588fe46f61e4a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6840122c_23dddca0",
        "filename": "p2p/base/stun_dictionary_unittest.cc",
        "patchSetId": 3
      },
      "lineNbr": 251,
      "author": {
        "id": 5634
      },
      "writtenOn": "2023-08-03T13:31:30Z",
      "side": 1,
      "message": "MaxBytesStoredCausesErrorOnOverflow?",
      "revId": "c7bd2d83b5f1121bc9d849cb3bf588fe46f61e4a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dd366486_5188eb02",
        "filename": "p2p/base/stun_dictionary_unittest.cc",
        "patchSetId": 3
      },
      "lineNbr": 271,
      "author": {
        "id": 5634
      },
      "writtenOn": "2023-08-03T13:31:30Z",
      "side": 1,
      "message": "This looks like a debug log too.",
      "revId": "c7bd2d83b5f1121bc9d849cb3bf588fe46f61e4a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1c5c8978_5912abf7",
        "filename": "p2p/base/stun_dictionary_unittest.cc",
        "patchSetId": 3
      },
      "lineNbr": 331,
      "author": {
        "id": 5634
      },
      "writtenOn": "2023-08-03T13:31:30Z",
      "side": 1,
      "message": "Is that a design bug?",
      "revId": "c7bd2d83b5f1121bc9d849cb3bf588fe46f61e4a",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    }
  ]
}