{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "3d6a89d3_359923e6",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 5634
      },
      "writtenOn": "2022-04-26T12:27:29Z",
      "side": 1,
      "message": "If we expose this enum in the API, it will be used by customers.\nI\u0027ve commented in the past about the problem with encouraging an enum for something that will expand over time.\n\nConsider if this can be done at a lower level.\n",
      "revId": "b2c6670898ed3f843f19578bf23663e293967757",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "59bf11a7_d05e27a2",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 5634
      },
      "writtenOn": "2022-04-26T14:31:09Z",
      "side": 1,
      "message": "I still don\u0027t understand the case for exposing the enum.",
      "revId": "b2c6670898ed3f843f19578bf23663e293967757",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "09e2fe2b_45a9c444",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 5234
      },
      "writtenOn": "2022-04-26T14:49:27Z",
      "side": 1,
      "message": "I guess there are two questions:\n\nWhy an enum? (i) To get a compile time error for mis-spelling, e.g., T1L1 when L1T1 was intended. (ii) To avoid string comparisons, and make it possible to use it in switch statements. So I don\u0027t have a very strong opinion, but it seems nice to me to convert from string to enum in only one place, and let code below that place deal exclusively with the enum.\n\nWhy expose? Because VideoCodec is exposed, and injected encoders need to understand its contents.\n\nNow I don\u0027t quite have the big picture, so not sure what intermediate layers in webrtc really need to understand the scalability mode, but current state seems to be that, e.g., VideoStreamEncoder wants to know the structure, in order to allocate available bit rate between layers.",
      "parentUuid": "59bf11a7_d05e27a2",
      "revId": "b2c6670898ed3f843f19578bf23663e293967757",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9926e5e2_c6781b73",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 5634
      },
      "writtenOn": "2022-04-28T06:42:20Z",
      "side": 1,
      "message": "Hm. Can we document that the enum should only be used externally when writing custom encoders/decoders?\n\nI do think it makes sense to use enums internally when there are so many parts that need(?) to know things about layers, and custom encoders/decoders are going to use otherwise-internal interfaces anyway.",
      "parentUuid": "09e2fe2b_45a9c444",
      "revId": "b2c6670898ed3f843f19578bf23663e293967757",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "65d051fe_4478199e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 5634
      },
      "writtenOn": "2022-04-28T06:42:20Z",
      "side": 1,
      "message": "Possible way forward in agreement.....",
      "revId": "b2c6670898ed3f843f19578bf23663e293967757",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "76df8e6c_051b9757",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 5234
      },
      "writtenOn": "2022-04-28T07:56:07Z",
      "side": 1,
      "message": "Added a comment on intended usage.",
      "parentUuid": "9926e5e2_c6781b73",
      "revId": "b2c6670898ed3f843f19578bf23663e293967757",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "73e9bf8a_f165b65b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 6
      },
      "lineNbr": 0,
      "author": {
        "id": 5634
      },
      "writtenOn": "2022-04-28T08:03:04Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "76df8e6c_051b9757",
      "revId": "b2c6670898ed3f843f19578bf23663e293967757",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6587fecc_66b9e36d",
        "filename": "api/video_codecs/scalability_mode.h",
        "patchSetId": 6
      },
      "lineNbr": 16,
      "author": {
        "id": 5634
      },
      "writtenOn": "2022-04-26T12:27:29Z",
      "side": 1,
      "message": "I don\u0027t think this enum should be in api/\n\nStuff in api/ should be limited to stuff that we recommend users of the api to use. The users should be using the string form.",
      "revId": "b2c6670898ed3f843f19578bf23663e293967757",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8591cf19_150d9e06",
        "filename": "api/video_codecs/scalability_mode.h",
        "patchSetId": 6
      },
      "lineNbr": 16,
      "author": {
        "id": 5634
      },
      "writtenOn": "2022-04-28T08:03:04Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6587fecc_66b9e36d",
      "revId": "b2c6670898ed3f843f19578bf23663e293967757",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "244d2e68_4ca8804c",
        "filename": "api/video_codecs/video_codec.h",
        "patchSetId": 6
      },
      "lineNbr": 108,
      "author": {
        "id": 5634
      },
      "writtenOn": "2022-04-26T12:27:29Z",
      "side": 1,
      "message": "If the enum isn\u0027t in the API, these functions shouldn\u0027t be in the public API of VideoCodec either.",
      "revId": "b2c6670898ed3f843f19578bf23663e293967757",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bb3e62a6_757eb59e",
        "filename": "api/video_codecs/video_codec.h",
        "patchSetId": 6
      },
      "lineNbr": 108,
      "author": {
        "id": 5234
      },
      "writtenOn": "2022-04-26T13:58:54Z",
      "side": 1,
      "message": "It\u0027s not entirely clear to me that we should have scalability mode at all at this level. Main way this is populated is in VideoCodecInitializer (and the reason VideoCodec is in api/ at all is that encoders injected by the application needs it). \n\nFor the VP8 usecase, we take scalability modes from the provided vector of VideoStream, and derive number of temporal layers for each SpatialLayer in the simulcaseStream vector. Then the top level VideoCodec scalability mode is just a headache, because there\u0027s no obviously right way to assign it if configuration differs between simulcast streams. \n\nBut for the AV1 usecase, the encoder queries the top-level scalability mode of the VideoCodec (and I take it this encoder doesn\u0027t do native simulcast?).\n\nMy thinking is that the only reasonably application use of the enum is by injected codecs, where each encoder can check for the values that it recognizes and reject anything unknown, so I don\u0027t foresee any great difficulty in adding new values.\n\nIt looks to me like it won\u0027t be possible for an application to inject an encoder supporting some completely custom scalability mode, and have that string piped through webrtc layers without interpretation. There seems to be multiple places in webrtc that wants to know, e.g., the number of temporal layers for the configured scalability mode, do you think we can get away from that and treat it as an opaque string in intermediate layers?",
      "parentUuid": "244d2e68_4ca8804c",
      "revId": "b2c6670898ed3f843f19578bf23663e293967757",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1be08f88_4c11ecdf",
        "filename": "api/video_codecs/video_codec.h",
        "patchSetId": 6
      },
      "lineNbr": 108,
      "author": {
        "id": 5634
      },
      "writtenOn": "2022-04-26T14:31:09Z",
      "side": 1,
      "message": "How does having an enum help solve that problem (except for preventing the custom modes from being configured in the first place)?\n\nIf a codec supports a mode that isn\u0027t in the enum, it can\u0027t communicate it.\n\nWe are, however, very likely to do the opposite: Define goog_svc_mode_37_for_screencast that has a completely different relationships between spatial, temporal and quality layers than the ones that are defined in the open specs, but are understood within webrtc code.\n\nIn either case, I don\u0027t see what exposing the enum buys us.",
      "parentUuid": "bb3e62a6_757eb59e",
      "revId": "b2c6670898ed3f843f19578bf23663e293967757",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d6ccb163_ee77c7ed",
        "filename": "api/video_codecs/video_codec.h",
        "patchSetId": 6
      },
      "lineNbr": 108,
      "author": {
        "id": 5634
      },
      "writtenOn": "2022-04-28T08:03:04Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1be08f88_4c11ecdf",
      "revId": "b2c6670898ed3f843f19578bf23663e293967757",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8995c700_7d01bb1f",
        "filename": "modules/video_coding/svc/scalability_mode_util.cc",
        "patchSetId": 6
      },
      "lineNbr": 56,
      "author": {
        "id": 7036
      },
      "writtenOn": "2022-04-26T09:14:16Z",
      "side": 1,
      "message": "Can we add a test that checks all the enum values from L1T1 to the last (might want a sentinel value) and that they\u0027re covered in this method?\n\nWe probably want the inverse method as well (enum -\u003e string)",
      "revId": "b2c6670898ed3f843f19578bf23663e293967757",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "90202656_fadcb314",
        "filename": "modules/video_coding/svc/scalability_mode_util.cc",
        "patchSetId": 6
      },
      "lineNbr": 56,
      "author": {
        "id": 5234
      },
      "writtenOn": "2022-04-26T12:01:17Z",
      "side": 1,
      "message": "\u003e Can we add a test that checks all the enum values from L1T1 to the last (might want a sentinel value) and that they\u0027re covered in this method?\n\nWe could, but not sure what value that would give (just to equivalent lists to keep in sync). Several of the scalability mode tests use strings in the test params, and call this function to get the corresponding enum, which should give some coverage.\n\n\u003e We probably want the inverse method as well (enum -\u003e string)\n\nI see that may be useful for logging, but I think we should strive for a design where nothing else depends that inverse lookup.",
      "parentUuid": "8995c700_7d01bb1f",
      "revId": "b2c6670898ed3f843f19578bf23663e293967757",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    }
  ]
}