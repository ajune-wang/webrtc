{
  "comments": [
    {
      "key": {
        "uuid": "02d7e448_ffaed8ca",
        "filename": "api/video_codecs/video_codec.h",
        "patchSetId": 6
      },
      "lineNbr": 81,
      "author": {
        "id": 5825
      },
      "writtenOn": "2018-10-25T09:09:27Z",
      "side": 1,
      "message": "uint8_t",
      "range": {
        "startLine": 81,
        "startChar": 2,
        "endLine": 81,
        "endChar": 15
      },
      "revId": "dddf012d3d85ecc4bf8b280155a23f42515e8b01",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ce7153a0_537c4c5a",
        "filename": "api/video_codecs/video_codec.h",
        "patchSetId": 6
      },
      "lineNbr": 81,
      "author": {
        "id": 6810
      },
      "writtenOn": "2018-10-31T15:10:20Z",
      "side": 1,
      "message": "Will change. Please note VP8 and VP9 still use char.",
      "parentUuid": "02d7e448_ffaed8ca",
      "range": {
        "startLine": 81,
        "startChar": 2,
        "endLine": 81,
        "endChar": 15
      },
      "revId": "dddf012d3d85ecc4bf8b280155a23f42515e8b01",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7e8e2245_ef1adfa4",
        "filename": "api/video_codecs/video_codec.h",
        "patchSetId": 6
      },
      "lineNbr": 81,
      "author": {
        "id": 5825
      },
      "writtenOn": "2018-10-31T15:55:03Z",
      "side": 1,
      "message": "New code should use short dtypes notations.",
      "parentUuid": "ce7153a0_537c4c5a",
      "range": {
        "startLine": 81,
        "startChar": 2,
        "endLine": 81,
        "endChar": 15
      },
      "revId": "dddf012d3d85ecc4bf8b280155a23f42515e8b01",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "672f1ec6_1ce1d0d6",
        "filename": "modules/video_coding/codecs/h264/h264_encoder_impl.cc",
        "patchSetId": 6
      },
      "lineNbr": 246,
      "author": {
        "id": 5825
      },
      "writtenOn": "2018-10-25T09:09:27Z",
      "side": 1,
      "message": "Is temporal layering allowed on stream 0? Either condition or comment should be updated.",
      "range": {
        "startLine": 246,
        "startChar": 8,
        "endLine": 246,
        "endChar": 13
      },
      "revId": "dddf012d3d85ecc4bf8b280155a23f42515e8b01",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "486c1cb1_6cca97a4",
        "filename": "modules/video_coding/codecs/h264/h264_encoder_impl.cc",
        "patchSetId": 6
      },
      "lineNbr": 246,
      "author": {
        "id": 6810
      },
      "writtenOn": "2018-10-30T17:00:14Z",
      "side": 1,
      "message": "I would appreciate any guidance on handling simulcast. If stream 0 cannot have temporal layering, what is the appropriate way to enable and observe temporal layering? How are simulcast and temporal layering related?\nSo far, I\u0027ve been using peerconnection_client to test my updates. If I need to use simulcast to properly use temporal layering, how do I test/debug simulcast streams?",
      "parentUuid": "672f1ec6_1ce1d0d6",
      "range": {
        "startLine": 246,
        "startChar": 8,
        "endLine": 246,
        "endChar": 13
      },
      "revId": "dddf012d3d85ecc4bf8b280155a23f42515e8b01",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "89b38845_7fda7658",
        "filename": "modules/video_coding/codecs/h264/h264_encoder_impl.cc",
        "patchSetId": 6
      },
      "lineNbr": 246,
      "author": {
        "id": 5825
      },
      "writtenOn": "2018-10-31T09:52:46Z",
      "side": 1,
      "message": "I can\u0027t find any end-to-end tests for h264 simulcast. It would be right to assume that simulcast with temporal layering is not supported until this is tested and to replace the condition with:\nif (number_of_streams \u003e 1 \u0026\u0026 inst-\u003esimulcastStream[i].numberOfTemporalLayers \u003e 1) {\n  Release();\n  return WEBRTC_VIDEO_CODEC_ERR_SIMULCAST_PARAMETERS_NOT_SUPPORTED;\n}",
      "parentUuid": "486c1cb1_6cca97a4",
      "range": {
        "startLine": 246,
        "startChar": 8,
        "endLine": 246,
        "endChar": 13
      },
      "revId": "dddf012d3d85ecc4bf8b280155a23f42515e8b01",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "574afae7_cc9b7a9d",
        "filename": "modules/video_coding/codecs/h264/h264_encoder_impl.cc",
        "patchSetId": 6
      },
      "lineNbr": 246,
      "author": {
        "id": 6810
      },
      "writtenOn": "2018-10-31T18:46:46Z",
      "side": 1,
      "message": "How is simulcast tested for VP8 or VP9?\nAlso, since we are now enabling temporal scalability here in H.264, can we simply delete this obsolete error message?\nAs far as I know, there is no correlation between temporal layering and multiple simulcast streams that would somehow endanger the decodability of each stream. Each simulcast stream is encoded by its own encoder instance which can be configured for whatever temporal layer structure and it should have no effect on any other stream.",
      "parentUuid": "89b38845_7fda7658",
      "range": {
        "startLine": 246,
        "startChar": 8,
        "endLine": 246,
        "endChar": 13
      },
      "revId": "dddf012d3d85ecc4bf8b280155a23f42515e8b01",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2b37180f_eff4ed76",
        "filename": "modules/video_coding/codecs/h264/h264_encoder_impl.cc",
        "patchSetId": 6
      },
      "lineNbr": 246,
      "author": {
        "id": 5825
      },
      "writtenOn": "2018-11-01T12:10:55Z",
      "side": 1,
      "message": "VP8 simulcast and VP9 SVC tests can be found here - https://cs.chromium.org/chromium/src/third_party/webrtc/video/full_stack_tests.cc (SimulcastVP8_3SL_.. and VP9SVC_3SL_..).\n\nI agree that temporal layering should not cause any issue at simulcasting since spatial layers are completely independent. I\u0027m fine if you remove this check.",
      "parentUuid": "574afae7_cc9b7a9d",
      "range": {
        "startLine": 246,
        "startChar": 8,
        "endLine": 246,
        "endChar": 13
      },
      "revId": "dddf012d3d85ecc4bf8b280155a23f42515e8b01",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c10bf74d_9e86f558",
        "filename": "modules/video_coding/codecs/h264/h264_encoder_impl.cc",
        "patchSetId": 6
      },
      "lineNbr": 547,
      "author": {
        "id": 5825
      },
      "writtenOn": "2018-10-25T09:09:27Z",
      "side": 1,
      "message": "It seems that this logic assumes that encoder always uses single reference. By default it is up to encoder to decide how many references to use:\nhttps://github.com/cisco/openh264/blob/6fe15a6b82d492bebe388c55b7ee5131208e7334/codec/encoder/core/inc/param_svc.h#L135\nhttps://github.com/cisco/openh264/blob/1759811ee75388a33845e93cc652dcd1b82848b6/codec/api/svc/codec_app_def.h#L59\n\nShould we explicitly configure the encoder to use single reference?",
      "range": {
        "startLine": 547,
        "startChar": 42,
        "endLine": 547,
        "endChar": 57
      },
      "revId": "dddf012d3d85ecc4bf8b280155a23f42515e8b01",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2a5dd179_4ea1e85e",
        "filename": "modules/video_coding/codecs/h264/h264_encoder_impl.cc",
        "patchSetId": 6
      },
      "lineNbr": 550,
      "author": {
        "id": 5825
      },
      "writtenOn": "2018-10-25T09:09:27Z",
      "side": 1,
      "message": "frame tid in case of 3 temporal layers:\n0 3 2 3 1 3 2(!) 3\nbase_layer_sync will be true for the second tl2 frame. but it is predicted from tl1, not tl0.",
      "range": {
        "startLine": 547,
        "startChar": 8,
        "endLine": 550,
        "endChar": 48
      },
      "revId": "dddf012d3d85ecc4bf8b280155a23f42515e8b01",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "80db81e3_bf7031b5",
        "filename": "modules/video_coding/codecs/h264/h264_encoder_impl.cc",
        "patchSetId": 6
      },
      "lineNbr": 550,
      "author": {
        "id": 5825
      },
      "writtenOn": "2018-10-31T09:52:46Z",
      "side": 1,
      "message": "not 3 but 4 temporal layers. sorry.",
      "parentUuid": "2a5dd179_4ea1e85e",
      "range": {
        "startLine": 547,
        "startChar": 8,
        "endLine": 550,
        "endChar": 48
      },
      "revId": "dddf012d3d85ecc4bf8b280155a23f42515e8b01",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d1ce5b39_fc8170cc",
        "filename": "modules/video_coding/codecs/h264/h264_encoder_impl.h",
        "patchSetId": 6
      },
      "lineNbr": 109,
      "author": {
        "id": 5825
      },
      "writtenOn": "2018-10-25T09:09:27Z",
      "side": 1,
      "message": "tl0_pic_idx_? like in CodecSpecificInfoH264 and FrameMarking.",
      "range": {
        "startLine": 109,
        "startChar": 10,
        "endLine": 109,
        "endChar": 24
      },
      "revId": "dddf012d3d85ecc4bf8b280155a23f42515e8b01",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "621ac5bf_5da75701",
        "filename": "modules/video_coding/include/video_codec_interface.h",
        "patchSetId": 6
      },
      "lineNbr": 66,
      "author": {
        "id": 5825
      },
      "writtenOn": "2018-10-25T09:09:27Z",
      "side": 1,
      "message": "Do we need temporal_layer_count field at all? It is only used in call/rtp_payload_params.cc L85. Would it be enough to check temporal_idx there?",
      "range": {
        "startLine": 66,
        "startChar": 10,
        "endLine": 66,
        "endChar": 30
      },
      "revId": "dddf012d3d85ecc4bf8b280155a23f42515e8b01",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8941f122_99532145",
        "filename": "modules/video_coding/include/video_codec_interface.h",
        "patchSetId": 6
      },
      "lineNbr": 66,
      "author": {
        "id": 5825
      },
      "writtenOn": "2018-10-25T09:09:27Z",
      "side": 1,
      "message": "num_temporal_layers? To be consistent with H264EncoderImpl::num_temporal_layers_ and CodecSpecificInfoVP9::num_spatial_layers.",
      "range": {
        "startLine": 66,
        "startChar": 10,
        "endLine": 66,
        "endChar": 30
      },
      "revId": "dddf012d3d85ecc4bf8b280155a23f42515e8b01",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "78349c92_cf7b6d5d",
        "filename": "modules/video_coding/include/video_codec_interface.h",
        "patchSetId": 6
      },
      "lineNbr": 66,
      "author": {
        "id": 6810
      },
      "writtenOn": "2018-10-31T15:10:20Z",
      "side": 1,
      "message": "I agree that temporal_layer_count should be unnecessary. However, when testing with Chromium, there was an issue where the temporal layer id was set to zero, not 0xFF, and invalid frame marking extensions were being transmitted. So, this variable was added to guard against such interoperability errors.",
      "parentUuid": "621ac5bf_5da75701",
      "range": {
        "startLine": 66,
        "startChar": 10,
        "endLine": 66,
        "endChar": 30
      },
      "revId": "dddf012d3d85ecc4bf8b280155a23f42515e8b01",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a5d8456f_a93e8af5",
        "filename": "modules/video_coding/include/video_codec_interface.h",
        "patchSetId": 6
      },
      "lineNbr": 66,
      "author": {
        "id": 5825
      },
      "writtenOn": "2018-10-31T15:55:03Z",
      "side": 1,
      "message": "Value of temporal_idx is set by the H264 enc wrapper which sets it to 0xFF in case of single temporal layer (h264_encoder_impl.cc:535). If there is other module which sets temporal_idx !\u003d 0xFF in that case then it probably should be fixed.",
      "parentUuid": "78349c92_cf7b6d5d",
      "range": {
        "startLine": 66,
        "startChar": 10,
        "endLine": 66,
        "endChar": 30
      },
      "revId": "dddf012d3d85ecc4bf8b280155a23f42515e8b01",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    }
  ]
}