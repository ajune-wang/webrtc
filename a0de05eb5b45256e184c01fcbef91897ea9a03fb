{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "99bb0909_592eea5a",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 5234
      },
      "writtenOn": "2021-08-23T07:30:12Z",
      "side": 1,
      "message": "This needs review from objc owners. Change looks reasonable to me; another mutex is somewhat undesirable, but config logic should not be performance critical. \n\nThe mutex can be avoided if we\u0027re willing to accept a data race in the error case, like in this related code: https://webrtc-review.googlesource.com/c/src/+/226328/8/rtc_base/synchronization/mutex_pthread.h",
      "revId": "a0de05eb5b45256e184c01fcbef91897ea9a03fb",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0d5bd5cd_74a0fdaa",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 9405
      },
      "writtenOn": "2021-08-23T08:10:36Z",
      "side": 1,
      "message": "Since this is code for configuration, I try to avoid race conditions or other undefined behavior whenever possible.\n\nInstead of introducing another mutex, it is possible to replace it with atomics.\npthread_from_mach_thread_np [1] can get (arbitrary) thread id as uint64_t.\nHowever, it has its own pitfalls (using undocumented behavior). See [2] for details.\n\n[1] https://www.manpagez.com/man/3/pthread_threadid_np/\n[2] https://webrtc-review.googlesource.com/c/src/+/229780",
      "parentUuid": "99bb0909_592eea5a",
      "revId": "a0de05eb5b45256e184c01fcbef91897ea9a03fb",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b93a0c8d_3bd5bf42",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 5234
      },
      "writtenOn": "2021-08-23T08:22:30Z",
      "side": 1,
      "message": "As you note, one problem with pthreads, is that the spec doesn\u0027t define any magic value of pthread_t to represent \"no thread\" (and pthread_t isn\u0027t even required to be an arithmetic type), so a separate bool is needed to represent set/unset in a portable way.\n\nBut since this is code specific iOS (and Mac OS?), it doesn\u0027t need to be portable to an arbitrary pthreads implementation.\n\nHmm, maybe another approach would be to have a thread local variable, set to true in the thread that locks the mutex, and false in all others? Wouldn\u0027t need any synchronization, since each instance of the variable is accessible only to its corresponding thread. (Not sure if it\u0027s a good idea with thread local member variables, though).",
      "parentUuid": "0d5bd5cd_74a0fdaa",
      "revId": "a0de05eb5b45256e184c01fcbef91897ea9a03fb",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5bf028d0_5fa70bd5",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 9405
      },
      "writtenOn": "2021-08-23T09:01:44Z",
      "side": 1,
      "message": "Using a thread local variable seems reasonable for me.\nAccording to the Google C++ style guide, thread_local variables are effectively global variables.\nHowever, since RTCAudioSession is already a singleton object, there is no problem at all.\n\nThere was a typo in my previous reply. pthread_threadid_np, not a pthread_from_mach_thread_np.",
      "parentUuid": "b93a0c8d_3bd5bf42",
      "revId": "a0de05eb5b45256e184c01fcbef91897ea9a03fb",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3c75dd1a_cd5e6fb4",
        "filename": "sdk/objc/components/audio/RTCAudioSession.mm",
        "patchSetId": 4
      },
      "lineNbr": 33,
      "author": {
        "id": 5234
      },
      "writtenOn": "2021-08-23T07:30:12Z",
      "side": 1,
      "message": "I don\u0027t think ThreadChecker is a great name for this (there used to be an rtc::ThreadChecker, now replaced with webrtc::SequenceChecker, and that does something different).",
      "range": {
        "startLine": 33,
        "startChar": 19,
        "endLine": 33,
        "endChar": 32
      },
      "revId": "a0de05eb5b45256e184c01fcbef91897ea9a03fb",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    }
  ]
}