{
  "comments": [
    {
      "key": {
        "uuid": "92c73352_d3f775e2",
        "filename": "audio/audio_send_stream_unittest.cc",
        "patchSetId": 14
      },
      "lineNbr": 545,
      "author": {
        "id": 5234
      },
      "writtenOn": "2019-01-23T09:08:39Z",
      "side": 1,
      "message": "I wonder if this could be tested using a mock encoder and an expectation for the call to OnReceivedOverhead? Instead of having this test only method. If you do, you could also delete the GetPerPacketOverheadBytes method and inline the addition at the only remaining call site.",
      "range": {
        "startLine": 544,
        "startChar": 0,
        "endLine": 545,
        "endChar": 62
      },
      "revId": "7d724f61fbd9080692a0c3a95949253390b42c3b",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "57449dc0_5e5ef4ac",
        "filename": "audio/audio_send_stream_unittest.cc",
        "patchSetId": 14
      },
      "lineNbr": 545,
      "author": {
        "id": 7565
      },
      "writtenOn": "2019-01-23T13:47:04Z",
      "side": 1,
      "message": "Could be done, although I do not like that ANA is inside Encoder and things like RTT, Overhead, etc are set on Encoder. It would make more sense to mock ANA and verify these things on ANAm, but I am not sure that it\u0027s easy in current implementation.",
      "parentUuid": "92c73352_d3f775e2",
      "range": {
        "startLine": 544,
        "startChar": 0,
        "endLine": 545,
        "endChar": 62
      },
      "revId": "7d724f61fbd9080692a0c3a95949253390b42c3b",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "52b0f9bf_19ccba58",
        "filename": "audio/audio_send_stream_unittest.cc",
        "patchSetId": 14
      },
      "lineNbr": 545,
      "author": {
        "id": 7565
      },
      "writtenOn": "2019-01-23T23:17:59Z",
      "side": 1,
      "message": "Looked at it again, it\u0027s doable in the current test frame, but it will somewhat complicate test code. I would rather not do it now if we want to continue refactorings (ie moving ANA out of encoder).",
      "parentUuid": "57449dc0_5e5ef4ac",
      "range": {
        "startLine": 544,
        "startChar": 0,
        "endLine": 545,
        "endChar": 62
      },
      "revId": "7d724f61fbd9080692a0c3a95949253390b42c3b",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1f8ca172_4c2d3fdd",
        "filename": "audio/audio_send_stream_unittest.cc",
        "patchSetId": 14
      },
      "lineNbr": 545,
      "author": {
        "id": 5234
      },
      "writtenOn": "2019-01-24T08:49:57Z",
      "side": 1,
      "message": "If owners are happy, I won\u0027t insist.",
      "parentUuid": "52b0f9bf_19ccba58",
      "range": {
        "startLine": 544,
        "startChar": 0,
        "endLine": 545,
        "endChar": 62
      },
      "revId": "7d724f61fbd9080692a0c3a95949253390b42c3b",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "05b1c5e7_cb8833e4",
        "filename": "audio/channel_send.cc",
        "patchSetId": 14
      },
      "lineNbr": 297,
      "author": {
        "id": 5077
      },
      "writtenOn": "2019-01-28T16:08:48Z",
      "side": 1,
      "message": "I don\u0027t think it is warranted to store the config in the class to be able to DCHECK and overhead_observer_ in ::Init()",
      "revId": "7d724f61fbd9080692a0c3a95949253390b42c3b",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "47319536_8f2fe8d3",
        "filename": "audio/channel_send.cc",
        "patchSetId": 14
      },
      "lineNbr": 297,
      "author": {
        "id": 7565
      },
      "writtenOn": "2019-01-28T20:57:22Z",
      "side": 1,
      "message": "The main reason to store configuration and separate ctor from Init was to avoid circular dependency -- Init can call back observer right away on the same thread and with current implementation it can happen before AudioSendStream completes initialization. \n\nI do not think it\u0027s too bad, but will take another look -- it maybe possible to avoid Init if we change how ChannelSent is initialized.",
      "parentUuid": "05b1c5e7_cb8833e4",
      "revId": "7d724f61fbd9080692a0c3a95949253390b42c3b",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c0de9329_d8d3ae47",
        "filename": "audio/channel_send.cc",
        "patchSetId": 14
      },
      "lineNbr": 297,
      "author": {
        "id": 7565
      },
      "writtenOn": "2019-01-28T22:32:41Z",
      "side": 1,
      "message": "Yes, the problem is the second AudioSendStream constructor, which takes ChannelSend. It is used in unit tests to pass mock channel. \n\nIf you have a better solution without splitting Init() from constructor let me know. I tried splitting just setter of overhead observer, but in RTP path it did not work, because observer is passed during creation of RtpRtcp module. Maybe we can introduce setter of observer on RtpRtcp module,  but it\u0027s a bigger change.\n\nIf you can think of a better code structure, let me know -- I would be happy to change.",
      "parentUuid": "47319536_8f2fe8d3",
      "revId": "7d724f61fbd9080692a0c3a95949253390b42c3b",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3303d89e_b4debeb5",
        "filename": "audio/channel_send.cc",
        "patchSetId": 14
      },
      "lineNbr": 297,
      "author": {
        "id": 5077
      },
      "writtenOn": "2019-01-29T13:25:13Z",
      "side": 1,
      "message": "I tried this: https://webrtc-review.googlesource.com/c/src/+/120356\n\nLocal tests look good but we\u0027ll see what the trybots say - maybe there\u0027s something I\u0027ve missed.",
      "parentUuid": "c0de9329_d8d3ae47",
      "revId": "7d724f61fbd9080692a0c3a95949253390b42c3b",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3013f734_7193178e",
        "filename": "audio/channel_send.cc",
        "patchSetId": 14
      },
      "lineNbr": 297,
      "author": {
        "id": 5077
      },
      "writtenOn": "2019-01-29T14:07:01Z",
      "side": 1,
      "message": "Trybots look good too.",
      "parentUuid": "3303d89e_b4debeb5",
      "revId": "7d724f61fbd9080692a0c3a95949253390b42c3b",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6c163b35_a72b1e16",
        "filename": "audio/channel_send.cc",
        "patchSetId": 14
      },
      "lineNbr": 297,
      "author": {
        "id": 7565
      },
      "writtenOn": "2019-01-29T19:16:04Z",
      "side": 1,
      "message": "Yes this works if we observer callback is never called from constructor. You fixed it by reading current overhead in stream instead of channel.\n\nI did not go this path initially because:\n\n1) AudioSendStream currently does not have any logic / difference between Media Transport and RTP and it would be great to keep it this way. The getter in AudioSendStream looks a bit out of place.\n\n2) We will most likely change MediaTransport to have callback for overhead instead of getter (various reasons, to be more consistent with RTP, other notifications and because in the future overhead may change dynamically).\n\n3) Is there a guarantee that RTP will not call overhead observer from constructor? Unless there is explicit requirement in the interface, it may be better not to make assumptions?\n\nBetween having Init() and 1/2/3 I am not sure.\n\nAlternative solution\n--------------------\n\nI think the cleaner solution without Init() and without 1/2/3 would be to have ChannelSend::SetOverheadObserver, but it will require propagation of the setter to RtpRtcp module.\n\n What do you think?",
      "parentUuid": "3013f734_7193178e",
      "revId": "7d724f61fbd9080692a0c3a95949253390b42c3b",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ab4491ae_99d440aa",
        "filename": "audio/channel_send.cc",
        "patchSetId": 14
      },
      "lineNbr": 297,
      "author": {
        "id": 5077
      },
      "writtenOn": "2019-01-29T22:26:07Z",
      "side": 1,
      "message": "I see your reasoning.\n\nChannelSend is kind of a relic in my view - the functionality should to some degree be moved into AudioSendStream, except that\na) the transport layer stuff should be pulled out so AudioSendStream is transport agnostic\nb) audio coding module should be removed too - it doesn\u0027t add much these days except mixing up send/receive in one object\n\nRegarding 1/2/3:\n\n1) As an interim solution, I think that is less of a mess than having Init().\n2) How can you make it a callback? We need the overhead for new streams created. Will MediaTransport call back as soon as a listener is added? In general I\u0027d prefer less callbacks since they make modules more tightly coupled.\n3) Good point. If RtpRtcp makes the call from a different thread the critsect needs to be taken in the ctor as well.\n\nThe cleaner solution has the problem of introducing state mutation in RtpRtcp.",
      "parentUuid": "6c163b35_a72b1e16",
      "revId": "7d724f61fbd9080692a0c3a95949253390b42c3b",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a93e5ab9_fb5da390",
        "filename": "audio/channel_send.cc",
        "patchSetId": 14
      },
      "lineNbr": 297,
      "author": {
        "id": 7565
      },
      "writtenOn": "2019-01-30T01:35:12Z",
      "side": 1,
      "message": "OK, went with the simpler version suggested by Fredrik for the time being. I agree that between having Init() and out-of-place use of media_transport, the latter is probably less of a mess.\n\n- Added TODO to unify RTP and Media Transport approaches to audio overhead (i.e. both callbacks or both getters). We will have to do it anyway for RTP Media Transport implementation and it will improve this fix further.\n\n- Verified that RTP overhead is reported on packet sent, so we will not get observer callback during constructor (if we did we would probably crash anyway because at this time AudioSendStream is not fully initialized Channel is created inside AudioSendStream initializer list).\n\nThanks a lot for discussion and PTAL.",
      "parentUuid": "ab4491ae_99d440aa",
      "revId": "7d724f61fbd9080692a0c3a95949253390b42c3b",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a32d349d_c0b5966d",
        "filename": "audio/channel_send.cc",
        "patchSetId": 14
      },
      "lineNbr": 663,
      "author": {
        "id": 5077
      },
      "writtenOn": "2019-01-28T16:08:48Z",
      "side": 1,
      "message": "It doesn\u0027t look like we need to store this in the class if we get rid of Init()",
      "revId": "7d724f61fbd9080692a0c3a95949253390b42c3b",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8a89e523_44dba47a",
        "filename": "audio/channel_send.cc",
        "patchSetId": 14
      },
      "lineNbr": 663,
      "author": {
        "id": 7565
      },
      "writtenOn": "2019-01-28T20:58:15Z",
      "side": 1,
      "message": "replied in previous comment",
      "parentUuid": "a32d349d_c0b5966d",
      "revId": "7d724f61fbd9080692a0c3a95949253390b42c3b",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6fff263d_a3ddaff2",
        "filename": "audio/channel_send.cc",
        "patchSetId": 14
      },
      "lineNbr": 710,
      "author": {
        "id": 5077
      },
      "writtenOn": "2019-01-28T16:08:48Z",
      "side": 1,
      "message": "Could we do this setting up in AudioSendStream ctor instead? It looks like we then could avoid the Init() function altogether.",
      "revId": "7d724f61fbd9080692a0c3a95949253390b42c3b",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bd24d962_c75867a5",
        "filename": "audio/channel_send.cc",
        "patchSetId": 14
      },
      "lineNbr": 710,
      "author": {
        "id": 7565
      },
      "writtenOn": "2019-01-28T20:58:15Z",
      "side": 1,
      "message": "Replied in first comment",
      "parentUuid": "6fff263d_a3ddaff2",
      "revId": "7d724f61fbd9080692a0c3a95949253390b42c3b",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "26545061_b8be7e36",
        "filename": "audio/channel_send.cc",
        "patchSetId": 14
      },
      "lineNbr": 713,
      "author": {
        "id": 5077
      },
      "writtenOn": "2019-01-28T16:08:48Z",
      "side": 1,
      "message": "If we need to keep them, they should be DCHECK_EQ",
      "revId": "7d724f61fbd9080692a0c3a95949253390b42c3b",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a2ec7198_0d906eaa",
        "filename": "audio/channel_send.cc",
        "patchSetId": 14
      },
      "lineNbr": 713,
      "author": {
        "id": 7565
      },
      "writtenOn": "2019-01-28T22:32:41Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "26545061_b8be7e36",
      "revId": "7d724f61fbd9080692a0c3a95949253390b42c3b",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    }
  ]
}