{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "42e3bce8_414285b6",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 5142
      },
      "writtenOn": "2023-07-13T07:50:52Z",
      "side": 1,
      "message": "First round - looking good, mostly just want to remove an assumption about 0-th encoding being special if possible",
      "revId": "d097e73a2cab700d6ab8259ee7b4ee86fce8d194",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7c45c389_61c49237",
        "filename": "media/base/media_engine.cc",
        "patchSetId": 1
      },
      "lineNbr": 195,
      "author": {
        "id": 5142
      },
      "writtenOn": "2023-07-13T07:50:52Z",
      "side": 1,
      "message": "I think we should ignore `codec` if the encoding is inactive.\n\nI\u0027ve seen real-world uses of setParameters where the app starts by clearing all encoding values and then populates the desired values.\n\nSo it\u0027s easy to imagine that an app that doesn\u0027t use an encoding leaves it with default values cleared, for example {active + vp9, inactive + no codec specified} and that should work just as well as {active + vp9, inactive + vp9}.\n\nI think I saw something similar to this regarding scaleResolutionDownBy and that allowing it to be undefined in the inactive case helped avoid exceptions for existing use cases.",
      "revId": "d097e73a2cab700d6ab8259ee7b4ee86fce8d194",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6da27ce0_cacad3e7",
        "filename": "media/base/media_engine.cc",
        "patchSetId": 1
      },
      "lineNbr": 195,
      "author": {
        "id": 7036
      },
      "writtenOn": "2023-07-14T15:21:19Z",
      "side": 1,
      "message": "I disagree as that would make code otherwise a quite a bit more complicated in other places. With the current implementation, it will reject if all layers (active or inactive) have different values as we don\u0027t support mixed-codec simulcast.\n\nOne of the main offender for this complexity is having to support both PlanB and UP with the same code and thus sharing the settings vs settings local to a transceiver which is easier to reason about. I hope that later cleanups will remove the channel classes and merge them into the transceivers (see webrtc:13931) which will make this probably easier to support. Obviously, since we don\u0027t have transceivers in PlanB, this can\u0027t happen until it\u0027s fully removed.\n\nWe also have issues with the notion that a sender has a send_codec_, which is true at the moment but won\u0027t work when we work on mixed-codec simulcast and need to push it down to the individual streams instead of the channel.",
      "parentUuid": "7c45c389_61c49237",
      "revId": "d097e73a2cab700d6ab8259ee7b4ee86fce8d194",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "16f27542_a01535db",
        "filename": "media/base/media_engine.cc",
        "patchSetId": 1
      },
      "lineNbr": 195,
      "author": {
        "id": 5142
      },
      "writtenOn": "2023-07-14T20:17:30Z",
      "side": 1,
      "message": "I still think \"not specified\" should be a valid parameter value for an inactive encoding and this is already the case for scalabilityMode and scaleResolutionDownBy. I\u0027ve seen real-world examples where the inactive encodings are cleared so I think we should be consistent and allow codec to also be cleared.\n\nI.e. I don\u0027t think this should fail saying codecs are different because this is not mixed codecs, this is just vp9:\n```\nencodings[0] \u003d {active, codec:vp9}\nencodings[1] \u003d {inactive, codec:nullopt}\n```\n\nI think you\u0027re free to modify this to {vp9,vp9} before passing it down to lower layers if you think that reduces complexity, I just don\u0027t want the API to reject.",
      "parentUuid": "6da27ce0_cacad3e7",
      "revId": "d097e73a2cab700d6ab8259ee7b4ee86fce8d194",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3d94d4dc_5766151d",
        "filename": "media/base/media_engine.cc",
        "patchSetId": 1
      },
      "lineNbr": 195,
      "author": {
        "id": 5142
      },
      "writtenOn": "2023-07-14T20:20:11Z",
      "side": 1,
      "message": "To clarify I\u0027m not talking about supporting mixed codecs I\u0027m only talking about not rejecting an inactive encoding when all active encodings are in fact using the same codec. Supporting the use case of not specifying anything on the inactive encodings.",
      "parentUuid": "16f27542_a01535db",
      "revId": "d097e73a2cab700d6ab8259ee7b4ee86fce8d194",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c8d85025_05d8f92c",
        "filename": "media/base/media_engine.cc",
        "patchSetId": 1
      },
      "lineNbr": 195,
      "author": {
        "id": 7036
      },
      "writtenOn": "2023-07-19T09:44:32Z",
      "side": 1,
      "message": "You would end up in a situation where just trying to turn on an inactive layer requires the codec to be also set, which also breaks old assumptions (to turn a layer on, just flip the active flag).\nIt\u0027s a tradeoff, and I think it\u0027s just a lot easier if when introducing the new feature, we require it to be on all layers than not.",
      "parentUuid": "3d94d4dc_5766151d",
      "revId": "d097e73a2cab700d6ab8259ee7b4ee86fce8d194",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7f235a6d_0acacc9f",
        "filename": "media/base/media_engine.cc",
        "patchSetId": 1
      },
      "lineNbr": 195,
      "author": {
        "id": 5142
      },
      "writtenOn": "2023-07-24T08:21:05Z",
      "side": 1,
      "message": "Real world use cases of the API uses \"inactive\" with no other stuff set, and then for each active encoding it has all the desired parameters set. You already require codec to be set on all active layers, all I\u0027m asking is that you\u0027re not required to set it on the inactive layer.\n\nIt\u0027s a couple of lines of code modified, and I prefer that happening in the API than in the application layer.",
      "parentUuid": "c8d85025_05d8f92c",
      "revId": "d097e73a2cab700d6ab8259ee7b4ee86fce8d194",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ff7e8a32_f59bf937",
        "filename": "media/base/media_engine.cc",
        "patchSetId": 1
      },
      "lineNbr": 195,
      "author": {
        "id": 7036
      },
      "writtenOn": "2023-08-17T15:25:10Z",
      "side": 1,
      "message": "There is no precedent for not enforcing parameter validation when an encoding is inactive. Real world does not use the API yet, so it\u0027s not a breaking change, and if they want to use it, they\u0027ll have to adapt, it\u0027s ok.\n\nThere\u0027s also real code that is enabling layers by just changing the active flag. This code deserves to be valid too if they decide to use the new API, and it would trip if you don\u0027t require the codec parameter on all layers in Chrome.",
      "parentUuid": "7f235a6d_0acacc9f",
      "revId": "d097e73a2cab700d6ab8259ee7b4ee86fce8d194",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "63087a76_aa10256a",
        "filename": "media/base/media_engine.cc",
        "patchSetId": 1
      },
      "lineNbr": 195,
      "author": {
        "id": 5142
      },
      "writtenOn": "2023-08-17T18:12:44Z",
      "side": 1,
      "message": "I understand that this issue would be easy to work around from the app calling site (so I won\u0027t continue arguing after this message I promise), but isn\u0027t supporting my preference just ~10 lines of code inside `SetParameters`?\n\nJust change undefined of the inactive encodings to the codec value of the active encoding(s). The rest of the pipeline does not need to do anything differently.\n\n\u003e There is no precedent for not enforcing parameter validation when an encoding is inactive\n\nYes there is. `{scalabilityMode:\u0027L3T3_KEY\u0027, inactive, inactive}` does _not_ throw with a bogus message about \"mixed scalability modes\"[1]. And the same logic applies for `scaleResolutionDownBy` in the way we use it to decide if standard or legacy API is set[2] - you don\u0027t need to specify scales for inactive encodings to opt-in to standard API.\n\nThere\u0027s no reason why `{codec:\u0027VP8\u0027, inactive, inactive}` should throw either.\n\nI\u0027m perfectly happy with `{active+codec:VP8\u0027, inactive+\u0027VP9\u0027}` throwing but I don\u0027t think `codec:undefined` should be treated as \"not the same codec as the active encoding\".\n\n[1] https://orphis.github.io/webrtc-sandbox/simulcast-playground.html?resolution\u003dHD\u0026captureFramerate\u003d30\u0026codec\u003dVP9\u0026contentHint\u003d\u0026encodings.0.rid\u003d\u0026encodings.0.active\u003dtrue\u0026encodings.0.priority\u003dlow\u0026encodings.0.maxBitrate\u003d\u0026encodings.0.scaleResolutionDownBy\u003d1\u0026encodings.0.maxFramerate\u003d\u0026encodings.0.scalabilityMode\u003dL3T3_KEY\u0026encodings.1.rid\u003d1\u0026encodings.1.active\u003d\u0026encodings.1.priority\u003dlow\u0026encodings.1.maxBitrate\u003d\u0026encodings.1.scaleResolutionDownBy\u003d\u0026encodings.1.maxFramerate\u003d\u0026encodings.1.scalabilityMode\u003d\u0026encodings.2.rid\u003d2\u0026encodings.2.active\u003d\u0026encodings.2.priority\u003dlow\u0026encodings.2.maxBitrate\u003d\u0026encodings.2.scaleResolutionDownBy\u003d\u0026encodings.2.maxFramerate\u003d\u0026encodings.2.scalabilityMode\u003d\u0026degradationPreference\u003d\u0026splitLayer\u003dsplit\n\n[2] https://groups.google.com/g/discuss-webrtc/c/-QQ3pxrl-fw\n\n\u003e Real world does not use the API yet\n\nNot `codec` specifically but Google Meet does this for all other parameters and it\u0027s probably not the only app: `{encoding:XYZ, inactive, inactive}`.",
      "parentUuid": "ff7e8a32_f59bf937",
      "revId": "d097e73a2cab700d6ab8259ee7b4ee86fce8d194",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ba52298e_9c734ff8",
        "filename": "media/base/media_engine.cc",
        "patchSetId": 1
      },
      "lineNbr": 195,
      "author": {
        "id": 5634
      },
      "writtenOn": "2023-08-17T22:37:48Z",
      "side": 1,
      "message": "My worry about this is the case where you activate the second encoding layer.\nif you do a getParameters(), encodings[1] \u003d active, setParameters(), and the error message that comes back deals with codecs not matching, this is going to be hugely confusing.\n\nIf the encoding propagates to the inactive layers, so that {codec: vp8, inactive, inactive} comes back as {{codec: vp8}, {codec: vp8, inactive}, {codec:vp8, inactive}}, I\u0027m not so worried from an usability perspective.\n\nBut getting a codec error when you are \"only\" flipping the active flag worries me.",
      "parentUuid": "63087a76_aa10256a",
      "revId": "d097e73a2cab700d6ab8259ee7b4ee86fce8d194",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4beb48a6_79ef3ab5",
        "filename": "media/base/media_engine.cc",
        "patchSetId": 1
      },
      "lineNbr": 195,
      "author": {
        "id": 5142
      },
      "writtenOn": "2023-08-18T06:23:37Z",
      "side": 1,
      "message": "My suggestion of tweaking the input parameters as the first step of setParameters means that when you getParameters the codec flag on the inactive encoding would come back as vp8, since the code would have behaved identically to as-if you setParamaters with codec set to vp8 on all parameters. So just flipping the active flag would work.\n\nYou could argue that setting {active+vp8,inactive+null} and getting back {active+vp8,inactive+vp8} is surprising, and that seems like a valid counter-argument to my preference, but I can\u0027t think of any use case where this would cause problems, since if you wanted to change codec you would need to specify it on all active encodings anyway.\n\nSo what is least surprising do you think?\n1. {active+vp8, inactive} throwing, or\n2. {active+vp8, inactive} not throwing but coming back {active+vp8, inactive+vp8}\n\nBoth have some level of surprise",
      "parentUuid": "ba52298e_9c734ff8",
      "revId": "d097e73a2cab700d6ab8259ee7b4ee86fce8d194",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2f7b534d_a3543d9e",
        "filename": "media/base/media_engine.cc",
        "patchSetId": 1
      },
      "lineNbr": 195,
      "author": {
        "id": 5142
      },
      "writtenOn": "2023-08-18T07:04:49Z",
      "side": 1,
      "message": "No I\u0027m wrong, if we did 2) then things would break in the event of \"only changing codec of the first layer to h264\" because this would result in {active+h264,inactive+vp8} which would be wrong.\n\nSo I only see two option: throwing (current CL), or supporting null as \"no preference\" in a way where getParameters still returns null.",
      "parentUuid": "4beb48a6_79ef3ab5",
      "revId": "d097e73a2cab700d6ab8259ee7b4ee86fce8d194",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2d070d66_b28a4dcf",
        "filename": "media/base/media_engine.cc",
        "patchSetId": 1
      },
      "lineNbr": 195,
      "author": {
        "id": 5142
      },
      "writtenOn": "2023-08-18T11:02:35Z",
      "side": 1,
      "message": "I\u0027m not going to let perfect be the obstacle of progress so LGTM, but I still see value in API consistency with scalabilityMode and codec since they are so closely related. But if we want to support this we can do it in a separate CL. (And if we don\u0027t, that\u0027s not the end of the world.)",
      "parentUuid": "2f7b534d_a3543d9e",
      "revId": "d097e73a2cab700d6ab8259ee7b4ee86fce8d194",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "566d6ed9_5b925df3",
        "filename": "media/base/media_engine.cc",
        "patchSetId": 1
      },
      "lineNbr": 195,
      "author": {
        "id": 7036
      },
      "writtenOn": "2023-08-24T09:21:06Z",
      "side": 1,
      "message": "The main difference with scalabilityMode is that is it not required on each simulcast layer to use it on any, nor is scaleResolutionDownBy with our implementation.\nThat\u0027s how codec is different (for now, hopefully, we can get mixed-codec simulcast implemented).\n\nLet\u0027s revisit this later if it seems needed.",
      "parentUuid": "2d070d66_b28a4dcf",
      "revId": "d097e73a2cab700d6ab8259ee7b4ee86fce8d194",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "06532a87_fded7457",
        "filename": "media/engine/webrtc_video_engine.cc",
        "patchSetId": 1
      },
      "lineNbr": 1309,
      "author": {
        "id": 5142
      },
      "writtenOn": "2023-07-13T07:50:52Z",
      "side": 1,
      "message": "What if I want to do {inactive, inactive, active + codec:vp9}.\n\nI think we should remove any assumptions about 0-th encoding being special (and I am hoping to do the same for scaling assumptions).\n\nInstead, you can lookup the index of the first `active\u003dtrue` encoding which has a `codec` value and refer to that instead of 0.",
      "revId": "d097e73a2cab700d6ab8259ee7b4ee86fce8d194",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9dcf54fa_57e0c836",
        "filename": "media/engine/webrtc_video_engine.cc",
        "patchSetId": 1
      },
      "lineNbr": 1309,
      "author": {
        "id": 5142
      },
      "writtenOn": "2023-07-13T07:53:06Z",
      "side": 1,
      "message": "(not scaling, i meant scalability mode)",
      "parentUuid": "06532a87_fded7457",
      "revId": "d097e73a2cab700d6ab8259ee7b4ee86fce8d194",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e30f661b_3fb5c08c",
        "filename": "media/engine/webrtc_video_engine.cc",
        "patchSetId": 1
      },
      "lineNbr": 1309,
      "author": {
        "id": 7036
      },
      "writtenOn": "2023-07-14T15:21:19Z",
      "side": 1,
      "message": "I don\u0027t think we should support inactive layers without a codec value.",
      "parentUuid": "9dcf54fa_57e0c836",
      "revId": "d097e73a2cab700d6ab8259ee7b4ee86fce8d194",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6ea4feae_a1f7e019",
        "filename": "media/engine/webrtc_voice_engine.cc",
        "patchSetId": 1
      },
      "lineNbr": 1279,
      "author": {
        "id": 5142
      },
      "writtenOn": "2023-07-13T07:50:52Z",
      "side": 1,
      "message": "+1!! :D Let Plan B rot!",
      "revId": "d097e73a2cab700d6ab8259ee7b4ee86fce8d194",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f92bc8a5_2473e6cd",
        "filename": "media/engine/webrtc_voice_engine.cc",
        "patchSetId": 1
      },
      "lineNbr": 1281,
      "author": {
        "id": 5142
      },
      "writtenOn": "2023-07-13T07:50:52Z",
      "side": 1,
      "message": "Here assuming 0-th encoding is OK because audio is only one encoding",
      "revId": "d097e73a2cab700d6ab8259ee7b4ee86fce8d194",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3c8873f4_0ad459cd",
        "filename": "media/engine/webrtc_voice_engine.cc",
        "patchSetId": 1
      },
      "lineNbr": 1281,
      "author": {
        "id": 7036
      },
      "writtenOn": "2023-07-14T15:21:19Z",
      "side": 1,
      "message": "Correct!",
      "parentUuid": "f92bc8a5_2473e6cd",
      "revId": "d097e73a2cab700d6ab8259ee7b4ee86fce8d194",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "041eed3c_06125457",
        "filename": "pc/peer_connection_encodings_integrationtest.cc",
        "patchSetId": 1
      },
      "lineNbr": 950,
      "author": {
        "id": 5142
      },
      "writtenOn": "2023-07-13T07:50:52Z",
      "side": 1,
      "message": "Should we change TEST_F to TEST_P as to get these tests exercised for all codecs?\n(See existing TEST_P for iterating all video codecs in this file)",
      "revId": "d097e73a2cab700d6ab8259ee7b4ee86fce8d194",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a8398917_222083af",
        "filename": "pc/peer_connection_encodings_integrationtest.cc",
        "patchSetId": 1
      },
      "lineNbr": 950,
      "author": {
        "id": 7036
      },
      "writtenOn": "2023-07-14T15:21:19Z",
      "side": 1,
      "message": "I don\u0027t think there\u0027s a lot of value in doing that. If codec switching was an issue, I would assume the utility code to achieve it that I\u0027m using would already have similar tests covering it.",
      "parentUuid": "041eed3c_06125457",
      "revId": "d097e73a2cab700d6ab8259ee7b4ee86fce8d194",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b9bb5bbf_cc89f39c",
        "filename": "pc/peer_connection_encodings_integrationtest.cc",
        "patchSetId": 1
      },
      "lineNbr": 1572,
      "author": {
        "id": 5142
      },
      "writtenOn": "2023-07-13T07:50:52Z",
      "side": 1,
      "message": "What happens if I start in L3T3_KEY VP9 and then I change to vp8? Let\u0027s have a test",
      "revId": "d097e73a2cab700d6ab8259ee7b4ee86fce8d194",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "98aa8095_6f2a77a0",
        "filename": "pc/peer_connection_encodings_integrationtest.cc",
        "patchSetId": 1
      },
      "lineNbr": 1572,
      "author": {
        "id": 7036
      },
      "writtenOn": "2023-07-14T15:21:19Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b9bb5bbf_cc89f39c",
      "revId": "d097e73a2cab700d6ab8259ee7b4ee86fce8d194",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    }
  ]
}