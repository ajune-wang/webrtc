{
  "comments": [
    {
      "key": {
        "uuid": "626bd40e_cc1987b4",
        "filename": "style-guide.md",
        "patchSetId": 1
      },
      "lineNbr": 101,
      "author": {
        "id": 5090
      },
      "writtenOn": "2017-10-10T08:01:59Z",
      "side": 1,
      "message": "Isn\u0027t it better to talk about headers instead of files? Something like:\n\nHeader files that belong to a build target can be listed in either\n`public` or `sources`; the former makes the files available to other\nbuild targets, while the latter makes them private to the current\nbuild target.",
      "range": {
        "startLine": 98,
        "startChar": 0,
        "endLine": 101,
        "endChar": 13
      },
      "revId": "f4e50923765a9c4254bbd42d5602e7b7377528e1",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c01adb5e_40408ef3",
        "filename": "style-guide.md",
        "patchSetId": 1
      },
      "lineNbr": 101,
      "author": {
        "id": 5126
      },
      "writtenOn": "2017-10-10T11:21:03Z",
      "side": 1,
      "message": "Then we\u0027d have to mention the .cc files separately.",
      "parentUuid": "626bd40e_cc1987b4",
      "range": {
        "startLine": 98,
        "startChar": 0,
        "endLine": 101,
        "endChar": 13
      },
      "revId": "f4e50923765a9c4254bbd42d5602e7b7377528e1",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1209d20e_8266e734",
        "filename": "style-guide.md",
        "patchSetId": 1
      },
      "lineNbr": 114,
      "author": {
        "id": 5019
      },
      "writtenOn": "2017-10-09T07:57:44Z",
      "side": 1,
      "message": "When public would be empty? rtc_test and rtc_executable that shouldn\u0027t be depend on anyway.\nFor source_set/library public unlikely will ever be empty.",
      "range": {
        "startLine": 114,
        "startChar": 68,
        "endLine": 114,
        "endChar": 0
      },
      "revId": "f4e50923765a9c4254bbd42d5602e7b7377528e1",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "248c155d_798f477d",
        "filename": "style-guide.md",
        "patchSetId": 1
      },
      "lineNbr": 114,
      "author": {
        "id": 5126
      },
      "writtenOn": "2017-10-09T08:02:22Z",
      "side": 1,
      "message": "Yes, empty only for test and executable, I\u0027d say. And not really useful there, except to avoid having to make the style rule more complex by having exceptions.",
      "parentUuid": "1209d20e_8266e734",
      "range": {
        "startLine": 114,
        "startChar": 68,
        "endLine": 114,
        "endChar": 0
      },
      "revId": "f4e50923765a9c4254bbd42d5602e7b7377528e1",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2ca62ce6_aa66e3c0",
        "filename": "style-guide.md",
        "patchSetId": 1
      },
      "lineNbr": 114,
      "author": {
        "id": 5090
      },
      "writtenOn": "2017-10-10T08:01:59Z",
      "side": 1,
      "message": "Since we use GN templates (we don\u0027t directly use executable but rtc_executable, see https://cs.chromium.org/chromium/src/third_party/webrtc/webrtc.gni?l\u003d304\u0026rcl\u003d92ea95e34af5966555903026f45164afbd7e2088) maybe we can add a default or (probably better) add a check that for some targets types public is [].",
      "parentUuid": "248c155d_798f477d",
      "range": {
        "startLine": 114,
        "startChar": 68,
        "endLine": 114,
        "endChar": 0
      },
      "revId": "f4e50923765a9c4254bbd42d5602e7b7377528e1",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f7433f91_072cab15",
        "filename": "style-guide.md",
        "patchSetId": 1
      },
      "lineNbr": 114,
      "author": {
        "id": 5126
      },
      "writtenOn": "2017-10-10T11:21:03Z",
      "side": 1,
      "message": "Could we set public to [] by default, so that we\u0027d never trigger the special case? And check that public contains no .cc files?",
      "parentUuid": "2ca62ce6_aa66e3c0",
      "range": {
        "startLine": 114,
        "startChar": 68,
        "endLine": 114,
        "endChar": 0
      },
      "revId": "f4e50923765a9c4254bbd42d5602e7b7377528e1",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "58e5c4ad_f3774ca4",
        "filename": "style-guide.md",
        "patchSetId": 1
      },
      "lineNbr": 131,
      "author": {
        "id": 5234
      },
      "writtenOn": "2017-10-09T07:17:36Z",
      "side": 1,
      "message": "How to deal with unit tests involving foo_internal.h? I imagine that\u0027s a common and desired thing to have.",
      "range": {
        "startLine": 131,
        "startChar": 0,
        "endLine": 131,
        "endChar": 70
      },
      "revId": "f4e50923765a9c4254bbd42d5602e7b7377528e1",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7c7341a0_ca9d42ed",
        "filename": "style-guide.md",
        "patchSetId": 1
      },
      "lineNbr": 131,
      "author": {
        "id": 5019
      },
      "writtenOn": "2017-10-09T07:57:44Z",
      "side": 1,
      "message": "that might be a reason to move foo_internal into own target:\n\nrtc_source_set(\"foo_internal\") {\n  public \u003d [\"foo_internal.h\"]\n  sources \u003d [\"foo_internal.cc\"]\n  visibility \u003d [\":foo\", \":foo_internal_tests\"]\n}",
      "parentUuid": "58e5c4ad_f3774ca4",
      "range": {
        "startLine": 131,
        "startChar": 0,
        "endLine": 131,
        "endChar": 70
      },
      "revId": "f4e50923765a9c4254bbd42d5602e7b7377528e1",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "16ee16a6_df1f3de2",
        "filename": "style-guide.md",
        "patchSetId": 1
      },
      "lineNbr": 131,
      "author": {
        "id": 5126
      },
      "writtenOn": "2017-10-09T08:02:22Z",
      "side": 1,
      "message": "Hmmm... good point. I guess the answer is that they need to be in `public`, since GN doesn\u0027t have an analog to C++\u0027s friend declarations.\n\nIf you want to keep the header private badly enough (e.g. because this is an API target), you can accomplish this by having all the \"meat\"---including the unit-testees---in a separate internal target where all or most files are in `public`, and let the API target #include stuff from there.\n\nI guess the generalized point here is that since if it merits its own header file, it merits unit tests, the set of non-public headers in any target should be empty, unless the target is a test target that contains its own unit tests. And if an API target gets complex enough that we need to unit test its internal stuff, we should extract an internal target that does all the work.\n\nThis was an excellent question, which seems to demonstrate that the distinction between public and private files is not useful. :-| It could turn into a more formal limit on how much implementation we should allow in API targets, though (answer: little enough that you don\u0027t need to unit test its internals).",
      "parentUuid": "58e5c4ad_f3774ca4",
      "range": {
        "startLine": 131,
        "startChar": 0,
        "endLine": 131,
        "endChar": 70
      },
      "revId": "f4e50923765a9c4254bbd42d5602e7b7377528e1",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "79f8dfb5_9f025051",
        "filename": "style-guide.md",
        "patchSetId": 1
      },
      "lineNbr": 131,
      "author": {
        "id": 5234
      },
      "writtenOn": "2017-10-09T08:56:20Z",
      "side": 1,
      "message": "Danil\u0027s suggestion looks reasonable. And \"visibility\" is related to C++ friends. If we do it this way, then we\u0027ll have very few \"locally non-public\" header files.\n\nBut I\u0027m not sure it will work. It seems likely that the code in foo_internal will depend on things declared in foo.h, but if we let the foo_internal target depends on the foo target, that gets circular. Typically, only foo.cc but not foo.h would depend on foo_internal.h. So we could split things even more and put foo.h and foo.cc in separate targets, but that violates other gn style rules.\n\nMaybe it\u0027s best to attempt to convert a few of our existing targets first, to see what works out in practice, before trying to formulate the general rules?\n\nI would also be happy with some generally relaxed rules for tests, saying that it\u0027s ok for a test to include any private header files it needs, but that might not be kosher with gn? Or to generally accept a circular dependency between foo and foo_internal.",
      "parentUuid": "16ee16a6_df1f3de2",
      "range": {
        "startLine": 131,
        "startChar": 0,
        "endLine": 131,
        "endChar": 70
      },
      "revId": "f4e50923765a9c4254bbd42d5602e7b7377528e1",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c34200b0_c72d1c9e",
        "filename": "style-guide.md",
        "patchSetId": 1
      },
      "lineNbr": 131,
      "author": {
        "id": 5126
      },
      "writtenOn": "2017-10-09T09:27:23Z",
      "side": 1,
      "message": "No, extracting a non-public target will work---you just have to move enough stuff into it. Something like\n\n  rtc_source_set(\"foo_internal\") {\n    public \u003d [\"foo_internal.h\"]\n    sources \u003d [\"foo_internal.cc\"]\n    visibility \u003d [\":foo\", \":foo_tests\"]\n  }\n\n  rtc_source_set(\"foo\") {\n    public \u003d [\"foo.h\"]\n    sources \u003d [\"foo.cc\"]\n    deps \u003d [\":foo_internal\"]\n  }\n\n  rtc_source_set(\"foo_tests\") {\n    sources \u003d [\"foo_internal.cc\"]\n    deps \u003d [\":foo\", \":foo_internal\"]\n  }\n\nwhere foo_internal.h/.cc contains only nonpublic functions, foo.h/.cc contains only public functions, and the latter may call the former but not the other way around (which may mean that some public functions are thin wrappers around some nonpublic functions).\n\nIf there is some type that both foo and foo_internal needs to use, it has to go in a separate public target. I\u0027ve encountered exactly this situation with Opus: public functions, a large body of nonpublic functions, and a config struct that both need to use.",
      "parentUuid": "79f8dfb5_9f025051",
      "range": {
        "startLine": 131,
        "startChar": 0,
        "endLine": 131,
        "endChar": 70
      },
      "revId": "f4e50923765a9c4254bbd42d5602e7b7377528e1",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "295744dc_a6a16617",
        "filename": "style-guide.md",
        "patchSetId": 1
      },
      "lineNbr": 131,
      "author": {
        "id": 5090
      },
      "writtenOn": "2017-10-10T08:01:59Z",
      "side": 1,
      "message": "I agree with everything you said. This is a great discussion.\nDo you expect to have a lot of this internal/private stuff in our targets? If yes, this sounds like a very long task to achieve but maybe we can start to adopt the style guide for new targets and refactor old targets when they get modified.",
      "parentUuid": "c34200b0_c72d1c9e",
      "range": {
        "startLine": 131,
        "startChar": 0,
        "endLine": 131,
        "endChar": 70
      },
      "revId": "f4e50923765a9c4254bbd42d5602e7b7377528e1",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "be331bbf_7fbfa94a",
        "filename": "style-guide.md",
        "patchSetId": 1
      },
      "lineNbr": 131,
      "author": {
        "id": 5126
      },
      "writtenOn": "2017-10-10T11:21:03Z",
      "side": 1,
      "message": "As I said above, for well-behaved targets that have unit tests, all headers are going to have to be public, so I don\u0027t think we\u0027ll solve any real problem by using both `public` and `sources`.\n\nIt\u0027s kind of like with data members in C++ that can be individually public, protected, or private, yet the only two cases in widespread use are all members public and all members private.",
      "parentUuid": "295744dc_a6a16617",
      "range": {
        "startLine": 131,
        "startChar": 0,
        "endLine": 131,
        "endChar": 70
      },
      "revId": "f4e50923765a9c4254bbd42d5602e7b7377528e1",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "55aacba3_57ef4efa",
        "filename": "style-guide.md",
        "patchSetId": 1
      },
      "lineNbr": 131,
      "author": {
        "id": 5234
      },
      "writtenOn": "2018-09-07T07:59:43Z",
      "side": 1,
      "message": "\u003e No, extracting a non-public target will work---you just have to move enough stuff into it. Something like\n[...]\n\n\u003e where foo_internal.h/.cc contains only nonpublic functions, foo.h/.cc contains only public functions, and the latter may call the former but not the other way around (which may mean that some public functions are thin wrappers around some nonpublic functions).\n\u003e \n\u003e If there is some type that both foo and foo_internal needs to use, it has to go in a separate public target. I\u0027ve encountered exactly this situation with Opus: public functions, a large body of nonpublic functions, and a config struct that both need to use.\n\nCould work, but seems a bit awkward.\n\nFor example, say that the main purpose of foo.h, from an applications point of view, is to declare an interface and a few static create methods (I think it\u0027s a common pattern in our code to attach static Create methods to an otherwise abstract interface, but I might be wrong). And foo_internal.* provides some implementation of that interface.\n\nThen we\u0027d have to move the interface declaration to a separate target, and header file, say foo_interface and foo_interface.h, which both foo and foo_internal can depend on. But the implementation of the Create methods would need to depend on foo or foo_internal, so it can\u0027t be moved into the foo_interface target since that would introduce a circular dependency. So then we\u0027d either have to stop using the pattern of Create methods on an interface, or bend the rule that declaration and implementation should go in the same target. \n\nIf you\u0027re confident those things can be worked out, I\u0027m ok with aiming for a structure like\n\nfoo:          depends foo_internal, foo_interface\nfoo_internal: depends foo_interface\nfoo_tests:    depends foo, foo_internal, foo_interface\n\nIf we to it this way, the main purpose of the foo target would be to define the public surface to the foo* targets. \n\nWhen you say foo_interface should be a public target, do you mean that it should be a public dependency of foo, or that applications are expected to depend on it directly? I.e., are applications expected to only directly depend on foo, and include foo.h, or are they expected to directly include also foo_interface.h and/or directly depend on the foo_interface target?\n\nAnd it\u0027s also unclear to me which of these things can go together inside the api/ folder.",
      "parentUuid": "c34200b0_c72d1c9e",
      "range": {
        "startLine": 131,
        "startChar": 0,
        "endLine": 131,
        "endChar": 70
      },
      "revId": "f4e50923765a9c4254bbd42d5602e7b7377528e1",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b32bb098_a5cbdf0c",
        "filename": "style-guide.md",
        "patchSetId": 1
      },
      "lineNbr": 136,
      "author": {
        "id": 5234
      },
      "writtenOn": "2017-10-09T07:17:36Z",
      "side": 1,
      "message": "Does it really matter for tests? I thought we had some other rules in place which prevent non-test targets from depending on test targets, but I don\u0027t really know how gn or our rtc_*-templates work.\n\nI\u0027m afraid this is clutter which will be easy to forget and hard get get consistently used.",
      "range": {
        "startLine": 136,
        "startChar": 0,
        "endLine": 136,
        "endChar": 65
      },
      "revId": "f4e50923765a9c4254bbd42d5602e7b7377528e1",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9fdaead0_7e298235",
        "filename": "style-guide.md",
        "patchSetId": 1
      },
      "lineNbr": 136,
      "author": {
        "id": 5126
      },
      "writtenOn": "2017-10-09T08:02:22Z",
      "side": 1,
      "message": "You\u0027re thinking of the `testonly` boolean: https://chromium.googlesource.com/chromium/src/+/HEAD/tools/gn/docs/reference.md#testonly\n\nAnd no, it\u0027s not particularly useful for tests. But this is what it would look like if we applied this rule consistently.",
      "parentUuid": "b32bb098_a5cbdf0c",
      "range": {
        "startLine": 136,
        "startChar": 0,
        "endLine": 136,
        "endChar": 65
      },
      "revId": "f4e50923765a9c4254bbd42d5602e7b7377528e1",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "78303e26_c08bb444",
        "filename": "style-guide.md",
        "patchSetId": 1
      },
      "lineNbr": 136,
      "author": {
        "id": 5234
      },
      "writtenOn": "2017-10-09T08:56:20Z",
      "side": 1,
      "message": "If it has no benefits for tests, I\u0027d lean towards not applying the rule there.",
      "parentUuid": "9fdaead0_7e298235",
      "range": {
        "startLine": 136,
        "startChar": 0,
        "endLine": 136,
        "endChar": 65
      },
      "revId": "f4e50923765a9c4254bbd42d5602e7b7377528e1",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "67fba050_b3aa252c",
        "filename": "style-guide.md",
        "patchSetId": 1
      },
      "lineNbr": 136,
      "author": {
        "id": 5090
      },
      "writtenOn": "2017-10-10T08:01:59Z",
      "side": 1,
      "message": "If we decide to use public consistently I will look at the templates and maybe we can set a default for rtc_test.",
      "parentUuid": "78303e26_c08bb444",
      "range": {
        "startLine": 136,
        "startChar": 0,
        "endLine": 136,
        "endChar": 65
      },
      "revId": "f4e50923765a9c4254bbd42d5602e7b7377528e1",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "30621b79_0d566fbf",
        "filename": "style-guide.md",
        "patchSetId": 1
      },
      "lineNbr": 160,
      "author": {
        "id": 5090
      },
      "writtenOn": "2017-10-10T08:01:59Z",
      "side": 1,
      "message": "I think this will help a lot in keeping things under control. Probably even more than public vs sources (but I hope we will be able to also use public correctly).",
      "range": {
        "startLine": 159,
        "startChar": 0,
        "endLine": 160,
        "endChar": 56
      },
      "revId": "f4e50923765a9c4254bbd42d5602e7b7377528e1",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    }
  ]
}