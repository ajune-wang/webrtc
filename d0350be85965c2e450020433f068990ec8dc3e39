{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "2470502a_d6cf96b2",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 5234
      },
      "writtenOn": "2021-09-28T12:19:02Z",
      "side": 1,
      "message": "This is my intended next step. A transition plan is needed, to update downstream implementations of PacketSocketFactory.",
      "revId": "d0350be85965c2e450020433f068990ec8dc3e39",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "613110e8_99921531",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 5634
      },
      "writtenOn": "2021-09-29T12:10:32Z",
      "side": 1,
      "message": "Some comments ... let\u0027s discuss this before landing.\n",
      "revId": "d0350be85965c2e450020433f068990ec8dc3e39",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7594a0f5_bfe3e111",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 5634
      },
      "writtenOn": "2021-09-30T08:55:06Z",
      "side": 1,
      "message": "And WDYT about not having \"packet\" in AsyncListenSocket?\n",
      "revId": "d0350be85965c2e450020433f068990ec8dc3e39",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a11d5aa7_32a5e5dd",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 5234
      },
      "writtenOn": "2021-09-30T13:31:36Z",
      "side": 1,
      "message": "Makes sense, done.",
      "parentUuid": "7594a0f5_bfe3e111",
      "revId": "d0350be85965c2e450020433f068990ec8dc3e39",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "021b4426_1a948050",
        "filename": "rtc_base/async_packet_socket.h",
        "patchSetId": 3
      },
      "lineNbr": 60,
      "author": {
        "id": 5634
      },
      "writtenOn": "2021-09-29T12:10:32Z",
      "side": 1,
      "message": "Bikeshedding: This class has nothing to do with packets. Should we shorten the name to AsyncListenSocket?",
      "revId": "d0350be85965c2e450020433f068990ec8dc3e39",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a8044b64_1f0833cd",
        "filename": "rtc_base/async_packet_socket.h",
        "patchSetId": 3
      },
      "lineNbr": 60,
      "author": {
        "id": 5634
      },
      "writtenOn": "2021-09-30T13:44:40Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "021b4426_1a948050",
      "revId": "d0350be85965c2e450020433f068990ec8dc3e39",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fe1f3683_481c9133",
        "filename": "rtc_base/async_packet_socket.h",
        "patchSetId": 3
      },
      "lineNbr": 89,
      "author": {
        "id": 5234
      },
      "writtenOn": "2021-09-28T12:19:02Z",
      "side": 1,
      "message": "I wonder if this inheritance hack is a working way to transition downstream code. A different approach would be to first land a preparatory cl that makes AsyncPacketListenSocket an alias for AsyncPacketSocket, then fix downstream code to use the right name in the right places, and then land a variant of this cl that separates the two classes.",
      "range": {
        "startLine": 87,
        "startChar": 0,
        "endLine": 89,
        "endChar": 68
      },
      "revId": "d0350be85965c2e450020433f068990ec8dc3e39",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1b48dafe_c90f6b15",
        "filename": "rtc_base/async_packet_socket.h",
        "patchSetId": 3
      },
      "lineNbr": 89,
      "author": {
        "id": 5634
      },
      "writtenOn": "2021-09-29T12:10:32Z",
      "side": 1,
      "message": "I think this is a reasonable way to do it, and lets us get to where we want to be.\n\nOne possible alternative is to let AsyncPacketSocket own (rather than be) an AsyncListenSocket, and forward the calls - that would allow us to ABSL_DEPRECATE the methods that only make sense on the ListenSocket, so that we get to see the call sites that use it.\n\nAll the methods are virtual, so we can also keep the inheritance and override them in this interface in order to ABSL_DEPRECATE them, I think.",
      "parentUuid": "fe1f3683_481c9133",
      "range": {
        "startLine": 87,
        "startChar": 0,
        "endLine": 89,
        "endChar": 68
      },
      "revId": "d0350be85965c2e450020433f068990ec8dc3e39",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c44af5bc_d444c091",
        "filename": "rtc_base/async_packet_socket.h",
        "patchSetId": 3
      },
      "lineNbr": 89,
      "author": {
        "id": 5234
      },
      "writtenOn": "2021-09-30T08:47:22Z",
      "side": 1,
      "message": "I think the main obstacle is downstream implementations of the PacketSocketFactory interface, and implementing CreateServerTcpSocket, where return type is going to change from AsyncPacketSocket to Async(Packet)Listensocket. The inheritance hack was intended to deal with this by making discrepancy in return types match the covariant return type feature, but I\u0027m thinking that\u0027s maybe too clever, and it might break in other context, e.g., if downstream code callse the interface CreateServerTcpSocket and wants to assign the result to an AsyncPacketSocket pointer.\n\nI\u0027m currently leaning towards this dance:\n\n1. Land a cl to introduce the new name as an alias.\n\n2. Update downstream code to use the new name when handling server sockets.\n\n3. Split the class in two (this cl, but without the inheritance hack).\n\nDo you see any easier way?",
      "parentUuid": "1b48dafe_c90f6b15",
      "range": {
        "startLine": 87,
        "startChar": 0,
        "endLine": 89,
        "endChar": 68
      },
      "revId": "d0350be85965c2e450020433f068990ec8dc3e39",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c61e949b_33efb999",
        "filename": "rtc_base/async_packet_socket.h",
        "patchSetId": 3
      },
      "lineNbr": 89,
      "author": {
        "id": 5634
      },
      "writtenOn": "2021-09-30T08:55:06Z",
      "side": 1,
      "message": "This definitely seems like the cleanest way - if we stop/pause at any place in the process, the hierarchy is obvious. It does mean that the downstream fixes will have to happen before we reap the benefits (splitting the class), but we\u0027re not in a tearing hurry.",
      "parentUuid": "c44af5bc_d444c091",
      "range": {
        "startLine": 87,
        "startChar": 0,
        "endLine": 89,
        "endChar": 68
      },
      "revId": "d0350be85965c2e450020433f068990ec8dc3e39",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ed3ba69a_ce60903f",
        "filename": "rtc_base/async_packet_socket.h",
        "patchSetId": 3
      },
      "lineNbr": 89,
      "author": {
        "id": 5234
      },
      "writtenOn": "2021-09-30T13:31:36Z",
      "side": 1,
      "message": "Still a bit worried about how to make it work, if we have downstream implementations of PacketSocketFactory::CreateServerTcpSocket and creates and returns a custom class. Maybe we\u0027ll need additional steps.\n\nAnd some cases may be easier, e.g., https://source.chromium.org/chromium/chromium/src/+/main:remoting/protocol/chromium_socket_factory.cc;drc\u003de9178e48b3e17acf7e6cbd554700aca0d0c825d5;l\u003d432 just returns nullptr, and doesn\u0027t care much what type that is.",
      "parentUuid": "c61e949b_33efb999",
      "range": {
        "startLine": 87,
        "startChar": 0,
        "endLine": 89,
        "endChar": 68
      },
      "revId": "d0350be85965c2e450020433f068990ec8dc3e39",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a189aa01_b0ea68ad",
        "filename": "rtc_base/async_packet_socket.h",
        "patchSetId": 3
      },
      "lineNbr": 89,
      "author": {
        "id": 5234
      },
      "writtenOn": "2021-10-19T09:07:09Z",
      "side": 1,
      "message": "Chromium case was solved by deleting the offending code, since the code paths via P2PSocketTcpServer were unused. See https://chromium-review.googlesource.com/c/chromium/src/+/3229278.",
      "parentUuid": "ed3ba69a_ce60903f",
      "range": {
        "startLine": 87,
        "startChar": 0,
        "endLine": 89,
        "endChar": 68
      },
      "revId": "d0350be85965c2e450020433f068990ec8dc3e39",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    }
  ]
}