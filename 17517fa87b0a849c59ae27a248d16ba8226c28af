{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "8e03344f_2f9b6115",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5122
      },
      "writtenOn": "2022-09-26T12:28:15Z",
      "side": 1,
      "message": "Hi Danil, could you PTAL? Alessio",
      "revId": "17517fa87b0a849c59ae27a248d16ba8226c28af",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "761c489e_256adf4b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5019
      },
      "writtenOn": "2022-09-26T12:31:57Z",
      "side": 1,
      "message": "why is one better than the other?\n(personally I find both of them equally acceptable)",
      "revId": "17517fa87b0a849c59ae27a248d16ba8226c28af",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "69b7e4b2_940d519c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5122
      },
      "writtenOn": "2022-09-26T12:44:08Z",
      "side": 1,
      "message": "Right, no style guide recommendation/preference here.\n\nI was convinced that the recommendation was to use `has_value()` - which I personally find easier to read and, as it exists, I wonder why one should use another way.\n\nBut as it\u0027s just personal taste, I\u0027m ok with abandoning this change.",
      "parentUuid": "761c489e_256adf4b",
      "revId": "17517fa87b0a849c59ae27a248d16ba8226c28af",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "d2478f62_28480bfb",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 5019
      },
      "writtenOn": "2022-09-26T12:53:35Z",
      "side": 1,
      "message": "Would prefer to abandon this change.\n\nBecause there is no official preference, in new code in reviews I comment about it only for local consistency, and for existence code push against any change to avoid changing personal preference back and forth depending on who touched this code last.\n\nPersonally I find another one a bit easier to read: clearer it is a check that anything other than that one specific value is ok,\nwhile .has_value() is method call that in theory is more flexible, may mean more things, and thus personally I find a bit harder to parse.\nThere is also 3rd option that I also find acceptable - contextual conversion to bool:\nif (extension.estimated_capture_clock_offset) { ... }",
      "parentUuid": "69b7e4b2_940d519c",
      "revId": "17517fa87b0a849c59ae27a248d16ba8226c28af",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "At least one maximum vote for label \u0027Code-Review\u0027 is required"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader AND -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "label:Bot-Commit\u003d+1"
          }
        },
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader AND -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Code-Review=MAX,user=non_uploader","label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"label:Bot-Commit=+1"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Bot-Commit=+1"]}
      },
      "patchSetCommitId": "17517fa87b0a849c59ae27a248d16ba8226c28af",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforced_gerrit"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforcement-satisfied_gerrit"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "17517fa87b0a849c59ae27a248d16ba8226c28af",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}