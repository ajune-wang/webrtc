{
  "comments": [
    {
      "key": {
        "uuid": "509a86b6_a0c91120",
        "filename": "modules/pacing/packet_router.cc",
        "patchSetId": 2
      },
      "lineNbr": 215,
      "author": {
        "id": 5527
      },
      "writtenOn": "2017-12-13T10:16:06Z",
      "side": 1,
      "message": "Minor thing, but don\u0027t you think it\u0027s better to only copy |ssrcs| if you need to?",
      "revId": "78d6e66171cc35309b97dc125bfe47b9f09f7035",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c1f0f5ce_947949a6",
        "filename": "modules/pacing/packet_router.cc",
        "patchSetId": 2
      },
      "lineNbr": 215,
      "author": {
        "id": 5019
      },
      "writtenOn": "2017-12-13T11:51:14Z",
      "side": 1,
      "message": "hm, you right, I can pass ssrcs by value to SendRemb when OnReceiveBitrateChanged will take it by value too. Until then, do not see downsides to keep passing ssrcs by const\u0026 to SendRemb",
      "parentUuid": "509a86b6_a0c91120",
      "revId": "78d6e66171cc35309b97dc125bfe47b9f09f7035",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "894719b9_3ccd2fa6",
        "filename": "modules/pacing/packet_router.h",
        "patchSetId": 2
      },
      "lineNbr": 75,
      "author": {
        "id": 5234
      },
      "writtenOn": "2017-12-13T09:41:05Z",
      "side": 1,
      "message": "Consistency with SetRemb makes sense. But maybe we need to think about the right type to represent bitrates? I guess we\u0027re unlikely to sustain more than 2^31 bit/s (appr. 2Gbps) anytime soon, but we don\u0027t want things to break down if, e.g, we probe capacity over a 10Gbps network. Alternatives might be int64_t, long (not sure what\u0027s the general preference is with regards to types with explicit bit size) or float.",
      "range": {
        "startLine": 75,
        "startChar": 35,
        "endLine": 75,
        "endChar": 38
      },
      "revId": "78d6e66171cc35309b97dc125bfe47b9f09f7035",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "75445edb_13e04c4d",
        "filename": "modules/pacing/packet_router.h",
        "patchSetId": 2
      },
      "lineNbr": 75,
      "author": {
        "id": 5019
      },
      "writtenOn": "2017-12-13T09:57:10Z",
      "side": 1,
      "message": "style suggest int64 for numbers that can be more than 2^31\nhttps://google.github.io/styleguide/cppguide.html#Integer_Types\n\nAs far as I know 2Gbit is about 100 more than maximum bitrate webrtc probes for.\nSo I consider using int64 for bitrate preliminary.",
      "parentUuid": "894719b9_3ccd2fa6",
      "range": {
        "startLine": 75,
        "startChar": 35,
        "endLine": 75,
        "endChar": 38
      },
      "revId": "78d6e66171cc35309b97dc125bfe47b9f09f7035",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "78e8f82d_e168a807",
        "filename": "modules/pacing/packet_router.h",
        "patchSetId": 2
      },
      "lineNbr": 75,
      "author": {
        "id": 5234
      },
      "writtenOn": "2017-12-13T10:03:10Z",
      "side": 1,
      "message": "\u003e As far as I know 2Gbit is about 100 more than maximum bitrate webrtc probes for.\n\u003e So I consider using int64 for bitrate preliminary.\n\nI agree it\u0027s not urgent, we can discuss that for some later cl.",
      "parentUuid": "75445edb_13e04c4d",
      "range": {
        "startLine": 75,
        "startChar": 35,
        "endLine": 75,
        "endChar": 38
      },
      "revId": "78d6e66171cc35309b97dc125bfe47b9f09f7035",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "df2733b3_2c865b69",
        "filename": "modules/pacing/packet_router.h",
        "patchSetId": 2
      },
      "lineNbr": 75,
      "author": {
        "id": 5527
      },
      "writtenOn": "2017-12-13T10:16:06Z",
      "side": 1,
      "message": "I can\u0027t remember which class, but I know there are places where int64_t is needed to not overflow when calculating bitrates.\n\nNote that some applications use bitrates upwards of 50 Mbps, and I know they want to increase that as well. Combine this with probing we might send at 100-200 Mbps",
      "parentUuid": "75445edb_13e04c4d",
      "range": {
        "startLine": 75,
        "startChar": 35,
        "endLine": 75,
        "endChar": 38
      },
      "revId": "78d6e66171cc35309b97dc125bfe47b9f09f7035",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c1e9b911_e55adec8",
        "filename": "modules/pacing/packet_router.h",
        "patchSetId": 2
      },
      "lineNbr": 75,
      "author": {
        "id": 5019
      },
      "writtenOn": "2017-12-13T11:51:14Z",
      "side": 1,
      "message": "\"When in doubt, choose a larger type.\"\nint64_t it is then.\n(also updated RtcpTransceiver to use int64_t for bitrate)",
      "parentUuid": "df2733b3_2c865b69",
      "range": {
        "startLine": 75,
        "startChar": 35,
        "endLine": 75,
        "endChar": 38
      },
      "revId": "78d6e66171cc35309b97dc125bfe47b9f09f7035",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ca6baa2f_ef3e748b",
        "filename": "modules/pacing/packet_router.h",
        "patchSetId": 2
      },
      "lineNbr": 78,
      "author": {
        "id": 5234
      },
      "writtenOn": "2017-12-13T09:41:05Z",
      "side": 1,
      "message": "Will callers typically be able to use move when passing the ssrc vector? Or will we need to make a copy anyway?",
      "range": {
        "startLine": 78,
        "startChar": 33,
        "endLine": 78,
        "endChar": 60
      },
      "revId": "78d6e66171cc35309b97dc125bfe47b9f09f7035",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fdcfd9e6_e0b94e67",
        "filename": "modules/pacing/packet_router.h",
        "patchSetId": 2
      },
      "lineNbr": 78,
      "author": {
        "id": 5019
      },
      "writtenOn": "2017-12-13T09:57:10Z",
      "side": 1,
      "message": "I expect callers can usually move the vector.\nCurrently it is copied because OnReceiveBitrateChanged has only const reference to it.\nThat doesn\u0027t seem hard to change (in a different CL)\n\nOn the other side this list suppose to be small, uint32_t is trivial, so copy is not that expensive.",
      "parentUuid": "ca6baa2f_ef3e748b",
      "range": {
        "startLine": 78,
        "startChar": 33,
        "endLine": 78,
        "endChar": 60
      },
      "revId": "78d6e66171cc35309b97dc125bfe47b9f09f7035",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3f024310_0e86b9d5",
        "filename": "modules/pacing/packet_router.h",
        "patchSetId": 2
      },
      "lineNbr": 78,
      "author": {
        "id": 5234
      },
      "writtenOn": "2017-12-13T10:03:10Z",
      "side": 1,
      "message": "\u003e I expect callers can usually move the vector.\n\u003e Currently it is copied because OnReceiveBitrateChanged has only const reference to it.\n\u003e That doesn\u0027t seem hard to change (in a different CL)\n\nSounds good then.\n \n\u003e On the other side this list suppose to be small, uint32_t is trivial, so copy is not that expensive.\n\nIt\u0027s still expensive compared to just passing a single pointer.",
      "parentUuid": "fdcfd9e6_e0b94e67",
      "range": {
        "startLine": 78,
        "startChar": 33,
        "endLine": 78,
        "endChar": 60
      },
      "revId": "78d6e66171cc35309b97dc125bfe47b9f09f7035",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    }
  ]
}