{
  "comments": [
    {
      "key": {
        "uuid": "ab0e88f0_9ecd8c0d",
        "filename": "modules/pacing/pacing_controller.cc",
        "patchSetId": 1
      },
      "lineNbr": 58,
      "author": {
        "id": 5531
      },
      "writtenOn": "2020-04-16T15:53:06Z",
      "side": 1,
      "message": "Not sure what behavior you want here, but an optional with default value rarely makes sense, you probably want to use FieldTrialParameter here. If you have only one parameter ()and aren\u0027t planning to add more) you can consider using an anonymous parameter.",
      "range": {
        "startLine": 55,
        "startChar": 1,
        "endLine": 58,
        "endChar": 76
      },
      "revId": "61414398b21f50514e5a6c981b443bde11388730",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1111361b_25d39c09",
        "filename": "modules/pacing/pacing_controller.cc",
        "patchSetId": 1
      },
      "lineNbr": 58,
      "author": {
        "id": 5524
      },
      "writtenOn": "2020-04-16T17:42:23Z",
      "side": 1,
      "message": "Ah, right - meant to use a FieldTrialParameter. I\u0027m considering other things here, in fact I removed a parameter I had. These will be short-lived, I plan to do a bit of iterative testing and then get rid of this so not overly concerned with maintainability of this code.",
      "parentUuid": "ab0e88f0_9ecd8c0d",
      "range": {
        "startLine": 55,
        "startChar": 1,
        "endLine": 58,
        "endChar": 76
      },
      "revId": "61414398b21f50514e5a6c981b443bde11388730",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c77f1c36_505210b3",
        "filename": "modules/pacing/pacing_controller_unittest.cc",
        "patchSetId": 1
      },
      "lineNbr": 2002,
      "author": {
        "id": 5531
      },
      "writtenOn": "2020-04-16T15:53:06Z",
      "side": 1,
      "message": "Seems overly verbose, why not simply a regular scoped field trial override? Or if you think it\u0027s nice with an explicit parameter like this, maybe create a reusable helper taking a string (or string list)\n\nTrialConfigHelper field_trials {\"WebRTC-Pacer-DynamicPaddingTarget/WebRTC-Pacer-DynamicPaddingTarget\"};",
      "range": {
        "startLine": 1994,
        "startChar": 1,
        "endLine": 2002,
        "endChar": 17
      },
      "revId": "61414398b21f50514e5a6c981b443bde11388730",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "59e58298_55afc9fb",
        "filename": "modules/pacing/pacing_controller_unittest.cc",
        "patchSetId": 1
      },
      "lineNbr": 2002,
      "author": {
        "id": 5524
      },
      "writtenOn": "2020-04-16T17:42:23Z",
      "side": 1,
      "message": "Ah, right we have a fallback in the PacingController constructor, so I\u0027ll just use ScopedFieldTrial for now.\n\nWdyt about adding a helper class implementing WebRtcKeyValueConfig that takes a map\u003cstring, string\u003e as source of truth? Would make testing simpler as we try to migrate more code to injectable configs instead of global/static ones? Not in this CL though.",
      "parentUuid": "c77f1c36_505210b3",
      "range": {
        "startLine": 1994,
        "startChar": 1,
        "endLine": 2002,
        "endChar": 17
      },
      "revId": "61414398b21f50514e5a6c981b443bde11388730",
      "serverId": "58829da1-049c-39fb-b951-ebdcd0984767",
      "unresolved": false
    }
  ]
}